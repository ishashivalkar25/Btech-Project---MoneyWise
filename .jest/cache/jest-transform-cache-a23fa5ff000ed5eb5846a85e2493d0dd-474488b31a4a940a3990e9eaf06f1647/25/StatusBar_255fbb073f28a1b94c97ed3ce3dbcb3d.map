{"version":3,"names":["_processColor","_interopRequireDefault","require","_Platform","_NativeStatusBarManagerAndroid","_NativeStatusBarManagerIOS","_invariant","React","_interopRequireWildcard","_NativeStatusBarManag","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","assign","createStackEntry","props","_props$animated","_props$showHideTransi","animated","showHideTransition","backgroundColor","value","barStyle","translucent","hidden","transition","networkActivityIndicatorVisible","StatusBar","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","_stackEntry","_createClass2","componentDidMount","pushStackEntry","componentWillUnmount","popStackEntry","componentDidUpdate","replaceStackEntry","render","setHidden","animation","_defaultProps","Platform","OS","NativeStatusBarManagerIOS","NativeStatusBarManagerAndroid","setBarStyle","style","setStyle","setNetworkActivityIndicatorVisible","visible","console","warn","setBackgroundColor","color","processedColor","processColor","invariant","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"sources":["StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {...defaultValues},\n  );\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack: Array<any> = [];\n\n  static _defaultProps: any = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean): void {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        // Activities are not translucent by default, so always set if true.\n        if (\n          !oldProps ||\n          oldProps.translucent !== mergedProps.translucent ||\n          mergedProps.translucent\n        ) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"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"}