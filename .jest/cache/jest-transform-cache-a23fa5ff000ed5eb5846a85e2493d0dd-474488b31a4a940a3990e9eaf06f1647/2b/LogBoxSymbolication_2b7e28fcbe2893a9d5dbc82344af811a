05f2329cfaa370addc58367d8df17d5a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteStack = deleteStack;
exports.symbolicate = symbolicate;
var _symbolicateStackTrace = _interopRequireDefault(require("../../Core/Devtools/symbolicateStackTrace"));
var cache = new Map();
var sanitize = function sanitize(_ref) {
  var maybeStack = _ref.stack,
    codeFrame = _ref.codeFrame;
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }
  var stack = [];
  for (var maybeFrame of maybeStack) {
    var collapse = false;
    if ('collapse' in maybeFrame) {
      if (typeof maybeFrame.collapse !== 'boolean') {
        throw new Error('Expected stack frame `collapse` to be a boolean.');
      }
      collapse = maybeFrame.collapse;
    }
    stack.push({
      column: maybeFrame.column,
      file: maybeFrame.file,
      lineNumber: maybeFrame.lineNumber,
      methodName: maybeFrame.methodName,
      collapse: collapse
    });
  }
  return {
    stack: stack,
    codeFrame: codeFrame
  };
};
function deleteStack(stack) {
  cache.delete(stack);
}
function symbolicate(stack) {
  var promise = cache.get(stack);
  if (promise == null) {
    promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);
    cache.set(stack, promise);
  }
  return promise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3ltYm9saWNhdGVTdGFja1RyYWNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJjYWNoZSIsIk1hcCIsInNhbml0aXplIiwiX3JlZiIsIm1heWJlU3RhY2siLCJzdGFjayIsImNvZGVGcmFtZSIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwibWF5YmVGcmFtZSIsImNvbGxhcHNlIiwicHVzaCIsImNvbHVtbiIsImZpbGUiLCJsaW5lTnVtYmVyIiwibWV0aG9kTmFtZSIsImRlbGV0ZVN0YWNrIiwiZGVsZXRlIiwic3ltYm9saWNhdGUiLCJwcm9taXNlIiwiZ2V0Iiwic3ltYm9saWNhdGVTdGFja1RyYWNlIiwidGhlbiIsInNldCJdLCJzb3VyY2VzIjpbIkxvZ0JveFN5bWJvbGljYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtTeW1ib2xpY2F0ZWRTdGFja1RyYWNlfSBmcm9tICcuLi8uLi9Db3JlL0RldnRvb2xzL3N5bWJvbGljYXRlU3RhY2tUcmFjZSc7XG5pbXBvcnQgdHlwZSB7U3RhY2tGcmFtZX0gZnJvbSAnLi4vLi4vQ29yZS9OYXRpdmVFeGNlcHRpb25zTWFuYWdlcic7XG5cbmltcG9ydCBzeW1ib2xpY2F0ZVN0YWNrVHJhY2UgZnJvbSAnLi4vLi4vQ29yZS9EZXZ0b29scy9zeW1ib2xpY2F0ZVN0YWNrVHJhY2UnO1xuXG5leHBvcnQgdHlwZSBTdGFjayA9IEFycmF5PFN0YWNrRnJhbWU+O1xuXG5jb25zdCBjYWNoZTogTWFwPFN0YWNrLCBQcm9taXNlPFN5bWJvbGljYXRlZFN0YWNrVHJhY2U+PiA9IG5ldyBNYXAoKTtcblxuLyoqXG4gKiBTYW5pdGl6ZSBiZWNhdXNlIHNvbWV0aW1lcywgYHN5bWJvbGljYXRlU3RhY2tUcmFjZWAgZ2l2ZXMgdXMgaW52YWxpZCB2YWx1ZXMuXG4gKi9cbmNvbnN0IHNhbml0aXplID0gKHtcbiAgc3RhY2s6IG1heWJlU3RhY2ssXG4gIGNvZGVGcmFtZSxcbn06IFN5bWJvbGljYXRlZFN0YWNrVHJhY2UpOiBTeW1ib2xpY2F0ZWRTdGFja1RyYWNlID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlU3RhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayB0byBiZSBhbiBhcnJheS4nKTtcbiAgfVxuICBjb25zdCBzdGFjazogQXJyYXk8U3RhY2tGcmFtZT4gPSBbXTtcbiAgZm9yIChjb25zdCBtYXliZUZyYW1lIG9mIG1heWJlU3RhY2spIHtcbiAgICBsZXQgY29sbGFwc2UgPSBmYWxzZTtcbiAgICBpZiAoJ2NvbGxhcHNlJyBpbiBtYXliZUZyYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuY29sbGFwc2UgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIGZyYW1lIGBjb2xsYXBzZWAgdG8gYmUgYSBib29sZWFuLicpO1xuICAgICAgfVxuICAgICAgY29sbGFwc2UgPSBtYXliZUZyYW1lLmNvbGxhcHNlO1xuICAgIH1cbiAgICBzdGFjay5wdXNoKHtcbiAgICAgIGNvbHVtbjogbWF5YmVGcmFtZS5jb2x1bW4sXG4gICAgICBmaWxlOiBtYXliZUZyYW1lLmZpbGUsXG4gICAgICBsaW5lTnVtYmVyOiBtYXliZUZyYW1lLmxpbmVOdW1iZXIsXG4gICAgICBtZXRob2ROYW1lOiBtYXliZUZyYW1lLm1ldGhvZE5hbWUsXG4gICAgICBjb2xsYXBzZSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge3N0YWNrLCBjb2RlRnJhbWV9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVN0YWNrKHN0YWNrOiBTdGFjayk6IHZvaWQge1xuICBjYWNoZS5kZWxldGUoc3RhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ltYm9saWNhdGUoc3RhY2s6IFN0YWNrKTogUHJvbWlzZTxTeW1ib2xpY2F0ZWRTdGFja1RyYWNlPiB7XG4gIGxldCBwcm9taXNlID0gY2FjaGUuZ2V0KHN0YWNrKTtcbiAgaWYgKHByb21pc2UgPT0gbnVsbCkge1xuICAgIHByb21pc2UgPSBzeW1ib2xpY2F0ZVN0YWNrVHJhY2Uoc3RhY2spLnRoZW4oc2FuaXRpemUpO1xuICAgIGNhY2hlLnNldChzdGFjaywgcHJvbWlzZSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBYUEsSUFBQUEsc0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUlBLElBQU1DLEtBQWtELEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7QUFLcEUsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUFDLElBQUEsRUFHd0M7RUFBQSxJQUY3Q0MsVUFBVSxHQUFBRCxJQUFBLENBQWpCRSxLQUFLO0lBQ0xDLFNBQVMsR0FBQUgsSUFBQSxDQUFURyxTQUFTO0VBRVQsSUFBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osVUFBVSxDQUFDLEVBQUU7SUFDOUIsTUFBTSxJQUFJSyxLQUFLLENBQUMsZ0NBQWdDLENBQUM7RUFDbkQ7RUFDQSxJQUFNSixLQUF3QixHQUFHLEVBQUU7RUFDbkMsS0FBSyxJQUFNSyxVQUFVLElBQUlOLFVBQVUsRUFBRTtJQUNuQyxJQUFJTyxRQUFRLEdBQUcsS0FBSztJQUNwQixJQUFJLFVBQVUsSUFBSUQsVUFBVSxFQUFFO01BQzVCLElBQUksT0FBT0EsVUFBVSxDQUFDQyxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzVDLE1BQU0sSUFBSUYsS0FBSyxDQUFDLGtEQUFrRCxDQUFDO01BQ3JFO01BQ0FFLFFBQVEsR0FBR0QsVUFBVSxDQUFDQyxRQUFRO0lBQ2hDO0lBQ0FOLEtBQUssQ0FBQ08sSUFBSSxDQUFDO01BQ1RDLE1BQU0sRUFBRUgsVUFBVSxDQUFDRyxNQUFNO01BQ3pCQyxJQUFJLEVBQUVKLFVBQVUsQ0FBQ0ksSUFBSTtNQUNyQkMsVUFBVSxFQUFFTCxVQUFVLENBQUNLLFVBQVU7TUFDakNDLFVBQVUsRUFBRU4sVUFBVSxDQUFDTSxVQUFVO01BQ2pDTCxRQUFRLEVBQVJBO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7RUFDQSxPQUFPO0lBQUNOLEtBQUssRUFBTEEsS0FBSztJQUFFQyxTQUFTLEVBQVRBO0VBQVMsQ0FBQztBQUMzQixDQUFDO0FBRU0sU0FBU1csV0FBV0EsQ0FBQ1osS0FBWSxFQUFRO0VBQzlDTCxLQUFLLENBQUNrQixNQUFNLENBQUNiLEtBQUssQ0FBQztBQUNyQjtBQUVPLFNBQVNjLFdBQVdBLENBQUNkLEtBQVksRUFBbUM7RUFDekUsSUFBSWUsT0FBTyxHQUFHcEIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDaEIsS0FBSyxDQUFDO0VBQzlCLElBQUllLE9BQU8sSUFBSSxJQUFJLEVBQUU7SUFDbkJBLE9BQU8sR0FBRyxJQUFBRSw4QkFBcUIsRUFBQ2pCLEtBQUssQ0FBQyxDQUFDa0IsSUFBSSxDQUFDckIsUUFBUSxDQUFDO0lBQ3JERixLQUFLLENBQUN3QixHQUFHLENBQUNuQixLQUFLLEVBQUVlLE9BQU8sQ0FBQztFQUMzQjtFQUVBLE9BQU9BLE9BQU87QUFDaEIifQ==