a2c0ad1dfbbaf5b875c9f01d64e35f0b
(function () {
  var n;
  function aa(a) {
    var b = 0;
    return function () {
      return b < a.length ? {
        done: !1,
        value: a[b++]
      } : {
        done: !0
      };
    };
  }
  function q(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : {
      next: aa(a)
    };
  }
  var ba = "function" == typeof Object.create ? Object.create : function (a) {
      function b() {}
      b.prototype = a;
      return new b();
    },
    ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
      if (a == Array.prototype || a == Object.prototype) return a;
      a[b] = c.value;
      return a;
    };
  function da(a) {
    a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
    for (var b = 0; b < a.length; ++b) {
      var c = a[b];
      if (c && c.Math == Math) return c;
    }
    throw Error("Cannot find global object");
  }
  var r = da(this);
  function u(a, b) {
    if (b) a: {
      var c = r;
      a = a.split(".");
      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        if (!(e in c)) break a;
        c = c[e];
      }
      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && ca(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  }
  var ea;
  if ("function" == typeof Object.setPrototypeOf) ea = Object.setPrototypeOf;else {
    var fa;
    a: {
      var ha = {
          a: !0
        },
        ia = {};
      try {
        ia.__proto__ = ha;
        fa = ia.a;
        break a;
      } catch (a) {}
      fa = !1;
    }
    ea = fa ? function (a, b) {
      a.__proto__ = b;
      if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
      return a;
    } : null;
  }
  var ja = ea;
  u("Symbol", function (a) {
    function b(h) {
      if (this instanceof b) throw new TypeError("Symbol is not a constructor");
      return new c(d + (h || "") + "_" + e++, h);
    }
    function c(h, f) {
      this.g = h;
      ca(this, "description", {
        configurable: !0,
        writable: !0,
        value: f
      });
    }
    if (a) return a;
    c.prototype.toString = function () {
      return this.g;
    };
    var d = "jscomp_symbol_" + (1E9 * Math.random() >>> 0) + "_",
      e = 0;
    return b;
  });
  u("Symbol.iterator", function (a) {
    if (a) return a;
    a = Symbol("Symbol.iterator");
    for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
      var d = r[b[c]];
      "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, {
        configurable: !0,
        writable: !0,
        value: function value() {
          return ka(aa(this));
        }
      });
    }
    return a;
  });
  function ka(a) {
    a = {
      next: a
    };
    a[Symbol.iterator] = function () {
      return this;
    };
    return a;
  }
  u("Promise", function (a) {
    function b(f) {
      this.g = 0;
      this.i = void 0;
      this.h = [];
      this.o = !1;
      var k = this.j();
      try {
        f(k.resolve, k.reject);
      } catch (l) {
        k.reject(l);
      }
    }
    function c() {
      this.g = null;
    }
    function d(f) {
      return f instanceof b ? f : new b(function (k) {
        k(f);
      });
    }
    if (a) return a;
    c.prototype.h = function (f) {
      if (null == this.g) {
        this.g = [];
        var k = this;
        this.i(function () {
          k.l();
        });
      }
      this.g.push(f);
    };
    var e = r.setTimeout;
    c.prototype.i = function (f) {
      e(f, 0);
    };
    c.prototype.l = function () {
      for (; this.g && this.g.length;) {
        var f = this.g;
        this.g = [];
        for (var k = 0; k < f.length; ++k) {
          var l = f[k];
          f[k] = null;
          try {
            l();
          } catch (m) {
            this.j(m);
          }
        }
      }
      this.g = null;
    };
    c.prototype.j = function (f) {
      this.i(function () {
        throw f;
      });
    };
    b.prototype.j = function () {
      function f(m) {
        return function (p) {
          l || (l = !0, m.call(k, p));
        };
      }
      var k = this,
        l = !1;
      return {
        resolve: f(this.B),
        reject: f(this.l)
      };
    };
    b.prototype.B = function (f) {
      if (f === this) this.l(new TypeError("A Promise cannot resolve to itself"));else if (f instanceof b) this.D(f);else {
        a: switch (typeof f) {
          case "object":
            var k = null != f;
            break a;
          case "function":
            k = !0;
            break a;
          default:
            k = !1;
        }
        k ? this.A(f) : this.m(f);
      }
    };
    b.prototype.A = function (f) {
      var k = void 0;
      try {
        k = f.then;
      } catch (l) {
        this.l(l);
        return;
      }
      "function" == typeof k ? this.G(k, f) : this.m(f);
    };
    b.prototype.l = function (f) {
      this.s(2, f);
    };
    b.prototype.m = function (f) {
      this.s(1, f);
    };
    b.prototype.s = function (f, k) {
      if (0 != this.g) throw Error("Cannot settle(" + f + ", " + k + "): Promise already settled in state" + this.g);
      this.g = f;
      this.i = k;
      2 === this.g && this.C();
      this.u();
    };
    b.prototype.C = function () {
      var f = this;
      e(function () {
        if (f.v()) {
          var k = r.console;
          "undefined" !== typeof k && k.error(f.i);
        }
      }, 1);
    };
    b.prototype.v = function () {
      if (this.o) return !1;
      var f = r.CustomEvent,
        k = r.Event,
        l = r.dispatchEvent;
      if ("undefined" === typeof l) return !0;
      "function" === typeof f ? f = new f("unhandledrejection", {
        cancelable: !0
      }) : "function" === typeof k ? f = new k("unhandledrejection", {
        cancelable: !0
      }) : (f = r.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", !1, !0, f));
      f.promise = this;
      f.reason = this.i;
      return l(f);
    };
    b.prototype.u = function () {
      if (null != this.h) {
        for (var f = 0; f < this.h.length; ++f) h.h(this.h[f]);
        this.h = null;
      }
    };
    var h = new c();
    b.prototype.D = function (f) {
      var k = this.j();
      f.la(k.resolve, k.reject);
    };
    b.prototype.G = function (f, k) {
      var l = this.j();
      try {
        f.call(k, l.resolve, l.reject);
      } catch (m) {
        l.reject(m);
      }
    };
    b.prototype.then = function (f, k) {
      function l(E, H) {
        return "function" == typeof E ? function (S) {
          try {
            m(E(S));
          } catch (Z) {
            p(Z);
          }
        } : H;
      }
      var m,
        p,
        t = new b(function (E, H) {
          m = E;
          p = H;
        });
      this.la(l(f, m), l(k, p));
      return t;
    };
    b.prototype.catch = function (f) {
      return this.then(void 0, f);
    };
    b.prototype.la = function (f, k) {
      function l() {
        switch (m.g) {
          case 1:
            f(m.i);
            break;
          case 2:
            k(m.i);
            break;
          default:
            throw Error("Unexpected state: " + m.g);
        }
      }
      var m = this;
      null == this.h ? h.h(l) : this.h.push(l);
      this.o = !0;
    };
    b.resolve = d;
    b.reject = function (f) {
      return new b(function (k, l) {
        l(f);
      });
    };
    b.race = function (f) {
      return new b(function (k, l) {
        for (var m = q(f), p = m.next(); !p.done; p = m.next()) d(p.value).la(k, l);
      });
    };
    b.all = function (f) {
      var k = q(f),
        l = k.next();
      return l.done ? d([]) : new b(function (m, p) {
        function t(S) {
          return function (Z) {
            E[S] = Z;
            H--;
            0 == H && m(E);
          };
        }
        var E = [],
          H = 0;
        do E.push(void 0), H++, d(l.value).la(t(E.length - 1), p), l = k.next(); while (!l.done);
      });
    };
    return b;
  });
  function la(a, b) {
    a instanceof String && (a += "");
    var c = 0,
      d = !1,
      e = {
        next: function next() {
          if (!d && c < a.length) {
            var h = c++;
            return {
              value: b(h, a[h]),
              done: !1
            };
          }
          d = !0;
          return {
            done: !0,
            value: void 0
          };
        }
      };
    e[Symbol.iterator] = function () {
      return e;
    };
    return e;
  }
  u("Array.prototype.values", function (a) {
    return a ? a : function () {
      return la(this, function (b, c) {
        return c;
      });
    };
  });
  u("Array.prototype.keys", function (a) {
    return a ? a : function () {
      return la(this, function (b) {
        return b;
      });
    };
  });
  function v(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  u("WeakMap", function (a) {
    function b(l) {
      this.g = (k += Math.random() + 1).toString();
      if (l) {
        l = q(l);
        for (var m; !(m = l.next()).done;) m = m.value, this.set(m[0], m[1]);
      }
    }
    function c() {}
    function d(l) {
      var m = typeof l;
      return "object" === m && null !== l || "function" === m;
    }
    function e(l) {
      if (!v(l, f)) {
        var m = new c();
        ca(l, f, {
          value: m
        });
      }
    }
    function h(l) {
      var m = Object[l];
      m && (Object[l] = function (p) {
        if (p instanceof c) return p;
        Object.isExtensible(p) && e(p);
        return m(p);
      });
    }
    if (function () {
      if (!a || !Object.seal) return !1;
      try {
        var l = Object.seal({}),
          m = Object.seal({}),
          p = new a([[l, 2], [m, 3]]);
        if (2 != p.get(l) || 3 != p.get(m)) return !1;
        p.delete(l);
        p.set(m, 4);
        return !p.has(l) && 4 == p.get(m);
      } catch (t) {
        return !1;
      }
    }()) return a;
    var f = "$jscomp_hidden_" + Math.random();
    h("freeze");
    h("preventExtensions");
    h("seal");
    var k = 0;
    b.prototype.set = function (l, m) {
      if (!d(l)) throw Error("Invalid WeakMap key");
      e(l);
      if (!v(l, f)) throw Error("WeakMap key fail: " + l);
      l[f][this.g] = m;
      return this;
    };
    b.prototype.get = function (l) {
      return d(l) && v(l, f) ? l[f][this.g] : void 0;
    };
    b.prototype.has = function (l) {
      return d(l) && v(l, f) && v(l[f], this.g);
    };
    b.prototype.delete = function (l) {
      return d(l) && v(l, f) && v(l[f], this.g) ? delete l[f][this.g] : !1;
    };
    return b;
  });
  u("Map", function (a) {
    function b() {
      var k = {};
      return k.V = k.next = k.head = k;
    }
    function c(k, l) {
      var m = k.g;
      return ka(function () {
        if (m) {
          for (; m.head != k.g;) m = m.V;
          for (; m.next != m.head;) return m = m.next, {
            done: !1,
            value: l(m)
          };
          m = null;
        }
        return {
          done: !0,
          value: void 0
        };
      });
    }
    function d(k, l) {
      var m = l && typeof l;
      "object" == m || "function" == m ? h.has(l) ? m = h.get(l) : (m = "" + ++f, h.set(l, m)) : m = "p_" + l;
      var p = k.h[m];
      if (p && v(k.h, m)) for (k = 0; k < p.length; k++) {
        var t = p[k];
        if (l !== l && t.key !== t.key || l === t.key) return {
          id: m,
          list: p,
          index: k,
          J: t
        };
      }
      return {
        id: m,
        list: p,
        index: -1,
        J: void 0
      };
    }
    function e(k) {
      this.h = {};
      this.g = b();
      this.size = 0;
      if (k) {
        k = q(k);
        for (var l; !(l = k.next()).done;) l = l.value, this.set(l[0], l[1]);
      }
    }
    if (function () {
      if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
      try {
        var k = Object.seal({
            x: 4
          }),
          l = new a(q([[k, "s"]]));
        if ("s" != l.get(k) || 1 != l.size || l.get({
          x: 4
        }) || l.set({
          x: 4
        }, "t") != l || 2 != l.size) return !1;
        var m = l.entries(),
          p = m.next();
        if (p.done || p.value[0] != k || "s" != p.value[1]) return !1;
        p = m.next();
        return p.done || 4 != p.value[0].x || "t" != p.value[1] || !m.next().done ? !1 : !0;
      } catch (t) {
        return !1;
      }
    }()) return a;
    var h = new WeakMap();
    e.prototype.set = function (k, l) {
      k = 0 === k ? 0 : k;
      var m = d(this, k);
      m.list || (m.list = this.h[m.id] = []);
      m.J ? m.J.value = l : (m.J = {
        next: this.g,
        V: this.g.V,
        head: this.g,
        key: k,
        value: l
      }, m.list.push(m.J), this.g.V.next = m.J, this.g.V = m.J, this.size++);
      return this;
    };
    e.prototype.delete = function (k) {
      k = d(this, k);
      return k.J && k.list ? (k.list.splice(k.index, 1), k.list.length || delete this.h[k.id], k.J.V.next = k.J.next, k.J.next.V = k.J.V, k.J.head = null, this.size--, !0) : !1;
    };
    e.prototype.clear = function () {
      this.h = {};
      this.g = this.g.V = b();
      this.size = 0;
    };
    e.prototype.has = function (k) {
      return !!d(this, k).J;
    };
    e.prototype.get = function (k) {
      return (k = d(this, k).J) && k.value;
    };
    e.prototype.entries = function () {
      return c(this, function (k) {
        return [k.key, k.value];
      });
    };
    e.prototype.keys = function () {
      return c(this, function (k) {
        return k.key;
      });
    };
    e.prototype.values = function () {
      return c(this, function (k) {
        return k.value;
      });
    };
    e.prototype.forEach = function (k, l) {
      for (var m = this.entries(), p; !(p = m.next()).done;) p = p.value, k.call(l, p[1], p[0], this);
    };
    e.prototype[Symbol.iterator] = e.prototype.entries;
    var f = 0;
    return e;
  });
  u("Array.prototype.find", function (a) {
    return a ? a : function (b, c) {
      a: {
        var d = this;
        d instanceof String && (d = String(d));
        for (var e = d.length, h = 0; h < e; h++) {
          var f = d[h];
          if (b.call(c, f, h, d)) {
            b = f;
            break a;
          }
        }
        b = void 0;
      }
      return b;
    };
  });
  u("Array.prototype.entries", function (a) {
    return a ? a : function () {
      return la(this, function (b, c) {
        return [b, c];
      });
    };
  });
  u("Array.from", function (a) {
    return a ? a : function (b, c, d) {
      c = null != c ? c : function (k) {
        return k;
      };
      var e = [],
        h = "undefined" != typeof Symbol && Symbol.iterator && b[Symbol.iterator];
      if ("function" == typeof h) {
        b = h.call(b);
        for (var f = 0; !(h = b.next()).done;) e.push(c.call(d, h.value, f++));
      } else for (h = b.length, f = 0; f < h; f++) e.push(c.call(d, b[f], f));
      return e;
    };
  });
  u("Set", function (a) {
    function b(c) {
      this.g = new Map();
      if (c) {
        c = q(c);
        for (var d; !(d = c.next()).done;) this.add(d.value);
      }
      this.size = this.g.size;
    }
    if (function () {
      if (!a || "function" != typeof a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
      try {
        var c = Object.seal({
            x: 4
          }),
          d = new a(q([c]));
        if (!d.has(c) || 1 != d.size || d.add(c) != d || 1 != d.size || d.add({
          x: 4
        }) != d || 2 != d.size) return !1;
        var e = d.entries(),
          h = e.next();
        if (h.done || h.value[0] != c || h.value[1] != c) return !1;
        h = e.next();
        return h.done || h.value[0] == c || 4 != h.value[0].x || h.value[1] != h.value[0] ? !1 : e.next().done;
      } catch (f) {
        return !1;
      }
    }()) return a;
    b.prototype.add = function (c) {
      c = 0 === c ? 0 : c;
      this.g.set(c, c);
      this.size = this.g.size;
      return this;
    };
    b.prototype.delete = function (c) {
      c = this.g.delete(c);
      this.size = this.g.size;
      return c;
    };
    b.prototype.clear = function () {
      this.g.clear();
      this.size = 0;
    };
    b.prototype.has = function (c) {
      return this.g.has(c);
    };
    b.prototype.entries = function () {
      return this.g.entries();
    };
    b.prototype.values = function () {
      return this.g.values();
    };
    b.prototype.keys = b.prototype.values;
    b.prototype[Symbol.iterator] = b.prototype.values;
    b.prototype.forEach = function (c, d) {
      var e = this;
      this.g.forEach(function (h) {
        return c.call(d, h, h, e);
      });
    };
    return b;
  });
  var goog = goog || {},
    w = this || self;
  function ma() {}
  function na(a) {
    var b = typeof a;
    b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    return "array" == b || "object" == b && "number" == typeof a.length;
  }
  function oa(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }
  function pa(a) {
    return Object.prototype.hasOwnProperty.call(a, qa) && a[qa] || (a[qa] = ++ra);
  }
  var qa = "closure_uid_" + (1E9 * Math.random() >>> 0),
    ra = 0;
  function sa(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }
  function ta(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }
    return function () {
      return a.apply(b, arguments);
    };
  }
  function x(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? x = sa : x = ta;
    return x.apply(null, arguments);
  }
  function ua(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }
  function y(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.Z = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
    a.dc = function (d, e, h) {
      for (var f = Array(arguments.length - 2), k = 2; k < arguments.length; k++) f[k - 2] = arguments[k];
      return b.prototype[e].apply(d, f);
    };
  }
  ;
  function z() {
    0 != va && (wa[pa(this)] = this);
    this.s = this.s;
    this.o = this.o;
  }
  var va = 0,
    wa = {};
  z.prototype.s = !1;
  z.prototype.ua = function () {
    if (!this.s && (this.s = !0, this.O(), 0 != va)) {
      var a = pa(this);
      if (0 != va && this.o && 0 < this.o.length) throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete wa[a];
    }
  };
  z.prototype.O = function () {
    if (this.o) for (; this.o.length;) this.o.shift()();
  };
  var xa = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;
    return -1;
  };
  function ya(a) {
    var b = a.length;
    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];
      return c;
    }
    return [];
  }
  function za(a, b) {
    for (var c = 1; c < arguments.length; c++) {
      var d = arguments[c];
      if (na(d)) {
        var e = a.length || 0,
          h = d.length || 0;
        a.length = e + h;
        for (var f = 0; f < h; f++) a[e + f] = d[f];
      } else a.push(d);
    }
  }
  ;
  function A(a, b) {
    this.type = a;
    this.g = this.target = b;
    this.defaultPrevented = !1;
  }
  A.prototype.h = function () {
    this.defaultPrevented = !0;
  };
  var Aa = function () {
    if (!w.addEventListener || !Object.defineProperty) return !1;
    var a = !1,
      b = Object.defineProperty({}, "passive", {
        get: function get() {
          a = !0;
        }
      });
    try {
      w.addEventListener("test", ma, b), w.removeEventListener("test", ma, b);
    } catch (c) {}
    return a;
  }();
  function Ba(a) {
    return /^[\s\xa0]*$/.test(a);
  }
  var Ca = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  };
  function Da(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  ;
  function Ea() {
    var a = w.navigator;
    return a && (a = a.userAgent) ? a : "";
  }
  function B(a) {
    return -1 != Ea().indexOf(a);
  }
  ;
  function Fa(a) {
    Fa[" "](a);
    return a;
  }
  Fa[" "] = ma;
  function Ga(a, b, c) {
    return Object.prototype.hasOwnProperty.call(a, b) ? a[b] : a[b] = c(b);
  }
  ;
  var Ha = B("Opera"),
    Ia = B("Trident") || B("MSIE"),
    Ja = B("Edge"),
    Ka = Ja || Ia,
    La = B("Gecko") && !(-1 != Ea().toLowerCase().indexOf("webkit") && !B("Edge")) && !(B("Trident") || B("MSIE")) && !B("Edge"),
    Ma = -1 != Ea().toLowerCase().indexOf("webkit") && !B("Edge");
  function Na() {
    var a = w.document;
    return a ? a.documentMode : void 0;
  }
  var Oa;
  a: {
    var Pa = "",
      Qa = function () {
        var a = Ea();
        if (La) return /rv:([^\);]+)(\)|;)/.exec(a);
        if (Ja) return /Edge\/([\d\.]+)/.exec(a);
        if (Ia) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
        if (Ma) return /WebKit\/(\S+)/.exec(a);
        if (Ha) return /(?:Version)[ \/]?(\S+)/.exec(a);
      }();
    Qa && (Pa = Qa ? Qa[1] : "");
    if (Ia) {
      var Ra = Na();
      if (null != Ra && Ra > parseFloat(Pa)) {
        Oa = String(Ra);
        break a;
      }
    }
    Oa = Pa;
  }
  var Sa = {};
  function Ta() {
    return Ga(Sa, 9, function () {
      for (var a = 0, b = Ca(String(Oa)).split("."), c = Ca("9").split("."), d = Math.max(b.length, c.length), e = 0; 0 == a && e < d; e++) {
        var h = b[e] || "",
          f = c[e] || "";
        do {
          h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
          f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
          if (0 == h[0].length && 0 == f[0].length) break;
          a = Da(0 == h[1].length ? 0 : parseInt(h[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || Da(0 == h[2].length, 0 == f[2].length) || Da(h[2], f[2]);
          h = h[3];
          f = f[3];
        } while (0 == a);
      }
      return 0 <= a;
    });
  }
  var Ua;
  if (w.document && Ia) {
    var Va = Na();
    Ua = Va ? Va : parseInt(Oa, 10) || void 0;
  } else Ua = void 0;
  var Wa = Ua;
  function Xa(a, b) {
    A.call(this, a ? a.type : "");
    this.relatedTarget = this.g = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.state = null;
    this.pointerId = 0;
    this.pointerType = "";
    this.i = null;
    if (a) {
      var c = this.type = a.type,
        d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.g = b;
      if (b = a.relatedTarget) {
        if (La) {
          a: {
            try {
              Fa(b.nodeName);
              var e = !0;
              break a;
            } catch (h) {}
            e = !1;
          }
          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Ya[a.pointerType] || "";
      this.state = a.state;
      this.i = a;
      a.defaultPrevented && Xa.Z.h.call(this);
    }
  }
  y(Xa, A);
  var Ya = {
    2: "touch",
    3: "pen",
    4: "mouse"
  };
  Xa.prototype.h = function () {
    Xa.Z.h.call(this);
    var a = this.i;
    a.preventDefault ? a.preventDefault() : a.returnValue = !1;
  };
  var Za = "closure_listenable_" + (1E6 * Math.random() | 0);
  var $a = 0;
  function ab(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.oa = e;
    this.key = ++$a;
    this.ha = this.ka = !1;
  }
  function bb(a) {
    a.ha = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.oa = null;
  }
  ;
  function cb(a, b, c) {
    for (var d in a) b.call(c, a[d], d, a);
  }
  function db(a) {
    var b = {},
      c;
    for (c in a) b[c] = a[c];
    return b;
  }
  var eb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function fb(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];
      for (c in d) a[c] = d[c];
      for (var h = 0; h < eb.length; h++) c = eb[h], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
  }
  ;
  function gb(a) {
    this.src = a;
    this.g = {};
    this.h = 0;
  }
  gb.prototype.add = function (a, b, c, d, e) {
    var h = a.toString();
    a = this.g[h];
    a || (a = this.g[h] = [], this.h++);
    var f = hb(a, b, d, e);
    -1 < f ? (b = a[f], c || (b.ka = !1)) : (b = new ab(b, this.src, h, !!d, e), b.ka = c, a.push(b));
    return b;
  };
  function ib(a, b) {
    var c = b.type;
    if (c in a.g) {
      var d = a.g[c],
        e = xa(d, b),
        h;
      (h = 0 <= e) && Array.prototype.splice.call(d, e, 1);
      h && (bb(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
    }
  }
  function hb(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var h = a[e];
      if (!h.ha && h.listener == b && h.capture == !!c && h.oa == d) return e;
    }
    return -1;
  }
  ;
  var jb = "closure_lm_" + (1E6 * Math.random() | 0),
    kb = {},
    lb = 0;
  function mb(a, b, c, d, e) {
    if (d && d.once) return nb(a, b, c, d, e);
    if (Array.isArray(b)) {
      for (var h = 0; h < b.length; h++) mb(a, b[h], c, d, e);
      return null;
    }
    c = ob(c);
    return a && a[Za] ? a.P(b, c, oa(d) ? !!d.capture : !!d, e) : pb(a, b, c, !1, d, e);
  }
  function pb(a, b, c, d, e, h) {
    if (!b) throw Error("Invalid event type");
    var f = oa(e) ? !!e.capture : !!e,
      k = qb(a);
    k || (a[jb] = k = new gb(a));
    c = k.add(b, c, d, f, h);
    if (c.proxy) return c;
    d = rb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener) Aa || (e = f), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(sb(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
    lb++;
    return c;
  }
  function rb() {
    function a(c) {
      return b.call(a.src, a.listener, c);
    }
    var b = tb;
    return a;
  }
  function nb(a, b, c, d, e) {
    if (Array.isArray(b)) {
      for (var h = 0; h < b.length; h++) nb(a, b[h], c, d, e);
      return null;
    }
    c = ob(c);
    return a && a[Za] ? a.R(b, c, oa(d) ? !!d.capture : !!d, e) : pb(a, b, c, !0, d, e);
  }
  function ub(a, b, c, d, e) {
    if (Array.isArray(b)) for (var h = 0; h < b.length; h++) ub(a, b[h], c, d, e);else (d = oa(d) ? !!d.capture : !!d, c = ob(c), a && a[Za]) ? (a = a.i, b = String(b).toString(), b in a.g && (h = a.g[b], c = hb(h, c, d, e), -1 < c && (bb(h[c]), Array.prototype.splice.call(h, c, 1), 0 == h.length && (delete a.g[b], a.h--)))) : a && (a = qb(a)) && (b = a.g[b.toString()], a = -1, b && (a = hb(b, c, d, e)), (c = -1 < a ? b[a] : null) && vb(c));
  }
  function vb(a) {
    if ("number" !== typeof a && a && !a.ha) {
      var b = a.src;
      if (b && b[Za]) ib(b.i, a);else {
        var c = a.type,
          d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(sb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        lb--;
        (c = qb(b)) ? (ib(c, a), 0 == c.h && (c.src = null, b[jb] = null)) : bb(a);
      }
    }
  }
  function sb(a) {
    return a in kb ? kb[a] : kb[a] = "on" + a;
  }
  function tb(a, b) {
    if (a.ha) a = !0;else {
      b = new Xa(b, this);
      var c = a.listener,
        d = a.oa || a.src;
      a.ka && vb(a);
      a = c.call(d, b);
    }
    return a;
  }
  function qb(a) {
    a = a[jb];
    return a instanceof gb ? a : null;
  }
  var wb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
  function ob(a) {
    if ("function" === typeof a) return a;
    a[wb] || (a[wb] = function (b) {
      return a.handleEvent(b);
    });
    return a[wb];
  }
  ;
  function C() {
    z.call(this);
    this.i = new gb(this);
    this.T = this;
    this.K = null;
  }
  y(C, z);
  C.prototype[Za] = !0;
  C.prototype.removeEventListener = function (a, b, c, d) {
    ub(this, a, b, c, d);
  };
  function D(a, b) {
    var c,
      d = a.K;
    if (d) for (c = []; d; d = d.K) c.push(d);
    a = a.T;
    d = b.type || b;
    if ("string" === typeof b) b = new A(b, a);else if (b instanceof A) b.target = b.target || a;else {
      var e = b;
      b = new A(d, a);
      fb(b, e);
    }
    e = !0;
    if (c) for (var h = c.length - 1; 0 <= h; h--) {
      var f = b.g = c[h];
      e = xb(f, d, !0, b) && e;
    }
    f = b.g = a;
    e = xb(f, d, !0, b) && e;
    e = xb(f, d, !1, b) && e;
    if (c) for (h = 0; h < c.length; h++) f = b.g = c[h], e = xb(f, d, !1, b) && e;
  }
  C.prototype.O = function () {
    C.Z.O.call(this);
    if (this.i) {
      var a = this.i,
        b = 0,
        c;
      for (c in a.g) {
        for (var d = a.g[c], e = 0; e < d.length; e++) ++b, bb(d[e]);
        delete a.g[c];
        a.h--;
      }
    }
    this.K = null;
  };
  C.prototype.P = function (a, b, c, d) {
    return this.i.add(String(a), b, !1, c, d);
  };
  C.prototype.R = function (a, b, c, d) {
    return this.i.add(String(a), b, !0, c, d);
  };
  function xb(a, b, c, d) {
    b = a.i.g[String(b)];
    if (!b) return !0;
    b = b.concat();
    for (var e = !0, h = 0; h < b.length; ++h) {
      var f = b[h];
      if (f && !f.ha && f.capture == c) {
        var k = f.listener,
          l = f.oa || f.src;
        f.ka && ib(a.i, f);
        e = !1 !== k.call(l, d) && e;
      }
    }
    return e && !d.defaultPrevented;
  }
  ;
  var yb = w.JSON.stringify;
  function zb(a, b) {
    this.i = a;
    this.j = b;
    this.h = 0;
    this.g = null;
  }
  zb.prototype.get = function () {
    if (0 < this.h) {
      this.h--;
      var a = this.g;
      this.g = a.next;
      a.next = null;
    } else a = this.i();
    return a;
  };
  function Ab() {
    this.h = this.g = null;
  }
  Ab.prototype.add = function (a, b) {
    var c = Bb.get();
    c.set(a, b);
    this.h ? this.h.next = c : this.g = c;
    this.h = c;
  };
  function Cb() {
    var a = Db,
      b = null;
    a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
    return b;
  }
  var Bb = new zb(function () {
    return new Eb();
  }, function (a) {
    return a.reset();
  });
  function Eb() {
    this.next = this.g = this.h = null;
  }
  Eb.prototype.set = function (a, b) {
    this.h = a;
    this.g = b;
    this.next = null;
  };
  Eb.prototype.reset = function () {
    this.next = this.g = this.h = null;
  };
  function Fb(a) {
    w.setTimeout(function () {
      throw a;
    }, 0);
  }
  ;
  function Gb(a, b) {
    Hb || Ib();
    Jb || (Hb(), Jb = !0);
    Db.add(a, b);
  }
  var Hb;
  function Ib() {
    var a = w.Promise.resolve(void 0);
    Hb = function Hb() {
      a.then(Kb);
    };
  }
  var Jb = !1,
    Db = new Ab();
  function Kb() {
    for (var a; a = Cb();) {
      try {
        a.h.call(a.g);
      } catch (c) {
        Fb(c);
      }
      var b = Bb;
      b.j(a);
      100 > b.h && (b.h++, a.next = b.g, b.g = a);
    }
    Jb = !1;
  }
  ;
  function Lb(a, b) {
    C.call(this);
    this.h = a || 1;
    this.g = b || w;
    this.j = x(this.tb, this);
    this.l = Date.now();
  }
  y(Lb, C);
  n = Lb.prototype;
  n.ia = !1;
  n.U = null;
  n.tb = function () {
    if (this.ia) {
      var a = Date.now() - this.l;
      0 < a && a < .8 * this.h ? this.U = this.g.setTimeout(this.j, this.h - a) : (this.U && (this.g.clearTimeout(this.U), this.U = null), D(this, "tick"), this.ia && (Mb(this), this.start()));
    }
  };
  n.start = function () {
    this.ia = !0;
    this.U || (this.U = this.g.setTimeout(this.j, this.h), this.l = Date.now());
  };
  function Mb(a) {
    a.ia = !1;
    a.U && (a.g.clearTimeout(a.U), a.U = null);
  }
  n.O = function () {
    Lb.Z.O.call(this);
    Mb(this);
    delete this.g;
  };
  function Nb(a, b, c) {
    if ("function" === typeof a) c && (a = x(a, c));else if (a && "function" == typeof a.handleEvent) a = x(a.handleEvent, a);else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : w.setTimeout(a, b || 0);
  }
  ;
  function F(a, b, c) {
    z.call(this);
    this.m = null != c ? a.bind(c) : a;
    this.j = b;
    this.h = null;
    this.i = !1;
    this.g = null;
  }
  F.prototype = ba(z.prototype);
  F.prototype.constructor = F;
  if (ja) ja(F, z);else for (var Ob in z) if ("prototype" != Ob) if (Object.defineProperties) {
    var Pb = Object.getOwnPropertyDescriptor(z, Ob);
    Pb && Object.defineProperty(F, Ob, Pb);
  } else F[Ob] = z[Ob];
  F.Z = z.prototype;
  F.prototype.l = function (a) {
    this.h = arguments;
    this.g ? this.i = !0 : Qb(this);
  };
  F.prototype.O = function () {
    z.prototype.O.call(this);
    this.g && (w.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
  };
  function Qb(a) {
    a.g = Nb(function () {
      a.g = null;
      a.i && (a.i = !1, Qb(a));
    }, a.j);
    var b = a.h;
    a.h = null;
    a.m.apply(null, b);
  }
  ;
  function Rb(a) {
    z.call(this);
    this.h = a;
    this.g = {};
  }
  y(Rb, z);
  var Sb = [];
  function Tb(a, b, c, d) {
    Array.isArray(c) || (c && (Sb[0] = c.toString()), c = Sb);
    for (var e = 0; e < c.length; e++) {
      var h = mb(b, c[e], d || a.handleEvent, !1, a.h || a);
      if (!h) break;
      a.g[h.key] = h;
    }
  }
  function Ub(a) {
    cb(a.g, function (b, c) {
      this.g.hasOwnProperty(c) && vb(b);
    }, a);
    a.g = {};
  }
  Rb.prototype.O = function () {
    Rb.Z.O.call(this);
    Ub(this);
  };
  Rb.prototype.handleEvent = function () {
    throw Error("EventHandler.handleEvent not implemented");
  };
  function Vb() {
    this.g = !0;
  }
  Vb.prototype.Ha = function () {
    this.g = !1;
  };
  function Wb(a, b, c, d, e, h) {
    a.info(function () {
      if (a.g) {
        if (h) {
          var f = "";
          for (var k = h.split("&"), l = 0; l < k.length; l++) {
            var m = k[l].split("=");
            if (1 < m.length) {
              var p = m[0];
              m = m[1];
              var t = p.split("_");
              f = 2 <= t.length && "type" == t[1] ? f + (p + "=" + m + "&") : f + (p + "=redacted&");
            }
          }
        } else f = null;
      } else f = h;
      return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + f;
    });
  }
  function Xb(a, b, c, d, e, h, f) {
    a.info(function () {
      return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + h + " " + f;
    });
  }
  function Yb(a, b, c, d) {
    a.info(function () {
      return "XMLHTTP TEXT (" + b + "): " + Zb(a, c) + (d ? " " + d : "");
    });
  }
  function $b(a, b) {
    a.info(function () {
      return "TIMEOUT: " + b;
    });
  }
  Vb.prototype.info = function () {};
  function Zb(a, b) {
    if (!a.g) return b;
    if (!b) return null;
    try {
      var c = JSON.parse(b);
      if (c) for (a = 0; a < c.length; a++) if (Array.isArray(c[a])) {
        var d = c[a];
        if (!(2 > d.length)) {
          var e = d[1];
          if (Array.isArray(e) && !(1 > e.length)) {
            var h = e[0];
            if ("noop" != h && "stop" != h && "close" != h) for (var f = 1; f < e.length; f++) e[f] = "";
          }
        }
      }
      return yb(c);
    } catch (k) {
      return b;
    }
  }
  ;
  var G = {},
    ac = null;
  function bc() {
    return ac = ac || new C();
  }
  G.Wa = "serverreachability";
  function cc(a) {
    A.call(this, G.Wa, a);
  }
  y(cc, A);
  function dc(a) {
    var b = bc();
    D(b, new cc(b, a));
  }
  G.STAT_EVENT = "statevent";
  function ec(a, b) {
    A.call(this, G.STAT_EVENT, a);
    this.stat = b;
  }
  y(ec, A);
  function I(a) {
    var b = bc();
    D(b, new ec(b, a));
  }
  G.Xa = "timingevent";
  function fc(a, b) {
    A.call(this, G.Xa, a);
    this.size = b;
  }
  y(fc, A);
  function gc(a, b) {
    if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
    return w.setTimeout(function () {
      a();
    }, b);
  }
  ;
  var hc = {
    NO_ERROR: 0,
    ub: 1,
    Hb: 2,
    Gb: 3,
    Bb: 4,
    Fb: 5,
    Ib: 6,
    Ta: 7,
    TIMEOUT: 8,
    Lb: 9
  };
  var ic = {
    zb: "complete",
    Vb: "success",
    Ua: "error",
    Ta: "abort",
    Nb: "ready",
    Ob: "readystatechange",
    TIMEOUT: "timeout",
    Jb: "incrementaldata",
    Mb: "progress",
    Cb: "downloadprogress",
    cc: "uploadprogress"
  };
  function jc() {}
  jc.prototype.h = null;
  function kc(a) {
    return a.h || (a.h = a.i());
  }
  ;
  function lc() {}
  var mc = {
    OPEN: "a",
    yb: "b",
    Ua: "c",
    Kb: "d"
  };
  function nc() {
    A.call(this, "d");
  }
  y(nc, A);
  function oc() {
    A.call(this, "c");
  }
  y(oc, A);
  var pc;
  function qc() {}
  y(qc, jc);
  qc.prototype.g = function () {
    return new XMLHttpRequest();
  };
  qc.prototype.i = function () {
    return {};
  };
  pc = new qc();
  function rc(a, b, c, d) {
    this.l = a;
    this.j = b;
    this.m = c;
    this.Y = d || 1;
    this.W = new Rb(this);
    this.R = sc;
    a = Ka ? 125 : void 0;
    this.X = new Lb(a);
    this.I = null;
    this.i = !1;
    this.s = this.A = this.v = this.M = this.G = this.aa = this.B = null;
    this.D = [];
    this.g = null;
    this.C = 0;
    this.o = this.u = null;
    this.ca = -1;
    this.K = !1;
    this.P = 0;
    this.N = null;
    this.ea = this.L = this.da = this.T = !1;
    this.h = new tc();
  }
  function tc() {
    this.i = null;
    this.g = "";
    this.h = !1;
  }
  var sc = 45E3,
    uc = {},
    vc = {};
  n = rc.prototype;
  n.setTimeout = function (a) {
    this.R = a;
  };
  function wc(a, b, c) {
    a.M = 1;
    a.v = xc(J(b));
    a.s = c;
    a.T = !0;
    yc(a, null);
  }
  function yc(a, b) {
    a.G = Date.now();
    zc(a);
    a.A = J(a.v);
    var c = a.A,
      d = a.Y;
    Array.isArray(d) || (d = [String(d)]);
    Ac(c.i, "t", d);
    a.C = 0;
    c = a.l.I;
    a.h = new tc();
    a.g = Bc(a.l, c ? b : null, !a.s);
    0 < a.P && (a.N = new F(x(a.Sa, a, a.g), a.P));
    Tb(a.W, a.g, "readystatechange", a.qb);
    b = a.I ? db(a.I) : {};
    a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ja(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ja(a.A, a.u, null, b));
    dc(1);
    Wb(a.j, a.u, a.A, a.m, a.Y, a.s);
  }
  n.qb = function (a) {
    a = a.target;
    var b = this.N;
    b && 3 == K(a) ? b.l() : this.Sa(a);
  };
  n.Sa = function (a) {
    try {
      if (a == this.g) a: {
        var b = K(this.g),
          c = this.g.La(),
          d = this.g.fa();
        if (!(3 > b) && (3 != b || Ka || this.g && (this.h.h || this.g.ma() || Cc(this.g)))) {
          this.K || 4 != b || 7 == c || (8 == c || 0 >= d ? dc(3) : dc(2));
          Dc(this);
          var e = this.g.fa();
          this.ca = e;
          b: if (Ec(this)) {
            var h = Cc(this.g);
            a = "";
            var f = h.length,
              k = 4 == K(this.g);
            if (!this.h.i) {
              if ("undefined" === typeof TextDecoder) {
                L(this);
                Fc(this);
                var l = "";
                break b;
              }
              this.h.i = new w.TextDecoder();
            }
            for (c = 0; c < f; c++) this.h.h = !0, a += this.h.i.decode(h[c], {
              stream: k && c == f - 1
            });
            h.splice(0, f);
            this.h.g += a;
            this.C = 0;
            l = this.h.g;
          } else l = this.g.ma();
          this.i = 200 == e;
          Xb(this.j, this.u, this.A, this.m, this.Y, b, e);
          if (this.i) {
            if (this.da && !this.L) {
              b: {
                if (this.g) {
                  var m,
                    p = this.g;
                  if ((m = p.g ? p.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !Ba(m)) {
                    var t = m;
                    break b;
                  }
                }
                t = null;
              }
              if (e = t) Yb(this.j, this.m, e, "Initial handshake response via X-HTTP-Initial-Response"), this.L = !0, Gc(this, e);else {
                this.i = !1;
                this.o = 3;
                I(12);
                L(this);
                Fc(this);
                break a;
              }
            }
            this.T ? (Hc(this, b, l), Ka && this.i && 3 == b && (Tb(this.W, this.X, "tick", this.pb), this.X.start())) : (Yb(this.j, this.m, l, null), Gc(this, l));
            4 == b && L(this);
            this.i && !this.K && (4 == b ? Ic(this.l, this) : (this.i = !1, zc(this)));
          } else 400 == e && 0 < l.indexOf("Unknown SID") ? (this.o = 3, I(12)) : (this.o = 0, I(13)), L(this), Fc(this);
        }
      }
    } catch (E) {} finally {}
  };
  function Ec(a) {
    return a.g ? "GET" == a.u && 2 != a.M && a.l.Ka : !1;
  }
  function Hc(a, b, c) {
    for (var d = !0, e; !a.K && a.C < c.length;) if (e = Jc(a, c), e == vc) {
      4 == b && (a.o = 4, I(14), d = !1);
      Yb(a.j, a.m, null, "[Incomplete Response]");
      break;
    } else if (e == uc) {
      a.o = 4;
      I(15);
      Yb(a.j, a.m, c, "[Invalid Chunk]");
      d = !1;
      break;
    } else Yb(a.j, a.m, e, null), Gc(a, e);
    Ec(a) && e != vc && e != uc && (a.h.g = "", a.C = 0);
    4 != b || 0 != c.length || a.h.h || (a.o = 1, I(16), d = !1);
    a.i = a.i && d;
    d ? 0 < c.length && !a.ea && (a.ea = !0, b = a.l, b.g == a && b.ea && !b.M && (b.j.info("Great, no buffering proxy detected. Bytes received: " + c.length), Kc(b), b.M = !0, I(11))) : (Yb(a.j, a.m, c, "[Invalid Chunked Response]"), L(a), Fc(a));
  }
  n.pb = function () {
    if (this.g) {
      var a = K(this.g),
        b = this.g.ma();
      this.C < b.length && (Dc(this), Hc(this, a, b), this.i && 4 != a && zc(this));
    }
  };
  function Jc(a, b) {
    var c = a.C,
      d = b.indexOf("\n", c);
    if (-1 == d) return vc;
    c = Number(b.substring(c, d));
    if (isNaN(c)) return uc;
    d += 1;
    if (d + c > b.length) return vc;
    b = b.substr(d, c);
    a.C = d + c;
    return b;
  }
  n.cancel = function () {
    this.K = !0;
    L(this);
  };
  function zc(a) {
    a.aa = Date.now() + a.R;
    Lc(a, a.R);
  }
  function Lc(a, b) {
    if (null != a.B) throw Error("WatchDog timer not null");
    a.B = gc(x(a.ob, a), b);
  }
  function Dc(a) {
    a.B && (w.clearTimeout(a.B), a.B = null);
  }
  n.ob = function () {
    this.B = null;
    var a = Date.now();
    0 <= a - this.aa ? ($b(this.j, this.A), 2 != this.M && (dc(3), I(17)), L(this), this.o = 2, Fc(this)) : Lc(this, this.aa - a);
  };
  function Fc(a) {
    0 == a.l.H || a.K || Ic(a.l, a);
  }
  function L(a) {
    Dc(a);
    var b = a.N;
    b && "function" == typeof b.ua && b.ua();
    a.N = null;
    Mb(a.X);
    Ub(a.W);
    a.g && (b = a.g, a.g = null, b.abort(), b.ua());
  }
  function Gc(a, b) {
    try {
      var c = a.l;
      if (0 != c.H && (c.g == a || Mc(c.h, a))) if (!a.L && Mc(c.h, a) && 3 == c.H) {
        try {
          var d = c.Ma.g.parse(b);
        } catch (Wc) {
          d = null;
        }
        if (Array.isArray(d) && 3 == d.length) {
          var e = d;
          if (0 == e[0]) a: {
            if (!c.u) {
              if (c.g) if (c.g.G + 3E3 < a.G) Nc(c), Oc(c);else break a;
              Pc(c);
              I(18);
            }
          } else c.Ia = e[1], 0 < c.Ia - c.X && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = gc(x(c.lb, c), 6E3));
          if (1 >= Qc(c.h) && c.qa) {
            try {
              c.qa();
            } catch (Wc) {}
            c.qa = void 0;
          }
        } else M(c, 11);
      } else if ((a.L || c.g == a) && Nc(c), !Ba(b)) for (e = c.Ma.g.parse(b), b = 0; b < e.length; b++) {
        var h = e[b];
        c.X = h[0];
        h = h[1];
        if (2 == c.H) {
          if ("c" == h[0]) {
            c.K = h[1];
            c.ra = h[2];
            var f = h[3];
            null != f && (c.ta = f, c.j.info("VER=" + c.ta));
            var k = h[4];
            null != k && (c.Ja = k, c.j.info("SVER=" + c.Ja));
            var l = h[5];
            null != l && "number" === typeof l && 0 < l && (d = 1.5 * l, c.L = d, c.j.info("backChannelRequestTimeoutMs_=" + d));
            d = c;
            var m = a.g;
            if (m) {
              var p = m.g ? m.g.getResponseHeader("X-Client-Wire-Protocol") : null;
              if (p) {
                var t = d.h;
                t.g || -1 == p.indexOf("spdy") && -1 == p.indexOf("quic") && -1 == p.indexOf("h2") || (t.j = t.l, t.g = new Set(), t.h && (Rc(t, t.h), t.h = null));
              }
              if (d.D) {
                var E = m.g ? m.g.getResponseHeader("X-HTTP-Session-Id") : null;
                E && (d.Ga = E, N(d.G, d.D, E));
              }
            }
            c.H = 3;
            c.l && c.l.Ea();
            c.ea && (c.T = Date.now() - a.G, c.j.info("Handshake RTT: " + c.T + "ms"));
            d = c;
            var H = a;
            d.za = Sc(d, d.I ? d.ra : null, d.aa);
            if (H.L) {
              Tc(d.h, H);
              var S = H,
                Z = d.L;
              Z && S.setTimeout(Z);
              S.B && (Dc(S), zc(S));
              d.g = H;
            } else Uc(d);
            0 < c.i.length && Vc(c);
          } else "stop" != h[0] && "close" != h[0] || M(c, 7);
        } else 3 == c.H && ("stop" == h[0] || "close" == h[0] ? "stop" == h[0] ? M(c, 7) : Xc(c) : "noop" != h[0] && c.l && c.l.Da(h), c.A = 0);
      }
      dc(4);
    } catch (Wc) {}
  }
  ;
  function Yc(a) {
    if (a.ba && "function" == typeof a.ba) return a.ba();
    if ("undefined" !== typeof Map && a instanceof Map || "undefined" !== typeof Set && a instanceof Set) return Array.from(a.values());
    if ("string" === typeof a) return a.split("");
    if (na(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);
      return b;
    }
    b = [];
    c = 0;
    for (d in a) b[c++] = a[d];
    return b;
  }
  function Zc(a) {
    if (a.va && "function" == typeof a.va) return a.va();
    if (!a.ba || "function" != typeof a.ba) {
      if ("undefined" !== typeof Map && a instanceof Map) return Array.from(a.keys());
      if (!("undefined" !== typeof Set && a instanceof Set)) {
        if (na(a) || "string" === typeof a) {
          var b = [];
          a = a.length;
          for (var c = 0; c < a; c++) b.push(c);
          return b;
        }
        b = [];
        c = 0;
        for (var d in a) b[c++] = d;
        return b;
      }
    }
  }
  function $c(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (na(a) || "string" === typeof a) Array.prototype.forEach.call(a, b, void 0);else for (var c = Zc(a), d = Yc(a), e = d.length, h = 0; h < e; h++) b.call(void 0, d[h], c && c[h], a);
  }
  ;
  var ad = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
  function bd(a, b) {
    if (a) {
      a = a.split("&");
      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="),
          e = null;
        if (0 <= d) {
          var h = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else h = a[c];
        b(h, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }
  ;
  function O(a, b) {
    this.g = this.s = this.j = "";
    this.o = null;
    this.m = this.h = "";
    this.l = !1;
    var c;
    a instanceof O ? (this.l = void 0 !== b ? b : a.l, cd(this, a.j), this.s = a.s, this.g = a.g, dd(this, a.o), this.h = a.h, ed(this, fd(a.i)), this.m = a.m) : a && (c = String(a).match(ad)) ? (this.l = !!b, cd(this, c[1] || "", !0), this.s = gd(c[2] || ""), this.g = gd(c[3] || "", !0), dd(this, c[4]), this.h = gd(c[5] || "", !0), ed(this, c[6] || "", !0), this.m = gd(c[7] || "")) : (this.l = !!b, this.i = new hd(null, this.l));
  }
  O.prototype.toString = function () {
    var a = [],
      b = this.j;
    b && a.push(id(b, jd, !0), ":");
    var c = this.g;
    if (c || "file" == b) a.push("//"), (b = this.s) && a.push(id(b, jd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.o, null != c && a.push(":", String(c));
    if (c = this.h) this.g && "/" != c.charAt(0) && a.push("/"), a.push(id(c, "/" == c.charAt(0) ? kd : ld, !0));
    (c = this.i.toString()) && a.push("?", c);
    (c = this.m) && a.push("#", id(c, md));
    return a.join("");
  };
  O.prototype.resolve = function (a) {
    var b = J(this),
      c = !!a.j;
    c ? cd(b, a.j) : c = !!a.s;
    c ? b.s = a.s : c = !!a.g;
    c ? b.g = a.g : c = null != a.o;
    var d = a.h;
    if (c) dd(b, a.o);else if (c = !!a.h) {
      if ("/" != d.charAt(0)) if (this.g && !this.h) d = "/" + d;else {
        var e = b.h.lastIndexOf("/");
        -1 != e && (d = b.h.substr(0, e + 1) + d);
      }
      e = d;
      if (".." == e || "." == e) d = "";else if (-1 != e.indexOf("./") || -1 != e.indexOf("/.")) {
        d = 0 == e.lastIndexOf("/", 0);
        e = e.split("/");
        for (var h = [], f = 0; f < e.length;) {
          var k = e[f++];
          "." == k ? d && f == e.length && h.push("") : ".." == k ? ((1 < h.length || 1 == h.length && "" != h[0]) && h.pop(), d && f == e.length && h.push("")) : (h.push(k), d = !0);
        }
        d = h.join("/");
      } else d = e;
    }
    c ? b.h = d : c = "" !== a.i.toString();
    c ? ed(b, fd(a.i)) : c = !!a.m;
    c && (b.m = a.m);
    return b;
  };
  function J(a) {
    return new O(a);
  }
  function cd(a, b, c) {
    a.j = c ? gd(b, !0) : b;
    a.j && (a.j = a.j.replace(/:$/, ""));
  }
  function dd(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.o = b;
    } else a.o = null;
  }
  function ed(a, b, c) {
    b instanceof hd ? (a.i = b, nd(a.i, a.l)) : (c || (b = id(b, od)), a.i = new hd(b, a.l));
  }
  function N(a, b, c) {
    a.i.set(b, c);
  }
  function xc(a) {
    N(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
    return a;
  }
  function gd(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function id(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, pd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function pd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var jd = /[#\/\?@]/g,
    ld = /[#\?:]/g,
    kd = /[#\?]/g,
    od = /[#\?@]/g,
    md = /#/g;
  function hd(a, b) {
    this.h = this.g = null;
    this.i = a || null;
    this.j = !!b;
  }
  function P(a) {
    a.g || (a.g = new Map(), a.h = 0, a.i && bd(a.i, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }
  n = hd.prototype;
  n.add = function (a, b) {
    P(this);
    this.i = null;
    a = qd(this, a);
    var c = this.g.get(a);
    c || this.g.set(a, c = []);
    c.push(b);
    this.h += 1;
    return this;
  };
  function rd(a, b) {
    P(a);
    b = qd(a, b);
    a.g.has(b) && (a.i = null, a.h -= a.g.get(b).length, a.g.delete(b));
  }
  function sd(a, b) {
    P(a);
    b = qd(a, b);
    return a.g.has(b);
  }
  n.forEach = function (a, b) {
    P(this);
    this.g.forEach(function (c, d) {
      c.forEach(function (e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };
  n.va = function () {
    P(this);
    for (var a = Array.from(this.g.values()), b = Array.from(this.g.keys()), c = [], d = 0; d < b.length; d++) for (var e = a[d], h = 0; h < e.length; h++) c.push(b[d]);
    return c;
  };
  n.ba = function (a) {
    P(this);
    var b = [];
    if ("string" === typeof a) sd(this, a) && (b = b.concat(this.g.get(qd(this, a))));else {
      a = Array.from(this.g.values());
      for (var c = 0; c < a.length; c++) b = b.concat(a[c]);
    }
    return b;
  };
  n.set = function (a, b) {
    P(this);
    this.i = null;
    a = qd(this, a);
    sd(this, a) && (this.h -= this.g.get(a).length);
    this.g.set(a, [b]);
    this.h += 1;
    return this;
  };
  n.get = function (a, b) {
    if (!a) return b;
    a = this.ba(a);
    return 0 < a.length ? String(a[0]) : b;
  };
  function Ac(a, b, c) {
    rd(a, b);
    0 < c.length && (a.i = null, a.g.set(qd(a, b), ya(c)), a.h += c.length);
  }
  n.toString = function () {
    if (this.i) return this.i;
    if (!this.g) return "";
    for (var a = [], b = Array.from(this.g.keys()), c = 0; c < b.length; c++) {
      var d = b[c],
        e = encodeURIComponent(String(d));
      d = this.ba(d);
      for (var h = 0; h < d.length; h++) {
        var f = e;
        "" !== d[h] && (f += "=" + encodeURIComponent(String(d[h])));
        a.push(f);
      }
    }
    return this.i = a.join("&");
  };
  function fd(a) {
    var b = new hd();
    b.i = a.i;
    a.g && (b.g = new Map(a.g), b.h = a.h);
    return b;
  }
  function qd(a, b) {
    b = String(b);
    a.j && (b = b.toLowerCase());
    return b;
  }
  function nd(a, b) {
    b && !a.j && (P(a), a.i = null, a.g.forEach(function (c, d) {
      var e = d.toLowerCase();
      d != e && (rd(this, d), Ac(this, e, c));
    }, a));
    a.j = b;
  }
  ;
  function td(a, b) {
    this.h = a;
    this.g = b;
  }
  ;
  function ud(a) {
    this.l = a || vd;
    w.PerformanceNavigationTiming ? (a = w.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(w.g && w.g.Na && w.g.Na() && w.g.Na().ic);
    this.j = a ? this.l : 1;
    this.g = null;
    1 < this.j && (this.g = new Set());
    this.h = null;
    this.i = [];
  }
  var vd = 10;
  function wd(a) {
    return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
  }
  function Qc(a) {
    return a.h ? 1 : a.g ? a.g.size : 0;
  }
  function Mc(a, b) {
    return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
  }
  function Rc(a, b) {
    a.g ? a.g.add(b) : a.h = b;
  }
  function Tc(a, b) {
    a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
  }
  ud.prototype.cancel = function () {
    this.i = xd(this);
    if (this.h) this.h.cancel(), this.h = null;else if (this.g && 0 !== this.g.size) {
      for (var a = q(this.g.values()), b = a.next(); !b.done; b = a.next()) b.value.cancel();
      this.g.clear();
    }
  };
  function xd(a) {
    if (null != a.h) return a.i.concat(a.h.D);
    if (null != a.g && 0 !== a.g.size) {
      var b = a.i;
      a = q(a.g.values());
      for (var c = a.next(); !c.done; c = a.next()) b = b.concat(c.value.D);
      return b;
    }
    return ya(a.i);
  }
  ;
  function yd() {}
  yd.prototype.stringify = function (a) {
    return w.JSON.stringify(a, void 0);
  };
  yd.prototype.parse = function (a) {
    return w.JSON.parse(a, void 0);
  };
  function zd() {
    this.g = new yd();
  }
  function Ad(a, b, c) {
    var d = c || "";
    try {
      $c(a, function (e, h) {
        var f = e;
        oa(e) && (f = yb(e));
        b.push(d + h + "=" + encodeURIComponent(f));
      });
    } catch (e) {
      throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    }
  }
  ;
  function Bd(a, b) {
    var c = new Vb();
    if (w.Image) {
      var d = new Image();
      d.onload = ua(Cd, c, d, "TestLoadImage: loaded", !0, b);
      d.onerror = ua(Cd, c, d, "TestLoadImage: error", !1, b);
      d.onabort = ua(Cd, c, d, "TestLoadImage: abort", !1, b);
      d.ontimeout = ua(Cd, c, d, "TestLoadImage: timeout", !1, b);
      w.setTimeout(function () {
        if (d.ontimeout) d.ontimeout();
      }, 1E4);
      d.src = a;
    } else b(!1);
  }
  function Cd(a, b, c, d, e) {
    try {
      b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    } catch (h) {}
  }
  ;
  function Dd(a) {
    this.l = a.jc || null;
    this.j = a.rb || !1;
  }
  y(Dd, jc);
  Dd.prototype.g = function () {
    return new Ed(this.l, this.j);
  };
  Dd.prototype.i = function (a) {
    return function () {
      return a;
    };
  }({});
  function Ed(a, b) {
    C.call(this);
    this.D = a;
    this.u = b;
    this.m = void 0;
    this.readyState = Fd;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.v = new Headers();
    this.h = null;
    this.C = "GET";
    this.B = "";
    this.g = !1;
    this.A = this.j = this.l = null;
  }
  y(Ed, C);
  var Fd = 0;
  n = Ed.prototype;
  n.open = function (a, b) {
    if (this.readyState != Fd) throw this.abort(), Error("Error reopening a connection");
    this.C = a;
    this.B = b;
    this.readyState = 1;
    Gd(this);
  };
  n.send = function (a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    var b = {
      headers: this.v,
      method: this.C,
      credentials: this.m,
      cache: void 0
    };
    a && (b.body = a);
    (this.D || w).fetch(new Request(this.B, b)).then(this.cb.bind(this), this.na.bind(this));
  };
  n.abort = function () {
    this.response = this.responseText = "";
    this.v = new Headers();
    this.status = 0;
    this.j && this.j.cancel("Request was aborted.").catch(function () {});
    1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, Hd(this));
    this.readyState = Fd;
  };
  n.cb = function (a) {
    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Gd(this)), this.g && (this.readyState = 3, Gd(this), this.g))) if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.ab.bind(this), this.na.bind(this));else if ("undefined" !== typeof w.ReadableStream && "body" in a) {
      this.j = a.body.getReader();
      if (this.u) {
        if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
        this.response = [];
      } else this.response = this.responseText = "", this.A = new TextDecoder();
      Id(this);
    } else a.text().then(this.bb.bind(this), this.na.bind(this));
  };
  function Id(a) {
    a.j.read().then(a.$a.bind(a)).catch(a.na.bind(a));
  }
  n.$a = function (a) {
    if (this.g) {
      if (this.u && a.value) this.response.push(a.value);else if (!this.u) {
        var b = a.value ? a.value : new Uint8Array(0);
        if (b = this.A.decode(b, {
          stream: !a.done
        })) this.response = this.responseText += b;
      }
      a.done ? Hd(this) : Gd(this);
      3 == this.readyState && Id(this);
    }
  };
  n.bb = function (a) {
    this.g && (this.response = this.responseText = a, Hd(this));
  };
  n.ab = function (a) {
    this.g && (this.response = a, Hd(this));
  };
  n.na = function () {
    this.g && Hd(this);
  };
  function Hd(a) {
    a.readyState = 4;
    a.l = null;
    a.j = null;
    a.A = null;
    Gd(a);
  }
  n.setRequestHeader = function (a, b) {
    this.v.append(a, b);
  };
  n.getResponseHeader = function (a) {
    return this.h ? this.h.get(a.toLowerCase()) || "" : "";
  };
  n.getAllResponseHeaders = function () {
    if (!this.h) return "";
    for (var a = [], b = this.h.entries(), c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
    return a.join("\r\n");
  };
  function Gd(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }
  Object.defineProperty(Ed.prototype, "withCredentials", {
    get: function get() {
      return "include" === this.m;
    },
    set: function set(a) {
      this.m = a ? "include" : "same-origin";
    }
  });
  var Jd = w.JSON.parse;
  function Q(a) {
    C.call(this);
    this.headers = new Map();
    this.u = a || null;
    this.h = !1;
    this.C = this.g = null;
    this.I = "";
    this.m = 0;
    this.j = "";
    this.l = this.G = this.v = this.D = !1;
    this.B = 0;
    this.A = null;
    this.L = Kd;
    this.M = this.N = !1;
  }
  y(Q, C);
  var Kd = "",
    Ld = /^https?$/i,
    Md = ["POST", "PUT"];
  n = Q.prototype;
  n.Ra = function (a) {
    this.N = a;
  };
  n.ja = function (a, b, c, d) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.I + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.I = a;
    this.j = "";
    this.m = 0;
    this.D = !1;
    this.h = !0;
    this.g = this.u ? this.u.g() : pc.g();
    this.C = this.u ? kc(this.u) : kc(pc);
    this.g.onreadystatechange = x(this.Oa, this);
    try {
      this.G = !0, this.g.open(b, String(a), !0), this.G = !1;
    } catch (f) {
      Nd(this, f);
      return;
    }
    a = c || "";
    c = new Map(this.headers);
    if (d) if (Object.getPrototypeOf(d) === Object.prototype) for (var e in d) c.set(e, d[e]);else if ("function" === typeof d.keys && "function" === typeof d.get) {
      e = q(d.keys());
      for (var h = e.next(); !h.done; h = e.next()) h = h.value, c.set(h, d.get(h));
    } else throw Error("Unknown input type for opt_headers: " + String(d));
    d = Array.from(c.keys()).find(function (f) {
      return "content-type" == f.toLowerCase();
    });
    e = w.FormData && a instanceof w.FormData;
    !(0 <= xa(Md, b)) || d || e || c.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    b = q(c);
    for (d = b.next(); !d.done; d = b.next()) c = q(d.value), d = c.next().value, c = c.next().value, this.g.setRequestHeader(d, c);
    this.L && (this.g.responseType = this.L);
    "withCredentials" in this.g && this.g.withCredentials !== this.N && (this.g.withCredentials = this.N);
    try {
      Od(this), 0 < this.B && ((this.M = Pd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = x(this.xa, this)) : this.A = Nb(this.xa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
    } catch (f) {
      Nd(this, f);
    }
  };
  function Pd(a) {
    return Ia && Ta() && "number" === typeof a.timeout && void 0 !== a.ontimeout;
  }
  n.xa = function () {
    "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
  };
  function Nd(a, b) {
    a.h = !1;
    a.g && (a.l = !0, a.g.abort(), a.l = !1);
    a.j = b;
    a.m = 5;
    Qd(a);
    Rd(a);
  }
  function Qd(a) {
    a.D || (a.D = !0, D(a, "complete"), D(a, "error"));
  }
  n.abort = function (a) {
    this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D(this, "complete"), D(this, "abort"), Rd(this));
  };
  n.O = function () {
    this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Rd(this, !0));
    Q.Z.O.call(this);
  };
  n.Oa = function () {
    this.s || (this.G || this.v || this.l ? Sd(this) : this.nb());
  };
  n.nb = function () {
    Sd(this);
  };
  function Sd(a) {
    if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != K(a) || 2 != a.fa())) if (a.v && 4 == K(a)) Nb(a.Oa, 0, a);else if (D(a, "readystatechange"), 4 == K(a)) {
      a.h = !1;
      try {
        var b = a.fa();
        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;
          default:
            c = !1;
        }
        var d;
        if (!(d = c)) {
          var e;
          if (e = 0 === b) {
            var h = String(a.I).match(ad)[1] || null;
            if (!h && w.self && w.self.location) {
              var f = w.self.location.protocol;
              h = f.substr(0, f.length - 1);
            }
            e = !Ld.test(h ? h.toLowerCase() : "");
          }
          d = e;
        }
        if (d) D(a, "complete"), D(a, "success");else {
          a.m = 6;
          try {
            var k = 2 < K(a) ? a.g.statusText : "";
          } catch (l) {
            k = "";
          }
          a.j = k + " [" + a.fa() + "]";
          Qd(a);
        }
      } finally {
        Rd(a);
      }
    }
  }
  function Rd(a, b) {
    if (a.g) {
      Od(a);
      var c = a.g,
        d = a.C[0] ? ma : null;
      a.g = null;
      a.C = null;
      b || D(a, "ready");
      try {
        c.onreadystatechange = d;
      } catch (e) {}
    }
  }
  function Od(a) {
    a.g && a.M && (a.g.ontimeout = null);
    a.A && (w.clearTimeout(a.A), a.A = null);
  }
  function K(a) {
    return a.g ? a.g.readyState : 0;
  }
  n.fa = function () {
    try {
      return 2 < K(this) ? this.g.status : -1;
    } catch (a) {
      return -1;
    }
  };
  n.ma = function () {
    try {
      return this.g ? this.g.responseText : "";
    } catch (a) {
      return "";
    }
  };
  n.Za = function (a) {
    if (this.g) {
      var b = this.g.responseText;
      a && 0 == b.indexOf(a) && (b = b.substring(a.length));
      return Jd(b);
    }
  };
  function Cc(a) {
    try {
      if (!a.g) return null;
      if ("response" in a.g) return a.g.response;
      switch (a.L) {
        case Kd:
        case "text":
          return a.g.responseText;
        case "arraybuffer":
          if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
      }
      return null;
    } catch (b) {
      return null;
    }
  }
  n.La = function () {
    return this.m;
  };
  n.Va = function () {
    return "string" === typeof this.j ? this.j : String(this.j);
  };
  function Td(a) {
    var b = "";
    cb(a, function (c, d) {
      b += d;
      b += ":";
      b += c;
      b += "\r\n";
    });
    return b;
  }
  function Ud(a, b, c) {
    a: {
      for (d in c) {
        var d = !1;
        break a;
      }
      d = !0;
    }
    d || (c = Td(c), "string" === typeof a ? (encodeURIComponent(String(b)), null != c && encodeURIComponent(String(c))) : N(a, b, c));
  }
  ;
  function Vd(a, b, c) {
    return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
  }
  function Wd(a) {
    this.Ja = 0;
    this.i = [];
    this.j = new Vb();
    this.ra = this.za = this.G = this.aa = this.g = this.Ga = this.D = this.pa = this.o = this.W = this.s = null;
    this.ib = this.Y = 0;
    this.gb = Vd("failFast", !1, a);
    this.N = this.v = this.u = this.m = this.l = null;
    this.ca = !0;
    this.wa = this.Ia = this.X = -1;
    this.da = this.A = this.C = 0;
    this.eb = Vd("baseRetryDelayMs", 5E3, a);
    this.kb = Vd("retryDelaySeedMs", 1E4, a);
    this.hb = Vd("forwardChannelMaxRetries", 2, a);
    this.Aa = Vd("forwardChannelRequestTimeoutMs", 2E4, a);
    this.ya = a && a.xmlHttpFactory || void 0;
    this.Ka = a && a.hc || !1;
    this.L = void 0;
    this.I = a && a.supportsCrossDomainXhr || !1;
    this.K = "";
    this.h = new ud(a && a.concurrentRequestLimit);
    this.Ma = new zd();
    this.R = a && a.fastHandshake || !1;
    this.P = a && a.encodeInitMessageHeaders || !1;
    this.R && this.P && (this.P = !1);
    this.fb = a && a.ec || !1;
    a && a.Ha && this.j.Ha();
    a && a.forceLongPolling && (this.ca = !1);
    this.ea = !this.R && this.ca && a && a.detectBufferingProxy || !1;
    this.qa = void 0;
    this.T = 0;
    this.M = !1;
    this.sa = this.B = null;
  }
  n = Wd.prototype;
  n.ta = 8;
  n.H = 1;
  function Xc(a) {
    Xd(a);
    if (3 == a.H) {
      var b = a.Y++,
        c = J(a.G);
      N(c, "SID", a.K);
      N(c, "RID", b);
      N(c, "TYPE", "terminate");
      Yd(a, c);
      b = new rc(a, a.j, b, void 0);
      b.M = 2;
      b.v = xc(J(c));
      c = !1;
      w.navigator && w.navigator.sendBeacon && (c = w.navigator.sendBeacon(b.v.toString(), ""));
      !c && w.Image && (new Image().src = b.v, c = !0);
      c || (b.g = Bc(b.l, null), b.g.ja(b.v));
      b.G = Date.now();
      zc(b);
    }
    Zd(a);
  }
  function Oc(a) {
    a.g && (Kc(a), a.g.cancel(), a.g = null);
  }
  function Xd(a) {
    Oc(a);
    a.u && (w.clearTimeout(a.u), a.u = null);
    Nc(a);
    a.h.cancel();
    a.m && ("number" === typeof a.m && w.clearTimeout(a.m), a.m = null);
  }
  function Vc(a) {
    wd(a.h) || a.m || (a.m = !0, Gb(a.Qa, a), a.C = 0);
  }
  function $d(a, b) {
    if (Qc(a.h) >= a.h.j - (a.m ? 1 : 0)) return !1;
    if (a.m) return a.i = b.D.concat(a.i), !0;
    if (1 == a.H || 2 == a.H || a.C >= (a.gb ? 0 : a.hb)) return !1;
    a.m = gc(x(a.Qa, a, b), ae(a, a.C));
    a.C++;
    return !0;
  }
  n.Qa = function (a) {
    if (this.m) if (this.m = null, 1 == this.H) {
      if (!a) {
        this.Y = Math.floor(1E5 * Math.random());
        a = this.Y++;
        var b = new rc(this, this.j, a, void 0),
          c = this.s;
        this.W && (c ? (c = db(c), fb(c, this.W)) : c = this.W);
        null !== this.o || this.P || (b.I = c, c = null);
        var d;
        if (this.R) a: {
          for (var e = d = 0; e < this.i.length; e++) {
            b: {
              var h = this.i[e];
              if ("__data__" in h.g && (h = h.g.__data__, "string" === typeof h)) {
                h = h.length;
                break b;
              }
              h = void 0;
            }
            if (void 0 === h) break;
            d += h;
            if (4096 < d) {
              d = e;
              break a;
            }
            if (4096 === d || e === this.i.length - 1) {
              d = e + 1;
              break a;
            }
          }
          d = 1E3;
        } else d = 1E3;
        d = be(this, b, d);
        e = J(this.G);
        N(e, "RID", a);
        N(e, "CVER", 22);
        this.D && N(e, "X-HTTP-Session-Id", this.D);
        Yd(this, e);
        c && (this.P ? d = "headers=" + encodeURIComponent(String(Td(c))) + "&" + d : this.o && Ud(e, this.o, c));
        Rc(this.h, b);
        this.fb && N(e, "TYPE", "init");
        this.R ? (N(e, "$req", d), N(e, "SID", "null"), b.da = !0, wc(b, e, null)) : wc(b, e, d);
        this.H = 2;
      }
    } else 3 == this.H && (a ? ce(this, a) : 0 == this.i.length || wd(this.h) || ce(this));
  };
  function ce(a, b) {
    var c;
    b ? c = b.m : c = a.Y++;
    var d = J(a.G);
    N(d, "SID", a.K);
    N(d, "RID", c);
    N(d, "AID", a.X);
    Yd(a, d);
    a.o && a.s && Ud(d, a.o, a.s);
    c = new rc(a, a.j, c, a.C + 1);
    null === a.o && (c.I = a.s);
    b && (a.i = b.D.concat(a.i));
    b = be(a, c, 1E3);
    c.setTimeout(Math.round(.5 * a.Aa) + Math.round(.5 * a.Aa * Math.random()));
    Rc(a.h, c);
    wc(c, d, b);
  }
  function Yd(a, b) {
    a.pa && cb(a.pa, function (c, d) {
      N(b, d, c);
    });
    a.l && $c({}, function (c, d) {
      N(b, d, c);
    });
  }
  function be(a, b, c) {
    c = Math.min(a.i.length, c);
    var d = a.l ? x(a.l.Ya, a.l, a) : null;
    a: for (var e = a.i, h = -1;;) {
      var f = ["count=" + c];
      -1 == h ? 0 < c ? (h = e[0].h, f.push("ofs=" + h)) : h = 0 : f.push("ofs=" + h);
      for (var k = !0, l = 0; l < c; l++) {
        var m = e[l].h,
          p = e[l].g;
        m -= h;
        if (0 > m) h = Math.max(0, e[l].h - 100), k = !1;else try {
          Ad(p, f, "req" + m + "_");
        } catch (t) {
          d && d(p);
        }
      }
      if (k) {
        d = f.join("&");
        break a;
      }
    }
    a = a.i.splice(0, c);
    b.D = a;
    return d;
  }
  function Uc(a) {
    a.g || a.u || (a.da = 1, Gb(a.Pa, a), a.A = 0);
  }
  function Pc(a) {
    if (a.g || a.u || 3 <= a.A) return !1;
    a.da++;
    a.u = gc(x(a.Pa, a), ae(a, a.A));
    a.A++;
    return !0;
  }
  n.Pa = function () {
    this.u = null;
    de(this);
    if (this.ea && !(this.M || null == this.g || 0 >= this.T)) {
      var a = 2 * this.T;
      this.j.info("BP detection timer enabled: " + a);
      this.B = gc(x(this.mb, this), a);
    }
  };
  n.mb = function () {
    this.B && (this.B = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.M = !0, I(10), Oc(this), de(this));
  };
  function Kc(a) {
    null != a.B && (w.clearTimeout(a.B), a.B = null);
  }
  function de(a) {
    a.g = new rc(a, a.j, "rpc", a.da);
    null === a.o && (a.g.I = a.s);
    a.g.P = 0;
    var b = J(a.za);
    N(b, "RID", "rpc");
    N(b, "SID", a.K);
    N(b, "CI", a.N ? "0" : "1");
    N(b, "AID", a.X);
    N(b, "TYPE", "xmlhttp");
    Yd(a, b);
    a.o && a.s && Ud(b, a.o, a.s);
    a.L && a.g.setTimeout(a.L);
    var c = a.g;
    a = a.ra;
    c.M = 1;
    c.v = xc(J(b));
    c.s = null;
    c.T = !0;
    yc(c, a);
  }
  n.lb = function () {
    null != this.v && (this.v = null, Oc(this), Pc(this), I(19));
  };
  function Nc(a) {
    null != a.v && (w.clearTimeout(a.v), a.v = null);
  }
  function Ic(a, b) {
    var c = null;
    if (a.g == b) {
      Nc(a);
      Kc(a);
      a.g = null;
      var d = 2;
    } else if (Mc(a.h, b)) c = b.D, Tc(a.h, b), d = 1;else return;
    if (0 != a.H) if (a.wa = b.ca, b.i) {
      if (1 == d) {
        c = b.s ? b.s.length : 0;
        b = Date.now() - b.G;
        var e = a.C;
        d = bc();
        D(d, new fc(d, c, b, e));
        Vc(a);
      } else Uc(a);
    } else if (e = b.o, 3 == e || 0 == e && 0 < a.wa || !(1 == d && $d(a, b) || 2 == d && Pc(a))) switch (c && 0 < c.length && (b = a.h, b.i = b.i.concat(c)), e) {
      case 1:
        M(a, 5);
        break;
      case 4:
        M(a, 10);
        break;
      case 3:
        M(a, 6);
        break;
      default:
        M(a, 2);
    }
  }
  function ae(a, b) {
    var c = a.eb + Math.floor(Math.random() * a.kb);
    a.l || (c *= 2);
    return c * b;
  }
  function M(a, b) {
    a.j.info("Error code " + b);
    if (2 == b) {
      var c = null;
      a.l && (c = null);
      var d = x(a.sb, a);
      c || (c = new O("//www.google.com/images/cleardot.gif"), w.location && "http" == w.location.protocol || cd(c, "https"), xc(c));
      Bd(c.toString(), d);
    } else I(2);
    a.H = 0;
    a.l && a.l.Ca(b);
    Zd(a);
    Xd(a);
  }
  n.sb = function (a) {
    a ? (this.j.info("Successfully pinged google.com"), I(2)) : (this.j.info("Failed to ping google.com"), I(1));
  };
  function Zd(a) {
    a.H = 0;
    a.sa = [];
    if (a.l) {
      var b = xd(a.h);
      if (0 != b.length || 0 != a.i.length) za(a.sa, b), za(a.sa, a.i), a.h.i.length = 0, ya(a.i), a.i.length = 0;
      a.l.Ba();
    }
  }
  function Sc(a, b, c) {
    var d = c instanceof O ? J(c) : new O(c, void 0);
    if ("" != d.g) b && (d.g = b + "." + d.g), dd(d, d.o);else {
      var e = w.location;
      d = e.protocol;
      b = b ? b + "." + e.hostname : e.hostname;
      e = +e.port;
      var h = new O(null, void 0);
      d && cd(h, d);
      b && (h.g = b);
      e && dd(h, e);
      c && (h.h = c);
      d = h;
    }
    c = a.D;
    b = a.Ga;
    c && b && N(d, c, b);
    N(d, "VER", a.ta);
    Yd(a, d);
    return d;
  }
  function Bc(a, b, c) {
    if (b && !a.I) throw Error("Can't create secondary domain capable XhrIo object.");
    b = c && a.Ka && !a.ya ? new Q(new Dd({
      rb: !0
    })) : new Q(a.ya);
    b.Ra(a.I);
    return b;
  }
  function ee() {}
  n = ee.prototype;
  n.Ea = function () {};
  n.Da = function () {};
  n.Ca = function () {};
  n.Ba = function () {};
  n.Ya = function () {};
  function fe() {
    if (Ia && !(10 <= Number(Wa))) throw Error("Environmental error: no available transport.");
  }
  fe.prototype.g = function (a, b) {
    return new R(a, b);
  };
  function R(a, b) {
    C.call(this);
    this.g = new Wd(b);
    this.l = a;
    this.h = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
      "X-Client-Protocol": "webchannel"
    });
    this.g.s = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
      "X-WebChannel-Content-Type": b.messageContentType
    });
    b && b.Fa && (a ? a["X-WebChannel-Client-Profile"] = b.Fa : a = {
      "X-WebChannel-Client-Profile": b.Fa
    });
    this.g.W = a;
    (a = b && b.fc) && !Ba(a) && (this.g.o = a);
    this.A = b && b.supportsCrossDomainXhr || !1;
    this.v = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !Ba(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
    this.j = new ge(this);
  }
  y(R, C);
  R.prototype.m = function () {
    this.g.l = this.j;
    this.A && (this.g.I = !0);
    var a = this.g,
      b = this.l,
      c = this.h || void 0;
    I(0);
    a.aa = b;
    a.pa = c || {};
    a.N = a.ca;
    a.G = Sc(a, null, a.aa);
    Vc(a);
  };
  R.prototype.close = function () {
    Xc(this.g);
  };
  R.prototype.u = function (a) {
    var b = this.g;
    if ("string" === typeof a) {
      var c = {};
      c.__data__ = a;
      a = c;
    } else this.v && (c = {}, c.__data__ = yb(a), a = c);
    b.i.push(new td(b.ib++, a));
    3 == b.H && Vc(b);
  };
  R.prototype.O = function () {
    this.g.l = null;
    delete this.j;
    Xc(this.g);
    delete this.g;
    R.Z.O.call(this);
  };
  function he(a) {
    nc.call(this);
    var b = a.__sm__;
    if (b) {
      a: {
        for (var c in b) {
          a = c;
          break a;
        }
        a = void 0;
      }
      if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
      this.data = b;
    } else this.data = a;
  }
  y(he, nc);
  function ie() {
    oc.call(this);
    this.status = 1;
  }
  y(ie, oc);
  function ge(a) {
    this.g = a;
  }
  y(ge, ee);
  ge.prototype.Ea = function () {
    D(this.g, "a");
  };
  ge.prototype.Da = function (a) {
    D(this.g, new he(a));
  };
  ge.prototype.Ca = function (a) {
    D(this.g, new ie(a));
  };
  ge.prototype.Ba = function () {
    D(this.g, "b");
  };
  function je() {
    this.blockSize = -1;
  }
  ;
  function T() {
    this.blockSize = -1;
    this.blockSize = 64;
    this.g = Array(4);
    this.m = Array(this.blockSize);
    this.i = this.h = 0;
    this.reset();
  }
  y(T, je);
  T.prototype.reset = function () {
    this.g[0] = 1732584193;
    this.g[1] = 4023233417;
    this.g[2] = 2562383102;
    this.g[3] = 271733878;
    this.i = this.h = 0;
  };
  function ke(a, b, c) {
    c || (c = 0);
    var d = Array(16);
    if ("string" === typeof b) for (var e = 0; 16 > e; ++e) d[e] = b.charCodeAt(c++) | b.charCodeAt(c++) << 8 | b.charCodeAt(c++) << 16 | b.charCodeAt(c++) << 24;else for (e = 0; 16 > e; ++e) d[e] = b[c++] | b[c++] << 8 | b[c++] << 16 | b[c++] << 24;
    b = a.g[0];
    c = a.g[1];
    e = a.g[2];
    var h = a.g[3];
    var f = b + (h ^ c & (e ^ h)) + d[0] + 3614090360 & 4294967295;
    b = c + (f << 7 & 4294967295 | f >>> 25);
    f = h + (e ^ b & (c ^ e)) + d[1] + 3905402710 & 4294967295;
    h = b + (f << 12 & 4294967295 | f >>> 20);
    f = e + (c ^ h & (b ^ c)) + d[2] + 606105819 & 4294967295;
    e = h + (f << 17 & 4294967295 | f >>> 15);
    f = c + (b ^ e & (h ^ b)) + d[3] + 3250441966 & 4294967295;
    c = e + (f << 22 & 4294967295 | f >>> 10);
    f = b + (h ^ c & (e ^ h)) + d[4] + 4118548399 & 4294967295;
    b = c + (f << 7 & 4294967295 | f >>> 25);
    f = h + (e ^ b & (c ^ e)) + d[5] + 1200080426 & 4294967295;
    h = b + (f << 12 & 4294967295 | f >>> 20);
    f = e + (c ^ h & (b ^ c)) + d[6] + 2821735955 & 4294967295;
    e = h + (f << 17 & 4294967295 | f >>> 15);
    f = c + (b ^ e & (h ^ b)) + d[7] + 4249261313 & 4294967295;
    c = e + (f << 22 & 4294967295 | f >>> 10);
    f = b + (h ^ c & (e ^ h)) + d[8] + 1770035416 & 4294967295;
    b = c + (f << 7 & 4294967295 | f >>> 25);
    f = h + (e ^ b & (c ^ e)) + d[9] + 2336552879 & 4294967295;
    h = b + (f << 12 & 4294967295 | f >>> 20);
    f = e + (c ^ h & (b ^ c)) + d[10] + 4294925233 & 4294967295;
    e = h + (f << 17 & 4294967295 | f >>> 15);
    f = c + (b ^ e & (h ^ b)) + d[11] + 2304563134 & 4294967295;
    c = e + (f << 22 & 4294967295 | f >>> 10);
    f = b + (h ^ c & (e ^ h)) + d[12] + 1804603682 & 4294967295;
    b = c + (f << 7 & 4294967295 | f >>> 25);
    f = h + (e ^ b & (c ^ e)) + d[13] + 4254626195 & 4294967295;
    h = b + (f << 12 & 4294967295 | f >>> 20);
    f = e + (c ^ h & (b ^ c)) + d[14] + 2792965006 & 4294967295;
    e = h + (f << 17 & 4294967295 | f >>> 15);
    f = c + (b ^ e & (h ^ b)) + d[15] + 1236535329 & 4294967295;
    c = e + (f << 22 & 4294967295 | f >>> 10);
    f = b + (e ^ h & (c ^ e)) + d[1] + 4129170786 & 4294967295;
    b = c + (f << 5 & 4294967295 | f >>> 27);
    f = h + (c ^ e & (b ^ c)) + d[6] + 3225465664 & 4294967295;
    h = b + (f << 9 & 4294967295 | f >>> 23);
    f = e + (b ^ c & (h ^ b)) + d[11] + 643717713 & 4294967295;
    e = h + (f << 14 & 4294967295 | f >>> 18);
    f = c + (h ^ b & (e ^ h)) + d[0] + 3921069994 & 4294967295;
    c = e + (f << 20 & 4294967295 | f >>> 12);
    f = b + (e ^ h & (c ^ e)) + d[5] + 3593408605 & 4294967295;
    b = c + (f << 5 & 4294967295 | f >>> 27);
    f = h + (c ^ e & (b ^ c)) + d[10] + 38016083 & 4294967295;
    h = b + (f << 9 & 4294967295 | f >>> 23);
    f = e + (b ^ c & (h ^ b)) + d[15] + 3634488961 & 4294967295;
    e = h + (f << 14 & 4294967295 | f >>> 18);
    f = c + (h ^ b & (e ^ h)) + d[4] + 3889429448 & 4294967295;
    c = e + (f << 20 & 4294967295 | f >>> 12);
    f = b + (e ^ h & (c ^ e)) + d[9] + 568446438 & 4294967295;
    b = c + (f << 5 & 4294967295 | f >>> 27);
    f = h + (c ^ e & (b ^ c)) + d[14] + 3275163606 & 4294967295;
    h = b + (f << 9 & 4294967295 | f >>> 23);
    f = e + (b ^ c & (h ^ b)) + d[3] + 4107603335 & 4294967295;
    e = h + (f << 14 & 4294967295 | f >>> 18);
    f = c + (h ^ b & (e ^ h)) + d[8] + 1163531501 & 4294967295;
    c = e + (f << 20 & 4294967295 | f >>> 12);
    f = b + (e ^ h & (c ^ e)) + d[13] + 2850285829 & 4294967295;
    b = c + (f << 5 & 4294967295 | f >>> 27);
    f = h + (c ^ e & (b ^ c)) + d[2] + 4243563512 & 4294967295;
    h = b + (f << 9 & 4294967295 | f >>> 23);
    f = e + (b ^ c & (h ^ b)) + d[7] + 1735328473 & 4294967295;
    e = h + (f << 14 & 4294967295 | f >>> 18);
    f = c + (h ^ b & (e ^ h)) + d[12] + 2368359562 & 4294967295;
    c = e + (f << 20 & 4294967295 | f >>> 12);
    f = b + (c ^ e ^ h) + d[5] + 4294588738 & 4294967295;
    b = c + (f << 4 & 4294967295 | f >>> 28);
    f = h + (b ^ c ^ e) + d[8] + 2272392833 & 4294967295;
    h = b + (f << 11 & 4294967295 | f >>> 21);
    f = e + (h ^ b ^ c) + d[11] + 1839030562 & 4294967295;
    e = h + (f << 16 & 4294967295 | f >>> 16);
    f = c + (e ^ h ^ b) + d[14] + 4259657740 & 4294967295;
    c = e + (f << 23 & 4294967295 | f >>> 9);
    f = b + (c ^ e ^ h) + d[1] + 2763975236 & 4294967295;
    b = c + (f << 4 & 4294967295 | f >>> 28);
    f = h + (b ^ c ^ e) + d[4] + 1272893353 & 4294967295;
    h = b + (f << 11 & 4294967295 | f >>> 21);
    f = e + (h ^ b ^ c) + d[7] + 4139469664 & 4294967295;
    e = h + (f << 16 & 4294967295 | f >>> 16);
    f = c + (e ^ h ^ b) + d[10] + 3200236656 & 4294967295;
    c = e + (f << 23 & 4294967295 | f >>> 9);
    f = b + (c ^ e ^ h) + d[13] + 681279174 & 4294967295;
    b = c + (f << 4 & 4294967295 | f >>> 28);
    f = h + (b ^ c ^ e) + d[0] + 3936430074 & 4294967295;
    h = b + (f << 11 & 4294967295 | f >>> 21);
    f = e + (h ^ b ^ c) + d[3] + 3572445317 & 4294967295;
    e = h + (f << 16 & 4294967295 | f >>> 16);
    f = c + (e ^ h ^ b) + d[6] + 76029189 & 4294967295;
    c = e + (f << 23 & 4294967295 | f >>> 9);
    f = b + (c ^ e ^ h) + d[9] + 3654602809 & 4294967295;
    b = c + (f << 4 & 4294967295 | f >>> 28);
    f = h + (b ^ c ^ e) + d[12] + 3873151461 & 4294967295;
    h = b + (f << 11 & 4294967295 | f >>> 21);
    f = e + (h ^ b ^ c) + d[15] + 530742520 & 4294967295;
    e = h + (f << 16 & 4294967295 | f >>> 16);
    f = c + (e ^ h ^ b) + d[2] + 3299628645 & 4294967295;
    c = e + (f << 23 & 4294967295 | f >>> 9);
    f = b + (e ^ (c | ~h)) + d[0] + 4096336452 & 4294967295;
    b = c + (f << 6 & 4294967295 | f >>> 26);
    f = h + (c ^ (b | ~e)) + d[7] + 1126891415 & 4294967295;
    h = b + (f << 10 & 4294967295 | f >>> 22);
    f = e + (b ^ (h | ~c)) + d[14] + 2878612391 & 4294967295;
    e = h + (f << 15 & 4294967295 | f >>> 17);
    f = c + (h ^ (e | ~b)) + d[5] + 4237533241 & 4294967295;
    c = e + (f << 21 & 4294967295 | f >>> 11);
    f = b + (e ^ (c | ~h)) + d[12] + 1700485571 & 4294967295;
    b = c + (f << 6 & 4294967295 | f >>> 26);
    f = h + (c ^ (b | ~e)) + d[3] + 2399980690 & 4294967295;
    h = b + (f << 10 & 4294967295 | f >>> 22);
    f = e + (b ^ (h | ~c)) + d[10] + 4293915773 & 4294967295;
    e = h + (f << 15 & 4294967295 | f >>> 17);
    f = c + (h ^ (e | ~b)) + d[1] + 2240044497 & 4294967295;
    c = e + (f << 21 & 4294967295 | f >>> 11);
    f = b + (e ^ (c | ~h)) + d[8] + 1873313359 & 4294967295;
    b = c + (f << 6 & 4294967295 | f >>> 26);
    f = h + (c ^ (b | ~e)) + d[15] + 4264355552 & 4294967295;
    h = b + (f << 10 & 4294967295 | f >>> 22);
    f = e + (b ^ (h | ~c)) + d[6] + 2734768916 & 4294967295;
    e = h + (f << 15 & 4294967295 | f >>> 17);
    f = c + (h ^ (e | ~b)) + d[13] + 1309151649 & 4294967295;
    c = e + (f << 21 & 4294967295 | f >>> 11);
    f = b + (e ^ (c | ~h)) + d[4] + 4149444226 & 4294967295;
    b = c + (f << 6 & 4294967295 | f >>> 26);
    f = h + (c ^ (b | ~e)) + d[11] + 3174756917 & 4294967295;
    h = b + (f << 10 & 4294967295 | f >>> 22);
    f = e + (b ^ (h | ~c)) + d[2] + 718787259 & 4294967295;
    e = h + (f << 15 & 4294967295 | f >>> 17);
    f = c + (h ^ (e | ~b)) + d[9] + 3951481745 & 4294967295;
    a.g[0] = a.g[0] + b & 4294967295;
    a.g[1] = a.g[1] + (e + (f << 21 & 4294967295 | f >>> 11)) & 4294967295;
    a.g[2] = a.g[2] + e & 4294967295;
    a.g[3] = a.g[3] + h & 4294967295;
  }
  T.prototype.j = function (a, b) {
    void 0 === b && (b = a.length);
    for (var c = b - this.blockSize, d = this.m, e = this.h, h = 0; h < b;) {
      if (0 == e) for (; h <= c;) ke(this, a, h), h += this.blockSize;
      if ("string" === typeof a) for (; h < b;) {
        if (d[e++] = a.charCodeAt(h++), e == this.blockSize) {
          ke(this, d);
          e = 0;
          break;
        }
      } else for (; h < b;) if (d[e++] = a[h++], e == this.blockSize) {
        ke(this, d);
        e = 0;
        break;
      }
    }
    this.h = e;
    this.i += b;
  };
  T.prototype.l = function () {
    var a = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
    a[0] = 128;
    for (var b = 1; b < a.length - 8; ++b) a[b] = 0;
    var c = 8 * this.i;
    for (b = a.length - 8; b < a.length; ++b) a[b] = c & 255, c /= 256;
    this.j(a);
    a = Array(16);
    for (b = c = 0; 4 > b; ++b) for (var d = 0; 32 > d; d += 8) a[c++] = this.g[b] >>> d & 255;
    return a;
  };
  function U(a, b) {
    this.h = b;
    for (var c = [], d = !0, e = a.length - 1; 0 <= e; e--) {
      var h = a[e] | 0;
      d && h == b || (c[e] = h, d = !1);
    }
    this.g = c;
  }
  var le = {};
  function me(a) {
    return -128 <= a && 128 > a ? Ga(le, a, function (b) {
      return new U([b | 0], 0 > b ? -1 : 0);
    }) : new U([a | 0], 0 > a ? -1 : 0);
  }
  function V(a) {
    if (isNaN(a) || !isFinite(a)) return ne;
    if (0 > a) return W(V(-a));
    for (var b = [], c = 1, d = 0; a >= c; d++) b[d] = a / c | 0, c *= oe;
    return new U(b, 0);
  }
  function pe(a, b) {
    if (0 == a.length) throw Error("number format error: empty string");
    b = b || 10;
    if (2 > b || 36 < b) throw Error("radix out of range: " + b);
    if ("-" == a.charAt(0)) return W(pe(a.substring(1), b));
    if (0 <= a.indexOf("-")) throw Error('number format error: interior "-" character');
    for (var c = V(Math.pow(b, 8)), d = ne, e = 0; e < a.length; e += 8) {
      var h = Math.min(8, a.length - e),
        f = parseInt(a.substring(e, e + h), b);
      8 > h ? (h = V(Math.pow(b, h)), d = d.S(h).add(V(f))) : (d = d.S(c), d = d.add(V(f)));
    }
    return d;
  }
  var oe = 4294967296,
    ne = me(0),
    qe = me(1),
    re = me(16777216);
  n = U.prototype;
  n.ga = function () {
    if (X(this)) return -W(this).ga();
    for (var a = 0, b = 1, c = 0; c < this.g.length; c++) {
      var d = this.F(c);
      a += (0 <= d ? d : oe + d) * b;
      b *= oe;
    }
    return a;
  };
  n.toString = function (a) {
    a = a || 10;
    if (2 > a || 36 < a) throw Error("radix out of range: " + a);
    if (Y(this)) return "0";
    if (X(this)) return "-" + W(this).toString(a);
    for (var b = V(Math.pow(a, 6)), c = this, d = "";;) {
      var e = se(c, b).g;
      c = te(c, e.S(b));
      var h = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(a);
      c = e;
      if (Y(c)) return h + d;
      for (; 6 > h.length;) h = "0" + h;
      d = h + d;
    }
  };
  n.F = function (a) {
    return 0 > a ? 0 : a < this.g.length ? this.g[a] : this.h;
  };
  function Y(a) {
    if (0 != a.h) return !1;
    for (var b = 0; b < a.g.length; b++) if (0 != a.g[b]) return !1;
    return !0;
  }
  function X(a) {
    return -1 == a.h;
  }
  n.$ = function (a) {
    a = te(this, a);
    return X(a) ? -1 : Y(a) ? 0 : 1;
  };
  function W(a) {
    for (var b = a.g.length, c = [], d = 0; d < b; d++) c[d] = ~a.g[d];
    return new U(c, ~a.h).add(qe);
  }
  n.abs = function () {
    return X(this) ? W(this) : this;
  };
  n.add = function (a) {
    for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0, e = 0; e <= b; e++) {
      var h = d + (this.F(e) & 65535) + (a.F(e) & 65535),
        f = (h >>> 16) + (this.F(e) >>> 16) + (a.F(e) >>> 16);
      d = f >>> 16;
      h &= 65535;
      f &= 65535;
      c[e] = f << 16 | h;
    }
    return new U(c, c[c.length - 1] & -2147483648 ? -1 : 0);
  };
  function te(a, b) {
    return a.add(W(b));
  }
  n.S = function (a) {
    if (Y(this) || Y(a)) return ne;
    if (X(this)) return X(a) ? W(this).S(W(a)) : W(W(this).S(a));
    if (X(a)) return W(this.S(W(a)));
    if (0 > this.$(re) && 0 > a.$(re)) return V(this.ga() * a.ga());
    for (var b = this.g.length + a.g.length, c = [], d = 0; d < 2 * b; d++) c[d] = 0;
    for (d = 0; d < this.g.length; d++) for (var e = 0; e < a.g.length; e++) {
      var h = this.F(d) >>> 16,
        f = this.F(d) & 65535,
        k = a.F(e) >>> 16,
        l = a.F(e) & 65535;
      c[2 * d + 2 * e] += f * l;
      ue(c, 2 * d + 2 * e);
      c[2 * d + 2 * e + 1] += h * l;
      ue(c, 2 * d + 2 * e + 1);
      c[2 * d + 2 * e + 1] += f * k;
      ue(c, 2 * d + 2 * e + 1);
      c[2 * d + 2 * e + 2] += h * k;
      ue(c, 2 * d + 2 * e + 2);
    }
    for (d = 0; d < b; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];
    for (d = b; d < 2 * b; d++) c[d] = 0;
    return new U(c, 0);
  };
  function ue(a, b) {
    for (; (a[b] & 65535) != a[b];) a[b + 1] += a[b] >>> 16, a[b] &= 65535, b++;
  }
  function ve(a, b) {
    this.g = a;
    this.h = b;
  }
  function se(a, b) {
    if (Y(b)) throw Error("division by zero");
    if (Y(a)) return new ve(ne, ne);
    if (X(a)) return b = se(W(a), b), new ve(W(b.g), W(b.h));
    if (X(b)) return b = se(a, W(b)), new ve(W(b.g), b.h);
    if (30 < a.g.length) {
      if (X(a) || X(b)) throw Error("slowDivide_ only works with positive integers.");
      for (var c = qe, d = b; 0 >= d.$(a);) c = we(c), d = we(d);
      var e = xe(c, 1),
        h = xe(d, 1);
      d = xe(d, 2);
      for (c = xe(c, 2); !Y(d);) {
        var f = h.add(d);
        0 >= f.$(a) && (e = e.add(c), h = f);
        d = xe(d, 1);
        c = xe(c, 1);
      }
      b = te(a, e.S(b));
      return new ve(e, b);
    }
    for (e = ne; 0 <= a.$(b);) {
      c = Math.max(1, Math.floor(a.ga() / b.ga()));
      d = Math.ceil(Math.log(c) / Math.LN2);
      d = 48 >= d ? 1 : Math.pow(2, d - 48);
      h = V(c);
      for (f = h.S(b); X(f) || 0 < f.$(a);) c -= d, h = V(c), f = h.S(b);
      Y(h) && (h = qe);
      e = e.add(h);
      a = te(a, f);
    }
    return new ve(e, a);
  }
  n.jb = function (a) {
    return se(this, a).h;
  };
  n.and = function (a) {
    for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.F(d) & a.F(d);
    return new U(c, this.h & a.h);
  };
  n.or = function (a) {
    for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.F(d) | a.F(d);
    return new U(c, this.h | a.h);
  };
  n.xor = function (a) {
    for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.F(d) ^ a.F(d);
    return new U(c, this.h ^ a.h);
  };
  function we(a) {
    for (var b = a.g.length + 1, c = [], d = 0; d < b; d++) c[d] = a.F(d) << 1 | a.F(d - 1) >>> 31;
    return new U(c, a.h);
  }
  function xe(a, b) {
    var c = b >> 5;
    b %= 32;
    for (var d = a.g.length - c, e = [], h = 0; h < d; h++) e[h] = 0 < b ? a.F(h + c) >>> b | a.F(h + c + 1) << 32 - b : a.F(h + c);
    return new U(e, a.h);
  }
  ;
  fe.prototype.createWebChannel = fe.prototype.g;
  R.prototype.send = R.prototype.u;
  R.prototype.open = R.prototype.m;
  R.prototype.close = R.prototype.close;
  hc.NO_ERROR = 0;
  hc.TIMEOUT = 8;
  hc.HTTP_ERROR = 6;
  ic.COMPLETE = "complete";
  lc.EventType = mc;
  mc.OPEN = "a";
  mc.CLOSE = "b";
  mc.ERROR = "c";
  mc.MESSAGE = "d";
  C.prototype.listen = C.prototype.P;
  Q.prototype.listenOnce = Q.prototype.R;
  Q.prototype.getLastError = Q.prototype.Va;
  Q.prototype.getLastErrorCode = Q.prototype.La;
  Q.prototype.getStatus = Q.prototype.fa;
  Q.prototype.getResponseJson = Q.prototype.Za;
  Q.prototype.getResponseText = Q.prototype.ma;
  Q.prototype.send = Q.prototype.ja;
  Q.prototype.setWithCredentials = Q.prototype.Ra;
  T.prototype.digest = T.prototype.l;
  T.prototype.reset = T.prototype.reset;
  T.prototype.update = T.prototype.j;
  U.prototype.add = U.prototype.add;
  U.prototype.multiply = U.prototype.S;
  U.prototype.modulo = U.prototype.jb;
  U.prototype.compare = U.prototype.$;
  U.prototype.toNumber = U.prototype.ga;
  U.prototype.toString = U.prototype.toString;
  U.prototype.getBits = U.prototype.F;
  U.fromNumber = V;
  U.fromString = pe;
  module.exports.createWebChannelTransport = function () {
    return new fe();
  };
  module.exports.getStatEventTarget = function () {
    return bc();
  };
  module.exports.ErrorCode = hc;
  module.exports.EventType = ic;
  module.exports.Event = G;
  module.exports.Stat = {
    Ab: 0,
    Db: 1,
    Eb: 2,
    Xb: 3,
    bc: 4,
    Zb: 5,
    $b: 6,
    Yb: 7,
    Wb: 8,
    ac: 9,
    PROXY: 10,
    NOPROXY: 11,
    Ub: 12,
    Qb: 13,
    Rb: 14,
    Pb: 15,
    Sb: 16,
    Tb: 17,
    wb: 18,
    vb: 19,
    xb: 20
  };
  module.exports.FetchXmlHttpFactory = Dd;
  module.exports.WebChannel = lc;
  module.exports.XhrIo = Q;
  module.exports.Md5 = T;
  module.exports.Integer = U;
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuIiwiYWEiLCJhIiwiYiIsImxlbmd0aCIsImRvbmUiLCJ2YWx1ZSIsInEiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNhbGwiLCJuZXh0IiwiYmEiLCJPYmplY3QiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJjYSIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImMiLCJBcnJheSIsImRhIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJNYXRoIiwiRXJyb3IiLCJyIiwidSIsInNwbGl0IiwiZCIsImUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVhIiwic2V0UHJvdG90eXBlT2YiLCJmYSIsImhhIiwiaWEiLCJfX3Byb3RvX18iLCJUeXBlRXJyb3IiLCJqYSIsImgiLCJmIiwiZyIsInRvU3RyaW5nIiwicmFuZG9tIiwia2EiLCJpIiwibyIsImsiLCJqIiwicmVzb2x2ZSIsInJlamVjdCIsImwiLCJwdXNoIiwic2V0VGltZW91dCIsIm0iLCJwIiwiQiIsIkQiLCJBIiwidGhlbiIsIkciLCJzIiwiQyIsInYiLCJjb25zb2xlIiwiZXJyb3IiLCJDdXN0b21FdmVudCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNhbmNlbGFibGUiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwicHJvbWlzZSIsInJlYXNvbiIsImxhIiwiRSIsIkgiLCJTIiwiWiIsInQiLCJjYXRjaCIsInJhY2UiLCJhbGwiLCJTdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsInNldCIsImlzRXh0ZW5zaWJsZSIsInNlYWwiLCJnZXQiLCJkZWxldGUiLCJoYXMiLCJWIiwiaGVhZCIsImtleSIsImlkIiwibGlzdCIsImluZGV4IiwiSiIsInNpemUiLCJlbnRyaWVzIiwieCIsIldlYWtNYXAiLCJzcGxpY2UiLCJjbGVhciIsImtleXMiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiTWFwIiwiYWRkIiwiZ29vZyIsInciLCJtYSIsIm5hIiwiaXNBcnJheSIsIm9hIiwicGEiLCJxYSIsInJhIiwic2EiLCJhcHBseSIsImJpbmQiLCJhcmd1bWVudHMiLCJ0YSIsInNsaWNlIiwidW5zaGlmdCIsIkZ1bmN0aW9uIiwiaW5kZXhPZiIsInVhIiwieSIsInRlbXBDdG9yIiwiY29uc3RydWN0b3IiLCJkYyIsInoiLCJ2YSIsIndhIiwiTyIsInNoaWZ0IiwieGEiLCJ5YSIsInRvQXJyYXkiLCJ6YSIsImV4dGVuZCIsInR5cGUiLCJ0YXJnZXQiLCJkZWZhdWx0UHJldmVudGVkIiwiQWEiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkJhIiwidGVzdCIsIkNhIiwidHJpbSIsImV4ZWMiLCJEYSIsIkVhIiwiZ2V0TmF0aXZlVXNlckFnZW50U3RyaW5nIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2hVc2VyQWdlbnQiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsInRvTG93ZXJDYXNlIiwiTWEiLCJOYSIsImRvY3VtZW50TW9kZSIsIk9hIiwiUGEiLCJRYSIsIlJhIiwicGFyc2VGbG9hdCIsIlNhIiwiVGEiLCJtYXgiLCJwYXJzZUludCIsIlVhIiwiVmEiLCJXYSIsIlhhIiwicmVsYXRlZFRhcmdldCIsImJ1dHRvbiIsInNjcmVlblkiLCJzY3JlZW5YIiwiY2xpZW50WSIsImNsaWVudFgiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic3RhdGUiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsImNoYW5nZWRUb3VjaGVzIiwic3JjRWxlbWVudCIsIm5vZGVOYW1lIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJwYWdlWCIsInBhZ2VZIiwiWWEiLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwiWmEiLCIkYSIsImFiIiwibGlzdGVuZXIiLCJwcm94eSIsInNyYyIsImNhcHR1cmUiLCJiYiIsImNiIiwiZGIiLCJjbG9uZSIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm9uY2UiLCJuYiIsIm9iIiwiUCIsInBiIiwicWIiLCJyYiIsImF0dGFjaEV2ZW50Iiwic2IiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwidGIiLCJSIiwidWIiLCJ2YiIsImRldGFjaEV2ZW50Iiwid2IiLCJoYW5kbGVFdmVudCIsIlQiLCJLIiwieGIiLCJjb25jYXQiLCJ5YiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ6YiIsIkFiIiwiV29ya1F1ZXVlIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJyZXNldCIsIldvcmtJdGVtIiwiRmIiLCJ0aHJvd0V4Y2VwdGlvbiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiUHJvbWlzZSIsIktiIiwiTGIiLCJEYXRlIiwibm93IiwiVSIsImNsZWFyVGltZW91dCIsIk1iIiwic3RhcnQiLCJOYiIsIk51bWJlciIsIkYiLCJUaHJvdHRsZSIsIk9iIiwiUGIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsImluZm8iLCJYYiIsIlliIiwiWmIiLCIkYiIsInBhcnNlIiwiYWMiLCJiYyIsImNjIiwiU1RBVF9FVkVOVCIsImVjIiwic3RhdCIsIkkiLCJmYyIsImdjIiwiaGMiLCJOT19FUlJPUiIsIlRJTUVPVVQiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwiT1BFTiIsIm5jIiwib2MiLCJwYyIsInFjIiwiWE1MSHR0cFJlcXVlc3QiLCJyYyIsIlkiLCJXIiwic2MiLCJYIiwiTSIsIk4iLCJMIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiVGV4dERlY29kZXIiLCJGYyIsImRlY29kZSIsInN0cmVhbSIsImdldFJlc3BvbnNlSGVhZGVyIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsInN1YnN0cmluZyIsImlzTmFOIiwic3Vic3RyIiwiY2FuY2VsIiwiTGMiLCJhYm9ydCIsIk1jIiwiV2MiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlNldCIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJYYyIsIlljIiwiZnJvbSIsIlpjIiwiJGMiLCJhZCIsIlJlZ0V4cCIsImJkIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImNkIiwiZGQiLCJlZCIsImZkIiwibWF0Y2giLCJnZCIsImhkIiwiamQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjaGFyQXQiLCJrZCIsImxkIiwibWQiLCJqb2luIiwibGFzdEluZGV4T2YiLCJwb3AiLCJuZCIsIm9kIiwiZmxvb3IiLCJhYnMiLCJkZWNvZGVVUkkiLCJlbmNvZGVVUkkiLCJwZCIsImNoYXJDb2RlQXQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsInVkIiwidmQiLCJQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmciLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJuZXh0SG9wUHJvdG9jb2wiLCJ3ZCIsInhkIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJJbWFnZSIsIm9ubG9hZCIsIkNkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJEZCIsIkVkIiwicmVhZHlTdGF0ZSIsIkZkIiwic3RhdHVzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiSGVhZGVycyIsIm9wZW4iLCJHZCIsInNlbmQiLCJoZWFkZXJzIiwibWV0aG9kIiwiY3JlZGVudGlhbHMiLCJjYWNoZSIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3QiLCJIZCIsImFycmF5QnVmZmVyIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJJZCIsInRleHQiLCJyZWFkIiwiVWludDhBcnJheSIsInNldFJlcXVlc3RIZWFkZXIiLCJhcHBlbmQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJKZCIsIlEiLCJLZCIsIkxkIiwiTWQiLCJ0b1VwcGVyQ2FzZSIsIk5kIiwiZ2V0UHJvdG90eXBlT2YiLCJmaW5kIiwiRm9ybURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJPZCIsIlBkIiwidGltZW91dCIsIlFkIiwiUmQiLCJTZCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJtb3pSZXNwb25zZUFycmF5QnVmZmVyIiwiVGQiLCJVZCIsIlZkIiwiaW50ZXJuYWxDaGFubmVsUGFyYW1zIiwiV2QiLCJ4bWxIdHRwRmFjdG9yeSIsInN1cHBvcnRzQ3Jvc3NEb21haW5YaHIiLCJjb25jdXJyZW50UmVxdWVzdExpbWl0IiwiZmFzdEhhbmRzaGFrZSIsImVuY29kZUluaXRNZXNzYWdlSGVhZGVycyIsImZvcmNlTG9uZ1BvbGxpbmciLCJkZXRlY3RCdWZmZXJpbmdQcm94eSIsIlhkIiwiWWQiLCJzZW5kQmVhY29uIiwiWmQiLCIkZCIsImFlIiwiX19kYXRhX18iLCJiZSIsImNlIiwicm91bmQiLCJtaW4iLCJkZSIsImhvc3RuYW1lIiwicG9ydCIsImVlIiwiZmUiLCJtZXNzYWdlVXJsUGFyYW1zIiwibWVzc2FnZUhlYWRlcnMiLCJjbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkIiwiaW5pdE1lc3NhZ2VIZWFkZXJzIiwibWVzc2FnZUNvbnRlbnRUeXBlIiwic2VuZFJhd0pzb24iLCJodHRwU2Vzc2lvbklkUGFyYW0iLCJnZSIsImNsb3NlIiwiaGUiLCJfX3NtX18iLCJkYXRhIiwiaWUiLCJqZSIsImJsb2NrU2l6ZSIsImtlIiwibGUiLCJtZSIsImlzRmluaXRlIiwibmUiLCJvZSIsInBlIiwicG93IiwicWUiLCJyZSIsImdhIiwic2UiLCJ0ZSIsIiQiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsImNlaWwiLCJsb2ciLCJMTjIiLCJhbmQiLCJvciIsInhvciIsImNyZWF0ZVdlYkNoYW5uZWwiLCJIVFRQX0VSUk9SIiwiQ09NUExFVEUiLCJFdmVudFR5cGUiLCJDTE9TRSIsIkVSUk9SIiwiTUVTU0FHRSIsImxpc3RlbiIsImxpc3Rlbk9uY2UiLCJnZXRMYXN0RXJyb3IiLCJnZXRMYXN0RXJyb3JDb2RlIiwiZ2V0U3RhdHVzIiwiZ2V0UmVzcG9uc2VKc29uIiwiZ2V0UmVzcG9uc2VUZXh0Iiwic2V0V2l0aENyZWRlbnRpYWxzIiwiZGlnZXN0IiwidXBkYXRlIiwibXVsdGlwbHkiLCJtb2R1bG8iLCJjb21wYXJlIiwidG9OdW1iZXIiLCJnZXRCaXRzIiwiZnJvbU51bWJlciIsImZyb21TdHJpbmciLCJleHBvcnRzIiwiY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCIsIm1vZHVsZSIsImdldFN0YXRFdmVudFRhcmdldCIsIkVycm9yQ29kZSIsIlN0YXQiLCJQUk9YWSIsIk5PUFJPWFkiLCJGZXRjaFhtbEh0dHBGYWN0b3J5IiwiV2ViQ2hhbm5lbCIsIlhocklvIiwiTWQ1IiwiSW50ZWdlciJdLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9iYXNlLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvZXM2L3V0aWwvYXJyYXlpdGVyYXRvci5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi91dGlsL21ha2VpdGVyYXRvci5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL3V0aWwvb2JqZWN0Y3JlYXRlLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvdXRpbC9kZWZpbmVwcm9wZXJ0eS5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL3V0aWwvZ2xvYmFsLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvdXRpbC9wb2x5ZmlsbC5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi91dGlsL3NldHByb3RvdHlwZW9mLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvZXM2L3N5bWJvbC5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi9wcm9taXNlL3Byb21pc2UuanMiLCJzcmMvY29tL2dvb2dsZS9qYXZhc2NyaXB0L2pzY29tcC9qcy9lczYvdXRpbC9pdGVyYXRvcmZyb21hcnJheS5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi9hcnJheS92YWx1ZXMuanMiLCJzcmMvY29tL2dvb2dsZS9qYXZhc2NyaXB0L2pzY29tcC9qcy9lczYvYXJyYXkva2V5cy5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL3V0aWwvb3ducy5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi93ZWFrbWFwLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvZXM2L21hcC5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi9hcnJheS9maW5kLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvdXRpbC9maW5kaW50ZXJuYWwuanMiLCJzcmMvY29tL2dvb2dsZS9qYXZhc2NyaXB0L2pzY29tcC9qcy9lczYvYXJyYXkvZW50cmllcy5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi9hcnJheS9mcm9tLmpzIiwic3JjL2NvbS9nb29nbGUvamF2YXNjcmlwdC9qc2NvbXAvanMvZXM2L3NldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9kaXNwb3NhYmxlL2Rpc3Bvc2FibGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvYXJyYXkvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvZXZlbnRzL2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9icm93c2VyZmVhdHVyZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9zdHJpbmcvaW50ZXJuYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy91c2VyYWdlbnQvdXRpbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9yZWZsZWN0L3JlZmxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvdXNlcmFnZW50L3VzZXJhZ2VudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9sYWJzL3VzZXJhZ2VudC9icm93c2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2xhYnMvdXNlcmFnZW50L2VuZ2luZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9uZXQveGhyaW8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvZXZlbnRzL2Jyb3dzZXJldmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9ldmVudHMvZXZlbnR0eXBlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9saXN0ZW5hYmxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9saXN0ZW5hYmxla2V5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9saXN0ZW5lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9ldmVudHMvbGlzdGVuZXJtYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvb2JqZWN0L29iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9ldmVudHMvZXZlbnRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9ldmVudHRhcmdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9qc29uL2pzb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvYXN5bmMvZnJlZWxpc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvYXN5bmMvd29ya3F1ZXVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2FzeW5jL3J1bi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9hc3luYy90aHJvd2V4Y2VwdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy90aW1lci90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9hc3luYy90aHJvdHRsZS5qcyIsInNyYy9jb20vZ29vZ2xlL2phdmFzY3JpcHQvanNjb21wL2pzL2VzNi91dGlsL2luaGVyaXRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2V2ZW50cy9ldmVudGhhbmRsZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC93ZWJjaGFubmVsZGVidWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC9yZXF1ZXN0c3RhdHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbmV0L2Vycm9yY29kZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9uZXQvZXZlbnR0eXBlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL25ldC94bWxodHRwZmFjdG9yeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9sYWJzL25ldC93ZWJjaGFubmVsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL25ldC94bWxodHRwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2xhYnMvbmV0L3dlYmNoYW5uZWwvY2hhbm5lbHJlcXVlc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC9lbnZpcm9ubWVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9sYWJzL25ldC93ZWJjaGFubmVsL3dlYmNoYW5uZWxiYXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL3VyaS91cmkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvc3RyaW5nL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9kaXNwb3NhYmxlL2Rpc3Bvc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC93aXJldjguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC9mb3J3YXJkY2hhbm5lbHJlcXVlc3Rwb29sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL3N0cnVjdHMvc3RydWN0cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy91cmkvdXRpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbGFicy9uZXQvd2ViY2hhbm5lbC93aXJlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2pzb24vbmF0aXZlanNvbnByb2Nlc3Nvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9sYWJzL25ldC93ZWJjaGFubmVsL25ldHV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL25ldC9mZXRjaHhtbGh0dHBmYWN0b3J5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2Z1bmN0aW9ucy9mdW5jdGlvbnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvanNvbi9oeWJyaWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbmV0L2h0dHBzdGF0dXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbmV0L3JwYy9odHRwY29ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9sYWJzL25ldC93ZWJjaGFubmVsdHJhbnNwb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2xhYnMvbmV0L3dlYmNoYW5uZWwvd2ViY2hhbm5lbGJhc2V0cmFuc3BvcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvY3J5cHQvaGFzaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9nb29nbGUtY2xvc3VyZS1saWJyYXJ5L2Nsb3N1cmUvZ29vZy9jcnlwdC9tZDUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWNsb3N1cmUtbGlicmFyeS9jbG9zdXJlL2dvb2cvbWF0aC9pbnRlZ2VyLmpzIiwic3JjL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2dsZS1jbG9zdXJlLWxpYnJhcnkvY2xvc3VyZS9nb29nL2xhYnMvbmV0L3dlYmNoYW5uZWx0cmFuc3BvcnRmYWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBCb290c3RyYXAgZm9yIHRoZSBHb29nbGUgSlMgTGlicmFyeSAoQ2xvc3VyZSkuXG4gKlxuICogSW4gdW5jb21waWxlZCBtb2RlIGJhc2UuanMgd2lsbCBhdHRlbXB0IHRvIGxvYWQgQ2xvc3VyZSdzIGRlcHMgZmlsZSwgdW5sZXNzXG4gKiB0aGUgZ2xvYmFsIDxjb2RlPkNMT1NVUkVfTk9fREVQUzwvY29kZT4gaXMgc2V0IHRvIHRydWUuICBUaGlzIGFsbG93cyBwcm9qZWN0c1xuICogdG8gaW5jbHVkZSB0aGVpciBvd24gZGVwcyBmaWxlKHMpIGZyb20gZGlmZmVyZW50IGxvY2F0aW9ucy5cbiAqXG4gKiBBdm9pZCBpbmNsdWRpbmcgYmFzZS5qcyBtb3JlIHRoYW4gb25jZS4gVGhpcyBpcyBzdHJpY3RseSBkaXNjb3VyYWdlZCBhbmQgbm90XG4gKiBzdXBwb3J0ZWQuIGdvb2cucmVxdWlyZSguLi4pIHdvbid0IHdvcmsgcHJvcGVybHkgaW4gdGhhdCBjYXNlLlxuICpcbiAqIEBwcm92aWRlR29vZ1xuICovXG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBPdmVycmlkZGVuIHRvIHRydWUgYnkgdGhlIGNvbXBpbGVyLlxuICovXG52YXIgQ09NUElMRUQgPSBmYWxzZTtcblxuXG4vKipcbiAqIEJhc2UgbmFtZXNwYWNlIGZvciB0aGUgQ2xvc3VyZSBsaWJyYXJ5LiAgQ2hlY2tzIHRvIHNlZSBnb29nIGlzIGFscmVhZHlcbiAqIGRlZmluZWQgaW4gdGhlIGN1cnJlbnQgc2NvcGUgYmVmb3JlIGFzc2lnbmluZyB0byBwcmV2ZW50IGNsb2JiZXJpbmcgaWZcbiAqIGJhc2UuanMgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlLlxuICpcbiAqIEBjb25zdFxuICovXG52YXIgZ29vZyA9IGdvb2cgfHwge307XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICogaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvaW5kZXguaHRtbCNzZWMtZ2xvYmFsLW9iamVjdFxuICpcbiAqIE1vcmUgaW5mbyBvbiB0aGlzIGltcGxlbWVudGF0aW9uIGhlcmU6XG4gKiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFOQWVXNFdrN0k3RlYwWTJ0Y1VGdlFkR01jODlrMnZkZ1NYSW53OF9udkNJL2VkaXRcbiAqXG4gKiBAY29uc3RcbiAqIEBzdXBwcmVzcyB7dW5kZWZpbmVkVmFyc30gc2VsZiB3b24ndCBiZSByZWZlcmVuY2VkIHVubGVzcyBgdGhpc2AgaXMgZmFsc3kuXG4gKiBAdHlwZSB7IUdsb2JhbH1cbiAqL1xuZ29vZy5nbG9iYWwgPVxuICAgIC8vIENoZWNrIGB0aGlzYCBmaXJzdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgLy8gVmFsaWQgdW5sZXNzIHJ1bm5pbmcgYXMgYW4gRVMgbW9kdWxlIG9yIGluIGEgZnVuY3Rpb24gd3JhcHBlciBjYWxsZWRcbiAgICAvLyAgIHdpdGhvdXQgc2V0dGluZyBgdGhpc2AgcHJvcGVybHkuXG4gICAgLy8gTm90ZSB0aGF0IGJhc2UuanMgY2FuJ3QgdXNlZnVsbHkgYmUgaW1wb3J0ZWQgYXMgYW4gRVMgbW9kdWxlLCBidXQgaXQgbWF5XG4gICAgLy8gYmUgY29tcGlsZWQgaW50byBidW5kbGVzIHRoYXQgYXJlIGxvYWRhYmxlIGFzIEVTIG1vZHVsZXMuXG4gICAgdGhpcyB8fFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2VsZlxuICAgIC8vIEZvciBpbi1wYWdlIGJyb3dzZXIgZW52aXJvbm1lbnRzIGFuZCB3b3JrZXJzLlxuICAgIHNlbGY7XG5cblxuLyoqXG4gKiBBIGhvb2sgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmluZSB2YWx1ZXMgaW4gdW5jb21waWxlZCBtb2RlLlxuICpcbiAqIEluIHVuY29tcGlsZWQgbW9kZSwgYENMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTYCBtYXkgYmUgZGVmaW5lZCBiZWZvcmVcbiAqIGxvYWRpbmcgYmFzZS5qcy4gIElmIGEga2V5IGlzIGRlZmluZWQgaW4gYENMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTYCxcbiAqIGBnb29nLmRlZmluZWAgd2lsbCB1c2UgdGhlIHZhbHVlIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgdmFsdWUuICBUaGlzXG4gKiBhbGxvd3MgZmxhZ3MgdG8gYmUgb3ZlcndyaXR0ZW4gd2l0aG91dCBjb21waWxhdGlvbiAodGhpcyBpcyBub3JtYWxseVxuICogYWNjb21wbGlzaGVkIHdpdGggdGhlIGNvbXBpbGVyJ3MgXCJkZWZpbmVcIiBmbGFnKS5cbiAqXG4gKiBFeGFtcGxlOlxuICogPHByZT5cbiAqICAgdmFyIENMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTID0geydnb29nLkRFQlVHJzogZmFsc2V9O1xuICogPC9wcmU+XG4gKlxuICogQHR5cGUge09iamVjdDxzdHJpbmcsIChzdHJpbmd8bnVtYmVyfGJvb2xlYW4pPnx1bmRlZmluZWR9XG4gKi9cbmdvb2cuZ2xvYmFsLkNMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTO1xuXG5cbi8qKlxuICogQSBob29rIGZvciBvdmVycmlkaW5nIHRoZSBkZWZpbmUgdmFsdWVzIGluIHVuY29tcGlsZWQgb3IgY29tcGlsZWQgbW9kZSxcbiAqIGxpa2UgQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMgYnV0IGVmZmVjdGl2ZSBpbiBjb21waWxlZCBjb2RlLiAgSW5cbiAqIHVuY29tcGlsZWQgY29kZSBDTE9TVVJFX1VOQ09NUElMRURfREVGSU5FUyB0YWtlcyBwcmVjZWRlbmNlLlxuICpcbiAqIEFsc28gdW5saWtlIENMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTIHRoZSB2YWx1ZXMgbXVzdCBiZSBudW1iZXIsIGJvb2xlYW4gb3JcbiAqIHN0cmluZyBsaXRlcmFscyBvciB0aGUgY29tcGlsZXIgd2lsbCBlbWl0IGFuIGVycm9yLlxuICpcbiAqIFdoaWxlIGFueSBAZGVmaW5lIHZhbHVlIG1heSBiZSBzZXQsIG9ubHkgdGhvc2Ugc2V0IHdpdGggZ29vZy5kZWZpbmUgd2lsbCBiZVxuICogZWZmZWN0aXZlIGZvciB1bmNvbXBpbGVkIGNvZGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIDxwcmU+XG4gKiAgIHZhciBDTE9TVVJFX0RFRklORVMgPSB7J2dvb2cuREVCVUcnOiBmYWxzZX0gO1xuICogPC9wcmU+XG4gKlxuICogQ3VycmVudGx5IHRoZSBDbG9zdXJlIENvbXBpbGVyIHdpbGwgb25seSByZWNvZ25pemUgdmVyeSBzaW1wbGUgZGVmaW5pdGlvbnMgb2ZcbiAqIHRoaXMgdmFsdWUgd2hlbiBsb29raW5nIGZvciB2YWx1ZXMgdG8gYXBwbHkgdG8gY29tcGlsZWQgY29kZSBhbmQgaWdub3JlIGFsbFxuICogb3RoZXIgcmVmZXJlbmNlcy4gIFNwZWNpZmljYWxseSwgaXQgbG9va3MgdGhlIHZhbHVlIGRlZmluZWQgYXQgdGhlIHZhcmlhYmxlXG4gKiBkZWNsYXJhdGlvbiwgYXMgd2l0aCB0aGUgZXhhbXBsZSBhYm92ZS5cbiAqXG4gKiBUT0RPKHVzZXIpOiBJbXByb3ZlIHRoZSByZWNvZ25pemVkIGRlZmluaXRpb25zLlxuICpcbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgKHN0cmluZ3xudW1iZXJ8Ym9vbGVhbik+fG51bGx8dW5kZWZpbmVkfVxuICovXG5nb29nLmdsb2JhbC5DTE9TVVJFX0RFRklORVM7XG5cblxuLyoqXG4gKiBCdWlsZHMgYW4gb2JqZWN0IHN0cnVjdHVyZSBmb3IgdGhlIHByb3ZpZGVkIG5hbWVzcGFjZSBwYXRoLCBlbnN1cmluZyB0aGF0XG4gKiBuYW1lcyB0aGF0IGFscmVhZHkgZXhpc3QgYXJlIG5vdCBvdmVyd3JpdHRlbi4gRm9yIGV4YW1wbGU6XG4gKiBcImEuYi5jXCIgLT4gYSA9IHt9O2EuYj17fTthLmIuYz17fTtcbiAqIFVzZWQgYnkgZ29vZy5wcm92aWRlIGFuZCBnb29nLmV4cG9ydFN5bWJvbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBvYmplY3QgdGhhdCB0aGlzIGZpbGUgZGVmaW5lcy5cbiAqIEBwYXJhbSB7Kj19IG9iamVjdCBUaGUgb2JqZWN0IHRvIGV4cG9zZSBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3ZlcndyaXRlSW1wbGljaXQgSWYgb2JqZWN0IGlzIHNldCBhbmQgYSBwcmV2aW91cyBjYWxsXG4gKiAgICAgaW1wbGljaXRseSBjb25zdHJ1Y3RlZCB0aGUgbmFtZXNwYWNlIGdpdmVuIGJ5IG5hbWUsIHRoaXMgcGFyYW1ldGVyXG4gKiAgICAgY29udHJvbHMgd2hldGhlciBvYmplY3Qgc2hvdWxkIG92ZXJ3cml0ZSB0aGUgaW1wbGljaXRseSBjb25zdHJ1Y3RlZFxuICogICAgIG5hbWVzcGFjZSBvciBiZSBtZXJnZWQgaW50byBpdC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAcGFyYW0gez9PYmplY3Q9fSBvYmplY3RUb0V4cG9ydFRvIFRoZSBvYmplY3QgdG8gYWRkIHRoZSBwYXRoIHRvOyBpZiB0aGlzXG4gKiAgICAgZmllbGQgaXMgbm90IHNwZWNpZmllZCwgaXRzIHZhbHVlIGRlZmF1bHRzIHRvIGBnb29nLmdsb2JhbGAuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV4cG9ydFBhdGhfID0gZnVuY3Rpb24obmFtZSwgb2JqZWN0LCBvdmVyd3JpdGVJbXBsaWNpdCwgb2JqZWN0VG9FeHBvcnRUbykge1xuICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gIHZhciBjdXIgPSBvYmplY3RUb0V4cG9ydFRvIHx8IGdvb2cuZ2xvYmFsO1xuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGV4aGliaXRzIHN0cmFuZ2UgYmVoYXZpb3Igd2hlbiB0aHJvd2luZyBlcnJvcnMgZnJvbVxuICAvLyBtZXRob2RzIGV4dGVybmVkIGluIHRoaXMgbWFubmVyLiAgU2VlIHRoZSB0ZXN0RXhwb3J0U3ltYm9sRXhjZXB0aW9ucyBpblxuICAvLyBiYXNlX3Rlc3QuaHRtbCBmb3IgYW4gZXhhbXBsZS5cbiAgaWYgKCEocGFydHNbMF0gaW4gY3VyKSAmJiB0eXBlb2YgY3VyLmV4ZWNTY3JpcHQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjdXIuZXhlY1NjcmlwdCgndmFyICcgKyBwYXJ0c1swXSk7XG4gIH1cblxuICBmb3IgKHZhciBwYXJ0OyBwYXJ0cy5sZW5ndGggJiYgKHBhcnQgPSBwYXJ0cy5zaGlmdCgpKTspIHtcbiAgICBpZiAoIXBhcnRzLmxlbmd0aCAmJiBvYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFvdmVyd3JpdGVJbXBsaWNpdCAmJiBnb29nLmlzT2JqZWN0KG9iamVjdCkgJiZcbiAgICAgICAgICBnb29nLmlzT2JqZWN0KGN1cltwYXJ0XSkpIHtcbiAgICAgICAgLy8gTWVyZ2UgcHJvcGVydGllcyBvbiBvYmplY3QgKHRoZSBpbnB1dCBwYXJhbWV0ZXIpIHdpdGggdGhlIGV4aXN0aW5nXG4gICAgICAgIC8vIGltcGxpY2l0bHkgZGVmaW5lZCBuYW1lc3BhY2UsIHNvIGFzIHRvIG5vdCBjbG9iYmVyIHByZXZpb3VzbHlcbiAgICAgICAgLy8gZGVmaW5lZCBjaGlsZCBuYW1lc3BhY2VzLlxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iamVjdCkge1xuICAgICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIGN1cltwYXJ0XVtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVpdGhlciB0aGVyZSBpcyBubyBleGlzdGluZyBpbXBsaWNpdCBuYW1lc3BhY2UsIG9yIG92ZXJ3cml0ZUltcGxpY2l0XG4gICAgICAgIC8vIGlzIHNldCB0byB0cnVlLCBzbyBkaXJlY3RseSBhc3NpZ24gb2JqZWN0ICh0aGUgaW5wdXQgcGFyYW1ldGVyKSB0b1xuICAgICAgICAvLyB0aGUgbmFtZXNwYWNlLlxuICAgICAgICBjdXJbcGFydF0gPSBvYmplY3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJbcGFydF0gJiYgY3VyW3BhcnRdICE9PSBPYmplY3QucHJvdG90eXBlW3BhcnRdKSB7XG4gICAgICBjdXIgPSBjdXJbcGFydF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1ciA9IGN1cltwYXJ0XSA9IHt9O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIERlZmluZXMgYSBuYW1lZCB2YWx1ZS4gSW4gdW5jb21waWxlZCBtb2RlLCB0aGUgdmFsdWUgaXMgcmV0cmlldmVkIGZyb21cbiAqIENMT1NVUkVfREVGSU5FUyBvciBDTE9TVVJFX1VOQ09NUElMRURfREVGSU5FUyBpZiB0aGUgb2JqZWN0IGlzIGRlZmluZWQgYW5kXG4gKiBoYXMgdGhlIHByb3BlcnR5IHNwZWNpZmllZCwgYW5kIG90aGVyd2lzZSB1c2VkIHRoZSBkZWZpbmVkIGRlZmF1bHRWYWx1ZS5cbiAqIFdoZW4gY29tcGlsZWQgdGhlIGRlZmF1bHQgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGNvbXBpbGVyIG9wdGlvbnMgb3IgdGhlXG4gKiB2YWx1ZSBzZXQgaW4gdGhlIENMT1NVUkVfREVGSU5FUyBvYmplY3QuIFJldHVybnMgdGhlIGRlZmluZWQgdmFsdWUgc28gdGhhdCBpdFxuICogY2FuIGJlIHVzZWQgc2FmZWx5IGluIG1vZHVsZXMuIE5vdGUgdGhhdCB0aGUgdmFsdWUgdHlwZSBNVVNUIGJlIGVpdGhlclxuICogYm9vbGVhbiwgbnVtYmVyLCBvciBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIGRpc3Rpbmd1aXNoZWQgbmFtZSB0byBwcm92aWRlLlxuICogQHBhcmFtIHtUfSBkZWZhdWx0VmFsdWVcbiAqIEByZXR1cm4ge1R9IFRoZSBkZWZpbmVkIHZhbHVlLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5kZWZpbmUgPSBmdW5jdGlvbihuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgdmFyIHVuY29tcGlsZWREZWZpbmVzID0gZ29vZy5nbG9iYWwuQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVM7XG4gICAgdmFyIGRlZmluZXMgPSBnb29nLmdsb2JhbC5DTE9TVVJFX0RFRklORVM7XG4gICAgaWYgKHVuY29tcGlsZWREZWZpbmVzICYmXG4gICAgICAgIC8vIEFudGkgRE9NLWNsb2JiZXJpbmcgcnVudGltZSBjaGVjayAoYi8zNzczNjU3NikuXG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHVuY29tcGlsZWREZWZpbmVzKS5ub2RlVHlwZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bmNvbXBpbGVkRGVmaW5lcywgbmFtZSkpIHtcbiAgICAgIHZhbHVlID0gdW5jb21waWxlZERlZmluZXNbbmFtZV07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgZGVmaW5lcyAmJlxuICAgICAgICAvLyBBbnRpIERPTS1jbG9iYmVyaW5nIHJ1bnRpbWUgY2hlY2sgKGIvMzc3MzY1NzYpLlxuICAgICAgICAvKiogQHR5cGUgez99ICovIChkZWZpbmVzKS5ub2RlVHlwZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZpbmVzLCBuYW1lKSkge1xuICAgICAgdmFsdWUgPSBkZWZpbmVzW25hbWVdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKlxuICogQGRlZmluZSB7bnVtYmVyfSBJbnRlZ2VyIHllYXIgaW5kaWNhdGluZyB0aGUgc2V0IG9mIGJyb3dzZXIgZmVhdHVyZXMgdGhhdCBhcmVcbiAqIGd1YXJhbnRlZWQgdG8gYmUgcHJlc2VudC4gIFRoaXMgaXMgZGVmaW5lZCB0byBpbmNsdWRlIGV4YWN0bHkgZmVhdHVyZXMgdGhhdFxuICogd29yayBjb3JyZWN0bHkgb24gYWxsIFwibW9kZXJuXCIgYnJvd3NlcnMgdGhhdCBhcmUgc3RhYmxlIG9uIEphbnVhcnkgMSBvZiB0aGVcbiAqIHNwZWNpZmllZCB5ZWFyLiAgRm9yIGV4YW1wbGUsXG4gKiBgYGBqc1xuICogaWYgKGdvb2cuRkVBVFVSRVNFVF9ZRUFSID49IDIwMTkpIHtcbiAqICAgLy8gdXNlIEFQSXMga25vd24gdG8gYmUgYXZhaWxhYmxlIG9uIGFsbCBtYWpvciBzdGFibGUgYnJvd3NlcnMgSmFuIDEsIDIwMTlcbiAqIH0gZWxzZSB7XG4gKiAgIC8vIHBvbHlmaWxsIGZvciBvbGRlciBicm93c2Vyc1xuICogfVxuICogYGBgXG4gKiBUaGlzIGlzIGludGVuZGVkIHRvIGJlIHRoZSBwcmltYXJ5IGRlZmluZSBmb3IgcmVtb3ZpbmdcbiAqIHVubmVjZXNzYXJ5IGJyb3dzZXIgY29tcGF0aWJpbGl0eSBjb2RlIChzdWNoIGFzIHBvbnlmaWxscyBhbmQgd29ya2Fyb3VuZHMpLFxuICogYW5kIHNob3VsZCBpbmZvcm0gdGhlIGRlZmF1bHQgdmFsdWUgZm9yIG1vc3Qgb3RoZXIgZGVmaW5lczpcbiAqIGBgYGpzXG4gKiBjb25zdCBBU1NVTUVfTkFUSVZFX1BST01JU0UgPVxuICogICAgIGdvb2cuZGVmaW5lKCdBU1NVTUVfTkFUSVZFX1BST01JU0UnLCBnb29nLkZFQVRVUkVTRVRfWUVBUiA+PSAyMDE2KTtcbiAqIGBgYFxuICpcbiAqIFRoZSBkZWZhdWx0IGFzc3VtcHRpb24gaXMgdGhhdCBJRTkgaXMgdGhlIGxvd2VzdCBzdXBwb3J0ZWQgYnJvd3Nlciwgd2hpY2ggd2FzXG4gKiBmaXJzdCBhdmFpbGFibGUgSmFuIDEsIDIwMTIuXG4gKlxuICogVE9ETyh1c2VyKTogUmVmZXJlbmNlIG1vcmUgdGhvcm91Z2ggZG9jdW1lbnRhdGlvbiB3aGVuIGl0J3MgYXZhaWxhYmxlLlxuICovXG5nb29nLkZFQVRVUkVTRVRfWUVBUiA9IGdvb2cuZGVmaW5lKCdnb29nLkZFQVRVUkVTRVRfWUVBUicsIDIwMTIpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gREVCVUcgaXMgcHJvdmlkZWQgYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGRlYnVnZ2luZyBjb2RlXG4gKiB0aGF0IHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gYSBwcm9kdWN0aW9uLiBJdCBjYW4gYmUgZWFzaWx5IHN0cmlwcGVkXG4gKiBieSBzcGVjaWZ5aW5nIC0tZGVmaW5lIGdvb2cuREVCVUc9ZmFsc2UgdG8gdGhlIENsb3N1cmUgQ29tcGlsZXIgYWthXG4gKiBKU0NvbXBpbGVyLiBGb3IgZXhhbXBsZSwgbW9zdCB0b1N0cmluZygpIG1ldGhvZHMgc2hvdWxkIGJlIGRlY2xhcmVkIGluc2lkZSBhblxuICogXCJpZiAoZ29vZy5ERUJVRylcIiBjb25kaXRpb25hbCBiZWNhdXNlIHRoZXkgYXJlIGdlbmVyYWxseSB1c2VkIGZvciBkZWJ1Z2dpbmdcbiAqIHB1cnBvc2VzIGFuZCBpdCBpcyBkaWZmaWN1bHQgZm9yIHRoZSBKU0NvbXBpbGVyIHRvIHN0YXRpY2FsbHkgZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZXkgYXJlIHVzZWQuXG4gKi9cbmdvb2cuREVCVUcgPSBnb29nLmRlZmluZSgnZ29vZy5ERUJVRycsIHRydWUpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7c3RyaW5nfSBMT0NBTEUgZGVmaW5lcyB0aGUgbG9jYWxlIGJlaW5nIHVzZWQgZm9yIGNvbXBpbGF0aW9uLiBJdCBpc1xuICogdXNlZCB0byBzZWxlY3QgbG9jYWxlIHNwZWNpZmljIGRhdGEgdG8gYmUgY29tcGlsZWQgaW4ganMgYmluYXJ5LiBCVUlMRCBydWxlXG4gKiBjYW4gc3BlY2lmeSB0aGlzIHZhbHVlIGJ5IFwiLS1kZWZpbmUgZ29vZy5MT0NBTEU9PGxvY2FsZV9uYW1lPlwiIGFzIGEgY29tcGlsZXJcbiAqIG9wdGlvbi5cbiAqXG4gKiBUYWtlIGludG8gYWNjb3VudCB0aGF0IHRoZSBsb2NhbGUgY29kZSBmb3JtYXQgaXMgaW1wb3J0YW50LiBZb3Ugc2hvdWxkIHVzZVxuICogdGhlIGNhbm9uaWNhbCBVbmljb2RlIGZvcm1hdCB3aXRoIGh5cGhlbiBhcyBhIGRlbGltaXRlci4gTGFuZ3VhZ2UgbXVzdCBiZVxuICogbG93ZXJjYXNlLCBMYW5ndWFnZSBTY3JpcHQgLSBDYXBpdGFsaXplZCwgUmVnaW9uIC0gVVBQRVJDQVNFLlxuICogVGhlcmUgYXJlIGZldyBleGFtcGxlczogcHQtQlIsIGVuLCBlbi1VUywgc3ItTGF0aW4tQk8sIHpoLUhhbnMtQ04uXG4gKlxuICogU2VlIG1vcmUgaW5mbyBhYm91dCBsb2NhbGUgY29kZXMgaGVyZTpcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1LyNVbmljb2RlX0xhbmd1YWdlX2FuZF9Mb2NhbGVfSWRlbnRpZmllcnNcbiAqXG4gKiBGb3IgbGFuZ3VhZ2UgY29kZXMgeW91IHNob3VsZCB1c2UgdmFsdWVzIGRlZmluZWQgYnkgSVNPIDY5My0xLiBTZWUgaXQgaGVyZVxuICogaHR0cDovL3d3dy53My5vcmcvV0FJL0VSL0lHL2VydC9pc282MzkuaHRtLiBUaGVyZSBpcyBvbmx5IG9uZSBleGNlcHRpb24gZnJvbVxuICogdGhpcyBydWxlOiB0aGUgSGVicmV3IGxhbmd1YWdlLiBGb3IgbGVnYWN5IHJlYXNvbnMgdGhlIG9sZCBjb2RlIChpdykgc2hvdWxkXG4gKiBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIG5ldyBjb2RlIChoZSkuXG4gKlxuICovXG5nb29nLkxPQ0FMRSA9IGdvb2cuZGVmaW5lKCdnb29nLkxPQ0FMRScsICdlbicpOyAgLy8gZGVmYXVsdCB0byBlblxuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgYm9va2tlZXBpbmcgcHVycG9zZXMuICBXZSB3b3VsZFxuICogbGlrZSB0byBkaXN0aW5ndWlzaCB1c2VzIG9mIGdvb2cuTE9DQUxFIHVzZWQgZm9yIGNvZGUgc3RyaXBwaW5nIHB1cnBvc2VzXG4gKiBhbmQgdXNlcyBvZiBnb29nLkxPQ0FMRSBmb3Igb3RoZXIgdXNlcyAoc3VjaCBhcyBVUkwgcGFyYW1ldGVycykuXG4gKlxuICogVGhpcyBhbGxvd3MgdXMgdG8gYmFuIGRpcmVjdCB1c2VzIG9mIGdvb2cuTE9DQUxFIGFuZCB0byBlbnN1cmUgdGhhdCBhbGxcbiAqIGNvZGUgaGFzIGJlZW4gdHJhbnNmb3JtZWQgdG8gb3VyIG5ldyBsb2NhbGl6YXRpb24gYnVpbGQgc2NoZW1lLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqXG4gKi9cbmdvb2cuZ2V0TG9jYWxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnb29nLkxPQ0FMRTtcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgY29kZSBpcyBydW5uaW5nIG9uIHRydXN0ZWQgc2l0ZXMuXG4gKlxuICogT24gdW50cnVzdGVkIHNpdGVzLCBzZXZlcmFsIG5hdGl2ZSBmdW5jdGlvbnMgY2FuIGJlIGRlZmluZWQgb3Igb3ZlcnJpZGRlbiBieVxuICogZXh0ZXJuYWwgbGlicmFyaWVzIGxpa2UgUHJvdG90eXBlLCBEYXRlanMsIGFuZCBKUXVlcnkgYW5kIHNldHRpbmcgdGhpcyBmbGFnXG4gKiB0byBmYWxzZSBmb3JjZXMgY2xvc3VyZSB0byB1c2UgaXRzIG93biBpbXBsZW1lbnRhdGlvbnMgd2hlbiBwb3NzaWJsZS5cbiAqXG4gKiBJZiB5b3VyIEphdmFTY3JpcHQgY2FuIGJlIGxvYWRlZCBieSBhIHRoaXJkIHBhcnR5IHNpdGUgYW5kIHlvdSBhcmUgd2FyeSBhYm91dFxuICogcmVseWluZyBvbiBub24tc3RhbmRhcmQgaW1wbGVtZW50YXRpb25zLCBzcGVjaWZ5XG4gKiBcIi0tZGVmaW5lIGdvb2cuVFJVU1RFRF9TSVRFPWZhbHNlXCIgdG8gdGhlIGNvbXBpbGVyLlxuICovXG5nb29nLlRSVVNURURfU0lURSA9IGdvb2cuZGVmaW5lKCdnb29nLlRSVVNURURfU0lURScsIHRydWUpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciBjb2RlIHRoYXQgY2FsbHMge0BsaW5rIGdvb2cuc2V0VGVzdE9ubHl9IHNob3VsZFxuICogICAgIGJlIGRpc2FsbG93ZWQgaW4gdGhlIGNvbXBpbGF0aW9uIHVuaXQuXG4gKi9cbmdvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREUgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLkRJU0FMTE9XX1RFU1RfT05MWV9DT0RFJywgQ09NUElMRUQgJiYgIWdvb2cuREVCVUcpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0byB1c2UgYSBDaHJvbWUgYXBwIENTUC1jb21wbGlhbnQgbWV0aG9kIGZvclxuICogICAgIGxvYWRpbmcgc2NyaXB0cyB2aWEgZ29vZy5yZXF1aXJlLiBAc2VlIGFwcGVuZFNjcmlwdFNyY05vZGVfLlxuICovXG5nb29nLkVOQUJMRV9DSFJPTUVfQVBQX1NBRkVfU0NSSVBUX0xPQURJTkcgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLkVOQUJMRV9DSFJPTUVfQVBQX1NBRkVfU0NSSVBUX0xPQURJTkcnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBEZWZpbmVzIGEgbmFtZXNwYWNlIGluIENsb3N1cmUuXG4gKlxuICogQSBuYW1lc3BhY2UgbWF5IG9ubHkgYmUgZGVmaW5lZCBvbmNlIGluIGEgY29kZWJhc2UuIEl0IG1heSBiZSBkZWZpbmVkIHVzaW5nXG4gKiBnb29nLnByb3ZpZGUoKSBvciBnb29nLm1vZHVsZSgpLlxuICpcbiAqIFRoZSBwcmVzZW5jZSBvZiBvbmUgb3IgbW9yZSBnb29nLnByb3ZpZGUoKSBjYWxscyBpbiBhIGZpbGUgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSBmaWxlIGRlZmluZXMgdGhlIGdpdmVuIG9iamVjdHMvbmFtZXNwYWNlcy5cbiAqIFByb3ZpZGVkIHN5bWJvbHMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXG4gKlxuICogSW4gYWRkaXRpb24sIGdvb2cucHJvdmlkZSgpIGNyZWF0ZXMgdGhlIG9iamVjdCBzdHVicyBmb3IgYSBuYW1lc3BhY2VcbiAqIChmb3IgZXhhbXBsZSwgZ29vZy5wcm92aWRlKFwiZ29vZy5mb28uYmFyXCIpIHdpbGwgY3JlYXRlIHRoZSBvYmplY3RcbiAqIGdvb2cuZm9vLmJhciBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0KS5cbiAqXG4gKiBCdWlsZCB0b29scyBhbHNvIHNjYW4gZm9yIHByb3ZpZGUvcmVxdWlyZS9tb2R1bGUgc3RhdGVtZW50c1xuICogdG8gZGlzY2VybiBkZXBlbmRlbmNpZXMsIGJ1aWxkIGRlcGVuZGVuY3kgZmlsZXMgKHNlZSBkZXBzLmpzKSwgZXRjLlxuICpcbiAqIEBzZWUgZ29vZy5yZXF1aXJlXG4gKiBAc2VlIGdvb2cubW9kdWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgcHJvdmlkZWQgYnkgdGhpcyBmaWxlIGluIHRoZSBmb3JtXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICogZGVwcmVjYXRlZCBVc2UgZ29vZy5tb2R1bGUgKHNlZSBiLzE1OTI4OTQwNSlcbiAqL1xuZ29vZy5wcm92aWRlID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoZ29vZy5pc0luTW9kdWxlTG9hZGVyXygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdnb29nLnByb3ZpZGUgY2Fubm90IGJlIHVzZWQgd2l0aGluIGEgbW9kdWxlLicpO1xuICB9XG4gIGlmICghQ09NUElMRUQpIHtcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2FtZSBuYW1lc3BhY2UgaXNuJ3QgcHJvdmlkZWQgdHdpY2UuXG4gICAgLy8gQSBnb29nLm1vZHVsZS9nb29nLnByb3ZpZGUgbWFwcyBhIGdvb2cucmVxdWlyZSB0byBhIHNwZWNpZmljIGZpbGVcbiAgICBpZiAoZ29vZy5pc1Byb3ZpZGVkXyhuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYW1lc3BhY2UgXCInICsgbmFtZSArICdcIiBhbHJlYWR5IGRlY2xhcmVkLicpO1xuICAgIH1cbiAgfVxuXG4gIGdvb2cuY29uc3RydWN0TmFtZXNwYWNlXyhuYW1lKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgcHJvdmlkZWQgYnkgdGhpcyBmaWxlIGluIHRoZSBmb3JtXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICogQHBhcmFtIHs/T2JqZWN0PX0gb2JqZWN0IFRoZSBvYmplY3QgdG8gZW1iZWQgaW4gdGhlIG5hbWVzcGFjZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG92ZXJ3cml0ZUltcGxpY2l0IElmIG9iamVjdCBpcyBzZXQgYW5kIGEgcHJldmlvdXMgY2FsbFxuICogICAgIGltcGxpY2l0bHkgY29uc3RydWN0ZWQgdGhlIG5hbWVzcGFjZSBnaXZlbiBieSBuYW1lLCB0aGlzIHBhcmFtZXRlclxuICogICAgIGNvbnRyb2xzIHdoZXRoZXIgb3B0X29iaiBzaG91bGQgb3ZlcndyaXRlIHRoZSBpbXBsaWNpdGx5IGNvbnN0cnVjdGVkXG4gKiAgICAgbmFtZXNwYWNlIG9yIGJlIG1lcmdlZCBpbnRvIGl0LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuY29uc3RydWN0TmFtZXNwYWNlXyA9IGZ1bmN0aW9uKG5hbWUsIG9iamVjdCwgb3ZlcndyaXRlSW1wbGljaXQpIHtcbiAgaWYgKCFDT01QSUxFRCkge1xuICAgIGRlbGV0ZSBnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZV07XG5cbiAgICB2YXIgbmFtZXNwYWNlID0gbmFtZTtcbiAgICB3aGlsZSAoKG5hbWVzcGFjZSA9IG5hbWVzcGFjZS5zdWJzdHJpbmcoMCwgbmFtZXNwYWNlLmxhc3RJbmRleE9mKCcuJykpKSkge1xuICAgICAgaWYgKGdvb2cuZ2V0T2JqZWN0QnlOYW1lKG5hbWVzcGFjZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZXNwYWNlXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZ29vZy5leHBvcnRQYXRoXyhuYW1lLCBvYmplY3QsIG92ZXJ3cml0ZUltcGxpY2l0KTtcbn07XG5cblxuLyoqXG4gKiBBY2NvcmRpbmcgdG8gdGhlIENTUDMgc3BlYyBhIG5vbmNlIG11c3QgYmUgYSB2YWxpZCBiYXNlNjQgc3RyaW5nLlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvQ1NQMy8jZ3JhbW1hcmRlZi1iYXNlNjQtdmFsdWVcbiAqIEBwcml2YXRlIEBjb25zdFxuICovXG5nb29nLk5PTkNFX1BBVFRFUk5fID0gL15bXFx3Ky9fLV0rWz1dezAsMn0kLztcblxuXG4vKipcbiAqIFJldHVybnMgQ1NQIG5vbmNlLCBpZiBzZXQgZm9yIGFueSBzY3JpcHQgdGFnLlxuICogQHBhcmFtIHs/V2luZG93PX0gb3B0X3dpbmRvdyBUaGUgd2luZG93IGNvbnRleHQgdXNlZCB0byByZXRyaWV2ZSB0aGUgbm9uY2UuXG4gKiAgICAgRGVmYXVsdHMgdG8gZ2xvYmFsIGNvbnRleHQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENTUCBub25jZSBvciBlbXB0eSBzdHJpbmcgaWYgbm8gbm9uY2UgaXMgcHJlc2VudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZ2V0U2NyaXB0Tm9uY2VfID0gZnVuY3Rpb24ob3B0X3dpbmRvdykge1xuICB2YXIgZG9jID0gKG9wdF93aW5kb3cgfHwgZ29vZy5nbG9iYWwpLmRvY3VtZW50O1xuICB2YXIgc2NyaXB0ID0gZG9jLnF1ZXJ5U2VsZWN0b3IgJiYgZG9jLnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtub25jZV0nKTtcbiAgaWYgKHNjcmlwdCkge1xuICAgIC8vIFRyeSB0byBnZXQgdGhlIG5vbmNlIGZyb20gdGhlIElETCBwcm9wZXJ0eSBmaXJzdCwgYmVjYXVzZSBicm93c2VycyB0aGF0XG4gICAgLy8gaW1wbGVtZW50IGFkZGl0aW9uYWwgbm9uY2UgcHJvdGVjdGlvbiBmZWF0dXJlcyAoY3VycmVudGx5IG9ubHkgQ2hyb21lKSB0b1xuICAgIC8vIHByZXZlbnQgbm9uY2Ugc3RlYWxpbmcgdmlhIENTUyBkbyBub3QgZXhwb3NlIHRoZSBub25jZSB2aWEgYXR0cmlidXRlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG4gICAgdmFyIG5vbmNlID0gc2NyaXB0Wydub25jZSddIHx8IHNjcmlwdC5nZXRBdHRyaWJ1dGUoJ25vbmNlJyk7XG4gICAgaWYgKG5vbmNlICYmIGdvb2cuTk9OQ0VfUEFUVEVSTl8udGVzdChub25jZSkpIHtcbiAgICAgIHJldHVybiBub25jZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufTtcblxuXG4vKipcbiAqIE1vZHVsZSBpZGVudGlmaWVyIHZhbGlkYXRpb24gcmVnZXhwLlxuICogTm90ZTogVGhpcyBpcyBhIGNvbnNlcnZhdGl2ZSBjaGVjaywgaXQgaXMgdmVyeSBwb3NzaWJsZSB0byBiZSBtb3JlIGxlbmllbnQsXG4gKiAgIHRoZSBwcmltYXJ5IGV4Y2x1c2lvbiBoZXJlIGlzIFwiL1wiIGFuZCBcIlxcXCIgYW5kIGEgbGVhZGluZyBcIi5cIiwgdGhlc2VcbiAqICAgcmVzdHJpY3Rpb25zIGFyZSBpbnRlbmRlZCB0byBsZWF2ZSB0aGUgZG9vciBvcGVuIGZvciB1c2luZyBnb29nLnJlcXVpcmVcbiAqICAgd2l0aCByZWxhdGl2ZSBmaWxlIHBhdGhzIHJhdGhlciB0aGFuIG1vZHVsZSBpZGVudGlmaWVycy5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVkFMSURfTU9EVUxFX1JFXyA9IC9eW2EtekEtWl8kXVthLXpBLVowLTkuXyRdKiQvO1xuXG5cbi8qKlxuICogRGVmaW5lcyBhIG1vZHVsZSBpbiBDbG9zdXJlLlxuICpcbiAqIE1hcmtzIHRoYXQgdGhpcyBmaWxlIG11c3QgYmUgbG9hZGVkIGFzIGEgbW9kdWxlIGFuZCBjbGFpbXMgdGhlIG5hbWVzcGFjZS5cbiAqXG4gKiBBIG5hbWVzcGFjZSBtYXkgb25seSBiZSBkZWZpbmVkIG9uY2UgaW4gYSBjb2RlYmFzZS4gSXQgbWF5IGJlIGRlZmluZWQgdXNpbmdcbiAqIGdvb2cucHJvdmlkZSgpIG9yIGdvb2cubW9kdWxlKCkuXG4gKlxuICogZ29vZy5tb2R1bGUoKSBoYXMgdGhyZWUgcmVxdWlyZW1lbnRzOlxuICogLSBnb29nLm1vZHVsZSBtYXkgbm90IGJlIHVzZWQgaW4gdGhlIHNhbWUgZmlsZSBhcyBnb29nLnByb3ZpZGUuXG4gKiAtIGdvb2cubW9kdWxlIG11c3QgYmUgdGhlIGZpcnN0IHN0YXRlbWVudCBpbiB0aGUgZmlsZS5cbiAqIC0gb25seSBvbmUgZ29vZy5tb2R1bGUgaXMgYWxsb3dlZCBwZXIgZmlsZS5cbiAqXG4gKiBXaGVuIGEgZ29vZy5tb2R1bGUgYW5ub3RhdGVkIGZpbGUgaXMgbG9hZGVkLCBpdCBpcyBlbmNsb3NlZCBpblxuICogYSBzdHJpY3QgZnVuY3Rpb24gY2xvc3VyZS4gVGhpcyBtZWFucyB0aGF0OlxuICogLSBhbnkgdmFyaWFibGVzIGRlY2xhcmVkIGluIGEgZ29vZy5tb2R1bGUgZmlsZSBhcmUgcHJpdmF0ZSB0byB0aGUgZmlsZVxuICogKG5vdCBnbG9iYWwpLCB0aG91Z2ggdGhlIGNvbXBpbGVyIGlzIGV4cGVjdGVkIHRvIGlubGluZSB0aGUgbW9kdWxlLlxuICogLSBUaGUgY29kZSBtdXN0IG9iZXkgYWxsIHRoZSBydWxlcyBvZiBcInN0cmljdFwiIEphdmFTY3JpcHQuXG4gKiAtIHRoZSBmaWxlIHdpbGwgYmUgbWFya2VkIGFzIFwidXNlIHN0cmljdFwiXG4gKlxuICogTk9URTogdW5saWtlIGdvb2cucHJvdmlkZSwgZ29vZy5tb2R1bGUgZG9lcyBub3QgZGVjbGFyZSBhbnkgc3ltYm9scyBieVxuICogaXRzZWxmLiBJZiBkZWNsYXJlZCBzeW1ib2xzIGFyZSBkZXNpcmVkLCB1c2VcbiAqIGdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKS5cbiAqXG4gKlxuICogU2VlIHRoZSBwdWJsaWMgZ29vZy5tb2R1bGUgcHJvcG9zYWw6IGh0dHA6Ly9nb28uZ2wvVmExaGluXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZXNwYWNlIHByb3ZpZGVkIGJ5IHRoaXMgZmlsZSBpbiB0aGUgZm9ybVxuICogICAgIFwiZ29vZy5wYWNrYWdlLnBhcnRcIiwgaXMgZXhwZWN0ZWQgYnV0IG5vdCByZXF1aXJlZC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmdvb2cubW9kdWxlID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lIHx8XG4gICAgICBuYW1lLnNlYXJjaChnb29nLlZBTElEX01PRFVMRV9SRV8pID09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vZHVsZSBpZGVudGlmaWVyJyk7XG4gIH1cbiAgaWYgKCFnb29nLmlzSW5Hb29nTW9kdWxlTG9hZGVyXygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTW9kdWxlICcgKyBuYW1lICsgJyBoYXMgYmVlbiBsb2FkZWQgaW5jb3JyZWN0bHkuIE5vdGUsICcgK1xuICAgICAgICAnbW9kdWxlcyBjYW5ub3QgYmUgbG9hZGVkIGFzIG5vcm1hbCBzY3JpcHRzLiBUaGV5IHJlcXVpcmUgc29tZSBraW5kIG9mICcgK1xuICAgICAgICAncHJlLXByb2Nlc3Npbmcgc3RlcC4gWW91XFwncmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIGEgbW9kdWxlIHZpYSBhICcgK1xuICAgICAgICAnc2NyaXB0IHRhZyBvciBhcyBhIHBhcnQgb2YgYSBjb25jYXRlbmF0ZWQgYnVuZGxlIHdpdGhvdXQgcmV3cml0aW5nIHRoZSAnICtcbiAgICAgICAgJ21vZHVsZS4gRm9yIG1vcmUgaW5mbyBzZWU6ICcgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvd2lraS9nb29nLm1vZHVsZTotYW4tRVM2LW1vZHVsZS1saWtlLWFsdGVybmF0aXZlLXRvLWdvb2cucHJvdmlkZS4nKTtcbiAgfVxuICBpZiAoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZ29vZy5tb2R1bGUgbWF5IG9ubHkgYmUgY2FsbGVkIG9uY2UgcGVyIG1vZHVsZS4nKTtcbiAgfVxuXG4gIC8vIFN0b3JlIHRoZSBtb2R1bGUgbmFtZSBmb3IgdGhlIGxvYWRlci5cbiAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSA9IG5hbWU7XG4gIGlmICghQ09NUElMRUQpIHtcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2FtZSBuYW1lc3BhY2UgaXNuJ3QgcHJvdmlkZWQgdHdpY2UuXG4gICAgLy8gQSBnb29nLm1vZHVsZS9nb29nLnByb3ZpZGUgbWFwcyBhIGdvb2cucmVxdWlyZSB0byBhIHNwZWNpZmljIGZpbGVcbiAgICBpZiAoZ29vZy5pc1Byb3ZpZGVkXyhuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYW1lc3BhY2UgXCInICsgbmFtZSArICdcIiBhbHJlYWR5IGRlY2xhcmVkLicpO1xuICAgIH1cbiAgICBkZWxldGUgZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW25hbWVdO1xuICB9XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1vZHVsZSBpZGVudGlmaWVyLlxuICogQHJldHVybiB7P30gVGhlIG1vZHVsZSBleHBvcnRzIGZvciBhbiBhbHJlYWR5IGxvYWRlZCBtb2R1bGUgb3IgbnVsbC5cbiAqXG4gKiBOb3RlOiBUaGlzIGlzIG5vdCBhbiBhbHRlcm5hdGl2ZSB0byBnb29nLnJlcXVpcmUsIGl0IGRvZXMgbm90XG4gKiBpbmRpY2F0ZSBhIGhhcmQgZGVwZW5kZW5jeSwgaW5zdGVhZCBpdCBpcyB1c2VkIHRvIGluZGljYXRlXG4gKiBhbiBvcHRpb25hbCBkZXBlbmRlbmN5IG9yIHRvIGFjY2VzcyB0aGUgZXhwb3J0cyBvZiBhIG1vZHVsZVxuICogdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZC5cbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3ZpZGV9XG4gKi9cbmdvb2cubW9kdWxlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIGdvb2cubW9kdWxlLmdldEludGVybmFsXyhuYW1lKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbW9kdWxlIGlkZW50aWZpZXIuXG4gKiBAcmV0dXJuIHs/fSBUaGUgbW9kdWxlIGV4cG9ydHMgZm9yIGFuIGFscmVhZHkgbG9hZGVkIG1vZHVsZSBvciBudWxsLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5tb2R1bGUuZ2V0SW50ZXJuYWxfID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoIUNPTVBJTEVEKSB7XG4gICAgaWYgKG5hbWUgaW4gZ29vZy5sb2FkZWRNb2R1bGVzXykge1xuICAgICAgcmV0dXJuIGdvb2cubG9hZGVkTW9kdWxlc19bbmFtZV0uZXhwb3J0cztcbiAgICB9IGVsc2UgaWYgKCFnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZV0pIHtcbiAgICAgIHZhciBucyA9IGdvb2cuZ2V0T2JqZWN0QnlOYW1lKG5hbWUpO1xuICAgICAgcmV0dXJuIG5zICE9IG51bGwgPyBucyA6IG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuXG4vKipcbiAqIFR5cGVzIG9mIG1vZHVsZXMgdGhlIGRlYnVnIGxvYWRlciBjYW4gbG9hZC5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuTW9kdWxlVHlwZSA9IHtcbiAgRVM2OiAnZXM2JyxcbiAgR09PRzogJ2dvb2cnXG59O1xuXG5cbi8qKlxuICogQHByaXZhdGUgez97XG4gKiAgIG1vZHVsZU5hbWU6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZTpib29sZWFuLFxuICogICB0eXBlOiA/Z29vZy5Nb2R1bGVUeXBlXG4gKiB9fVxuICovXG5nb29nLm1vZHVsZUxvYWRlclN0YXRlXyA9IG51bGw7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIGdvb2cubW9kdWxlIG9yIGFuIGVzNiBtb2R1bGUgaXMgY3VycmVudGx5IGJlaW5nXG4gKiAgICAgaW5pdGlhbGl6ZWQuXG4gKi9cbmdvb2cuaXNJbk1vZHVsZUxvYWRlcl8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdvb2cuaXNJbkdvb2dNb2R1bGVMb2FkZXJfKCkgfHwgZ29vZy5pc0luRXM2TW9kdWxlTG9hZGVyXygpO1xufTtcblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgZ29vZy5tb2R1bGUgaXMgY3VycmVudGx5IGJlaW5nIGluaXRpYWxpemVkLlxuICovXG5nb29nLmlzSW5Hb29nTW9kdWxlTG9hZGVyXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFnb29nLm1vZHVsZUxvYWRlclN0YXRlXyAmJlxuICAgICAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8udHlwZSA9PSBnb29nLk1vZHVsZVR5cGUuR09PRztcbn07XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbiBlczYgbW9kdWxlIGlzIGN1cnJlbnRseSBiZWluZyBpbml0aWFsaXplZC5cbiAqL1xuZ29vZy5pc0luRXM2TW9kdWxlTG9hZGVyXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5Mb2FkZXIgPSAhIWdvb2cubW9kdWxlTG9hZGVyU3RhdGVfICYmXG4gICAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXy50eXBlID09IGdvb2cuTW9kdWxlVHlwZS5FUzY7XG5cbiAgaWYgKGluTG9hZGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIganNjb21wID0gZ29vZy5nbG9iYWxbJyRqc2NvbXAnXTtcblxuICBpZiAoanNjb21wKSB7XG4gICAgLy8ganNjb21wIG1heSBub3QgaGF2ZSBnZXRDdXJyZW50TW9kdWxlUGF0aCBpZiB0aGlzIGlzIGEgY29tcGlsZWQgYnVuZGxlXG4gICAgLy8gdGhhdCBoYXMgc29tZSBvZiB0aGUgcnVudGltZSwgYnV0IG5vdCBhbGwgb2YgaXQuIFRoaXMgY2FuIGhhcHBlbiBpZlxuICAgIC8vIG9wdGltaXphdGlvbnMgYXJlIHR1cm5lZCBvbiBzbyB0aGUgdW51c2VkIHJ1bnRpbWUgaXMgcmVtb3ZlZCBidXQgcmVuYW1pbmdcbiAgICAvLyBhbmQgQ2xvc3VyZSBwYXNzIGFyZSBvZmYgKHNvICRqc2NvbXAgaXMgc3RpbGwgbmFtZWQgJGpzY29tcCBhbmQgdGhlXG4gICAgLy8gZ29vZy5wcm92aWRlL3JlcXVpcmUgY2FsbHMgc3RpbGwgZXhpc3QpLlxuICAgIGlmICh0eXBlb2YganNjb21wLmdldEN1cnJlbnRNb2R1bGVQYXRoICE9ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBCdW5kbGVkIEVTNiBtb2R1bGUuXG4gICAgcmV0dXJuICEhanNjb21wLmdldEN1cnJlbnRNb2R1bGVQYXRoKCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogUHJvdmlkZSB0aGUgbW9kdWxlJ3MgZXhwb3J0cyBhcyBhIGdsb2JhbGx5IGFjY2Vzc2libGUgb2JqZWN0IHVuZGVyIHRoZVxuICogbW9kdWxlJ3MgZGVjbGFyZWQgbmFtZS4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gZWFzZSBtaWdyYXRpb24gdG8gZ29vZy5tb2R1bGVcbiAqIGZvciBmaWxlcyB0aGF0IGhhdmUgZXhpc3RpbmcgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvdmlkZX1cbiAqL1xuZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIUNPTVBJTEVEICYmICFnb29nLmlzSW5Hb29nTW9kdWxlTG9hZGVyXygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSBtdXN0IGJlIGNhbGxlZCBmcm9tICcgK1xuICAgICAgICAnd2l0aGluIGEgZ29vZy5tb2R1bGUnKTtcbiAgfVxuICBpZiAoIUNPTVBJTEVEICYmICFnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnZ29vZy5tb2R1bGUgbXVzdCBiZSBjYWxsZWQgcHJpb3IgdG8gJyArXG4gICAgICAgICdnb29nLm1vZHVsZS5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlLicpO1xuICB9XG4gIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UgPSB0cnVlO1xufTtcblxuXG4vKipcbiAqIEFzc29jaWF0ZXMgYW4gRVM2IG1vZHVsZSB3aXRoIGEgQ2xvc3VyZSBtb2R1bGUgSUQgc28gdGhhdCBpcyBhdmFpbGFibGUgdmlhXG4gKiBnb29nLnJlcXVpcmUuIFRoZSBhc3NvY2lhdGVkIElEICBhY3RzIGxpa2UgYSBnb29nLm1vZHVsZSBJRCAtIGl0IGRvZXMgbm90XG4gKiBjcmVhdGUgYW55IGdsb2JhbCBuYW1lcywgaXQgaXMgbWVyZWx5IGF2YWlsYWJsZSB2aWEgZ29vZy5yZXF1aXJlIC9cbiAqIGdvb2cubW9kdWxlLmdldCAvIGdvb2cuZm9yd2FyZERlY2xhcmUgLyBnb29nLnJlcXVpcmVUeXBlLiBnb29nLnJlcXVpcmUgYW5kXG4gKiBnb29nLm1vZHVsZS5nZXQgd2lsbCByZXR1cm4gdGhlIGVudGlyZSBtb2R1bGUgYXMgaWYgaXQgd2FzIGltcG9ydCAqJ2QuIFRoaXNcbiAqIGFsbG93cyBDbG9zdXJlIGZpbGVzIHRvIHJlZmVyZW5jZSBFUzYgbW9kdWxlcyBmb3IgdGhlIHNha2Ugb2YgbWlncmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3ZpZGV9XG4gKi9cbmdvb2cuZGVjbGFyZU1vZHVsZUlkID0gZnVuY3Rpb24obmFtZXNwYWNlKSB7XG4gIGlmICghQ09NUElMRUQpIHtcbiAgICBpZiAoIWdvb2cuaXNJbkVzNk1vZHVsZUxvYWRlcl8oKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdnb29nLmRlY2xhcmVNb2R1bGVJZCBtYXkgb25seSBiZSBjYWxsZWQgZnJvbSAnICtcbiAgICAgICAgICAnd2l0aGluIGFuIEVTNiBtb2R1bGUnKTtcbiAgICB9XG4gICAgaWYgKGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfICYmIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnZ29vZy5kZWNsYXJlTW9kdWxlSWQgbWF5IG9ubHkgYmUgY2FsbGVkIG9uY2UgcGVyIG1vZHVsZS4nKTtcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZSBpbiBnb29nLmxvYWRlZE1vZHVsZXNfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ01vZHVsZSB3aXRoIG5hbWVzcGFjZSBcIicgKyBuYW1lc3BhY2UgKyAnXCIgYWxyZWFkeSBleGlzdHMuJyk7XG4gICAgfVxuICB9XG4gIGlmIChnb29nLm1vZHVsZUxvYWRlclN0YXRlXykge1xuICAgIC8vIE5vdCBidW5kbGVkIC0gZGVidWcgbG9hZGluZy5cbiAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lID0gbmFtZXNwYWNlO1xuICB9IGVsc2Uge1xuICAgIC8vIEJ1bmRsZWQgLSBub3QgZGVidWcgbG9hZGluZywgbm8gbW9kdWxlIGxvYWRlciBzdGF0ZS5cbiAgICB2YXIganNjb21wID0gZ29vZy5nbG9iYWxbJyRqc2NvbXAnXTtcbiAgICBpZiAoIWpzY29tcCB8fCB0eXBlb2YganNjb21wLmdldEN1cnJlbnRNb2R1bGVQYXRoICE9ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnTW9kdWxlIHdpdGggbmFtZXNwYWNlIFwiJyArIG5hbWVzcGFjZSArXG4gICAgICAgICAgJ1wiIGhhcyBiZWVuIGxvYWRlZCBpbmNvcnJlY3RseS4nKTtcbiAgICB9XG4gICAgdmFyIGV4cG9ydHMgPSBqc2NvbXAucmVxdWlyZShqc2NvbXAuZ2V0Q3VycmVudE1vZHVsZVBhdGgoKSk7XG4gICAgZ29vZy5sb2FkZWRNb2R1bGVzX1tuYW1lc3BhY2VdID0ge1xuICAgICAgZXhwb3J0czogZXhwb3J0cyxcbiAgICAgIHR5cGU6IGdvb2cuTW9kdWxlVHlwZS5FUzYsXG4gICAgICBtb2R1bGVJZDogbmFtZXNwYWNlXG4gICAgfTtcbiAgfVxufTtcblxuXG4vKipcbiAqIE1hcmtzIHRoYXQgdGhlIGN1cnJlbnQgZmlsZSBzaG91bGQgb25seSBiZSB1c2VkIGZvciB0ZXN0aW5nLCBhbmQgbmV2ZXIgZm9yXG4gKiBsaXZlIGNvZGUgaW4gcHJvZHVjdGlvbi5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiB1bml0IHRlc3RzLCB0aGUgbWVzc2FnZSBtYXkgb3B0aW9uYWxseSBiZSBhbiBleGFjdCBuYW1lc3BhY2VcbiAqIGZvciB0aGUgdGVzdCAoZS5nLiAnZ29vZy5zdHJpbmdUZXN0JykuIFRoZSBsaW50ZXIgd2lsbCB0aGVuIGlnbm9yZSB0aGUgZXh0cmFcbiAqIHByb3ZpZGUgKGlmIG5vdCBleHBsaWNpdGx5IGRlZmluZWQgaW4gdGhlIGNvZGUpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgT3B0aW9uYWwgbWVzc2FnZSB0byBhZGQgdG8gdGhlIGVycm9yIHRoYXQnc1xuICogICAgIHJhaXNlZCB3aGVuIHVzZWQgaW4gcHJvZHVjdGlvbiBjb2RlLlxuICovXG5nb29nLnNldFRlc3RPbmx5ID0gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgaWYgKGdvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREUpIHtcbiAgICBvcHRfbWVzc2FnZSA9IG9wdF9tZXNzYWdlIHx8ICcnO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0ltcG9ydGluZyB0ZXN0LW9ubHkgY29kZSBpbnRvIG5vbi1kZWJ1ZyBlbnZpcm9ubWVudCcgK1xuICAgICAgICAob3B0X21lc3NhZ2UgPyAnOiAnICsgb3B0X21lc3NhZ2UgOiAnLicpKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEZvcndhcmQgZGVjbGFyZXMgYSBzeW1ib2wuIFRoaXMgaXMgYW4gaW5kaWNhdGlvbiB0byB0aGUgY29tcGlsZXIgdGhhdCB0aGVcbiAqIHN5bWJvbCBtYXkgYmUgdXNlZCBpbiB0aGUgc291cmNlIHlldCBpcyBub3QgcmVxdWlyZWQgYW5kIG1heSBub3QgYmUgcHJvdmlkZWRcbiAqIGluIGNvbXBpbGF0aW9uLlxuICpcbiAqIFRoZSBtb3N0IGNvbW1vbiB1c2FnZSBvZiBmb3J3YXJkIGRlY2xhcmF0aW9uIGlzIGNvZGUgdGhhdCB0YWtlcyBhIHR5cGUgYXMgYVxuICogZnVuY3Rpb24gcGFyYW1ldGVyIGJ1dCBkb2VzIG5vdCBuZWVkIHRvIHJlcXVpcmUgaXQuIEJ5IGZvcndhcmQgZGVjbGFyaW5nXG4gKiBpbnN0ZWFkIG9mIHJlcXVpcmluZywgbm8gaGFyZCBkZXBlbmRlbmN5IGlzIG1hZGUsIGFuZCAoaWYgbm90IHJlcXVpcmVkXG4gKiBlbHNld2hlcmUpIHRoZSBuYW1lc3BhY2UgbWF5IG5ldmVyIGJlIHJlcXVpcmVkIGFuZCB0aHVzLCBub3QgYmUgcHVsbGVkXG4gKiBpbnRvIHRoZSBKYXZhU2NyaXB0IGJpbmFyeS4gSWYgaXQgaXMgcmVxdWlyZWQgZWxzZXdoZXJlLCBpdCB3aWxsIGJlIHR5cGVcbiAqIGNoZWNrZWQgYXMgbm9ybWFsLlxuICpcbiAqIEJlZm9yZSB1c2luZyBnb29nLmZvcndhcmREZWNsYXJlLCBwbGVhc2UgcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBhdFxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL3dpa2kvQmFkLVR5cGUtQW5ub3RhdGlvbiB0b1xuICogdW5kZXJzdGFuZCB0aGUgb3B0aW9ucyBhbmQgdHJhZGVvZmZzIHdoZW4gd29ya2luZyB3aXRoIGZvcndhcmQgZGVjbGFyYXRpb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lc3BhY2UgdG8gZm9yd2FyZCBkZWNsYXJlIGluIHRoZSBmb3JtIG9mXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICogQGRlcHJlY2F0ZWQgU2VlIGdvL25vZm9yd2FyZGRlY2xhcmF0aW9uLCBVc2UgYGdvb2cucmVxdWlyZVR5cGVgIGluc3RlYWQuXG4gKi9cbmdvb2cuZm9yd2FyZERlY2xhcmUgPSBmdW5jdGlvbihuYW1lKSB7fTtcblxuXG4vKipcbiAqIEZvcndhcmQgZGVjbGFyZSB0eXBlIGluZm9ybWF0aW9uLiBVc2VkIHRvIGFzc2lnbiB0eXBlcyB0byBnb29nLmdsb2JhbFxuICogcmVmZXJlbmNlZCBvYmplY3QgdGhhdCB3b3VsZCBvdGhlcndpc2UgcmVzdWx0IGluIHVua25vd24gdHlwZSByZWZlcmVuY2VzXG4gKiBhbmQgdGh1cyBibG9jayBwcm9wZXJ0eSBkaXNhbWJpZ3VhdGlvbi5cbiAqL1xuZ29vZy5mb3J3YXJkRGVjbGFyZSgnRG9jdW1lbnQnKTtcbmdvb2cuZm9yd2FyZERlY2xhcmUoJ0hUTUxTY3JpcHRFbGVtZW50Jyk7XG5nb29nLmZvcndhcmREZWNsYXJlKCdYTUxIdHRwUmVxdWVzdCcpO1xuXG5cbmlmICghQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiBuYW1lIGhhcyBiZWVuIGdvb2cucHJvdmlkZWQuIFRoaXMgd2lsbCByZXR1cm4gZmFsc2UgZm9yXG4gICAqIG5hbWVzIHRoYXQgYXJlIGF2YWlsYWJsZSBvbmx5IGFzIGltcGxpY2l0IG5hbWVzcGFjZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIG9iamVjdCB0byBsb29rIGZvci5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbmFtZSBoYXMgYmVlbiBwcm92aWRlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuaXNQcm92aWRlZF8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lIGluIGdvb2cubG9hZGVkTW9kdWxlc18pIHx8XG4gICAgICAgICghZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW25hbWVdICYmIGdvb2cuZ2V0T2JqZWN0QnlOYW1lKG5hbWUpICE9IG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOYW1lc3BhY2VzIGltcGxpY2l0bHkgZGVmaW5lZCBieSBnb29nLnByb3ZpZGUuIEZvciBleGFtcGxlLFxuICAgKiBnb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkV2ZW50JykgaW1wbGljaXRseSBkZWNsYXJlcyB0aGF0ICdnb29nJyBhbmRcbiAgICogJ2dvb2cuZXZlbnRzJyBtdXN0IGJlIG5hbWVzcGFjZXMuXG4gICAqXG4gICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgKGJvb2xlYW58dW5kZWZpbmVkKT59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmltcGxpY2l0TmFtZXNwYWNlc18gPSB7J2dvb2cubW9kdWxlJzogdHJ1ZX07XG5cbiAgLy8gTk9URTogV2UgYWRkIGdvb2cubW9kdWxlIGFzIGFuIGltcGxpY2l0IG5hbWVzcGFjZSBhcyBnb29nLm1vZHVsZSBpcyBkZWZpbmVkXG4gIC8vIGhlcmUgYW5kIGJlY2F1c2UgdGhlIGV4aXN0aW5nIG1vZHVsZSBwYWNrYWdlIGhhcyBub3QgYmVlbiBtb3ZlZCB5ZXQgb3V0IG9mXG4gIC8vIHRoZSBnb29nLm1vZHVsZSBuYW1lc3BhY2UuIFRoaXMgc2F0aXNpZmllcyBib3RoIHRoZSBkZWJ1ZyBsb2FkZXIgYW5kXG4gIC8vIGFoZWFkLW9mLXRpbWUgZGVwZW5kZW5jeSBtYW5hZ2VtZW50LlxufVxuXG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgYmFzZWQgb24gaXRzIGZ1bGx5IHF1YWxpZmllZCBleHRlcm5hbCBuYW1lLiAgVGhlIG9iamVjdFxuICogaXMgbm90IGZvdW5kIGlmIG51bGwgb3IgdW5kZWZpbmVkLiAgSWYgeW91IGFyZSB1c2luZyBhIGNvbXBpbGF0aW9uIHBhc3MgdGhhdFxuICogcmVuYW1lcyBwcm9wZXJ0eSBuYW1lcyBiZXdhcmUgdGhhdCB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgcmVuYW1lZFxuICogcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vYmogVGhlIG9iamVjdCB3aXRoaW4gd2hpY2ggdG8gbG9vazsgZGVmYXVsdCBpc1xuICogICAgIHxnb29nLmdsb2JhbHwuXG4gKiBAcmV0dXJuIHs/fSBUaGUgdmFsdWUgKG9iamVjdCBvciBwcmltaXRpdmUpIG9yLCBpZiBub3QgZm91bmQsIG51bGwuXG4gKi9cbmdvb2cuZ2V0T2JqZWN0QnlOYW1lID0gZnVuY3Rpb24obmFtZSwgb3B0X29iaikge1xuICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gIHZhciBjdXIgPSBvcHRfb2JqIHx8IGdvb2cuZ2xvYmFsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3VyID0gY3VyW3BhcnRzW2ldXTtcbiAgICBpZiAoY3VyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3VyO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYSBkZXBlbmRlbmN5IGZyb20gYSBmaWxlIHRvIHRoZSBmaWxlcyBpdCByZXF1aXJlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxQYXRoIFRoZSBwYXRoIHRvIHRoZSBqcyBmaWxlLlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvdmlkZXMgQW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoXG4gKiAgICAgdGhlIG5hbWVzIG9mIHRoZSBvYmplY3RzIHRoaXMgZmlsZSBwcm92aWRlcy5cbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHJlcXVpcmVzIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aFxuICogICAgIHRoZSBuYW1lcyBvZiB0aGUgb2JqZWN0cyB0aGlzIGZpbGUgcmVxdWlyZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW58IU9iamVjdDxzdHJpbmc+PX0gb3B0X2xvYWRGbGFncyBQYXJhbWV0ZXJzIGluZGljYXRpbmdcbiAqICAgICBob3cgdGhlIGZpbGUgbXVzdCBiZSBsb2FkZWQuICBUaGUgYm9vbGVhbiAndHJ1ZScgaXMgZXF1aXZhbGVudFxuICogICAgIHRvIHsnbW9kdWxlJzogJ2dvb2cnfSBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuICBWYWxpZCBwcm9wZXJ0aWVzXG4gKiAgICAgYW5kIHZhbHVlcyBpbmNsdWRlIHsnbW9kdWxlJzogJ2dvb2cnfSBhbmQgeydsYW5nJzogJ2VzNid9LlxuICovXG5nb29nLmFkZERlcGVuZGVuY3kgPSBmdW5jdGlvbihyZWxQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIG9wdF9sb2FkRmxhZ3MpIHtcbiAgaWYgKCFDT01QSUxFRCAmJiBnb29nLkRFUEVOREVOQ0lFU19FTkFCTEVEKSB7XG4gICAgZ29vZy5kZWJ1Z0xvYWRlcl8uYWRkRGVwZW5kZW5jeShyZWxQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIG9wdF9sb2FkRmxhZ3MpO1xuICB9XG59O1xuXG5cbi8vIE5PVEUobm5hemUpOiBUaGUgZGVidWcgRE9NIGxvYWRlciB3YXMgaW5jbHVkZWQgaW4gYmFzZS5qcyBhcyBhbiBvcmlnaW5hbCB3YXlcbi8vIHRvIGRvIFwiZGVidWctbW9kZVwiIGRldmVsb3BtZW50LiAgVGhlIGRlcGVuZGVuY3kgc3lzdGVtIGNhbiBzb21ldGltZXMgYmVcbi8vIGNvbmZ1c2luZywgYXMgY2FuIHRoZSBkZWJ1ZyBET00gbG9hZGVyJ3MgYXN5bmNocm9ub3VzIG5hdHVyZS5cbi8vXG4vLyBXaXRoIHRoZSBET00gbG9hZGVyLCBhIGNhbGwgdG8gZ29vZy5yZXF1aXJlKCkgaXMgbm90IGJsb2NraW5nIC0tIHRoZSBzY3JpcHRcbi8vIHdpbGwgbm90IGxvYWQgdW50aWwgc29tZSBwb2ludCBhZnRlciB0aGUgY3VycmVudCBzY3JpcHQuICBJZiBhIG5hbWVzcGFjZSBpc1xuLy8gbmVlZGVkIGF0IHJ1bnRpbWUsIGl0IG5lZWRzIHRvIGJlIGRlZmluZWQgaW4gYSBwcmV2aW91cyBzY3JpcHQsIG9yIGxvYWRlZCB2aWFcbi8vIHJlcXVpcmUoKSB3aXRoIGl0cyByZWdpc3RlcmVkIGRlcGVuZGVuY2llcy5cbi8vXG4vLyBVc2VyLWRlZmluZWQgbmFtZXNwYWNlcyBtYXkgbmVlZCB0aGVpciBvd24gZGVwcyBmaWxlLiBGb3IgYSByZWZlcmVuY2Ugb25cbi8vIGNyZWF0aW5nIGEgZGVwcyBmaWxlLCBzZWU6XG4vLyBFeHRlcm5hbGx5OiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jbG9zdXJlL2xpYnJhcnkvZG9jcy9kZXBzd3JpdGVyXG4vL1xuLy8gQmVjYXVzZSBvZiBsZWdhY3kgY2xpZW50cywgdGhlIERPTSBsb2FkZXIgY2FuJ3QgYmUgZWFzaWx5IHJlbW92ZWQgZnJvbVxuLy8gYmFzZS5qcy4gIFdvcmsgd2FzIGRvbmUgdG8gbWFrZSBpdCBkaXNhYmxlYWJsZSBvciByZXBsYWNlYWJsZSBmb3Jcbi8vIGRpZmZlcmVudCBlbnZpcm9ubWVudHMgKERPTS1sZXNzIEphdmFTY3JpcHQgaW50ZXJwcmV0ZXJzIGxpa2UgUmhpbm8gb3IgVjgsXG4vLyBmb3IgZXhhbXBsZSkuIFNlZSBib290c3RyYXAvIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0byBlbmFibGUgdGhlIGRlYnVnIGxvYWRlci5cbiAqXG4gKiBJZiBlbmFibGVkLCBhIGNhbGwgdG8gZ29vZy5yZXF1aXJlKCkgd2lsbCBhdHRlbXB0IHRvIGxvYWQgdGhlIG5hbWVzcGFjZSBieVxuICogYXBwZW5kaW5nIGEgc2NyaXB0IHRhZyB0byB0aGUgRE9NIChpZiB0aGUgbmFtZXNwYWNlIGhhcyBiZWVuIHJlZ2lzdGVyZWQpLlxuICpcbiAqIElmIGRpc2FibGVkLCBnb29nLnJlcXVpcmUoKSB3aWxsIHNpbXBseSBhc3NlcnQgdGhhdCB0aGUgbmFtZXNwYWNlIGhhcyBiZWVuXG4gKiBwcm92aWRlZCAoYW5kIGRlcGVuZCBvbiB0aGUgZmFjdCB0aGF0IHNvbWUgb3V0c2lkZSB0b29sIGNvcnJlY3RseSBvcmRlcmVkXG4gKiB0aGUgc2NyaXB0KS5cbiAqL1xuZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSID0gZ29vZy5kZWZpbmUoJ2dvb2cuRU5BQkxFX0RFQlVHX0xPQURFUicsIHRydWUpO1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sb2dUb0NvbnNvbGVfID0gZnVuY3Rpb24obXNnKSB7XG4gIGlmIChnb29nLmdsb2JhbC5jb25zb2xlKSB7XG4gICAgZ29vZy5nbG9iYWwuY29uc29sZVsnZXJyb3InXShtc2cpO1xuICB9XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50cyBhIHN5c3RlbSBmb3IgdGhlIGR5bmFtaWMgcmVzb2x1dGlvbiBvZiBkZXBlbmRlbmNpZXMgdGhhdCB3b3JrcyBpblxuICogcGFyYWxsZWwgd2l0aCB0aGUgQlVJTEQgc3lzdGVtLlxuICpcbiAqIE5vdGUgdGhhdCBhbGwgY2FsbHMgdG8gZ29vZy5yZXF1aXJlIHdpbGwgYmUgc3RyaXBwZWQgYnkgdGhlIGNvbXBpbGVyLlxuICpcbiAqIEBzZWUgZ29vZy5wcm92aWRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIE5hbWVzcGFjZSAoYXMgd2FzIGdpdmVuIGluIGdvb2cucHJvdmlkZSxcbiAqICAgICBnb29nLm1vZHVsZSwgb3IgZ29vZy5kZWNsYXJlTW9kdWxlSWQpIGluIHRoZSBmb3JtXG4gKiAgICAgXCJnb29nLnBhY2thZ2UucGFydFwiLlxuICogQHJldHVybiB7P30gSWYgY2FsbGVkIHdpdGhpbiBhIGdvb2cubW9kdWxlIG9yIEVTNiBtb2R1bGUgZmlsZSwgdGhlIGFzc29jaWF0ZWRcbiAqICAgICBuYW1lc3BhY2Ugb3IgbW9kdWxlIG90aGVyd2lzZSBudWxsLlxuICovXG5nb29nLnJlcXVpcmUgPSBmdW5jdGlvbihuYW1lc3BhY2UpIHtcbiAgaWYgKCFDT01QSUxFRCkge1xuICAgIC8vIE1pZ2h0IG5lZWQgdG8gbGF6eSBsb2FkIG9uIG9sZCBJRS5cbiAgICBpZiAoZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSKSB7XG4gICAgICBnb29nLmRlYnVnTG9hZGVyXy5yZXF1ZXN0ZWQobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgb2JqZWN0IGFscmVhZHkgZXhpc3RzIHdlIGRvIG5vdCBuZWVkIHRvIGRvIGFueXRoaW5nLlxuICAgIGlmIChnb29nLmlzUHJvdmlkZWRfKG5hbWVzcGFjZSkpIHtcbiAgICAgIGlmIChnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpIHtcbiAgICAgICAgcmV0dXJuIGdvb2cubW9kdWxlLmdldEludGVybmFsXyhuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSKSB7XG4gICAgICB2YXIgbW9kdWxlTG9hZGVyU3RhdGUgPSBnb29nLm1vZHVsZUxvYWRlclN0YXRlXztcbiAgICAgIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGdvb2cuZGVidWdMb2FkZXJfLmxvYWRfKG5hbWVzcGFjZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBnb29nLm1vZHVsZUxvYWRlclN0YXRlXyA9IG1vZHVsZUxvYWRlclN0YXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVxdWlyZXMgYSBzeW1ib2wgZm9yIGl0cyB0eXBlIGluZm9ybWF0aW9uLiBUaGlzIGlzIGFuIGluZGljYXRpb24gdG8gdGhlXG4gKiBjb21waWxlciB0aGF0IHRoZSBzeW1ib2wgbWF5IGFwcGVhciBpbiB0eXBlIGFubm90YXRpb25zLCB5ZXQgaXQgaXMgbm90XG4gKiByZWZlcmVuY2VkIGF0IHJ1bnRpbWUuXG4gKlxuICogV2hlbiBjYWxsZWQgd2l0aGluIGEgZ29vZy5tb2R1bGUgb3IgRVM2IG1vZHVsZSBmaWxlLCB0aGUgcmV0dXJuIHZhbHVlIG1heSBiZVxuICogYXNzaWduZWQgdG8gb3IgZGVzdHJ1Y3R1cmVkIGludG8gYSB2YXJpYWJsZSwgYnV0IGl0IG1heSBub3QgYmUgb3RoZXJ3aXNlIHVzZWRcbiAqIGluIGNvZGUgb3V0c2lkZSBvZiBhIHR5cGUgYW5ub3RhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgYWxsIGNhbGxzIHRvIGdvb2cucmVxdWlyZVR5cGUgd2lsbCBiZSBzdHJpcHBlZCBieSB0aGUgY29tcGlsZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZSBOYW1lc3BhY2UgKGFzIHdhcyBnaXZlbiBpbiBnb29nLnByb3ZpZGUsXG4gKiAgICAgZ29vZy5tb2R1bGUsIG9yIGdvb2cuZGVjbGFyZU1vZHVsZUlkKSBpbiB0aGUgZm9ybVxuICogICAgIFwiZ29vZy5wYWNrYWdlLnBhcnRcIi5cbiAqIEByZXR1cm4gez99XG4gKi9cbmdvb2cucmVxdWlyZVR5cGUgPSBmdW5jdGlvbihuYW1lc3BhY2UpIHtcbiAgLy8gUmV0dXJuIGFuIGVtcHR5IG9iamVjdCBzbyB0aGF0IHNpbmdsZS1sZXZlbCBkZXN0cnVjdHVyaW5nIG9mIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgZG9lc24ndCBjcmFzaCBhdCBydW50aW1lIHdoZW4gdXNpbmcgdGhlIGRlYnVnIGxvYWRlci4gTXVsdGktbGV2ZWxcbiAgLy8gZGVzdHJ1Y3R1cmluZyBpc24ndCBzdXBwb3J0ZWQuXG4gIHJldHVybiB7fTtcbn07XG5cblxuLyoqXG4gKiBQYXRoIGZvciBpbmNsdWRlZCBzY3JpcHRzLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5iYXNlUGF0aCA9ICcnO1xuXG5cbi8qKlxuICogQSBob29rIGZvciBvdmVycmlkaW5nIHRoZSBiYXNlIHBhdGguXG4gKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9CQVNFX1BBVEg7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRvIGF0dGVtcHQgdG8gbG9hZCBDbG9zdXJlJ3MgZGVwcyBmaWxlLiBCeSBkZWZhdWx0LCB3aGVuIHVuY29tcGlsZWQsXG4gKiBkZXBzIGZpbGVzIHdpbGwgYXR0ZW1wdCB0byBiZSBsb2FkZWQuXG4gKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cbmdvb2cuZ2xvYmFsLkNMT1NVUkVfTk9fREVQUztcblxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdG8gaW1wb3J0IGEgc2luZ2xlIHNjcmlwdC4gVGhpcyBpcyBtZWFudCB0byBiZSBvdmVycmlkZGVuIHdoZW5cbiAqIENsb3N1cmUgaXMgYmVpbmcgcnVuIGluIG5vbi1IVE1MIGNvbnRleHRzLCBzdWNoIGFzIHdlYiB3b3JrZXJzLiBJdCdzIGRlZmluZWRcbiAqIGluIHRoZSBnbG9iYWwgc2NvcGUgc28gdGhhdCBpdCBjYW4gYmUgc2V0IGJlZm9yZSBiYXNlLmpzIGlzIGxvYWRlZCwgd2hpY2hcbiAqIGFsbG93cyBkZXBzLmpzIHRvIGJlIGltcG9ydGVkIHByb3Blcmx5LlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgdGhlIHNjcmlwdCBzb3VyY2UsIHdoaWNoIGlzIGEgcmVsYXRpdmUgVVJJLiBUaGUgc2Vjb25kLFxuICogb3B0aW9uYWwgcGFyYW1ldGVyIGlzIHRoZSBzY3JpcHQgY29udGVudHMsIGluIHRoZSBldmVudCB0aGUgc2NyaXB0IG5lZWRlZFxuICogdHJhbnNmb3JtYXRpb24uIEl0IHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGUgc2NyaXB0IHdhcyBpbXBvcnRlZCwgZmFsc2VcbiAqIG90aGVyd2lzZS5cbiAqIEB0eXBlIHsoZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmc9KTogYm9vbGVhbil8dW5kZWZpbmVkfVxuICovXG5nb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQ7XG5cblxuLyoqXG4gKiBOdWxsIGZ1bmN0aW9uIHVzZWQgZm9yIGRlZmF1bHQgdmFsdWVzIG9mIGNhbGxiYWNrcywgZXRjLlxuICogQHJldHVybiB7dm9pZH0gTm90aGluZy5cbiAqIEBkZXByZWNhdGVkIHVzZSAnKCk9Pnt9JyBvciAnZnVuY3Rpb24oKXt9JyBpbnN0ZWFkLlxuICovXG5nb29nLm51bGxGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBXaGVuIGRlZmluaW5nIGEgY2xhc3MgRm9vIHdpdGggYW4gYWJzdHJhY3QgbWV0aG9kIGJhcigpLCB5b3UgY2FuIGRvOlxuICogRm9vLnByb3RvdHlwZS5iYXIgPSBnb29nLmFic3RyYWN0TWV0aG9kXG4gKlxuICogTm93IGlmIGEgc3ViY2xhc3Mgb2YgRm9vIGZhaWxzIHRvIG92ZXJyaWRlIGJhcigpLCBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICogd2hlbiBiYXIoKSBpcyBpbnZva2VkLlxuICpcbiAqIEB0eXBlIHshRnVuY3Rpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gd2hlbiBpbnZva2VkIHRvIGluZGljYXRlIHRoZSBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4uXG4gKiBAZGVwcmVjYXRlZCBVc2UgXCJAYWJzdHJhY3RcIiBhbm5vdGF0aW9uIGluc3RlYWQgb2YgZ29vZy5hYnN0cmFjdE1ldGhvZCBpbiBuZXdcbiAqICAgICBjb2RlLiBTZWVcbiAqICAgICBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvd2lraS9AYWJzdHJhY3QtY2xhc3Nlcy1hbmQtbWV0aG9kc1xuICovXG5nb29nLmFic3RyYWN0TWV0aG9kID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcigndW5pbXBsZW1lbnRlZCBhYnN0cmFjdCBtZXRob2QnKTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgYGdldEluc3RhbmNlYCBzdGF0aWMgbWV0aG9kIHRoYXQgYWx3YXlzIHJldHVybnMgdGhlIHNhbWVcbiAqIGluc3RhbmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjdG9yIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGNsYXNzIHRvIGFkZCB0aGUgc3RhdGljXG4gKiAgICAgbWV0aG9kIHRvLlxuICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gJ2luc3RhbmNlXycgaXNuJ3QgYSBwcm9wZXJ0eSBvbiAnRnVuY3Rpb24nXG4gKiAgICAgYnV0IHdlIGRvbid0IGhhdmUgYSBiZXR0ZXIgdHlwZSB0byB1c2UgaGVyZS5cbiAqL1xuZ29vZy5hZGRTaW5nbGV0b25HZXR0ZXIgPSBmdW5jdGlvbihjdG9yKSB7XG4gIC8vIGluc3RhbmNlXyBpcyBpbW1lZGlhdGVseSBzZXQgdG8gcHJldmVudCBpc3N1ZXMgd2l0aCBzZWFsZWQgY29uc3RydWN0b3JzXG4gIC8vIHN1Y2ggYXMgYXJlIGVuY291bnRlcmVkIHdoZW4gYSBjb25zdHJ1Y3RvciBpcyByZXR1cm5lZCBhcyB0aGUgZXhwb3J0IG9iamVjdFxuICAvLyBvZiBhIGdvb2cubW9kdWxlIGluIHVub3B0aW1pemVkIGNvZGUuXG4gIC8vIERlbGNhcmUgdHlwZSB0byBhdm9pZCBjb25mb3JtYW5jZSB2aW9sYXRpb25zIHRoYXQgY3Rvci5pbnN0YW5jZV8gaXMgdW5rbm93blxuICAvKiogQHR5cGUge3VuZGVmaW5lZHwhT2JqZWN0fSBAc3VwcHJlc3Mge3VuZGVyc2NvcmV9ICovXG4gIGN0b3IuaW5zdGFuY2VfID0gdW5kZWZpbmVkO1xuICBjdG9yLmdldEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGN0b3IuaW5zdGFuY2VfKSB7XG4gICAgICByZXR1cm4gY3Rvci5pbnN0YW5jZV87XG4gICAgfVxuICAgIGlmIChnb29nLkRFQlVHKSB7XG4gICAgICAvLyBOT1RFOiBKU0NvbXBpbGVyIGNhbid0IG9wdGltaXplIGF3YXkgQXJyYXkjcHVzaC5cbiAgICAgIGdvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc19bZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zXy5sZW5ndGhdID0gY3RvcjtcbiAgICB9XG4gICAgLy8gQ2FzdCB0byBhdm9pZCBjb25mb3JtYW5jZSB2aW9sYXRpb25zIHRoYXQgY3Rvci5pbnN0YW5jZV8gaXMgdW5rbm93blxuICAgIHJldHVybiAvKiogQHR5cGUgeyFPYmplY3R8dW5kZWZpbmVkfSAqLyAoY3Rvci5pbnN0YW5jZV8pID0gbmV3IGN0b3I7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQWxsIHNpbmdsZXRvbiBjbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIGluc3RhbnRpYXRlZCwgZm9yIHRlc3RpbmcuIERvbid0IHJlYWRcbiAqIGl0IGRpcmVjdGx5LCB1c2UgdGhlIGBnb29nLnRlc3Rpbmcuc2luZ2xldG9uYCBtb2R1bGUuIFRoZSBjb21waWxlclxuICogcmVtb3ZlcyB0aGlzIHZhcmlhYmxlIGlmIHVudXNlZC5cbiAqIEB0eXBlIHshQXJyYXk8IUZ1bmN0aW9uPn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc18gPSBbXTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdG8gbG9hZCBnb29nLm1vZHVsZXMgdXNpbmcgYGV2YWxgIHdoZW4gdXNpbmdcbiAqIHRoZSBkZWJ1ZyBsb2FkZXIuICBUaGlzIHByb3ZpZGVzIGEgYmV0dGVyIGRlYnVnZ2luZyBleHBlcmllbmNlIGFzIHRoZVxuICogc291cmNlIGlzIHVubW9kaWZpZWQgYW5kIGNhbiBiZSBlZGl0ZWQgdXNpbmcgQ2hyb21lIFdvcmtzcGFjZXMgb3Igc2ltaWxhci5cbiAqIEhvd2V2ZXIgaW4gc29tZSBlbnZpcm9ubWVudHMgdGhlIHVzZSBvZiBgZXZhbGAgaXMgYmFubmVkXG4gKiBzbyB3ZSBwcm92aWRlIGFuIGFsdGVybmF0aXZlLlxuICovXG5nb29nLkxPQURfTU9EVUxFX1VTSU5HX0VWQUwgPSBnb29nLmRlZmluZSgnZ29vZy5MT0FEX01PRFVMRV9VU0lOR19FVkFMJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSBleHBvcnRzIG9mIGdvb2cubW9kdWxlcyBzaG91bGQgYmUgc2VhbGVkIHdoZW5cbiAqIHBvc3NpYmxlLlxuICovXG5nb29nLlNFQUxfTU9EVUxFX0VYUE9SVFMgPSBnb29nLmRlZmluZSgnZ29vZy5TRUFMX01PRFVMRV9FWFBPUlRTJywgZ29vZy5ERUJVRyk7XG5cblxuLyoqXG4gKiBUaGUgcmVnaXN0cnkgb2YgaW5pdGlhbGl6ZWQgbW9kdWxlczpcbiAqIFRoZSBtb2R1bGUgaWRlbnRpZmllciBvciBwYXRoIHRvIG1vZHVsZSBleHBvcnRzIG1hcC5cbiAqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHtleHBvcnRzOj8sdHlwZTpzdHJpbmcsbW9kdWxlSWQ6c3RyaW5nfT59XG4gKi9cbmdvb2cubG9hZGVkTW9kdWxlc18gPSB7fTtcblxuXG4vKipcbiAqIFRydWUgaWYgdGhlIGRlYnVnIGxvYWRlciBlbmFibGVkIGFuZCB1c2VkLlxuICogQGNvbnN0IHtib29sZWFufVxuICovXG5nb29nLkRFUEVOREVOQ0lFU19FTkFCTEVEID0gIUNPTVBJTEVEICYmIGdvb2cuRU5BQkxFX0RFQlVHX0xPQURFUjtcblxuXG4vKipcbiAqIEBkZWZpbmUge3N0cmluZ30gSG93IHRvIGRlY2lkZSB3aGV0aGVyIHRvIHRyYW5zcGlsZS4gIFZhbGlkIHZhbHVlc1xuICogYXJlICdhbHdheXMnLCAnbmV2ZXInLCBhbmQgJ2RldGVjdCcuICBUaGUgZGVmYXVsdCAoJ2RldGVjdCcpIGlzIHRvXG4gKiB1c2UgZmVhdHVyZSBkZXRlY3Rpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIGxhbmd1YWdlIGxldmVscyBuZWVkXG4gKiB0cmFuc3BpbGF0aW9uLlxuICovXG4vLyBOT1RFKHNkaCk6IHdlIGNvdWxkIGV4cGFuZCB0aGlzIHRvIGFjY2VwdCBhIGxhbmd1YWdlIGxldmVsIHRvIGJ5cGFzc1xuLy8gZGV0ZWN0aW9uOiBlLmcuIGdvb2cuVFJBTlNQSUxFID09ICdlczUnIHdvdWxkIHRyYW5zcGlsZSBFUzYgZmlsZXMgYnV0XG4vLyB3b3VsZCBsZWF2ZSBFUzMgYW5kIEVTNSBmaWxlcyBhbG9uZS5cbmdvb2cuVFJBTlNQSUxFID0gZ29vZy5kZWZpbmUoJ2dvb2cuVFJBTlNQSUxFJywgJ2RldGVjdCcpO1xuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IElmIHRydWUgYXNzdW1lIHRoYXQgRVMgbW9kdWxlcyBoYXZlIGFscmVhZHkgYmVlblxuICogdHJhbnNwaWxlZCBieSB0aGUganNjb21waWxlciAoaW4gdGhlIHNhbWUgd2F5IHRoYXQgdHJhbnNwaWxlLmpzIHdvdWxkXG4gKiB0cmFuc3BpbGUgdGhlbSAtIHRvIGpzY29tcCBtb2R1bGVzKS4gVXNlZnVsIG9ubHkgZm9yIHNlcnZlcnMgdGhhdCB3aXNoIHRvIHVzZVxuICogdGhlIGRlYnVnIGxvYWRlciBhbmQgdHJhbnNwaWxlIHNlcnZlciBzaWRlLiBUaHVzIHRoaXMgaXMgb25seSByZXNwZWN0ZWQgaWZcbiAqIGdvb2cuVFJBTlNQSUxFIGlzIFwibmV2ZXJcIi5cbiAqL1xuZ29vZy5BU1NVTUVfRVNfTU9EVUxFU19UUkFOU1BJTEVEID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5BU1NVTUVfRVNfTU9EVUxFU19UUkFOU1BJTEVEJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7c3RyaW5nfSBJZiBhIGZpbGUgbmVlZHMgdG8gYmUgdHJhbnNwaWxlZCB3aGF0IHRoZSBvdXRwdXQgbGFuZ3VhZ2VcbiAqIHNob3VsZCBiZS4gQnkgZGVmYXVsdCB0aGlzIGlzIHRoZSBoaWdoZXN0IGxhbmd1YWdlIGxldmVsIHRoaXMgZmlsZSBkZXRlY3RzXG4gKiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cy4gR2VuZXJhbGx5IHRoaXMgZmxhZyBzaG91bGQgbm90IGJlIHNldCwgYnV0XG4gKiBpdCBjb3VsZCBiZSB1c2VmdWwgdG8gb3ZlcnJpZGUuIEV4YW1wbGU6IElmIHRoZSBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzXG4gKiBFUzYgdGhlbiBieSBkZWZhdWx0IEVTNysgZmlsZXMgd2lsbCBiZSB0cmFuc3BpbGVkIHRvIEVTNiwgdW5sZXNzIHRoaXMgaXNcbiAqIG92ZXJyaWRkZW4uXG4gKlxuICogVmFsaWQgdmFsdWVzIGluY2x1ZGU6IGVzMywgZXM1LCBlczYsIGVzNywgYW5kIGVzOC4gQW55dGhpbmcgbm90IHJlY29nbml6ZWRcbiAqIGlzIHRyZWF0ZWQgYXMgZXMzLlxuICpcbiAqIE5vdGUgdGhhdCBzZXR0aW5nIHRoaXMgdmFsdWUgZG9lcyBub3QgZm9yY2UgdHJhbnNwaWxhdGlvbi4gSnVzdCBpZlxuICogdHJhbnNwaWxhdGlvbiBvY2N1cnMgdGhpcyB3aWxsIGJlIHRoZSBvdXRwdXQuIFNvIHRoaXMgaXMgbW9zdCB1c2VmdWwgd2hlblxuICogZ29vZy5UUkFOU1BJTEUgaXMgc2V0IHRvICdhbHdheXMnIGFuZCB0aGVuIGZvcmNpbmcgdGhlIGxhbmd1YWdlIGxldmVsIHRvIGJlXG4gKiBzb21ldGhpbmcgbG93ZXIgdGhhbiB3aGF0IHRoZSBlbnZpcm9ubWVudCBkZXRlY3RzLlxuICovXG5nb29nLlRSQU5TUElMRV9UT19MQU5HVUFHRSA9IGdvb2cuZGVmaW5lKCdnb29nLlRSQU5TUElMRV9UT19MQU5HVUFHRScsICcnKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge3N0cmluZ30gUGF0aCB0byB0aGUgdHJhbnNwaWxlci4gIEV4ZWN1dGluZyB0aGUgc2NyaXB0IGF0IHRoaXNcbiAqIHBhdGggKHJlbGF0aXZlIHRvIGJhc2UuanMpIHNob3VsZCBkZWZpbmUgYSBmdW5jdGlvbiAkanNjb21wLnRyYW5zcGlsZS5cbiAqL1xuZ29vZy5UUkFOU1BJTEVSID0gZ29vZy5kZWZpbmUoJ2dvb2cuVFJBTlNQSUxFUicsICd0cmFuc3BpbGUuanMnKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge3N0cmluZ30gVHJ1c3RlZCBUeXBlcyBwb2xpY3kgbmFtZS4gSWYgbm9uLWVtcHR5IHRoZW4gQ2xvc3VyZSB3aWxsXG4gKiB1c2UgVHJ1c3RlZCBUeXBlcy5cbiAqL1xuZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV9OQU1FID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV9OQU1FJywgJ2dvb2cnKTtcblxuXG4vKipcbiAqIEBwYWNrYWdlIHs/Ym9vbGVhbn1cbiAqIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gKi9cbmdvb2cuaGFzQmFkTGV0U2NvcGluZyA9IG51bGw7XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98c3RyaW5nfSBtb2R1bGVEZWYgVGhlIG1vZHVsZSBkZWZpbml0aW9uLlxuICovXG5nb29nLmxvYWRNb2R1bGUgPSBmdW5jdGlvbihtb2R1bGVEZWYpIHtcbiAgLy8gTk9URTogd2UgYWxsb3cgZnVuY3Rpb24gZGVmaW5pdGlvbnMgdG8gYmUgZWl0aGVyIGluIHRoZSBmcm9tXG4gIC8vIG9mIGEgc3RyaW5nIHRvIGV2YWwgKHdoaWNoIGtlZXBzIHRoZSBvcmlnaW5hbCBzb3VyY2UgaW50YWN0KSBvclxuICAvLyBpbiBhIGV2YWwgZm9yYmlkZGVuIGVudmlyb25tZW50IChDU1ApIHdlIGFsbG93IGEgZnVuY3Rpb24gZGVmaW5pdGlvblxuICAvLyB3aGljaCBpbiBpdHMgYm9keSBtdXN0IGNhbGwgYGdvb2cubW9kdWxlYCwgYW5kIHJldHVybiB0aGUgZXhwb3J0c1xuICAvLyBvZiB0aGUgbW9kdWxlLlxuICB2YXIgcHJldmlvdXNTdGF0ZSA9IGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfO1xuICB0cnkge1xuICAgIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfID0ge1xuICAgICAgbW9kdWxlTmFtZTogJycsXG4gICAgICBkZWNsYXJlTGVnYWN5TmFtZXNwYWNlOiBmYWxzZSxcbiAgICAgIHR5cGU6IGdvb2cuTW9kdWxlVHlwZS5HT09HXG4gICAgfTtcbiAgICB2YXIgb3JpZ0V4cG9ydHMgPSB7fTtcbiAgICB2YXIgZXhwb3J0cyA9IG9yaWdFeHBvcnRzO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlRGVmLmNhbGwodW5kZWZpbmVkLCBleHBvcnRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGVEZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBleHBvcnRzID0gZ29vZy5sb2FkTW9kdWxlRnJvbVNvdXJjZV8uY2FsbCh1bmRlZmluZWQsIGV4cG9ydHMsIG1vZHVsZURlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2R1bGUgZGVmaW5pdGlvbicpO1xuICAgIH1cblxuICAgIHZhciBtb2R1bGVOYW1lID0gZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZU5hbWUgPT09ICdzdHJpbmcnICYmIG1vZHVsZU5hbWUpIHtcbiAgICAgIC8vIERvbid0IHNlYWwgbGVnYWN5IG5hbWVzcGFjZXMgYXMgdGhleSBtYXkgYmUgdXNlZCBhcyBhIHBhcmVudCBvZlxuICAgICAgLy8gYW5vdGhlciBuYW1lc3BhY2VcbiAgICAgIGlmIChnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlKSB7XG4gICAgICAgIC8vIFdoZXRoZXIgZXhwb3J0cyB3YXMgb3ZlcndyaXR0ZW4gdmlhIGRlZmF1bHQgZXhwb3J0IGFzc2lnbm1lbnQuXG4gICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciBsZWdhY3kgbmFtZXNwYWNlcyBhcyBpdCBkaWN0YXRlcyB3aGV0aGVyXG4gICAgICAgIC8vIHByZXZpb3VzbHkgYSBwcmV2aW91c2x5IGxvYWRlZCBpbXBsaWNpdCBuYW1lc3BhY2Ugc2hvdWxkIGJlIGNsb2JiZXJlZFxuICAgICAgICAvLyBvciBub3QuXG4gICAgICAgIHZhciBpc0RlZmF1bHRFeHBvcnQgPSBvcmlnRXhwb3J0cyAhPT0gZXhwb3J0cztcbiAgICAgICAgZ29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfKG1vZHVsZU5hbWUsIGV4cG9ydHMsIGlzRGVmYXVsdEV4cG9ydCk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGdvb2cuU0VBTF9NT0RVTEVfRVhQT1JUUyAmJiBPYmplY3Quc2VhbCAmJlxuICAgICAgICAgIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgIT0gbnVsbCkge1xuICAgICAgICBPYmplY3Quc2VhbChleHBvcnRzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIGV4cG9ydHM6IGV4cG9ydHMsXG4gICAgICAgIHR5cGU6IGdvb2cuTW9kdWxlVHlwZS5HT09HLFxuICAgICAgICBtb2R1bGVJZDogZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZVxuICAgICAgfTtcbiAgICAgIGdvb2cubG9hZGVkTW9kdWxlc19bbW9kdWxlTmFtZV0gPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kdWxlIG5hbWUgXFxcIicgKyBtb2R1bGVOYW1lICsgJ1xcXCInKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8gPSBwcmV2aW91c1N0YXRlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQHByaXZhdGUgQGNvbnN0XG4gKi9cbmdvb2cubG9hZE1vZHVsZUZyb21Tb3VyY2VfID1cbiAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCFPYmplY3QsIHN0cmluZyk6P30gKi8gKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICAgIC8vIE5PVEU6IHdlIGF2b2lkIGRlY2xhcmluZyBwYXJhbWV0ZXJzIG9yIGxvY2FsIHZhcmlhYmxlcyBoZXJlIHRvIGF2b2lkXG4gICAgICAvLyBtYXNraW5nIGdsb2JhbHMgb3IgbGVha2luZyB2YWx1ZXMgaW50byB0aGUgbW9kdWxlIGRlZmluaXRpb24uXG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBldmFsKGdvb2cuQ0xPU1VSRV9FVkFMX1BSRUZJTFRFUl8uY3JlYXRlU2NyaXB0KGFyZ3VtZW50c1sxXSkpO1xuICAgICAgcmV0dXJuIGV4cG9ydHM7XG4gICAgfSk7XG5cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBmaWxlIHBhdGggYnkgcmVtb3ZpbmcgcmVkdW5kYW50IFwiLi5cIiBhbmQgZXh0cmFuZW91cyBcIi5cIiBmaWxlXG4gKiBwYXRoIGNvbXBvbmVudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ub3JtYWxpemVQYXRoXyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGNvbXBvbmVudHMgPSBwYXRoLnNwbGl0KCcvJyk7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgPCBjb21wb25lbnRzLmxlbmd0aCkge1xuICAgIGlmIChjb21wb25lbnRzW2ldID09ICcuJykge1xuICAgICAgY29tcG9uZW50cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgaSAmJiBjb21wb25lbnRzW2ldID09ICcuLicgJiYgY29tcG9uZW50c1tpIC0gMV0gJiZcbiAgICAgICAgY29tcG9uZW50c1tpIC0gMV0gIT0gJy4uJykge1xuICAgICAgY29tcG9uZW50cy5zcGxpY2UoLS1pLCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29tcG9uZW50cy5qb2luKCcvJyk7XG59O1xuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBob29rIGZvciBsb2FkaW5nIGEgZmlsZSB3aGVuIHVzaW5nIENsb3N1cmUncyBnb29nLnJlcXVpcmUoKSBBUElcbiAqIHdpdGggZ29vZy5tb2R1bGVzLiAgSW4gcGFydGljdWxhciB0aGlzIGhvb2sgaXMgcHJvdmlkZWQgdG8gc3VwcG9ydCBOb2RlLmpzLlxuICpcbiAqIEB0eXBlIHsoZnVuY3Rpb24oc3RyaW5nKTpzdHJpbmcpfHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9MT0FEX0ZJTEVfU1lOQztcblxuXG4vKipcbiAqIExvYWRzIGZpbGUgYnkgc3luY2hyb25vdXMgWEhSLiBTaG91bGQgbm90IGJlIHVzZWQgaW4gcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIFNvdXJjZSBVUkwuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBGaWxlIGNvbnRlbnRzLCBvciBudWxsIGlmIGxvYWQgZmFpbGVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5sb2FkRmlsZVN5bmNfID0gZnVuY3Rpb24oc3JjKSB7XG4gIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0xPQURfRklMRV9TWU5DKSB7XG4gICAgcmV0dXJuIGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMoc3JjKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgLyoqIEB0eXBlIHtYTUxIdHRwUmVxdWVzdH0gKi9cbiAgICAgIHZhciB4aHIgPSBuZXcgZ29vZy5nbG9iYWxbJ1hNTEh0dHBSZXF1ZXN0J10oKTtcbiAgICAgIHhoci5vcGVuKCdnZXQnLCBzcmMsIGZhbHNlKTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgICAvLyBOT1RFOiBTdWNjZXNzZnVsIGh0dHA6IHJlcXVlc3RzIGhhdmUgYSBzdGF0dXMgb2YgMjAwLCBidXQgc3VjY2Vzc2Z1bFxuICAgICAgLy8gZmlsZTogcmVxdWVzdHMgbWF5IGhhdmUgYSBzdGF0dXMgb2YgemVyby4gIEFueSBvdGhlciBzdGF0dXMsIG9yIGFcbiAgICAgIC8vIHRocm93biBleGNlcHRpb24gKHBhcnRpY3VsYXJseSBpbiBjYXNlIG9mIGZpbGU6IHJlcXVlc3RzKSBpbmRpY2F0ZXNcbiAgICAgIC8vIHNvbWUgc29ydCBvZiBlcnJvciwgd2hpY2ggd2UgdHJlYXQgYXMgYSBtaXNzaW5nIG9yIHVuYXZhaWxhYmxlIGZpbGUuXG4gICAgICByZXR1cm4geGhyLnN0YXR1cyA9PSAwIHx8IHhoci5zdGF0dXMgPT0gMjAwID8geGhyLnJlc3BvbnNlVGV4dCA6IG51bGw7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBObyBuZWVkIHRvIHJldGhyb3cgb3IgbG9nLCBzaW5jZSBlcnJvcnMgc2hvdWxkIHNob3cgdXAgb24gdGhlaXIgb3duLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogTGF6aWx5IHJldHJpZXZlcyB0aGUgdHJhbnNwaWxlciBhbmQgYXBwbGllcyBpdCB0byB0aGUgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgSlMgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdGhlIGNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IExhbmd1YWdlIGxldmVsIG91dHB1dC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zcGlsZWQgY29kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudHJhbnNwaWxlXyA9IGZ1bmN0aW9uKGNvZGUsIHBhdGgsIHRhcmdldCkge1xuICB2YXIganNjb21wID0gZ29vZy5nbG9iYWxbJyRqc2NvbXAnXTtcbiAgaWYgKCFqc2NvbXApIHtcbiAgICBnb29nLmdsb2JhbFsnJGpzY29tcCddID0ganNjb21wID0ge307XG4gIH1cbiAgdmFyIHRyYW5zcGlsZSA9IGpzY29tcC50cmFuc3BpbGU7XG4gIGlmICghdHJhbnNwaWxlKSB7XG4gICAgdmFyIHRyYW5zcGlsZXJQYXRoID0gZ29vZy5iYXNlUGF0aCArIGdvb2cuVFJBTlNQSUxFUjtcbiAgICB2YXIgdHJhbnNwaWxlckNvZGUgPSBnb29nLmxvYWRGaWxlU3luY18odHJhbnNwaWxlclBhdGgpO1xuICAgIGlmICh0cmFuc3BpbGVyQ29kZSkge1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHksIHNpbmNlIGJ5IHRoZSB0aW1lIHdlIGtub3cgd2VcbiAgICAgIC8vIG5lZWQgaXQsIHdlJ3JlIGFib3V0IHRvIGxvYWQgYW5kIHdyaXRlIHRoZSBFUzYgY29kZSBzeW5jaHJvbm91c2x5LFxuICAgICAgLy8gc28gYSBub3JtYWwgc2NyaXB0LXRhZyBsb2FkIHdpbGwgYmUgdG9vIHNsb3cuIFdyYXBwZWQgaW4gYSBmdW5jdGlvblxuICAgICAgLy8gc28gdGhhdCBjb2RlIGlzIGV2YWwnZCBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAoMCwgZXZhbCkodHJhbnNwaWxlckNvZGUgKyAnXFxuLy8jIHNvdXJjZVVSTD0nICsgdHJhbnNwaWxlclBhdGgpO1xuICAgICAgfSkuY2FsbChnb29nLmdsb2JhbCk7XG4gICAgICAvLyBFdmVuIHRob3VnaCB0aGUgdHJhbnNwaWxlciBpcyBvcHRpb25hbCwgaWYgJGd3dEV4cG9ydCBpcyBmb3VuZCwgaXQnc1xuICAgICAgLy8gYSBzaWduIHRoZSB0cmFuc3BpbGVyIHdhcyBsb2FkZWQgYW5kIHRoZSAkanNjb21wLnRyYW5zcGlsZSAqc2hvdWxkKlxuICAgICAgLy8gYmUgdGhlcmUuXG4gICAgICBpZiAoZ29vZy5nbG9iYWxbJyRnd3RFeHBvcnQnXSAmJiBnb29nLmdsb2JhbFsnJGd3dEV4cG9ydCddWyckanNjb21wJ10gJiZcbiAgICAgICAgICAhZ29vZy5nbG9iYWxbJyRnd3RFeHBvcnQnXVsnJGpzY29tcCddWyd0cmFuc3BpbGUnXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnVGhlIHRyYW5zcGlsZXIgZGlkIG5vdCBwcm9wZXJseSBleHBvcnQgdGhlIFwidHJhbnNwaWxlXCIgJyArXG4gICAgICAgICAgICAnbWV0aG9kLiAkZ3d0RXhwb3J0OiAnICsgSlNPTi5zdHJpbmdpZnkoZ29vZy5nbG9iYWxbJyRnd3RFeHBvcnQnXSkpO1xuICAgICAgfVxuICAgICAgLy8gdHJhbnNwaWxlLmpzIG9ubHkgZXhwb3J0cyBhIHNpbmdsZSAkanNjb21wIGZ1bmN0aW9uLCB0cmFuc3BpbGUuIFdlXG4gICAgICAvLyBncmFiIGp1c3QgdGhhdCBhbmQgYWRkIGl0IHRvIHRoZSBleGlzdGluZyBkZWZpbml0aW9uIG9mICRqc2NvbXAgd2hpY2hcbiAgICAgIC8vIGNvbnRhaW5zIHRoZSBwb2x5ZmlsbHMuXG4gICAgICBnb29nLmdsb2JhbFsnJGpzY29tcCddLnRyYW5zcGlsZSA9XG4gICAgICAgICAgZ29vZy5nbG9iYWxbJyRnd3RFeHBvcnQnXVsnJGpzY29tcCddWyd0cmFuc3BpbGUnXTtcbiAgICAgIGpzY29tcCA9IGdvb2cuZ2xvYmFsWyckanNjb21wJ107XG4gICAgICB0cmFuc3BpbGUgPSBqc2NvbXAudHJhbnNwaWxlO1xuICAgIH1cbiAgfVxuICBpZiAoIXRyYW5zcGlsZSkge1xuICAgIC8vIFRoZSB0cmFuc3BpbGVyIGlzIGFuIG9wdGlvbmFsIGNvbXBvbmVudC4gIElmIGl0J3Mgbm90IGF2YWlsYWJsZSB0aGVuXG4gICAgLy8gcmVwbGFjZSBpdCB3aXRoIGEgcGFzcy10aHJvdWdoIGZ1bmN0aW9uIHRoYXQgc2ltcGx5IGxvZ3MuXG4gICAgdmFyIHN1ZmZpeCA9ICcgcmVxdWlyZXMgdHJhbnNwaWxhdGlvbiBidXQgbm8gdHJhbnNwaWxlciB3YXMgZm91bmQuJztcbiAgICB0cmFuc3BpbGUgPSBqc2NvbXAudHJhbnNwaWxlID0gZnVuY3Rpb24oY29kZSwgcGF0aCkge1xuICAgICAgLy8gVE9ETyhzZGgpOiBmaWd1cmUgb3V0IHNvbWUgd2F5IHRvIGdldCB0aGlzIGVycm9yIHRvIHNob3cgdXBcbiAgICAgIC8vIGluIHRlc3QgcmVzdWx0cywgbm90aW5nIHRoYXQgdGhlIGZhaWx1cmUgbWF5IG9jY3VyIGluIG1hbnlcbiAgICAgIC8vIGRpZmZlcmVudCB3YXlzLCBpbmNsdWRpbmcgaW4gbG9hZE1vZHVsZSgpIGJlZm9yZSB0aGUgdGVzdFxuICAgICAgLy8gcnVubmVyIGV2ZW4gY29tZXMgdXAuXG4gICAgICBnb29nLmxvZ1RvQ29uc29sZV8ocGF0aCArIHN1ZmZpeCk7XG4gICAgICByZXR1cm4gY29kZTtcbiAgICB9O1xuICB9XG4gIC8vIE5vdGU6IGFueSB0cmFuc3BpbGF0aW9uIGVycm9ycy93YXJuaW5ncyB3aWxsIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS5cbiAgcmV0dXJuIHRyYW5zcGlsZShjb2RlLCBwYXRoLCB0YXJnZXQpO1xufTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExhbmd1YWdlIEVuaGFuY2VtZW50c1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vKipcbiAqIFRoaXMgaXMgYSBcImZpeGVkXCIgdmVyc2lvbiBvZiB0aGUgdHlwZW9mIG9wZXJhdG9yLiAgSXQgZGlmZmVycyBmcm9tIHRoZSB0eXBlb2ZcbiAqIG9wZXJhdG9yIGluIHN1Y2ggYSB3YXkgdGhhdCBudWxsIHJldHVybnMgJ251bGwnIGFuZCBhcnJheXMgcmV0dXJuICdhcnJheScuXG4gKiBAcGFyYW0gez99IHZhbHVlIFRoZSB2YWx1ZSB0byBnZXQgdGhlIHR5cGUgb2YuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSB0eXBlLlxuICovXG5nb29nLnR5cGVPZiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBzID0gdHlwZW9mIHZhbHVlO1xuXG4gIGlmIChzICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiAnYXJyYXknO1xuICB9XG4gIHJldHVybiBzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYW4gYXJyYXkuIFRvIHF1YWxpZnkgYXMgYXJyYXkgbGlrZVxuICogdGhlIHZhbHVlIG5lZWRzIHRvIGJlIGVpdGhlciBhIE5vZGVMaXN0IG9yIGFuIG9iamVjdCB3aXRoIGEgTnVtYmVyIGxlbmd0aFxuICogcHJvcGVydHkuIE5vdGUgdGhhdCBmb3IgdGhpcyBmdW5jdGlvbiBuZWl0aGVyIHN0cmluZ3Mgbm9yIGZ1bmN0aW9ucyBhcmVcbiAqIGNvbnNpZGVyZWQgXCJhcnJheS1saWtlXCIuXG4gKlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gYXJyYXkuXG4gKi9cbmdvb2cuaXNBcnJheUxpa2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgdmFyIHR5cGUgPSBnb29nLnR5cGVPZih2YWwpO1xuICAvLyBXZSBkbyBub3QgdXNlIGdvb2cuaXNPYmplY3QgaGVyZSBpbiBvcmRlciB0byBleGNsdWRlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgcmV0dXJuIHR5cGUgPT0gJ2FycmF5JyB8fCB0eXBlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwubGVuZ3RoID09ICdudW1iZXInO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgYSBEYXRlLiBUbyBxdWFsaWZ5IGFzIERhdGUtbGlrZSB0aGVcbiAqIHZhbHVlIG5lZWRzIHRvIGJlIGFuIG9iamVjdCBhbmQgaGF2ZSBhIGdldEZ1bGxZZWFyKCkgZnVuY3Rpb24uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIGxpa2UgYSBEYXRlLlxuICovXG5nb29nLmlzRGF0ZUxpa2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIGdvb2cuaXNPYmplY3QodmFsKSAmJiB0eXBlb2YgdmFsLmdldEZ1bGxZZWFyID09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gb2JqZWN0LiAgVGhpcyBpbmNsdWRlcyBhcnJheXMgYW5kXG4gKiBmdW5jdGlvbnMuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhbiBvYmplY3QuXG4gKi9cbmdvb2cuaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICByZXR1cm4gdHlwZSA9PSAnb2JqZWN0JyAmJiB2YWwgIT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbic7XG4gIC8vIHJldHVybiBPYmplY3QodmFsKSA9PT0gdmFsIGFsc28gd29ya3MsIGJ1dCBpcyBzbG93ZXIsIGVzcGVjaWFsbHkgaWYgdmFsIGlzXG4gIC8vIG5vdCBhbiBvYmplY3QuXG59O1xuXG5cbi8qKlxuICogR2V0cyBhIHVuaXF1ZSBJRCBmb3IgYW4gb2JqZWN0LiBUaGlzIG11dGF0ZXMgdGhlIG9iamVjdCBzbyB0aGF0IGZ1cnRoZXIgY2FsbHNcbiAqIHdpdGggdGhlIHNhbWUgb2JqZWN0IGFzIGEgcGFyYW1ldGVyIHJldHVybnMgdGhlIHNhbWUgdmFsdWUuIFRoZSB1bmlxdWUgSUQgaXNcbiAqIGd1YXJhbnRlZWQgdG8gYmUgdW5pcXVlIGFjcm9zcyB0aGUgY3VycmVudCBzZXNzaW9uIGFtb25nc3Qgb2JqZWN0cyB0aGF0IGFyZVxuICogcGFzc2VkIGludG8gYGdldFVpZGAuIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBJRCBpcyB1bmlxdWUgb3JcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHNlc3Npb25zLiBJdCBpcyB1bnNhZmUgdG8gZ2VuZXJhdGUgdW5pcXVlIElEIGZvciBmdW5jdGlvblxuICogcHJvdG90eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZ2V0IHRoZSB1bmlxdWUgSUQgZm9yLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0LlxuICovXG5nb29nLmdldFVpZCA9IGZ1bmN0aW9uKG9iaikge1xuICAvLyBUT0RPKGFydik6IE1ha2UgdGhlIHR5cGUgc3RyaWN0ZXIsIGRvIG5vdCBhY2NlcHQgbnVsbC5cbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGdvb2cuVUlEX1BST1BFUlRZXykgJiZcbiAgICAgIG9ialtnb29nLlVJRF9QUk9QRVJUWV9dIHx8XG4gICAgICAob2JqW2dvb2cuVUlEX1BST1BFUlRZX10gPSArK2dvb2cudWlkQ291bnRlcl8pO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhbHJlYWR5IGFzc2lnbmVkIGEgdW5pcXVlIElELlxuICpcbiAqIFRoaXMgZG9lcyBub3QgbW9kaWZ5IHRoZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHshT2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYW4gYXNzaWduZWQgdW5pcXVlIGlkIGZvciB0aGUgb2JqZWN0LlxuICovXG5nb29nLmhhc1VpZCA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gISFvYmpbZ29vZy5VSURfUFJPUEVSVFlfXTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSB1bmlxdWUgSUQgZnJvbSBhbiBvYmplY3QuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBvYmplY3Qgd2FzXG4gKiBwcmV2aW91c2x5IG11dGF0ZWQgdXNpbmcgYGdvb2cuZ2V0VWlkYCBpbiB3aGljaCBjYXNlIHRoZSBtdXRhdGlvbiBpc1xuICogdW5kb25lLlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHJlbW92ZSB0aGUgdW5pcXVlIElEIGZpZWxkIGZyb20uXG4gKi9cbmdvb2cucmVtb3ZlVWlkID0gZnVuY3Rpb24ob2JqKSB7XG4gIC8vIFRPRE8oYXJ2KTogTWFrZSB0aGUgdHlwZSBzdHJpY3RlciwgZG8gbm90IGFjY2VwdCBudWxsLlxuXG4gIC8vIEluIElFLCBET00gbm9kZXMgYXJlIG5vdCBpbnN0YW5jZXMgb2YgT2JqZWN0IGFuZCB0aHJvdyBhbiBleGNlcHRpb24gaWYgd2VcbiAgLy8gdHJ5IHRvIGRlbGV0ZS4gIEluc3RlYWQgd2UgdHJ5IHRvIHVzZSByZW1vdmVBdHRyaWJ1dGUuXG4gIGlmIChvYmogIT09IG51bGwgJiYgJ3JlbW92ZUF0dHJpYnV0ZScgaW4gb2JqKSB7XG4gICAgb2JqLnJlbW92ZUF0dHJpYnV0ZShnb29nLlVJRF9QUk9QRVJUWV8pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWxldGUgb2JqW2dvb2cuVUlEX1BST1BFUlRZX107XG4gIH0gY2F0Y2ggKGV4KSB7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBOYW1lIGZvciB1bmlxdWUgSUQgcHJvcGVydHkuIEluaXRpYWxpemVkIGluIGEgd2F5IHRvIGhlbHAgYXZvaWQgY29sbGlzaW9uc1xuICogd2l0aCBvdGhlciBjbG9zdXJlIEphdmFTY3JpcHQgb24gdGhlIHNhbWUgcGFnZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVJRF9QUk9QRVJUWV8gPSAnY2xvc3VyZV91aWRfJyArICgoTWF0aC5yYW5kb20oKSAqIDFlOSkgPj4+IDApO1xuXG5cbi8qKlxuICogQ291bnRlciBmb3IgVUlELlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudWlkQ291bnRlcl8gPSAwO1xuXG5cbi8qKlxuICogQ2xvbmVzIGEgdmFsdWUuIFRoZSBpbnB1dCBtYXkgYmUgYW4gT2JqZWN0LCBBcnJheSwgb3IgYmFzaWMgdHlwZS4gT2JqZWN0cyBhbmRcbiAqIGFycmF5cyB3aWxsIGJlIGNsb25lZCByZWN1cnNpdmVseS5cbiAqXG4gKiBXQVJOSU5HUzpcbiAqIDxjb2RlPmdvb2cuY2xvbmVPYmplY3Q8L2NvZGU+IGRvZXMgbm90IGRldGVjdCByZWZlcmVuY2UgbG9vcHMuIE9iamVjdHMgdGhhdFxuICogcmVmZXIgdG8gdGhlbXNlbHZlcyB3aWxsIGNhdXNlIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAqXG4gKiA8Y29kZT5nb29nLmNsb25lT2JqZWN0PC9jb2RlPiBpcyB1bmF3YXJlIG9mIHVuaXF1ZSBpZGVudGlmaWVycywgYW5kIGNvcGllc1xuICogVUlEcyBjcmVhdGVkIGJ5IDxjb2RlPmdldFVpZDwvY29kZT4gaW50byBjbG9uZWQgcmVzdWx0cy5cbiAqXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcmV0dXJuIHsqfSBBIGNsb25lIG9mIHRoZSBpbnB1dCB2YWx1ZS5cbiAqIEBkZXByZWNhdGVkIGdvb2cuY2xvbmVPYmplY3QgaXMgdW5zYWZlLiBQcmVmZXIgdGhlIGdvb2cub2JqZWN0IG1ldGhvZHMuXG4gKi9cbmdvb2cuY2xvbmVPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHR5cGUgPSBnb29nLnR5cGVPZihvYmopO1xuICBpZiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdhcnJheScpIHtcbiAgICBpZiAodHlwZW9mIG9iai5jbG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG9iai5jbG9uZSgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcChvYmopO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICByZXR1cm4gbmV3IFNldChvYmopO1xuICAgIH1cbiAgICB2YXIgY2xvbmUgPSB0eXBlID09ICdhcnJheScgPyBbXSA6IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGNsb25lW2tleV0gPSBnb29nLmNsb25lT2JqZWN0KG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLyoqXG4gKiBBIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBnb29nLmJpbmQuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlQsIC4uLil9IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHtUfSBzZWxmT2JqIFNwZWNpZmllcyB0aGUgb2JqZWN0IHdoaWNoIHRoaXMgc2hvdWxkIHBvaW50IHRvIHdoZW4gdGhlXG4gKiAgICAgZnVuY3Rpb24gaXMgcnVuLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byB0aGVcbiAqICAgICBmdW5jdGlvbi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBnb29nLmJpbmQoKSB3YXNcbiAqICAgICBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxuICogQHRlbXBsYXRlIFRcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuYmluZE5hdGl2ZV8gPSBmdW5jdGlvbihmbiwgc2VsZk9iaiwgdmFyX2FyZ3MpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyAoZm4uY2FsbC5hcHBseShmbi5iaW5kLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBBIHB1cmUtSlMgaW1wbGVtZW50YXRpb24gb2YgZ29vZy5iaW5kLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpULCAuLi4pfSBmbiBBIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseS5cbiAqIEBwYXJhbSB7VH0gc2VsZk9iaiBTcGVjaWZpZXMgdGhlIG9iamVjdCB3aGljaCB0aGlzIHNob3VsZCBwb2ludCB0byB3aGVuIHRoZVxuICogICAgIGZ1bmN0aW9uIGlzIHJ1bi5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgQWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFydGlhbGx5IGFwcGxpZWQgdG8gdGhlXG4gKiAgICAgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgcGFydGlhbGx5LWFwcGxpZWQgZm9ybSBvZiB0aGUgZnVuY3Rpb24gZ29vZy5iaW5kKCkgd2FzXG4gKiAgICAgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmJpbmRKc18gPSBmdW5jdGlvbihmbiwgc2VsZk9iaiwgdmFyX2FyZ3MpIHtcbiAgaWYgKCFmbikge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gUHJlcGVuZCB0aGUgYm91bmQgYXJndW1lbnRzIHRvIHRoZSBjdXJyZW50IGFyZ3VtZW50cy5cbiAgICAgIHZhciBuZXdBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KG5ld0FyZ3MsIGJvdW5kQXJncyk7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZk9iaiwgbmV3QXJncyk7XG4gICAgfTtcblxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmT2JqLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbn07XG5cblxuLyoqXG4gKiBQYXJ0aWFsbHkgYXBwbGllcyB0aGlzIGZ1bmN0aW9uIHRvIGEgcGFydGljdWxhciAndGhpcyBvYmplY3QnIGFuZCB6ZXJvIG9yXG4gKiBtb3JlIGFyZ3VtZW50cy4gVGhlIHJlc3VsdCBpcyBhIG5ldyBmdW5jdGlvbiB3aXRoIHNvbWUgYXJndW1lbnRzIG9mIHRoZSBmaXJzdFxuICogZnVuY3Rpb24gcHJlLWZpbGxlZCBhbmQgdGhlIHZhbHVlIG9mIHRoaXMgJ3ByZS1zcGVjaWZpZWQnLlxuICpcbiAqIFJlbWFpbmluZyBhcmd1bWVudHMgc3BlY2lmaWVkIGF0IGNhbGwtdGltZSBhcmUgYXBwZW5kZWQgdG8gdGhlIHByZS1zcGVjaWZpZWRcbiAqIG9uZXMuXG4gKlxuICogQWxzbyBzZWU6IHtAbGluayAjcGFydGlhbH0uXG4gKlxuICogVXNhZ2U6XG4gKiA8cHJlPnZhciBiYXJNZXRoQm91bmQgPSBnb29nLmJpbmQobXlGdW5jdGlvbiwgbXlPYmosICdhcmcxJywgJ2FyZzInKTtcbiAqIGJhck1ldGhCb3VuZCgnYXJnMycsICdhcmc0Jyk7PC9wcmU+XG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpULCAuLi4pfSBmbiBBIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseS5cbiAqIEBwYXJhbSB7VH0gc2VsZk9iaiBTcGVjaWZpZXMgdGhlIG9iamVjdCB3aGljaCB0aGlzIHNob3VsZCBwb2ludCB0byB3aGVuIHRoZVxuICogICAgIGZ1bmN0aW9uIGlzIHJ1bi5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgQWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFydGlhbGx5IGFwcGxpZWQgdG8gdGhlXG4gKiAgICAgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgcGFydGlhbGx5LWFwcGxpZWQgZm9ybSBvZiB0aGUgZnVuY3Rpb24gZ29vZy5iaW5kKCkgd2FzXG4gKiAgICAgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9IFNlZSBhYm92ZS5cbiAqIEBkZXByZWNhdGVkIHVzZSBgPT4ge31gIG9yIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGluc3RlYWQuXG4gKi9cbmdvb2cuYmluZCA9IGZ1bmN0aW9uKGZuLCBzZWxmT2JqLCB2YXJfYXJncykge1xuICAvLyBUT0RPKG5pY2tzYW50b3MpOiBuYXJyb3cgdGhlIHR5cGUgc2lnbmF0dXJlLlxuICBpZiAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgJiZcbiAgICAgIC8vIE5PVEUobmlja3NhbnRvcyk6IFNvbWVib2R5IHB1bGxlZCBiYXNlLmpzIGludG8gdGhlIGRlZmF1bHQgQ2hyb21lXG4gICAgICAvLyBleHRlbnNpb24gZW52aXJvbm1lbnQuIFRoaXMgbWVhbnMgdGhhdCBmb3IgQ2hyb21lIGV4dGVuc2lvbnMsIHRoZXkgZ2V0XG4gICAgICAvLyB0aGUgaW1wbGVtZW50YXRpb24gb2YgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgdGhhdCBjYWxscyBnb29nLmJpbmRcbiAgICAgIC8vIGluc3RlYWQgb2YgdGhlIG5hdGl2ZSBvbmUuIEV2ZW4gd29yc2UsIHdlIGRvbid0IHdhbnQgdG8gaW50cm9kdWNlIGFcbiAgICAgIC8vIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiBnb29nLmJpbmQgYW5kIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBzb1xuICAgICAgLy8gd2UgaGF2ZSB0byBoYWNrIHRoaXMgdG8gbWFrZSBzdXJlIGl0IHdvcmtzIGNvcnJlY3RseS5cbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZignbmF0aXZlIGNvZGUnKSAhPSAtMSkge1xuICAgIGdvb2cuYmluZCA9IGdvb2cuYmluZE5hdGl2ZV87XG4gIH0gZWxzZSB7XG4gICAgZ29vZy5iaW5kID0gZ29vZy5iaW5kSnNfO1xuICB9XG4gIHJldHVybiBnb29nLmJpbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cblxuLyoqXG4gKiBMaWtlIGdvb2cuYmluZCgpLCBleGNlcHQgdGhhdCBhICd0aGlzIG9iamVjdCcgaXMgbm90IHJlcXVpcmVkLiBVc2VmdWwgd2hlblxuICogdGhlIHRhcmdldCBmdW5jdGlvbiBpcyBhbHJlYWR5IGJvdW5kLlxuICpcbiAqIFVzYWdlOlxuICogdmFyIGcgPSBnb29nLnBhcnRpYWwoZiwgYXJnMSwgYXJnMik7XG4gKiBnKGFyZzMsIGFyZzQpO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byBmbi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBnb29nLnBhcnRpYWwoKVxuICogICAgIHdhcyBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxuICovXG5nb29nLnBhcnRpYWwgPSBmdW5jdGlvbihmbiwgdmFyX2FyZ3MpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgdGhlIGFycmF5ICh3aXRoIHNsaWNlKCkpIGFuZCBhcHBlbmQgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAvLyB0byB0aGUgZXhpc3RpbmcgYXJndW1lbnRzLlxuICAgIHZhciBuZXdBcmdzID0gYXJncy5zbGljZSgpO1xuICAgIG5ld0FyZ3MucHVzaC5hcHBseShuZXdBcmdzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmbi5hcHBseSgvKiogQHR5cGUgez99ICovICh0aGlzKSwgbmV3QXJncyk7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQ29waWVzIGFsbCB0aGUgbWVtYmVycyBvZiBhIHNvdXJjZSBvYmplY3QgdG8gYSB0YXJnZXQgb2JqZWN0LiBUaGlzIG1ldGhvZFxuICogZG9lcyBub3Qgd29yayBvbiBhbGwgYnJvd3NlcnMgZm9yIGFsbCBvYmplY3RzIHRoYXQgY29udGFpbiBrZXlzIHN1Y2ggYXNcbiAqIHRvU3RyaW5nIG9yIGhhc093blByb3BlcnR5LiBVc2UgZ29vZy5vYmplY3QuZXh0ZW5kIGZvciB0aGlzIHB1cnBvc2UuXG4gKlxuICogTk9URTogU29tZSBoYXZlIGFkdm9jYXRlZCBmb3IgdGhlIHVzZSBvZiBnb29nLm1peGluIHRvIHNldHVwIGNsYXNzZXNcbiAqIHdpdGggbXVsdGlwbGUgaW5oZXJpdGVuY2UgKHRyYWl0cywgbWl4aW5zLCBldGMpLiAgSG93ZXZlciwgYXMgaXQgc2ltcGx5XG4gKiB1c2VzIFwiZm9yIGluXCIsIHRoaXMgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBFUzYgY2xhc3NlcyB3aG9zZSBtZXRob2RzIGFyZVxuICogbm9uLWVudW1lcmFibGUuICBDaGFuZ2luZyB0aGlzLCB3b3VsZCBicmVhayBjYXNlcyB3aGVyZSBub24tZW51bWVyYWJsZVxuICogcHJvcGVydGllcyBhcmUgbm90IGV4cGVjdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGFyZ2V0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBTb3VyY2UuXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgT2JqZWN0LmFzc2lnblxuICovXG5nb29nLm1peGluID0gZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgZm9yICh2YXIgeCBpbiBzb3VyY2UpIHtcbiAgICB0YXJnZXRbeF0gPSBzb3VyY2VbeF07XG4gIH1cblxuICAvLyBGb3IgSUU3IG9yIGxvd2VyLCB0aGUgZm9yLWluLWxvb3AgZG9lcyBub3QgY29udGFpbiBhbnkgcHJvcGVydGllcyB0aGF0IGFyZVxuICAvLyBub3QgZW51bWVyYWJsZSBvbiB0aGUgcHJvdG90eXBlIG9iamVjdCAoZm9yIGV4YW1wbGUsIGlzUHJvdG90eXBlT2YgZnJvbVxuICAvLyBPYmplY3QucHJvdG90eXBlKSBidXQgYWxzbyBpdCB3aWxsIG5vdCBpbmNsdWRlICdyZXBsYWNlJyBvbiBvYmplY3RzIHRoYXRcbiAgLy8gZXh0ZW5kIFN0cmluZyBhbmQgY2hhbmdlICdyZXBsYWNlJyAobm90IHRoYXQgaXQgaXMgY29tbW9uIGZvciBhbnlvbmUgdG9cbiAgLy8gZXh0ZW5kIGFueXRoaW5nIGV4Y2VwdCBPYmplY3QpLlxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gaW50ZWdlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqICAgICBiZXR3ZWVuIG1pZG5pZ2h0LCBKYW51YXJ5IDEsIDE5NzAgYW5kIHRoZSBjdXJyZW50IHRpbWUuXG4gKiBAZGVwcmVjYXRlZCBVc2UgRGF0ZS5ub3dcbiAqL1xuZ29vZy5ub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59O1xuXG5cbi8qKlxuICogRXZhbHMgSmF2YVNjcmlwdCBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuICpcbiAqIFRocm93cyBhbiBleGNlcHRpb24gaWYgbmVpdGhlciBleGVjU2NyaXB0IG9yIGV2YWwgaXMgZGVmaW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFUcnVzdGVkU2NyaXB0fSBzY3JpcHQgSmF2YVNjcmlwdCBzdHJpbmcuXG4gKi9cbmdvb2cuZ2xvYmFsRXZhbCA9IGZ1bmN0aW9uKHNjcmlwdCkge1xuICAoMCwgZXZhbCkoc2NyaXB0KTtcbn07XG5cblxuLyoqXG4gKiBPcHRpb25hbCBtYXAgb2YgQ1NTIGNsYXNzIG5hbWVzIHRvIG9iZnVzY2F0ZWQgbmFtZXMgdXNlZCB3aXRoXG4gKiBnb29nLmdldENzc05hbWUoKS5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPnx1bmRlZmluZWR9XG4gKiBAc2VlIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmdcbiAqL1xuZ29vZy5jc3NOYW1lTWFwcGluZ187XG5cblxuLyoqXG4gKiBPcHRpb25hbCBvYmZ1c2NhdGlvbiBzdHlsZSBmb3IgQ1NTIGNsYXNzIG5hbWVzLiBTaG91bGQgYmUgc2V0IHRvIGVpdGhlclxuICogJ0JZX1dIT0xFJyBvciAnQllfUEFSVCcgaWYgZGVmaW5lZC5cbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqIEBzZWUgZ29vZy5zZXRDc3NOYW1lTWFwcGluZ1xuICovXG5nb29nLmNzc05hbWVNYXBwaW5nU3R5bGVfO1xuXG5cblxuLyoqXG4gKiBBIGhvb2sgZm9yIG1vZGlmeWluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBnb29nLmdldENzc05hbWUuIFRoZSBmdW5jdGlvblxuICogaWYgcHJlc2VudCwgd2lsbCByZWNlaXZlIHRoZSBzdGFuZGFyZCBvdXRwdXQgb2YgdGhlIGdvb2cuZ2V0Q3NzTmFtZSBhc1xuICogaXRzIGlucHV0LlxuICpcbiAqIEB0eXBlIHsoZnVuY3Rpb24oc3RyaW5nKTpzdHJpbmcpfHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk47XG5cblxuLyoqXG4gKiBIYW5kbGVzIHN0cmluZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBDU1MgY2xhc3MgbmFtZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3b3JrcyBpbiB0YW5kZW0gd2l0aCBAc2VlIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcuXG4gKlxuICogV2l0aG91dCBhbnkgbWFwcGluZyBzZXQsIHRoZSBhcmd1bWVudHMgYXJlIHNpbXBsZSBqb2luZWQgd2l0aCBhIGh5cGhlbiBhbmRcbiAqIHBhc3NlZCB0aHJvdWdoIHVuYWx0ZXJlZC5cbiAqXG4gKiBXaGVuIHRoZXJlIGlzIGEgbWFwcGluZywgdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzdHlsZXMgaW4gd2hpY2ggdGhlc2VcbiAqIG1hcHBpbmdzIGFyZSB1c2VkLiBJbiB0aGUgQllfUEFSVCBzdHlsZSwgZWFjaCBwYXJ0IChpLmUuIGluIGJldHdlZW4gaHlwaGVucylcbiAqIG9mIHRoZSBwYXNzZWQgaW4gY3NzIG5hbWUgaXMgcmV3cml0dGVuIGFjY29yZGluZyB0byB0aGUgbWFwLiBJbiB0aGUgQllfV0hPTEVcbiAqIHN0eWxlLCB0aGUgZnVsbCBjc3MgbmFtZSBpcyBsb29rZWQgdXAgaW4gdGhlIG1hcCBkaXJlY3RseS4gSWYgYSByZXdyaXRlIGlzXG4gKiBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBtYXAsIHRoZSBjb21waWxlciB3aWxsIG91dHB1dCBhIHdhcm5pbmcuXG4gKlxuICogV2hlbiB0aGUgbWFwcGluZyBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGVyLCBpdCB3aWxsIHJlcGxhY2UgY2FsbHMgdG9cbiAqIGdvb2cuZ2V0Q3NzTmFtZSB3aXRoIHRoZSBzdHJpbmdzIGZyb20gdGhlIG1hcHBpbmcsIGUuZy5cbiAqICAgICB2YXIgeCA9IGdvb2cuZ2V0Q3NzTmFtZSgnZm9vJyk7XG4gKiAgICAgdmFyIHkgPSBnb29nLmdldENzc05hbWUodGhpcy5iYXNlQ2xhc3MsICdhY3RpdmUnKTtcbiAqICBiZWNvbWVzOlxuICogICAgIHZhciB4ID0gJ2Zvbyc7XG4gKiAgICAgdmFyIHkgPSB0aGlzLmJhc2VDbGFzcyArICctYWN0aXZlJztcbiAqXG4gKiBJZiBvbmUgYXJndW1lbnQgaXMgcGFzc2VkIGl0IHdpbGwgYmUgcHJvY2Vzc2VkLCBpZiB0d28gYXJlIHBhc3NlZCBvbmx5IHRoZVxuICogbW9kaWZpZXIgd2lsbCBiZSBwcm9jZXNzZWQsIGFzIGl0IGlzIGFzc3VtZWQgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBnZW5lcmF0ZWRcbiAqIGFzIGEgcmVzdWx0IG9mIGNhbGxpbmcgZ29vZy5nZXRDc3NOYW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgVGhlIGNsYXNzIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tb2RpZmllciBBIG1vZGlmaWVyIHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBjbGFzcyBuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY2xhc3MgbmFtZSBvciB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGUgY2xhc3MgbmFtZSBhbmRcbiAqICAgICB0aGUgbW9kaWZpZXIuXG4gKi9cbmdvb2cuZ2V0Q3NzTmFtZSA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgb3B0X21vZGlmaWVyKSB7XG4gIC8vIFN0cmluZygpIGlzIHVzZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBjb21waWxlZCBzb3kgd2hlcmUgdGhlIHBhc3NlZFxuICAvLyBjbGFzc05hbWUgY2FuIGJlIG5vbi1zdHJpbmcgb2JqZWN0cy5cbiAgaWYgKFN0cmluZyhjbGFzc05hbWUpLmNoYXJBdCgwKSA9PSAnLicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdjbGFzc05hbWUgcGFzc2VkIGluIGdvb2cuZ2V0Q3NzTmFtZSBtdXN0IG5vdCBzdGFydCB3aXRoIFwiLlwiLicgK1xuICAgICAgICAnIFlvdSBwYXNzZWQ6ICcgKyBjbGFzc05hbWUpO1xuICB9XG5cbiAgdmFyIGdldE1hcHBpbmcgPSBmdW5jdGlvbihjc3NOYW1lKSB7XG4gICAgcmV0dXJuIGdvb2cuY3NzTmFtZU1hcHBpbmdfW2Nzc05hbWVdIHx8IGNzc05hbWU7XG4gIH07XG5cbiAgdmFyIHJlbmFtZUJ5UGFydHMgPSBmdW5jdGlvbihjc3NOYW1lKSB7XG4gICAgLy8gUmVtYXAgYWxsIHRoZSBwYXJ0cyBpbmRpdmlkdWFsbHkuXG4gICAgdmFyIHBhcnRzID0gY3NzTmFtZS5zcGxpdCgnLScpO1xuICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXBwZWQucHVzaChnZXRNYXBwaW5nKHBhcnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQuam9pbignLScpO1xuICB9O1xuXG4gIHZhciByZW5hbWU7XG4gIGlmIChnb29nLmNzc05hbWVNYXBwaW5nXykge1xuICAgIHJlbmFtZSA9XG4gICAgICAgIGdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8gPT0gJ0JZX1dIT0xFJyA/IGdldE1hcHBpbmcgOiByZW5hbWVCeVBhcnRzO1xuICB9IGVsc2Uge1xuICAgIHJlbmFtZSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVzdWx0ID1cbiAgICAgIG9wdF9tb2RpZmllciA/IGNsYXNzTmFtZSArICctJyArIHJlbmFtZShvcHRfbW9kaWZpZXIpIDogcmVuYW1lKGNsYXNzTmFtZSk7XG5cbiAgLy8gVGhlIHNwZWNpYWwgQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk4gYWxsb3dzIHVzZXJzIHRvIHNwZWNpZnkgZnVydGhlclxuICAvLyBwcm9jZXNzaW5nIG9mIHRoZSBjbGFzcyBuYW1lLlxuICBpZiAoZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk4pIHtcbiAgICByZXR1cm4gZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBfRk4ocmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIHRvIGNoZWNrIHdoZW4gcmV0dXJuaW5nIGEgdmFsdWUgZnJvbSBnb29nLmdldENzc05hbWUoKS4gRXhhbXBsZTpcbiAqIDxwcmU+XG4gKiBnb29nLnNldENzc05hbWVNYXBwaW5nKHtcbiAqICAgXCJnb29nXCI6IFwiYVwiLFxuICogICBcImRpc2FibGVkXCI6IFwiYlwiLFxuICogfSk7XG4gKlxuICogdmFyIHggPSBnb29nLmdldENzc05hbWUoJ2dvb2cnKTtcbiAqIC8vIFRoZSBmb2xsb3dpbmcgZXZhbHVhdGVzIHRvOiBcImEgYS1iXCIuXG4gKiBnb29nLmdldENzc05hbWUoJ2dvb2cnKSArICcgJyArIGdvb2cuZ2V0Q3NzTmFtZSh4LCAnZGlzYWJsZWQnKVxuICogPC9wcmU+XG4gKiBXaGVuIGRlY2xhcmVkIGFzIGEgbWFwIG9mIHN0cmluZyBsaXRlcmFscyB0byBzdHJpbmcgbGl0ZXJhbHMsIHRoZSBKU0NvbXBpbGVyXG4gKiB3aWxsIHJlcGxhY2UgYWxsIGNhbGxzIHRvIGdvb2cuZ2V0Q3NzTmFtZSgpIHVzaW5nIHRoZSBzdXBwbGllZCBtYXAgaWYgdGhlXG4gKiAtLXByb2Nlc3NfY2xvc3VyZV9wcmltaXRpdmVzIGZsYWcgaXMgc2V0LlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gbWFwcGluZyBBIG1hcCBvZiBzdHJpbmdzIHRvIHN0cmluZ3Mgd2hlcmUga2V5cyBhcmUgcG9zc2libGVcbiAqICAgICBhcmd1bWVudHMgdG8gZ29vZy5nZXRDc3NOYW1lKCkgYW5kIHZhbHVlcyBhcmUgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzXG4gKiAgICAgdGhhdCBzaG91bGQgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zdHlsZSBUaGUgc3R5bGUgb2YgY3NzIG5hbWUgbWFwcGluZy4gVGhlcmUgYXJlIHR3byB2YWxpZFxuICogICAgIG9wdGlvbnM6ICdCWV9QQVJUJywgYW5kICdCWV9XSE9MRScuXG4gKiBAc2VlIGdvb2cuZ2V0Q3NzTmFtZSBmb3IgYSBkZXNjcmlwdGlvbi5cbiAqL1xuZ29vZy5zZXRDc3NOYW1lTWFwcGluZyA9IGZ1bmN0aW9uKG1hcHBpbmcsIG9wdF9zdHlsZSkge1xuICBnb29nLmNzc05hbWVNYXBwaW5nXyA9IG1hcHBpbmc7XG4gIGdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8gPSBvcHRfc3R5bGU7XG59O1xuXG5cbi8qKlxuICogVG8gdXNlIENTUyByZW5hbWluZyBpbiBjb21waWxlZCBtb2RlLCBvbmUgb2YgdGhlIGlucHV0IGZpbGVzIHNob3VsZCBoYXZlIGFcbiAqIGNhbGwgdG8gZ29vZy5zZXRDc3NOYW1lTWFwcGluZygpIHdpdGggYW4gb2JqZWN0IGxpdGVyYWwgdGhhdCB0aGUgSlNDb21waWxlclxuICogY2FuIGV4dHJhY3QgYW5kIHVzZSB0byByZXBsYWNlIGFsbCBjYWxscyB0byBnb29nLmdldENzc05hbWUoKS4gSW4gdW5jb21waWxlZFxuICogbW9kZSwgSmF2YVNjcmlwdCBjb2RlIHNob3VsZCBiZSBsb2FkZWQgYmVmb3JlIHRoaXMgYmFzZS5qcyBmaWxlIHRoYXQgZGVjbGFyZXNcbiAqIGEgZ2xvYmFsIHZhcmlhYmxlLCBDTE9TVVJFX0NTU19OQU1FX01BUFBJTkcsIHdoaWNoIGlzIHVzZWQgYmVsb3cuIFRoaXMgaXNcbiAqIHRvIGVuc3VyZSB0aGF0IHRoZSBtYXBwaW5nIGlzIGxvYWRlZCBiZWZvcmUgYW55IGNhbGxzIHRvIGdvb2cuZ2V0Q3NzTmFtZSgpXG4gKiBhcmUgbWFkZSBpbiB1bmNvbXBpbGVkIG1vZGUuXG4gKlxuICogQSBob29rIGZvciBvdmVycmlkaW5nIHRoZSBDU1MgbmFtZSBtYXBwaW5nLlxuICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HO1xuXG5cbmlmICghQ09NUElMRUQgJiYgZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HKSB7XG4gIC8vIFRoaXMgZG9lcyBub3QgY2FsbCBnb29nLnNldENzc05hbWVNYXBwaW5nKCkgYmVjYXVzZSB0aGUgSlNDb21waWxlclxuICAvLyByZXF1aXJlcyB0aGF0IGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcoKSBiZSBjYWxsZWQgd2l0aCBhbiBvYmplY3QgbGl0ZXJhbC5cbiAgZ29vZy5jc3NOYW1lTWFwcGluZ18gPSBnb29nLmdsb2JhbC5DTE9TVVJFX0NTU19OQU1FX01BUFBJTkc7XG59XG5cblxuLyoqXG4gKiBHZXRzIGEgbG9jYWxpemVkIG1lc3NhZ2UuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNvbXBpbGVyIHByaW1pdGl2ZS4gSWYgeW91IGdpdmUgdGhlIGNvbXBpbGVyIGEgbG9jYWxpemVkXG4gKiBtZXNzYWdlIGJ1bmRsZSwgaXQgd2lsbCByZXBsYWNlIHRoZSBzdHJpbmcgYXQgY29tcGlsZS10aW1lIHdpdGggYSBsb2NhbGl6ZWRcbiAqIHZlcnNpb24sIGFuZCBleHBhbmQgZ29vZy5nZXRNc2cgY2FsbCB0byBhIGNvbmNhdGVuYXRlZCBzdHJpbmcuXG4gKlxuICogTWVzc2FnZXMgbXVzdCBiZSBpbml0aWFsaXplZCBpbiB0aGUgZm9ybTpcbiAqIDxjb2RlPlxuICogdmFyIE1TR19OQU1FID0gZ29vZy5nZXRNc2coJ0hlbGxvIHskcGxhY2Vob2xkZXJ9JywgeydwbGFjZWhvbGRlcic6ICd3b3JsZCd9KTtcbiAqIDwvY29kZT5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHByb2R1Y2VzIGEgc3RyaW5nIHdoaWNoIHNob3VsZCBiZSB0cmVhdGVkIGFzIHBsYWluIHRleHQuIFVzZVxuICoge0BsaW5rIGdvb2cuaHRtbC5TYWZlSHRtbEZvcm1hdHRlcn0gaW4gY29uanVuY3Rpb24gd2l0aCBnb29nLmdldE1zZyB0b1xuICogcHJvZHVjZSBTYWZlSHRtbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRyYW5zbGF0YWJsZSBzdHJpbmcsIHBsYWNlcyBob2xkZXJzIGluIHRoZSBmb3JtIHskZm9vfS5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgc3RyaW5nPj19IG9wdF92YWx1ZXMgTWFwcyBwbGFjZSBob2xkZXIgbmFtZSB0byB2YWx1ZS5cbiAqIEBwYXJhbSB7e2h0bWw6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiAgICAgICAgIHVuZXNjYXBlSHRtbEVudGl0aWVzOiAoYm9vbGVhbnx1bmRlZmluZWQpfT19IG9wdF9vcHRpb25zIE9wdGlvbnM6XG4gKiAgICAgaHRtbDogRXNjYXBlICc8JyBpbiBzdHIgdG8gJyZsdDsnLiBVc2VkIGJ5IENsb3N1cmUgVGVtcGxhdGVzIHdoZXJlIHRoZVxuICogICAgIGdlbmVyYXRlZCBjb2RlIHNpemUgYW5kIHBlcmZvcm1hbmNlIGlzIGNyaXRpY2FsIHdoaWNoIGlzIHdoeSB7QGxpbmtcbiAqICAgICBnb29nLmh0bWwuU2FmZUh0bWxGb3JtYXR0ZXJ9IGlzIG5vdCB1c2VkLiBUaGUgdmFsdWUgbXVzdCBiZSBsaXRlcmFsIHRydWVcbiAqICAgICBvciBmYWxzZS5cbiAqICAgICB1bmVzY2FwZUh0bWxFbnRpdGllczogVW5lc2NhcGUgY29tbW9uIGh0bWwgZW50aXRpZXM6ICZndDssICZsdDssICZhcG9zOyxcbiAqICAgICAmcXVvdDsgYW5kICZhbXA7LiBVc2VkIGZvciBtZXNzYWdlcyBub3QgaW4gSFRNTCBjb250ZXh0LCBzdWNoIGFzIHdpdGhcbiAqICAgICBgdGV4dENvbnRlbnRgIHByb3BlcnR5LlxuICogQHJldHVybiB7c3RyaW5nfSBtZXNzYWdlIHdpdGggcGxhY2Vob2xkZXJzIGZpbGxlZC5cbiAqL1xuZ29vZy5nZXRNc2cgPSBmdW5jdGlvbihzdHIsIG9wdF92YWx1ZXMsIG9wdF9vcHRpb25zKSB7XG4gIGlmIChvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5odG1sKSB7XG4gICAgLy8gTm90ZSB0aGF0ICcmJyBpcyBub3QgcmVwbGFjZWQgYmVjYXVzZSB0aGUgdHJhbnNsYXRpb24gY2FuIGNvbnRhaW4gSFRNTFxuICAgIC8vIGVudGl0aWVzLlxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC88L2csICcmbHQ7Jyk7XG4gIH1cbiAgaWYgKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLnVuZXNjYXBlSHRtbEVudGl0aWVzKSB7XG4gICAgLy8gTm90ZSB0aGF0IFwiJmFtcDtcIiBtdXN0IGJlIHRoZSBsYXN0IHRvIGF2b2lkIFwiY3JlYXRpbmdcIiBuZXcgZW50aXRpZXMuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxuICAgICAgICAgICAgICAucmVwbGFjZSgvJmd0Oy9nLCAnPicpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC8mYXBvczsvZywgJ1xcJycpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJyk7XG4gIH1cbiAgaWYgKG9wdF92YWx1ZXMpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFx7XFwkKFtefV0rKX0vZywgZnVuY3Rpb24obWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIChvcHRfdmFsdWVzICE9IG51bGwgJiYga2V5IGluIG9wdF92YWx1ZXMpID8gb3B0X3ZhbHVlc1trZXldIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8qKlxuICogR2V0cyBhIGxvY2FsaXplZCBtZXNzYWdlLiBJZiB0aGUgbWVzc2FnZSBkb2VzIG5vdCBoYXZlIGEgdHJhbnNsYXRpb24sIGdpdmVzIGFcbiAqIGZhbGxiYWNrIG1lc3NhZ2UuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2hlbiBpbnRyb2R1Y2luZyBhIG5ldyBtZXNzYWdlIHRoYXQgaGFzIG5vdCB5ZXQgYmVlblxuICogdHJhbnNsYXRlZCBpbnRvIGFsbCBsYW5ndWFnZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNvbXBpbGVyIHByaW1pdGl2ZS4gTXVzdCBiZSB1c2VkIGluIHRoZSBmb3JtOlxuICogPGNvZGU+dmFyIHggPSBnb29nLmdldE1zZ1dpdGhGYWxsYmFjayhNU0dfQSwgTVNHX0IpOzwvY29kZT5cbiAqIHdoZXJlIE1TR19BIGFuZCBNU0dfQiB3ZXJlIGluaXRpYWxpemVkIHdpdGggZ29vZy5nZXRNc2cuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGEgVGhlIHByZWZlcnJlZCBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IGIgVGhlIGZhbGxiYWNrIG1lc3NhZ2UuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBiZXN0IHRyYW5zbGF0ZWQgbWVzc2FnZS5cbiAqL1xuZ29vZy5nZXRNc2dXaXRoRmFsbGJhY2sgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhO1xufTtcblxuXG4vKipcbiAqIEV4cG9zZXMgYW4gdW5vYmZ1c2NhdGVkIGdsb2JhbCBuYW1lc3BhY2UgcGF0aCBmb3IgdGhlIGdpdmVuIG9iamVjdC5cbiAqIE5vdGUgdGhhdCBmaWVsZHMgb2YgdGhlIGV4cG9ydGVkIG9iamVjdCAqd2lsbCogYmUgb2JmdXNjYXRlZCwgdW5sZXNzIHRoZXkgYXJlXG4gKiBleHBvcnRlZCBpbiB0dXJuIHZpYSB0aGlzIGZ1bmN0aW9uIG9yIGdvb2cuZXhwb3J0UHJvcGVydHkuXG4gKlxuICogQWxzbyBoYW5keSBmb3IgbWFraW5nIHB1YmxpYyBpdGVtcyB0aGF0IGFyZSBkZWZpbmVkIGluIGFub255bW91cyBjbG9zdXJlcy5cbiAqXG4gKiBleC4gZ29vZy5leHBvcnRTeW1ib2woJ3B1YmxpYy5wYXRoLkZvbycsIEZvbyk7XG4gKlxuICogZXguIGdvb2cuZXhwb3J0U3ltYm9sKCdwdWJsaWMucGF0aC5Gb28uc3RhdGljRnVuY3Rpb24nLCBGb28uc3RhdGljRnVuY3Rpb24pO1xuICogICAgIHB1YmxpYy5wYXRoLkZvby5zdGF0aWNGdW5jdGlvbigpO1xuICpcbiAqIGV4LiBnb29nLmV4cG9ydFN5bWJvbCgncHVibGljLnBhdGguRm9vLnByb3RvdHlwZS5teU1ldGhvZCcsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgRm9vLnByb3RvdHlwZS5teU1ldGhvZCk7XG4gKiAgICAgbmV3IHB1YmxpYy5wYXRoLkZvbygpLm15TWV0aG9kKCk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHB1YmxpY1BhdGggVW5vYmZ1c2NhdGVkIG5hbWUgdG8gZXhwb3J0LlxuICogQHBhcmFtIHsqfSBvYmplY3QgT2JqZWN0IHRoZSBuYW1lIHNob3VsZCBwb2ludCB0by5cbiAqIEBwYXJhbSB7P09iamVjdD19IG9iamVjdFRvRXhwb3J0VG8gVGhlIG9iamVjdCB0byBhZGQgdGhlIHBhdGggdG87IGRlZmF1bHRcbiAqICAgICBpcyBnb29nLmdsb2JhbC5cbiAqL1xuZ29vZy5leHBvcnRTeW1ib2wgPSBmdW5jdGlvbihwdWJsaWNQYXRoLCBvYmplY3QsIG9iamVjdFRvRXhwb3J0VG8pIHtcbiAgZ29vZy5leHBvcnRQYXRoXyhcbiAgICAgIHB1YmxpY1BhdGgsIG9iamVjdCwgLyogb3ZlcndyaXRlSW1wbGljaXQ9ICovIHRydWUsIG9iamVjdFRvRXhwb3J0VG8pO1xufTtcblxuXG4vKipcbiAqIEV4cG9ydHMgYSBwcm9wZXJ0eSB1bm9iZnVzY2F0ZWQgaW50byB0aGUgb2JqZWN0J3MgbmFtZXNwYWNlLlxuICogZXguIGdvb2cuZXhwb3J0UHJvcGVydHkoRm9vLCAnc3RhdGljRnVuY3Rpb24nLCBGb28uc3RhdGljRnVuY3Rpb24pO1xuICogZXguIGdvb2cuZXhwb3J0UHJvcGVydHkoRm9vLnByb3RvdHlwZSwgJ215TWV0aG9kJywgRm9vLnByb3RvdHlwZS5teU1ldGhvZCk7XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB3aG9zZSBzdGF0aWMgcHJvcGVydHkgaXMgYmVpbmcgZXhwb3J0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHVibGljTmFtZSBVbm9iZnVzY2F0ZWQgbmFtZSB0byBleHBvcnQuXG4gKiBAcGFyYW0geyp9IHN5bWJvbCBPYmplY3QgdGhlIG5hbWUgc2hvdWxkIHBvaW50IHRvLlxuICovXG5nb29nLmV4cG9ydFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqZWN0LCBwdWJsaWNOYW1lLCBzeW1ib2wpIHtcbiAgb2JqZWN0W3B1YmxpY05hbWVdID0gc3ltYm9sO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBVc2FnZTpcbiAqIDxwcmU+XG4gKiBmdW5jdGlvbiBQYXJlbnRDbGFzcyhhLCBiKSB7IH1cbiAqIFBhcmVudENsYXNzLnByb3RvdHlwZS5mb28gPSBmdW5jdGlvbihhKSB7IH07XG4gKlxuICogZnVuY3Rpb24gQ2hpbGRDbGFzcyhhLCBiLCBjKSB7XG4gKiAgIENoaWxkQ2xhc3MuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InLCBhLCBiKTtcbiAqIH1cbiAqIGdvb2cuaW5oZXJpdHMoQ2hpbGRDbGFzcywgUGFyZW50Q2xhc3MpO1xuICpcbiAqIHZhciBjaGlsZCA9IG5ldyBDaGlsZENsYXNzKCdhJywgJ2InLCAnc2VlJyk7XG4gKiBjaGlsZC5mb28oKTsgLy8gVGhpcyB3b3Jrcy5cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjaGlsZEN0b3IgQ2hpbGQgY2xhc3MuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gcGFyZW50Q3RvciBQYXJlbnQgY2xhc3MuXG4gKiBAc3VwcHJlc3Mge3N0cmljdE1pc3NpbmdQcm9wZXJ0aWVzfSBzdXBlckNsYXNzXyBhbmQgYmFzZSBpcyBub3QgZGVmaW5lZCBvblxuICogICAgRnVuY3Rpb24uXG4gKiBAZGVwcmVjYXRlZCBVc2UgRUNNQVNjcmlwdCBjbGFzcyBzeW50YXggaW5zdGVhZC5cbiAqL1xuZ29vZy5pbmhlcml0cyA9IGZ1bmN0aW9uKGNoaWxkQ3RvciwgcGFyZW50Q3Rvcikge1xuICAvKiogQGNvbnN0cnVjdG9yICovXG4gIGZ1bmN0aW9uIHRlbXBDdG9yKCkge31cbiAgdGVtcEN0b3IucHJvdG90eXBlID0gcGFyZW50Q3Rvci5wcm90b3R5cGU7XG4gIGNoaWxkQ3Rvci5zdXBlckNsYXNzXyA9IHBhcmVudEN0b3IucHJvdG90eXBlO1xuICBjaGlsZEN0b3IucHJvdG90eXBlID0gbmV3IHRlbXBDdG9yKCk7XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY2hpbGRDdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNoaWxkQ3RvcjtcblxuICAvKipcbiAgICogQ2FsbHMgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci9tZXRob2QuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgaWYgeW91IHVzZSBnb29nLmluaGVyaXRzIHRvXG4gICAqIGV4cHJlc3MgaW5oZXJpdGFuY2UgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGNsYXNzZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgZ29vZy5iYXNlIGFuZCBmb3Igc3VwZXJDbGFzc19cbiAgICogcHJvcGVydHkgZGVmaW5lZCBpbiBjaGlsZEN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gbWUgU2hvdWxkIGFsd2F5cyBiZSBcInRoaXNcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG1ldGhvZCBuYW1lIHRvIGNhbGwuIENhbGxpbmdcbiAgICogICAgIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgY2FuIGJlIGRvbmUgd2l0aCB0aGUgc3BlY2lhbCBzdHJpbmdcbiAgICogICAgICdjb25zdHJ1Y3RvcicuXG4gICAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHN1cGVyY2xhc3NcbiAgICogICAgIG1ldGhvZC9jb25zdHJ1Y3Rvci5cbiAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgc3VwZXJjbGFzcyBtZXRob2QvY29uc3RydWN0b3IuXG4gICAqL1xuICBjaGlsZEN0b3IuYmFzZSA9IGZ1bmN0aW9uKG1lLCBtZXRob2ROYW1lLCB2YXJfYXJncykge1xuICAgIC8vIENvcHlpbmcgdXNpbmcgbG9vcCB0byBhdm9pZCBkZW9wIGR1ZSB0byBwYXNzaW5nIGFyZ3VtZW50cyBvYmplY3QgdG9cbiAgICAvLyBmdW5jdGlvbi4gVGhpcyBpcyBmYXN0ZXIgaW4gbWFueSBKUyBlbmdpbmVzIGFzIG9mIGxhdGUgMjAxNC5cbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMik7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDJdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Q3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0uYXBwbHkobWUsIGFyZ3MpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIEFsbG93IGZvciBhbGlhc2luZyB3aXRoaW4gc2NvcGUgZnVuY3Rpb25zLiAgVGhpcyBmdW5jdGlvbiBleGlzdHMgZm9yXG4gKiB1bmNvbXBpbGVkIGNvZGUgLSBpbiBjb21waWxlZCBjb2RlIHRoZSBjYWxscyB3aWxsIGJlIGlubGluZWQgYW5kIHRoZSBhbGlhc2VzXG4gKiBhcHBsaWVkLiAgSW4gdW5jb21waWxlZCBjb2RlIHRoZSBmdW5jdGlvbiBpcyBzaW1wbHkgcnVuIHNpbmNlIHRoZSBhbGlhc2VzIGFzXG4gKiB3cml0dGVuIGFyZSB2YWxpZCBKYXZhU2NyaXB0LlxuICpcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGNhbGwuICBUaGlzIGZ1bmN0aW9uIGNhbiBjb250YWluIGFsaWFzZXNcbiAqICAgICB0byBuYW1lc3BhY2VzIChlLmcuIFwidmFyIGRvbSA9IGdvb2cuZG9tXCIpIG9yIGNsYXNzZXNcbiAqICAgICAoZS5nLiBcInZhciBUaW1lciA9IGdvb2cuVGltZXJcIikuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5tb2R1bGUgaW5zdGVhZC5cbiAqL1xuZ29vZy5zY29wZSA9IGZ1bmN0aW9uKGZuKSB7XG4gIGlmIChnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvb2cuc2NvcGUgaXMgbm90IHN1cHBvcnRlZCB3aXRoaW4gYSBtb2R1bGUuJyk7XG4gIH1cbiAgZm4uY2FsbChnb29nLmdsb2JhbCk7XG59O1xuXG5cbi8qXG4gKiBUbyBzdXBwb3J0IHVuY29tcGlsZWQsIHN0cmljdCBtb2RlIGJ1bmRsZXMgdGhhdCB1c2UgZXZhbCB0byBkaXZpZGUgc291cmNlXG4gKiBsaWtlIHNvOlxuICogICAgZXZhbCgnc29tZVNvdXJjZTsvLyMgc291cmNlVXJsIHNvdXJjZWZpbGUuanMnKTtcbiAqIFdlIG5lZWQgdG8gZXhwb3J0IHRoZSBnbG9iYWxseSBkZWZpbmVkIHN5bWJvbHMgXCJnb29nXCIgYW5kIFwiQ09NUElMRURcIi5cbiAqIEV4cG9ydGluZyBcImdvb2dcIiBicmVha3MgdGhlIGNvbXBpbGVyIG9wdGltaXphdGlvbnMsIHNvIHdlIHJlcXVpcmVkIHRoYXRcbiAqIGJlIGRlZmluZWQgZXh0ZXJuYWxseS5cbiAqIE5PVEU6IFdlIGRvbid0IHVzZSBnb29nLmV4cG9ydFN5bWJvbCBoZXJlIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyXG4gKiBleHRlcm4gZ2VuZXJhdGlvbiB3aGVuIHRoYXQgY29tcGlsZXIgb3B0aW9uIGlzIGVuYWJsZWQuXG4gKi9cbmlmICghQ09NUElMRUQpIHtcbiAgZ29vZy5nbG9iYWxbJ0NPTVBJTEVEJ10gPSBDT01QSUxFRDtcbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gZ29vZy5kZWZpbmVDbGFzcyBpbXBsZW1lbnRhdGlvblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSByZXN0cmljdGVkIGZvcm0gb2YgYSBDbG9zdXJlIFwiY2xhc3NcIjpcbiAqICAgLSBmcm9tIHRoZSBjb21waWxlcidzIHBlcnNwZWN0aXZlLCB0aGUgaW5zdGFuY2UgcmV0dXJuZWQgZnJvbSB0aGVcbiAqICAgICBjb25zdHJ1Y3RvciBpcyBzZWFsZWQgKG5vIG5ldyBwcm9wZXJ0aWVzIG1heSBiZSBhZGRlZCkuICBUaGlzIGVuYWJsZXNcbiAqICAgICBiZXR0ZXIgY2hlY2tzLlxuICogICAtIHRoZSBjb21waWxlciB3aWxsIHJld3JpdGUgdGhpcyBkZWZpbml0aW9uIHRvIGEgZm9ybSB0aGF0IGlzIG9wdGltYWxcbiAqICAgICBmb3IgdHlwZSBjaGVja2luZyBhbmQgb3B0aW1pemF0aW9uIChpbml0aWFsbHkgdGhpcyB3aWxsIGJlIGEgbW9yZVxuICogICAgIHRyYWRpdGlvbmFsIGZvcm0pLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN1cGVyQ2xhc3MgVGhlIHN1cGVyY2xhc3MsIE9iamVjdCBvciBudWxsLlxuICogQHBhcmFtIHtnb29nLmRlZmluZUNsYXNzLkNsYXNzRGVzY3JpcHRvcn0gZGVmXG4gKiAgICAgQW4gb2JqZWN0IGxpdGVyYWwgZGVzY3JpYmluZ1xuICogICAgIHRoZSBjbGFzcy4gIEl0IG1heSBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgICBcImNvbnN0cnVjdG9yXCI6IHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICogICAgIFwic3RhdGljc1wiOiBhbiBvYmplY3QgbGl0ZXJhbCBjb250YWluaW5nIG1ldGhvZHMgdG8gYWRkIHRvIHRoZSBjb25zdHJ1Y3RvclxuICogICAgICAgIGFzIFwic3RhdGljXCIgbWV0aG9kcyBvciBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBjb25zdHJ1Y3RvclxuICogICAgICAgIGZ1bmN0aW9uIGFzIGl0cyBvbmx5IHBhcmFtZXRlciB0byB3aGljaCBzdGF0aWMgcHJvcGVydGllcyBjYW5cbiAqICAgICAgICBiZSBhZGRlZC5cbiAqICAgICBhbGwgb3RoZXIgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZS5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIGNsYXNzIGNvbnN0cnVjdG9yLlxuICogQGRlcHJlY2F0ZWQgVXNlIEVDTUFTY3JpcHQgY2xhc3Mgc3ludGF4IGluc3RlYWQuXG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MgPSBmdW5jdGlvbihzdXBlckNsYXNzLCBkZWYpIHtcbiAgLy8gVE9ETyhqb2hubGVueik6IGNvbnNpZGVyIG1ha2luZyB0aGUgc3VwZXJDbGFzcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIuXG4gIHZhciBjb25zdHJ1Y3RvciA9IGRlZi5jb25zdHJ1Y3RvcjtcbiAgdmFyIHN0YXRpY3MgPSBkZWYuc3RhdGljcztcbiAgLy8gV3JhcCB0aGUgY29uc3RydWN0b3IgcHJpb3IgdG8gc2V0dGluZyB1cCB0aGUgcHJvdG90eXBlIGFuZCBzdGF0aWMgbWV0aG9kcy5cbiAgaWYgKCFjb25zdHJ1Y3RvciB8fCBjb25zdHJ1Y3RvciA9PSBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnY2Fubm90IGluc3RhbnRpYXRlIGFuIGludGVyZmFjZSAobm8gY29uc3RydWN0b3IgZGVmaW5lZCkuJyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjbHMgPSBnb29nLmRlZmluZUNsYXNzLmNyZWF0ZVNlYWxpbmdDb25zdHJ1Y3Rvcl8oY29uc3RydWN0b3IsIHN1cGVyQ2xhc3MpO1xuICBpZiAoc3VwZXJDbGFzcykge1xuICAgIGdvb2cuaW5oZXJpdHMoY2xzLCBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgdGhlIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIGNvcGllZCB0byB0aGUgcHJvdG90eXBlLlxuICBkZWxldGUgZGVmLmNvbnN0cnVjdG9yO1xuICBkZWxldGUgZGVmLnN0YXRpY3M7XG5cbiAgZ29vZy5kZWZpbmVDbGFzcy5hcHBseVByb3BlcnRpZXNfKGNscy5wcm90b3R5cGUsIGRlZik7XG4gIGlmIChzdGF0aWNzICE9IG51bGwpIHtcbiAgICBpZiAoc3RhdGljcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICBzdGF0aWNzKGNscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdvb2cuZGVmaW5lQ2xhc3MuYXBwbHlQcm9wZXJ0aWVzXyhjbHMsIHN0YXRpY3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgY29uc3RydWN0b3I6ICghRnVuY3Rpb258dW5kZWZpbmVkKSxcbiAqICAgc3RhdGljczogKE9iamVjdHx1bmRlZmluZWR8ZnVuY3Rpb24oRnVuY3Rpb24pOnZvaWQpXG4gKiB9fVxuICovXG5nb29nLmRlZmluZUNsYXNzLkNsYXNzRGVzY3JpcHRvcjtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGluc3RhbmNlcyByZXR1cm5lZCBieSBnb29nLmRlZmluZUNsYXNzIHNob3VsZFxuICogICAgIGJlIHNlYWxlZCB3aGVuIHBvc3NpYmxlLlxuICpcbiAqIFdoZW4gc2VhbGluZyBpcyBkaXNhYmxlZCB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gd2lsbCBub3QgYmUgd3JhcHBlZCBieVxuICogZ29vZy5kZWZpbmVDbGFzcywgbWFraW5nIGl0IGluY29tcGF0aWJsZSB3aXRoIEVTNiBjbGFzcyBtZXRob2RzLlxuICovXG5nb29nLmRlZmluZUNsYXNzLlNFQUxfQ0xBU1NfSU5TVEFOQ0VTID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUycsIGdvb2cuREVCVUcpO1xuXG5cbi8qKlxuICogSWYgZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUyBpcyBlbmFibGVkIGFuZCBPYmplY3Quc2VhbCBpc1xuICogZGVmaW5lZCwgdGhpcyBmdW5jdGlvbiB3aWxsIHdyYXAgdGhlIGNvbnN0cnVjdG9yIGluIGEgZnVuY3Rpb24gdGhhdCBzZWFscyB0aGVcbiAqIHJlc3VsdHMgb2YgdGhlIHByb3ZpZGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjdHIgVGhlIGNvbnN0cnVjdG9yIHdob3NlIHJlc3VsdHMgbWF5YmUgYmUgc2VhbGVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJDbGFzcyBUaGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIHJlcGxhY2VtZW50IGNvbnN0cnVjdG9yLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5kZWZpbmVDbGFzcy5jcmVhdGVTZWFsaW5nQ29uc3RydWN0b3JfID0gZnVuY3Rpb24oY3RyLCBzdXBlckNsYXNzKSB7XG4gIGlmICghZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUykge1xuICAgIC8vIERvIG5vdyB3cmFwIHRoZSBjb25zdHJ1Y3RvciB3aGVuIHNlYWxpbmcgaXMgZGlzYWJsZWQuIEFuZ3VsYXIgY29kZVxuICAgIC8vIGRlcGVuZHMgb24gdGhpcyBmb3IgaW5qZWN0aW9uIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgcmV0dXJuIGN0cjtcbiAgfVxuXG4gIC8vIE5PVEU6IFRoZSBzZWFsaW5nIGJlaGF2aW9yIGhhcyBiZWVuIHJlbW92ZWRcblxuICAvKipcbiAgICogQHRoaXMge09iamVjdH1cbiAgICogQHJldHVybiB7P31cbiAgICovXG4gIHZhciB3cmFwcGVkQ3RyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gRG9uJ3Qgc2VhbCBhbiBpbnN0YW5jZSBvZiBhIHN1YmNsYXNzIHdoZW4gaXQgY2FsbHMgdGhlIGNvbnN0cnVjdG9yIG9mXG4gICAgLy8gaXRzIHN1cGVyIGNsYXNzIGFzIHRoZXJlIGlzIG1vc3QgbGlrZWx5IHN0aWxsIHNldHVwIHRvIGRvLlxuICAgIHZhciBpbnN0YW5jZSA9IGN0ci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgaW5zdGFuY2VbZ29vZy5VSURfUFJPUEVSVFlfXSA9IGluc3RhbmNlW2dvb2cuVUlEX1BST1BFUlRZX107XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZWRDdHI7XG59O1xuXG5cblxuLy8gVE9ETyhqb2hubGVueik6IHNoYXJlIHRoZXNlIHZhbHVlcyB3aXRoIHRoZSBnb29nLm9iamVjdFxuLyoqXG4gKiBUaGUgbmFtZXMgb2YgdGhlIGZpZWxkcyB0aGF0IGFyZSBkZWZpbmVkIG9uIE9iamVjdC5wcm90b3R5cGUuXG4gKiBAdHlwZSB7IUFycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0XG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MuT0JKRUNUX1BST1RPVFlQRV9GSUVMRFNfID0gW1xuICAnY29uc3RydWN0b3InLCAnaGFzT3duUHJvcGVydHknLCAnaXNQcm90b3R5cGVPZicsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsICd0b1N0cmluZycsICd2YWx1ZU9mJ1xuXTtcblxuXG4vLyBUT0RPKGpvaG5sZW56KTogc2hhcmUgdGhpcyBmdW5jdGlvbiB3aXRoIHRoZSBnb29nLm9iamVjdFxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHRhcmdldCBUaGUgb2JqZWN0IHRvIGFkZCBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHshT2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZGVmaW5lQ2xhc3MuYXBwbHlQcm9wZXJ0aWVzXyA9IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIFRPRE8oam9obmxlbnopOiB1cGRhdGUgdGhpcyB0byBzdXBwb3J0IEVTNSBnZXR0ZXJzL3NldHRlcnNcblxuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICAvLyBGb3IgSUUgdGhlIGZvci1pbi1sb29wIGRvZXMgbm90IGNvbnRhaW4gYW55IHByb3BlcnRpZXMgdGhhdCBhcmUgbm90XG4gIC8vIGVudW1lcmFibGUgb24gdGhlIHByb3RvdHlwZSBvYmplY3QgKGZvciBleGFtcGxlIGlzUHJvdG90eXBlT2YgZnJvbVxuICAvLyBPYmplY3QucHJvdG90eXBlKSBhbmQgaXQgd2lsbCBhbHNvIG5vdCBpbmNsdWRlICdyZXBsYWNlJyBvbiBvYmplY3RzIHRoYXRcbiAgLy8gZXh0ZW5kIFN0cmluZyBhbmQgY2hhbmdlICdyZXBsYWNlJyAobm90IHRoYXQgaXQgaXMgY29tbW9uIGZvciBhbnlvbmUgdG9cbiAgLy8gZXh0ZW5kIGFueXRoaW5nIGV4Y2VwdCBPYmplY3QpLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGdvb2cuZGVmaW5lQ2xhc3MuT0JKRUNUX1BST1RPVFlQRV9GSUVMRFNfLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gZ29vZy5kZWZpbmVDbGFzcy5PQkpFQ1RfUFJPVE9UWVBFX0ZJRUxEU19baV07XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmlkZW50aXR5XyA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHM7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBUcnVzdGVkIFR5cGVzIHBvbGljeSBpZiBUcnVzdGVkIFR5cGVzIGFyZSBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gKiBUaGUgcG9saWN5IGp1c3QgYmxlc3NlcyBhbnkgc3RyaW5nIGFzIGEgVHJ1c3RlZCBUeXBlLiBJdCBpcyBub3QgdmlzaWJpbGl0eVxuICogcmVzdHJpY3RlZCBiZWNhdXNlIGFueW9uZSBjYW4gYWxzbyBjYWxsIHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3kgZGlyZWN0bHkuXG4gKiBIb3dldmVyLCB0aGUgYWxsb3dlZCBuYW1lcyBzaG91bGQgYmUgcmVzdHJpY3RlZCBieSBhIEhUVFAgaGVhZGVyIGFuZCB0aGVcbiAqIHJlZmVyZW5jZSB0byB0aGUgY3JlYXRlZCBwb2xpY3kgc2hvdWxkIGJlIHZpc2liaWxpdHkgcmVzdHJpY3RlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHs/VHJ1c3RlZFR5cGVQb2xpY3l9XG4gKi9cbmdvb2cuY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5ID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcG9saWN5ID0gbnVsbDtcbiAgdmFyIHBvbGljeUZhY3RvcnkgPSBnb29nLmdsb2JhbC50cnVzdGVkVHlwZXM7XG4gIGlmICghcG9saWN5RmFjdG9yeSB8fCAhcG9saWN5RmFjdG9yeS5jcmVhdGVQb2xpY3kpIHtcbiAgICByZXR1cm4gcG9saWN5O1xuICB9XG4gIC8vIHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3kgdGhyb3dzIGlmIGNhbGxlZCB3aXRoIGEgbmFtZSB0aGF0IGlzIGFscmVhZHlcbiAgLy8gcmVnaXN0ZXJlZCwgZXZlbiBpbiByZXBvcnQtb25seSBtb2RlLiBVbnRpbCB0aGUgQVBJIGNoYW5nZXMsIGNhdGNoIHRoZVxuICAvLyBlcnJvciBub3QgdG8gYnJlYWsgdGhlIGFwcGxpY2F0aW9ucyBmdW5jdGlvbmFsbHkuIEluIHN1Y2ggY2FzZSwgdGhlIGNvZGVcbiAgLy8gd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgcmVndWxhciBTYWZlIFR5cGVzLlxuICAvLyBUT0RPKGtvdG8pOiBSZW1vdmUgY2F0Y2hpbmcgb25jZSBjcmVhdGVQb2xpY3kgQVBJIHN0b3BzIHRocm93aW5nLlxuICB0cnkge1xuICAgIHBvbGljeSA9IHBvbGljeUZhY3RvcnkuY3JlYXRlUG9saWN5KG5hbWUsIHtcbiAgICAgIGNyZWF0ZUhUTUw6IGdvb2cuaWRlbnRpdHlfLFxuICAgICAgY3JlYXRlU2NyaXB0OiBnb29nLmlkZW50aXR5XyxcbiAgICAgIGNyZWF0ZVNjcmlwdFVSTDogZ29vZy5pZGVudGl0eV9cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGdvb2cubG9nVG9Db25zb2xlXyhlLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBwb2xpY3k7XG59O1xuXG4vLyBUaGVyZSdzIGEgYnVnIGluIHRoZSBjb21waWxlciB3aGVyZSB3aXRob3V0IGNvbGxhcHNlIHByb3BlcnRpZXMgdGhlXG4vLyBDbG9zdXJlIG5hbWVzcGFjZSBkZWZpbmVzIGRvIG5vdCBndWFyZCBjb2RlIGNvcnJlY3RseS4gVG8gaGVscCByZWR1Y2UgY29kZVxuLy8gc2l6ZSBhbHNvIGNoZWNrIGZvciAhQ09NUElMRUQgZXZlbiB0aG91Z2ggaXQgcmVkdW5kYW50IHVudGlsIHRoaXMgaXMgZml4ZWQuXG5pZiAoIUNPTVBJTEVEICYmIGdvb2cuREVQRU5ERU5DSUVTX0VOQUJMRUQpIHtcblxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBkZXRlY3Qgd2hldGhlciB0aGUgY3VycmVudCBicm93c2VyIGlzIEVkZ2UsIGJhc2VkIG9uIHRoZSB1c2VyXG4gICAqIGFnZW50LiBUaGlzIG1hdGNoZXMgb25seSBwcmUtQ2hyb21pdW0gRWRnZS5cbiAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS93ZWItcGxhdGZvcm0vdXNlci1hZ2VudC1zdHJpbmdcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY3VycmVudCBicm93c2VyIGlzIEVkZ2UuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmlzRWRnZV8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlckFnZW50ID0gZ29vZy5nbG9iYWwubmF2aWdhdG9yICYmIGdvb2cuZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQgP1xuICAgICAgICBnb29nLmdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50IDpcbiAgICAgICAgJyc7XG4gICAgdmFyIGVkZ2VSZSA9IC9FZGdlXFwvKFxcZCspKFxcLlxcZCkqL2k7XG4gICAgcmV0dXJuICEhdXNlckFnZW50Lm1hdGNoKGVkZ2VSZSk7XG4gIH07XG5cblxuICAvKipcbiAgICogVHJpZXMgdG8gZGV0ZWN0IHdoZXRoZXIgaXMgaW4gdGhlIGNvbnRleHQgb2YgYW4gSFRNTCBkb2N1bWVudC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBpdCBsb29rcyBsaWtlIEhUTUwgZG9jdW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmluSHRtbERvY3VtZW50XyA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7IURvY3VtZW50fSAqL1xuICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcbiAgICByZXR1cm4gZG9jICE9IG51bGwgJiYgJ3dyaXRlJyBpbiBkb2M7ICAvLyBYVUxEb2N1bWVudCBtaXNzZXMgd3JpdGUuXG4gIH07XG5cblxuICAvKipcbiAgICogV2UnZCBsaWtlIHRvIGNoZWNrIGZvciBpZiB0aGUgZG9jdW1lbnQgcmVhZHlTdGF0ZSBpcyAnbG9hZGluZyc7IGhvd2V2ZXJcbiAgICogdGhlcmUgYXJlIGJ1Z3Mgb24gSUUgMTAgYW5kIGJlbG93IHdoZXJlIHRoZSByZWFkeVN0YXRlIGJlaW5nIGFueXRoaW5nIG90aGVyXG4gICAqIHRoYW4gJ2NvbXBsZXRlJyBpcyBub3QgcmVsaWFibGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLmlzRG9jdW1lbnRMb2FkaW5nXyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGF0dGFjaEV2ZW50IGlzIGF2YWlsYWJsZSBvbiBJRSA2IHRocnUgMTAgb25seSwgYW5kIHRodXMgY2FuIGJlIHVzZWQgdG9cbiAgICAvLyBkZXRlY3QgdGhvc2UgYnJvd3NlcnMuXG4gICAgLyoqIEB0eXBlIHshSFRNTERvY3VtZW50fSAqL1xuICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcbiAgICByZXR1cm4gZG9jLmF0dGFjaEV2ZW50ID8gZG9jLnJlYWR5U3RhdGUgIT0gJ2NvbXBsZXRlJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYy5yZWFkeVN0YXRlID09ICdsb2FkaW5nJztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBkZXRlY3QgdGhlIGJhc2UgcGF0aCBvZiBiYXNlLmpzIHNjcmlwdCB0aGF0IGJvb3RzdHJhcHMgQ2xvc3VyZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuZmluZEJhc2VQYXRoXyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0JBU0VfUEFUSCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgLy8gQW50aSBET00tY2xvYmJlcmluZyBydW50aW1lIGNoZWNrIChiLzM3NzM2NTc2KS5cbiAgICAgICAgdHlwZW9mIGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIID09PSAnc3RyaW5nJykge1xuICAgICAgZ29vZy5iYXNlUGF0aCA9IGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoIWdvb2cuaW5IdG1sRG9jdW1lbnRfKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovXG4gICAgdmFyIGRvYyA9IGdvb2cuZ2xvYmFsLmRvY3VtZW50O1xuICAgIC8vIElmIHdlIGhhdmUgYSBjdXJyZW50U2NyaXB0IGF2YWlsYWJsZSwgdXNlIGl0IGV4Y2x1c2l2ZWx5LlxuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gZG9jLmN1cnJlbnRTY3JpcHQ7XG4gICAgaWYgKGN1cnJlbnRTY3JpcHQpIHtcbiAgICAgIHZhciBzY3JpcHRzID0gW2N1cnJlbnRTY3JpcHRdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU0NSSVBUJyk7XG4gICAgfVxuICAgIC8vIFNlYXJjaCBiYWNrd2FyZHMgc2luY2UgdGhlIGN1cnJlbnQgc2NyaXB0IGlzIGluIGFsbW9zdCBhbGwgY2FzZXMgdGhlIG9uZVxuICAgIC8vIHRoYXQgaGFzIGJhc2UuanMuXG4gICAgZm9yICh2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHZhciBzY3JpcHQgPSAvKiogQHR5cGUgeyFIVE1MU2NyaXB0RWxlbWVudH0gKi8gKHNjcmlwdHNbaV0pO1xuICAgICAgdmFyIHNyYyA9IHNjcmlwdC5zcmM7XG4gICAgICB2YXIgcW1hcmsgPSBzcmMubGFzdEluZGV4T2YoJz8nKTtcbiAgICAgIHZhciBsID0gcW1hcmsgPT0gLTEgPyBzcmMubGVuZ3RoIDogcW1hcms7XG4gICAgICBpZiAoc3JjLnN1YnN0cihsIC0gNywgNykgPT0gJ2Jhc2UuanMnKSB7XG4gICAgICAgIGdvb2cuYmFzZVBhdGggPSBzcmMuc3Vic3RyKDAsIGwgLSA3KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBnb29nLmZpbmRCYXNlUGF0aF8oKTtcblxuICAvKiogQHN0cnVjdCBAY29uc3RydWN0b3IgQGZpbmFsICovXG4gIGdvb2cuVHJhbnNwaWxlciA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAcHJpdmF0ZSB7P09iamVjdDxzdHJpbmcsIGJvb2xlYW4+fSAqL1xuICAgIHRoaXMucmVxdWlyZXNUcmFuc3BpbGF0aW9uXyA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlIHtzdHJpbmd9ICovXG4gICAgdGhpcy50cmFuc3BpbGF0aW9uVGFyZ2V0XyA9IGdvb2cuVFJBTlNQSUxFX1RPX0xBTkdVQUdFO1xuICB9O1xuICAvKipcbiAgICogUmV0dXJucyBhIG5ld2x5IGNyZWF0ZWQgbWFwIGZyb20gbGFuZ3VhZ2UgbW9kZSBzdHJpbmcgdG8gYSBib29sZWFuXG4gICAqIGluZGljYXRpbmcgd2hldGhlciB0cmFuc3BpbGF0aW9uIHNob3VsZCBiZSBkb25lIGZvciB0aGF0IG1vZGUgYXMgd2VsbCBhc1xuICAgKiB0aGUgaGlnaGVzdCBsZXZlbCBsYW5ndWFnZSB0aGF0IHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMuXG4gICAqXG4gICAqIEd1YXJhbnRlZWQgaW52YXJpYW50OlxuICAgKiBGb3IgYW55IHR3byBtb2RlcywgbDEgYW5kIGwyIHdoZXJlIGwyIGlzIGEgbmV3ZXIgbW9kZSB0aGFuIGwxLFxuICAgKiBgbWFwW2wxXSA9PSB0cnVlYCBpbXBsaWVzIHRoYXQgYG1hcFtsMl0gPT0gdHJ1ZWAuXG4gICAqXG4gICAqIE5vdGUgdGhpcyBtZXRob2QgaXMgZXh0cmFjdGVkIGFuZCB1c2VkIGVsc2V3aGVyZSwgc28gaXQgY2Fubm90IHJlbHkgb25cbiAgICogYW55dGhpbmcgZXh0ZXJuYWwgKGl0IHNob3VsZCBlYXNpbHkgYmUgYWJsZSB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIGFcbiAgICogc3RhbmRhbG9uZSwgdG9wIGxldmVsIGZ1bmN0aW9uKS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7e1xuICAgKiAgIHRhcmdldDogc3RyaW5nLFxuICAgKiAgIG1hcDogIU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+XG4gICAqIH19XG4gICAqL1xuICBnb29nLlRyYW5zcGlsZXIucHJvdG90eXBlLmNyZWF0ZVJlcXVpcmVzVHJhbnNwaWxhdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJhbnNwaWxhdGlvblRhcmdldCA9ICdlczMnO1xuICAgIHZhciAvKiogIU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+ICovIHJlcXVpcmVzVHJhbnNwaWxhdGlvbiA9IHsnZXMzJzogZmFsc2V9O1xuICAgIHZhciB0cmFuc3BpbGF0aW9uUmVxdWlyZWRGb3JBbGxMYXRlck1vZGVzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGVudHJ5IHRvIHJlcXVpcmVzVHJhbnNwbGlhdGlvbiBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIG1vZGUuXG4gICAgICpcbiAgICAgKiBJTVBPUlRBTlQ6IENhbGxzIG11c3QgYmUgbWFkZSBpbiBvcmRlciBmcm9tIG9sZGVzdCB0byBuZXdlc3QgbGFuZ3VhZ2VcbiAgICAgKiBtb2RlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlTmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogYm9vbGVhbn0gaXNTdXBwb3J0ZWQgUmV0dXJucyB0cnVlIGlmIHRoZSBKUyBlbmdpbmVcbiAgICAgKiAgICAgc3VwcG9ydHMgdGhlIGdpdmVuIG1vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkTmV3ZXJMYW5ndWFnZVRyYW5zcGlsYXRpb25DaGVjayhtb2RlTmFtZSwgaXNTdXBwb3J0ZWQpIHtcbiAgICAgIGlmICh0cmFuc3BpbGF0aW9uUmVxdWlyZWRGb3JBbGxMYXRlck1vZGVzKSB7XG4gICAgICAgIHJlcXVpcmVzVHJhbnNwaWxhdGlvblttb2RlTmFtZV0gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChpc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIHRyYW5zcGlsYXRpb25UYXJnZXQgPSBtb2RlTmFtZTtcbiAgICAgICAgcmVxdWlyZXNUcmFuc3BpbGF0aW9uW21vZGVOYW1lXSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWlyZXNUcmFuc3BpbGF0aW9uW21vZGVOYW1lXSA9IHRydWU7XG4gICAgICAgIHRyYW5zcGlsYXRpb25SZXF1aXJlZEZvckFsbExhdGVyTW9kZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvZXMgdGhlIGdpdmVuIGNvZGUgZXZhbHVhdGUgd2l0aG91dCBzeW50YXggZXJyb3JzIGFuZCByZXR1cm4gYSB0cnV0aHlcbiAgICAgKiByZXN1bHQ/XG4gICAgICovXG4gICAgZnVuY3Rpb24gLyoqIGJvb2xlYW4gKi8gZXZhbENoZWNrKC8qKiBzdHJpbmcgKi8gY29kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICEhZXZhbChnb29nLkNMT1NVUkVfRVZBTF9QUkVGSUxURVJfLmNyZWF0ZVNjcmlwdChjb2RlKSk7XG4gICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZGVudGlmeSBFUzMtb25seSBicm93c2VycyBieSB0aGVpciBpbmNvcnJlY3QgdHJlYXRtZW50IG9mIGNvbW1hcy5cbiAgICBhZGROZXdlckxhbmd1YWdlVHJhbnNwaWxhdGlvbkNoZWNrKCdlczUnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmFsQ2hlY2soJ1sxLF0ubGVuZ3RoPT0xJyk7XG4gICAgfSk7XG4gICAgYWRkTmV3ZXJMYW5ndWFnZVRyYW5zcGlsYXRpb25DaGVjaygnZXM2JywgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBFZGdlIGhhcyBhIG5vbi1kZXRlcm1pbmlzdGljIChpLmUuLCBub3QgcmVwcm9kdWNpYmxlKSBidWcgd2l0aCBFUzY6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L0NoYWtyYUNvcmUvaXNzdWVzLzE0OTYuXG4gICAgICBpZiAoZ29vZy5pc0VkZ2VfKCkpIHtcbiAgICAgICAgLy8gVGhlIFJlZmxlY3QuY29uc3RydWN0IHRlc3QgYmVsb3cgaXMgZmxha3kgb24gRWRnZS4gSXQgY2FuIHNvbWV0aW1lc1xuICAgICAgICAvLyBwYXNzIG9yIGZhaWwgb24gNDAgMTUuMTUwNjMsIHNvIGp1c3QgZXhpdCBlYXJseSBmb3IgRWRnZSBhbmQgdHJlYXRcbiAgICAgICAgLy8gaXQgYXMgRVM1LiBVbnRpbCB3ZSdyZSBvbiBhIG1vcmUgdXAgdG8gZGF0ZSB2ZXJzaW9uIGp1c3QgYWx3YXlzIHVzZVxuICAgICAgICAvLyBFUzUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L0NoYWtyYUNvcmUvaXNzdWVzLzMyMTcuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRlc3QgZXM2OiBbRkY1MCAoPyksIEVkZ2UgMTQgKD8pLCBDaHJvbWUgNTBdXG4gICAgICAvLyAgIChhKSBkZWZhdWx0IHBhcmFtcyAoc3BlY2lmaWNhbGx5IHNoYWRvd2luZyBsb2NhbHMpLFxuICAgICAgLy8gICAoYikgZGVzdHJ1Y3R1cmluZywgKGMpIGJsb2NrLXNjb3BlZCBmdW5jdGlvbnMsXG4gICAgICAvLyAgIChkKSBmb3Itb2YgKGNvbnN0KSwgKGUpIG5ldy50YXJnZXQvUmVmbGVjdC5jb25zdHJ1Y3RcbiAgICAgIHZhciBlczZmdWxsVGVzdCA9XG4gICAgICAgICAgJ2NsYXNzIFh7Y29uc3RydWN0b3IoKXtpZihuZXcudGFyZ2V0IT1TdHJpbmcpdGhyb3cgMTt0aGlzLng9NDJ9fScgK1xuICAgICAgICAgICdsZXQgcT1SZWZsZWN0LmNvbnN0cnVjdChYLFtdLFN0cmluZyk7aWYocS54IT00Mnx8IShxIGluc3RhbmNlb2YgJyArXG4gICAgICAgICAgJ1N0cmluZykpdGhyb3cgMTtmb3IoY29uc3QgYSBvZlsyLDNdKXtpZihhPT0yKWNvbnRpbnVlO2Z1bmN0aW9uICcgK1xuICAgICAgICAgICdmKHo9e2F9KXtsZXQgYT0wO3JldHVybiB6LmF9e2Z1bmN0aW9uIGYoKXtyZXR1cm4gMDt9fXJldHVybiBmKCknICtcbiAgICAgICAgICAnPT0zfSc7XG5cbiAgICAgIHJldHVybiBldmFsQ2hlY2soJygoKT0+e1widXNlIHN0cmljdFwiOycgKyBlczZmdWxsVGVzdCArICd9KSgpJyk7XG4gICAgfSk7XG4gICAgLy8gKiogYW5kICoqPSBhcmUgdGhlIG9ubHkgbmV3IGZlYXR1cmVzIGluICdlczcnXG4gICAgYWRkTmV3ZXJMYW5ndWFnZVRyYW5zcGlsYXRpb25DaGVjaygnZXM3JywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZhbENoZWNrKCcyKiozPT04Jyk7XG4gICAgfSk7XG4gICAgLy8gYXN5bmMgZnVuY3Rpb25zIGFyZSB0aGUgb25seSBuZXcgZmVhdHVyZXMgaW4gJ2VzOCdcbiAgICBhZGROZXdlckxhbmd1YWdlVHJhbnNwaWxhdGlvbkNoZWNrKCdlczgnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmFsQ2hlY2soJ2FzeW5jKCk9PjEsMScpO1xuICAgIH0pO1xuICAgIGFkZE5ld2VyTGFuZ3VhZ2VUcmFuc3BpbGF0aW9uQ2hlY2soJ2VzOScsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2YWxDaGVjaygnKHsuLi5yZXN0fT17fSksMScpO1xuICAgIH0pO1xuICAgIC8vIG9wdGlvbmFsIGNhdGNoIGJpbmRpbmcsIHVuZXNjYXBlZCB1bmljb2RlIHBhcmFncmFwaCBzZXBhcmF0b3IgaW4gc3RyaW5nc1xuICAgIGFkZE5ld2VyTGFuZ3VhZ2VUcmFuc3BpbGF0aW9uQ2hlY2soJ2VzXzIwMTknLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmFsQ2hlY2soJ2xldCByO3RyeXtyPVwiXFx1MjAyOVwifWNhdGNoe307cicpO1xuICAgIH0pO1xuICAgIC8vIG9wdGlvbmFsIGNoYWluaW5nLCBudWxsaXNoIGNvYWxlc2NpbmdcbiAgICAvLyB1bnRlc3RlZC91bnN1cHBvcnRlZDogYmlnaW50LCBpbXBvcnQgbWV0YVxuICAgIGFkZE5ld2VyTGFuZ3VhZ2VUcmFuc3BpbGF0aW9uQ2hlY2soJ2VzXzIwMjAnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmFsQ2hlY2soJ251bGw/Lng/PzEnKTtcbiAgICB9KTtcbiAgICBhZGROZXdlckxhbmd1YWdlVHJhbnNwaWxhdGlvbkNoZWNrKCdlc19uZXh0JywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7ICAvLyBhc3N1bWUgaXQgYWx3YXlzIG5lZWQgdG8gdHJhbnNwaWxlXG4gICAgfSk7XG4gICAgcmV0dXJuIHt0YXJnZXQ6IHRyYW5zcGlsYXRpb25UYXJnZXQsIG1hcDogcmVxdWlyZXNUcmFuc3BpbGF0aW9ufTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIGxhbmd1YWdlIG5lZWRzIHRvIGJlIHRyYW5zcGlsZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gbW9kdWxlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnb29nLlRyYW5zcGlsZXIucHJvdG90eXBlLm5lZWRzVHJhbnNwaWxlID0gZnVuY3Rpb24obGFuZywgbW9kdWxlKSB7XG4gICAgaWYgKGdvb2cuVFJBTlNQSUxFID09ICdhbHdheXMnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGdvb2cuVFJBTlNQSUxFID09ICduZXZlcicpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnJlcXVpcmVzVHJhbnNwaWxhdGlvbl8pIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLmNyZWF0ZVJlcXVpcmVzVHJhbnNwaWxhdGlvbl8oKTtcbiAgICAgIHRoaXMucmVxdWlyZXNUcmFuc3BpbGF0aW9uXyA9IG9iai5tYXA7XG4gICAgICB0aGlzLnRyYW5zcGlsYXRpb25UYXJnZXRfID0gdGhpcy50cmFuc3BpbGF0aW9uVGFyZ2V0XyB8fCBvYmoudGFyZ2V0O1xuICAgIH1cbiAgICBpZiAobGFuZyBpbiB0aGlzLnJlcXVpcmVzVHJhbnNwaWxhdGlvbl8pIHtcbiAgICAgIGlmICh0aGlzLnJlcXVpcmVzVHJhbnNwaWxhdGlvbl9bbGFuZ10pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGdvb2cuaW5IdG1sRG9jdW1lbnRfKCkgJiYgbW9kdWxlID09ICdlczYnICYmXG4gICAgICAgICAgISgnbm9Nb2R1bGUnIGluIGdvb2cuZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGxhbmd1YWdlIG1vZGU6ICcgKyBsYW5nKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogTGF6aWx5IHJldHJpZXZlcyB0aGUgdHJhbnNwaWxlciBhbmQgYXBwbGllcyBpdCB0byB0aGUgc291cmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSBKUyBjb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIHRoZSBjb2RlLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc3BpbGVkIGNvZGUuXG4gICAqL1xuICBnb29nLlRyYW5zcGlsZXIucHJvdG90eXBlLnRyYW5zcGlsZSA9IGZ1bmN0aW9uKGNvZGUsIHBhdGgpIHtcbiAgICAvLyBUT0RPKGpvaG5wbGFpc3RlZCk6IFdlIHNob3VsZCBkZWxldGUgZ29vZy50cmFuc3BpbGVfIGFuZCBqdXN0IGhhdmUgdGhpc1xuICAgIC8vIGZ1bmN0aW9uLiBCdXQgdGhlcmUncyBzb21lIGNvbXBpbGUgZXJyb3IgYXRtIHdoZXJlIGdvb2cuZ2xvYmFsIGlzIGJlaW5nXG4gICAgLy8gc3RyaXBwZWQgaW5jb3JyZWN0bHkgd2l0aG91dCB0aGlzLlxuICAgIHJldHVybiBnb29nLnRyYW5zcGlsZV8oY29kZSwgcGF0aCwgdGhpcy50cmFuc3BpbGF0aW9uVGFyZ2V0Xyk7XG4gIH07XG5cblxuICAvKiogQHByaXZhdGUgQGZpbmFsIHshZ29vZy5UcmFuc3BpbGVyfSAqL1xuICBnb29nLnRyYW5zcGlsZXJfID0gbmV3IGdvb2cuVHJhbnNwaWxlcigpO1xuXG4gIC8qKlxuICAgKiBSZXdyaXRlcyBjbG9zaW5nIHNjcmlwdCB0YWdzIGluIGlucHV0IHRvIGF2b2lkIGVuZGluZyBhbiBlbmNsb3Npbmcgc2NyaXB0XG4gICAqIHRhZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLnByb3RlY3RTY3JpcHRUYWdfID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC88XFwvKFNDUklQVCkvaWcsICdcXFxceDNjLyQxJyk7XG4gIH07XG5cblxuICAvKipcbiAgICogQSBkZWJ1ZyBsb2FkZXIgaXMgcmVzcG9uc2libGUgZm9yIGRvd25sb2FkaW5nIGFuZCBleGVjdXRpbmcgamF2YXNjcmlwdFxuICAgKiBmaWxlcyBpbiBhbiB1bmJ1bmRsZWQsIHVuY29tcGlsZWQgZW52aXJvbm1lbnQuXG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIGN1c3RpbWl6ZWQgdmlhIHRoZSBzZXREZXBlbmRlbmN5RmFjdG9yeSBtZXRob2QsIG9yIGJ5XG4gICAqIENMT1NVUkVfSU1QT1JUX1NDUklQVC9DTE9TVVJFX0xPQURfRklMRV9TWU5DLlxuICAgKlxuICAgKiBAc3RydWN0IEBjb25zdHJ1Y3RvciBAZmluYWwgQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfID0gZnVuY3Rpb24oKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsICFnb29nLkRlcGVuZGVuY3k+fSAqL1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzXyA9IHt9O1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqL1xuICAgIHRoaXMuaWRUb1BhdGhfID0ge307XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+fSAqL1xuICAgIHRoaXMud3JpdHRlbl8gPSB7fTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQXJyYXk8IWdvb2cuRGVwZW5kZW5jeT59ICovXG4gICAgdGhpcy5sb2FkaW5nRGVwc18gPSBbXTtcbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTwhZ29vZy5EZXBlbmRlbmN5Pn0gKi9cbiAgICB0aGlzLmRlcHNUb0xvYWRfID0gW107XG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMucGF1c2VkXyA9IGZhbHNlO1xuICAgIC8qKiBAcHJpdmF0ZSB7IWdvb2cuRGVwZW5kZW5jeUZhY3Rvcnl9ICovXG4gICAgdGhpcy5mYWN0b3J5XyA9IG5ldyBnb29nLkRlcGVuZGVuY3lGYWN0b3J5KGdvb2cudHJhbnNwaWxlcl8pO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCAhRnVuY3Rpb24+fSAqL1xuICAgIHRoaXMuZGVmZXJyZWRDYWxsYmFja3NfID0ge307XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUFycmF5PHN0cmluZz59ICovXG4gICAgdGhpcy5kZWZlcnJlZFF1ZXVlXyA9IFtdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBuYW1lc3BhY2VzXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdW5kZWZpbmVkfSBjYWxsYmFjayBGdW5jdGlvbiB0byBjYWxsIG9uY2UgYWxsIHRoZVxuICAgKiAgICAgbmFtZXNwYWNlcyBoYXZlIGxvYWRlZC5cbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5ib290c3RyYXAgPSBmdW5jdGlvbihuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIHZhciBjYiA9IGNhbGxiYWNrO1xuICAgIGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgZ29vZy5nbG9iYWwuc2V0VGltZW91dChjYiwgMCk7XG4gICAgICAgIGNiID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW5hbWVzcGFjZXMubGVuZ3RoKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlcHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXRoID0gdGhpcy5nZXRQYXRoRnJvbURlcHNfKG5hbWVzcGFjZXNbaV0pO1xuICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWdvbml6ZWQgbmFtZXNwYWNlOiAnICsgbmFtZXNwYWNlc1tpXSk7XG4gICAgICB9XG4gICAgICBkZXBzLnB1c2godGhpcy5kZXBlbmRlbmNpZXNfW3BhdGhdKTtcbiAgICB9XG5cbiAgICB2YXIgcmVxdWlyZSA9IGdvb2cucmVxdWlyZTtcbiAgICB2YXIgbG9hZGVkID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlcXVpcmUobmFtZXNwYWNlc1tpXSk7XG4gICAgICBkZXBzW2ldLm9uTG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCsrbG9hZGVkID09IG5hbWVzcGFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogTG9hZHMgdGhlIENsb3N1cmUgRGVwZW5kZW5jeSBmaWxlLlxuICAgKlxuICAgKiBFeHBvc2VkIGEgcHVibGljIGZ1bmN0aW9uIHNvIENMT1NVUkVfTk9fREVQUyBjYW4gYmUgc2V0IHRvIGZhbHNlLCBiYXNlXG4gICAqIGxvYWRlZCwgc2V0RGVwZW5kZW5jeUZhY3RvcnkgY2FsbGVkLCBhbmQgdGhlbiB0aGlzIGNhbGxlZC4gaS5lLiBhbGxvd3NcbiAgICogY3VzdG9tIGxvYWRpbmcgb2YgdGhlIGRlcHMgZmlsZS5cbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkQ2xvc3VyZURlcHMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBDaXJjdW12ZW50IGFkZERlcGVuZGVuY3ksIHdoaWNoIHdvdWxkIHRyeSB0byB0cmFuc3BpbGUgZGVwcy5qcyBpZlxuICAgIC8vIHRyYW5zcGlsZSBpcyBzZXQgdG8gYWx3YXlzLlxuICAgIHZhciByZWxQYXRoID0gJ2RlcHMuanMnO1xuICAgIHRoaXMuZGVwc1RvTG9hZF8ucHVzaCh0aGlzLmZhY3RvcnlfLmNyZWF0ZURlcGVuZGVuY3koXG4gICAgICAgIGdvb2cubm9ybWFsaXplUGF0aF8oZ29vZy5iYXNlUGF0aCArIHJlbFBhdGgpLCByZWxQYXRoLCBbXSwgW10sIHt9LFxuICAgICAgICBmYWxzZSkpO1xuICAgIHRoaXMubG9hZERlcHNfKCk7XG4gIH07XG5cblxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIGRlYnVnIGxvYWRlciB3aGVuIGEgZGVwZW5kZW5jeSBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhYnNQYXRoT3JJZCBQYXRoIG9mIHRoZSBkZXBlbmRlbmN5IG9yIGdvb2cgaWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9mb3JjZVxuICAgKi9cbiAgZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLnJlcXVlc3RlZCA9IGZ1bmN0aW9uKGFic1BhdGhPcklkLCBvcHRfZm9yY2UpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMuZ2V0UGF0aEZyb21EZXBzXyhhYnNQYXRoT3JJZCk7XG4gICAgaWYgKHBhdGggJiZcbiAgICAgICAgKG9wdF9mb3JjZSB8fCB0aGlzLmFyZURlcHNMb2FkZWRfKHRoaXMuZGVwZW5kZW5jaWVzX1twYXRoXS5yZXF1aXJlcykpKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmRlZmVycmVkQ2FsbGJhY2tzX1twYXRoXTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdGhpcy5kZWZlcnJlZENhbGxiYWNrc19bcGF0aF07XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlcGVuZGVuY3kgZmFjdG9yeSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGN1c3RvbVxuICAgKiBnb29nLkRlcGVuZGVuY3kgaW1wbGVtZW50YXRpb25zIHRvIGNvbnRyb2wgaG93IGRlcGVuZGVuY2llcyBhcmUgbG9hZGVkLlxuICAgKlxuICAgKiBAcGFyYW0geyFnb29nLkRlcGVuZGVuY3lGYWN0b3J5fSBmYWN0b3J5XG4gICAqL1xuICBnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUuc2V0RGVwZW5kZW5jeUZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgdGhpcy5mYWN0b3J5XyA9IGZhY3Rvcnk7XG4gIH07XG5cblxuICAvKipcbiAgICogVHJhdnNlcnNlcyB0aGUgZGVwZW5kZW5jeSBncmFwaCBhbmQgcXVldWVzIHRoZSBnaXZlbiBkZXBlbmRlbmN5LCBhbmQgYWxsIG9mXG4gICAqIGl0cyB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcywgZm9yIGxvYWRpbmcgYW5kIHRoZW4gc3RhcnRzIGxvYWRpbmcgaWYgbm90XG4gICAqIHBhdXNlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLmxvYWRfID0gZnVuY3Rpb24obmFtZXNwYWNlKSB7XG4gICAgaWYgKCF0aGlzLmdldFBhdGhGcm9tRGVwc18obmFtZXNwYWNlKSkge1xuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdnb29nLnJlcXVpcmUgY291bGQgbm90IGZpbmQ6ICcgKyBuYW1lc3BhY2U7XG4gICAgICBnb29nLmxvZ1RvQ29uc29sZV8oZXJyb3JNZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvYWRlciA9IHRoaXM7XG5cbiAgICAgIHZhciBkZXBzID0gW107XG5cbiAgICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlICovXG4gICAgICB2YXIgdmlzaXQgPSBmdW5jdGlvbihuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIHBhdGggPSBsb2FkZXIuZ2V0UGF0aEZyb21EZXBzXyhuYW1lc3BhY2UpO1xuXG4gICAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIGRlcGVuZGVuY3kgcGF0aCBvciBzeW1ib2w6ICcgKyBuYW1lc3BhY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvYWRlci53cml0dGVuX1twYXRoXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRlci53cml0dGVuX1twYXRoXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIGRlcCA9IGxvYWRlci5kZXBlbmRlbmNpZXNfW3BhdGhdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5yZXF1aXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghZ29vZy5pc1Byb3ZpZGVkXyhkZXAucmVxdWlyZXNbaV0pKSB7XG4gICAgICAgICAgICB2aXNpdChkZXAucmVxdWlyZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlcHMucHVzaChkZXApO1xuICAgICAgfTtcblxuICAgICAgdmlzaXQobmFtZXNwYWNlKTtcblxuICAgICAgdmFyIHdhc0xvYWRpbmcgPSAhIXRoaXMuZGVwc1RvTG9hZF8ubGVuZ3RoO1xuICAgICAgdGhpcy5kZXBzVG9Mb2FkXyA9IHRoaXMuZGVwc1RvTG9hZF8uY29uY2F0KGRlcHMpO1xuXG4gICAgICBpZiAoIXRoaXMucGF1c2VkXyAmJiAhd2FzTG9hZGluZykge1xuICAgICAgICB0aGlzLmxvYWREZXBzXygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBMb2FkcyBhbnkgcXVldWVkIGRlcGVuZGVuY2llcyB1bnRpbCB0aGV5IGFyZSBhbGwgbG9hZGVkIG9yIHBhdXNlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkRGVwc18gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbG9hZGVyID0gdGhpcztcbiAgICB2YXIgcGF1c2VkID0gdGhpcy5wYXVzZWRfO1xuXG4gICAgd2hpbGUgKHRoaXMuZGVwc1RvTG9hZF8ubGVuZ3RoICYmICFwYXVzZWQpIHtcbiAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxvYWRDYWxsRG9uZSA9IGZhbHNlO1xuICAgICAgICB2YXIgZGVwID0gbG9hZGVyLmRlcHNUb0xvYWRfLnNoaWZ0KCk7XG5cbiAgICAgICAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICAgICAgICBsb2FkZXIubG9hZGluZ18oZGVwKTtcblxuICAgICAgICB2YXIgY29udHJvbGxlciA9IHtcbiAgICAgICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobG9hZENhbGxEb25lKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNhbGwgcGF1c2UgYWZ0ZXIgdGhlIGNhbGwgdG8gbG9hZC4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXN1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGxvYWRDYWxsRG9uZSkge1xuICAgICAgICAgICAgICBsb2FkZXIucmVzdW1lXygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gU29tZSBkZXAgY2FsbGVkIHBhdXNlIGFuZCB0aGVuIHJlc3VtZSBpbiB0aGUgc2FtZSBsb2FkIGNhbGwuXG4gICAgICAgICAgICAgIC8vIEp1c3Qga2VlcCBydW5uaW5nIHRoaXMgc2FtZSBsb29wLlxuICAgICAgICAgICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxvYWRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRG91YmxlIGNhbGwgdG8gbG9hZGVkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgbG9hZGVyLmxvYWRlZF8oZGVwKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBlbmRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gRGVmZW5zaXZlIGNvcHkuXG4gICAgICAgICAgICB2YXIgcGVuZGluZyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2FkZXIubG9hZGluZ0RlcHNfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHBlbmRpbmcucHVzaChsb2FkZXIubG9hZGluZ0RlcHNfW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwZW5kaW5nO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHBhcmFtIHtnb29nLk1vZHVsZVR5cGV9IHR5cGVcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzZXRNb2R1bGVTdGF0ZTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAgICAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8gPSB7XG4gICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgIG1vZHVsZU5hbWU6ICcnLFxuICAgICAgICAgICAgICBkZWNsYXJlTGVnYWN5TmFtZXNwYWNlOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcsIHN0cmluZz0pfSAqL1xuICAgICAgICAgIHJlZ2lzdGVyRXM2TW9kdWxlRXhwb3J0czogZnVuY3Rpb24oXG4gICAgICAgICAgICAgIHBhdGgsIGV4cG9ydHMsIG9wdF9jbG9zdXJlTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBpZiAob3B0X2Nsb3N1cmVOYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgZ29vZy5sb2FkZWRNb2R1bGVzX1tvcHRfY2xvc3VyZU5hbWVzcGFjZV0gPSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0czogZXhwb3J0cyxcbiAgICAgICAgICAgICAgICB0eXBlOiBnb29nLk1vZHVsZVR5cGUuRVM2LFxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiBvcHRfY2xvc3VyZU5hbWVzcGFjZSB8fCAnJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLyoqIEB0eXBlIHtmdW5jdGlvbihzdHJpbmcsID8pfSAqL1xuICAgICAgICAgIHJlZ2lzdGVyR29vZ01vZHVsZUV4cG9ydHM6IGZ1bmN0aW9uKG1vZHVsZUlkLCBleHBvcnRzKSB7XG4gICAgICAgICAgICBnb29nLmxvYWRlZE1vZHVsZXNfW21vZHVsZUlkXSA9IHtcbiAgICAgICAgICAgICAgZXhwb3J0czogZXhwb3J0cyxcbiAgICAgICAgICAgICAgdHlwZTogZ29vZy5Nb2R1bGVUeXBlLkdPT0csXG4gICAgICAgICAgICAgIG1vZHVsZUlkOiBtb2R1bGVJZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsZWFyTW9kdWxlU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8gPSBudWxsO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVmZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAobG9hZENhbGxEb25lKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICdDYW5ub3QgcmVnaXN0ZXIgd2l0aCBkZWZlciBhZnRlciB0aGUgY2FsbCB0byBsb2FkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9hZGVyLmRlZmVyXyhkZXAsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFyZURlcHNMb2FkZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvYWRlci5hcmVEZXBzTG9hZGVkXyhkZXAucmVxdWlyZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlcC5sb2FkKGNvbnRyb2xsZXIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGxvYWRDYWxsRG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgdGhpcy5wYXVzZV8oKTtcbiAgICB9XG4gIH07XG5cblxuICAvKiogQHByaXZhdGUgKi9cbiAgZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLnBhdXNlXyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucGF1c2VkXyA9IHRydWU7XG4gIH07XG5cblxuICAvKiogQHByaXZhdGUgKi9cbiAgZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLnJlc3VtZV8gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wYXVzZWRfKSB7XG4gICAgICB0aGlzLnBhdXNlZF8gPSBmYWxzZTtcbiAgICAgIHRoaXMubG9hZERlcHNfKCk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIE1hcmtzIHRoZSBnaXZlbiBkZXBlbmRlbmN5IGFzIGxvYWRpbmcgKGxvYWQgaGFzIGJlZW4gY2FsbGVkIGJ1dCBpdCBoYXMgbm90XG4gICAqIHlldCBtYXJrZWQgaXRzZWxmIGFzIGZpbmlzaGVkKS4gVXNlZnVsIGZvciBkZXBlbmRlbmNpZXMgdGhhdCB3YW50IHRvIGtub3dcbiAgICogd2hhdCBlbHNlIGlzIGxvYWRpbmcuIEV4YW1wbGU6IGdvb2cubW9kdWxlcyBjYW5ub3QgZXZhbCBpZiB0aGVyZSBhcmVcbiAgICogbG9hZGluZyBkZXBlbmRlbmNpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7IWdvb2cuRGVwZW5kZW5jeX0gZGVwXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLkRlYnVnTG9hZGVyXy5wcm90b3R5cGUubG9hZGluZ18gPSBmdW5jdGlvbihkZXApIHtcbiAgICB0aGlzLmxvYWRpbmdEZXBzXy5wdXNoKGRlcCk7XG4gIH07XG5cblxuICAvKipcbiAgICogTWFya3MgdGhlIGdpdmVuIGRlcGVuZGVuY3kgYXMgaGF2aW5nIGZpbmlzaGVkIGxvYWRpbmcgYW5kIGJlaW5nIGF2YWlsYWJsZVxuICAgKiBmb3IgcmVxdWlyZS5cbiAgICpcbiAgICogQHBhcmFtIHshZ29vZy5EZXBlbmRlbmN5fSBkZXBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5sb2FkZWRfID0gZnVuY3Rpb24oZGVwKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxvYWRpbmdEZXBzXy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMubG9hZGluZ0RlcHNfW2ldID09IGRlcCkge1xuICAgICAgICB0aGlzLmxvYWRpbmdEZXBzXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kZWZlcnJlZFF1ZXVlXy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZGVmZXJyZWRRdWV1ZV9baV0gPT0gZGVwLnBhdGgpIHtcbiAgICAgICAgdGhpcy5kZWZlcnJlZFF1ZXVlXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRpbmdEZXBzXy5sZW5ndGggPT0gdGhpcy5kZWZlcnJlZFF1ZXVlXy5sZW5ndGggJiZcbiAgICAgICAgIXRoaXMuZGVwc1RvTG9hZF8ubGVuZ3RoKSB7XG4gICAgICAvLyBTb21ldGhpbmcgaGFzIGFza2VkIHRvIGxvYWQgdGhlc2UsIGJ1dCB0aGV5IG1heSBub3QgYmUgZGlyZWN0bHlcbiAgICAgIC8vIHJlcXVpcmVkIGFnYWluIGxhdGVyLCBzbyBsb2FkIHRoZW0gbm93IHRoYXQgd2Uga25vdyB3ZSdyZSBkb25lIGxvYWRpbmdcbiAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZS4gZS5nLiBhIGdvb2cgbW9kdWxlIGVudHJ5IHBvaW50LlxuICAgICAgd2hpbGUgKHRoaXMuZGVmZXJyZWRRdWV1ZV8ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdGVkKHRoaXMuZGVmZXJyZWRRdWV1ZV8uc2hpZnQoKSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVwLmxvYWRlZCgpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHBhdGhzT3JJZHNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5hcmVEZXBzTG9hZGVkXyA9IGZ1bmN0aW9uKHBhdGhzT3JJZHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzT3JJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXRoID0gdGhpcy5nZXRQYXRoRnJvbURlcHNfKHBhdGhzT3JJZHNbaV0pO1xuICAgICAgaWYgKCFwYXRoIHx8XG4gICAgICAgICAgKCEocGF0aCBpbiB0aGlzLmRlZmVycmVkQ2FsbGJhY2tzXykgJiZcbiAgICAgICAgICAgIWdvb2cuaXNQcm92aWRlZF8ocGF0aHNPcklkc1tpXSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWJzUGF0aE9ySWRcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5nZXRQYXRoRnJvbURlcHNfID0gZnVuY3Rpb24oYWJzUGF0aE9ySWQpIHtcbiAgICBpZiAoYWJzUGF0aE9ySWQgaW4gdGhpcy5pZFRvUGF0aF8pIHtcbiAgICAgIHJldHVybiB0aGlzLmlkVG9QYXRoX1thYnNQYXRoT3JJZF07XG4gICAgfSBlbHNlIGlmIChhYnNQYXRoT3JJZCBpbiB0aGlzLmRlcGVuZGVuY2llc18pIHtcbiAgICAgIHJldHVybiBhYnNQYXRoT3JJZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IWdvb2cuRGVwZW5kZW5jeX0gZGVwZW5kZW5jeVxuICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVidWdMb2FkZXJfLnByb3RvdHlwZS5kZWZlcl8gPSBmdW5jdGlvbihkZXBlbmRlbmN5LCBjYWxsYmFjaykge1xuICAgIHRoaXMuZGVmZXJyZWRDYWxsYmFja3NfW2RlcGVuZGVuY3kucGF0aF0gPSBjYWxsYmFjaztcbiAgICB0aGlzLmRlZmVycmVkUXVldWVfLnB1c2goZGVwZW5kZW5jeS5wYXRoKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBJbnRlcmZhY2UgZm9yIGdvb2cuRGVwZW5kZW5jeSBpbXBsZW1lbnRhdGlvbnMgdG8gaGF2ZSBzb21lIGNvbnRyb2wgb3ZlclxuICAgKiBsb2FkaW5nIG9mIGRlcGVuZGVuY2llcy5cbiAgICpcbiAgICogQHJlY29yZFxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlciA9IGZ1bmN0aW9uKCkge307XG5cblxuICAvKipcbiAgICogVGVsbHMgdGhlIGNvbnRyb2xsZXIgdG8gaGFsdCBsb2FkaW5nIG9mIG1vcmUgZGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHt9O1xuXG5cbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBjb250cm9sbGVyIHRvIHJlc3VtZSBsb2FkaW5nIG9mIG1vcmUgZGVwZW5kZW5jaWVzIGlmIHBhdXNlZC5cbiAgICovXG4gIGdvb2cuTG9hZENvbnRyb2xsZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge307XG5cblxuICAvKipcbiAgICogVGVsbHMgdGhlIGNvbnRyb2xsZXIgdGhhdCB0aGlzIGRlcGVuZGVuY3kgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gICAqXG4gICAqIFRoaXMgY2F1c2VzIHRoaXMgdG8gYmUgcmVtb3ZlZCBmcm9tIHBlbmRpbmcoKSBhbmQgYW55IGxvYWQgY2FsbGJhY2tzIHRvXG4gICAqIGZpcmUuXG4gICAqL1xuICBnb29nLkxvYWRDb250cm9sbGVyLnByb3RvdHlwZS5sb2FkZWQgPSBmdW5jdGlvbigpIHt9O1xuXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgZGVwZW5kZW5jaWVzIG9uIHdoaWNoIGxvYWQgaGFzIGJlZW4gY2FsbGVkIGJ1dCB3aGljaCBoYXZlIG5vdFxuICAgKiBjYWxsZWQgbG9hZGVkIG9uIHRoZWlyIGNvbnRyb2xsZXIuIFRoaXMgaW5jbHVkZXMgdGhlIGN1cnJlbnQgZGVwZW5kZW5jeS5cbiAgICpcbiAgICogQHJldHVybiB7IUFycmF5PCFnb29nLkRlcGVuZGVuY3k+fVxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUucGVuZGluZyA9IGZ1bmN0aW9uKCkge307XG5cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIG9iamVjdCBhcyBhbiBFUzYgbW9kdWxlJ3MgZXhwb3J0cyBzbyB0aGF0IGdvb2cubW9kdWxlcyBtYXlcbiAgICogcmVxdWlyZSBpdCBieSBwYXRoLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBGdWxsIHBhdGggb2YgdGhlIG1vZHVsZS5cbiAgICogQHBhcmFtIHs/fSBleHBvcnRzXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2Nsb3N1cmVOYW1lc3BhY2UgQ2xvc3VyZSBuYW1lc3BhY2UgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICogICAgIHRoaXMgbW9kdWxlLlxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJFczZNb2R1bGVFeHBvcnRzID0gZnVuY3Rpb24oXG4gICAgICBwYXRoLCBleHBvcnRzLCBvcHRfY2xvc3VyZU5hbWVzcGFjZSkge307XG5cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBtb2R1bGUgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Z29vZy5Nb2R1bGVUeXBlfSB0eXBlIFR5cGUgb2YgbW9kdWxlLlxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUuc2V0TW9kdWxlU3RhdGUgPSBmdW5jdGlvbih0eXBlKSB7fTtcblxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgbW9kdWxlIHN0YXRlLlxuICAgKi9cbiAgZ29vZy5Mb2FkQ29udHJvbGxlci5wcm90b3R5cGUuY2xlYXJNb2R1bGVTdGF0ZSA9IGZ1bmN0aW9uKCkge307XG5cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gY2FsbCBvbmNlIHRoZSBkZXBlbmRlbmN5IGlzIGFjdHVhbGx5IHJlcXVlc3RlZFxuICAgKiB2aWEgZ29vZy5yZXF1aXJlICsgYWxsIG9mIHRoZSBpbW1lZGlhdGUgZGVwZW5kZW5jaWVzIGhhdmUgYmVlbiBsb2FkZWQgb3JcbiAgICogYWxsIG90aGVyIGZpbGVzIGhhdmUgYmVlbiBsb2FkZWQuIEFsbG93cyBmb3IgbGF6eSBsb2FkaW5nIHVudGlsXG4gICAqIHJlcXVpcmUnZCB3aXRob3V0IHBhdXNpbmcgZGVwZW5kZW5jeSBsb2FkaW5nLCB3aGljaCBpcyBuZWVkZWQgb24gb2xkIElFLlxuICAgKlxuICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGdvb2cuTG9hZENvbnRyb2xsZXIucHJvdG90eXBlLmRlZmVyID0gZnVuY3Rpb24oY2FsbGJhY2spIHt9O1xuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnb29nLkxvYWRDb250cm9sbGVyLnByb3RvdHlwZS5hcmVEZXBzTG9hZGVkID0gZnVuY3Rpb24oKSB7fTtcblxuXG4gIC8qKlxuICAgKiBCYXNpYyBzdXBlciBjbGFzcyBmb3IgYWxsIGRlcGVuZGVuY2llcyBDbG9zdXJlIExpYnJhcnkgY2FuIGxvYWQuXG4gICAqXG4gICAqIFRoaXMgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBkZXNpZ25lZCB0byBsb2FkIHVudHJhbnNwaWxlZCwgbm9uLW1vZHVsZVxuICAgKiBzY3JpcHRzIGluIGEgd2ViIGJyb3N3ZXIuXG4gICAqXG4gICAqIEZvciB0cmFuc3BpbGVkIG5vbi1nb29nLm1vZHVsZSBmaWxlcyB7QHNlZSBnb29nLlRyYW5zcGlsZWREZXBlbmRlbmN5fS5cbiAgICogRm9yIGdvb2cubW9kdWxlcyBzZWUge0BzZWUgZ29vZy5Hb29nTW9kdWxlRGVwZW5kZW5jeX0uXG4gICAqIEZvciB1bnRyYW5zcGlsZWQgRVM2IG1vZHVsZXMge0BzZWUgZ29vZy5FczZNb2R1bGVEZXBlbmRlbmN5fS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQWJzb2x1dGUgcGF0aCBvZiB0aGlzIHNjcmlwdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCBQYXRoIG9mIHRoaXMgc2NyaXB0IHJlbGF0aXZlIHRvIGdvb2cuYmFzZVBhdGguXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHByb3ZpZGVzIGdvb2cucHJvdmlkZWQgb3IgZ29vZy5tb2R1bGUgc3ltYm9sc1xuICAgKiAgICAgaW4gdGhpcyBmaWxlLlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSByZXF1aXJlcyBnb29nIHN5bWJvbHMgb3IgcmVsYXRpdmUgcGF0aHMgdG8gQ2xvc3VyZVxuICAgKiAgICAgdGhpcyBkZXBlbmRzIG9uLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBsb2FkRmxhZ3NcbiAgICogQHN0cnVjdCBAY29uc3RydWN0b3JcbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKFxuICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncykge1xuICAgIC8qKiBAY29uc3QgKi9cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIC8qKiBAY29uc3QgKi9cbiAgICB0aGlzLnJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlUGF0aDtcbiAgICAvKiogQGNvbnN0ICovXG4gICAgdGhpcy5wcm92aWRlcyA9IHByb3ZpZGVzO1xuICAgIC8qKiBAY29uc3QgKi9cbiAgICB0aGlzLnJlcXVpcmVzID0gcmVxdWlyZXM7XG4gICAgLyoqIEBjb25zdCAqL1xuICAgIHRoaXMubG9hZEZsYWdzID0gbG9hZEZsYWdzO1xuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmxvYWRlZF8gPSBmYWxzZTtcbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTxmdW5jdGlvbigpPn0gKi9cbiAgICB0aGlzLmxvYWRDYWxsYmFja3NfID0gW107XG4gIH07XG5cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcGF0aG5hbWUgcGFydCBvZiB0aGlzIGRlcGVuZGVuY3kncyBwYXRoIGlmIGl0IGlzIGFcbiAgICogICAgIFVSSS5cbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeS5wcm90b3R5cGUuZ2V0UGF0aE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGF0aE5hbWUgPSB0aGlzLnBhdGg7XG4gICAgdmFyIHByb3RvY29sSW5kZXggPSBwYXRoTmFtZS5pbmRleE9mKCc6Ly8nKTtcbiAgICBpZiAocHJvdG9jb2xJbmRleCA+PSAwKSB7XG4gICAgICBwYXRoTmFtZSA9IHBhdGhOYW1lLnN1YnN0cmluZyhwcm90b2NvbEluZGV4ICsgMyk7XG4gICAgICB2YXIgc2xhc2hJbmRleCA9IHBhdGhOYW1lLmluZGV4T2YoJy8nKTtcbiAgICAgIGlmIChzbGFzaEluZGV4ID49IDApIHtcbiAgICAgICAgcGF0aE5hbWUgPSBwYXRoTmFtZS5zdWJzdHJpbmcoc2xhc2hJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aE5hbWU7XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBDYWxsYmFjayB0byBmaXJlIGFzIHNvb24gYXMgdGhpcyBoYXMgbG9hZGVkLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeS5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5sb2FkZWRfKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvYWRDYWxsYmFja3NfLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBNYXJrcyB0aGlzIGRlcGVuZGVuY3kgYXMgbG9hZGVkIGFuZCBmaXJlcyBhbnkgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgd2l0aFxuICAgKiBvbkxvYWQuXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgZ29vZy5EZXBlbmRlbmN5LnByb3RvdHlwZS5sb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxvYWRlZF8gPSB0cnVlO1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmxvYWRDYWxsYmFja3NfO1xuICAgIHRoaXMubG9hZENhbGxiYWNrc18gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FsbGJhY2tzW2ldKCk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IGRvY3VtZW50LndyaXR0ZW4gLyBhcHBlbmRlZCBzY3JpcHQgdGFncyBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAqXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgZ29vZy5EZXBlbmRlbmN5LmRlZmVyXyA9IGZhbHNlO1xuXG5cbiAgLyoqXG4gICAqIE1hcCBvZiBzY3JpcHQgcmVhZHkgLyBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tzLiBPbGQgSUUgY2Fubm90IGhhbmRsZSBwdXR0aW5nXG4gICAqIHRoZXNlIHByb3BlcnRpZXMgb24gZ29vZy5nbG9iYWwuXG4gICAqXG4gICAqIEBwcml2YXRlIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIGZ1bmN0aW9uKD8pOnVuZGVmaW5lZD59XG4gICAqL1xuICBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfID0ge307XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbiguLi4/KTo/fSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnb29nLkRlcGVuZGVuY3kucmVnaXN0ZXJDYWxsYmFja18gPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBrZXkgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDMyKTtcbiAgICBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfW2tleV0gPSBjYWxsYmFjaztcbiAgICByZXR1cm4ga2V5O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeS51bnJlZ2lzdGVyQ2FsbGJhY2tfID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgZGVsZXRlIGdvb2cuRGVwZW5kZW5jeS5jYWxsYmFja01hcF9ba2V5XTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Li4uP30gdmFyX2FyZ3NcbiAgICogQHByaXZhdGVcbiAgICogQHN1cHByZXNzIHt1bnVzZWRQcml2YXRlTWVtYmVyc31cbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeS5jYWxsYmFja18gPSBmdW5jdGlvbihrZXksIHZhcl9hcmdzKSB7XG4gICAgaWYgKGtleSBpbiBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tNYXBfW2tleV07XG4gICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ0NhbGxiYWNrIGtleSAnICsga2V5ICtcbiAgICAgICAgICAnIGRvZXMgbm90IGV4aXN0ICh3YXMgYmFzZS5qcyBsb2FkZWQgbW9yZSB0aGFuIG9uY2U/KS4nO1xuICAgICAgdGhyb3cgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogU3RhcnRzIGxvYWRpbmcgdGhpcyBkZXBlbmRlbmN5LiBUaGlzIGRlcGVuZGVuY3kgY2FuIHBhdXNlIGxvYWRpbmcgaWYgaXRcbiAgICogbmVlZHMgdG8gYW5kIHJlc3VtZSBpdCBsYXRlciB2aWEgdGhlIGNvbnRyb2xsZXIgaW50ZXJmYWNlLlxuICAgKlxuICAgKiBXaGVuIHRoaXMgaXMgbG9hZGVkIGl0IHNob3VsZCBjYWxsIGNvbnRyb2xsZXIubG9hZGVkKCkuIE5vdGUgdGhhdCB0aGlzIHdpbGxcbiAgICogZW5kIHVwIGNhbGxpbmcgdGhlIGxvYWRlZCBtZXRob2Qgb2YgdGhpcyBkZXBlbmRlbmN5OyB0aGVyZSBpcyBubyBuZWVkIHRvXG4gICAqIGNhbGwgaXQgZXhwbGljaXRseS5cbiAgICpcbiAgICogQHBhcmFtIHshZ29vZy5Mb2FkQ29udHJvbGxlcn0gY29udHJvbGxlclxuICAgKi9cbiAgZ29vZy5EZXBlbmRlbmN5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQpIHtcbiAgICAgIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQodGhpcy5wYXRoKSkge1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZ29vZy5pbkh0bWxEb2N1bWVudF8oKSkge1xuICAgICAgZ29vZy5sb2dUb0NvbnNvbGVfKFxuICAgICAgICAgICdDYW5ub3QgdXNlIGRlZmF1bHQgZGVidWcgbG9hZGVyIG91dHNpZGUgb2YgSFRNTCBkb2N1bWVudHMuJyk7XG4gICAgICBpZiAodGhpcy5yZWxhdGl2ZVBhdGggPT0gJ2RlcHMuanMnKSB7XG4gICAgICAgIC8vIFNvbWUgb2xkIGNvZGUgaXMgcmVseWluZyBvbiBiYXNlLmpzIGF1dG8gbG9hZGluZyBkZXBzLmpzIGZhaWxpbmcgd2l0aFxuICAgICAgICAvLyBubyBlcnJvciBiZWZvcmUgbGF0ZXIgc2V0dGluZyBDTE9TVVJFX0lNUE9SVF9TQ1JJUFQuXG4gICAgICAgIC8vIENMT1NVUkVfSU1QT1JUX1NDUklQVCBzaG91bGQgYmUgc2V0ICpiZWZvcmUqIGJhc2UuanMgaXMgbG9hZGVkLCBvclxuICAgICAgICAvLyBDTE9TVVJFX05PX0RFUFMgc2V0IHRvIHRydWUuXG4gICAgICAgIGdvb2cubG9nVG9Db25zb2xlXyhcbiAgICAgICAgICAgICdDb25zaWRlciBzZXR0aW5nIENMT1NVUkVfSU1QT1JUX1NDUklQVCBiZWZvcmUgbG9hZGluZyBiYXNlLmpzLCAnICtcbiAgICAgICAgICAgICdvciBzZXR0aW5nIENMT1NVUkVfTk9fREVQUyB0byB0cnVlLicpO1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7IUhUTUxEb2N1bWVudH0gKi9cbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XG5cbiAgICAvLyBJZiB0aGUgdXNlciB0cmllcyB0byByZXF1aXJlIGEgbmV3IHN5bWJvbCBhZnRlciBkb2N1bWVudCBsb2FkLFxuICAgIC8vIHNvbWV0aGluZyBoYXMgZ29uZSB0ZXJyaWJseSB3cm9uZy4gRG9pbmcgYSBkb2N1bWVudC53cml0ZSB3b3VsZFxuICAgIC8vIHdpcGUgb3V0IHRoZSBwYWdlLiBUaGlzIGRvZXMgbm90IGFwcGx5IHRvIHRoZSBDU1AtY29tcGxpYW50IG1ldGhvZFxuICAgIC8vIG9mIHdyaXRpbmcgc2NyaXB0IHRhZ3MuXG4gICAgaWYgKGRvYy5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScgJiZcbiAgICAgICAgIWdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORykge1xuICAgICAgLy8gQ2VydGFpbiB0ZXN0IGZyYW1ld29ya3MgbG9hZCBiYXNlLmpzIG11bHRpcGxlIHRpbWVzLCB3aGljaCB0cmllc1xuICAgICAgLy8gdG8gd3JpdGUgZGVwcy5qcyBlYWNoIHRpbWUuIElmIHRoYXQgaGFwcGVucywganVzdCBmYWlsIHNpbGVudGx5LlxuICAgICAgLy8gVGhlc2UgZnJhbWV3b3JrcyB3aXBlIHRoZSBwYWdlIGJldHdlZW4gZWFjaCBsb2FkIG9mIGJhc2UuanMsIHNvIHRoaXNcbiAgICAgIC8vIGlzIE9LLlxuICAgICAgdmFyIGlzRGVwcyA9IC9cXGJkZXBzLmpzJC8udGVzdCh0aGlzLnBhdGgpO1xuICAgICAgaWYgKGlzRGVwcykge1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2Fubm90IHdyaXRlIFwiJyArIHRoaXMucGF0aCArICdcIiBhZnRlciBkb2N1bWVudCBsb2FkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5vbmNlID0gZ29vZy5nZXRTY3JpcHROb25jZV8oKTtcbiAgICBpZiAoIWdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORyAmJlxuICAgICAgICBnb29nLmlzRG9jdW1lbnRMb2FkaW5nXygpKSB7XG4gICAgICB2YXIga2V5O1xuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oc2NyaXB0KSB7XG4gICAgICAgIGlmIChzY3JpcHQucmVhZHlTdGF0ZSAmJiBzY3JpcHQucmVhZHlTdGF0ZSAhPSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IGNhbGxiYWNrO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnb29nLkRlcGVuZGVuY3kudW5yZWdpc3RlckNhbGxiYWNrXyhrZXkpO1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgfTtcbiAgICAgIGtleSA9IGdvb2cuRGVwZW5kZW5jeS5yZWdpc3RlckNhbGxiYWNrXyhjYWxsYmFjayk7XG5cbiAgICAgIHZhciBkZWZlciA9IGdvb2cuRGVwZW5kZW5jeS5kZWZlcl8gPyAnIGRlZmVyJyA6ICcnO1xuICAgICAgdmFyIG5vbmNlQXR0ciA9IG5vbmNlID8gJyBub25jZT1cIicgKyBub25jZSArICdcIicgOiAnJztcbiAgICAgIHZhciBzY3JpcHQgPSAnPHNjcmlwdCBzcmM9XCInICsgdGhpcy5wYXRoICsgJ1wiJyArIG5vbmNlQXR0ciArIGRlZmVyICtcbiAgICAgICAgICAnIGlkPVwic2NyaXB0LScgKyBrZXkgKyAnXCI+PFxcL3NjcmlwdD4nO1xuXG4gICAgICBzY3JpcHQgKz0gJzxzY3JpcHQnICsgbm9uY2VBdHRyICsgJz4nO1xuXG4gICAgICBpZiAoZ29vZy5EZXBlbmRlbmN5LmRlZmVyXykge1xuICAgICAgICBzY3JpcHQgKz0gJ2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcJ3NjcmlwdC0nICsga2V5ICtcbiAgICAgICAgICAgICdcXCcpLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xcbicgK1xuICAgICAgICAgICAgJyAgZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrXyhcXCcnICsga2V5ICsgJ1xcJywgdGhpcyk7XFxuJyArXG4gICAgICAgICAgICAnfTtcXG4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NyaXB0ICs9ICdnb29nLkRlcGVuZGVuY3kuY2FsbGJhY2tfKFxcJycgKyBrZXkgK1xuICAgICAgICAgICAgJ1xcJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXFwnc2NyaXB0LScgKyBrZXkgKyAnXFwnKSk7JztcbiAgICAgIH1cblxuICAgICAgc2NyaXB0ICs9ICc8XFwvc2NyaXB0Pic7XG5cbiAgICAgIGRvYy53cml0ZShcbiAgICAgICAgICBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXyA/XG4gICAgICAgICAgICAgIGdvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfLmNyZWF0ZUhUTUwoc2NyaXB0KSA6XG4gICAgICAgICAgICAgIHNjcmlwdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRFbCA9XG4gICAgICAgICAgLyoqIEB0eXBlIHshSFRNTFNjcmlwdEVsZW1lbnR9ICovIChkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpO1xuICAgICAgc2NyaXB0RWwuZGVmZXIgPSBnb29nLkRlcGVuZGVuY3kuZGVmZXJfO1xuICAgICAgc2NyaXB0RWwuYXN5bmMgPSBmYWxzZTtcblxuICAgICAgLy8gSWYgQ1NQIG5vbmNlcyBhcmUgdXNlZCwgcHJvcGFnYXRlIHRoZW0gdG8gZHluYW1pY2FsbHkgY3JlYXRlZCBzY3JpcHRzLlxuICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gYWxsb3cgbm9uY2UtYmFzZWQgQ1NQcyB3aXRob3V0ICdzdHJpY3QtZHluYW1pYycuXG4gICAgICBpZiAobm9uY2UpIHtcbiAgICAgICAgc2NyaXB0RWwubm9uY2UgPSBub25jZTtcbiAgICAgIH1cblxuICAgICAgc2NyaXB0RWwub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNjcmlwdEVsLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIGNvbnRyb2xsZXIubG9hZGVkKCk7XG4gICAgICB9O1xuXG4gICAgICBzY3JpcHRFbC5zcmMgPSBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXyA/XG4gICAgICAgICAgZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlU2NyaXB0VVJMKHRoaXMucGF0aCkgOlxuICAgICAgICAgIHRoaXMucGF0aDtcbiAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdEVsKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQWJzb2x1dGUgcGF0aCBvZiB0aGlzIHNjcmlwdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCBQYXRoIG9mIHRoaXMgc2NyaXB0IHJlbGF0aXZlIHRvIGdvb2cuYmFzZVBhdGguXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHByb3ZpZGVzIFNob3VsZCBiZSBhbiBlbXB0eSBhcnJheS5cbiAgICogICAgIFRPRE8oam9obnBsYWlzdGVkKSBhZGQgc3VwcG9ydCBmb3IgYWRkaW5nIGNsb3N1cmUgbmFtZXNwYWNlcyB0byBFUzZcbiAgICogICAgIG1vZHVsZXMgZm9yIGludGVyb3AgcHVycG9zZXMuXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHJlcXVpcmVzIGdvb2cgc3ltYm9scyBvciByZWxhdGl2ZSBwYXRocyB0byBDbG9zdXJlXG4gICAqICAgICB0aGlzIGRlcGVuZHMgb24uXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IGxvYWRGbGFnc1xuICAgKiBAc3RydWN0IEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7Z29vZy5EZXBlbmRlbmN5fVxuICAgKi9cbiAgZ29vZy5FczZNb2R1bGVEZXBlbmRlbmN5ID0gZnVuY3Rpb24oXG4gICAgICBwYXRoLCByZWxhdGl2ZVBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgbG9hZEZsYWdzKSB7XG4gICAgZ29vZy5FczZNb2R1bGVEZXBlbmRlbmN5LmJhc2UoXG4gICAgICAgIHRoaXMsICdjb25zdHJ1Y3RvcicsIHBhdGgsIHJlbGF0aXZlUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBsb2FkRmxhZ3MpO1xuICB9O1xuICBnb29nLmluaGVyaXRzKGdvb2cuRXM2TW9kdWxlRGVwZW5kZW5jeSwgZ29vZy5EZXBlbmRlbmN5KTtcblxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHshZ29vZy5Mb2FkQ29udHJvbGxlcn0gY29udHJvbGxlclxuICAgKi9cbiAgZ29vZy5FczZNb2R1bGVEZXBlbmRlbmN5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQpIHtcbiAgICAgIGlmIChnb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQodGhpcy5wYXRoKSkge1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZ29vZy5pbkh0bWxEb2N1bWVudF8oKSkge1xuICAgICAgZ29vZy5sb2dUb0NvbnNvbGVfKFxuICAgICAgICAgICdDYW5ub3QgdXNlIGRlZmF1bHQgZGVidWcgbG9hZGVyIG91dHNpZGUgb2YgSFRNTCBkb2N1bWVudHMuJyk7XG4gICAgICBjb250cm9sbGVyLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHshSFRNTERvY3VtZW50fSAqL1xuICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcblxuICAgIHZhciBkZXAgPSB0aGlzO1xuXG4gICAgLy8gVE9ETyhqb2hucGxhaXN0ZWQpOiBEb2VzIGRvY3VtZW50LndyaXRpbmcgcmVhbGx5IHNwZWVkIHVwIGFueXRoaW5nPyBBbnlcbiAgICAvLyBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBhbmQganVzdCB3YWl0aW5nIGZvciBpbnRlcmFjdGl2ZSBtb2RlIGFuZCB0aGVuXG4gICAgLy8gYXBwZW5kaW5nP1xuICAgIGZ1bmN0aW9uIHdyaXRlKHNyYywgY29udGVudHMpIHtcbiAgICAgIHZhciBub25jZUF0dHIgPSAnJztcbiAgICAgIHZhciBub25jZSA9IGdvb2cuZ2V0U2NyaXB0Tm9uY2VfKCk7XG4gICAgICBpZiAobm9uY2UpIHtcbiAgICAgICAgbm9uY2VBdHRyID0gJyBub25jZT1cIicgKyBub25jZSArICdcIic7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZW50cykge1xuICAgICAgICB2YXIgc2NyaXB0ID0gJzxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIGNyb3Nzb3JpZ2luJyArIG5vbmNlQXR0ciArICc+JyArXG4gICAgICAgICAgICBjb250ZW50cyArICc8LycgK1xuICAgICAgICAgICAgJ3NjcmlwdD4nO1xuICAgICAgICBkb2Mud3JpdGUoXG4gICAgICAgICAgICBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXyA/XG4gICAgICAgICAgICAgICAgZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlSFRNTChzY3JpcHQpIDpcbiAgICAgICAgICAgICAgICBzY3JpcHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNjcmlwdCA9ICc8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCInICsgc3JjICsgJ1wiJyArXG4gICAgICAgICAgICBub25jZUF0dHIgKyAnPjwvJyArXG4gICAgICAgICAgICAnc2NyaXB0Pic7XG4gICAgICAgIGRvYy53cml0ZShcbiAgICAgICAgICAgIGdvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfID9cbiAgICAgICAgICAgICAgICBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXy5jcmVhdGVIVE1MKHNjcmlwdCkgOlxuICAgICAgICAgICAgICAgIHNjcmlwdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kKHNyYywgY29udGVudHMpIHtcbiAgICAgIHZhciBzY3JpcHRFbCA9XG4gICAgICAgICAgLyoqIEB0eXBlIHshSFRNTFNjcmlwdEVsZW1lbnR9ICovIChkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpO1xuICAgICAgc2NyaXB0RWwuZGVmZXIgPSB0cnVlO1xuICAgICAgc2NyaXB0RWwuYXN5bmMgPSBmYWxzZTtcbiAgICAgIHNjcmlwdEVsLnR5cGUgPSAnbW9kdWxlJztcbiAgICAgIHNjcmlwdEVsLnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCB0cnVlKTtcblxuICAgICAgLy8gSWYgQ1NQIG5vbmNlcyBhcmUgdXNlZCwgcHJvcGFnYXRlIHRoZW0gdG8gZHluYW1pY2FsbHkgY3JlYXRlZCBzY3JpcHRzLlxuICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gYWxsb3cgbm9uY2UtYmFzZWQgQ1NQcyB3aXRob3V0ICdzdHJpY3QtZHluYW1pYycuXG4gICAgICB2YXIgbm9uY2UgPSBnb29nLmdldFNjcmlwdE5vbmNlXygpO1xuICAgICAgaWYgKG5vbmNlKSB7XG4gICAgICAgIHNjcmlwdEVsLm5vbmNlID0gbm9uY2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZW50cykge1xuICAgICAgICBzY3JpcHRFbC50ZXh0ID0gZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8gP1xuICAgICAgICAgICAgZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8uY3JlYXRlU2NyaXB0KGNvbnRlbnRzKSA6XG4gICAgICAgICAgICBjb250ZW50cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcmlwdEVsLnNyYyA9IGdvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfID9cbiAgICAgICAgICAgIGdvb2cuVFJVU1RFRF9UWVBFU19QT0xJQ1lfLmNyZWF0ZVNjcmlwdFVSTChzcmMpIDpcbiAgICAgICAgICAgIHNyYztcbiAgICAgIH1cblxuICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0RWwpO1xuICAgIH1cblxuICAgIHZhciBjcmVhdGU7XG5cbiAgICBpZiAoZ29vZy5pc0RvY3VtZW50TG9hZGluZ18oKSkge1xuICAgICAgY3JlYXRlID0gd3JpdGU7XG4gICAgICAvLyBXZSBjYW4gT05MWSBjYWxsIGRvY3VtZW50LndyaXRlIGlmIHdlIGFyZSBndWFyYW50ZWVkIHRoYXQgYW55XG4gICAgICAvLyBub24tbW9kdWxlIHNjcmlwdCB0YWdzIGRvY3VtZW50LndyaXR0ZW4gYWZ0ZXIgdGhpcyBhcmUgZGVmZXJyZWQuXG4gICAgICAvLyBTbWFsbCBvcHRpbWl6YXRpb24sIGluIHRoZW9yeSBkb2N1bWVudC53cml0aW5nIGlzIGZhc3Rlci5cbiAgICAgIGdvb2cuRGVwZW5kZW5jeS5kZWZlcl8gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGUgPSBhcHBlbmQ7XG4gICAgfVxuXG4gICAgLy8gV3JpdGUgNCBzZXBhcmF0ZSB0YWdzIGhlcmU6XG4gICAgLy8gMSkgU2V0cyB0aGUgbW9kdWxlIHN0YXRlIGF0IHRoZSBjb3JyZWN0IHRpbWUgKGp1c3QgYmVmb3JlIGV4ZWN1dGlvbikuXG4gICAgLy8gMikgQSBzcmMgbm9kZSBmb3IgdGhpcywgd2hpY2gganVzdCBob3BlZnVsbHkgbGV0cyB0aGUgYnJvd3NlciBsb2FkIGl0IGFcbiAgICAvLyAgICBsaXR0bGUgZWFybHkgKG5vIG5lZWQgdG8gcGFyc2UgIzMpLlxuICAgIC8vIDMpIEltcG9ydCB0aGUgbW9kdWxlIGFuZCByZWdpc3RlciBpdC5cbiAgICAvLyA0KSBDbGVhciB0aGUgbW9kdWxlIHN0YXRlIGF0IHRoZSBjb3JyZWN0IHRpbWUuIEd1YXJhbnRlZWQgdG8gcnVuIGV2ZW5cbiAgICAvLyAgICBpZiB0aGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgbW9kdWxlICgjMyB3aWxsIG5vdCBydW4gaWYgdGhlcmUgaXMgYW5cbiAgICAvLyAgICBlcnJvciBpbiB0aGUgbW9kdWxlKS5cbiAgICB2YXIgYmVmb3JlS2V5ID0gZ29vZy5EZXBlbmRlbmN5LnJlZ2lzdGVyQ2FsbGJhY2tfKGZ1bmN0aW9uKCkge1xuICAgICAgZ29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18oYmVmb3JlS2V5KTtcbiAgICAgIGNvbnRyb2xsZXIuc2V0TW9kdWxlU3RhdGUoZ29vZy5Nb2R1bGVUeXBlLkVTNik7XG4gICAgfSk7XG4gICAgY3JlYXRlKHVuZGVmaW5lZCwgJ2dvb2cuRGVwZW5kZW5jeS5jYWxsYmFja18oXCInICsgYmVmb3JlS2V5ICsgJ1wiKScpO1xuXG4gICAgLy8gVE9ETyhqb2hucGxhaXN0ZWQpOiBEb2VzIHRoaXMgcmVhbGx5IHNwZWVkIHVwIGFueXRoaW5nP1xuICAgIGNyZWF0ZSh0aGlzLnBhdGgsIHVuZGVmaW5lZCk7XG5cbiAgICB2YXIgcmVnaXN0ZXJLZXkgPSBnb29nLkRlcGVuZGVuY3kucmVnaXN0ZXJDYWxsYmFja18oZnVuY3Rpb24oZXhwb3J0cykge1xuICAgICAgZ29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18ocmVnaXN0ZXJLZXkpO1xuICAgICAgY29udHJvbGxlci5yZWdpc3RlckVzNk1vZHVsZUV4cG9ydHMoXG4gICAgICAgICAgZGVwLnBhdGgsIGV4cG9ydHMsIGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWUpO1xuICAgIH0pO1xuICAgIGNyZWF0ZShcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAnaW1wb3J0ICogYXMgbSBmcm9tIFwiJyArIHRoaXMucGF0aCArICdcIjsgZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrXyhcIicgK1xuICAgICAgICAgICAgcmVnaXN0ZXJLZXkgKyAnXCIsIG0pJyk7XG5cbiAgICB2YXIgYWZ0ZXJLZXkgPSBnb29nLkRlcGVuZGVuY3kucmVnaXN0ZXJDYWxsYmFja18oZnVuY3Rpb24oKSB7XG4gICAgICBnb29nLkRlcGVuZGVuY3kudW5yZWdpc3RlckNhbGxiYWNrXyhhZnRlcktleSk7XG4gICAgICBjb250cm9sbGVyLmNsZWFyTW9kdWxlU3RhdGUoKTtcbiAgICAgIGNvbnRyb2xsZXIubG9hZGVkKCk7XG4gICAgfSk7XG4gICAgY3JlYXRlKHVuZGVmaW5lZCwgJ2dvb2cuRGVwZW5kZW5jeS5jYWxsYmFja18oXCInICsgYWZ0ZXJLZXkgKyAnXCIpJyk7XG4gIH07XG5cblxuICAvKipcbiAgICogU3VwZXJjbGFzcyBvZiBhbnkgZGVwZW5kZW5jeSB0aGF0IG5lZWRzIHRvIGJlIGxvYWRlZCBpbnRvIG1lbW9yeSxcbiAgICogdHJhbnNmb3JtZWQsIGFuZCB0aGVuIGV2YWwnZCAoZ29vZy5tb2R1bGVzIGFuZCB0cmFuc3BpbGVkIGZpbGVzKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQWJzb2x1dGUgcGF0aCBvZiB0aGlzIHNjcmlwdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCBQYXRoIG9mIHRoaXMgc2NyaXB0IHJlbGF0aXZlIHRvIGdvb2cuYmFzZVBhdGguXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHByb3ZpZGVzIGdvb2cucHJvdmlkZWQgb3IgZ29vZy5tb2R1bGUgc3ltYm9sc1xuICAgKiAgICAgaW4gdGhpcyBmaWxlLlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSByZXF1aXJlcyBnb29nIHN5bWJvbHMgb3IgcmVsYXRpdmUgcGF0aHMgdG8gQ2xvc3VyZVxuICAgKiAgICAgdGhpcyBkZXBlbmRzIG9uLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBsb2FkRmxhZ3NcbiAgICogQHN0cnVjdCBAY29uc3RydWN0b3IgQGFic3RyYWN0XG4gICAqIEBleHRlbmRzIHtnb29nLkRlcGVuZGVuY3l9XG4gICAqL1xuICBnb29nLlRyYW5zZm9ybWVkRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKFxuICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncykge1xuICAgIGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5LmJhc2UoXG4gICAgICAgIHRoaXMsICdjb25zdHJ1Y3RvcicsIHBhdGgsIHJlbGF0aXZlUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBsb2FkRmxhZ3MpO1xuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLmNvbnRlbnRzXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGxhemlseSBtYWtlIHRoZSBzeW5jaHJvbm91cyBYSFIgKHdoZW4gZ29vZy5yZXF1aXJlJ2QpIG9yIG1ha2VcbiAgICAgKiB0aGUgc3luY2hyb25vdXMgWEhSIHdoZW4gaW5pdGlhbGx5IGxvYWRpbmcuIE9uIEZpcmVGb3ggNjEgdGhlcmUgaXMgYSBidWdcbiAgICAgKiB3aGVyZSBhbiBFUzYgbW9kdWxlIGNhbm5vdCBtYWtlIGEgc3luY2hyb25vdXMgWEhSIChyYXRoZXIsIGl0IGNhbiwgYnV0IGlmXG4gICAgICogaXQgZG9lcyB0aGVuIG5vIG90aGVyIEVTNiBtb2R1bGVzIHdpbGwgbG9hZCBhZnRlcikuXG4gICAgICpcbiAgICAgKiB0bDtkciB3ZSBsYXp5IGxvYWQgZHVlIHRvIGJ1Z3Mgb24gb2xkZXIgYnJvd3NlcnMgYW5kIGVhZ2VyIGxvYWQgZHVlIHRvXG4gICAgICogYnVncyBvbiBuZXdlciBvbmVzLlxuICAgICAqXG4gICAgICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQ3NzA5MFxuICAgICAqXG4gICAgICogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMubGF6eUZldGNoXyA9ICFnb29nLmluSHRtbERvY3VtZW50XygpIHx8XG4gICAgICAgICEoJ25vTW9kdWxlJyBpbiBnb29nLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSk7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHMoZ29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3ksIGdvb2cuRGVwZW5kZW5jeSk7XG5cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7IWdvb2cuTG9hZENvbnRyb2xsZXJ9IGNvbnRyb2xsZXJcbiAgICovXG4gIGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgIHZhciBkZXAgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZmV0Y2goKSB7XG4gICAgICBkZXAuY29udGVudHNfID0gZ29vZy5sb2FkRmlsZVN5bmNfKGRlcC5wYXRoKTtcblxuICAgICAgaWYgKGRlcC5jb250ZW50c18pIHtcbiAgICAgICAgZGVwLmNvbnRlbnRzXyA9IGRlcC50cmFuc2Zvcm0oZGVwLmNvbnRlbnRzXyk7XG4gICAgICAgIGlmIChkZXAuY29udGVudHNfKSB7XG4gICAgICAgICAgZGVwLmNvbnRlbnRzXyArPSAnXFxuLy8jIHNvdXJjZVVSTD0nICsgZGVwLnBhdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUKSB7XG4gICAgICBmZXRjaCgpO1xuICAgICAgaWYgKHRoaXMuY29udGVudHNfICYmXG4gICAgICAgICAgZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUKCcnLCB0aGlzLmNvbnRlbnRzXykpIHtcbiAgICAgICAgdGhpcy5jb250ZW50c18gPSBudWxsO1xuICAgICAgICBjb250cm9sbGVyLmxvYWRlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgdmFyIGlzRXM2ID0gdGhpcy5sb2FkRmxhZ3NbJ21vZHVsZSddID09IGdvb2cuTW9kdWxlVHlwZS5FUzY7XG5cbiAgICBpZiAoIXRoaXMubGF6eUZldGNoXykge1xuICAgICAgZmV0Y2goKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkKCkge1xuICAgICAgaWYgKGRlcC5sYXp5RmV0Y2hfKSB7XG4gICAgICAgIGZldGNoKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZGVwLmNvbnRlbnRzXykge1xuICAgICAgICAvLyBsb2FkRmlsZVN5bmNfIG9yIHRyYW5zZm9ybSBhcmUgcmVzcG9uc2libGUuIEFzc3VtZSB0aGV5IGxvZ2dlZCBhblxuICAgICAgICAvLyBlcnJvci5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFczYpIHtcbiAgICAgICAgY29udHJvbGxlci5zZXRNb2R1bGVTdGF0ZShnb29nLk1vZHVsZVR5cGUuRVM2KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWVzcGFjZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGNvbnRlbnRzID0gZGVwLmNvbnRlbnRzXztcbiAgICAgICAgZGVwLmNvbnRlbnRzXyA9IG51bGw7XG4gICAgICAgIGdvb2cuZ2xvYmFsRXZhbChnb29nLkNMT1NVUkVfRVZBTF9QUkVGSUxURVJfLmNyZWF0ZVNjcmlwdChjb250ZW50cykpO1xuICAgICAgICBpZiAoaXNFczYpIHtcbiAgICAgICAgICBuYW1lc3BhY2UgPSBnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoaXNFczYpIHtcbiAgICAgICAgICBjb250cm9sbGVyLmNsZWFyTW9kdWxlU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNFczYpIHtcbiAgICAgICAgLy8gRHVlIHRvIGNpcmN1bGFyIGRlcGVuZGVuY2llcyB0aGlzIG1heSBub3QgYmUgYXZhaWxhYmxlIGZvciByZXF1aXJlXG4gICAgICAgIC8vIHJpZ2h0IG5vdy5cbiAgICAgICAgZ29vZy5nbG9iYWxbJyRqc2NvbXAnXVsncmVxdWlyZSddWydlbnN1cmUnXShcbiAgICAgICAgICAgIFtkZXAuZ2V0UGF0aE5hbWUoKV0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLnJlZ2lzdGVyRXM2TW9kdWxlRXhwb3J0cyhcbiAgICAgICAgICAgICAgICAgIGRlcC5wYXRoLFxuICAgICAgICAgICAgICAgICAgZ29vZy5nbG9iYWxbJyRqc2NvbXAnXVsncmVxdWlyZSddKGRlcC5nZXRQYXRoTmFtZSgpKSxcbiAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29udHJvbGxlci5sb2FkZWQoKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgZmV0Y2ggbm93OyBpbiBGaXJlRm94IDQ3IHRoZSBzeW5jaHJvbm91cyBYSFIgZG9lc24ndCBibG9jayBhbGxcbiAgICAvLyBldmVudHMuIElmIHdlIGZldGNoZWQgbm93IGFuZCB0aGVuIGRvY3VtZW50LndyaXRlJ2QgdGhlIGNvbnRlbnRzIHRoZVxuICAgIC8vIGRvY3VtZW50LndyaXRlIHdvdWxkIGJlIGFuIGV2YWwgYW5kIHdvdWxkIGV4ZWN1dGUgdG9vIHNvb24hIEluc3RlYWQgd3JpdGVcbiAgICAvLyBhIHNjcmlwdCB0YWcgdG8gZmV0Y2ggYW5kIGV2YWwgc3luY2hyb25vdXNseSBhdCB0aGUgY29ycmVjdCB0aW1lLlxuICAgIGZ1bmN0aW9uIGZldGNoSW5Pd25TY3JpcHRUaGVuTG9hZCgpIHtcbiAgICAgIC8qKiBAdHlwZSB7IUhUTUxEb2N1bWVudH0gKi9cbiAgICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcblxuICAgICAgdmFyIGtleSA9IGdvb2cuRGVwZW5kZW5jeS5yZWdpc3RlckNhbGxiYWNrXyhmdW5jdGlvbigpIHtcbiAgICAgICAgZ29vZy5EZXBlbmRlbmN5LnVucmVnaXN0ZXJDYWxsYmFja18oa2V5KTtcbiAgICAgICAgbG9hZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBub25jZSA9IGdvb2cuZ2V0U2NyaXB0Tm9uY2VfKCk7XG4gICAgICB2YXIgbm9uY2VBdHRyID0gbm9uY2UgPyAnIG5vbmNlPVwiJyArIG5vbmNlICsgJ1wiJyA6ICcnO1xuICAgICAgdmFyIHNjcmlwdCA9ICc8c2NyaXB0JyArIG5vbmNlQXR0ciArICc+JyArXG4gICAgICAgICAgZ29vZy5wcm90ZWN0U2NyaXB0VGFnXygnZ29vZy5EZXBlbmRlbmN5LmNhbGxiYWNrXyhcIicgKyBrZXkgKyAnXCIpOycpICtcbiAgICAgICAgICAnPC8nICtcbiAgICAgICAgICAnc2NyaXB0Pic7XG4gICAgICBkb2Mud3JpdGUoXG4gICAgICAgICAgZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8gP1xuICAgICAgICAgICAgICBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZXy5jcmVhdGVIVE1MKHNjcmlwdCkgOlxuICAgICAgICAgICAgICBzY3JpcHQpO1xuICAgIH1cblxuICAgIC8vIElmIG9uZSB0aGluZyBpcyBwZW5kaW5nIGl0IGlzIHRoaXMuXG4gICAgdmFyIGFueXRoaW5nRWxzZVBlbmRpbmcgPSBjb250cm9sbGVyLnBlbmRpbmcoKS5sZW5ndGggPiAxO1xuXG4gICAgLy8gQWRkaXRpb25hbGx5IGlmIHdlIGFyZSBtZWFudCB0byBkZWZlciBzY3JpcHRzIGJ1dCB0aGUgcGFnZSBpcyBzdGlsbFxuICAgIC8vIGxvYWRpbmcgKGUuZy4gYW4gRVM2IG1vZHVsZSBpcyBsb2FkaW5nKSB0aGVuIGFsc28gZGVmZXIuIE9yIGlmIHdlIGFyZVxuICAgIC8vIG1lYW50IHRvIGRlZmVyIGFuZCBhbnl0aGluZyBlbHNlIGlzIHBlbmRpbmcgdGhlbiBkZWZlciAodGhvc2UgbWF5IGJlXG4gICAgLy8gc2NyaXB0cyB0aGF0IGRpZCBub3QgbmVlZCB0cmFuc2Zvcm1hdGlvbiBhbmQgYXJlIGp1c3Qgc2NyaXB0IHRhZ3Mgd2l0aFxuICAgIC8vIGRlZmVyIHNldCB0byB0cnVlLCBhbmQgd2UgbmVlZCB0byBldmFsdWF0ZSBhZnRlciB0aGF0IGRlZmVycmVkIHNjcmlwdCkuXG4gICAgdmFyIG5lZWRzQXN5bmNMb2FkaW5nID0gZ29vZy5EZXBlbmRlbmN5LmRlZmVyXyAmJlxuICAgICAgICAoYW55dGhpbmdFbHNlUGVuZGluZyB8fCBnb29nLmlzRG9jdW1lbnRMb2FkaW5nXygpKTtcblxuICAgIGlmIChuZWVkc0FzeW5jTG9hZGluZykge1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIG9ubHkgZGVmZXIgd2hlbiB3ZSBoYXZlIHRvIHJhdGhlciB0aGFuIDEwMCUgb2YgdGhlIHRpbWUuXG4gICAgICAvLyBBbHdheXMgZGVmZXJpbmcgd291bGQgd29yaywgYnV0IHRoZW4gaW4gdGhlb3J5IHRoZSBvcmRlciBvZlxuICAgICAgLy8gZ29vZy5yZXF1aXJlIGNhbGxzIHdvdWxkIHRoZW4gbWF0dGVyLiBXZSB3YW50IHRvIGVuZm9yY2UgdGhhdCBtb3N0IG9mXG4gICAgICAvLyB0aGUgdGltZSB0aGUgb3JkZXIgb2YgdGhlIHJlcXVpcmUgY2FsbHMgZG9lcyBub3QgbWF0dGVyLlxuICAgICAgY29udHJvbGxlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFRPRE8oam9obnBsYWlzdGVkKTogRXh0ZXJucyBhcmUgbWlzc2luZyBvbnJlYWR5c3RhdGVjaGFuZ2UgZm9yXG4gICAgLy8gSFRNTERvY3VtZW50LlxuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XG5cbiAgICB2YXIgaXNJbnRlcm5ldEV4cGxvcmVyT3JFZGdlID0gZ29vZy5pbkh0bWxEb2N1bWVudF8oKSAmJlxuICAgICAgICAoJ0FjdGl2ZVhPYmplY3QnIGluIGdvb2cuZ2xvYmFsIHx8IGdvb2cuaXNFZGdlXygpKTtcblxuICAgIC8vIERvbid0IGRlbGF5IGluIGFueSB2ZXJzaW9uIG9mIElFIG9yIHByZS1DaHJvbWl1bSBFZGdlLiBUaGVyZSdzIGEgYnVnXG4gICAgLy8gYXJvdW5kIHRoaXMgdGhhdCB3aWxsIGNhdXNlIG91dCBvZiBvcmRlciBzY3JpcHQgZXhlY3V0aW9uLiBUaGlzIG1lYW5zXG4gICAgLy8gdGhhdCBvbiBvbGRlciBJRSBFUzYgbW9kdWxlcyB3aWxsIGxvYWQgdG9vIGVhcmx5ICh3aGlsZSB0aGUgZG9jdW1lbnQgaXNcbiAgICAvLyBzdGlsbCBsb2FkaW5nICsgdGhlIGRvbSBpcyBub3QgYXZhaWxhYmxlKS4gVGhlIG90aGVyIG9wdGlvbiBpcyB0byBsb2FkXG4gICAgLy8gdG9vIGxhdGUgKHdoZW4gdGhlIGRvY3VtZW50IGlzIGNvbXBsZXRlIGFuZCB0aGUgb25sb2FkIGV2ZW4gd2lsbCBuZXZlclxuICAgIC8vIGZpcmUpLiBUaGlzIHNlZW1zIHRvIGJlIHRoZSBsZXNzZXIgb2YgdHdvIGV2aWxzIGFzIHNjcmlwdHMgYWxyZWFkeSBhY3RcbiAgICAvLyBsaWtlIHRoZSBmb3JtZXIuXG4gICAgaWYgKGlzRXM2ICYmIGdvb2cuaW5IdG1sRG9jdW1lbnRfKCkgJiYgZ29vZy5pc0RvY3VtZW50TG9hZGluZ18oKSAmJlxuICAgICAgICAhaXNJbnRlcm5ldEV4cGxvcmVyT3JFZGdlKSB7XG4gICAgICBnb29nLkRlcGVuZGVuY3kuZGVmZXJfID0gdHJ1ZTtcbiAgICAgIC8vIFRyYW5zcGlsZWQgRVM2IG1vZHVsZXMgc3RpbGwgbmVlZCB0byBsb2FkIGxpa2UgcmVndWxhciBFUzYgbW9kdWxlcyxcbiAgICAgIC8vIGFrYSBvbmx5IGFmdGVyIHRoZSBkb2N1bWVudCBpcyBpbnRlcmFjdGl2ZS5cbiAgICAgIGNvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgIHZhciBvbGRDYWxsYmFjayA9IGRvYy5vbnJlYWR5c3RhdGVjaGFuZ2U7XG4gICAgICBkb2Mub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChkb2MucmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgICAgICAgZG9jLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG9sZENhbGxiYWNrO1xuICAgICAgICAgIGxvYWQoKTtcbiAgICAgICAgICBjb250cm9sbGVyLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2xkQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvbGRDYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFsd2F5cyBldmFsIG9uIG9sZCBJRS5cbiAgICAgIGlmICghZ29vZy5pbkh0bWxEb2N1bWVudF8oKSB8fCAhZ29vZy5pc0RvY3VtZW50TG9hZGluZ18oKSkge1xuICAgICAgICBsb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaEluT3duU2NyaXB0VGhlbkxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBnb29nLlRyYW5zZm9ybWVkRGVwZW5kZW5jeS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oY29udGVudHMpIHt9O1xuXG5cbiAgLyoqXG4gICAqIEFueSBub24tZ29vZy5tb2R1bGUgZGVwZW5kZW5jeSB3aGljaCBuZWVkcyB0byBiZSB0cmFuc3BpbGVkIGJlZm9yZSBldmFsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBBYnNvbHV0ZSBwYXRoIG9mIHRoaXMgc2NyaXB0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVQYXRoIFBhdGggb2YgdGhpcyBzY3JpcHQgcmVsYXRpdmUgdG8gZ29vZy5iYXNlUGF0aC5cbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvdmlkZXMgZ29vZy5wcm92aWRlZCBvciBnb29nLm1vZHVsZSBzeW1ib2xzXG4gICAqICAgICBpbiB0aGlzIGZpbGUuXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHJlcXVpcmVzIGdvb2cgc3ltYm9scyBvciByZWxhdGl2ZSBwYXRocyB0byBDbG9zdXJlXG4gICAqICAgICB0aGlzIGRlcGVuZHMgb24uXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IGxvYWRGbGFnc1xuICAgKiBAcGFyYW0geyFnb29nLlRyYW5zcGlsZXJ9IHRyYW5zcGlsZXJcbiAgICogQHN0cnVjdCBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge2dvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5fVxuICAgKi9cbiAgZ29vZy5UcmFuc3BpbGVkRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKFxuICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncywgdHJhbnNwaWxlcikge1xuICAgIGdvb2cuVHJhbnNwaWxlZERlcGVuZGVuY3kuYmFzZShcbiAgICAgICAgdGhpcywgJ2NvbnN0cnVjdG9yJywgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncyk7XG4gICAgLyoqIEBwcm90ZWN0ZWQgQGNvbnN0Ki9cbiAgICB0aGlzLnRyYW5zcGlsZXIgPSB0cmFuc3BpbGVyO1xuICB9O1xuICBnb29nLmluaGVyaXRzKGdvb2cuVHJhbnNwaWxlZERlcGVuZGVuY3ksIGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5KTtcblxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdvb2cuVHJhbnNwaWxlZERlcGVuZGVuY3kucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbnRlbnRzKSB7XG4gICAgLy8gVHJhbnNwaWxlIHdpdGggdGhlIHBhdGhuYW1lIHNvIHRoYXQgRVM2IG1vZHVsZXMgYXJlIGRvbWFpbiBhZ25vc3RpYy5cbiAgICByZXR1cm4gdGhpcy50cmFuc3BpbGVyLnRyYW5zcGlsZShjb250ZW50cywgdGhpcy5nZXRQYXRoTmFtZSgpKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBBbiBFUzYgbW9kdWxlIGRlcGVuZGVuY3kgdGhhdCB3YXMgdHJhbnNwaWxlZCB0byBhIGpzY29tcCBtb2R1bGUgb3V0c2lkZVxuICAgKiBvZiB0aGUgZGVidWcgbG9hZGVyLCBlLmcuIHNlcnZlciBzaWRlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBBYnNvbHV0ZSBwYXRoIG9mIHRoaXMgc2NyaXB0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVQYXRoIFBhdGggb2YgdGhpcyBzY3JpcHQgcmVsYXRpdmUgdG8gZ29vZy5iYXNlUGF0aC5cbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvdmlkZXMgZ29vZy5wcm92aWRlZCBvciBnb29nLm1vZHVsZSBzeW1ib2xzXG4gICAqICAgICBpbiB0aGlzIGZpbGUuXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHJlcXVpcmVzIGdvb2cgc3ltYm9scyBvciByZWxhdGl2ZSBwYXRocyB0byBDbG9zdXJlXG4gICAqICAgICB0aGlzIGRlcGVuZHMgb24uXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IGxvYWRGbGFnc1xuICAgKiBAc3RydWN0IEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7Z29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3l9XG4gICAqL1xuICBnb29nLlByZVRyYW5zcGlsZWRFczZNb2R1bGVEZXBlbmRlbmN5ID0gZnVuY3Rpb24oXG4gICAgICBwYXRoLCByZWxhdGl2ZVBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgbG9hZEZsYWdzKSB7XG4gICAgZ29vZy5QcmVUcmFuc3BpbGVkRXM2TW9kdWxlRGVwZW5kZW5jeS5iYXNlKFxuICAgICAgICB0aGlzLCAnY29uc3RydWN0b3InLCBwYXRoLCByZWxhdGl2ZVBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgbG9hZEZsYWdzKTtcbiAgfTtcbiAgZ29vZy5pbmhlcml0cyhcbiAgICAgIGdvb2cuUHJlVHJhbnNwaWxlZEVzNk1vZHVsZURlcGVuZGVuY3ksIGdvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5KTtcblxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdvb2cuUHJlVHJhbnNwaWxlZEVzNk1vZHVsZURlcGVuZGVuY3kucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKFxuICAgICAgY29udGVudHMpIHtcbiAgICByZXR1cm4gY29udGVudHM7XG4gIH07XG5cblxuICAvKipcbiAgICogQSBnb29nLm1vZHVsZSwgdHJhbnNwaWxlZCBvciBub3QuIFdpbGwgYWx3YXlzIHBlcmZvcm0gc29tZSBtaW5pbWFsXG4gICAqIHRyYW5zZm9ybWF0aW9uIGV2ZW4gd2hlbiBub3QgdHJhbnNwaWxlZCB0byB3cmFwIGluIGEgZ29vZy5sb2FkTW9kdWxlXG4gICAqIHN0YXRlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggQWJzb2x1dGUgcGF0aCBvZiB0aGlzIHNjcmlwdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCBQYXRoIG9mIHRoaXMgc2NyaXB0IHJlbGF0aXZlIHRvIGdvb2cuYmFzZVBhdGguXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHByb3ZpZGVzIGdvb2cucHJvdmlkZWQgb3IgZ29vZy5tb2R1bGUgc3ltYm9sc1xuICAgKiAgICAgaW4gdGhpcyBmaWxlLlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSByZXF1aXJlcyBnb29nIHN5bWJvbHMgb3IgcmVsYXRpdmUgcGF0aHMgdG8gQ2xvc3VyZVxuICAgKiAgICAgdGhpcyBkZXBlbmRzIG9uLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBsb2FkRmxhZ3NcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWVkc1RyYW5zcGlsZVxuICAgKiBAcGFyYW0geyFnb29nLlRyYW5zcGlsZXJ9IHRyYW5zcGlsZXJcbiAgICogQHN0cnVjdCBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge2dvb2cuVHJhbnNmb3JtZWREZXBlbmRlbmN5fVxuICAgKi9cbiAgZ29vZy5Hb29nTW9kdWxlRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKFxuICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncywgbmVlZHNUcmFuc3BpbGUsXG4gICAgICB0cmFuc3BpbGVyKSB7XG4gICAgZ29vZy5Hb29nTW9kdWxlRGVwZW5kZW5jeS5iYXNlKFxuICAgICAgICB0aGlzLCAnY29uc3RydWN0b3InLCBwYXRoLCByZWxhdGl2ZVBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgbG9hZEZsYWdzKTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0ICovXG4gICAgdGhpcy5uZWVkc1RyYW5zcGlsZV8gPSBuZWVkc1RyYW5zcGlsZTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0ICovXG4gICAgdGhpcy50cmFuc3BpbGVyXyA9IHRyYW5zcGlsZXI7XG4gIH07XG4gIGdvb2cuaW5oZXJpdHMoZ29vZy5Hb29nTW9kdWxlRGVwZW5kZW5jeSwgZ29vZy5UcmFuc2Zvcm1lZERlcGVuZGVuY3kpO1xuXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudHNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ29vZy5Hb29nTW9kdWxlRGVwZW5kZW5jeS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oY29udGVudHMpIHtcbiAgICBpZiAodGhpcy5uZWVkc1RyYW5zcGlsZV8pIHtcbiAgICAgIGNvbnRlbnRzID0gdGhpcy50cmFuc3BpbGVyXy50cmFuc3BpbGUoY29udGVudHMsIHRoaXMuZ2V0UGF0aE5hbWUoKSk7XG4gICAgfVxuXG4gICAgaWYgKCFnb29nLkxPQURfTU9EVUxFX1VTSU5HX0VWQUwgfHwgZ29vZy5nbG9iYWwuSlNPTiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICdnb29nLmxvYWRNb2R1bGUoZnVuY3Rpb24oZXhwb3J0cykgeycgK1xuICAgICAgICAgICdcInVzZSBzdHJpY3RcIjsnICsgY29udGVudHMgK1xuICAgICAgICAgICdcXG4nICsgIC8vIHRlcm1pbmF0ZSBhbnkgdHJhaWxpbmcgc2luZ2xlIGxpbmUgY29tbWVudC5cbiAgICAgICAgICAnO3JldHVybiBleHBvcnRzJyArXG4gICAgICAgICAgJ30pOycgK1xuICAgICAgICAgICdcXG4vLyMgc291cmNlVVJMPScgKyB0aGlzLnBhdGggKyAnXFxuJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnICtcbiAgICAgICAgICAnZ29vZy5sb2FkTW9kdWxlKCcgK1xuICAgICAgICAgIGdvb2cuZ2xvYmFsLkpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICBjb250ZW50cyArICdcXG4vLyMgc291cmNlVVJMPScgKyB0aGlzLnBhdGggKyAnXFxuJykgK1xuICAgICAgICAgICcpOyc7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWxQYXRoXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz58dW5kZWZpbmVkfSBwcm92aWRlc1xuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSByZXF1aXJlc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW58IU9iamVjdDxzdHJpbmc+PX0gb3B0X2xvYWRGbGFnc1xuICAgKiBAc2VlIGdvb2cuYWRkRGVwZW5kZW5jeVxuICAgKi9cbiAgZ29vZy5EZWJ1Z0xvYWRlcl8ucHJvdG90eXBlLmFkZERlcGVuZGVuY3kgPSBmdW5jdGlvbihcbiAgICAgIHJlbFBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgb3B0X2xvYWRGbGFncykge1xuICAgIHByb3ZpZGVzID0gcHJvdmlkZXMgfHwgW107XG4gICAgcmVsUGF0aCA9IHJlbFBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICAgIHZhciBwYXRoID0gZ29vZy5ub3JtYWxpemVQYXRoXyhnb29nLmJhc2VQYXRoICsgcmVsUGF0aCk7XG4gICAgaWYgKCFvcHRfbG9hZEZsYWdzIHx8IHR5cGVvZiBvcHRfbG9hZEZsYWdzID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG9wdF9sb2FkRmxhZ3MgPSBvcHRfbG9hZEZsYWdzID8geydtb2R1bGUnOiBnb29nLk1vZHVsZVR5cGUuR09PR30gOiB7fTtcbiAgICB9XG4gICAgdmFyIGRlcCA9IHRoaXMuZmFjdG9yeV8uY3JlYXRlRGVwZW5kZW5jeShcbiAgICAgICAgcGF0aCwgcmVsUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBvcHRfbG9hZEZsYWdzLFxuICAgICAgICBnb29nLnRyYW5zcGlsZXJfLm5lZWRzVHJhbnNwaWxlKFxuICAgICAgICAgICAgb3B0X2xvYWRGbGFnc1snbGFuZyddIHx8ICdlczMnLCBvcHRfbG9hZEZsYWdzWydtb2R1bGUnXSkpO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzX1twYXRoXSA9IGRlcDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3ZpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmlkVG9QYXRoX1twcm92aWRlc1tpXV0gPSBwYXRoO1xuICAgIH1cbiAgICB0aGlzLmlkVG9QYXRoX1tyZWxQYXRoXSA9IHBhdGg7XG4gIH07XG5cblxuICAvKipcbiAgICogQ3JlYXRlcyBnb29nLkRlcGVuZGVuY3kgaW5zdGFuY2VzIGZvciB0aGUgZGVidWcgbG9hZGVyIHRvIGxvYWQuXG4gICAqXG4gICAqIFNob3VsZCBiZSBvdmVycmlkZGVuIHRvIGhhdmUgdGhlIGRlYnVnIGxvYWRlciB1c2UgY3VzdG9tIHN1YmNsYXNzZXMgb2ZcbiAgICogZ29vZy5EZXBlbmRlbmN5LlxuICAgKlxuICAgKiBAcGFyYW0geyFnb29nLlRyYW5zcGlsZXJ9IHRyYW5zcGlsZXJcbiAgICogQHN0cnVjdCBAY29uc3RydWN0b3JcbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeUZhY3RvcnkgPSBmdW5jdGlvbih0cmFuc3BpbGVyKSB7XG4gICAgLyoqIEBwcm90ZWN0ZWQgQGNvbnN0ICovXG4gICAgdGhpcy50cmFuc3BpbGVyID0gdHJhbnNwaWxlcjtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBBYnNvbHV0ZSBwYXRoIG9mIHRoZSBmaWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVQYXRoIFBhdGggcmVsYXRpdmUgdG8gY2xvc3VyZeKAmXMgYmFzZS5qcy5cbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvdmlkZXMgQXJyYXkgb2YgcHJvdmlkZWQgZ29vZy5wcm92aWRlL21vZHVsZSBpZHMuXG4gICAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHJlcXVpcmVzIEFycmF5IG9mIHJlcXVpcmVkIGdvb2cucHJvdmlkZS9tb2R1bGUgL1xuICAgKiAgICAgcmVsYXRpdmUgRVM2IG1vZHVsZSBwYXRocy5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gbG9hZEZsYWdzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbmVlZHNUcmFuc3BpbGUgVHJ1ZSBpZiB0aGUgZmlsZSBuZWVkcyB0byBiZSB0cmFuc3BpbGVkXG4gICAqICAgICBwZXIgdGhlIGdvb2cuVHJhbnNwaWxlci5cbiAgICogQHJldHVybiB7IWdvb2cuRGVwZW5kZW5jeX1cbiAgICovXG4gIGdvb2cuRGVwZW5kZW5jeUZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZURlcGVuZGVuY3kgPSBmdW5jdGlvbihcbiAgICAgIHBhdGgsIHJlbGF0aXZlUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBsb2FkRmxhZ3MsIG5lZWRzVHJhbnNwaWxlKSB7XG5cbiAgICBpZiAobG9hZEZsYWdzWydtb2R1bGUnXSA9PSBnb29nLk1vZHVsZVR5cGUuR09PRykge1xuICAgICAgcmV0dXJuIG5ldyBnb29nLkdvb2dNb2R1bGVEZXBlbmRlbmN5KFxuICAgICAgICAgIHBhdGgsIHJlbGF0aXZlUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBsb2FkRmxhZ3MsIG5lZWRzVHJhbnNwaWxlLFxuICAgICAgICAgIHRoaXMudHJhbnNwaWxlcik7XG4gICAgfSBlbHNlIGlmIChuZWVkc1RyYW5zcGlsZSkge1xuICAgICAgcmV0dXJuIG5ldyBnb29nLlRyYW5zcGlsZWREZXBlbmRlbmN5KFxuICAgICAgICAgIHBhdGgsIHJlbGF0aXZlUGF0aCwgcHJvdmlkZXMsIHJlcXVpcmVzLCBsb2FkRmxhZ3MsIHRoaXMudHJhbnNwaWxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb2FkRmxhZ3NbJ21vZHVsZSddID09IGdvb2cuTW9kdWxlVHlwZS5FUzYpIHtcbiAgICAgICAgaWYgKGdvb2cuVFJBTlNQSUxFID09ICduZXZlcicgJiYgZ29vZy5BU1NVTUVfRVNfTU9EVUxFU19UUkFOU1BJTEVEKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBnb29nLlByZVRyYW5zcGlsZWRFczZNb2R1bGVEZXBlbmRlbmN5KFxuICAgICAgICAgICAgICBwYXRoLCByZWxhdGl2ZVBhdGgsIHByb3ZpZGVzLCByZXF1aXJlcywgbG9hZEZsYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbmV3IGdvb2cuRXM2TW9kdWxlRGVwZW5kZW5jeShcbiAgICAgICAgICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgZ29vZy5EZXBlbmRlbmN5KFxuICAgICAgICAgICAgcGF0aCwgcmVsYXRpdmVQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMsIGxvYWRGbGFncyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqIEBwcml2YXRlIEBjb25zdCAqL1xuICBnb29nLmRlYnVnTG9hZGVyXyA9IG5ldyBnb29nLkRlYnVnTG9hZGVyXygpO1xuXG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBDbG9zdXJlIERlcGVuZGVuY3kgZmlsZS5cbiAgICpcbiAgICogRXhwb3NlZCBhIHB1YmxpYyBmdW5jdGlvbiBzbyBDTE9TVVJFX05PX0RFUFMgY2FuIGJlIHNldCB0byBmYWxzZSwgYmFzZVxuICAgKiBsb2FkZWQsIHNldERlcGVuZGVuY3lGYWN0b3J5IGNhbGxlZCwgYW5kIHRoZW4gdGhpcyBjYWxsZWQuIGkuZS4gYWxsb3dzXG4gICAqIGN1c3RvbSBsb2FkaW5nIG9mIHRoZSBkZXBzIGZpbGUuXG4gICAqL1xuICBnb29nLmxvYWRDbG9zdXJlRGVwcyA9IGZ1bmN0aW9uKCkge1xuICAgIGdvb2cuZGVidWdMb2FkZXJfLmxvYWRDbG9zdXJlRGVwcygpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlcGVuZGVuY3kgZmFjdG9yeSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGN1c3RvbVxuICAgKiBnb29nLkRlcGVuZGVuY3kgaW1wbGVtZW50YXRpb25zIHRvIGNvbnRyb2wgaG93IGRlcGVuZGVuY2llcyBhcmUgbG9hZGVkLlxuICAgKlxuICAgKiBOb3RlOiBpZiB5b3Ugd2lzaCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIHByb3ZpZGUgeW91ciBvd24gaW1wbGVtbmV0YXRpb25cbiAgICogaXQgaXMgYSB3aXNlIGlkZWEgdG8gc2V0IENMT1NVUkVfTk9fREVQUyB0byB0cnVlLCBvdGhlcndpc2UgdGhlIGRlcGVuZGVuY3lcbiAgICogZmlsZSBhbmQgYWxsIG9mIGl0cyBnb29nLmFkZERlcGVuZGVuY3kgY2FsbHMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgZmFjdG9yeS5cbiAgICogWW91IGNhbiBjYWxsIGdvb2cubG9hZENsb3N1cmVEZXBzIHRvIGxvYWQgdGhlIENsb3N1cmUgZGVwZW5kZW5jeSBmaWxlXG4gICAqIGxhdGVyLCBhZnRlciB5b3VyIGZhY3RvcnkgaXMgaW5qZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7IWdvb2cuRGVwZW5kZW5jeUZhY3Rvcnl9IGZhY3RvcnlcbiAgICovXG4gIGdvb2cuc2V0RGVwZW5kZW5jeUZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgZ29vZy5kZWJ1Z0xvYWRlcl8uc2V0RGVwZW5kZW5jeUZhY3RvcnkoZmFjdG9yeSk7XG4gIH07XG5cblxuICAvKipcbiAgICogVHJ1c3RlZCBUeXBlcyBwb2xpY3kgZm9yIHRoZSBkZWJ1ZyBsb2FkZXIuXG4gICAqIEBwcml2YXRlIEBjb25zdCB7P1RydXN0ZWRUeXBlUG9saWN5fVxuICAgKi9cbiAgZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV8gPSBnb29nLlRSVVNURURfVFlQRVNfUE9MSUNZX05BTUUgP1xuICAgICAgZ29vZy5jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koZ29vZy5UUlVTVEVEX1RZUEVTX1BPTElDWV9OQU1FICsgJyNiYXNlJykgOlxuICAgICAgbnVsbDtcblxuICBpZiAoIWdvb2cuZ2xvYmFsLkNMT1NVUkVfTk9fREVQUykge1xuICAgIGdvb2cuZGVidWdMb2FkZXJfLmxvYWRDbG9zdXJlRGVwcygpO1xuICB9XG5cblxuICAvKipcbiAgICogQm9vdHN0cmFwcyB0aGUgZ2l2ZW4gbmFtZXNwYWNlcyBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrIG9uY2UgdGhleSBhcmVcbiAgICogYXZhaWxhYmxlIGVpdGhlciB2aWEgZ29vZy5yZXF1aXJlLiBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIHVzaW5nXG4gICAqIGBnb29nLnJlcXVpcmVgIHRvIGJvb3RzdHJhcCBDbG9zdXJlIEphdmFTY3JpcHQuIFByZXZpb3VzbHkgYSBgZ29vZy5yZXF1aXJlYFxuICAgKiBpbiBhbiBIVE1MIGZpbGUgd291bGQgZ3VhcmFudGVlIHRoYXQgdGhlIHJlcXVpcmUnZCBuYW1lc3BhY2Ugd2FzIGF2YWlsYWJsZVxuICAgKiBpbiB0aGUgbmV4dCBpbW1lZGlhdGUgc2NyaXB0IHRhZy4gV2l0aCBFUzYgbW9kdWxlcyB0aGlzIG5vIGxvbmdlciBhXG4gICAqIGd1YXJhbnRlZS5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gbmFtZXNwYWNlc1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6ID99IGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGNhbGwgb25jZSBhbGwgdGhlIG5hbWVzcGFjZXNcbiAgICogICAgIGhhdmUgbG9hZGVkLiBBbHdheXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5LlxuICAgKi9cbiAgZ29vZy5ib290c3RyYXAgPSBmdW5jdGlvbihuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIGdvb2cuZGVidWdMb2FkZXJfLmJvb3RzdHJhcChuYW1lc3BhY2VzLCBjYWxsYmFjayk7XG4gIH07XG59XG5cblxuaWYgKCFDT01QSUxFRCkge1xuICB2YXIgaXNDaHJvbWU4NyA9IGZhbHNlO1xuICAvLyBDYW5ub3QgcnVuIGNoZWNrIGZvciBDaHJvbWUgPDg3IGJ1ZyBpbiBjYXNlIG9mIHN0cmljdCBDU1AgZW52aXJvbm1lbnRzLlxuICAvLyBUT0RPKHVzZXIpOiBSZW1vdmUgb25jZSBDaHJvbWUgPDg3IGJ1ZyBpcyBubyBsb25nZXIgYSBwcm9ibGVtLlxuICB0cnkge1xuICAgIGlzQ2hyb21lODcgPSBldmFsKGdvb2cuZ2xvYmFsLnRydXN0ZWRUeXBlcy5lbXB0eVNjcmlwdCkgIT09XG4gICAgICAgIGdvb2cuZ2xvYmFsLnRydXN0ZWRUeXBlcy5lbXB0eVNjcmlwdDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gIH1cblxuICAvKipcbiAgICogVHJ1c3RlZCBUeXBlcyBmb3IgcnVubmluZyBkZXYgc2VydmVycy5cbiAgICpcbiAgICogQHByaXZhdGUgQGNvbnN0XG4gICAqL1xuICBnb29nLkNMT1NVUkVfRVZBTF9QUkVGSUxURVJfID1cbiAgICAgIC8vIERldGVjdCBDaHJvbWUgPDg3IGJ1ZyB3aXRoIFRUIGFuZCBldmFsLlxuICAgICAgZ29vZy5nbG9iYWwudHJ1c3RlZFR5cGVzICYmIGlzQ2hyb21lODcgJiZcbiAgICAgICAgICBnb29nLmNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSgnZ29vZyNiYXNlI2Rldm9ubHkjZXZhbCcpIHx8XG4gICAgICB7Y3JlYXRlU2NyaXB0OiBnb29nLmlkZW50aXR5X307XG59XG4iLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEltcGxlbWVudHMgdGhlIGRpc3Bvc2FibGUgaW50ZXJmYWNlLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5EaXNwb3NhYmxlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5kaXNwb3NhYmxlLklEaXNwb3NhYmxlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZGlzcG9zZScpO1xuLyoqXG4gKiBUT0RPKHVzZXIpOiBSZW1vdmUgdGhpcyByZXF1aXJlLlxuICogQHN1cHByZXNzIHtleHRyYVJlcXVpcmV9XG4gKi9cbmdvb2cucmVxdWlyZSgnZ29vZy5kaXNwb3NlQWxsJyk7XG5cbi8qKlxuICogQ2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgYmFzaWMgaW1wbGVtZW50YXRpb24gZm9yIGRpc3Bvc2FibGUgb2JqZWN0cy4gSWYgeW91clxuICogY2xhc3MgaG9sZHMgcmVmZXJlbmNlcyBvciByZXNvdXJjZXMgdGhhdCBjYW4ndCBiZSBjb2xsZWN0ZWQgYnkgc3RhbmRhcmQgR0MsXG4gKiBpdCBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3Mgb3IgaW1wbGVtZW50IHRoZSBkaXNwb3NhYmxlIGludGVyZmFjZSAoZGVmaW5lZFxuICogaW4gZ29vZy5kaXNwb3NhYmxlLklEaXNwb3NhYmxlKS4gU2VlIGRlc2NyaXB0aW9uIG9mXG4gKiBnb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGUgZm9yIGV4YW1wbGVzIG9mIGNsZWFudXAuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtnb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGV9XG4gKi9cbmdvb2cuRGlzcG9zYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBJZiBtb25pdG9yaW5nIHRoZSBnb29nLkRpc3Bvc2FibGUgaW5zdGFuY2VzIGlzIGVuYWJsZWQsIHN0b3JlcyB0aGUgY3JlYXRpb25cbiAgICogc3RhY2sgdHJhY2Ugb2YgdGhlIERpc3Bvc2FibGUgaW5zdGFuY2UuXG4gICAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5jcmVhdGlvblN0YWNrO1xuXG4gIGlmIChnb29nLkRpc3Bvc2FibGUuTU9OSVRPUklOR19NT0RFICE9IGdvb2cuRGlzcG9zYWJsZS5Nb25pdG9yaW5nTW9kZS5PRkYpIHtcbiAgICBpZiAoZ29vZy5EaXNwb3NhYmxlLklOQ0xVREVfU1RBQ0tfT05fQ1JFQVRJT04pIHtcbiAgICAgIHRoaXMuY3JlYXRpb25TdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH1cbiAgICBnb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzX1tnb29nLmdldFVpZCh0aGlzKV0gPSB0aGlzO1xuICB9XG4gIC8vIFN1cHBvcnQgc2VhbGluZ1xuICB0aGlzLmRpc3Bvc2VkXyA9IHRoaXMuZGlzcG9zZWRfO1xuICB0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18gPSB0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc187XG59O1xuXG5cbi8qKlxuICogQGVudW0ge251bWJlcn0gRGlmZmVyZW50IG1vbml0b3JpbmcgbW9kZXMgZm9yIERpc3Bvc2FibGUuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5Nb25pdG9yaW5nTW9kZSA9IHtcbiAgLyoqXG4gICAqIE5vIG1vbml0b3JpbmcuXG4gICAqL1xuICBPRkY6IDAsXG4gIC8qKlxuICAgKiBDcmVhdGluZyBhbmQgZGlzcG9zaW5nIHRoZSBnb29nLkRpc3Bvc2FibGUgaW5zdGFuY2VzIGlzIG1vbml0b3JlZC4gQWxsXG4gICAqIGRpc3Bvc2FibGUgb2JqZWN0cyBuZWVkIHRvIGNhbGwgdGhlIGBnb29nLkRpc3Bvc2FibGVgIGJhc2VcbiAgICogY29uc3RydWN0b3IuIFRoZSBQRVJNQU5FTlQgbW9kZSBtdXN0IGJlIHN3aXRjaGVkIG9uIGJlZm9yZSBjcmVhdGluZyBhbnlcbiAgICogZ29vZy5EaXNwb3NhYmxlIGluc3RhbmNlcy5cbiAgICovXG4gIFBFUk1BTkVOVDogMSxcbiAgLyoqXG4gICAqIElOVEVSQUNUSVZFIG1vZGUgY2FuIGJlIHN3aXRjaGVkIG9uIGFuZCBvZmYgb24gdGhlIGZseSB3aXRob3V0IHByb2R1Y2luZ1xuICAgKiBlcnJvcnMuIEl0IGFsc28gZG9lc24ndCB3YXJuIGlmIHRoZSBkaXNwb3NhYmxlIG9iamVjdHMgZG9uJ3QgY2FsbCB0aGVcbiAgICogYGdvb2cuRGlzcG9zYWJsZWAgYmFzZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIElOVEVSQUNUSVZFOiAyXG59O1xuXG5cbi8qKlxuICogQGRlZmluZSB7bnVtYmVyfSBUaGUgbW9uaXRvcmluZyBtb2RlIG9mIHRoZSBnb29nLkRpc3Bvc2FibGVcbiAqICAgICBpbnN0YW5jZXMuIERlZmF1bHQgaXMgT0ZGLiBTd2l0Y2hpbmcgb24gdGhlIG1vbml0b3JpbmcgaXMgb25seVxuICogICAgIHJlY29tbWVuZGVkIGZvciBkZWJ1Z2dpbmcgYmVjYXVzZSBpdCBoYXMgYSBzaWduaWZpY2FudCBpbXBhY3Qgb25cbiAqICAgICBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IHVzYWdlLiBJZiBzd2l0Y2hlZCBvZmYsIHRoZSBtb25pdG9yaW5nIGNvZGVcbiAqICAgICBjb21waWxlcyBkb3duIHRvIDAgYnl0ZXMuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5NT05JVE9SSU5HX01PREUgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLkRpc3Bvc2FibGUuTU9OSVRPUklOR19NT0RFJywgMCk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGF0dGFjaCBjcmVhdGlvbiBzdGFjayB0byBlYWNoIGNyZWF0ZWQgZGlzcG9zYWJsZVxuICogICAgIGluc3RhbmNlOyBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgZm9yIHdoZW4gTW9uaXRvcmluZ01vZGUgIT0gT0ZGLlxuICovXG5nb29nLkRpc3Bvc2FibGUuSU5DTFVERV9TVEFDS19PTl9DUkVBVElPTiA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cuRGlzcG9zYWJsZS5JTkNMVURFX1NUQUNLX09OX0NSRUFUSU9OJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBNYXBzIHRoZSB1bmlxdWUgSUQgb2YgZXZlcnkgdW5kaXNwb3NlZCBgZ29vZy5EaXNwb3NhYmxlYCBvYmplY3QgdG9cbiAqIHRoZSBvYmplY3QgaXRzZWxmLlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCAhZ29vZy5EaXNwb3NhYmxlPn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfID0ge307XG5cblxuLyoqXG4gKiBAcmV0dXJuIHshQXJyYXk8IWdvb2cuRGlzcG9zYWJsZT59IEFsbCBgZ29vZy5EaXNwb3NhYmxlYCBvYmplY3RzIHRoYXRcbiAqICAgICBoYXZlbid0IGJlZW4gZGlzcG9zZWQgb2YuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5nZXRVbmRpc3Bvc2VkT2JqZWN0cyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciByZXQgPSBbXTtcbiAgZm9yICh2YXIgaWQgaW4gZ29vZy5EaXNwb3NhYmxlLmluc3RhbmNlc18pIHtcbiAgICBpZiAoZ29vZy5EaXNwb3NhYmxlLmluc3RhbmNlc18uaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICByZXQucHVzaChnb29nLkRpc3Bvc2FibGUuaW5zdGFuY2VzX1tOdW1iZXIoaWQpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSByZWdpc3RyeSBvZiB1bmRpc3Bvc2VkIG9iamVjdHMgYnV0IGRvZXNuJ3QgZGlzcG9zZSBvZiB0aGVtLlxuICovXG5nb29nLkRpc3Bvc2FibGUuY2xlYXJVbmRpc3Bvc2VkT2JqZWN0cyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfID0ge307XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0IGhhcyBiZWVuIGRpc3Bvc2VkIG9mLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmRpc3Bvc2VkXyA9IGZhbHNlO1xuXG5cbi8qKlxuICogQ2FsbGJhY2tzIHRvIGludm9rZSB3aGVuIHRoaXMgb2JqZWN0IGlzIGRpc3Bvc2VkLlxuICogQHR5cGUge0FycmF5PCFGdW5jdGlvbj59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLm9uRGlzcG9zZUNhbGxiYWNrc187XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBvYmplY3QgaGFzIGJlZW4gZGlzcG9zZWQgb2YuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5EaXNwb3NhYmxlLnByb3RvdHlwZS5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuZGlzcG9zZWRfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG9iamVjdCBoYXMgYmVlbiBkaXNwb3NlZCBvZi5cbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgI2lzRGlzcG9zZWR9IGluc3RlYWQuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuZ2V0RGlzcG9zZWQgPSBnb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmlzRGlzcG9zZWQ7XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBvZiB0aGUgb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGhhc24ndCBhbHJlYWR5IGJlZW4gZGlzcG9zZWQgb2YsIGNhbGxzXG4gKiB7QGxpbmsgI2Rpc3Bvc2VJbnRlcm5hbH0uIENsYXNzZXMgdGhhdCBleHRlbmQgYGdvb2cuRGlzcG9zYWJsZWAgc2hvdWxkXG4gKiBvdmVycmlkZSB7QGxpbmsgI2Rpc3Bvc2VJbnRlcm5hbH0gaW4gb3JkZXIgdG8gY2xlYW51cCByZWZlcmVuY2VzLCByZXNvdXJjZXNcbiAqIGFuZCBvdGhlciBkaXNwb3NhYmxlIG9iamVjdHMuIFJlZW50cmFudC5cbiAqXG4gKiBAcmV0dXJuIHt2b2lkfSBOb3RoaW5nLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5kaXNwb3NlZF8pIHtcbiAgICAvLyBTZXQgZGlzcG9zZWRfIHRvIHRydWUgZmlyc3QsIGluIGNhc2UgZHVyaW5nIHRoZSBjaGFpbiBvZiBkaXNwb3NhbCB0aGlzXG4gICAgLy8gZ2V0cyBkaXNwb3NlZCByZWN1cnNpdmVseS5cbiAgICB0aGlzLmRpc3Bvc2VkXyA9IHRydWU7XG4gICAgdGhpcy5kaXNwb3NlSW50ZXJuYWwoKTtcbiAgICBpZiAoZ29vZy5EaXNwb3NhYmxlLk1PTklUT1JJTkdfTU9ERSAhPSBnb29nLkRpc3Bvc2FibGUuTW9uaXRvcmluZ01vZGUuT0ZGKSB7XG4gICAgICB2YXIgdWlkID0gZ29vZy5nZXRVaWQodGhpcyk7XG4gICAgICBpZiAoZ29vZy5EaXNwb3NhYmxlLk1PTklUT1JJTkdfTU9ERSA9PVxuICAgICAgICAgICAgICBnb29nLkRpc3Bvc2FibGUuTW9uaXRvcmluZ01vZGUuUEVSTUFORU5UICYmXG4gICAgICAgICAgIWdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfLmhhc093blByb3BlcnR5KHVpZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgdGhpcyArICcgZGlkIG5vdCBjYWxsIHRoZSBnb29nLkRpc3Bvc2FibGUgYmFzZSAnICtcbiAgICAgICAgICAgICdjb25zdHJ1Y3RvciBvciB3YXMgZGlzcG9zZWQgb2YgYWZ0ZXIgYSBjbGVhclVuZGlzcG9zZWRPYmplY3RzICcgK1xuICAgICAgICAgICAgJ2NhbGwnKTtcbiAgICAgIH1cbiAgICAgIGlmIChnb29nLkRpc3Bvc2FibGUuTU9OSVRPUklOR19NT0RFICE9XG4gICAgICAgICAgICAgIGdvb2cuRGlzcG9zYWJsZS5Nb25pdG9yaW5nTW9kZS5PRkYgJiZcbiAgICAgICAgICB0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18gJiYgdGhpcy5vbkRpc3Bvc2VDYWxsYmFja3NfLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgdGhpcyArICcgZGlkIG5vdCBlbXB0eSBpdHMgb25EaXNwb3NlQ2FsbGJhY2tzIHF1ZXVlLiBUaGlzICcgK1xuICAgICAgICAgICAgJ3Byb2JhYmx5IG1lYW5zIGl0IG92ZXJyb2RlIGRpc3Bvc2UoKSBvciBkaXNwb3NlSW50ZXJuYWwoKSAnICtcbiAgICAgICAgICAgICd3aXRob3V0IGNhbGxpbmcgdGhlIHN1cGVyY2xhc3NcXCcgbWV0aG9kLicpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGdvb2cuRGlzcG9zYWJsZS5pbnN0YW5jZXNfW3VpZF07XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQXNzb2NpYXRlcyBhIGRpc3Bvc2FibGUgb2JqZWN0IHdpdGggdGhpcyBvYmplY3Qgc28gdGhhdCB0aGV5IHdpbGwgYmUgZGlzcG9zZWRcbiAqIHRvZ2V0aGVyLlxuICogQHBhcmFtIHtnb29nLmRpc3Bvc2FibGUuSURpc3Bvc2FibGV9IGRpc3Bvc2FibGUgdGhhdCB3aWxsIGJlIGRpc3Bvc2VkIHdoZW5cbiAqICAgICB0aGlzIG9iamVjdCBpcyBkaXNwb3NlZC5cbiAqL1xuZ29vZy5EaXNwb3NhYmxlLnByb3RvdHlwZS5yZWdpc3RlckRpc3Bvc2FibGUgPSBmdW5jdGlvbihkaXNwb3NhYmxlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5hZGRPbkRpc3Bvc2VDYWxsYmFjayhnb29nLnBhcnRpYWwoZ29vZy5kaXNwb3NlLCBkaXNwb3NhYmxlKSk7XG59O1xuXG5cbi8qKlxuICogSW52b2tlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhpcyBvYmplY3QgaXMgZGlzcG9zZWQuIENhbGxiYWNrcyBhcmVcbiAqIGludm9rZWQgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSBhZGRlZC4gSWYgYSBjYWxsYmFjayBpcyBhZGRlZCB0b1xuICogYW4gYWxyZWFkeSBkaXNwb3NlZCBEaXNwb3NhYmxlLCBpdCB3aWxsIGJlIGNhbGxlZCBpbW1lZGlhdGVseS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUKTo/fSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1Q9fSBvcHRfc2NvcGUgQW4gb3B0aW9uYWwgc2NvcGUgdG8gY2FsbCB0aGUgY2FsbGJhY2sgaW4uXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLkRpc3Bvc2FibGUucHJvdG90eXBlLmFkZE9uRGlzcG9zZUNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9wdF9zY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLmRpc3Bvc2VkXykge1xuICAgIG9wdF9zY29wZSAhPT0gdW5kZWZpbmVkID8gY2FsbGJhY2suY2FsbChvcHRfc2NvcGUpIDogY2FsbGJhY2soKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18pIHtcbiAgICB0aGlzLm9uRGlzcG9zZUNhbGxiYWNrc18gPSBbXTtcbiAgfVxuXG4gIHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5wdXNoKFxuICAgICAgb3B0X3Njb3BlICE9PSB1bmRlZmluZWQgPyBnb29nLmJpbmQoY2FsbGJhY2ssIG9wdF9zY29wZSkgOiBjYWxsYmFjayk7XG59O1xuXG5cbi8qKlxuICogUGVyZm9ybXMgYXBwcm9wcmlhdGUgY2xlYW51cC4gU2VlIGRlc2NyaXB0aW9uIG9mIGdvb2cuZGlzcG9zYWJsZS5JRGlzcG9zYWJsZVxuICogZm9yIGV4YW1wbGVzLiBDbGFzc2VzIHRoYXQgZXh0ZW5kIGBnb29nLkRpc3Bvc2FibGVgIHNob3VsZCBvdmVycmlkZSB0aGlzXG4gKiBtZXRob2QuIE5vdCByZWVudHJhbnQuIFRvIGF2b2lkIGNhbGxpbmcgaXQgdHdpY2UsIGl0IG11c3Qgb25seSBiZSBjYWxsZWQgZnJvbVxuICogdGhlIHN1YmNsYXNzJyBgZGlzcG9zZUludGVybmFsYCBtZXRob2QuIEV2ZXJ5d2hlcmUgZWxzZSB0aGUgcHVibGljIGBkaXNwb3NlYFxuICogbWV0aG9kIG11c3QgYmUgdXNlZC4gRm9yIGV4YW1wbGU6XG4gKlxuICogPHByZT5cbiAqIG15cGFja2FnZS5NeUNsYXNzID0gZnVuY3Rpb24oKSB7XG4gKiBteXBhY2thZ2UuTXlDbGFzcy5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicpO1xuICogICAgIC8vIENvbnN0cnVjdG9yIGxvZ2ljIHNwZWNpZmljIHRvIE15Q2xhc3MuXG4gKiAgICAgLi4uXG4gKiAgIH07XG4gKiAgIGdvb2cuaW5oZXJpdHMobXlwYWNrYWdlLk15Q2xhc3MsIGdvb2cuRGlzcG9zYWJsZSk7XG4gKlxuICogICBteXBhY2thZ2UuTXlDbGFzcy5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgLy8gRGlzcG9zZSBsb2dpYyBzcGVjaWZpYyB0byBNeUNsYXNzLlxuICogICAgIC4uLlxuICogICAgIC8vIENhbGwgc3VwZXJjbGFzcydzIGRpc3Bvc2VJbnRlcm5hbCBhdCB0aGUgZW5kIG9mIHRoZSBzdWJjbGFzcydzLCBsaWtlXG4gKiAgICAgLy8gaW4gQysrLCB0byBhdm9pZCBoYXJkLXRvLWNhdGNoIGlzc3Vlcy5cbiAqICAgICBteXBhY2thZ2UuTXlDbGFzcy5iYXNlKHRoaXMsICdkaXNwb3NlSW50ZXJuYWwnKTtcbiAqICAgfTtcbiAqIDwvcHJlPlxuICpcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZ29vZy5EaXNwb3NhYmxlLnByb3RvdHlwZS5kaXNwb3NlSW50ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5vbkRpc3Bvc2VDYWxsYmFja3NfKSB7XG4gICAgd2hpbGUgKHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25EaXNwb3NlQ2FsbGJhY2tzXy5zaGlmdCgpKCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBUcnVlIGlmIHdlIGNhbiB2ZXJpZnkgdGhlIG9iamVjdCBpcyBkaXNwb3NlZC5cbiAqIENhbGxzIGBpc0Rpc3Bvc2VkYCBvbiB0aGUgYXJndW1lbnQgaWYgaXQgc3VwcG9ydHMgaXQuICBJZiBvYmpcbiAqIGlzIG5vdCBhbiBvYmplY3Qgd2l0aCBhbiBpc0Rpc3Bvc2VkKCkgbWV0aG9kLCByZXR1cm4gZmFsc2UuXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgb2JqZWN0IHRvIGludmVzdGlnYXRlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB3ZSBjYW4gdmVyaWZ5IHRoZSBvYmplY3QgaXMgZGlzcG9zZWQuXG4gKi9cbmdvb2cuRGlzcG9zYWJsZS5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24ob2JqKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqLmlzRGlzcG9zZWQgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmouaXNEaXNwb3NlZCgpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgYXJyYXlzLlxuICovXG5cblxuZ29vZy5tb2R1bGUoJ2dvb2cuYXJyYXknKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuY29uc3QgYXNzZXJ0cyA9IGdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBOQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyBpbmRpY2F0ZXMgd2hldGhlciB0aGUgY29kZSBzaG91bGRcbiAqIHJlbHkgb24gQXJyYXkucHJvdG90eXBlIGZ1bmN0aW9ucywgaWYgYXZhaWxhYmxlLlxuICpcbiAqIFRoZSBBcnJheS5wcm90b3R5cGUgZnVuY3Rpb25zIGNhbiBiZSBkZWZpbmVkIGJ5IGV4dGVybmFsIGxpYnJhcmllcyBsaWtlXG4gKiBQcm90b3R5cGUgYW5kIHNldHRpbmcgdGhpcyBmbGFnIHRvIGZhbHNlIGZvcmNlcyBjbG9zdXJlIHRvIHVzZSBpdHMgb3duXG4gKiBnb29nLmFycmF5IGltcGxlbWVudGF0aW9uLlxuICpcbiAqIElmIHlvdXIgamF2YXNjcmlwdCBjYW4gYmUgbG9hZGVkIGJ5IGEgdGhpcmQgcGFydHkgc2l0ZSBhbmQgeW91IGFyZSB3YXJ5IGFib3V0XG4gKiByZWx5aW5nIG9uIHRoZSBwcm90b3R5cGUgZnVuY3Rpb25zLCBzcGVjaWZ5XG4gKiBcIi0tZGVmaW5lIGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVM9ZmFsc2VcIiB0byB0aGUgSlNDb21waWxlci5cbiAqXG4gKiBTZXR0aW5nIGdvb2cuVFJVU1RFRF9TSVRFIHRvIGZhbHNlIHdpbGwgYXV0b21hdGljYWxseSBzZXRcbiAqIE5BVElWRV9BUlJBWV9QUk9UT1RZUEVTIHRvIGZhbHNlLlxuICovXG5nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUycsIGdvb2cuVFJVU1RFRF9TSVRFKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IElmIHRydWUsIEpTQ29tcGlsZXIgd2lsbCB1c2UgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZlxuICogYXJyYXkgZnVuY3Rpb25zIHdoZXJlIGFwcHJvcHJpYXRlIChlLmcuLCBgQXJyYXkjZmlsdGVyYCkgYW5kIHJlbW92ZSB0aGVcbiAqIHVudXNlZCBwdXJlIEpTIGltcGxlbWVudGF0aW9uLlxuICovXG5jb25zdCBBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyA9IGdvb2cuZGVmaW5lKFxuICAgICdnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TJywgZ29vZy5GRUFUVVJFU0VUX1lFQVIgPiAyMDEyKTtcbmV4cG9ydHMuQVNTVU1FX05BVElWRV9GVU5DVElPTlMgPSBBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUztcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBpbiBhbiBhcnJheSB3aXRob3V0IHJlbW92aW5nIGl0LlxuICogU2FtZSBhcyB7QGxpbmsgZ29vZy5hcnJheS5sYXN0fS5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFycmF5IFRoZSBhcnJheS5cbiAqIEByZXR1cm4ge1R9IExhc3QgaXRlbSBpbiBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIHBlZWsoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0cy5wZWVrID0gcGVlaztcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBpbiBhbiBhcnJheSB3aXRob3V0IHJlbW92aW5nIGl0LlxuICogU2FtZSBhcyB7QGxpbmsgZ29vZy5hcnJheS5wZWVrfS5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFycmF5IFRoZSBhcnJheS5cbiAqIEByZXR1cm4ge1R9IExhc3QgaXRlbSBpbiBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydHMubGFzdCA9IHBlZWs7XG5cbi8vIE5PVEUoYXJ2KTogU2luY2UgbW9zdCBvZiB0aGUgYXJyYXkgZnVuY3Rpb25zIGFyZSBnZW5lcmljIGl0IGFsbG93cyB5b3UgdG9cbi8vIHBhc3MgYW4gYXJyYXktbGlrZSBvYmplY3QuIFN0cmluZ3MgaGF2ZSBhIGxlbmd0aCBhbmQgYXJlIGNvbnNpZGVyZWQgYXJyYXktXG4vLyBsaWtlLiBIb3dldmVyLCB0aGUgJ2luJyBvcGVyYXRvciBkb2VzIG5vdCB3b3JrIG9uIHN0cmluZ3Mgc28gd2UgY2Fubm90IGp1c3Rcbi8vIHVzZSB0aGUgYXJyYXkgcGF0aCBldmVuIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGluZGV4aW5nIGludG8gc3RyaW5ncy4gV2Vcbi8vIHRoZXJlZm9yZSBlbmQgdXAgc3BsaXR0aW5nIHRoZSBzdHJpbmcuXG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheSB3aXRoIGEgc3BlY2lmaWVkIHZhbHVlLCBvclxuICogLTEgaWYgdGhlIGVsZW1lbnQgaXMgbm90IHByZXNlbnQgaW4gdGhlIGFycmF5LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cDovL3Rpbnl1cmwuY29tL2RldmVsb3Blci1tb3ppbGxhLW9yZy1hcnJheS1pbmRleG9mfVxuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBUaGUgYXJyYXkgdG8gYmUgc2VhcmNoZWQuXG4gKiBAcGFyYW0ge1R9IG9iaiBUaGUgb2JqZWN0IGZvciB3aGljaCB3ZSBhcmUgc2VhcmNoaW5nLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZnJvbUluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byBzdGFydCB0aGUgc2VhcmNoLiBJZlxuICogICAgIG9taXR0ZWQgdGhlIHNlYXJjaCBzdGFydHMgYXQgaW5kZXggMC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBtYXRjaGluZyBhcnJheSBlbGVtZW50LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuY29uc3QgaW5kZXhPZiA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgKEFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSA/XG4gICAgZnVuY3Rpb24oYXJyLCBvYmosIG9wdF9mcm9tSW5kZXgpIHtcbiAgICAgIGFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFyciwgb2JqLCBvcHRfZnJvbUluZGV4KTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIG9iaiwgb3B0X2Zyb21JbmRleCkge1xuICAgICAgY29uc3QgZnJvbUluZGV4ID0gb3B0X2Zyb21JbmRleCA9PSBudWxsID9cbiAgICAgICAgICAwIDpcbiAgICAgICAgICAob3B0X2Zyb21JbmRleCA8IDAgPyBNYXRoLm1heCgwLCBhcnIubGVuZ3RoICsgb3B0X2Zyb21JbmRleCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9mcm9tSW5kZXgpO1xuXG4gICAgICBpZiAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgdXNlcyA9PT0gc28gb25seSBzdHJpbmdzIHNob3VsZCBiZSBmb3VuZC5cbiAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnIHx8IG9iai5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyLmluZGV4T2Yob2JqLCBmcm9tSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gZnJvbUluZGV4OyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFyciAmJiBhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbmV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5IHdpdGggYSBzcGVjaWZpZWQgdmFsdWUsIG9yXG4gKiAtMSBpZiB0aGUgZWxlbWVudCBpcyBub3QgcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LWxhc3RpbmRleG9mfVxuICpcbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8VD58c3RyaW5nfSBhcnIgVGhlIGFycmF5IHRvIGJlIHNlYXJjaGVkLlxuICogQHBhcmFtIHtUfSBvYmogVGhlIG9iamVjdCBmb3Igd2hpY2ggd2UgYXJlIHNlYXJjaGluZy5cbiAqIEBwYXJhbSB7P251bWJlcj19IG9wdF9mcm9tSW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IHRoZSBzZWFyY2guIElmXG4gKiAgICAgb21pdHRlZCB0aGUgc2VhcmNoIHN0YXJ0cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBsYXN0IG1hdGNoaW5nIGFycmF5IGVsZW1lbnQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5jb25zdCBsYXN0SW5kZXhPZiA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgKEFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZikgP1xuICAgIGZ1bmN0aW9uKGFyciwgb2JqLCBvcHRfZnJvbUluZGV4KSB7XG4gICAgICBhc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICAvLyBGaXJlZm94IHRyZWF0cyB1bmRlZmluZWQgYW5kIG51bGwgYXMgMCBpbiB0aGUgZnJvbUluZGV4IGFyZ3VtZW50IHdoaWNoXG4gICAgICAvLyBsZWFkcyBpdCB0byBhbHdheXMgcmV0dXJuIC0xXG4gICAgICBjb25zdCBmcm9tSW5kZXggPSBvcHRfZnJvbUluZGV4ID09IG51bGwgPyBhcnIubGVuZ3RoIC0gMSA6IG9wdF9mcm9tSW5kZXg7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYXJyLCBvYmosIGZyb21JbmRleCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBvYmosIG9wdF9mcm9tSW5kZXgpIHtcbiAgICAgIGxldCBmcm9tSW5kZXggPSBvcHRfZnJvbUluZGV4ID09IG51bGwgPyBhcnIubGVuZ3RoIC0gMSA6IG9wdF9mcm9tSW5kZXg7XG5cbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IE1hdGgubWF4KDAsIGFyci5sZW5ndGggKyBmcm9tSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mIHVzZXMgPT09IHNvIG9ubHkgc3RyaW5ncyBzaG91bGQgYmUgZm91bmQuXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJyB8fCBvYmoubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyci5sYXN0SW5kZXhPZihvYmosIGZyb21JbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSBmcm9tSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChpIGluIGFyciAmJiBhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbmV4cG9ydHMubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcblxuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiBhbiBhcnJheS4gU2tpcHMgaG9sZXMgaW4gdGhlIGFycmF5LlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LWZvcmVhY2h9XG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5IGxpa2Ugb2JqZWN0IG92ZXJcbiAqICAgICB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczogUywgVCwgbnVtYmVyLCA/KTogP30gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZXZlcnlcbiAqICAgICBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGVcbiAqICAgICBhcnJheSkuIFRoZSByZXR1cm4gdmFsdWUgaXMgaWdub3JlZC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcycgd2l0aGluIGYuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmNvbnN0IGZvckVhY2ggPSBnb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTICYmXG4gICAgICAgIChBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyB8fCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcblxuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcnIsIGYsIG9wdF9vYmopO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgY29uc3QgbCA9IGFyci5sZW5ndGg7ICAvLyBtdXN0IGJlIGZpeGVkIGR1cmluZyBsb29wLi4uIHNlZSBkb2NzXG4gICAgICBjb25zdCBhcnIyID0gKHR5cGVvZiBhcnIgPT09ICdzdHJpbmcnKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaSBpbiBhcnIyKSB7XG4gICAgICAgICAgZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBhcnIyW2ldLCBpLCBhcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbmV4cG9ydHMuZm9yRWFjaCA9IGZvckVhY2g7XG5cblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gYW4gYXJyYXksIHN0YXJ0aW5nIGZyb20gdGhlIGxhc3RcbiAqIGVsZW1lbnQgcmF0aGVyIHRoYW4gdGhlIGZpcnN0LlxuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6IFMsIFQsIG51bWJlciwgPyk6ID99IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5XG4gKiAgICAgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpLiBUaGUgcmV0dXJuXG4gKiAgICAgdmFsdWUgaXMgaWdub3JlZC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGFyciwgZiwgb3B0X29iaikge1xuICBjb25zdCBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgY29uc3QgYXJyMiA9ICh0eXBlb2YgYXJyID09PSAnc3RyaW5nJykgPyBhcnIuc3BsaXQoJycpIDogYXJyO1xuICBmb3IgKGxldCBpID0gbCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKGkgaW4gYXJyMikge1xuICAgICAgZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBhcnIyW2ldLCBpLCBhcnIpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG5cblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gYW4gYXJyYXksIGFuZCBpZiB0aGUgZnVuY3Rpb24gcmV0dXJuc1xuICogdHJ1ZSBhZGRzIHRoZSBlbGVtZW50IHRvIGEgbmV3IGFycmF5LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cDovL3Rpbnl1cmwuY29tL2RldmVsb3Blci1tb3ppbGxhLW9yZy1hcnJheS1maWx0ZXJ9XG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBtdXN0XG4gKiAgICAgcmV0dXJuIGEgQm9vbGVhbi4gSWYgdGhlIHJldHVybiB2YWx1ZSBpcyB0cnVlIHRoZSBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZVxuICogICAgIHJlc3VsdCBhcnJheS4gSWYgaXQgaXMgZmFsc2UgdGhlIGVsZW1lbnQgaXMgbm90IGluY2x1ZGVkLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBmLlxuICogQHJldHVybiB7IUFycmF5PFQ+fSBhIG5ldyBhcnJheSBpbiB3aGljaCBvbmx5IGVsZW1lbnRzIHRoYXQgcGFzc2VkIHRoZSB0ZXN0XG4gKiAgICAgYXJlIHByZXNlbnQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmNvbnN0IGZpbHRlciA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgKEFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8IEFycmF5LnByb3RvdHlwZS5maWx0ZXIpID9cbiAgICBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgICAgIGFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBmLCBvcHRfb2JqKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgICAgIGNvbnN0IGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICBsZXQgcmVzTGVuZ3RoID0gMDtcbiAgICAgIGNvbnN0IGFycjIgPSAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFycjIpIHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBhcnIyW2ldOyAgLy8gaW4gY2FzZSBmIG11dGF0ZXMgYXJyMlxuICAgICAgICAgIGlmIChmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbCwgaSwgYXJyKSkge1xuICAgICAgICAgICAgcmVzW3Jlc0xlbmd0aCsrXSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIGFycmF5IGFuZCBpbnNlcnRzIHRoZSByZXN1bHQgaW50byBhXG4gKiBuZXcgYXJyYXkuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LW1hcH1cbiAqXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8VkFMVUU+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5IGxpa2Ugb2JqZWN0XG4gKiAgICAgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlRISVMsIFZBTFVFLCBudW1iZXIsID8pOiBSRVNVTFR9IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsXG4gKiAgICAgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIHNvbWV0aGluZy4gVGhlIHJlc3VsdCB3aWxsIGJlXG4gKiAgICAgaW5zZXJ0ZWQgaW50byBhIG5ldyBhcnJheS5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcycgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHshQXJyYXk8UkVTVUxUPn0gYSBuZXcgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cyBmcm9tIGYuXG4gKiBAdGVtcGxhdGUgVEhJUywgVkFMVUUsIFJFU1VMVFxuICovXG5jb25zdCBtYXAgPSBnb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTICYmXG4gICAgICAgIChBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyB8fCBBcnJheS5wcm90b3R5cGUubWFwKSA/XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICBhc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyciwgZiwgb3B0X29iaik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICBjb25zdCBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgICAgIGNvbnN0IHJlcyA9IG5ldyBBcnJheShsKTtcbiAgICAgIGNvbnN0IGFycjIgPSAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFycjIpIHtcbiAgICAgICAgICByZXNbaV0gPSBmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIGFycjJbaV0sIGksIGFycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbmV4cG9ydHMubWFwID0gbWFwO1xuXG5cbi8qKlxuICogUGFzc2VzIGV2ZXJ5IGVsZW1lbnQgb2YgYW4gYXJyYXkgaW50byBhIGZ1bmN0aW9uIGFuZCBhY2N1bXVsYXRlcyB0aGUgcmVzdWx0LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cDovL3Rpbnl1cmwuY29tL2RldmVsb3Blci1tb3ppbGxhLW9yZy1hcnJheS1yZWR1Y2V9XG4gKiBOb3RlIHRoYXQgdGhpcyBpbXBsZW1lbnRhdGlvbiBkaWZmZXJzIGZyb20gdGhlIG5hdGl2ZSBBcnJheS5wcm90b3R5cGUucmVkdWNlXG4gKiBpbiB0aGF0IHRoZSBpbml0aWFsIHZhbHVlIGlzIGFzc3VtZWQgdG8gYmUgZGVmaW5lZCAodGhlIE1ETiBkb2NzIGxpbmtlZCBhYm92ZVxuICogcmVjb21tZW5kIG5vdCBvbWl0dGluZyB0aGlzIHBhcmFtZXRlciwgYWx0aG91Z2ggaXQgaXMgdGVjaG5pY2FsbHkgb3B0aW9uYWwpLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogdmFyIGEgPSBbMSwgMiwgMywgNF07XG4gKiByZWR1Y2UoYSwgZnVuY3Rpb24ociwgdiwgaSwgYXJyKSB7cmV0dXJuIHIgKyB2O30sIDApO1xuICogcmV0dXJucyAxMFxuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTLCBSLCBULCBudW1iZXIsID8pIDogUn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgNCBhcmd1bWVudHMgKHRoZSBmdW5jdGlvbidzIHByZXZpb3VzIHJlc3VsdCBvciB0aGUgaW5pdGlhbCB2YWx1ZSxcbiAqICAgICB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgYXJyYXkgZWxlbWVudCwgdGhlIGN1cnJlbnQgYXJyYXkgaW5kZXgsIGFuZCB0aGVcbiAqICAgICBhcnJheSBpdHNlbGYpXG4gKiAgICAgZnVuY3Rpb24ocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICogQHBhcmFtIHs/fSB2YWwgVGhlIGluaXRpYWwgdmFsdWUgdG8gcGFzcyBpbnRvIHRoZSBmdW5jdGlvbiBvbiB0aGUgZmlyc3QgY2FsbC5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtSfSBSZXN1bHQgb2YgZXZhbHVhdGluZyBmIHJlcGVhdGVkbHkgYWNyb3NzIHRoZSB2YWx1ZXMgb2YgdGhlIGFycmF5LlxuICogQHRlbXBsYXRlIFQsUyxSXG4gKi9cbmNvbnN0IHJlZHVjZSA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgKEFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8IEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpID9cbiAgICBmdW5jdGlvbihhcnIsIGYsIHZhbCwgb3B0X29iaikge1xuICAgICAgYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcbiAgICAgIGlmIChvcHRfb2JqKSB7XG4gICAgICAgIGYgPSBnb29nLmJpbmQoZiwgb3B0X29iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKGFyciwgZiwgdmFsKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIGYsIHZhbCwgb3B0X29iaikge1xuICAgICAgbGV0IHJ2YWwgPSB2YWw7XG4gICAgICBmb3JFYWNoKGFyciwgZnVuY3Rpb24odmFsLCBpbmRleCkge1xuICAgICAgICBydmFsID0gZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBydmFsLCB2YWwsIGluZGV4LCBhcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcnZhbDtcbiAgICB9O1xuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG5cblxuLyoqXG4gKiBQYXNzZXMgZXZlcnkgZWxlbWVudCBvZiBhbiBhcnJheSBpbnRvIGEgZnVuY3Rpb24gYW5kIGFjY3VtdWxhdGVzIHRoZSByZXN1bHQsXG4gKiBzdGFydGluZyBmcm9tIHRoZSBsYXN0IGVsZW1lbnQgYW5kIHdvcmtpbmcgdG93YXJkcyB0aGUgZmlyc3QuXG4gKlxuICogU2VlIHtAbGluayBodHRwOi8vdGlueXVybC5jb20vZGV2ZWxvcGVyLW1vemlsbGEtb3JnLWFycmF5LXJlZHVjZXJpZ2h0fVxuICpcbiAqIEZvciBleGFtcGxlOlxuICogdmFyIGEgPSBbJ2EnLCAnYicsICdjJ107XG4gKiByZWR1Y2VSaWdodChhLCBmdW5jdGlvbihyLCB2LCBpLCBhcnIpIHtyZXR1cm4gciArIHY7fSwgJycpO1xuICogcmV0dXJucyAnY2JhJ1xuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgUiwgVCwgbnVtYmVyLCA/KSA6IFJ9IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDQgYXJndW1lbnRzICh0aGUgZnVuY3Rpb24ncyBwcmV2aW91cyByZXN1bHQgb3IgdGhlIGluaXRpYWwgdmFsdWUsXG4gKiAgICAgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IGFycmF5IGVsZW1lbnQsIHRoZSBjdXJyZW50IGFycmF5IGluZGV4LCBhbmQgdGhlXG4gKiAgICAgYXJyYXkgaXRzZWxmKVxuICogICAgIGZ1bmN0aW9uKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAqIEBwYXJhbSB7P30gdmFsIFRoZSBpbml0aWFsIHZhbHVlIHRvIHBhc3MgaW50byB0aGUgZnVuY3Rpb24gb24gdGhlIGZpcnN0IGNhbGwuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtSfSBPYmplY3QgcmV0dXJuZWQgYXMgYSByZXN1bHQgb2YgZXZhbHVhdGluZyBmIHJlcGVhdGVkbHkgYWNyb3NzIHRoZVxuICogICAgIHZhbHVlcyBvZiB0aGUgYXJyYXkuXG4gKiBAdGVtcGxhdGUgVCxTLFJcbiAqL1xuY29uc3QgcmVkdWNlUmlnaHQgPSBnb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTICYmXG4gICAgICAgIChBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyB8fCBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQpID9cbiAgICBmdW5jdGlvbihhcnIsIGYsIHZhbCwgb3B0X29iaikge1xuICAgICAgYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcbiAgICAgIGFzc2VydHMuYXNzZXJ0KGYgIT0gbnVsbCk7XG4gICAgICBpZiAob3B0X29iaikge1xuICAgICAgICBmID0gZ29vZy5iaW5kKGYsIG9wdF9vYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodC5jYWxsKGFyciwgZiwgdmFsKTtcbiAgICB9IDpcbiAgICBmdW5jdGlvbihhcnIsIGYsIHZhbCwgb3B0X29iaikge1xuICAgICAgbGV0IHJ2YWwgPSB2YWw7XG4gICAgICBmb3JFYWNoUmlnaHQoYXJyLCBmdW5jdGlvbih2YWwsIGluZGV4KSB7XG4gICAgICAgIHJ2YWwgPSBmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHJ2YWwsIHZhbCwgaW5kZXgsIGFycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydmFsO1xuICAgIH07XG5leHBvcnRzLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG5cblxuLyoqXG4gKiBDYWxscyBmIGZvciBlYWNoIGVsZW1lbnQgb2YgYW4gYXJyYXkuIElmIGFueSBjYWxsIHJldHVybnMgdHJ1ZSwgc29tZSgpXG4gKiByZXR1cm5zIHRydWUgKHdpdGhvdXQgY2hlY2tpbmcgdGhlIHJlbWFpbmluZyBlbGVtZW50cykuIElmIGFsbCBjYWxsc1xuICogcmV0dXJuIGZhbHNlLCBzb21lKCkgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktc29tZX1cbiAqXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8VD58c3RyaW5nfSBhcnIgQXJyYXkgb3IgYXJyYXlcbiAqICAgICBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlMsIFQsIG51bWJlciwgPykgOiBib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvclxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlXG4gKiAgICAgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZCByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiAgVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSB0ZXN0LlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5jb25zdCBzb21lID0gZ29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyAmJlxuICAgICAgICAoQVNTVU1FX05BVElWRV9GVU5DVElPTlMgfHwgQXJyYXkucHJvdG90eXBlLnNvbWUpID9cbiAgICBmdW5jdGlvbihhcnIsIGYsIG9wdF9vYmopIHtcbiAgICAgIGFzc2VydHMuYXNzZXJ0KGFyci5sZW5ndGggIT0gbnVsbCk7XG5cbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGFyciwgZiwgb3B0X29iaik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICBjb25zdCBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgICAgIGNvbnN0IGFycjIgPSAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFycjIgJiYgZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBhcnIyW2ldLCBpLCBhcnIpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuZXhwb3J0cy5zb21lID0gc29tZTtcblxuXG4vKipcbiAqIENhbGwgZiBmb3IgZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5LiBJZiBhbGwgY2FsbHMgcmV0dXJuIHRydWUsIGV2ZXJ5KClcbiAqIHJldHVybnMgdHJ1ZS4gSWYgYW55IGNhbGwgcmV0dXJucyBmYWxzZSwgZXZlcnkoKSByZXR1cm5zIGZhbHNlIGFuZFxuICogZG9lcyBub3QgY29udGludWUgdG8gY2hlY2sgdGhlIHJlbWFpbmluZyBlbGVtZW50cy5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHA6Ly90aW55dXJsLmNvbS9kZXZlbG9wZXItbW96aWxsYS1vcmctYXJyYXktZXZlcnl9XG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZVxuICogICAgIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcydcbiAqICAgICB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IGZhbHNlIGlmIGFueSBlbGVtZW50IGZhaWxzIHRoZSB0ZXN0LlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5jb25zdCBldmVyeSA9IGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMgJiZcbiAgICAgICAgKEFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TIHx8IEFycmF5LnByb3RvdHlwZS5ldmVyeSkgP1xuICAgIGZ1bmN0aW9uKGFyciwgZiwgb3B0X29iaikge1xuICAgICAgYXNzZXJ0cy5hc3NlcnQoYXJyLmxlbmd0aCAhPSBudWxsKTtcblxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5ldmVyeS5jYWxsKGFyciwgZiwgb3B0X29iaik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24oYXJyLCBmLCBvcHRfb2JqKSB7XG4gICAgICBjb25zdCBsID0gYXJyLmxlbmd0aDsgIC8vIG11c3QgYmUgZml4ZWQgZHVyaW5nIGxvb3AuLi4gc2VlIGRvY3NcbiAgICAgIGNvbnN0IGFycjIgPSAodHlwZW9mIGFyciA9PT0gJ3N0cmluZycpID8gYXJyLnNwbGl0KCcnKSA6IGFycjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpIGluIGFycjIgJiYgIWYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgYXJyMltpXSwgaSwgYXJyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbmV4cG9ydHMuZXZlcnkgPSBldmVyeTtcblxuXG4vKipcbiAqIENvdW50cyB0aGUgYXJyYXkgZWxlbWVudHMgdGhhdCBmdWxmaWxsIHRoZSBwcmVkaWNhdGUsIGkuZS4gZm9yIHdoaWNoIHRoZVxuICogY2FsbGJhY2sgZnVuY3Rpb24gcmV0dXJucyB0cnVlLiBTa2lwcyBob2xlcyBpbiB0aGUgYXJyYXkuXG4gKlxuICogQHBhcmFtIHshSUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdFxuICogICAgIG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczogUywgVCwgbnVtYmVyLCA/KTogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3JcbiAqICAgICBldmVyeSBlbGVtZW50LiBUYWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmQgdGhlIGFycmF5KS5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcycgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgdGhlIG1hdGNoaW5nIGVsZW1lbnRzLlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5mdW5jdGlvbiBjb3VudChhcnIsIGYsIG9wdF9vYmopIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yRWFjaChhcnIsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4LCBhcnIpIHtcbiAgICBpZiAoZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBlbGVtZW50LCBpbmRleCwgYXJyKSkge1xuICAgICAgKytjb3VudDtcbiAgICB9XG4gIH0sIG9wdF9vYmopO1xuICByZXR1cm4gY291bnQ7XG59XG5leHBvcnRzLmNvdW50ID0gY291bnQ7XG5cblxuLyoqXG4gKiBTZWFyY2ggYW4gYXJyYXkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIGEgZ2l2ZW4gY29uZGl0aW9uIGFuZFxuICogcmV0dXJuIHRoYXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZVxuICogICAgIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogQW4gb3B0aW9uYWwgXCJ0aGlzXCIgY29udGV4dCBmb3IgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7VHxudWxsfSBUaGUgZmlyc3QgYXJyYXkgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgdGVzdCwgb3IgbnVsbCBpZiBub1xuICogICAgIGVsZW1lbnQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBmLCBvcHRfb2JqKSB7XG4gIGNvbnN0IGkgPSBmaW5kSW5kZXgoYXJyLCBmLCBvcHRfb2JqKTtcbiAgcmV0dXJuIGkgPCAwID8gbnVsbCA6IHR5cGVvZiBhcnIgPT09ICdzdHJpbmcnID8gYXJyLmNoYXJBdChpKSA6IGFycltpXTtcbn1cbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5cblxuLyoqXG4gKiBTZWFyY2ggYW4gYXJyYXkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIGEgZ2l2ZW4gY29uZGl0aW9uIGFuZFxuICogcmV0dXJuIGl0cyBpbmRleC5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheVxuICogICAgIGxpa2Ugb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IGJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogICAgIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGRcbiAqICAgICByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtTPX0gb3B0X29iaiBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgYXJyYXkgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgdGVzdCxcbiAqICAgICBvciAtMSBpZiBubyBlbGVtZW50IGlzIGZvdW5kLlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBmLCBvcHRfb2JqKSB7XG4gIGNvbnN0IGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICBjb25zdCBhcnIyID0gKHR5cGVvZiBhcnIgPT09ICdzdHJpbmcnKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGkgaW4gYXJyMiAmJiBmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIGFycjJbaV0sIGksIGFycikpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5leHBvcnRzLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcblxuXG4vKipcbiAqIFNlYXJjaCBhbiBhcnJheSAoaW4gcmV2ZXJzZSBvcmRlcikgZm9yIHRoZSBsYXN0IGVsZW1lbnQgdGhhdCBzYXRpc2ZpZXMgYVxuICogZ2l2ZW4gY29uZGl0aW9uIGFuZCByZXR1cm4gdGhhdCBlbGVtZW50LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZFxuICogICAgIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge1R8bnVsbH0gVGhlIGxhc3QgYXJyYXkgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgdGVzdCwgb3IgbnVsbCBpZiBub1xuICogICAgIGVsZW1lbnQgaXMgZm91bmQuXG4gKiBAdGVtcGxhdGUgVCxTXG4gKi9cbmZ1bmN0aW9uIGZpbmRSaWdodChhcnIsIGYsIG9wdF9vYmopIHtcbiAgY29uc3QgaSA9IGZpbmRJbmRleFJpZ2h0KGFyciwgZiwgb3B0X29iaik7XG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiB0eXBlb2YgYXJyID09PSAnc3RyaW5nJyA/IGFyci5jaGFyQXQoaSkgOiBhcnJbaV07XG59XG5leHBvcnRzLmZpbmRSaWdodCA9IGZpbmRSaWdodDtcblxuXG4vKipcbiAqIFNlYXJjaCBhbiBhcnJheSAoaW4gcmV2ZXJzZSBvcmRlcikgZm9yIHRoZSBsYXN0IGVsZW1lbnQgdGhhdCBzYXRpc2ZpZXMgYVxuICogZ2l2ZW4gY29uZGl0aW9uIGFuZCByZXR1cm4gaXRzIGluZGV4LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZFxuICogICAgIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4IG9mIHRoZSBsYXN0IGFycmF5IGVsZW1lbnQgdGhhdCBwYXNzZXMgdGhlIHRlc3QsXG4gKiAgICAgb3IgLTEgaWYgbm8gZWxlbWVudCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4UmlnaHQoYXJyLCBmLCBvcHRfb2JqKSB7XG4gIGNvbnN0IGwgPSBhcnIubGVuZ3RoOyAgLy8gbXVzdCBiZSBmaXhlZCBkdXJpbmcgbG9vcC4uLiBzZWUgZG9jc1xuICBjb25zdCBhcnIyID0gKHR5cGVvZiBhcnIgPT09ICdzdHJpbmcnKSA/IGFyci5zcGxpdCgnJykgOiBhcnI7XG4gIGZvciAobGV0IGkgPSBsIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoaSBpbiBhcnIyICYmIGYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgYXJyMltpXSwgaSwgYXJyKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cbmV4cG9ydHMuZmluZEluZGV4UmlnaHQgPSBmaW5kSW5kZXhSaWdodDtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGFycmF5IGNvbnRhaW5zIHRoZSBnaXZlbiBvYmplY3QuXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8Pz58c3RyaW5nfSBhcnIgVGhlIGFycmF5IHRvIHRlc3QgZm9yIHRoZSBwcmVzZW5jZSBvZiB0aGVcbiAqICAgICBlbGVtZW50LlxuICogQHBhcmFtIHsqfSBvYmogVGhlIG9iamVjdCBmb3Igd2hpY2ggdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgb2JqIGlzIHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zKGFyciwgb2JqKSB7XG4gIHJldHVybiBpbmRleE9mKGFyciwgb2JqKSA+PSAwO1xufVxuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgYXJyYXkgaXMgZW1wdHkuXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8Pz58c3RyaW5nfSBhcnIgVGhlIGFycmF5IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGVtcHR5LlxuICovXG5mdW5jdGlvbiBpc0VtcHR5KGFycikge1xuICByZXR1cm4gYXJyLmxlbmd0aCA9PSAwO1xufVxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgYXJyYXkuXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8Pz59IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCB0byBjbGVhci5cbiAqL1xuZnVuY3Rpb24gY2xlYXIoYXJyKSB7XG4gIC8vIEZvciBub24gcmVhbCBhcnJheXMgd2UgZG9uJ3QgaGF2ZSB0aGUgbWFnaWMgbGVuZ3RoIHNvIHdlIGRlbGV0ZSB0aGVcbiAgLy8gaW5kaWNlcy5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBkZWxldGUgYXJyW2ldO1xuICAgIH1cbiAgfVxuICBhcnIubGVuZ3RoID0gMDtcbn1cbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcblxuXG4vKipcbiAqIFB1c2hlcyBhbiBpdGVtIGludG8gYW4gYXJyYXksIGlmIGl0J3Mgbm90IGFscmVhZHkgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHtBcnJheTxUPn0gYXJyIEFycmF5IGludG8gd2hpY2ggdG8gaW5zZXJ0IHRoZSBpdGVtLlxuICogQHBhcmFtIHtUfSBvYmogVmFsdWUgdG8gYWRkLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0KGFyciwgb2JqKSB7XG4gIGlmICghY29udGFpbnMoYXJyLCBvYmopKSB7XG4gICAgYXJyLnB1c2gob2JqKTtcbiAgfVxufVxuZXhwb3J0cy5pbnNlcnQgPSBpbnNlcnQ7XG5cblxuLyoqXG4gKiBJbnNlcnRzIGFuIG9iamVjdCBhdCB0aGUgZ2l2ZW4gaW5kZXggb2YgdGhlIGFycmF5LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPD8+fSBhcnIgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7Kn0gb2JqIFRoZSBvYmplY3QgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaSBUaGUgaW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBvYmplY3QuIElmIG9taXR0ZWQsXG4gKiAgICAgIHRyZWF0ZWQgYXMgMC4gQSBuZWdhdGl2ZSBpbmRleCBpcyBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGluc2VydEF0KGFyciwgb2JqLCBvcHRfaSkge1xuICBzcGxpY2UoYXJyLCBvcHRfaSwgMCwgb2JqKTtcbn1cbmV4cG9ydHMuaW5zZXJ0QXQgPSBpbnNlcnRBdDtcblxuXG4vKipcbiAqIEluc2VydHMgYXQgdGhlIGdpdmVuIGluZGV4IG9mIHRoZSBhcnJheSwgYWxsIGVsZW1lbnRzIG9mIGFub3RoZXIgYXJyYXkuXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8Pz59IGFyciBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPD8+fSBlbGVtZW50c1RvQWRkIFRoZSBhcnJheSBvZiBlbGVtZW50cyB0byBhZGQuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pIFRoZSBpbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIG9iamVjdC4gSWYgb21pdHRlZCxcbiAqICAgICAgdHJlYXRlZCBhcyAwLiBBIG5lZ2F0aXZlIGluZGV4IGlzIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0QXJyYXlBdChhcnIsIGVsZW1lbnRzVG9BZGQsIG9wdF9pKSB7XG4gIGdvb2cucGFydGlhbChzcGxpY2UsIGFyciwgb3B0X2ksIDApLmFwcGx5KG51bGwsIGVsZW1lbnRzVG9BZGQpO1xufVxuZXhwb3J0cy5pbnNlcnRBcnJheUF0ID0gaW5zZXJ0QXJyYXlBdDtcblxuXG4vKipcbiAqIEluc2VydHMgYW4gb2JqZWN0IGludG8gYW4gYXJyYXkgYmVmb3JlIGEgc3BlY2lmaWVkIG9iamVjdC5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyciBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtUfSBvYmogVGhlIG9iamVjdCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqMiBUaGUgb2JqZWN0IGJlZm9yZSB3aGljaCBvYmogc2hvdWxkIGJlIGluc2VydGVkLiBJZiBvYmoyXG4gKiAgICAgaXMgb21pdHRlZCBvciBub3QgZm91bmQsIG9iaiBpcyBpbnNlcnRlZCBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShhcnIsIG9iaiwgb3B0X29iajIpIHtcbiAgbGV0IGk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIgfHwgKGkgPSBpbmRleE9mKGFyciwgb3B0X29iajIpKSA8IDApIHtcbiAgICBhcnIucHVzaChvYmopO1xuICB9IGVsc2Uge1xuICAgIGluc2VydEF0KGFyciwgb2JqLCBpKTtcbiAgfVxufVxuZXhwb3J0cy5pbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmU7XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgcGFydGljdWxhciB2YWx1ZSBmcm9tIGFuIGFycmF5LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fSBhcnIgQXJyYXkgZnJvbSB3aGljaCB0byByZW1vdmVcbiAqICAgICB2YWx1ZS5cbiAqIEBwYXJhbSB7VH0gb2JqIE9iamVjdCB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiByZW1vdmUoYXJyLCBvYmopIHtcbiAgY29uc3QgaSA9IGluZGV4T2YoYXJyLCBvYmopO1xuICBsZXQgcnY7XG4gIGlmICgocnYgPSBpID49IDApKSB7XG4gICAgcmVtb3ZlQXQoYXJyLCBpKTtcbiAgfVxuICByZXR1cm4gcnY7XG59XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZiBhIHBhcnRpY3VsYXIgdmFsdWUgZnJvbSBhbiBhcnJheS5cbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8VD59IGFyciBBcnJheSBmcm9tIHdoaWNoIHRvIHJlbW92ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7VH0gb2JqIE9iamVjdCB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiByZW1vdmVMYXN0KGFyciwgb2JqKSB7XG4gIGNvbnN0IGkgPSBsYXN0SW5kZXhPZihhcnIsIG9iaik7XG4gIGlmIChpID49IDApIHtcbiAgICByZW1vdmVBdChhcnIsIGkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucmVtb3ZlTGFzdCA9IHJlbW92ZUxhc3Q7XG5cblxuLyoqXG4gKiBSZW1vdmVzIGZyb20gYW4gYXJyYXkgdGhlIGVsZW1lbnQgYXQgaW5kZXggaVxuICogQHBhcmFtIHtJQXJyYXlMaWtlPD8+fSBhcnIgQXJyYXkgb3IgYXJyYXkgbGlrZSBvYmplY3QgZnJvbSB3aGljaCB0b1xuICogICAgIHJlbW92ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpIFRoZSBpbmRleCB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF0KGFyciwgaSkge1xuICBhc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gIC8vIHVzZSBnZW5lcmljIGZvcm0gb2Ygc3BsaWNlXG4gIC8vIHNwbGljZSByZXR1cm5zIHRoZSByZW1vdmVkIGl0ZW1zIGFuZCBpZiBzdWNjZXNzZnVsIHRoZSBsZW5ndGggb2YgdGhhdFxuICAvLyB3aWxsIGJlIDFcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcnIsIGksIDEpLmxlbmd0aCA9PSAxO1xufVxuZXhwb3J0cy5yZW1vdmVBdCA9IHJlbW92ZUF0O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBzYXRpc2ZpZXMgdGhlIGdpdmVuIGNvbmRpdGlvbi5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPn0gYXJyIEFycmF5IG9yIGFycmF5XG4gKiAgICAgbGlrZSBvYmplY3Qgb3ZlciB3aGljaCB0byBpdGVyYXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpTLCBULCBudW1iZXIsID8pIDogYm9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gKiAgICAgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZFxuICogICAgIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlSWYoYXJyLCBmLCBvcHRfb2JqKSB7XG4gIGNvbnN0IGkgPSBmaW5kSW5kZXgoYXJyLCBmLCBvcHRfb2JqKTtcbiAgaWYgKGkgPj0gMCkge1xuICAgIHJlbW92ZUF0KGFyciwgaSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5yZW1vdmVJZiA9IHJlbW92ZUlmO1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgdmFsdWVzIHRoYXQgc2F0aXNmeSB0aGUgZ2l2ZW4gY29uZGl0aW9uLlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fSBhcnIgQXJyYXkgb3IgYXJyYXlcbiAqICAgICBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbih0aGlzOlMsIFQsIG51bWJlciwgPykgOiBib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsXG4gKiAgICAgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqICAgICB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmQgdGhlIGFycmF5KSBhbmQgc2hvdWxkXG4gKiAgICAgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7Uz19IG9wdF9vYmogQW4gb3B0aW9uYWwgXCJ0aGlzXCIgY29udGV4dCBmb3IgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGl0ZW1zIHJlbW92ZWRcbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQWxsSWYoYXJyLCBmLCBvcHRfb2JqKSB7XG4gIGxldCByZW1vdmVkQ291bnQgPSAwO1xuICBmb3JFYWNoUmlnaHQoYXJyLCBmdW5jdGlvbih2YWwsIGluZGV4KSB7XG4gICAgaWYgKGYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgdmFsLCBpbmRleCwgYXJyKSkge1xuICAgICAgaWYgKHJlbW92ZUF0KGFyciwgaW5kZXgpKSB7XG4gICAgICAgIHJlbW92ZWRDb3VudCsrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZW1vdmVkQ291bnQ7XG59XG5leHBvcnRzLnJlbW92ZUFsbElmID0gcmVtb3ZlQWxsSWY7XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBqb2luaW5nIHRoZSBhcmd1bWVudHMuICBJZiBhcnJheXNcbiAqIGFyZSBwYXNzZWQgdGhlbiB0aGVpciBpdGVtcyBhcmUgYWRkZWQsIGhvd2V2ZXIsIGlmIG5vbi1hcnJheXMgYXJlIHBhc3NlZCB0aGV5XG4gKiB3aWxsIGJlIGFkZGVkIHRvIHRoZSByZXR1cm4gYXJyYXkgYXMgaXMuXG4gKlxuICogTm90ZSB0aGF0IEFycmF5TGlrZSBvYmplY3RzIHdpbGwgYmUgYWRkZWQgYXMgaXMsIHJhdGhlciB0aGFuIGhhdmluZyB0aGVpclxuICogaXRlbXMgYWRkZWQuXG4gKlxuICogY29uY2F0KFsxLCAyXSwgWzMsIDRdKSAtPiBbMSwgMiwgMywgNF1cbiAqIGNvbmNhdCgwLCBbMSwgMl0pIC0+IFswLCAxLCAyXVxuICogY29uY2F0KFsxLCAyXSwgbnVsbCkgLT4gWzEsIDIsIG51bGxdXG4gKlxuICogVGhlcmUgaXMgYnVnIGluIGFsbCBjdXJyZW50IHZlcnNpb25zIG9mIElFICg2LCA3IGFuZCA4KSB3aGVyZSBhcnJheXMgY3JlYXRlZFxuICogaW4gYW4gaWZyYW1lIGJlY29tZSBjb3JydXB0ZWQgc29vbiAobm90IGltbWVkaWF0ZWx5KSBhZnRlciB0aGUgaWZyYW1lIGlzXG4gKiBkZXN0cm95ZWQuIFRoaXMgaXMgY29tbW9uIGlmIGxvYWRpbmcgZGF0YSB2aWEgZ29vZy5uZXQuSWZyYW1lSW8sIGZvciBleGFtcGxlLlxuICogVGhpcyBjb3JydXB0aW9uIG9ubHkgYWZmZWN0cyB0aGUgY29uY2F0IG1ldGhvZCB3aGljaCB3aWxsIHN0YXJ0IHRocm93aW5nXG4gKiBDYXRhc3Ryb3BoaWMgRXJyb3JzICgjLTIxNDc0MTgxMTMpLlxuICpcbiAqIFNlZSBodHRwOi8vZW5kb2Zsb3cuY29tL3NjcmF0Y2gvY29ycnVwdGVkLWFycmF5cy5odG1sIGZvciBhIHRlc3QgY2FzZS5cbiAqXG4gKiBJbnRlcm5hbGx5IGdvb2cuYXJyYXkgc2hvdWxkIHVzZSB0aGlzLCBzbyB0aGF0IGFsbCBtZXRob2RzIHdpbGwgY29udGludWUgdG9cbiAqIHdvcmsgb24gdGhlc2UgYnJva2VuIGFycmF5IG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBJdGVtcyB0byBjb25jYXRlbmF0ZS4gIEFycmF5cyB3aWxsIGhhdmUgZWFjaCBpdGVtXG4gKiAgICAgYWRkZWQsIHdoaWxlIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMgd2lsbCBiZSBhZGRlZCBhcyBpcy5cbiAqIEByZXR1cm4geyFBcnJheTw/Pn0gVGhlIG5ldyByZXN1bHRhbnQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCh2YXJfYXJncykge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSBjb250ZW50cyBvZiBhbGwgdGhlIGFycmF5cyBwYXNzZWQuXG4gKiBAcGFyYW0gey4uLiFBcnJheTxUPn0gdmFyX2FyZ3NcbiAqIEByZXR1cm4geyFBcnJheTxUPn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIGpvaW4odmFyX2FyZ3MpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGFyZ3VtZW50cyk7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5cbi8qKlxuICogQ29udmVydHMgYW4gb2JqZWN0IHRvIGFuIGFycmF5LlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fHN0cmluZ30gb2JqZWN0ICBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gYW5cbiAqICAgICBhcnJheS5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gVGhlIG9iamVjdCBjb252ZXJ0ZWQgaW50byBhbiBhcnJheS4gSWYgb2JqZWN0IGhhcyBhXG4gKiAgICAgbGVuZ3RoIHByb3BlcnR5LCBldmVyeSBwcm9wZXJ0eSBpbmRleGVkIHdpdGggYSBub24tbmVnYXRpdmUgbnVtYmVyXG4gKiAgICAgbGVzcyB0aGFuIGxlbmd0aCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHQuIElmIG9iamVjdCBkb2VzIG5vdFxuICogICAgIGhhdmUgYSBsZW5ndGggcHJvcGVydHksIGFuIGVtcHR5IGFycmF5IHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iamVjdCkge1xuICBjb25zdCBsZW5ndGggPSBvYmplY3QubGVuZ3RoO1xuXG4gIC8vIElmIGxlbmd0aCBpcyBub3QgYSBudW1iZXIgdGhlIGZvbGxvd2luZyBpcyBmYWxzZS4gVGhpcyBjYXNlIGlzIGtlcHQgZm9yXG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHNpbmNlIHRoZXJlIGFyZSBjYWxsZXJzIHRoYXQgcGFzcyBvYmplY3RzIHRoYXQgYXJlXG4gIC8vIG5vdCBhcnJheSBsaWtlLlxuICBpZiAobGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHJ2ID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcnZbaV0gPSBvYmplY3RbaV07XG4gICAgfVxuICAgIHJldHVybiBydjtcbiAgfVxuICByZXR1cm4gW107XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5cbi8qKlxuICogRG9lcyBhIHNoYWxsb3cgY29weSBvZiBhbiBhcnJheS5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPnxzdHJpbmd9IGFyciAgQXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgdG9cbiAqICAgICBjbG9uZS5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gQ2xvbmUgb2YgdGhlIGlucHV0IGFycmF5LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuY29uc3QgY2xvbmUgPSB0b0FycmF5O1xuZXhwb3J0cy5jbG9uZSA9IGNsb25lO1xuXG5cbi8qKlxuICogRXh0ZW5kcyBhbiBhcnJheSB3aXRoIGFub3RoZXIgYXJyYXksIGVsZW1lbnQsIG9yIFwiYXJyYXkgbGlrZVwiIG9iamVjdC5cbiAqIFRoaXMgZnVuY3Rpb24gb3BlcmF0ZXMgJ2luLXBsYWNlJywgaXQgZG9lcyBub3QgY3JlYXRlIGEgbmV3IEFycmF5LlxuICpcbiAqIEV4YW1wbGU6XG4gKiB2YXIgYSA9IFtdO1xuICogZXh0ZW5kKGEsIFswLCAxXSk7XG4gKiBhOyAvLyBbMCwgMV1cbiAqIGV4dGVuZChhLCAyKTtcbiAqIGE7IC8vIFswLCAxLCAyXVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VkFMVUU+fSBhcnIxICBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHsuLi4oSUFycmF5TGlrZTxWQUxVRT58VkFMVUUpfSB2YXJfYXJncyBUaGUgZWxlbWVudHMgb3IgYXJyYXlzIG9mXG4gKiAgICAgZWxlbWVudHMgdG8gYWRkIHRvIGFycjEuXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGFycjEsIHZhcl9hcmdzKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJyMiA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoZ29vZy5pc0FycmF5TGlrZShhcnIyKSkge1xuICAgICAgY29uc3QgbGVuMSA9IGFycjEubGVuZ3RoIHx8IDA7XG4gICAgICBjb25zdCBsZW4yID0gYXJyMi5sZW5ndGggfHwgMDtcbiAgICAgIGFycjEubGVuZ3RoID0gbGVuMSArIGxlbjI7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjI7IGorKykge1xuICAgICAgICBhcnIxW2xlbjEgKyBqXSA9IGFycjJbal07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFycjEucHVzaChhcnIyKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuXG5cbi8qKlxuICogQWRkcyBvciByZW1vdmVzIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkuIFRoaXMgaXMgYSBnZW5lcmljIHZlcnNpb24gb2YgQXJyYXlcbiAqIHNwbGljZS4gVGhpcyBtZWFucyB0aGF0IGl0IG1pZ2h0IHdvcmsgb24gb3RoZXIgb2JqZWN0cyBzaW1pbGFyIHRvIGFycmF5cyxcbiAqIHN1Y2ggYXMgdGhlIGFyZ3VtZW50cyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fSBhcnIgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7bnVtYmVyfHVuZGVmaW5lZH0gaW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IGNoYW5naW5nIHRoZVxuICogICAgIGFycmF5LiBJZiBub3QgZGVmaW5lZCwgdHJlYXRlZCBhcyAwLlxuICogQHBhcmFtIHtudW1iZXJ9IGhvd01hbnkgSG93IG1hbnkgZWxlbWVudHMgdG8gcmVtb3ZlICgwIG1lYW5zIG5vIHJlbW92YWwuIEFcbiAqICAgICB2YWx1ZSBiZWxvdyAwIGlzIHRyZWF0ZWQgYXMgemVybyBhbmQgc28gaXMgYW55IG90aGVyIG5vbiBudW1iZXIuIE51bWJlcnNcbiAqICAgICBhcmUgZmxvb3JlZCkuXG4gKiBAcGFyYW0gey4uLlR9IHZhcl9hcmdzIE9wdGlvbmFsLCBhZGRpdGlvbmFsIGVsZW1lbnRzIHRvIGluc2VydCBpbnRvIHRoZVxuICogICAgIGFycmF5LlxuICogQHJldHVybiB7IUFycmF5PFQ+fSB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIHNwbGljZShhcnIsIGluZGV4LCBob3dNYW55LCB2YXJfYXJncykge1xuICBhc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGFyciwgc2xpY2UoYXJndW1lbnRzLCAxKSk7XG59XG5leHBvcnRzLnNwbGljZSA9IHNwbGljZTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgZnJvbSBhIHNlZ21lbnQgb2YgYW4gYXJyYXkuIFRoaXMgaXMgYSBnZW5lcmljIHZlcnNpb24gb2ZcbiAqIEFycmF5IHNsaWNlLiBUaGlzIG1lYW5zIHRoYXQgaXQgbWlnaHQgd29yayBvbiBvdGhlciBvYmplY3RzIHNpbWlsYXIgdG9cbiAqIGFycmF5cywgc3VjaCBhcyB0aGUgYXJndW1lbnRzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8VD58c3RyaW5nfSBhcnIgVGhlIGFycmF5IGZyb21cbiAqIHdoaWNoIHRvIGNvcHkgYSBzZWdtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCB0byBjb3B5LlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZW5kIFRoZSBpbmRleCBhZnRlciB0aGUgbGFzdCBlbGVtZW50IHRvIGNvcHkuXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgdGhlIHNwZWNpZmllZCBzZWdtZW50IG9mIHRoZVxuICogICAgIG9yaWdpbmFsIGFycmF5LlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gc2xpY2UoYXJyLCBzdGFydCwgb3B0X2VuZCkge1xuICBhc3NlcnRzLmFzc2VydChhcnIubGVuZ3RoICE9IG51bGwpO1xuXG4gIC8vIHBhc3NpbmcgMSBhcmcgdG8gc2xpY2UgaXMgbm90IHRoZSBzYW1lIGFzIHBhc3NpbmcgMiB3aGVyZSB0aGUgc2Vjb25kIGlzXG4gIC8vIG51bGwgb3IgdW5kZWZpbmVkIChpbiB0aGF0IGNhc2UgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0cmVhdGVkIGFzIDApLlxuICAvLyB3ZSBjb3VsZCB1c2Ugc2xpY2Ugb24gdGhlIGFyZ3VtZW50cyBvYmplY3QgYW5kIHRoZW4gdXNlIGFwcGx5IGluc3RlYWQgb2ZcbiAgLy8gdGVzdGluZyB0aGUgbGVuZ3RoXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDIpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyLCBzdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyciwgc3RhcnQsIG9wdF9lbmQpO1xuICB9XG59XG5leHBvcnRzLnNsaWNlID0gc2xpY2U7XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBkdXBsaWNhdGVzIGZyb20gYW4gYXJyYXkgKHJldGFpbmluZyBvbmx5IHRoZSBmaXJzdFxuICogb2NjdXJyZW5jZSBvZiBlYWNoIGFycmF5IGVsZW1lbnQpLiAgVGhpcyBmdW5jdGlvbiBtb2RpZmllcyB0aGVcbiAqIGFycmF5IGluIHBsYWNlIGFuZCBkb2Vzbid0IGNoYW5nZSB0aGUgb3JkZXIgb2YgdGhlIG5vbi1kdXBsaWNhdGUgaXRlbXMuXG4gKlxuICogRm9yIG9iamVjdHMsIGR1cGxpY2F0ZXMgYXJlIGlkZW50aWZpZWQgYXMgaGF2aW5nIHRoZSBzYW1lIHVuaXF1ZSBJRCBhc1xuICogZGVmaW5lZCBieSB7QGxpbmsgZ29vZy5nZXRVaWR9LlxuICpcbiAqIEFsdGVybmF0aXZlbHkgeW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tIGhhc2ggZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdW5pcXVlXG4gKiB2YWx1ZSBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheSBpdCBzaG91bGQgY29uc2lkZXIgdW5pcXVlLlxuICpcbiAqIFJ1bnRpbWU6IE4sXG4gKiBXb3JzdGNhc2Ugc3BhY2U6IDJOIChubyBkdXBlcylcbiAqXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8VD59IGFyciBUaGUgYXJyYXkgZnJvbSB3aGljaCB0byByZW1vdmVcbiAqICAgICBkdXBsaWNhdGVzLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9ydiBBbiBvcHRpb25hbCBhcnJheSBpbiB3aGljaCB0byByZXR1cm4gdGhlIHJlc3VsdHMsXG4gKiAgICAgaW5zdGVhZCBvZiBwZXJmb3JtaW5nIHRoZSByZW1vdmFsIGlucGxhY2UuICBJZiBzcGVjaWZpZWQsIHRoZSBvcmlnaW5hbFxuICogICAgIGFycmF5IHdpbGwgcmVtYWluIHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6c3RyaW5nPX0gb3B0X2hhc2hGbiBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byB1c2UgdG9cbiAqICAgICBhcHBseSB0byBldmVyeSBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgdW5pcXVlXG4gKiAgICAgdmFsdWUgZm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaXQgc2hvdWxkIGNvbnNpZGVyIHVuaXF1ZS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXMoYXJyLCBvcHRfcnYsIG9wdF9oYXNoRm4pIHtcbiAgY29uc3QgcmV0dXJuQXJyYXkgPSBvcHRfcnYgfHwgYXJyO1xuICBjb25zdCBkZWZhdWx0SGFzaEZuID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIC8vIFByZWZpeCBlYWNoIHR5cGUgd2l0aCBhIHNpbmdsZSBjaGFyYWN0ZXIgcmVwcmVzZW50aW5nIHRoZSB0eXBlIHRvXG4gICAgLy8gcHJldmVudCBjb25mbGljdGluZyBrZXlzIChlLmcuIHRydWUgYW5kICd0cnVlJykuXG4gICAgcmV0dXJuIGdvb2cuaXNPYmplY3QoaXRlbSkgPyAnbycgKyBnb29nLmdldFVpZChpdGVtKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGl0ZW0pLmNoYXJBdCgwKSArIGl0ZW07XG4gIH07XG4gIGNvbnN0IGhhc2hGbiA9IG9wdF9oYXNoRm4gfHwgZGVmYXVsdEhhc2hGbjtcblxuICBsZXQgY3Vyc29ySW5zZXJ0ID0gMDtcbiAgbGV0IGN1cnNvclJlYWQgPSAwO1xuICBjb25zdCBzZWVuID0ge307XG5cbiAgd2hpbGUgKGN1cnNvclJlYWQgPCBhcnIubGVuZ3RoKSB7XG4gICAgY29uc3QgY3VycmVudCA9IGFycltjdXJzb3JSZWFkKytdO1xuICAgIGNvbnN0IGtleSA9IGhhc2hGbihjdXJyZW50KTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWVuLCBrZXkpKSB7XG4gICAgICBzZWVuW2tleV0gPSB0cnVlO1xuICAgICAgcmV0dXJuQXJyYXlbY3Vyc29ySW5zZXJ0KytdID0gY3VycmVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuQXJyYXkubGVuZ3RoID0gY3Vyc29ySW5zZXJ0O1xufVxuZXhwb3J0cy5yZW1vdmVEdXBsaWNhdGVzID0gcmVtb3ZlRHVwbGljYXRlcztcblxuXG4vKipcbiAqIFNlYXJjaGVzIHRoZSBzcGVjaWZpZWQgYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0IHVzaW5nIHRoZSBiaW5hcnlcbiAqIHNlYXJjaCBhbGdvcml0aG0uICBJZiBubyBvcHRfY29tcGFyZUZuIGlzIHNwZWNpZmllZCwgZWxlbWVudHMgYXJlIGNvbXBhcmVkXG4gKiB1c2luZyA8Y29kZT5kZWZhdWx0Q29tcGFyZTwvY29kZT4sIHdoaWNoIGNvbXBhcmVzIHRoZSBlbGVtZW50c1xuICogdXNpbmcgdGhlIGJ1aWx0IGluIDwgYW5kID4gb3BlcmF0b3JzLiAgVGhpcyB3aWxsIHByb2R1Y2UgdGhlIGV4cGVjdGVkXG4gKiBiZWhhdmlvciBmb3IgaG9tb2dlbmVvdXMgYXJyYXlzIG9mIFN0cmluZyhzKSBhbmQgTnVtYmVyKHMpLiBUaGUgYXJyYXlcbiAqIHNwZWNpZmllZCA8Yj5tdXN0PC9iPiBiZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIChhcyBkZWZpbmVkIGJ5IHRoZVxuICogY29tcGFyaXNvbiBmdW5jdGlvbikuICBJZiB0aGUgYXJyYXkgaXMgbm90IHNvcnRlZCwgcmVzdWx0cyBhcmUgdW5kZWZpbmVkLlxuICogSWYgdGhlIGFycmF5IGNvbnRhaW5zIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgc3BlY2lmaWVkIHRhcmdldCB2YWx1ZSwgdGhlXG4gKiBsZWZ0LW1vc3QgaW5zdGFuY2Ugd2lsbCBiZSBmb3VuZC5cbiAqXG4gKiBSdW50aW1lOiBPKGxvZyBuKVxuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxWQUxVRT59IGFyciBUaGUgYXJyYXkgdG8gYmUgc2VhcmNoZWQuXG4gKiBAcGFyYW0ge1RBUkdFVH0gdGFyZ2V0IFRoZSBzb3VnaHQgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRBUkdFVCwgVkFMVUUpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb25cbiAqICAgICBmdW5jdGlvbiBieSB3aGljaCB0aGUgYXJyYXkgaXMgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG9cbiAqICAgICBjb21wYXJlLCB0aGUgdGFyZ2V0IHZhbHVlIGFuZCBhbiBlbGVtZW50IGZyb20geW91ciBhcnJheSwgYW5kIHJldHVybiBhXG4gKiAgICAgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGVcbiAqICAgICBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEByZXR1cm4ge251bWJlcn0gTG93ZXN0IGluZGV4IG9mIHRoZSB0YXJnZXQgdmFsdWUgaWYgZm91bmQsIG90aGVyd2lzZVxuICogICAgICgtKGluc2VydGlvbiBwb2ludCkgLSAxKS4gVGhlIGluc2VydGlvbiBwb2ludCBpcyB3aGVyZSB0aGUgdmFsdWUgc2hvdWxkXG4gKiAgICAgYmUgaW5zZXJ0ZWQgaW50byBhcnIgdG8gcHJlc2VydmUgdGhlIHNvcnRlZCBwcm9wZXJ0eS4gIFJldHVybiB2YWx1ZSA+PSAwXG4gKiAgICAgaWZmIHRhcmdldCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBUQVJHRVQsIFZBTFVFXG4gKi9cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChhcnIsIHRhcmdldCwgb3B0X2NvbXBhcmVGbikge1xuICByZXR1cm4gYmluYXJ5U2VhcmNoXyhcbiAgICAgIGFyciwgb3B0X2NvbXBhcmVGbiB8fCBkZWZhdWx0Q29tcGFyZSwgZmFsc2UgLyogaXNFdmFsdWF0b3IgKi8sIHRhcmdldCk7XG59XG5leHBvcnRzLmJpbmFyeVNlYXJjaCA9IGJpbmFyeVNlYXJjaDtcblxuXG4vKipcbiAqIFNlbGVjdHMgYW4gaW5kZXggaW4gdGhlIHNwZWNpZmllZCBhcnJheSB1c2luZyB0aGUgYmluYXJ5IHNlYXJjaCBhbGdvcml0aG0uXG4gKiBUaGUgZXZhbHVhdG9yIHJlY2VpdmVzIGFuIGVsZW1lbnQgYW5kIGRldGVybWluZXMgd2hldGhlciB0aGUgZGVzaXJlZCBpbmRleFxuICogaXMgYmVmb3JlLCBhdCwgb3IgYWZ0ZXIgaXQuICBUaGUgZXZhbHVhdG9yIG11c3QgYmUgY29uc2lzdGVudCAoZm9ybWFsbHksXG4gKiBtYXAobWFwKGFyciwgZXZhbHVhdG9yLCBvcHRfb2JqKSwgZ29vZy5tYXRoLnNpZ24pXG4gKiBtdXN0IGJlIG1vbm90b25pY2FsbHkgbm9uLWluY3JlYXNpbmcpLlxuICpcbiAqIFJ1bnRpbWU6IE8obG9nIG4pXG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFZBTFVFPn0gYXJyIFRoZSBhcnJheSB0byBiZSBzZWFyY2hlZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTLCBWQUxVRSwgbnVtYmVyLCA/KTogbnVtYmVyfSBldmFsdWF0b3JcbiAqICAgICBFdmFsdWF0b3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsIHRoZSBpbmRleCBhbmRcbiAqICAgICB0aGUgYXJyYXkpLiBTaG91bGQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBkZXNpcmVkIGluZGV4IGlzIGJlZm9yZSwgYXQsIG9yIGFmdGVyIHRoZVxuICogICAgIGVsZW1lbnQgcGFzc2VkIHRvIGl0LlxuICogQHBhcmFtIHtUSElTPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBldmFsdWF0b3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEluZGV4IG9mIHRoZSBsZWZ0bW9zdCBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIGV2YWx1YXRvciwgaWZcbiAqICAgICBzdWNoIGV4aXN0czsgb3RoZXJ3aXNlICgtKGluc2VydGlvbiBwb2ludCkgLSAxKS4gVGhlIGluc2VydGlvbiBwb2ludCBpc1xuICogICAgIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBmb3Igd2hpY2ggdGhlIGV2YWx1YXRvciByZXR1cm5zIG5lZ2F0aXZlLFxuICogICAgIG9yIGFyci5sZW5ndGggaWYgbm8gc3VjaCBlbGVtZW50IGV4aXN0cy4gVGhlIHJldHVybiB2YWx1ZSBpcyBub24tbmVnYXRpdmVcbiAqICAgICBpZmYgYSBtYXRjaCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBUSElTLCBWQUxVRVxuICovXG5mdW5jdGlvbiBiaW5hcnlTZWxlY3QoYXJyLCBldmFsdWF0b3IsIG9wdF9vYmopIHtcbiAgcmV0dXJuIGJpbmFyeVNlYXJjaF8oXG4gICAgICBhcnIsIGV2YWx1YXRvciwgdHJ1ZSAvKiBpc0V2YWx1YXRvciAqLywgdW5kZWZpbmVkIC8qIG9wdF90YXJnZXQgKi8sXG4gICAgICBvcHRfb2JqKTtcbn1cbmV4cG9ydHMuYmluYXJ5U2VsZWN0ID0gYmluYXJ5U2VsZWN0O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBiaW5hcnkgc2VhcmNoIGFsZ29yaXRobSB3aGljaCBrbm93cyBob3cgdG8gdXNlIGJvdGhcbiAqIGNvbXBhcmlzb24gZnVuY3Rpb25zIGFuZCBldmFsdWF0b3JzLiBJZiBhbiBldmFsdWF0b3IgaXMgcHJvdmlkZWQsIHdpbGwgY2FsbFxuICogdGhlIGV2YWx1YXRvciB3aXRoIHRoZSBnaXZlbiBvcHRpb25hbCBkYXRhIG9iamVjdCwgY29uZm9ybWluZyB0byB0aGVcbiAqIGludGVyZmFjZSBkZWZpbmVkIGluIGJpbmFyeVNlbGVjdC4gT3RoZXJ3aXNlLCBpZiBhIGNvbXBhcmlzb24gZnVuY3Rpb24gaXNcbiAqIHByb3ZpZGVkLCB3aWxsIGNhbGwgdGhlIGNvbXBhcmlzb24gZnVuY3Rpb24gYWdhaW5zdCB0aGUgZ2l2ZW4gZGF0YSBvYmplY3QuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBwdXJwb3NlZnVsbHkgZG9lcyBub3QgdXNlIGdvb2cuYmluZCBvciBnb29nLnBhcnRpYWwgZm9yXG4gKiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICpcbiAqIFJ1bnRpbWU6IE8obG9nIG4pXG4gKlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPD8+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNlYXJjaGVkLlxuICogQHBhcmFtIHtmdW5jdGlvbig/LCA/LCA/KTogbnVtYmVyIHwgZnVuY3Rpb24oPywgPyk6IG51bWJlcn0gY29tcGFyZUZuXG4gKiAgICAgRWl0aGVyIGFuIGV2YWx1YXRvciBvciBhIGNvbXBhcmlzb24gZnVuY3Rpb24sIGFzIGRlZmluZWQgYnkgYmluYXJ5U2VhcmNoXG4gKiAgICAgYW5kIGJpbmFyeVNlbGVjdCBhYm92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFdmFsdWF0b3IgV2hldGhlciB0aGUgZnVuY3Rpb24gaXMgYW4gZXZhbHVhdG9yIG9yIGFcbiAqICAgICBjb21wYXJpc29uIGZ1bmN0aW9uLlxuICogQHBhcmFtIHs/PX0gb3B0X3RhcmdldCBJZiB0aGUgZnVuY3Rpb24gaXMgYSBjb21wYXJpc29uIGZ1bmN0aW9uLCB0aGVuXG4gKiAgICAgdGhpcyBpcyB0aGUgdGFyZ2V0IHRvIGJpbmFyeSBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2VsZk9iaiBJZiB0aGUgZnVuY3Rpb24gaXMgYW4gZXZhbHVhdG9yLCB0aGlzIGlzIGFuXG4gKiAgICAgb3B0aW9uYWwgdGhpcyBvYmplY3QgZm9yIHRoZSBldmFsdWF0b3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IExvd2VzdCBpbmRleCBvZiB0aGUgdGFyZ2V0IHZhbHVlIGlmIGZvdW5kLCBvdGhlcndpc2VcbiAqICAgICAoLShpbnNlcnRpb24gcG9pbnQpIC0gMSkuIFRoZSBpbnNlcnRpb24gcG9pbnQgaXMgd2hlcmUgdGhlIHZhbHVlIHNob3VsZFxuICogICAgIGJlIGluc2VydGVkIGludG8gYXJyIHRvIHByZXNlcnZlIHRoZSBzb3J0ZWQgcHJvcGVydHkuICBSZXR1cm4gdmFsdWUgPj0gMFxuICogICAgIGlmZiB0YXJnZXQgaXMgZm91bmQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2hfKGFyciwgY29tcGFyZUZuLCBpc0V2YWx1YXRvciwgb3B0X3RhcmdldCwgb3B0X3NlbGZPYmopIHtcbiAgbGV0IGxlZnQgPSAwOyAgICAgICAgICAgIC8vIGluY2x1c2l2ZVxuICBsZXQgcmlnaHQgPSBhcnIubGVuZ3RoOyAgLy8gZXhjbHVzaXZlXG4gIGxldCBmb3VuZDtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IGxlZnQgKyAoKHJpZ2h0IC0gbGVmdCkgPj4+IDEpO1xuICAgIGxldCBjb21wYXJlUmVzdWx0O1xuICAgIGlmIChpc0V2YWx1YXRvcikge1xuICAgICAgY29tcGFyZVJlc3VsdCA9IGNvbXBhcmVGbi5jYWxsKG9wdF9zZWxmT2JqLCBhcnJbbWlkZGxlXSwgbWlkZGxlLCBhcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOT1RFKGRpbXZhcik6IFRvIGF2b2lkIHRoaXMgY2FzdCwgd2UnZCBoYXZlIHRvIHVzZSBmdW5jdGlvbiBvdmVybG9hZGluZ1xuICAgICAgLy8gZm9yIHRoZSB0eXBlIG9mIGJpbmFyeVNlYXJjaF8sIHdoaWNoIHRoZSB0eXBlIHN5c3RlbSBjYW4ndCBleHByZXNzIHlldC5cbiAgICAgIGNvbXBhcmVSZXN1bHQgPSAvKiogQHR5cGUge2Z1bmN0aW9uKD8sID8pOiBudW1iZXJ9ICovIChjb21wYXJlRm4pKFxuICAgICAgICAgIG9wdF90YXJnZXQsIGFyclttaWRkbGVdKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVSZXN1bHQgPiAwKSB7XG4gICAgICBsZWZ0ID0gbWlkZGxlICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWRkbGU7XG4gICAgICAvLyBXZSBhcmUgbG9va2luZyBmb3IgdGhlIGxvd2VzdCBpbmRleCBzbyB3ZSBjYW4ndCByZXR1cm4gaW1tZWRpYXRlbHkuXG4gICAgICBmb3VuZCA9ICFjb21wYXJlUmVzdWx0O1xuICAgIH1cbiAgfVxuICAvLyBsZWZ0IGlzIHRoZSBpbmRleCBpZiBmb3VuZCwgb3IgdGhlIGluc2VydGlvbiBwb2ludCBvdGhlcndpc2UuXG4gIC8vIEF2b2lkaW5nIGJpdHdpc2Ugbm90IG9wZXJhdG9yLCBhcyB0aGF0IGNhdXNlcyBhIGxvc3MgaW4gcHJlY2lzaW9uIGZvciBhcnJheVxuICAvLyBpbmRleGVzIG91dHNpZGUgdGhlIGJvdW5kcyBvZiBhIDMyLWJpdCBzaWduZWQgaW50ZWdlci4gIEFycmF5IGluZGV4ZXMgaGF2ZVxuICAvLyBhIG1heGltdW0gdmFsdWUgb2YgMl4zMi0yIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNhcnJheS1pbmRleFxuICByZXR1cm4gZm91bmQgPyBsZWZ0IDogLWxlZnQgLSAxO1xufVxuXG5cbi8qKlxuICogU29ydHMgdGhlIHNwZWNpZmllZCBhcnJheSBpbnRvIGFzY2VuZGluZyBvcmRlci4gIElmIG5vIG9wdF9jb21wYXJlRm4gaXNcbiAqIHNwZWNpZmllZCwgZWxlbWVudHMgYXJlIGNvbXBhcmVkIHVzaW5nXG4gKiA8Y29kZT5kZWZhdWx0Q29tcGFyZTwvY29kZT4sIHdoaWNoIGNvbXBhcmVzIHRoZSBlbGVtZW50cyB1c2luZ1xuICogdGhlIGJ1aWx0IGluIDwgYW5kID4gb3BlcmF0b3JzLiAgVGhpcyB3aWxsIHByb2R1Y2UgdGhlIGV4cGVjdGVkIGJlaGF2aW9yXG4gKiBmb3IgaG9tb2dlbmVvdXMgYXJyYXlzIG9mIFN0cmluZyhzKSBhbmQgTnVtYmVyKHMpLCB1bmxpa2UgdGhlIG5hdGl2ZSBzb3J0LFxuICogYnV0IHdpbGwgZ2l2ZSB1bnByZWRpY3RhYmxlIHJlc3VsdHMgZm9yIGhldGVyb2dlbmVvdXMgbGlzdHMgb2Ygc3RyaW5ncyBhbmRcbiAqIG51bWJlcnMgd2l0aCBkaWZmZXJlbnQgbnVtYmVycyBvZiBkaWdpdHMuXG4gKlxuICogVGhpcyBzb3J0IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHN0YWJsZS5cbiAqXG4gKiBSdW50aW1lOiBTYW1lIGFzIGBBcnJheS5wcm90b3R5cGUuc29ydGBcbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKFQsVCk6bnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBPcHRpb25hbCBjb21wYXJpc29uXG4gKiAgICAgZnVuY3Rpb24gYnkgd2hpY2ggdGhlXG4gKiAgICAgYXJyYXkgaXMgdG8gYmUgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSwgYW5kIHJldHVybiBhXG4gKiAgICAgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGVcbiAqICAgICBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIHNvcnQoYXJyLCBvcHRfY29tcGFyZUZuKSB7XG4gIC8vIFRPRE8oYXJ2KTogVXBkYXRlIHR5cGUgYW5ub3RhdGlvbiBzaW5jZSBudWxsIGlzIG5vdCBhY2NlcHRlZC5cbiAgYXJyLnNvcnQob3B0X2NvbXBhcmVGbiB8fCBkZWZhdWx0Q29tcGFyZSk7XG59XG5leHBvcnRzLnNvcnQgPSBzb3J0O1xuXG5cbi8qKlxuICogU29ydHMgdGhlIHNwZWNpZmllZCBhcnJheSBpbnRvIGFzY2VuZGluZyBvcmRlciBpbiBhIHN0YWJsZSB3YXkuICBJZiBub1xuICogb3B0X2NvbXBhcmVGbiBpcyBzcGVjaWZpZWQsIGVsZW1lbnRzIGFyZSBjb21wYXJlZCB1c2luZ1xuICogPGNvZGU+ZGVmYXVsdENvbXBhcmU8L2NvZGU+LCB3aGljaCBjb21wYXJlcyB0aGUgZWxlbWVudHMgdXNpbmdcbiAqIHRoZSBidWlsdCBpbiA8IGFuZCA+IG9wZXJhdG9ycy4gIFRoaXMgd2lsbCBwcm9kdWNlIHRoZSBleHBlY3RlZCBiZWhhdmlvclxuICogZm9yIGhvbW9nZW5lb3VzIGFycmF5cyBvZiBTdHJpbmcocykgYW5kIE51bWJlcihzKS5cbiAqXG4gKiBSdW50aW1lOiBTYW1lIGFzIGBBcnJheS5wcm90b3R5cGUuc29ydGAsIHBsdXMgYW4gYWRkaXRpb25hbFxuICogTyhuKSBvdmVyaGVhZCBvZiBjb3B5aW5nIHRoZSBhcnJheSB0d2ljZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgVGhlIGFycmF5IHRvIGJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKFQsIFQpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb24gZnVuY3Rpb25cbiAqICAgICBieSB3aGljaCB0aGUgYXJyYXkgaXMgdG8gYmUgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSxcbiAqICAgICBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb25cbiAqICAgICB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlXG4gKiAgICAgc2Vjb25kLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gc3RhYmxlU29ydChhcnIsIG9wdF9jb21wYXJlRm4pIHtcbiAgY29uc3QgY29tcEFyciA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb21wQXJyW2ldID0ge2luZGV4OiBpLCB2YWx1ZTogYXJyW2ldfTtcbiAgfVxuICBjb25zdCB2YWx1ZUNvbXBhcmVGbiA9IG9wdF9jb21wYXJlRm4gfHwgZGVmYXVsdENvbXBhcmU7XG4gIGZ1bmN0aW9uIHN0YWJsZUNvbXBhcmVGbihvYmoxLCBvYmoyKSB7XG4gICAgcmV0dXJuIHZhbHVlQ29tcGFyZUZuKG9iajEudmFsdWUsIG9iajIudmFsdWUpIHx8IG9iajEuaW5kZXggLSBvYmoyLmluZGV4O1xuICB9XG4gIHNvcnQoY29tcEFyciwgc3RhYmxlQ29tcGFyZUZuKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJbaV0gPSBjb21wQXJyW2ldLnZhbHVlO1xuICB9XG59XG5leHBvcnRzLnN0YWJsZVNvcnQgPSBzdGFibGVTb3J0O1xuXG5cbi8qKlxuICogU29ydCB0aGUgc3BlY2lmaWVkIGFycmF5IGludG8gYXNjZW5kaW5nIG9yZGVyIGJhc2VkIG9uIGl0ZW0ga2V5c1xuICogcmV0dXJuZWQgYnkgdGhlIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gKiBJZiBubyBvcHRfY29tcGFyZUZuIGlzIHNwZWNpZmllZCwgdGhlIGtleXMgYXJlIGNvbXBhcmVkIGluIGFzY2VuZGluZyBvcmRlclxuICogdXNpbmcgPGNvZGU+ZGVmYXVsdENvbXBhcmU8L2NvZGU+LlxuICpcbiAqIFJ1bnRpbWU6IE8oUyhmKG4pKSwgd2hlcmUgUyBpcyBydW50aW1lIG9mIDxjb2RlPnNvcnQ8L2NvZGU+XG4gKiBhbmQgZihuKSBpcyBydW50aW1lIG9mIHRoZSBrZXkgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPn0gYXJyIFRoZSBhcnJheSB0byBiZSBzb3J0ZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQpOiBLfSBrZXlGbiBGdW5jdGlvbiB0YWtpbmcgYXJyYXkgZWxlbWVudCBhbmQgcmV0dXJuaW5nXG4gKiAgICAgYSBrZXkgdXNlZCBmb3Igc29ydGluZyB0aGlzIGVsZW1lbnQuXG4gKiBAcGFyYW0gez9mdW5jdGlvbihLLCBLKTogbnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBPcHRpb25hbCBjb21wYXJpc29uIGZ1bmN0aW9uXG4gKiAgICAgYnkgd2hpY2ggdGhlIGtleXMgYXJlIHRvIGJlIG9yZGVyZWQuIFNob3VsZCB0YWtlIDIgYXJndW1lbnRzIHRvIGNvbXBhcmUsXG4gKiAgICAgYW5kIHJldHVybiBhIG5lZ2F0aXZlIG51bWJlciwgemVybywgb3IgYSBwb3NpdGl2ZSBudW1iZXIgZGVwZW5kaW5nIG9uXG4gKiAgICAgd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGVzcyB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZVxuICogICAgIHNlY29uZC5cbiAqIEB0ZW1wbGF0ZSBULEtcbiAqL1xuZnVuY3Rpb24gc29ydEJ5S2V5KGFyciwga2V5Rm4sIG9wdF9jb21wYXJlRm4pIHtcbiAgY29uc3Qga2V5Q29tcGFyZUZuID0gb3B0X2NvbXBhcmVGbiB8fCBkZWZhdWx0Q29tcGFyZTtcbiAgc29ydChhcnIsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4ga2V5Q29tcGFyZUZuKGtleUZuKGEpLCBrZXlGbihiKSk7XG4gIH0pO1xufVxuZXhwb3J0cy5zb3J0QnlLZXkgPSBzb3J0QnlLZXk7XG5cblxuLyoqXG4gKiBTb3J0cyBhbiBhcnJheSBvZiBvYmplY3RzIGJ5IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGtleSBhbmQgY29tcGFyZVxuICogZnVuY3Rpb24uIElmIG5vIGNvbXBhcmUgZnVuY3Rpb24gaXMgcHJvdmlkZWQsIHRoZSBrZXkgdmFsdWVzIGFyZVxuICogY29tcGFyZWQgaW4gYXNjZW5kaW5nIG9yZGVyIHVzaW5nIDxjb2RlPmRlZmF1bHRDb21wYXJlPC9jb2RlPi5cbiAqIFRoaXMgd29uJ3Qgd29yayBmb3Iga2V5cyB0aGF0IGdldCByZW5hbWVkIGJ5IHRoZSBjb21waWxlci4gU28gdXNlXG4gKiB7J2Zvbyc6IDEsICdiYXInOiAyfSByYXRoZXIgdGhhbiB7Zm9vOiAxLCBiYXI6IDJ9LlxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBhcnIgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBzb3J0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgb2JqZWN0IGtleSB0byBzb3J0IGJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdF9jb21wYXJlRm4gVGhlIGZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIGtleVxuICogICAgIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc29ydE9iamVjdHNCeUtleShhcnIsIGtleSwgb3B0X2NvbXBhcmVGbikge1xuICBzb3J0QnlLZXkoYXJyLCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH0sIG9wdF9jb21wYXJlRm4pO1xufVxuZXhwb3J0cy5zb3J0T2JqZWN0c0J5S2V5ID0gc29ydE9iamVjdHNCeUtleTtcblxuXG4vKipcbiAqIFRlbGxzIGlmIHRoZSBhcnJheSBpcyBzb3J0ZWQuXG4gKiBAcGFyYW0geyFJQXJyYXlMaWtlPFQ+fSBhcnIgVGhlIGFycmF5LlxuICogQHBhcmFtIHs/ZnVuY3Rpb24oVCxUKTpudW1iZXI9fSBvcHRfY29tcGFyZUZuIEZ1bmN0aW9uIHRvIGNvbXBhcmUgdGhlXG4gKiAgICAgYXJyYXkgZWxlbWVudHMuXG4gKiAgICAgU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG8gY29tcGFyZSwgYW5kIHJldHVybiBhIG5lZ2F0aXZlIG51bWJlciwgemVybyxcbiAqICAgICBvciBhIHBvc2l0aXZlIG51bWJlciBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGVzc1xuICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9zdHJpY3QgSWYgdHJ1ZSBubyBlcXVhbCBlbGVtZW50cyBhcmUgYWxsb3dlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGFycmF5IGlzIHNvcnRlZC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIGlzU29ydGVkKGFyciwgb3B0X2NvbXBhcmVGbiwgb3B0X3N0cmljdCkge1xuICBjb25zdCBjb21wYXJlID0gb3B0X2NvbXBhcmVGbiB8fCBkZWZhdWx0Q29tcGFyZTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb21wYXJlUmVzdWx0ID0gY29tcGFyZShhcnJbaSAtIDFdLCBhcnJbaV0pO1xuICAgIGlmIChjb21wYXJlUmVzdWx0ID4gMCB8fCBjb21wYXJlUmVzdWx0ID09IDAgJiYgb3B0X3N0cmljdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNTb3J0ZWQgPSBpc1NvcnRlZDtcblxuXG4vKipcbiAqIENvbXBhcmVzIHR3byBhcnJheXMgZm9yIGVxdWFsaXR5LiBUd28gYXJyYXlzIGFyZSBjb25zaWRlcmVkIGVxdWFsIGlmIHRoZXlcbiAqIGhhdmUgdGhlIHNhbWUgbGVuZ3RoIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIGVsZW1lbnRzIGFyZSBlcXVhbCBhY2NvcmRpbmcgdG9cbiAqIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxBPn0gYXJyMSBUaGUgZmlyc3QgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxCPn0gYXJyMiBUaGUgc2Vjb25kIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbihBLEIpOmJvb2xlYW49fSBvcHRfZXF1YWxzRm4gT3B0aW9uYWwgY29tcGFyaXNvbiBmdW5jdGlvbi5cbiAqICAgICBTaG91bGQgdGFrZSAyIGFyZ3VtZW50cyB0byBjb21wYXJlLCBhbmQgcmV0dXJuIHRydWUgaWYgdGhlIGFyZ3VtZW50c1xuICogICAgIGFyZSBlcXVhbC4gRGVmYXVsdHMgdG8ge0BsaW5rIGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmVFcXVhbGl0eX0gd2hpY2hcbiAqICAgICBjb21wYXJlcyB0aGUgZWxlbWVudHMgdXNpbmcgdGhlIGJ1aWx0LWluICc9PT0nIG9wZXJhdG9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdHdvIGFycmF5cyBhcmUgZXF1YWwuXG4gKiBAdGVtcGxhdGUgQVxuICogQHRlbXBsYXRlIEJcbiAqL1xuZnVuY3Rpb24gZXF1YWxzKGFycjEsIGFycjIsIG9wdF9lcXVhbHNGbikge1xuICBpZiAoIWdvb2cuaXNBcnJheUxpa2UoYXJyMSkgfHwgIWdvb2cuaXNBcnJheUxpa2UoYXJyMikgfHxcbiAgICAgIGFycjEubGVuZ3RoICE9IGFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGwgPSBhcnIxLmxlbmd0aDtcbiAgY29uc3QgZXF1YWxzRm4gPSBvcHRfZXF1YWxzRm4gfHwgZGVmYXVsdENvbXBhcmVFcXVhbGl0eTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsc0ZuKGFycjFbaV0sIGFycjJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5lcXVhbHMgPSBlcXVhbHM7XG5cblxuLyoqXG4gKiAzLXdheSBhcnJheSBjb21wYXJlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshSUFycmF5TGlrZTxWQUxVRT59IGFycjEgVGhlIGZpcnN0IGFycmF5IHRvXG4gKiAgICAgY29tcGFyZS5cbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8VkFMVUU+fSBhcnIyIFRoZSBzZWNvbmQgYXJyYXkgdG9cbiAqICAgICBjb21wYXJlLlxuICogQHBhcmFtIHtmdW5jdGlvbihWQUxVRSwgVkFMVUUpOiBudW1iZXI9fSBvcHRfY29tcGFyZUZuIE9wdGlvbmFsIGNvbXBhcmlzb25cbiAqICAgICBmdW5jdGlvbiBieSB3aGljaCB0aGUgYXJyYXkgaXMgdG8gYmUgb3JkZXJlZC4gU2hvdWxkIHRha2UgMiBhcmd1bWVudHMgdG9cbiAqICAgICBjb21wYXJlLCBhbmQgcmV0dXJuIGEgbmVnYXRpdmUgbnVtYmVyLCB6ZXJvLCBvciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLCBvclxuICogICAgIGdyZWF0ZXIgdGhhbiB0aGUgc2Vjb25kLlxuICogQHJldHVybiB7bnVtYmVyfSBOZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGRlcGVuZGluZyBvblxuICogICAgIHdoZXRoZXIgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGVcbiAqICAgICBzZWNvbmQuXG4gKiBAdGVtcGxhdGUgVkFMVUVcbiAqL1xuZnVuY3Rpb24gY29tcGFyZTMoYXJyMSwgYXJyMiwgb3B0X2NvbXBhcmVGbikge1xuICBjb25zdCBjb21wYXJlID0gb3B0X2NvbXBhcmVGbiB8fCBkZWZhdWx0Q29tcGFyZTtcbiAgY29uc3QgbCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY29tcGFyZShhcnIxW2ldLCBhcnIyW2ldKTtcbiAgICBpZiAocmVzdWx0ICE9IDApIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWZhdWx0Q29tcGFyZShhcnIxLmxlbmd0aCwgYXJyMi5sZW5ndGgpO1xufVxuZXhwb3J0cy5jb21wYXJlMyA9IGNvbXBhcmUzO1xuXG5cbi8qKlxuICogQ29tcGFyZXMgaXRzIHR3byBhcmd1bWVudHMgZm9yIG9yZGVyLCB1c2luZyB0aGUgYnVpbHQgaW4gPCBhbmQgPlxuICogb3BlcmF0b3JzLlxuICogQHBhcmFtIHtWQUxVRX0gYSBUaGUgZmlyc3Qgb2JqZWN0IHRvIGJlIGNvbXBhcmVkLlxuICogQHBhcmFtIHtWQUxVRX0gYiBUaGUgc2Vjb25kIG9iamVjdCB0byBiZSBjb21wYXJlZC5cbiAqIEByZXR1cm4ge251bWJlcn0gQSBuZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGFzIHRoZSBmaXJzdFxuICogICAgIGFyZ3VtZW50IGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgc2Vjb25kLFxuICogICAgIHJlc3BlY3RpdmVseS5cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMDtcbn1cbmV4cG9ydHMuZGVmYXVsdENvbXBhcmUgPSBkZWZhdWx0Q29tcGFyZTtcblxuXG4vKipcbiAqIENvbXBhcmVzIGl0cyB0d28gYXJndW1lbnRzIGZvciBpbnZlcnNlIG9yZGVyLCB1c2luZyB0aGUgYnVpbHQgaW4gPCBhbmQgPlxuICogb3BlcmF0b3JzLlxuICogQHBhcmFtIHtWQUxVRX0gYSBUaGUgZmlyc3Qgb2JqZWN0IHRvIGJlIGNvbXBhcmVkLlxuICogQHBhcmFtIHtWQUxVRX0gYiBUaGUgc2Vjb25kIG9iamVjdCB0byBiZSBjb21wYXJlZC5cbiAqIEByZXR1cm4ge251bWJlcn0gQSBuZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyIGFzIHRoZSBmaXJzdFxuICogICAgIGFyZ3VtZW50IGlzIGdyZWF0ZXIgdGhhbiwgZXF1YWwgdG8sIG9yIGxlc3MgdGhhbiB0aGUgc2Vjb25kLFxuICogICAgIHJlc3BlY3RpdmVseS5cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5mdW5jdGlvbiBpbnZlcnNlRGVmYXVsdENvbXBhcmUoYSwgYikge1xuICByZXR1cm4gLWRlZmF1bHRDb21wYXJlKGEsIGIpO1xufVxuZXhwb3J0cy5pbnZlcnNlRGVmYXVsdENvbXBhcmUgPSBpbnZlcnNlRGVmYXVsdENvbXBhcmU7XG5cblxuLyoqXG4gKiBDb21wYXJlcyBpdHMgdHdvIGFyZ3VtZW50cyBmb3IgZXF1YWxpdHksIHVzaW5nIHRoZSBidWlsdCBpbiA9PT0gb3BlcmF0b3IuXG4gKiBAcGFyYW0geyp9IGEgVGhlIGZpcnN0IG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBiIFRoZSBzZWNvbmQgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB0d28gYXJndW1lbnRzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZUVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5leHBvcnRzLmRlZmF1bHRDb21wYXJlRXF1YWxpdHkgPSBkZWZhdWx0Q29tcGFyZUVxdWFsaXR5O1xuXG5cbi8qKlxuICogSW5zZXJ0cyBhIHZhbHVlIGludG8gYSBzb3J0ZWQgYXJyYXkuIFRoZSBhcnJheSBpcyBub3QgbW9kaWZpZWQgaWYgdGhlXG4gKiB2YWx1ZSBpcyBhbHJlYWR5IHByZXNlbnQuXG4gKiBAcGFyYW0ge0lBcnJheUxpa2U8VkFMVUU+fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtWQUxVRX0gdmFsdWUgVGhlIG9iamVjdCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFZBTFVFLCBWQUxVRSk6IG51bWJlcj19IG9wdF9jb21wYXJlRm4gT3B0aW9uYWwgY29tcGFyaXNvblxuICogICAgIGZ1bmN0aW9uIGJ5IHdoaWNoIHRoZSBhcnJheSBpcyBvcmRlcmVkLiBTaG91bGQgdGFrZSAyIGFyZ3VtZW50cyB0b1xuICogICAgIGNvbXBhcmUsIGFuZCByZXR1cm4gYSBuZWdhdGl2ZSBudW1iZXIsIHplcm8sIG9yIGEgcG9zaXRpdmUgbnVtYmVyXG4gKiAgICAgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sIG9yXG4gKiAgICAgZ3JlYXRlciB0aGFuIHRoZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIGluc2VydGVkLlxuICogQHRlbXBsYXRlIFZBTFVFXG4gKi9cbmZ1bmN0aW9uIGJpbmFyeUluc2VydChhcnJheSwgdmFsdWUsIG9wdF9jb21wYXJlRm4pIHtcbiAgY29uc3QgaW5kZXggPSBiaW5hcnlTZWFyY2goYXJyYXksIHZhbHVlLCBvcHRfY29tcGFyZUZuKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluc2VydEF0KGFycmF5LCB2YWx1ZSwgLShpbmRleCArIDEpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmJpbmFyeUluc2VydCA9IGJpbmFyeUluc2VydDtcblxuXG4vKipcbiAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIGEgc29ydGVkIGFycmF5LlxuICogQHBhcmFtIHshSUFycmF5TGlrZTxWQUxVRT59IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge1ZBTFVFfSB2YWx1ZSBUaGUgb2JqZWN0IHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVkFMVUUsIFZBTFVFKTogbnVtYmVyPX0gb3B0X2NvbXBhcmVGbiBPcHRpb25hbCBjb21wYXJpc29uXG4gKiAgICAgZnVuY3Rpb24gYnkgd2hpY2ggdGhlIGFycmF5IGlzIG9yZGVyZWQuIFNob3VsZCB0YWtlIDIgYXJndW1lbnRzIHRvXG4gKiAgICAgY29tcGFyZSwgYW5kIHJldHVybiBhIG5lZ2F0aXZlIG51bWJlciwgemVybywgb3IgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGVzcyB0aGFuLCBlcXVhbCB0bywgb3JcbiAqICAgICBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cbiAqIEB0ZW1wbGF0ZSBWQUxVRVxuICovXG5mdW5jdGlvbiBiaW5hcnlSZW1vdmUoYXJyYXksIHZhbHVlLCBvcHRfY29tcGFyZUZuKSB7XG4gIGNvbnN0IGluZGV4ID0gYmluYXJ5U2VhcmNoKGFycmF5LCB2YWx1ZSwgb3B0X2NvbXBhcmVGbik7XG4gIHJldHVybiAoaW5kZXggPj0gMCkgPyByZW1vdmVBdChhcnJheSwgaW5kZXgpIDogZmFsc2U7XG59XG5leHBvcnRzLmJpbmFyeVJlbW92ZSA9IGJpbmFyeVJlbW92ZTtcblxuXG4vKipcbiAqIFNwbGl0cyBhbiBhcnJheSBpbnRvIGRpc2pvaW50IGJ1Y2tldHMgYWNjb3JkaW5nIHRvIGEgc3BsaXR0aW5nIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtJQXJyYXlMaWtlPFQ+fSBhcnJheSBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCAhSUFycmF5TGlrZTxUPik6P30gc29ydGVyIEZ1bmN0aW9uIHRvXG4gKiAgICAgY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gIFRoaXMgdGFrZXMgMyBhcmd1bWVudHMgKHRoZSBlbGVtZW50LCB0aGUgaW5kZXhcbiAqICAgICBhbmQgdGhlIGFycmF5KSBhbmQgbXVzdCByZXR1cm4gYSB2YWxpZCBvYmplY3Qga2V5IChhIHN0cmluZywgbnVtYmVyLFxuICogICAgIGV0YyksIG9yIHVuZGVmaW5lZCwgaWYgdGhhdCBvYmplY3Qgc2hvdWxkIG5vdCBiZSBwbGFjZWQgaW4gYSBidWNrZXQuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnIHdpdGhpblxuICogICAgIHNvcnRlci5cbiAqIEByZXR1cm4geyFPYmplY3Q8IUFycmF5PFQ+Pn0gQW4gb2JqZWN0LCB3aXRoIGtleXMgYmVpbmcgYWxsIG9mIHRoZSB1bmlxdWVcbiAqICAgICByZXR1cm4gdmFsdWVzIG9mIHNvcnRlciwgYW5kIHZhbHVlcyBiZWluZyBhcnJheXMgY29udGFpbmluZyB0aGUgaXRlbXMgZm9yXG4gKiAgICAgd2hpY2ggdGhlIHNwbGl0dGVyIHJldHVybmVkIHRoYXQga2V5LlxuICogQHRlbXBsYXRlIFQsU1xuICovXG5mdW5jdGlvbiBidWNrZXQoYXJyYXksIHNvcnRlciwgb3B0X29iaikge1xuICBjb25zdCBidWNrZXRzID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gYXJyYXlbaV07XG4gICAgY29uc3Qga2V5ID0gc29ydGVyLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbHVlLCBpLCBhcnJheSk7XG4gICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBQdXNoIHRoZSB2YWx1ZSB0byB0aGUgcmlnaHQgYnVja2V0LCBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnkuXG4gICAgICBjb25zdCBidWNrZXQgPSBidWNrZXRzW2tleV0gfHwgKGJ1Y2tldHNba2V5XSA9IFtdKTtcbiAgICAgIGJ1Y2tldC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVja2V0cztcbn1cbmV4cG9ydHMuYnVja2V0ID0gYnVja2V0O1xuXG5cbi8qKlxuICogU3BsaXRzIGFuIGFycmF5IGludG8gZGlzam9pbnQgYnVja2V0cyBhY2NvcmRpbmcgdG8gYSBzcGxpdHRpbmcgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyFJQXJyYXlMaWtlPFY+fSBhcnJheSBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsIG51bWJlciwgIUlBcnJheUxpa2U8Vj4pOihLfHVuZGVmaW5lZCl9IHNvcnRlciBGdW5jdGlvbiB0b1xuICogICAgIGNhbGwgZm9yIGV2ZXJ5IGVsZW1lbnQuICBUaGlzIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4LFxuICogICAgIGFuZCB0aGUgYXJyYXkpIGFuZCBtdXN0IHJldHVybiBhIHZhbHVlIHRvIHVzZSBhcyBhIGtleSwgb3IgdW5kZWZpbmVkLCBpZlxuICogICAgIHRoYXQgb2JqZWN0IHNob3VsZCBub3QgYmUgcGxhY2VkIGluIGEgYnVja2V0LlxuICogQHJldHVybiB7IU1hcDxLLCAhQXJyYXk8Vj4+fSBBIG1hcCwgd2l0aCBrZXlzIGJlaW5nIGFsbCBvZiB0aGUgdW5pcXVlXG4gKiAgICAgcmV0dXJuIHZhbHVlcyBvZiBzb3J0ZXIsIGFuZCB2YWx1ZXMgYmVpbmcgYXJyYXlzIGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZvclxuICogICAgIHdoaWNoIHRoZSBzcGxpdHRlciByZXR1cm5lZCB0aGF0IGtleS5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqL1xuZnVuY3Rpb24gYnVja2V0VG9NYXAoYXJyYXksIHNvcnRlcikge1xuICBjb25zdCAvKiogIU1hcDxLLCAhQXJyYXk8Vj4+ICovIGJ1Y2tldHMgPSBuZXcgTWFwKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gYXJyYXlbaV07XG4gICAgY29uc3Qga2V5ID0gc29ydGVyKHZhbHVlLCBpLCBhcnJheSk7XG4gICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBQdXNoIHRoZSB2YWx1ZSB0byB0aGUgcmlnaHQgYnVja2V0LCBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnkuXG4gICAgICBsZXQgYnVja2V0ID0gYnVja2V0cy5nZXQoa2V5KTtcbiAgICAgIGlmICghYnVja2V0KSB7XG4gICAgICAgIGJ1Y2tldCA9IFtdO1xuICAgICAgICBidWNrZXRzLnNldChrZXksIGJ1Y2tldCk7XG4gICAgICB9XG4gICAgICBidWNrZXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Y2tldHM7XG59XG5leHBvcnRzLmJ1Y2tldFRvTWFwID0gYnVja2V0VG9NYXA7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBidWlsdCBmcm9tIHRoZSBwcm92aWRlZCBhcnJheSBhbmQgdGhlIGtleS1nZW5lcmF0aW9uXG4gKiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7SUFycmF5TGlrZTxUPn0gYXJyIEFycmF5IG9yIGFycmF5IGxpa2Ugb2JqZWN0IG92ZXJcbiAqICAgICB3aGljaCB0byBpdGVyYXRlIHdob3NlIGVsZW1lbnRzIHdpbGwgYmUgdGhlIHZhbHVlcyBpbiB0aGUgbmV3IG9iamVjdC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6UywgVCwgbnVtYmVyLCA/KSA6IHN0cmluZ30ga2V5RnVuYyBUaGUgZnVuY3Rpb24gdG9cbiAqICAgICBjYWxsIGZvciBldmVyeSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlXG4gKiAgICAgaW5kZXggYW5kIHRoZSBhcnJheSkgYW5kIHNob3VsZCByZXR1cm4gYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlXG4gKiAgICAga2V5IGZvciB0aGUgZWxlbWVudCBpbiB0aGUgbmV3IG9iamVjdC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdGhlIHNhbWVcbiAqICAgICBrZXkgZm9yIG1vcmUgdGhhbiBvbmUgZWxlbWVudCwgdGhlIHZhbHVlIGZvciB0aGF0IGtleSBpc1xuICogICAgIGltcGxlbWVudGF0aW9uLWRlZmluZWQuXG4gKiBAcGFyYW0ge1M9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGtleUZ1bmMuXG4gKiBAcmV0dXJuIHshT2JqZWN0PFQ+fSBUaGUgbmV3IG9iamVjdC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QoYXJyLCBrZXlGdW5jLCBvcHRfb2JqKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBmb3JFYWNoKGFyciwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICByZXRba2V5RnVuYy5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBlbGVtZW50LCBpbmRleCwgYXJyKV0gPVxuICAgICAgICBlbGVtZW50O1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMudG9PYmplY3QgPSB0b09iamVjdDtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgRVM2IE1hcCBidWlsdCBmcm9tIHRoZSBwcm92aWRlZCBhcnJheSBhbmQgdGhlIGtleS1nZW5lcmF0aW9uXG4gKiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8Vj59IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGVcbiAqICAgICB3aG9zZSBlbGVtZW50cyB3aWxsIGJlIHRoZSB2YWx1ZXMgaW4gdGhlIG5ldyBvYmplY3QuXG4gKiBAcGFyYW0gez9mdW5jdGlvbihWLCBudW1iZXIsID8pIDogS30ga2V5RnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZXZlcnlcbiAqICAgICBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIDMgYXJndW1lbnRzICh0aGUgZWxlbWVudCwgdGhlIGluZGV4LCBhbmQgdGhlXG4gKiAgICAgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGEgdmFsdWUgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGtleSBmb3IgdGhlXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgbmV3IG9iamVjdC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdGhlIHNhbWUga2V5IGZvciBtb3JlXG4gKiAgICAgdGhhbiBvbmUgZWxlbWVudCwgdGhlIHZhbHVlIGZvciB0aGF0IGtleSBpcyBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkLlxuICogQHJldHVybiB7IU1hcDxLLCBWPn0gVGhlIG5ldyBtYXAuXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmZ1bmN0aW9uIHRvTWFwKGFyciwga2V5RnVuYykge1xuICBjb25zdCAvKiogIU1hcDxLLCBWPiAqLyBtYXAgPSBuZXcgTWFwKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyW2ldO1xuICAgIG1hcC5zZXQoa2V5RnVuYyhlbGVtZW50LCBpLCBhcnIpLCBlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBtYXA7XG59XG5leHBvcnRzLnRvTWFwID0gdG9NYXA7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgcmFuZ2Ugb2YgbnVtYmVycyBpbiBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLlxuICpcbiAqIFJhbmdlIHRha2VzIDEsIDIsIG9yIDMgYXJndW1lbnRzOlxuICogPHByZT5cbiAqIHJhbmdlKDUpIGlzIHRoZSBzYW1lIGFzIHJhbmdlKDAsIDUsIDEpIGFuZCBwcm9kdWNlcyBbMCwgMSwgMiwgMywgNF1cbiAqIHJhbmdlKDIsIDUpIGlzIHRoZSBzYW1lIGFzIHJhbmdlKDIsIDUsIDEpIGFuZCBwcm9kdWNlcyBbMiwgMywgNF1cbiAqIHJhbmdlKC0yLCAtNSwgLTEpIHByb2R1Y2VzIFstMiwgLTMsIC00XVxuICogcmFuZ2UoLTIsIC01LCAxKSBwcm9kdWNlcyBbXSwgc2luY2Ugc3RlcHBpbmcgYnkgMSB3b3VsZG4ndCBldmVyIHJlYWNoIC01LlxuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0T3JFbmQgVGhlIHN0YXJ0aW5nIHZhbHVlIG9mIHRoZSByYW5nZSBpZiBhbiBlbmQgYXJndW1lbnRcbiAqICAgICBpcyBwcm92aWRlZC4gT3RoZXJ3aXNlLCB0aGUgc3RhcnQgdmFsdWUgaXMgMCwgYW5kIHRoaXMgaXMgdGhlIGVuZCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2VuZCBUaGUgb3B0aW9uYWwgZW5kIHZhbHVlIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3N0ZXAgVGhlIHN0ZXAgc2l6ZSBiZXR3ZWVuIHJhbmdlIHZhbHVlcy4gRGVmYXVsdHMgdG8gMVxuICogICAgIGlmIG9wdF9zdGVwIGlzIHVuZGVmaW5lZCBvciAwLlxuICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IEFuIGFycmF5IG9mIG51bWJlcnMgZm9yIHRoZSByZXF1ZXN0ZWQgcmFuZ2UuIE1heSBiZVxuICogICAgIGFuIGVtcHR5IGFycmF5IGlmIGFkZGluZyB0aGUgc3RlcCB3b3VsZCBub3QgY29udmVyZ2UgdG93YXJkIHRoZSBlbmRcbiAqICAgICB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gcmFuZ2Uoc3RhcnRPckVuZCwgb3B0X2VuZCwgb3B0X3N0ZXApIHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IHN0YXJ0T3JFbmQ7XG4gIGNvbnN0IHN0ZXAgPSBvcHRfc3RlcCB8fCAxO1xuICBpZiAob3B0X2VuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSBzdGFydE9yRW5kO1xuICAgIGVuZCA9IG9wdF9lbmQ7XG4gIH1cblxuICBpZiAoc3RlcCAqIChlbmQgLSBzdGFydCkgPCAwKSB7XG4gICAgLy8gU2lnbiBtaXNtYXRjaDogc3RhcnQgKyBzdGVwIHdpbGwgbmV2ZXIgcmVhY2ggdGhlIGVuZCB2YWx1ZS5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gc3RlcCkge1xuICAgICAgYXJyYXkucHVzaChpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpID4gZW5kOyBpICs9IHN0ZXApIHtcbiAgICAgIGFycmF5LnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcblxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29uc2lzdGluZyBvZiB0aGUgZ2l2ZW4gdmFsdWUgcmVwZWF0ZWQgTiB0aW1lcy5cbiAqXG4gKiBAcGFyYW0ge1ZBTFVFfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVwZWF0LlxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIHJlcGVhdCBjb3VudC5cbiAqIEByZXR1cm4geyFBcnJheTxWQUxVRT59IEFuIGFycmF5IHdpdGggdGhlIHJlcGVhdGVkIHZhbHVlLlxuICogQHRlbXBsYXRlIFZBTFVFXG4gKi9cbmZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSwgbikge1xuICBjb25zdCBhcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGFycmF5W2ldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgZXZlcnkgYXJndW1lbnQgd2l0aCBhbGwgYXJyYXlzXG4gKiBleHBhbmRlZCBpbi1wbGFjZSByZWN1cnNpdmVseS5cbiAqXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSB2YWx1ZXMgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm4geyFBcnJheTw/Pn0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZmxhdHRlbmVkIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbih2YXJfYXJncykge1xuICBjb25zdCBDSFVOS19TSVpFID0gODE5MjtcblxuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGVsZW1lbnQubGVuZ3RoOyBjICs9IENIVU5LX1NJWkUpIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBzbGljZShlbGVtZW50LCBjLCBjICsgQ0hVTktfU0laRSk7XG4gICAgICAgIGNvbnN0IHJlY3Vyc2VSZXN1bHQgPSBmbGF0dGVuLmFwcGx5KG51bGwsIGNodW5rKTtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCByZWN1cnNlUmVzdWx0Lmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gocmVjdXJzZVJlc3VsdFtyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuO1xuXG5cbi8qKlxuICogUm90YXRlcyBhbiBhcnJheSBpbi1wbGFjZS4gQWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCwgdGhlIGVsZW1lbnQgYXRcbiAqIGluZGV4IGkgd2lsbCBiZSB0aGUgZWxlbWVudCBwcmV2aW91c2x5IGF0IGluZGV4IChpIC0gbikgJVxuICogYXJyYXkubGVuZ3RoLCBmb3IgYWxsIHZhbHVlcyBvZiBpIGJldHdlZW4gMCBhbmQgYXJyYXkubGVuZ3RoIC0gMSxcbiAqIGluY2x1c2l2ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgc3VwcG9zZSBsaXN0IGNvbXByaXNlcyBbdCwgYSwgbiwgaywgc10uIEFmdGVyIGludm9raW5nXG4gKiByb3RhdGUoYXJyYXksIDEpIChvciByb3RhdGUoYXJyYXksIC00KSksIGFycmF5IHdpbGwgY29tcHJpc2UgW3MsIHQsIGEsIG4sIGtdLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnJheSBUaGUgYXJyYXkgdG8gcm90YXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFtb3VudCB0byByb3RhdGUuXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59IFRoZSBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZShhcnJheSwgbikge1xuICBhc3NlcnRzLmFzc2VydChhcnJheS5sZW5ndGggIT0gbnVsbCk7XG5cbiAgaWYgKGFycmF5Lmxlbmd0aCkge1xuICAgIG4gJT0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChuID4gMCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYXJyYXksIGFycmF5LnNwbGljZSgtbiwgbikpO1xuICAgIH0gZWxzZSBpZiAobiA8IDApIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5LCBhcnJheS5zcGxpY2UoMCwgLW4pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy5yb3RhdGUgPSByb3RhdGU7XG5cblxuLyoqXG4gKiBNb3ZlcyBvbmUgaXRlbSBvZiBhbiBhcnJheSB0byBhIG5ldyBwb3NpdGlvbiBrZWVwaW5nIHRoZSBvcmRlciBvZiB0aGUgcmVzdFxuICogb2YgdGhlIGl0ZW1zLiBFeGFtcGxlIHVzZSBjYXNlOiBrZWVwaW5nIGEgbGlzdCBvZiBKYXZhU2NyaXB0IG9iamVjdHNcbiAqIHN5bmNocm9uaXplZCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGxpc3Qgb2YgRE9NIGVsZW1lbnRzIGFmdGVyIG9uZSBvZiB0aGVcbiAqIGVsZW1lbnRzIGhhcyBiZWVuIGRyYWdnZWQgdG8gYSBuZXcgcG9zaXRpb24uXG4gKiBAcGFyYW0geyFJQXJyYXlMaWtlPD8+fSBhcnIgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGl0ZW0gdG8gbW92ZSBiZXR3ZWVuIDAgYW5kXG4gKiAgICAgYGFyci5sZW5ndGggLSAxYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IFRhcmdldCBpbmRleCBiZXR3ZWVuIDAgYW5kIGBhcnIubGVuZ3RoIC0gMWAuXG4gKi9cbmZ1bmN0aW9uIG1vdmVJdGVtKGFyciwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gIGFzc2VydHMuYXNzZXJ0KGZyb21JbmRleCA+PSAwICYmIGZyb21JbmRleCA8IGFyci5sZW5ndGgpO1xuICBhc3NlcnRzLmFzc2VydCh0b0luZGV4ID49IDAgJiYgdG9JbmRleCA8IGFyci5sZW5ndGgpO1xuICAvLyBSZW1vdmUgMSBpdGVtIGF0IGZyb21JbmRleC5cbiAgY29uc3QgcmVtb3ZlZEl0ZW1zID0gQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyciwgZnJvbUluZGV4LCAxKTtcbiAgLy8gSW5zZXJ0IHRoZSByZW1vdmVkIGl0ZW0gYXQgdG9JbmRleC5cbiAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyciwgdG9JbmRleCwgMCwgcmVtb3ZlZEl0ZW1zWzBdKTtcbiAgLy8gV2UgZG9uJ3QgdXNlIGdvb2cuYXJyYXkuaW5zZXJ0QXQgYW5kIGdvb2cuYXJyYXkucmVtb3ZlQXQsIGJlY2F1c2UgdGhleSdyZVxuICAvLyBzaWduaWZpY2FudGx5IHNsb3dlciB0aGFuIHNwbGljZS5cbn1cbmV4cG9ydHMubW92ZUl0ZW0gPSBtb3ZlSXRlbTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgZm9yIHdoaWNoIHRoZSBlbGVtZW50IGF0IHBvc2l0aW9uIGkgaXMgYW4gYXJyYXkgb2YgdGhlXG4gKiBpdGggZWxlbWVudCBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzLiAgVGhlIHJldHVybmVkIGFycmF5IHdpbGwgb25seSBiZSBhcyBsb25nXG4gKiBhcyB0aGUgc2hvcnRlc3QgYXJyYXkgcHJvdmlkZWQ7IGFkZGl0aW9uYWwgdmFsdWVzIGFyZSBpZ25vcmVkLiAgRm9yIGV4YW1wbGUsXG4gKiB0aGUgcmVzdWx0IG9mIHppcHBpbmcgWzEsIDJdIGFuZCBbMywgNCwgNV0gaXMgW1sxLDNdLCBbMiwgNF1dLlxuICpcbiAqIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgemlwKCkgZnVuY3Rpb24gaW4gUHl0aG9uLiAgU2VlIHtAbGlua1xuICogaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3ppcH1cbiAqXG4gKiBAcGFyYW0gey4uLiFJQXJyYXlMaWtlPD8+fSB2YXJfYXJncyBBcnJheXMgdG8gYmUgY29tYmluZWQuXG4gKiBAcmV0dXJuIHshQXJyYXk8IUFycmF5PD8+Pn0gQSBuZXcgYXJyYXkgb2YgYXJyYXlzIGNyZWF0ZWQgZnJvbVxuICogICAgIHByb3ZpZGVkIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gemlwKHZhcl9hcmdzKSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IG1pbkxlbiA9IGFyZ3VtZW50c1swXS5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFyZ3VtZW50c1tpXS5sZW5ndGggPCBtaW5MZW4pIHtcbiAgICAgIG1pbkxlbiA9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgfVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWluTGVuOyBpKyspIHtcbiAgICBjb25zdCB2YWx1ZSA9IFtdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXJndW1lbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YWx1ZS5wdXNoKGFyZ3VtZW50c1tqXVtpXSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy56aXAgPSB6aXA7XG5cblxuLyoqXG4gKiBTaHVmZmxlcyB0aGUgdmFsdWVzIGluIHRoZSBzcGVjaWZpZWQgYXJyYXkgdXNpbmcgdGhlIEZpc2hlci1ZYXRlcyBpbi1wbGFjZVxuICogc2h1ZmZsZSAoYWxzbyBrbm93biBhcyB0aGUgS251dGggU2h1ZmZsZSkuIEJ5IGRlZmF1bHQsIGNhbGxzIE1hdGgucmFuZG9tKClcbiAqIGFuZCBzbyByZXNldHMgdGhlIHN0YXRlIG9mIHRoYXQgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuIFNpbWlsYXJseSwgbWF5IHJlc2V0XG4gKiB0aGUgc3RhdGUgb2YgYW55IG90aGVyIHNwZWNpZmllZCByYW5kb20gbnVtYmVyIGdlbmVyYXRvci5cbiAqXG4gKiBSdW50aW1lOiBPKG4pXG4gKlxuICogQHBhcmFtIHshQXJyYXk8Pz59IGFyciBUaGUgYXJyYXkgdG8gYmUgc2h1ZmZsZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6bnVtYmVyPX0gb3B0X3JhbmRGbiBPcHRpb25hbCByYW5kb20gZnVuY3Rpb24gdG8gdXNlIGZvclxuICogICAgIHNodWZmbGluZy5cbiAqICAgICBUYWtlcyBubyBhcmd1bWVudHMsIGFuZCByZXR1cm5zIGEgcmFuZG9tIG51bWJlciBvbiB0aGUgaW50ZXJ2YWwgWzAsIDEpLlxuICogICAgIERlZmF1bHRzIHRvIE1hdGgucmFuZG9tKCkgdXNpbmcgSmF2YVNjcmlwdCdzIGJ1aWx0LWluIE1hdGggbGlicmFyeS5cbiAqL1xuZnVuY3Rpb24gc2h1ZmZsZShhcnIsIG9wdF9yYW5kRm4pIHtcbiAgY29uc3QgcmFuZEZuID0gb3B0X3JhbmRGbiB8fCBNYXRoLnJhbmRvbTtcblxuICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAvLyBDaG9vc2UgYSByYW5kb20gYXJyYXkgaW5kZXggaW4gWzAsIGldIChpbmNsdXNpdmUgd2l0aCBpKS5cbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihyYW5kRm4oKSAqIChpICsgMSkpO1xuXG4gICAgY29uc3QgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG4gIH1cbn1cbmV4cG9ydHMuc2h1ZmZsZSA9IHNodWZmbGU7XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIGZyb20gYXJyLCBiYXNlZCBvbiB0aGUgaW5kZXhlcyBvZiBlbGVtZW50c1xuICogcHJvdmlkZWQgYnkgaW5kZXhfYXJyLiBGb3IgZXhhbXBsZSwgdGhlIHJlc3VsdCBvZiBpbmRleCBjb3B5aW5nXG4gKiBbJ2EnLCAnYicsICdjJ10gd2l0aCBpbmRleF9hcnIgWzEsMCwwLDJdIGlzIFsnYicsICdhJywgJ2EnLCAnYyddLlxuICpcbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8VD59IGFyciBUaGUgYXJyYXkgdG8gZ2V0IGEgaW5kZXhlZCBjb3B5IGZyb20uXG4gKiBAcGFyYW0geyFJQXJyYXlMaWtlPG51bWJlcj59IGluZGV4X2FyciBBbiBhcnJheSBvZiBpbmRleGVzIHRvIGdldCBmcm9tIGFyci5cbiAqIEByZXR1cm4geyFBcnJheTxUPn0gQSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgZnJvbSBhcnIgaW4gaW5kZXhfYXJyIG9yZGVyLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gY29weUJ5SW5kZXgoYXJyLCBpbmRleF9hcnIpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvckVhY2goaW5kZXhfYXJyLCBmdW5jdGlvbihpbmRleCkge1xuICAgIHJlc3VsdC5wdXNoKGFycltpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY29weUJ5SW5kZXggPSBjb3B5QnlJbmRleDtcblxuXG4vKipcbiAqIE1hcHMgZWFjaCBlbGVtZW50IG9mIHRoZSBpbnB1dCBhcnJheSBpbnRvIHplcm8gb3IgbW9yZSBlbGVtZW50cyBvZiB0aGUgb3V0cHV0XG4gKiBhcnJheS5cbiAqXG4gKiBAcGFyYW0geyFJQXJyYXlMaWtlPFZBTFVFPnxzdHJpbmd9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdFxuICogICAgIG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTLCBWQUxVRSwgbnVtYmVyLCA/KTogIUFycmF5PFJFU1VMVD59IGYgVGhlIGZ1bmN0aW9uXG4gKiAgICAgdG8gY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIGVsZW1lbnQsXG4gKiAgICAgdGhlIGluZGV4IGFuZCB0aGUgYXJyYXkpIGFuZCBzaG91bGQgcmV0dXJuIGFuIGFycmF5LiBUaGUgcmVzdWx0IHdpbGwgYmVcbiAqICAgICB1c2VkIHRvIGV4dGVuZCBhIG5ldyBhcnJheS5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9vYmogVGhlIG9iamVjdCB0byBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBvZiAndGhpcycgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHshQXJyYXk8UkVTVUxUPn0gYSBuZXcgYXJyYXkgd2l0aCB0aGUgY29uY2F0ZW5hdGlvbiBvZiBhbGwgYXJyYXlzXG4gKiAgICAgcmV0dXJuZWQgZnJvbSBmLlxuICogQHRlbXBsYXRlIFRISVMsIFZBTFVFLCBSRVNVTFRcbiAqL1xuZnVuY3Rpb24gY29uY2F0TWFwKGFyciwgZiwgb3B0X29iaikge1xuICByZXR1cm4gY29uY2F0LmFwcGx5KFtdLCBtYXAoYXJyLCBmLCBvcHRfb2JqKSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcCA9IGNvbmNhdE1hcDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIGJhc2UgY2xhc3MgZm9yIGV2ZW50IG9iamVjdHMuXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkV2ZW50Jyk7XG5cbi8qKlxuICogZ29vZy5ldmVudHMuRXZlbnQgbm8gbG9uZ2VyIGRlcGVuZHMgb24gZ29vZy5EaXNwb3NhYmxlLiBLZWVwIHJlcXVpcmluZ1xuICogZ29vZy5EaXNwb3NhYmxlIGhlcmUgdG8gbm90IGJyZWFrIHByb2plY3RzIHdoaWNoIGFzc3VtZSB0aGlzIGRlcGVuZGVuY3kuXG4gKiBAc3VwcHJlc3Mge2V4dHJhUmVxdWlyZX1cbiAqL1xuZ29vZy5yZXF1aXJlKCdnb29nLkRpc3Bvc2FibGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuRXZlbnRJZCcpO1xuXG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIGZvciBldmVudCBvYmplY3RzLCBzbyB0aGF0IHRoZXkgY2FuIHN1cHBvcnQgcHJldmVudERlZmF1bHQgYW5kXG4gKiBzdG9wUHJvcGFnYXRpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgRXZlbnQgVHlwZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3RhcmdldCBSZWZlcmVuY2UgdG8gdGhlIG9iamVjdCB0aGF0IGlzIHRoZSB0YXJnZXQgb2ZcbiAqICAgICB0aGlzIGV2ZW50LiBJdCBoYXMgdG8gaW1wbGVtZW50IHRoZSBgRXZlbnRUYXJnZXRgIGludGVyZmFjZVxuICogICAgIGRlY2xhcmVkIGF0IHtAbGluayBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS9FdmVudFRhcmdldH0uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBvcHRfdGFyZ2V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIEV2ZW50IHR5cGUuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnR5cGUgPSB0eXBlIGluc3RhbmNlb2YgZ29vZy5ldmVudHMuRXZlbnRJZCA/IFN0cmluZyh0eXBlKSA6IHR5cGU7XG5cbiAgLyoqXG4gICAqIFRPRE8odGJyZWlzYWNoZXIpOiBUaGUgdHlwZSBzaG91bGQgcHJvYmFibHkgYmVcbiAgICogRXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuRXZlbnRUYXJnZXQuXG4gICAqXG4gICAqIFRhcmdldCBvZiB0aGUgZXZlbnQuXG4gICAqIEB0eXBlIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy50YXJnZXQgPSBvcHRfdGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBPYmplY3QgdGhhdCBoYWQgdGhlIGxpc3RlbmVyIGF0dGFjaGVkLlxuICAgKiBAdHlwZSB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuY3VycmVudFRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGNhbmNlbCB0aGUgZXZlbnQgaW4gaW50ZXJuYWwgY2FwdHVyZS9idWJibGUgcHJvY2Vzc2luZyBmb3IgSUUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5wcm9wYWdhdGlvblN0b3BwZWRfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRlZmF1bHQgYWN0aW9uIGhhcyBiZWVuIHByZXZlbnRlZC5cbiAgICogVGhpcyBpcyBhIHByb3BlcnR5IHRvIG1hdGNoIHRoZSBXM0Mgc3BlY2lmaWNhdGlvbiBhdFxuICAgKiB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICAgKiAjZXZlbnRzLWV2ZW50LXR5cGUtZGVmYXVsdFByZXZlbnRlZH0uXG4gICAqIE11c3QgYmUgdHJlYXRlZCBhcyByZWFkLW9ubHkgb3V0c2lkZSB0aGUgY2xhc3MuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWZmIGludGVybmFsIHByb3BhZ2F0aW9uIGhhcyBiZWVuIHN0b3BwZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnByb3RvdHlwZS5oYXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5wcm9wYWdhdGlvblN0b3BwZWRfO1xufTtcblxuLyoqXG4gKiBTdG9wcyBldmVudCBwcm9wYWdhdGlvbi5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZF8gPSB0cnVlO1xufTtcblxuXG4vKipcbiAqIFByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiwgZm9yIGV4YW1wbGUgYSBsaW5rIHJlZGlyZWN0aW5nIHRvIGEgdXJsLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBTdG9wcyB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50LiBJdCBpcyBlcXVpdmFsZW50IHRvXG4gKiBgZS5zdG9wUHJvcGFnYXRpb24oKWAsIGJ1dCBjYW4gYmUgdXNlZCBhcyB0aGUgY2FsbGJhY2sgYXJndW1lbnQgb2ZcbiAqIHtAbGluayBnb29nLmV2ZW50cy5saXN0ZW59IHdpdGhvdXQgZGVjbGFyaW5nIGFub3RoZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyFnb29nLmV2ZW50cy5FdmVudH0gZSBBbiBldmVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufTtcblxuXG4vKipcbiAqIFByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbi4gSXQgaXMgZXF1aXZhbGVudCB0b1xuICogYGUucHJldmVudERlZmF1bHQoKWAsIGJ1dCBjYW4gYmUgdXNlZCBhcyB0aGUgY2FsbGJhY2sgYXJndW1lbnQgb2ZcbiAqIHtAbGluayBnb29nLmV2ZW50cy5saXN0ZW59IHdpdGhvdXQgZGVjbGFyaW5nIGFub3RoZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyFnb29nLmV2ZW50cy5FdmVudH0gZSBBbiBldmVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQnJvd3NlciBjYXBhYmlsaXR5IGNoZWNrcyBmb3IgdGhlIGV2ZW50cyBwYWNrYWdlLlxuICovXG5cbmdvb2cubW9kdWxlKCdnb29nLmV2ZW50cy5Ccm93c2VyRmVhdHVyZScpO1xuZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSgpO1xuXG5cbi8qKlxuICogVHJpY2tzIENsb3N1cmUgQ29tcGlsZXIgaW50byBiZWxpZXZpbmcgdGhhdCBhIGZ1bmN0aW9uIGlzIHB1cmUuICBUaGUgY29tcGlsZXJcbiAqIGFzc3VtZXMgdGhhdCBhbnkgYHZhbHVlT2ZgIGZ1bmN0aW9uIGlzIHB1cmUsIHdpdGhvdXQgYW5hbHl6aW5nIGl0cyBjb250ZW50cy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IFR9IGZuXG4gKiBAcmV0dXJuIHtUfVxuICogQHRlbXBsYXRlIFRcbiAqL1xuY29uc3QgcHVyaWZ5ID0gKGZuKSA9PiB7XG4gIHJldHVybiAoe3ZhbHVlT2Y6IGZufSkudmFsdWVPZigpO1xufTtcblxuXG4vKipcbiAqIEVudW0gb2YgYnJvd3NlciBjYXBhYmlsaXRpZXMuXG4gKiBAZW51bSB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG91Y2ggaXMgZW5hYmxlZCBpbiB0aGUgYnJvd3Nlci5cbiAgICovXG4gIFRPVUNIX0VOQUJMRUQ6XG4gICAgICAoJ29udG91Y2hzdGFydCcgaW4gZ29vZy5nbG9iYWwgfHxcbiAgICAgICAhIShnb29nLmdsb2JhbFsnZG9jdW1lbnQnXSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgICAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHx8XG4gICAgICAgLy8gSUUxMCB1c2VzIG5vbi1zdGFuZGFyZCB0b3VjaCBldmVudHMsIHNvIGl0IGhhcyBhIGRpZmZlcmVudCBjaGVjay5cbiAgICAgICAhIShnb29nLmdsb2JhbFsnbmF2aWdhdG9yJ10gJiZcbiAgICAgICAgICAoZ29vZy5nbG9iYWxbJ25hdmlnYXRvciddWydtYXhUb3VjaFBvaW50cyddIHx8XG4gICAgICAgICAgIGdvb2cuZ2xvYmFsWyduYXZpZ2F0b3InXVsnbXNNYXhUb3VjaFBvaW50cyddKSkpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGFkZEV2ZW50TGlzdGVuZXIgc3VwcG9ydHMgVzNDIHN0YW5kYXJkIHBvaW50ZXIgZXZlbnRzLlxuICAgKiBodHRwOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzL1xuICAgKi9cbiAgUE9JTlRFUl9FVkVOVFM6ICgnUG9pbnRlckV2ZW50JyBpbiBnb29nLmdsb2JhbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgYWRkRXZlbnRMaXN0ZW5lciBzdXBwb3J0cyBNU1BvaW50ZXIgZXZlbnRzIChvbmx5IHVzZWQgaW4gSUUxMCkuXG4gICAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDc3MjEwMyh2PXZzLjg1KS5hc3B4XG4gICAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vbGlicmFyeS9oaDY3MzU1Nyh2PXZzLjg1KS5hc3B4XG4gICAqL1xuICBNU1BPSU5URVJfRVZFTlRTOlxuICAgICAgKCdNU1BvaW50ZXJFdmVudCcgaW4gZ29vZy5nbG9iYWwgJiZcbiAgICAgICAhIShnb29nLmdsb2JhbFsnbmF2aWdhdG9yJ10gJiZcbiAgICAgICAgICBnb29nLmdsb2JhbFsnbmF2aWdhdG9yJ11bJ21zUG9pbnRlckVuYWJsZWQnXSkpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGFkZEV2ZW50TGlzdGVuZXIgc3VwcG9ydHMge3Bhc3NpdmU6IHRydWV9LlxuICAgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE2LzA2L3Bhc3NpdmUtZXZlbnQtbGlzdGVuZXJzXG4gICAqL1xuICBQQVNTSVZFX0VWRU5UUzogcHVyaWZ5KGZ1bmN0aW9uKCkge1xuICAgIC8vIElmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciBvciBvdGhlciBjdXN0b20gZW52aXJvbm1lbnQsIHdlIGNhbid0IHRlbGwuXG4gICAgaWYgKCFnb29nLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyIHx8ICFPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgIC8vIElFIDhcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcGFzc2l2ZSA9IGZhbHNlO1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICBnb29nLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgZ29vZy5udWxsRnVuY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgZ29vZy5nbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIGdvb2cubnVsbEZ1bmN0aW9uLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhc3NpdmU7XG4gIH0pXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFN0cmluZyBmdW5jdGlvbnMgY2FsbGVkIGZyb20gQ2xvc3VyZSBwYWNrYWdlcyB0aGF0IGNvdWxkbid0XG4gKiBkZXBlbmQgb24gZWFjaCBvdGhlci4gT3V0c2lkZSBDbG9zdXJlLCB1c2UgZ29vZy5zdHJpbmcgZnVuY3Rpb24gd2hpY2hcbiAqIGRlbGVnYXRlIHRvIHRoZXNlLlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5pbnRlcm5hbCcpO1xuXG5cbi8qKlxuICogRmFzdCBwcmVmaXgtY2hlY2tlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggQSBzdHJpbmcgdG8gbG9vayBmb3IgYXQgdGhlIHN0YXJ0IG9mIGBzdHJgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgc3RyYCBiZWdpbnMgd2l0aCBgcHJlZml4YC5cbiAqIEBzZWUgZ29vZy5zdHJpbmcuc3RhcnRzV2l0aFxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5zdGFydHNXaXRoID0gZnVuY3Rpb24oc3RyLCBwcmVmaXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gc3RyLmxhc3RJbmRleE9mKHByZWZpeCwgMCkgPT0gMDtcbn07XG5cblxuLyoqXG4gKiBGYXN0IHN1ZmZpeC1jaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHN1ZmZpeCBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgZW5kIG9mIGBzdHJgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgc3RyYCBlbmRzIHdpdGggYHN1ZmZpeGAuXG4gKiBAc2VlIGdvb2cuc3RyaW5nLmVuZHNXaXRoXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLmVuZHNXaXRoID0gZnVuY3Rpb24oc3RyLCBzdWZmaXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBsID0gc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7XG4gIHJldHVybiBsID49IDAgJiYgc3RyLmluZGV4T2Yoc3VmZml4LCBsKSA9PSBsO1xufTtcblxuXG4vKipcbiAqIENhc2UtaW5zZW5zaXRpdmUgcHJlZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4ICBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgZW5kIG9mIGBzdHJgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgc3RyYCBiZWdpbnMgd2l0aCBgcHJlZml4YCAoaWdub3JpbmdcbiAqICAgICBjYXNlKS5cbiAqIEBzZWUgZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aFxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoID0gZnVuY3Rpb24oc3RyLCBwcmVmaXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlQ29tcGFyZShcbiAgICAgICAgICAgICBwcmVmaXgsIHN0ci5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCkpID09IDA7XG59O1xuXG5cbi8qKlxuICogQ2FzZS1pbnNlbnNpdGl2ZSBzdWZmaXgtY2hlY2tlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWZmaXggQSBzdHJpbmcgdG8gbG9vayBmb3IgYXQgdGhlIGVuZCBvZiBgc3RyYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHN0cmAgZW5kcyB3aXRoIGBzdWZmaXhgIChpZ25vcmluZ1xuICogICAgIGNhc2UpLlxuICogQHNlZSBnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVFbmRzV2l0aFxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVFbmRzV2l0aCA9IGZ1bmN0aW9uKHN0ciwgc3VmZml4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIChcbiAgICAgIGdvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUoXG4gICAgICAgICAgc3VmZml4LCBzdHIuc3Vic3RyKHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoLCBzdWZmaXgubGVuZ3RoKSkgPT0gMCk7XG59O1xuXG5cbi8qKlxuICogQ2FzZS1pbnNlbnNpdGl2ZSBlcXVhbGl0eSBjaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjEgRmlyc3Qgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjIgU2Vjb25kIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHN0cjFgIGFuZCBgc3RyMmAgYXJlIHRoZSBzYW1lIHN0cmluZyxcbiAqICAgICBpZ25vcmluZyBjYXNlLlxuICogQHNlZSBnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVFcXVhbHNcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlRXF1YWxzID0gZnVuY3Rpb24oc3RyMSwgc3RyMikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBzdHIxLnRvTG93ZXJDYXNlKCkgPT0gc3RyMi50b0xvd2VyQ2FzZSgpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBgc3RyYCBpcyBlbXB0eSBvciB3aGl0ZXNwYWNlIG9ubHkuXG4gKiBAc2VlIGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2VcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuaXNFbXB0eU9yV2hpdGVzcGFjZSA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHRlc3RpbmcgbGVuZ3RoID09IDAgZmlyc3QgaXMgYWN0dWFsbHkgc2xvd2VyIGluIGFsbCBicm93c2VycyAoYWJvdXQgdGhlXG4gIC8vIHNhbWUgaW4gT3BlcmEpLlxuICAvLyBTaW5jZSBJRSBkb2Vzbid0IGluY2x1ZGUgbm9uLWJyZWFraW5nLXNwYWNlICgweGEwKSBpbiB0aGVpciBcXHMgY2hhcmFjdGVyXG4gIC8vIGNsYXNzIChhcyByZXF1aXJlZCBieSBzZWN0aW9uIDcuMiBvZiB0aGUgRUNNQVNjcmlwdCBzcGVjKSwgd2UgZXhwbGljaXRseVxuICAvLyBpbmNsdWRlIGl0IGluIHRoZSByZWdleHAgdG8gZW5mb3JjZSBjb25zaXN0ZW50IGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuXG4gIHJldHVybiAvXltcXHNcXHhhMF0qJC8udGVzdChzdHIpO1xufTtcblxuXG4vKipcbiAqIFRyaW1zIHdoaXRlIHNwYWNlcyB0byB0aGUgbGVmdCBhbmQgcmlnaHQgb2YgYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSB0cmltbWVkIGNvcHkgb2YgYHN0cmAuXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLnRyaW0gPVxuICAgIChnb29nLlRSVVNURURfU0lURSAmJiBTdHJpbmcucHJvdG90eXBlLnRyaW0pID8gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgICB9IDogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICAvLyBTaW5jZSBJRSBkb2Vzbid0IGluY2x1ZGUgbm9uLWJyZWFraW5nLXNwYWNlICgweGEwKSBpbiB0aGVpciBcXHNcbiAgICAgIC8vIGNoYXJhY3RlciBjbGFzcyAoYXMgcmVxdWlyZWQgYnkgc2VjdGlvbiA3LjIgb2YgdGhlIEVDTUFTY3JpcHQgc3BlYyksXG4gICAgICAvLyB3ZSBleHBsaWNpdGx5IGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnRcbiAgICAgIC8vIGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuXG4gICAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgU3RyaW5nI3JlcGxhY2UgYmVjYXVzZSBpdCBtaWdodCBoYXZlIHNpZGUgZWZmZWN0c1xuICAgICAgLy8gY2F1c2luZyB0aGlzIGZ1bmN0aW9uIHRvIG5vdCBjb21waWxlIHRvIDAgYnl0ZXMuXG4gICAgICByZXR1cm4gL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhzdHIpWzFdO1xuICAgIH07XG5cblxuLyoqXG4gKiBBIHN0cmluZyBjb21wYXJhdG9yIHRoYXQgaWdub3JlcyBjYXNlLlxuICogLTEgPSBzdHIxIGxlc3MgdGhhbiBzdHIyXG4gKiAgMCA9IHN0cjEgZXF1YWxzIHN0cjJcbiAqICAxID0gc3RyMSBncmVhdGVyIHRoYW4gc3RyMlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxIFRoZSBzdHJpbmcgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIyIFRoZSBzdHJpbmcgdG8gY29tcGFyZSBgc3RyMWAgdG8uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb21wYXJhdG9yIHJlc3VsdCwgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICogQHNlZSBnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVDb21wYXJlXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUgPSBmdW5jdGlvbihzdHIxLCBzdHIyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgdGVzdDEgPSBTdHJpbmcoc3RyMSkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgdGVzdDIgPSBTdHJpbmcoc3RyMikudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodGVzdDEgPCB0ZXN0Mikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh0ZXN0MSA9PSB0ZXN0Mikge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgXFxuIHRvIDxicj5zIG9yIDxiciAvPnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gd2hpY2ggdG8gY29udmVydCBuZXdsaW5lcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF94bWwgV2hldGhlciB0byB1c2UgWE1MIGNvbXBhdGlibGUgdGFncy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGggY29udmVydGVkIG5ld2xpbmVzLlxuICogQHNlZSBnb29nLnN0cmluZy5uZXdMaW5lVG9CclxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5uZXdMaW5lVG9CciA9IGZ1bmN0aW9uKHN0ciwgb3B0X3htbCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLCBvcHRfeG1sID8gJzxiciAvPicgOiAnPGJyPicpO1xufTtcblxuXG4vKipcbiAqIEVzY2FwZXMgZG91YmxlIHF1b3RlICdcIicgYW5kIHNpbmdsZSBxdW90ZSAnXFwnJyBjaGFyYWN0ZXJzIGluIGFkZGl0aW9uIHRvXG4gKiAnJicsICc8JywgYW5kICc+JyBzbyB0aGF0IGEgc3RyaW5nIGNhbiBiZSBpbmNsdWRlZCBpbiBhbiBIVE1MIHRhZyBhdHRyaWJ1dGVcbiAqIHZhbHVlIHdpdGhpbiBkb3VibGUgb3Igc2luZ2xlIHF1b3Rlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGJlIGVzY2FwZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnNcbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBjb3B5IG9mIGBzdHJgLlxuICogQHNlZSBnb29nLnN0cmluZy5odG1sRXNjYXBlXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLmh0bWxFc2NhcGUgPSBmdW5jdGlvbihcbiAgICBzdHIsIG9wdF9pc0xpa2VseVRvQ29udGFpbkh0bWxDaGFycykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnMpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5BTVBfUkVfLCAnJmFtcDsnKVxuICAgICAgICAgICAgICAucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5MVF9SRV8sICcmbHQ7JylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuR1RfUkVfLCAnJmd0OycpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLlFVT1RfUkVfLCAnJnF1b3Q7JylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuU0lOR0xFX1FVT1RFX1JFXywgJyYjMzk7JylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoZ29vZy5zdHJpbmcuaW50ZXJuYWwuTlVMTF9SRV8sICcmIzA7Jyk7XG4gICAgcmV0dXJuIHN0cjtcblxuICB9IGVsc2Uge1xuICAgIC8vIHF1aWNrIHRlc3QgaGVscHMgaW4gdGhlIGNhc2Ugd2hlbiB0aGVyZSBhcmUgbm8gY2hhcnMgdG8gcmVwbGFjZSwgaW5cbiAgICAvLyB3b3JzdCBjYXNlIHRoaXMgbWFrZXMgYmFyZWx5IGEgZGlmZmVyZW5jZSB0byB0aGUgdGltZSB0YWtlblxuICAgIGlmICghZ29vZy5zdHJpbmcuaW50ZXJuYWwuQUxMX1JFXy50ZXN0KHN0cikpIHJldHVybiBzdHI7XG5cbiAgICAvLyBzdHIuaW5kZXhPZiBpcyBmYXN0ZXIgdGhhbiByZWdleC50ZXN0IGluIHRoaXMgY2FzZVxuICAgIGlmIChzdHIuaW5kZXhPZignJicpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5BTVBfUkVfLCAnJmFtcDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCc8JykgIT0gLTEpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLkxUX1JFXywgJyZsdDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCc+JykgIT0gLTEpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKGdvb2cuc3RyaW5nLmludGVybmFsLkdUX1JFXywgJyZndDsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCdcIicpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5RVU9UX1JFXywgJyZxdW90OycpO1xuICAgIH1cbiAgICBpZiAoc3RyLmluZGV4T2YoJ1xcJycpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5TSU5HTEVfUVVPVEVfUkVfLCAnJiMzOTsnKTtcbiAgICB9XG4gICAgaWYgKHN0ci5pbmRleE9mKCdcXHgwMCcpICE9IC0xKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5pbnRlcm5hbC5OVUxMX1JFXywgJyYjMDsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYW4gYW1wZXJzYW5kLCBmb3IgdXNlIGluIGVzY2FwaW5nLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuQU1QX1JFXyA9IC8mL2c7XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGEgbGVzcyB0aGFuIHNpZ24sIGZvciB1c2UgaW4gZXNjYXBpbmcuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5MVF9SRV8gPSAvPC9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIGdyZWF0ZXIgdGhhbiBzaWduLCBmb3IgdXNlIGluIGVzY2FwaW5nLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuR1RfUkVfID0gLz4vZztcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYSBkb3VibGUgcXVvdGUsIGZvciB1c2UgaW4gZXNjYXBpbmcuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5RVU9UX1JFXyA9IC9cIi9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIHNpbmdsZSBxdW90ZSwgZm9yIHVzZSBpbiBlc2NhcGluZy5cbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLlNJTkdMRV9RVU9URV9SRV8gPSAvJy9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBudWxsIGNoYXJhY3RlciwgZm9yIHVzZSBpbiBlc2NhcGluZy5cbiAqIEBjb25zdCB7IVJlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLk5VTExfUkVfID0gL1xceDAwL2c7XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkLlxuICogQGNvbnN0IHshUmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuQUxMX1JFXyA9IC9bXFx4MDAmPD5cIiddLztcblxuXG4vKipcbiAqIERvIGVzY2FwaW5nIG9mIHdoaXRlc3BhY2UgdG8gcHJlc2VydmUgc3BhdGlhbCBmb3JtYXR0aW5nLiBXZSB1c2UgY2hhcmFjdGVyXG4gKiBlbnRpdHkgIzE2MCB0byBtYWtlIGl0IHNhZmVyIGZvciB4bWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gd2hpY2ggdG8gZXNjYXBlIHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfeG1sIFdoZXRoZXIgdG8gdXNlIFhNTCBjb21wYXRpYmxlIHRhZ3MuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgY29weSBvZiBgc3RyYC5cbiAqIEBzZWUgZ29vZy5zdHJpbmcud2hpdGVzcGFjZUVzY2FwZVxuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC53aGl0ZXNwYWNlRXNjYXBlID0gZnVuY3Rpb24oc3RyLCBvcHRfeG1sKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gVGhpcyBkb2Vzbid0IHVzZSBnb29nLnN0cmluZy5wcmVzZXJ2ZVNwYWNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIHJldHVybiBnb29nLnN0cmluZy5pbnRlcm5hbC5uZXdMaW5lVG9CcihcbiAgICAgIHN0ci5yZXBsYWNlKC8gIC9nLCAnICYjMTYwOycpLCBvcHRfeG1sKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgY29udGFpbnMgYSBzdWJzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlN0cmluZyBUaGUgc3Vic3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGBzdHJgIGNvbnRhaW5zIGBzdWJTdHJpbmdgLlxuICogQHNlZSBnb29nLnN0cmluZy5jb250YWluc1xuICovXG5nb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucyA9IGZ1bmN0aW9uKHN0ciwgc3ViU3RyaW5nKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5pbmRleE9mKHN1YlN0cmluZykgIT0gLTE7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGNvbnRhaW5zIGEgc3Vic3RyaW5nLCBpZ25vcmluZyBjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJTdHJpbmcgVGhlIHN1YnN0cmluZyB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBgc3RyYCBjb250YWlucyBgc3ViU3RyaW5nYC5cbiAqIEBzZWUgZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29udGFpbnNcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlQ29udGFpbnMgPSBmdW5jdGlvbihzdHIsIHN1YlN0cmluZykge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucyhcbiAgICAgIHN0ci50b0xvd2VyQ2FzZSgpLCBzdWJTdHJpbmcudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHZlcnNpb24gbnVtYmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZlcnNpb24xIFZlcnNpb24gb2YgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmVyc2lvbjIgVmVyc2lvbiBvZiBzZWNvbmQgaXRlbS5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAxIGlmIGB2ZXJzaW9uMWAgaXMgaGlnaGVyLlxuICogICAgICAgICAgICAgICAgICAgMCBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLlxuICogICAgICAgICAgICAgICAgICAtMSBpZiBgdmVyc2lvbjJgIGlzIGhpZ2hlci5cbiAqIEBzZWUgZ29vZy5zdHJpbmcuY29tcGFyZVZlcnNpb25zXG4gKi9cbmdvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVWZXJzaW9ucyA9IGZ1bmN0aW9uKHZlcnNpb24xLCB2ZXJzaW9uMikge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCBvcmRlciA9IDA7XG4gIC8vIFRyaW0gbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhbmQgc3BsaXQgdGhlIHZlcnNpb25zIGludG9cbiAgLy8gc3VidmVyc2lvbnMuXG4gIGNvbnN0IHYxU3VicyA9IGdvb2cuc3RyaW5nLmludGVybmFsLnRyaW0oU3RyaW5nKHZlcnNpb24xKSkuc3BsaXQoJy4nKTtcbiAgY29uc3QgdjJTdWJzID0gZ29vZy5zdHJpbmcuaW50ZXJuYWwudHJpbShTdHJpbmcodmVyc2lvbjIpKS5zcGxpdCgnLicpO1xuICBjb25zdCBzdWJDb3VudCA9IE1hdGgubWF4KHYxU3Vicy5sZW5ndGgsIHYyU3Vicy5sZW5ndGgpO1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgc3VidmVyc2lvbnMsIGFzIGxvbmcgYXMgdGhleSBhcHBlYXIgdG8gYmUgZXF1aXZhbGVudC5cbiAgZm9yIChsZXQgc3ViSWR4ID0gMDsgb3JkZXIgPT0gMCAmJiBzdWJJZHggPCBzdWJDb3VudDsgc3ViSWR4KyspIHtcbiAgICBsZXQgdjFTdWIgPSB2MVN1YnNbc3ViSWR4XSB8fCAnJztcbiAgICBsZXQgdjJTdWIgPSB2MlN1YnNbc3ViSWR4XSB8fCAnJztcblxuICAgIGRvIHtcbiAgICAgIC8vIFNwbGl0IHRoZSBzdWJ2ZXJzaW9ucyBpbnRvIHBhaXJzIG9mIG51bWJlcnMgYW5kIHF1YWxpZmllcnMgKGxpa2UgJ2InKS5cbiAgICAgIC8vIFR3byBkaWZmZXJlbnQgUmVnRXhwIG9iamVjdHMgYXJlIHVzZSB0byBtYWtlIGl0IGNsZWFyIHRoZSBjb2RlXG4gICAgICAvLyBpcyBzaWRlLWVmZmVjdCBmcmVlXG4gICAgICBjb25zdCB2MUNvbXAgPSAvKFxcZCopKFxcRCopKC4qKS8uZXhlYyh2MVN1YikgfHwgWycnLCAnJywgJycsICcnXTtcbiAgICAgIGNvbnN0IHYyQ29tcCA9IC8oXFxkKikoXFxEKikoLiopLy5leGVjKHYyU3ViKSB8fCBbJycsICcnLCAnJywgJyddO1xuICAgICAgLy8gQnJlYWsgaWYgdGhlcmUgYXJlIG5vIG1vcmUgbWF0Y2hlcy5cbiAgICAgIGlmICh2MUNvbXBbMF0ubGVuZ3RoID09IDAgJiYgdjJDb21wWzBdLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBQYXJzZSB0aGUgbnVtZXJpYyBwYXJ0IG9mIHRoZSBzdWJ2ZXJzaW9uLiBBIG1pc3NpbmcgbnVtYmVyIGlzXG4gICAgICAvLyBlcXVpdmFsZW50IHRvIDAuXG4gICAgICBjb25zdCB2MUNvbXBOdW0gPSB2MUNvbXBbMV0ubGVuZ3RoID09IDAgPyAwIDogcGFyc2VJbnQodjFDb21wWzFdLCAxMCk7XG4gICAgICBjb25zdCB2MkNvbXBOdW0gPSB2MkNvbXBbMV0ubGVuZ3RoID09IDAgPyAwIDogcGFyc2VJbnQodjJDb21wWzFdLCAxMCk7XG5cbiAgICAgIC8vIENvbXBhcmUgdGhlIHN1YnZlcnNpb24gY29tcG9uZW50cy4gVGhlIG51bWJlciBoYXMgdGhlIGhpZ2hlc3RcbiAgICAgIC8vIHByZWNlZGVuY2UuIE5leHQsIGlmIHRoZSBudW1iZXJzIGFyZSBlcXVhbCwgYSBzdWJ2ZXJzaW9uIHdpdGhvdXQgYW55XG4gICAgICAvLyBxdWFsaWZpZXIgaXMgYWx3YXlzIGhpZ2hlciB0aGFuIGEgc3VidmVyc2lvbiB3aXRoIGFueSBxdWFsaWZpZXIuIE5leHQsXG4gICAgICAvLyB0aGUgcXVhbGlmaWVycyBhcmUgY29tcGFyZWQgYXMgc3RyaW5ncy5cbiAgICAgIG9yZGVyID0gZ29vZy5zdHJpbmcuaW50ZXJuYWwuY29tcGFyZUVsZW1lbnRzXyh2MUNvbXBOdW0sIHYyQ29tcE51bSkgfHxcbiAgICAgICAgICBnb29nLnN0cmluZy5pbnRlcm5hbC5jb21wYXJlRWxlbWVudHNfKFxuICAgICAgICAgICAgICB2MUNvbXBbMl0ubGVuZ3RoID09IDAsIHYyQ29tcFsyXS5sZW5ndGggPT0gMCkgfHxcbiAgICAgICAgICBnb29nLnN0cmluZy5pbnRlcm5hbC5jb21wYXJlRWxlbWVudHNfKHYxQ29tcFsyXSwgdjJDb21wWzJdKTtcbiAgICAgIC8vIFN0b3AgYXMgc29vbiBhcyBhbiBpbmVxdWFsaXR5IGlzIGRpc2NvdmVyZWQuXG5cbiAgICAgIHYxU3ViID0gdjFDb21wWzNdO1xuICAgICAgdjJTdWIgPSB2MkNvbXBbM107XG4gICAgfSB3aGlsZSAob3JkZXIgPT0gMCk7XG4gIH1cblxuICByZXR1cm4gb3JkZXI7XG59O1xuXG5cbi8qKlxuICogQ29tcGFyZXMgZWxlbWVudHMgb2YgYSB2ZXJzaW9uIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gbGVmdCBBbiBlbGVtZW50IGZyb20gYSB2ZXJzaW9uIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxib29sZWFufSByaWdodCBBbiBlbGVtZW50IGZyb20gYSB2ZXJzaW9uIG51bWJlci5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAxIGlmIGBsZWZ0YCBpcyBoaWdoZXIuXG4gKiAgICAgICAgICAgICAgICAgICAwIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKiAgICAgICAgICAgICAgICAgIC0xIGlmIGByaWdodGAgaXMgaGlnaGVyLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcuaW50ZXJuYWwuY29tcGFyZUVsZW1lbnRzXyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGxlZnQgPCByaWdodCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChsZWZ0ID4gcmlnaHQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIHVzZWQgYnkgZ29vZy5sYWJzLnVzZXJBZ2VudCB0b29scy4gVGhlc2UgZnVuY3Rpb25zXG4gKiBzaG91bGQgbm90IGJlIHVzZWQgb3V0c2lkZSBvZiBnb29nLmxhYnMudXNlckFnZW50LiouXG4gKlxuICovXG5cbmdvb2cubW9kdWxlKCdnb29nLmxhYnMudXNlckFnZW50LnV0aWwnKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuY29uc3Qge1VTRV9DTElFTlRfSElOVFN9ID0gZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMudXNlckFnZW50Jyk7XG5jb25zdCB7Y2FzZUluc2Vuc2l0aXZlQ29udGFpbnMsIGNvbnRhaW5zfSA9IGdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuaW50ZXJuYWwnKTtcblxuLyoqXG4gKiBAY29uc3Qge2Jvb2xlYW59IElmIHRydWUsIHVzZSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YSB3aXRob3V0IGNoZWNrLlxuICogVE9ETyh1c2VyKTogRkVBVFVSRVNFVF9ZRUFSID49IDIwMjMgaWYgaXQgc3VwcG9ydHMgbW9iaWxlIGFuZCBhbGwgdGhlXG4gKiBicmFuZHMgd2UgbmVlZC4gIFNlZSBodHRwczovL2Nhbml1c2UuY29tL21kbi1hcGlfbmF2aWdhdG9yX3VzZXJhZ2VudGRhdGEuXG4gKi9cbmNvbnN0IEFTU1VNRV9DTElFTlRfSElOVFNfU1VQUE9SVCA9IGZhbHNlO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSB1c2VyQWdlbnQgc3RyaW5nIGZyb20gbmF2aWdhdG9yIGlmIGl0IGV4aXN0cy5cbiAqIElmIG5hdmlnYXRvciBvciBuYXZpZ2F0b3IudXNlckFnZW50IHN0cmluZyBpcyBtaXNzaW5nLCByZXR1cm5zIGFuIGVtcHR5XG4gKiBzdHJpbmcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZVVzZXJBZ2VudFN0cmluZygpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gZ2V0TmF2aWdhdG9yKCk7XG4gIGlmIChuYXZpZ2F0b3IpIHtcbiAgICBjb25zdCB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIGlmICh1c2VyQWdlbnQpIHtcbiAgICAgIHJldHVybiB1c2VyQWdlbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgdXNlckFnZW50RGF0YSBvYmplY3QgZnJvbSBuYXZpZ2F0b3IgaWYgaXQgZXhpc3RzLlxuICogSWYgbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEgb2JqZWN0IGlzIG1pc3Npbmcgb3IgVVNFX0NMSUVOVF9ISU5UUyBpcyBzZXQgdG9cbiAqIGZhbHNlLCByZXR1cm5zIG51bGwuXG4gKiBAcmV0dXJuIHs/TmF2aWdhdG9yVUFEYXRhfVxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVVc2VyQWdlbnREYXRhKCkge1xuICBpZiAoIVVTRV9DTElFTlRfSElOVFMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBuYXZpZ2F0b3IgPSBnZXROYXZpZ2F0b3IoKTtcbiAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdmlnYXRvcj8udXNlckFnZW50ID8/IG51bGwgb25jZSBpdCdzIHN1cHBvcnRlZC5cbiAgaWYgKG5hdmlnYXRvcikge1xuICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50RGF0YSB8fCBudWxsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEdldHRlciBmb3IgdGhlIG5hdGl2ZSBuYXZpZ2F0b3IuXG4gKiBAcmV0dXJuIHshTmF2aWdhdG9yfVxuICovXG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gIHJldHVybiBnb29nLmdsb2JhbC5uYXZpZ2F0b3I7XG59XG5cbi8qKlxuICogQSBwb3NzaWJsZSBvdmVycmlkZSBmb3IgYXBwbGljYXRpb25zIHdoaWNoIHdpc2ggdG8gbm90IGNoZWNrXG4gKiBuYXZpZ2F0b3IudXNlckFnZW50IGJ1dCB1c2UgYSBzcGVjaWZpZWQgdmFsdWUgZm9yIGRldGVjdGlvbiBpbnN0ZWFkLlxuICogQHR5cGUgez9zdHJpbmd9XG4gKi9cbmxldCB1c2VyQWdlbnRJbnRlcm5hbCA9IG51bGw7XG5cbi8qKlxuICogQSBwb3NzaWJsZSBvdmVycmlkZSBmb3IgYXBwbGljYXRpb25zIHdoaWNoIHdpc2ggdG8gbm90IGNoZWNrXG4gKiBuYXZpZ2F0b3IudXNlckFnZW50RGF0YSBidXQgdXNlIGEgc3BlY2lmaWVkIHZhbHVlIGZvciBkZXRlY3Rpb24gaW5zdGVhZC5cbiAqIEB0eXBlIHs/TmF2aWdhdG9yVUFEYXRhfVxuICovXG5sZXQgdXNlckFnZW50RGF0YUludGVybmFsID0gZ2V0TmF0aXZlVXNlckFnZW50RGF0YSgpO1xuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSB1c2VyIGFnZW50IHN0cmluZyB3aXRoIHRoZSBnaXZlbiB2YWx1ZS5cbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZyB3aXRoaW4gdGhlIGdvb2cubGFicy51c2VyQWdlbnRcbiAqIG5hbWVzcGFjZS5cbiAqIFBhc3MgYG51bGxgIHRvIHVzZSB0aGUgbmF0aXZlIGJyb3dzZXIgb2JqZWN0IGluc3RlYWQuXG4gKiBAcGFyYW0gez9zdHJpbmc9fSB1c2VyQWdlbnQgVGhlIHVzZXJBZ2VudCBvdmVycmlkZS5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldFVzZXJBZ2VudCh1c2VyQWdlbnQgPSB1bmRlZmluZWQpIHtcbiAgdXNlckFnZW50SW50ZXJuYWwgPVxuICAgICAgdHlwZW9mIHVzZXJBZ2VudCA9PT0gJ3N0cmluZycgPyB1c2VyQWdlbnQgOiBnZXROYXRpdmVVc2VyQWdlbnRTdHJpbmcoKTtcbn1cblxuLyoqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVzZXIgYWdlbnQgc3RyaW5nLiAqL1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50KCkge1xuICByZXR1cm4gdXNlckFnZW50SW50ZXJuYWwgPT0gbnVsbCA/IGdldE5hdGl2ZVVzZXJBZ2VudFN0cmluZygpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyQWdlbnRJbnRlcm5hbDtcbn1cblxuLyoqXG4gKiBPdmVycmlkZSB0aGUgdXNlciBhZ2VudCBkYXRhIG9iamVjdCB3aXRoIHRoZSBnaXZlbiB2YWx1ZS5cbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZyB3aXRoaW4gdGhlIGdvb2cubGFicy51c2VyQWdlbnRcbiAqIG5hbWVzcGFjZS5cbiAqIFBhc3MgYG51bGxgIHRvIHNwZWNpZnkgdGhlIGFic2VuY2Ugb2YgdXNlckFnZW50RGF0YS4gTm90ZSB0aGF0IHRoaXMgYmVoYXZpb3JcbiAqIGlzIGRpZmZlcmVudCBmcm9tIHNldFVzZXJBZ2VudC5cbiAqIEBwYXJhbSB7P05hdmlnYXRvclVBRGF0YX0gdXNlckFnZW50RGF0YSBUaGUgdXNlckFnZW50RGF0YSBvdmVycmlkZS5cbiAqL1xuZnVuY3Rpb24gc2V0VXNlckFnZW50RGF0YSh1c2VyQWdlbnREYXRhKSB7XG4gIHVzZXJBZ2VudERhdGFJbnRlcm5hbCA9IHVzZXJBZ2VudERhdGE7XG59XG5cbi8qKlxuICogSWYgdGhlIHVzZXIgYWdlbnQgZGF0YSBvYmplY3Qgd2FzIG92ZXJyaWRkZW4gdXNpbmcgc2V0VXNlckFnZW50RGF0YSxcbiAqIHJlc2V0IGl0IHNvIHRoYXQgaXQgdXNlcyB0aGUgbmF0aXZlIGJyb3dzZXIgb2JqZWN0IGluc3RlYWQsIGlmIGl0IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVzZXRVc2VyQWdlbnREYXRhKCkge1xuICB1c2VyQWdlbnREYXRhSW50ZXJuYWwgPSBnZXROYXRpdmVVc2VyQWdlbnREYXRhKCk7XG59XG5cbi8qKiBAcmV0dXJuIHs/TmF2aWdhdG9yVUFEYXRhfSBOYXZpZ2F0b3IudXNlckFnZW50RGF0YSBpZiBleGlzdCAqL1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50RGF0YSgpIHtcbiAgcmV0dXJuIHVzZXJBZ2VudERhdGFJbnRlcm5hbDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW55IHN0cmluZyBpbiB1c2VyQWdlbnREYXRhLmJyYW5kcyBtYXRjaGVzIHN0ci5cbiAqIFJldHVybnMgZmFsc2UgaWYgdXNlckFnZW50RGF0YSBpcyBub3Qgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbnkgYnJhbmQgc3RyaW5nIGZyb20gdXNlckFnZW50RGF0YSBjb250YWlucyB0aGVcbiAqICAgICBnaXZlbiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoVXNlckFnZW50RGF0YUJyYW5kKHN0cikge1xuICBjb25zdCBkYXRhID0gZ2V0VXNlckFnZW50RGF0YSgpO1xuICBpZiAoIWRhdGEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGRhdGEuYnJhbmRzLnNvbWUoKHticmFuZH0pID0+IGJyYW5kICYmIGNvbnRhaW5zKGJyYW5kLCBzdHIpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGNvbnRhaW5zIHRoZSBnaXZlbiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoVXNlckFnZW50KHN0cikge1xuICBjb25zdCB1c2VyQWdlbnQgPSBnZXRVc2VyQWdlbnQoKTtcbiAgcmV0dXJuIGNvbnRhaW5zKHVzZXJBZ2VudCwgc3RyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGNvbnRhaW5zIHRoZSBnaXZlbiBzdHJpbmcsIGlnbm9yaW5nXG4gKiAgICAgY2FzZS5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlKHN0cikge1xuICBjb25zdCB1c2VyQWdlbnQgPSBnZXRVc2VyQWdlbnQoKTtcbiAgcmV0dXJuIGNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zKHVzZXJBZ2VudCwgc3RyKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIHVzZXIgYWdlbnQgaW50byB0dXBsZXMgZm9yIGVhY2ggc2VjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnRcbiAqIEByZXR1cm4geyFBcnJheTwhQXJyYXk8c3RyaW5nPj59IFR1cGxlcyBvZiBrZXksIHZlcnNpb24sIGFuZCB0aGUgY29udGVudHMgb2ZcbiAqICAgICB0aGUgcGFyZW50aGV0aWNhbC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFZlcnNpb25UdXBsZXModXNlckFnZW50KSB7XG4gIC8vIE1hdGNoZXMgZWFjaCBzZWN0aW9uIG9mIGEgdXNlciBhZ2VudCBzdHJpbmcuXG4gIC8vIEV4YW1wbGUgVUE6XG4gIC8vIE1vemlsbGEvNS4wIChpUGFkOyBVOyBDUFUgT1MgM18yXzEgbGlrZSBNYWMgT1MgWDsgZW4tdXMpXG4gIC8vIEFwcGxlV2ViS2l0LzUzMS4yMS4xMCAoS0hUTUwsIGxpa2UgR2Vja28pIE1vYmlsZS83QjQwNVxuICAvLyBUaGlzIGhhcyB0aHJlZSB2ZXJzaW9uIHR1cGxlczogTW96aWxsYSwgQXBwbGVXZWJLaXQsIGFuZCBNb2JpbGUuXG5cbiAgY29uc3QgdmVyc2lvblJlZ0V4cCA9IG5ldyBSZWdFeHAoXG4gICAgICAvLyBLZXkuIE5vdGUgdGhhdCBhIGtleSBtYXkgaGF2ZSBhIHNwYWNlLlxuICAgICAgLy8gKGkuZS4gJ01vYmlsZSBTYWZhcmknIGluICdNb2JpbGUgU2FmYXJpLzUuMCcpXG4gICAgICAnKFtBLVpdW1xcXFx3IF0rKScgK1xuXG4gICAgICAgICAgJy8nICsgICAgICAgICAgICAgICAgLy8gc2xhc2hcbiAgICAgICAgICAnKFteXFxcXHNdKyknICsgICAgICAgIC8vIHZlcnNpb24gKGkuZS4gJzUuMGInKVxuICAgICAgICAgICdcXFxccyonICsgICAgICAgICAgICAgLy8gd2hpdGVzcGFjZVxuICAgICAgICAgICcoPzpcXFxcKCguKj8pXFxcXCkpPycsICAvLyBwYXJlbnRoZXRpY2FsIGluZm8uIHBhcmVudGhlc2VzIG5vdCBtYXRjaGVkLlxuICAgICAgJ2cnKTtcblxuICBjb25zdCBkYXRhID0gW107XG4gIGxldCBtYXRjaDtcblxuICAvLyBJdGVyYXRlIGFuZCBjb2xsZWN0IHRoZSB2ZXJzaW9uIHR1cGxlcy4gIEVhY2ggaXRlcmF0aW9uIHdpbGwgYmUgdGhlXG4gIC8vIG5leHQgcmVnZXggbWF0Y2guXG4gIHdoaWxlIChtYXRjaCA9IHZlcnNpb25SZWdFeHAuZXhlYyh1c2VyQWdlbnQpKSB7XG4gICAgZGF0YS5wdXNoKFtcbiAgICAgIG1hdGNoWzFdLCAgLy8ga2V5XG4gICAgICBtYXRjaFsyXSwgIC8vIHZhbHVlXG4gICAgICAvLyB8fCB1bmRlZmluZWQgYXMgdGhpcyBpcyBub3QgdW5kZWZpbmVkIGluIElFNyBhbmQgSUU4XG4gICAgICBtYXRjaFszXSB8fCB1bmRlZmluZWQgIC8vIGluZm9cbiAgICBdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnRzID0ge1xuICBBU1NVTUVfQ0xJRU5UX0hJTlRTX1NVUFBPUlQsXG4gIGV4dHJhY3RWZXJzaW9uVHVwbGVzLFxuICBnZXROYXRpdmVVc2VyQWdlbnRTdHJpbmcsXG4gIGdldFVzZXJBZ2VudCxcbiAgZ2V0VXNlckFnZW50RGF0YSxcbiAgbWF0Y2hVc2VyQWdlbnQsXG4gIG1hdGNoVXNlckFnZW50RGF0YUJyYW5kLFxuICBtYXRjaFVzZXJBZ2VudElnbm9yZUNhc2UsXG4gIHJlc2V0VXNlckFnZW50RGF0YSxcbiAgc2V0VXNlckFnZW50LFxuICBzZXRVc2VyQWdlbnREYXRhLFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVc2VmdWwgY29tcGlsZXIgaWRpb21zLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5yZWZsZWN0Jyk7XG5cblxuLyoqXG4gKiBTeW50YXggZm9yIG9iamVjdCBsaXRlcmFsIGNhc3RzLlxuICogQHNlZSBodHRwOi8vZ28vanNjb21waWxlci1yZW5hbWluZ1xuICogQHNlZSBodHRwczovL2dvby5nbC9DUnMwOVBcbiAqXG4gKiBVc2UgdGhpcyBpZiB5b3UgaGF2ZSBhbiBvYmplY3QgbGl0ZXJhbCB3aG9zZSBrZXlzIG5lZWQgdG8gaGF2ZSB0aGUgc2FtZSBuYW1lc1xuICogYXMgdGhlIHByb3BlcnRpZXMgb2Ygc29tZSBjbGFzcyBldmVuIGFmdGVyIHRoZXkgYXJlIHJlbmFtZWQgYnkgdGhlIGNvbXBpbGVyLlxuICpcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSB0eXBlIFR5cGUgdG8gY2FzdCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IGxpdGVyYWwgdG8gY2FzdC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIG9iamVjdCBsaXRlcmFsLlxuICovXG5nb29nLnJlZmxlY3Qub2JqZWN0ID0gZnVuY3Rpb24odHlwZSwgb2JqZWN0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbi8qKlxuICogU3ludGF4IGZvciByZW5hbWluZyBwcm9wZXJ0eSBzdHJpbmdzLlxuICogQHNlZSBodHRwOi8vZ28vanNjb21waWxlci1yZW5hbWluZ1xuICogQHNlZSBodHRwczovL2dvby5nbC9DUnMwOVBcbiAqXG4gKiBVc2UgdGhpcyBpZiB5b3UgaGF2ZSBhbiBuZWVkIHRvIGFjY2VzcyBhIHByb3BlcnR5IGFzIGEgc3RyaW5nLCBidXQgd2FudFxuICogdG8gYWxzbyBoYXZlIHRoZSBwcm9wZXJ0eSByZW5hbWVkIGJ5IHRoZSBjb21waWxlci4gSW4gY29udHJhc3QgdG9cbiAqIGdvb2cucmVmbGVjdC5vYmplY3QsIHRoaXMgbWV0aG9kIHRha2VzIGFuIGluc3RhbmNlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiBQcm9wZXJ0aWVzIG11c3QgYmUgc2ltcGxlIG5hbWVzIChub3QgcXVhbGlmaWVkIG5hbWVzKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIHshT2JqZWN0fSBvYmplY3QgSW5zdGFuY2Ugb2YgdGhlIG9iamVjdCB3aG9zZSB0eXBlIHdpbGwgYmUgdXNlZFxuICogICAgIGZvciByZW5hbWluZ1xuICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVuYW1lZCBwcm9wZXJ0eS5cbiAqL1xuZ29vZy5yZWZsZWN0Lm9iamVjdFByb3BlcnR5ID0gZnVuY3Rpb24ocHJvcCwgb2JqZWN0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHByb3A7XG59O1xuXG4vKipcbiAqIFRvIGFzc2VydCB0byB0aGUgY29tcGlsZXIgdGhhdCBhbiBvcGVyYXRpb24gaXMgbmVlZGVkIHdoZW4gaXQgd291bGRcbiAqIG90aGVyd2lzZSBiZSBzdHJpcHBlZC4gRm9yIGV4YW1wbGU6XG4gKiA8Y29kZT5cbiAqICAgICAvLyBGb3JjZSBhIGxheW91dFxuICogICAgIGdvb2cucmVmbGVjdC5zaW5rVmFsdWUoZGlhbG9nLm9mZnNldEhlaWdodCk7XG4gKiA8L2NvZGU+XG4gKiBAcGFyYW0ge1R9IHhcbiAqIEByZXR1cm4ge1R9XG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLnJlZmxlY3Quc2lua1ZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cucmVmbGVjdC5zaW5rVmFsdWVbJyAnXSh4KTtcbiAgcmV0dXJuIHg7XG59O1xuXG5cbi8qKlxuICogVGhlIGNvbXBpbGVyIHNob3VsZCBvcHRpbWl6ZSB0aGlzIGZ1bmN0aW9uIGF3YXkgaWZmIG5vIG9uZSBldmVyIHVzZXNcbiAqIGdvb2cucmVmbGVjdC5zaW5rVmFsdWUuXG4gKi9cbmdvb2cucmVmbGVjdC5zaW5rVmFsdWVbJyAnXSA9IGdvb2cubnVsbEZ1bmN0aW9uO1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBwcm9wZXJ0eSBjYW4gYmUgYWNjZXNzZWQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBUaGUgcHJvcGVydHkgbmFtZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGFjY2Vzc2libGUuIFdpbGwgYWxzbyByZXR1cm4gdHJ1ZVxuICogICAgIGlmIG9iaiBpcyBudWxsLlxuICovXG5nb29nLnJlZmxlY3QuY2FuQWNjZXNzUHJvcGVydHkgPSBmdW5jdGlvbihvYmosIHByb3ApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0cnkge1xuICAgIGdvb2cucmVmbGVjdC5zaW5rVmFsdWUob2JqW3Byb3BdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIGEgY2FjaGUgZ2l2ZW4gYSBrZXkuIFRoZSBjb21waWxlciBwcm92aWRlcyBzcGVjaWFsXG4gKiBjb25zaWRlcmF0aW9uIGZvciB0aGlzIGNhbGwgc3VjaCB0aGF0IGl0IGlzIGdlbmVyYWxseSBjb25zaWRlcmVkIHNpZGUtZWZmZWN0XG4gKiBmcmVlLiBIb3dldmVyLCBpZiB0aGUgYG9wdF9rZXlGbmAgb3IgYHZhbHVlRm5gIGhhdmUgc2lkZS1lZmZlY3RzXG4gKiB0aGVuIHRoZSBlbnRpcmUgY2FsbCBpcyBjb25zaWRlcmVkIHRvIGhhdmUgc2lkZS1lZmZlY3RzLlxuICpcbiAqIENvbnZlbnRpb25hbGx5IHN0b3JpbmcgdGhlIHZhbHVlIG9uIHRoZSBjYWNoZSB3b3VsZCBiZSBjb25zaWRlcmVkIGFcbiAqIHNpZGUtZWZmZWN0IGFuZCBwcmVjbHVkZSB1bnVzZWQgY2FsbHMgZnJvbSBiZWluZyBwcnVuZWQsIGllLiBldmVuIGlmXG4gKiB0aGUgdmFsdWUgd2FzIG5ldmVyIHVzZWQsIGl0IHdvdWxkIHN0aWxsIGFsd2F5cyBiZSBzdG9yZWQgaW4gdGhlIGNhY2hlLlxuICpcbiAqIFByb3ZpZGluZyBhIHNpZGUtZWZmZWN0IGZyZWUgYHZhbHVlRm5gIGFuZCBgb3B0X2tleUZuYFxuICogYWxsb3dzIHVudXNlZCBjYWxscyB0byBgZ29vZy5yZWZsZWN0LmNhY2hlYCB0byBiZSBwcnVuZWQuXG4gKlxuICogQHBhcmFtIHshT2JqZWN0PEssIFY+fSBjYWNoZU9iaiBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGNhY2hlZCB2YWx1ZXMuXG4gKiBAcGFyYW0gez99IGtleSBUaGUga2V5IHRvIGxvb2t1cCBpbiB0aGUgY2FjaGUuIElmIGl0IGlzIG5vdCBzdHJpbmcgb3IgbnVtYmVyXG4gKiAgICAgdGhlbiBhIGBvcHRfa2V5Rm5gIHNob3VsZCBiZSBwcm92aWRlZC4gVGhlIGtleSBpcyBhbHNvIHVzZWQgYXMgdGhlXG4gKiAgICAgcGFyYW1ldGVyIHRvIHRoZSBgdmFsdWVGbmAuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOlZ9IHZhbHVlRm4gVGhlIHZhbHVlIHByb3ZpZGVyIHRvIHVzZSB0byBjYWxjdWxhdGUgdGhlXG4gKiAgICAgdmFsdWUgdG8gc3RvcmUgaW4gdGhlIGNhY2hlLiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBzaWRlLWVmZmVjdCBmcmVlXG4gKiAgICAgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIG9wdGltaXphdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6Sz19IG9wdF9rZXlGbiBUaGUga2V5IHByb3ZpZGVyIHRvIGRldGVybWluZSB0aGUgY2FjaGVcbiAqICAgICBtYXAga2V5LiBUaGlzIHNob3VsZCBiZSB1c2VkIGlmIHRoZSBnaXZlbiBrZXkgaXMgbm90IGEgc3RyaW5nIG9yIG51bWJlci5cbiAqICAgICBJZiBub3QgcHJvdmlkZWQgdGhlbiB0aGUgZ2l2ZW4ga2V5IGlzIHVzZWQuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlXG4gKiAgICAgc2lkZS1lZmZlY3QgZnJlZSB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgb3B0aW1pemF0aW9uLlxuICogQHJldHVybiB7Vn0gVGhlIGNhY2hlZCBvciBjYWxjdWxhdGVkIHZhbHVlLlxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKi9cbmdvb2cucmVmbGVjdC5jYWNoZSA9IGZ1bmN0aW9uKGNhY2hlT2JqLCBrZXksIHZhbHVlRm4sIG9wdF9rZXlGbikge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHN0b3JlZEtleSA9IG9wdF9rZXlGbiA/IG9wdF9rZXlGbihrZXkpIDoga2V5O1xuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY2FjaGVPYmosIHN0b3JlZEtleSkpIHtcbiAgICByZXR1cm4gY2FjaGVPYmpbc3RvcmVkS2V5XTtcbiAgfVxuXG4gIHJldHVybiAoY2FjaGVPYmpbc3RvcmVkS2V5XSA9IHZhbHVlRm4oa2V5KSk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFJlbmRlcmluZyBlbmdpbmUgZGV0ZWN0aW9uLlxuICogQHNlZSA8YSBocmVmPVwiaHR0cDovL3d3dy51c2VyYWdlbnRzdHJpbmcuY29tL1wiPlVzZXIgYWdlbnQgc3RyaW5nczwvYT5cbiAqIEZvciBpbmZvcm1hdGlvbiBvbiB0aGUgYnJvd3NlciBicmFuZCAoc3VjaCBhcyBTYWZhcmkgdmVyc3VzIENocm9tZSksIHNlZVxuICogZ29vZy51c2VyQWdlbnQucHJvZHVjdC5cbiAqIEBzZWUgLi4vZGVtb3MvdXNlcmFnZW50Lmh0bWxcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cudXNlckFnZW50Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cucmVmbGVjdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZy5pbnRlcm5hbCcpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIElFLlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfSUUgPSBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lFJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIEVER0UsXG4gKiByZWZlcnJpbmcgdG8gRWRnZUhUTUwgYmFzZWQgRWRnZS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0UgPSBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0UnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIGJyb3dzZXIgaXMgR0VDS08uXG4gKi9cbmdvb2cudXNlckFnZW50LkFTU1VNRV9HRUNLTyA9IGdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS08nLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHdlIGtub3cgYXQgY29tcGlsZS10aW1lIHRoYXQgdGhlIGJyb3dzZXIgaXMgV0VCS0lULlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dFQktJVCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgd2Uga25vdyBhdCBjb21waWxlLXRpbWUgdGhhdCB0aGUgYnJvd3NlciBpcyBhXG4gKiAgICAgbW9iaWxlIGRldmljZSBydW5uaW5nIFdlYktpdCBlLmcuIGlQaG9uZSBvciBBbmRyb2lkLlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfTU9CSUxFX1dFQktJVCA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB3ZSBrbm93IGF0IGNvbXBpbGUtdGltZSB0aGF0IHRoZSBicm93c2VyIGlzIE9QRVJBLFxuICogcmVmZXJyaW5nIHRvIFByZXN0by1iYXNlZCBPcGVyYS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBID0gZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9PUEVSQScsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlXG4gKiAgICAgYGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyYFxuICogICAgIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIGFueSB2ZXJzaW9uLlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5ZX1ZFUlNJT04gPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5ZX1ZFUlNJT04nLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHdlIGtub3cgdGhlIGJyb3dzZXIgZW5naW5lIGF0IGNvbXBpbGUtdGltZS5cbiAqIEB0eXBlIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8gPSBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSUUgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfRURHRSB8fCBnb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS08gfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTU9CSUxFX1dFQktJVCB8fCBnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdXNlckFnZW50IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1c2VyQWdlbnQgc3RyaW5nLlxuICovXG5nb29nLnVzZXJBZ2VudC5nZXRVc2VyQWdlbnRTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4gez9OYXZpZ2F0b3J9IFRoZSBuYXRpdmUgbmF2aWdhdG9yIG9iamVjdC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuZ2V0TmF2aWdhdG9yVHlwZWQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBOZWVkIGEgbG9jYWwgbmF2aWdhdG9yIHJlZmVyZW5jZSBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBnbG9iYWwgb25lLFxuICAvLyB0byBhdm9pZCB0aGUgcmFyZSBjYXNlIHdoZXJlIHRoZXkgcmVmZXJlbmNlIGRpZmZlcmVudCBvYmplY3RzLlxuICAvLyAoaW4gYSBXb3JrZXJQb29sLCBmb3IgZXhhbXBsZSkuXG4gIHJldHVybiBnb29nLmdsb2JhbFsnbmF2aWdhdG9yJ10gfHwgbnVsbDtcbn07XG5cblxuLyoqXG4gKiBUT0RPKG5uYXplKTogQ2hhbmdlIHR5cGUgdG8gXCJOYXZpZ2F0b3JcIiBhbmQgdXBkYXRlIGNvbXBpbGF0aW9uIHRhcmdldHMuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgbmF0aXZlIG5hdmlnYXRvciBvYmplY3QuXG4gKi9cbmdvb2cudXNlckFnZW50LmdldE5hdmlnYXRvciA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3JUeXBlZCgpO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgUHJlc3RvLWJhc2VkIE9wZXJhLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50Lk9QRVJBID0gZ29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9PUEVSQSA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuSUUgPSBnb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lFIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNJRSgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBNaWNyb3NvZnQgRWRnZSAoRWRnZUhUTUwgYmFzZWQpLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LkVER0UgPSBnb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0UgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBNUyBJbnRlcm5ldCBFeHBsb3JlciBvciBNUyBFZGdlIChFZGdlSFRNTCBiYXNlZCkuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuRURHRV9PUl9JRSA9IGdvb2cudXNlckFnZW50LkVER0UgfHwgZ29vZy51c2VyQWdlbnQuSUU7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIEdlY2tvLiBHZWNrbyBpcyB0aGUgcmVuZGVyaW5nIGVuZ2luZSB1c2VkIGJ5XG4gKiBNb3ppbGxhLCBGaXJlZm94LCBhbmQgb3RoZXJzLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LkdFQ0tPID0gZ29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9HRUNLTyA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNHZWNrbygpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBXZWJLaXQuIFdlYktpdCBpcyB0aGUgcmVuZGVyaW5nIGVuZ2luZSB0aGF0XG4gKiBTYWZhcmksIEVkZ2UgQ2hyb21pdW0sIE9wZXJhIENocm9taXVtLCBBbmRyb2lkIGFuZCBvdGhlcnMgdXNlLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LldFQktJVCA9IGdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0VCS0lUIHx8IGdvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1dlYktpdCgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgbW9iaWxlIGRldmljZS5cbiAqXG4gKiBUaGlzIGlzIGEgc2VwYXJhdGUgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9naWMgY2FuIGJlIHRlc3RlZC5cbiAqXG4gKiBUT0RPKG5uYXplKTogSW52ZXN0aWdhdGUgc3dhcHBpbmcgaW4gZ29vZy5sYWJzLnVzZXJBZ2VudC5kZXZpY2UuaXNNb2JpbGUoKS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBtb2JpbGUgZGV2aWNlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNNb2JpbGVfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXNlckFnZW50LldFQktJVCAmJlxuICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KCdNb2JpbGUnKTtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBtb2JpbGUgZGV2aWNlLlxuICpcbiAqIFRPRE8obm5hemUpOiBDb25zaWRlciBkZXByZWNhdGluZyBNT0JJTEUgd2hlbiBsYWJzLnVzZXJBZ2VudFxuICogICBpcyBwcm9tb3RlZCBhcyB0aGUgZ2Vja28vd2Via2l0IGxvZ2ljIGlzIGxpa2VseSBpbmFjY3VyYXRlLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5NT0JJTEUgPVxuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9NT0JJTEVfV0VCS0lUIHx8IGdvb2cudXNlckFnZW50LmlzTW9iaWxlXygpO1xuXG5cbi8qKlxuICogVXNlZCB3aGlsZSB0cmFuc2l0aW9uaW5nIGNvZGUgdG8gdXNlIFdFQktJVCBpbnN0ZWFkLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGdvb2cudXNlckFnZW50LnByb2R1Y3QuU0FGQVJJfSBpbnN0ZWFkLlxuICogVE9ETyhuaWNrc2FudG9zKTogRGVsZXRlIHRoaXMgZnJvbSBnb29nLnVzZXJBZ2VudC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuU0FGQVJJID0gZ29vZy51c2VyQWdlbnQuV0VCS0lUO1xuXG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcGxhdGZvcm0gKG9wZXJhdGluZyBzeXN0ZW0pIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmdcbiAqICAgICBvbi4gRGVmYXVsdCB0byBlbXB0eSBzdHJpbmcgYmVjYXVzZSBuYXZpZ2F0b3IucGxhdGZvcm0gbWF5IG5vdCBiZSBkZWZpbmVkXG4gKiAgICAgKG9uIFJoaW5vLCBmb3IgZXhhbXBsZSkuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVQbGF0Zm9ybV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbmF2aWdhdG9yID0gZ29vZy51c2VyQWdlbnQuZ2V0TmF2aWdhdG9yVHlwZWQoKTtcbiAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gfHwgJyc7XG59O1xuXG5cbi8qKlxuICogVGhlIHBsYXRmb3JtIChvcGVyYXRpbmcgc3lzdGVtKSB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uLiBEZWZhdWx0IHRvXG4gKiBlbXB0eSBzdHJpbmcgYmVjYXVzZSBuYXZpZ2F0b3IucGxhdGZvcm0gbWF5IG5vdCBiZSBkZWZpbmVkIChvbiBSaGlubywgZm9yXG4gKiBleGFtcGxlKS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cudXNlckFnZW50LlBMQVRGT1JNID0gZ29vZy51c2VyQWdlbnQuZGV0ZXJtaW5lUGxhdGZvcm1fKCk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBNYWNpbnRvc2ggb3BlcmF0aW5nXG4gKiAgICAgc3lzdGVtLlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDID0gZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9NQUMnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBXaW5kb3dzIG9wZXJhdGluZ1xuICogICAgIHN5c3RlbS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1MgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUycsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIExpbnV4IG9wZXJhdGluZ1xuICogICAgIHN5c3RlbS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0xJTlVYID0gZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9MSU5VWCcsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIFgxMSB3aW5kb3dpbmdcbiAqICAgICBzeXN0ZW0uXG4gKi9cbmdvb2cudXNlckFnZW50LkFTU1VNRV9YMTEgPSBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMScsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBBbmRyb2lkLlxuICovXG5nb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRCA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9BTkRST0lEJywgZmFsc2UpO1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQSE9ORSA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cudXNlckFnZW50LkFTU1VNRV9JUEhPTkUnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYW4gaVBhZC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQgPSBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYW4gaVBvZC5cbiAqL1xuZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQT0QgPSBnb29nLmRlZmluZSgnZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQT0QnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gS2FpT1MuXG4gKi9cbmdvb2cudXNlckFnZW50LkFTU1VNRV9LQUlPUyA9IGdvb2cuZGVmaW5lKCdnb29nLnVzZXJBZ2VudC5BU1NVTUVfS0FJT1MnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA9IGdvb2cudXNlckFnZW50LkFTU1VNRV9NQUMgfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUyB8fCBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVggfHxcbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfWDExIHx8IGdvb2cudXNlckFnZW50LkFTU1VNRV9BTkRST0lEIHx8XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0lQSE9ORSB8fCBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBBRCB8fFxuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9JUE9EO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgTWFjaW50b3NoIG9wZXJhdGluZyBzeXN0ZW0uXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuTUFDID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTWFjaW50b3NoKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYSBXaW5kb3dzIG9wZXJhdGluZyBzeXN0ZW0uXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuV0lORE9XUyA9IGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dJTkRPV1MgOlxuICAgIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNXaW5kb3dzKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIExpbnV4IHBlciB0aGUgbGVnYWN5IGJlaGF2aW9yIG9mXG4gKiBnb29nLnVzZXJBZ2VudC5MSU5VWCwgd2hpY2ggY29uc2lkZXJlZCBDaHJvbWVPUyB0byBhbHNvIGJlXG4gKiBMaW51eC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5pc0xlZ2FjeUxpbnV4XyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTGludXgoKSB8fFxuICAgICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0Nocm9tZU9TKCk7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGEgTGludXggb3BlcmF0aW5nIHN5c3RlbS5cbiAqXG4gKiBOb3RlIHRoYXQgZ29vZy51c2VyQWdlbnQuTElOVVggY29uc2lkZXJzIENocm9tZU9TIHRvIGJlIExpbnV4LFxuICogd2hpbGUgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybSBjb25zaWRlcnMgQ2hyb21lT1MgYW5kXG4gKiBMaW51eCB0byBiZSBkaWZmZXJlbnQgT1Nlcy5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuTElOVVggPSBnb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9MSU5VWCA6XG4gICAgZ29vZy51c2VyQWdlbnQuaXNMZWdhY3lMaW51eF8oKTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgYW4gWDExIHdpbmRvd2luZyBzeXN0ZW0uXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5pc1gxMV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbmF2aWdhdG9yID0gZ29vZy51c2VyQWdlbnQuZ2V0TmF2aWdhdG9yVHlwZWQoKTtcbiAgcmV0dXJuICEhbmF2aWdhdG9yICYmXG4gICAgICBnb29nLnN0cmluZy5pbnRlcm5hbC5jb250YWlucyhuYXZpZ2F0b3JbJ2FwcFZlcnNpb24nXSB8fCAnJywgJ1gxMScpO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhIFgxMSB3aW5kb3dpbmcgc3lzdGVtLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LlgxMSA9IGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMSA6XG4gICAgZ29vZy51c2VyQWdlbnQuaXNYMTFfKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gQW5kcm9pZC5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5BTkRST0lEID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRCA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0FuZHJvaWQoKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy51c2VyQWdlbnQuSVBIT05FID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCk7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGlzIHJ1bm5pbmcgb24gYW4gaVBhZC5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5JUEFEID0gZ29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fID9cbiAgICBnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBBRCA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBhbiBpUG9kLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cudXNlckFnZW50LklQT0QgPSBnb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8gP1xuICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9JUE9EIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBvZCgpO1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBydW5uaW5nIG9uIGlPUy5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5JT1MgPSBnb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8gP1xuICAgIChnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FIHx8IGdvb2cudXNlckFnZW50LkFTU1VNRV9JUEFEIHx8XG4gICAgIGdvb2cudXNlckFnZW50LkFTU1VNRV9JUE9EKSA6XG4gICAgZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lvcygpO1xuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgcnVubmluZyBvbiBLYWlPUy5cbiAqIEB0eXBlIHtib29sZWFufVxuICovXG5nb29nLnVzZXJBZ2VudC5LQUlPUyA9IGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXyA/XG4gICAgZ29vZy51c2VyQWdlbnQuQVNTVU1FX0tBSU9TIDpcbiAgICBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzS2FpT1MoKTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHVzZXJcbiAqICAgICBhZ2VudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LmRldGVybWluZVZlcnNpb25fID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gQWxsIGJyb3dzZXJzIGhhdmUgZGlmZmVyZW50IHdheXMgdG8gZGV0ZWN0IHRoZSB2ZXJzaW9uIGFuZCB0aGV5IGFsbCBoYXZlXG4gIC8vIGRpZmZlcmVudCBuYW1pbmcgc2NoZW1lcy5cbiAgLy8gdmVyc2lvbiBpcyBhIHN0cmluZyByYXRoZXIgdGhhbiBhIG51bWJlciBiZWNhdXNlIGl0IG1heSBjb250YWluICdiJywgJ2EnLFxuICAvLyBhbmQgc28gb24uXG4gIHZhciB2ZXJzaW9uID0gJyc7XG4gIHZhciBhcnIgPSBnb29nLnVzZXJBZ2VudC5nZXRWZXJzaW9uUmVnZXhSZXN1bHRfKCk7XG4gIGlmIChhcnIpIHtcbiAgICB2ZXJzaW9uID0gYXJyID8gYXJyWzFdIDogJyc7XG4gIH1cblxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICAvLyBJRTkgY2FuIGJlIGluIGRvY3VtZW50IG1vZGUgOSBidXQgYmUgcmVwb3J0aW5nIGFuIGluY29uc2lzdGVudCB1c2VyIGFnZW50XG4gICAgLy8gdmVyc2lvbi4gIElmIGl0IGlzIGlkZW50aWZ5aW5nIGFzIGEgdmVyc2lvbiBsb3dlciB0aGFuIDkgd2UgdGFrZSB0aGVcbiAgICAvLyBkb2N1bWVudE1vZGUgYXMgdGhlIHZlcnNpb24gaW5zdGVhZC4gIElFOCBoYXMgc2ltaWxhciBiZWhhdmlvci5cbiAgICAvLyBJdCBpcyByZWNvbW1lbmRlZCB0byBzZXQgdGhlIFgtVUEtQ29tcGF0aWJsZSBoZWFkZXIgdG8gZW5zdXJlIHRoYXQgSUU5XG4gICAgLy8gdXNlcyBkb2N1bWVudE1vZGUgOS5cbiAgICB2YXIgZG9jTW9kZSA9IGdvb2cudXNlckFnZW50LmdldERvY3VtZW50TW9kZV8oKTtcbiAgICBpZiAoZG9jTW9kZSAhPSBudWxsICYmIGRvY01vZGUgPiBwYXJzZUZsb2F0KHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGRvY01vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4gez9JQXJyYXlMaWtlPHN0cmluZz58dW5kZWZpbmVkfSBUaGUgdmVyc2lvbiByZWdleCBtYXRjaGVzIGZyb21cbiAqICAgICBwYXJzaW5nIHRoZSB1c2VyXG4gKiAgICAgYWdlbnQgc3RyaW5nLiBUaGVzZSByZWdleCBzdGF0ZW1lbnRzIG11c3QgYmUgZXhlY3V0ZWQgaW5saW5lIHNvIHRoZXkgY2FuXG4gKiAgICAgYmUgY29tcGlsZWQgb3V0IGJ5IHRoZSBjbG9zdXJlIGNvbXBpbGVyIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHVzZXJhZ2VudFxuICogICAgIGRldGVjdGlvbiBsb2dpYyB3aGVuIEFTU1VNRV8qIGlzIHNwZWNpZmllZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LmdldFZlcnNpb25SZWdleFJlc3VsdF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdXNlckFnZW50ID0gZ29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nKCk7XG4gIGlmIChnb29nLnVzZXJBZ2VudC5HRUNLTykge1xuICAgIHJldHVybiAvcnZcXDooW15cXCk7XSspKFxcKXw7KS8uZXhlYyh1c2VyQWdlbnQpO1xuICB9XG4gIGlmIChnb29nLnVzZXJBZ2VudC5FREdFKSB7XG4gICAgcmV0dXJuIC9FZGdlXFwvKFtcXGRcXC5dKykvLmV4ZWModXNlckFnZW50KTtcbiAgfVxuICBpZiAoZ29vZy51c2VyQWdlbnQuSUUpIHtcbiAgICByZXR1cm4gL1xcYig/Ok1TSUV8cnYpWzogXShbXlxcKTtdKykoXFwpfDspLy5leGVjKHVzZXJBZ2VudCk7XG4gIH1cbiAgaWYgKGdvb2cudXNlckFnZW50LldFQktJVCkge1xuICAgIC8vIFdlYktpdC8xMjUuNFxuICAgIHJldHVybiAvV2ViS2l0XFwvKFxcUyspLy5leGVjKHVzZXJBZ2VudCk7XG4gIH1cbiAgaWYgKGdvb2cudXNlckFnZW50Lk9QRVJBKSB7XG4gICAgLy8gSWYgbm9uZSBvZiB0aGUgYWJvdmUgYnJvd3NlcnMgd2VyZSBkZXRlY3RlZCBidXQgdGhlIGJyb3dzZXIgaXMgT3BlcmEsIHRoZVxuICAgIC8vIG9ubHkgc3RyaW5nIHRoYXQgaXMgb2YgaW50ZXJlc3QgaXMgJ1ZlcnNpb24vPG51bWJlcj4nLlxuICAgIHJldHVybiAvKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKHVzZXJBZ2VudCk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBkb2N1bWVudCBtb2RlIChmb3IgdGVzdGluZykuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gTk9URSh1c2VyKTogZ29vZy51c2VyQWdlbnQgbWF5IGJlIHVzZWQgaW4gY29udGV4dCB3aGVyZSB0aGVyZSBpcyBubyBET00uXG4gIHZhciBkb2MgPSBnb29nLmdsb2JhbFsnZG9jdW1lbnQnXTtcbiAgcmV0dXJuIGRvYyA/IGRvY1snZG9jdW1lbnRNb2RlJ10gOiB1bmRlZmluZWQ7XG59O1xuXG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHVzZXIgYWdlbnQuIFRoaXMgaXMgYSBzdHJpbmcgYmVjYXVzZSBpdCBtaWdodCBjb250YWluXG4gKiAnYicgKGFzIGluIGJldGEpIGFzIHdlbGwgYXMgbXVsdGlwbGUgZG90cy5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cudXNlckFnZW50LlZFUlNJT04gPSBnb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVWZXJzaW9uXygpO1xuXG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHZlcnNpb24gbnVtYmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdjEgVmVyc2lvbiBvZiBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IHYyIFZlcnNpb24gb2Ygc2Vjb25kIGl0ZW0uXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSAgMSBpZiBmaXJzdCBhcmd1bWVudCBpcyBoaWdoZXJcbiAqICAgICAgICAgICAgICAgICAgIDAgaWYgYXJndW1lbnRzIGFyZSBlcXVhbFxuICogICAgICAgICAgICAgICAgICAtMSBpZiBzZWNvbmQgYXJndW1lbnQgaXMgaGlnaGVyLlxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucy5cbiAqL1xuZ29vZy51c2VyQWdlbnQuY29tcGFyZSA9IGZ1bmN0aW9uKHYxLCB2Mikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnN0cmluZy5pbnRlcm5hbC5jb21wYXJlVmVyc2lvbnModjEsIHYyKTtcbn07XG5cblxuLyoqXG4gKiBDYWNoZSBmb3Ige0BsaW5rIGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyfS5cbiAqIENhbGxzIHRvIGNvbXBhcmVWZXJzaW9ucyBhcmUgc3VycHJpc2luZ2x5IGV4cGVuc2l2ZSBhbmQsIGFzIGEgYnJvd3NlcidzXG4gKiB2ZXJzaW9uIG51bWJlciBpcyB1bmxpa2VseSB0byBjaGFuZ2UgZHVyaW5nIGEgc2Vzc2lvbiwgd2UgY2FjaGUgdGhlIHJlc3VsdHMuXG4gKiBAY29uc3RcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyQ2FjaGVfID0ge307XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IHZlcnNpb24gaXMgaGlnaGVyIG9yIHRoZSBzYW1lIGFzIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICogTk9URTogV2hlbiBjaGVja2luZyB0aGUgdmVyc2lvbiBudW1iZXJzIGZvciBGaXJlZm94IGFuZCBTYWZhcmksIGJlIHN1cmUgdG9cbiAqIHVzZSB0aGUgZW5naW5lJ3MgdmVyc2lvbiwgbm90IHRoZSBicm93c2VyJ3MgdmVyc2lvbiBudW1iZXIuICBGb3IgZXhhbXBsZSxcbiAqIEZpcmVmb3ggMy4wIGNvcnJlc3BvbmRzIHRvIEdlY2tvIDEuOSBhbmQgU2FmYXJpIDMuMCB0byBXZWJraXQgNTIyLjExLlxuICogT3BlcmEgYW5kIEludGVybmV0IEV4cGxvcmVyIHZlcnNpb25zIG1hdGNoIHRoZSBwcm9kdWN0IHJlbGVhc2UgbnVtYmVyLjxicj5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FmYXJpX3ZlcnNpb25faGlzdG9yeVwiPlxuICogICAgIFdlYmtpdDwvYT5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2Vja29fZW5naW5lXCI+R2Vja288L2E+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBhZ2VudCB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZSBhc1xuICogICAgIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICovXG5nb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlciA9IGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy51c2VyQWdlbnQuQVNTVU1FX0FOWV9WRVJTSU9OIHx8XG4gICAgICBnb29nLnJlZmxlY3QuY2FjaGUoXG4gICAgICAgICAgZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJDYWNoZV8sIHZlcnNpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICAgICAgcmV0dXJuIGdvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVWZXJzaW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgZ29vZy51c2VyQWdlbnQuVkVSU0lPTiwgdmVyc2lvbikgPj0gMDtcbiAgICAgICAgICB9KTtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBJRSBlZmZlY3RpdmUgZG9jdW1lbnQgbW9kZSBpcyBoaWdoZXIgb3IgdGhlIHNhbWUgYXMgdGhlIGdpdmVuXG4gKiBkb2N1bWVudCBtb2RlIHZlcnNpb24uXG4gKiBOT1RFOiBPbmx5IGZvciBJRSwgcmV0dXJuIGZhbHNlIGZvciBhbm90aGVyIGJyb3dzZXIuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRvY3VtZW50TW9kZSBUaGUgZG9jdW1lbnQgbW9kZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgSUUgZWZmZWN0aXZlIGRvY3VtZW50IG1vZGUgaXMgaGlnaGVyIG9yIHRoZVxuICogICAgIHNhbWUgYXMgdGhlIGdpdmVuIHZlcnNpb24uXG4gKi9cbmdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIgPSBmdW5jdGlvbihkb2N1bWVudE1vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gTnVtYmVyKGdvb2cudXNlckFnZW50LkRPQ1VNRU5UX01PREUpID49IGRvY3VtZW50TW9kZTtcbn07XG5cblxuLyoqXG4gKiBEZXByZWNhdGVkIGFsaWFzIHRvIGBnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgSUUgZWZmZWN0aXZlIGRvY3VtZW50IG1vZGUgaXMgaGlnaGVyIG9yIHRoZVxuICogICAgICBzYW1lIGFzIHRoZSBnaXZlbiB2ZXJzaW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIoKS5cbiAqL1xuZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGUgPSBnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyO1xuXG5cbi8qKlxuICogRm9yIElFIHZlcnNpb24gPCA3LCBkb2N1bWVudE1vZGUgaXMgdW5kZWZpbmVkLCBzbyBhdHRlbXB0IHRvIHVzZSB0aGVcbiAqIENTUzFDb21wYXQgcHJvcGVydHkgdG8gc2VlIGlmIHdlIGFyZSBpbiBzdGFuZGFyZHMgbW9kZS4gSWYgd2UgYXJlIGluXG4gKiBzdGFuZGFyZHMgbW9kZSwgdHJlYXQgdGhlIGJyb3dzZXIgdmVyc2lvbiBhcyB0aGUgZG9jdW1lbnQgbW9kZS4gT3RoZXJ3aXNlLFxuICogSUUgaXMgZW11bGF0aW5nIHZlcnNpb24gNS5cbiAqXG4gKiBOT1RFKHVzZXIpOiBTdXBwb3J0IGZvciBJRSA8IDcgaXMgbG9uZyBnb25lLCBzbyB0aGlzIGlzIG5vdyBzaW1wbGlmaWVkLlxuICogSXQgcmV0dXJucyBkb2N1bWVudC5kb2N1bWVudE1vZGUgZm9yIElFIGFuZCB1bmRlZmluZWQgZm9yIGV2ZXJ5dGhpbmcgZWxzZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH1cbiAqIEBjb25zdFxuICovXG5nb29nLnVzZXJBZ2VudC5ET0NVTUVOVF9NT0RFID0gKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBkb2MgPSBnb29nLmdsb2JhbFsnZG9jdW1lbnQnXTtcbiAgaWYgKCFkb2MgfHwgIWdvb2cudXNlckFnZW50LklFKSByZXR1cm4gdW5kZWZpbmVkO1xuICAvLyBUaGlzIG11c3QgYmUgYW4gSUUgdXNlciBhZ2VudC5cbiAgdmFyIGRvY3VtZW50TW9kZSA9IGdvb2cudXNlckFnZW50LmdldERvY3VtZW50TW9kZV8oKTtcbiAgaWYgKGRvY3VtZW50TW9kZSkgcmV0dXJuIGRvY3VtZW50TW9kZTtcbiAgLy8gVGhlIHVzZXIgYWdlbnQgdmVyc2lvbiBzdHJpbmcgYmVnaW5zIHdpdGggdGhlIG1ham9yIHZlcnNpb24uXG4gIC8vIFBhcnNlIHRoZSBtYWpvciB2ZXJzaW9uIGFuZCB0cnVuY2F0ZSBhbnl0aGluZyBmb2xsb3dpbmcuXG4gIHZhciBpZVZlcnNpb24gPSBwYXJzZUludChnb29nLnVzZXJBZ2VudC5WRVJTSU9OLCAxMCk7XG4gIHJldHVybiBpZVZlcnNpb24gfHwgdW5kZWZpbmVkO1xufSkoKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDbG9zdXJlIHVzZXIgYWdlbnQgZGV0ZWN0aW9uIChCcm93c2VyKS5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly93d3cudXNlcmFnZW50c3RyaW5nLmNvbS9cIj5Vc2VyIGFnZW50IHN0cmluZ3M8L2E+XG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiByZW5kZXJpbmcgZW5naW5lLCBwbGF0Zm9ybSwgb3IgZGV2aWNlIHNlZSB0aGUgb3RoZXJcbiAqIHN1Yi1uYW1lc3BhY2VzIGluIGdvb2cubGFicy51c2VyQWdlbnQsIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0sXG4gKiBnb29nLmxhYnMudXNlckFnZW50LmRldmljZSByZXNwZWN0aXZlbHkuKVxuICovXG5cbmdvb2cubW9kdWxlKCdnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXInKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuY29uc3QgZ29vZ0Fzc2VydHMgPSBnb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuY29uc3QgdXRpbCA9IGdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsJyk7XG5jb25zdCB7QXN5bmNWYWx1ZSwgVmVyc2lvbn0gPSBnb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQuaGlnaEVudHJvcHkuaGlnaEVudHJvcHlWYWx1ZScpO1xuY29uc3Qge2NvbXBhcmVWZXJzaW9uc30gPSBnb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nLmludGVybmFsJyk7XG5jb25zdCB7ZnVsbFZlcnNpb25MaXN0LCBoYXNGdWxsVmVyc2lvbkxpc3R9ID0gZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMudXNlckFnZW50LmhpZ2hFbnRyb3B5LmhpZ2hFbnRyb3B5RGF0YScpO1xuXG4vLyBUT0RPKG5uYXplKTogUmVmYWN0b3IgdG8gcmVtb3ZlIGV4Y2Vzc2l2ZSBleGNsdXNpb24gbG9naWMgaW4gbWF0Y2hpbmdcbi8vIGZ1bmN0aW9ucy5cblxuLyoqXG4gKiBBIGJyb3dzZXIgYnJhbmQgcmVwcmVzZW50cyBhbiBvcGFxdWUgc3RyaW5nIHRoYXQgaXMgdXNlZCBmb3IgbWFraW5nXG4gKiBicmFuZC1zcGVjaWZpYyB2ZXJzaW9uIGNoZWNrcyBpbiB1c2VyQWdlbnREYXRhLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgQnJhbmQgPSB7XG4gIC8qKlxuICAgKiBUaGUgYnJvd3NlciBicmFuZCBmb3IgQW5kcm9pZCBCcm93c2VyLlxuICAgKiBEbyBub3QgZGVwZW5kIG9uIHRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZy4gQmVjYXVzZSBBbmRyb2lkIEJyb3dzZXIgaGFzIG5vdFxuICAgKiBpbXBsZW1lbnRlZCB1c2VyQWdlbnREYXRhIHlldCwgdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIGlzIG5vdCBndWFyYW50ZWVkXG4gICAqIHRvIHN0YXkgdGhlIHNhbWUgaW4gZnV0dXJlIHJldmlzaW9ucy5cbiAgICovXG4gIEFORFJPSURfQlJPV1NFUjogJ0FuZHJvaWQgQnJvd3NlcicsXG4gIC8qKlxuICAgKiBUaGUgYnJvd3NlciBicmFuZCBmb3IgQ2hyb21pdW0sIGluY2x1ZGluZyBDaHJvbWl1bS1iYXNlZCBFZGdlIGFuZCBPcGVyYS5cbiAgICovXG4gIENIUk9NSVVNOiAnQ2hyb21pdW0nLFxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgYnJhbmQgZm9yIEVkZ2UuXG4gICAqIFRoaXMgYnJhbmQgY2FuIGJlIHVzZWQgdG8gZ2V0IHRoZSB2ZXJzaW9uIG9mIGJvdGggRWRnZUhUTUwgYW5kXG4gICAqIENocm9taXVtLWJhc2VkIEVkZ2UuXG4gICAqL1xuICBFREdFOiAnTWljcm9zb2Z0IEVkZ2UnLFxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgYnJhbmQgZm9yIEZpcmVmb3guXG4gICAqIERvIG5vdCBkZXBlbmQgb24gdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nLiBCZWNhdXNlIEZpcmVmb3ggaGFzIG5vdFxuICAgKiBpbXBsZW1lbnRlZCB1c2VyQWdlbnREYXRhIHlldCwgdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIGlzIG5vdCBndWFyYW50ZWVkXG4gICAqIHRvIHN0YXkgdGhlIHNhbWUgaW4gZnV0dXJlIHJldmlzaW9ucy5cbiAgICovXG4gIEZJUkVGT1g6ICdGaXJlZm94JyxcbiAgLyoqXG4gICAqIFRoZSBicm93c2VyIGJyYW5kIGZvciBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICogRG8gbm90IGRlcGVuZCBvbiB0aGUgdmFsdWUgb2YgdGhpcyBzdHJpbmcuIEJlY2F1c2UgSUUgd2lsbCBuZXZlciBzdXBwb3J0XG4gICAqIHVzZXJBZ2VudERhdGEsIHRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZyBzaG91bGQgYmUgdHJlYXRlZCBhcyBvcGFxdWUgKGl0J3NcbiAgICogdXNlZCBpbnRlcm5hbGx5IGZvciBsZWdhY3ktdXNlckFnZW50IGZhbGxiYWNrKS5cbiAgICovXG4gIElFOiAnSW50ZXJuZXQgRXhwbG9yZXInLFxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgYnJhbmQgZm9yIE9wZXJhLlxuICAgKiBUaGlzIGJyYW5kIGNhbiBiZSB1c2VkIHRvIGdldCB0aGUgdmVyc2lvbiBvZiBib3RoIFByZXN0by0gYW5kXG4gICAqIENocm9taXVtLWJhc2VkIE9wZXJhLlxuICAgKi9cbiAgT1BFUkE6ICdPcGVyYScsXG4gIC8qKlxuICAgKiBUaGUgYnJvd3NlciBicmFuZCBmb3IgU2FmYXJpLlxuICAgKiBEbyBub3QgZGVwZW5kIG9uIHRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZy4gQmVjYXVzZSBTYWZhcmkgaGFzIG5vdFxuICAgKiBpbXBsZW1lbnRlZCB1c2VyQWdlbnREYXRhIHlldCwgdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIGlzIG5vdCBndWFyYW50ZWVkXG4gICAqIHRvIHN0YXkgdGhlIHNhbWUgaW4gZnV0dXJlIHJldmlzaW9ucy5cbiAgICovXG4gIFNBRkFSSTogJ1NhZmFyaScsXG4gIC8qKlxuICAgKiBUaGUgYnJvd3NlciBicmFuZCBmb3IgU2lsay5cbiAgICogU2VlXG4gICAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9zaWxrL2xhdGVzdC9kZXZlbG9wZXJndWlkZS93aGF0LWlzLXNpbGsuaHRtbFxuICAgKiBEbyBub3QgZGVwZW5kIG9uIHRoZSB2YWx1ZSBvZiB0aGlzIHN0cmluZy4gQmVjYXVzZSBTaWxrIGRvZXMgbm90XG4gICAqIGlkZW50aWZ5IGl0c2VsZiBpbiB1c2VyQWdlbnREYXRhIHlldCwgdGhlIHZhbHVlIG9mIHRoaXMgc3RyaW5nIGlzIG5vdFxuICAgKiBndWFyYW50ZWVkIHRvIHN0YXkgdGhlIHNhbWUgaW4gZnV0dXJlIHJldmlzaW9ucy5cbiAgICovXG4gIFNJTEs6ICdTaWxrJyxcbn07XG5leHBvcnRzLkJyYW5kID0gQnJhbmQ7XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0byB1c2UgbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEgdG8gZGV0ZXJtaW5lXG4gKiBicm93c2VyJ3MgYnJhbmQuXG4gKi9cbmZ1bmN0aW9uIHVzZVVzZXJBZ2VudERhdGFCcmFuZCgpIHtcbiAgaWYgKHV0aWwuQVNTVU1FX0NMSUVOVF9ISU5UU19TVVBQT1JUKSByZXR1cm4gdHJ1ZTtcbiAgY29uc3QgdXNlckFnZW50RGF0YSA9IHV0aWwuZ2V0VXNlckFnZW50RGF0YSgpO1xuICByZXR1cm4gISF1c2VyQWdlbnREYXRhICYmIHVzZXJBZ2VudERhdGEuYnJhbmRzLmxlbmd0aCA+IDA7XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgT3BlcmEuIE5vdGU6IENocm9taXVtIGJhc2VkXG4gKiAgICAgT3BlcmEgKE9wZXJhIDE1KykgaXMgZGV0ZWN0ZWQgYXMgQ2hyb21lIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHNwZWNpYWxcbiAqICAgICBjYXNpbmcuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoT3BlcmEoKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSkge1xuICAgIC8vIFByZS1DaHJvbWl1bSBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ09wZXJhJyk7XG59XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBJRS4gKi9cbmZ1bmN0aW9uIG1hdGNoSUUoKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSkge1xuICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ1RyaWRlbnQnKSB8fCB1dGlsLm1hdGNoVXNlckFnZW50KCdNU0lFJyk7XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgRWRnZS4gVGhpcyByZWZlcnMgdG9cbiAqICAgICBFZGdlSFRNTCBiYXNlZCBFZGdlLlxuICovXG5mdW5jdGlvbiBtYXRjaEVkZ2VIdG1sKCkge1xuICBpZiAodXNlVXNlckFnZW50RGF0YUJyYW5kKCkpIHtcbiAgICAvLyBQcmUtQ2hyb21pdW0gRWRnZSBkb2Vzbid0IHN1cHBvcnQgbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdFZGdlJyk7XG59XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDaHJvbWl1bSBiYXNlZCBFZGdlLiAqL1xuZnVuY3Rpb24gbWF0Y2hFZGdlQ2hyb21pdW0oKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSkge1xuICAgIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50RGF0YUJyYW5kKEJyYW5kLkVER0UpO1xuICB9XG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdFZGcvJyk7XG59XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDaHJvbWl1bSBiYXNlZCBPcGVyYS4gKi9cbmZ1bmN0aW9uIG1hdGNoT3BlcmFDaHJvbWl1bSgpIHtcbiAgaWYgKHVzZVVzZXJBZ2VudERhdGFCcmFuZCgpKSB7XG4gICAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnREYXRhQnJhbmQoQnJhbmQuT1BFUkEpO1xuICB9XG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdPUFInKTtcbn1cblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEZpcmVmb3guICovXG5mdW5jdGlvbiBtYXRjaEZpcmVmb3goKSB7XG4gIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IG5hdmlnYXRvci51c2VyQWdlbnREYXRhIHlldCwgc28gdXNlXG4gIC8vIG5hdmlnYXRvci51c2VyQWdlbnQuXG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdGaXJlZm94JykgfHwgdXRpbC5tYXRjaFVzZXJBZ2VudCgnRnhpT1MnKTtcbn1cblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIFNhZmFyaS4gKi9cbmZ1bmN0aW9uIG1hdGNoU2FmYXJpKCkge1xuICAvLyBBcHBsZS1iYXNlZCBicm93c2VycyBkb24ndCBzdXBwb3J0IG5hdmlnYXRvci51c2VyQWdlbnREYXRhIHlldCwgc28gdXNlXG4gIC8vIG5hdmlnYXRvci51c2VyQWdlbnQuXG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdTYWZhcmknKSAmJlxuICAgICAgIShtYXRjaENocm9tZSgpIHx8IG1hdGNoQ29hc3QoKSB8fCBtYXRjaE9wZXJhKCkgfHwgbWF0Y2hFZGdlSHRtbCgpIHx8XG4gICAgICAgIG1hdGNoRWRnZUNocm9taXVtKCkgfHwgbWF0Y2hPcGVyYUNocm9taXVtKCkgfHwgbWF0Y2hGaXJlZm94KCkgfHxcbiAgICAgICAgaXNTaWxrKCkgfHwgdXRpbC5tYXRjaFVzZXJBZ2VudCgnQW5kcm9pZCcpKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDb2FzdCAoT3BlcmEncyBXZWJraXQtYmFzZWRcbiAqICAgICBpT1MgYnJvd3NlcikuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoQ29hc3QoKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSkge1xuICAgIC8vIENvYXN0IGRvZXNuJ3Qgc3VwcG9ydCBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ0NvYXN0Jyk7XG59XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBpT1MgV2Vidmlldy4gKi9cbmZ1bmN0aW9uIG1hdGNoSW9zV2VidmlldygpIHtcbiAgLy8gQXBwbGUtYmFzZWQgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBuYXZpZ2F0b3IudXNlckFnZW50RGF0YSB5ZXQsIHNvIHVzZVxuICAvLyBuYXZpZ2F0b3IudXNlckFnZW50LlxuICAvLyBpT1MgV2VidmlldyBkb2VzIG5vdCBzaG93IHVwIGFzIENocm9tZSBvciBTYWZhcmkuXG4gIHJldHVybiAodXRpbC5tYXRjaFVzZXJBZ2VudCgnaVBhZCcpIHx8IHV0aWwubWF0Y2hVc2VyQWdlbnQoJ2lQaG9uZScpKSAmJlxuICAgICAgIW1hdGNoU2FmYXJpKCkgJiYgIW1hdGNoQ2hyb21lKCkgJiYgIW1hdGNoQ29hc3QoKSAmJiAhbWF0Y2hGaXJlZm94KCkgJiZcbiAgICAgIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ0FwcGxlV2ViS2l0Jyk7XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgYW55IENocm9taXVtIGJyb3dzZXIuIFRoaXNcbiAqICAgICByZXR1cm5zIHRydWUgZm9yIENocm9tZSwgT3BlcmEgMTUrLCBhbmQgRWRnZSBDaHJvbWl1bS5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hDaHJvbWUoKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSkge1xuICAgIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50RGF0YUJyYW5kKEJyYW5kLkNIUk9NSVVNKTtcbiAgfVxuICByZXR1cm4gKCh1dGlsLm1hdGNoVXNlckFnZW50KCdDaHJvbWUnKSB8fCB1dGlsLm1hdGNoVXNlckFnZW50KCdDcmlPUycpKSAmJlxuICAgICAgICAgICFtYXRjaEVkZ2VIdG1sKCkpIHx8XG4gICAgICBpc1NpbGsoKTtcbn1cblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIHRoZSBBbmRyb2lkIGJyb3dzZXIuICovXG5mdW5jdGlvbiBtYXRjaEFuZHJvaWRCcm93c2VyKCkge1xuICAvLyBBbmRyb2lkIGNhbiBhcHBlYXIgaW4gdGhlIHVzZXIgYWdlbnQgc3RyaW5nIGZvciBDaHJvbWUgb24gQW5kcm9pZC5cbiAgLy8gVGhpcyBpcyBub3QgdGhlIEFuZHJvaWQgc3RhbmRhbG9uZSBicm93c2VyIGlmIGl0IGRvZXMuXG4gIHJldHVybiB1dGlsLm1hdGNoVXNlckFnZW50KCdBbmRyb2lkJykgJiZcbiAgICAgICEoaXNDaHJvbWUoKSB8fCBpc0ZpcmVmb3goKSB8fCBpc09wZXJhKCkgfHwgaXNTaWxrKCkpO1xufVxuXG4vKiogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgT3BlcmEuICovXG5jb25zdCBpc09wZXJhID0gbWF0Y2hPcGVyYTtcbmV4cG9ydHMuaXNPcGVyYSA9IGlzT3BlcmE7XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBJRS4gKi9cbmNvbnN0IGlzSUUgPSBtYXRjaElFO1xuZXhwb3J0cy5pc0lFID0gaXNJRTtcblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEVkZ2VIVE1MIGJhc2VkIEVkZ2UuICovXG5jb25zdCBpc0VkZ2UgPSBtYXRjaEVkZ2VIdG1sO1xuZXhwb3J0cy5pc0VkZ2UgPSBpc0VkZ2U7XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBDaHJvbWl1bSBiYXNlZCBFZGdlLiAqL1xuY29uc3QgaXNFZGdlQ2hyb21pdW0gPSBtYXRjaEVkZ2VDaHJvbWl1bTtcbmV4cG9ydHMuaXNFZGdlQ2hyb21pdW0gPSBpc0VkZ2VDaHJvbWl1bTtcblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIENocm9taXVtIGJhc2VkIE9wZXJhLiAqL1xuY29uc3QgaXNPcGVyYUNocm9taXVtID0gbWF0Y2hPcGVyYUNocm9taXVtO1xuZXhwb3J0cy5pc09wZXJhQ2hyb21pdW0gPSBpc09wZXJhQ2hyb21pdW07XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBGaXJlZm94LiAqL1xuY29uc3QgaXNGaXJlZm94ID0gbWF0Y2hGaXJlZm94O1xuZXhwb3J0cy5pc0ZpcmVmb3ggPSBpc0ZpcmVmb3g7XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBTYWZhcmkuICovXG5jb25zdCBpc1NhZmFyaSA9IG1hdGNoU2FmYXJpO1xuZXhwb3J0cy5pc1NhZmFyaSA9IGlzU2FmYXJpO1xuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIENvYXN0IChPcGVyYSdzIFdlYmtpdC1iYXNlZFxuICogICAgIGlPUyBicm93c2VyKS5cbiAqL1xuY29uc3QgaXNDb2FzdCA9IG1hdGNoQ29hc3Q7XG5leHBvcnRzLmlzQ29hc3QgPSBpc0NvYXN0O1xuXG4vKiogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgaU9TIFdlYnZpZXcuICovXG5jb25zdCBpc0lvc1dlYnZpZXcgPSBtYXRjaElvc1dlYnZpZXc7XG5leHBvcnRzLmlzSW9zV2VidmlldyA9IGlzSW9zV2VidmlldztcblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBhbnkgQ2hyb21pdW0gYmFzZWQgYnJvd3NlciAoXG4gKiAgICAgQ2hyb21lLCBCbGluay1iYXNlZCBPcGVyYSAoMTUrKSBhbmQgRWRnZSBDaHJvbWl1bSkuXG4gKi9cbmNvbnN0IGlzQ2hyb21lID0gbWF0Y2hDaHJvbWU7XG5leHBvcnRzLmlzQ2hyb21lID0gaXNDaHJvbWU7XG5cbi8qKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyB0aGUgQW5kcm9pZCBicm93c2VyLiAqL1xuY29uc3QgaXNBbmRyb2lkQnJvd3NlciA9IG1hdGNoQW5kcm9pZEJyb3dzZXI7XG5leHBvcnRzLmlzQW5kcm9pZEJyb3dzZXIgPSBpc0FuZHJvaWRCcm93c2VyO1xuXG4vKipcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6XG4gKiBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9zaWxrL2xhdGVzdC9kZXZlbG9wZXJndWlkZS91c2VyLWFnZW50Lmh0bWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIFNpbGsuXG4gKi9cbmZ1bmN0aW9uIGlzU2lsaygpIHtcbiAgLy8gQXMgb2YgU2lsayA5MywgU2lsayBkb2VzIG5vdCBpZGVudGlmeSBpdHNlbGYgaW4gdXNlckFnZW50RGF0YS5icmFuZHMuXG4gIC8vIFdoZW4gU2lsayBjaGFuZ2VzIHRoaXMgYmVoYXZpb3IsIHVwZGF0ZSB0aGlzIG1ldGhvZCB0byBjYWxsXG4gIC8vIG1hdGNoVXNlckFnZW50RGF0YUJyYW5kIChha2luIHRvIGlzQ2hyb21lLCBldGMuKVxuICByZXR1cm4gdXRpbC5tYXRjaFVzZXJBZ2VudCgnU2lsaycpO1xufVxuZXhwb3J0cy5pc1NpbGsgPSBpc1NpbGs7XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gbWFwcGluZyBhIGxpc3Qgb2YgY2FuZGlkYXRlXG4gKiB2ZXJzaW9uIHR1cGxlIGtleXMgdG8gdGhlIGZpcnN0IHZlcnNpb24gc3RyaW5nIHByZXNlbnQgdW5kZXIgYSBrZXkuXG4gKiBFeDpcbiAqIDxjb2RlPlxuICogLy8gQXJnIGV4dHJhY3RlZCBmcm9tIFwiRm9vLzEuMi4zIEJhci8wLjIwMjFcIlxuICogY29uc3QgbWFwVmVyc2lvbiA9IGNyZWF0ZVZlcnNpb25NYXAoW1tcIkZvb1wiLCBcIjEuMi4zXCJdLCBbXCJCYXJcIiwgXCIwLjIwMjFcIl1dKTtcbiAqIG1hcFZlcnNpb24oW1wiQmFyXCIsIFwiRm9vXCJdKTsgLy8gcmV0dXJucyBcIjAuMjAyMVwiXG4gKiBtYXBWZXJzaW9uKFtcIkJhelwiLCBcIkZvb1wiXSk7IC8vIHJldHVybnMgXCIxLjIuM1wiXG4gKiBtYXBWZXJzaW9uKFtcIkJhelwiLCBcIj8/P1wiXSk7IC8vIHJldHVybnMgXCJcIlxuICogPC9jb2RlPlxuICogQHBhcmFtIHshQXJyYXk8IUFycmF5PHN0cmluZz4+fSB2ZXJzaW9uVHVwbGVzIFZlcnNpb24gdHVwbGVzIHByZS1leHRyYWN0ZWRcbiAqICAgICBmcm9tIGEgdXNlciBhZ2VudCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbighQXJyYXk8c3RyaW5nPik6IHN0cmluZ30gVGhlIHZlcnNpb24gc3RyaW5nLCBvciBlbXB0eVxuICogc3RyaW5nIGlmIGl0IGRvZXNuJ3QgZXhpc3QgdW5kZXIgdGhlIGdpdmVuIGtleS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmVyc2lvbk1hcCh2ZXJzaW9uVHVwbGVzKSB7XG4gIC8vIENvbnN0cnVjdCBhIG1hcCBmb3IgZWFzeSBsb29rdXAuXG4gIGNvbnN0IHZlcnNpb25NYXAgPSB7fTtcbiAgdmVyc2lvblR1cGxlcy5mb3JFYWNoKCh0dXBsZSkgPT4ge1xuICAgIC8vIE5vdGUgdGhhdCB0aGUgdHVwbGUgaXMgb2YgbGVuZ3RoIHRocmVlLCBidXQgd2Ugb25seSBjYXJlIGFib3V0IHRoZVxuICAgIC8vIGZpcnN0IHR3by5cbiAgICBjb25zdCBrZXkgPSB0dXBsZVswXTtcbiAgICBjb25zdCB2YWx1ZSA9IHR1cGxlWzFdO1xuICAgIHZlcnNpb25NYXBba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICAvLyBHaXZlcyB0aGUgdmFsdWUgd2l0aCB0aGUgZmlyc3Qga2V5IGl0IGZpbmRzLCBvdGhlcndpc2UgZW1wdHkgc3RyaW5nLlxuICByZXR1cm4gKGtleXMpID0+IHZlcnNpb25NYXBba2V5cy5maW5kKChrZXkpID0+IGtleSBpbiB2ZXJzaW9uTWFwKV0gfHwgJyc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYnJvd3NlciB2ZXJzaW9uLlxuICpcbiAqIE5vdGUgdGhhdCBmb3IgYnJvd3NlcnMgd2l0aCBtdWx0aXBsZSBicmFuZHMsIHRoaXMgZnVuY3Rpb24gYXNzdW1lcyBhIHByaW1hcnlcbiAqIGJyYW5kIGFuZCByZXR1cm5zIHRoZSB2ZXJzaW9uIGZvciB0aGF0IGJyYW5kLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBmdW5jdGlvbiBpcyBub3QgdXNlckFnZW50RGF0YS1hd2FyZSBhbmQgd2lsbCByZXR1cm5cbiAqIGluY29ycmVjdCB2YWx1ZXMgd2hlbiB0aGUgVXNlciBBZ2VudCBzdHJpbmcgaXMgZnJvemVuLiBUaGUgY3VycmVudCBzdGF0dXMgb2ZcbiAqIFVzZXIgQWdlbnQgc3RyaW5nIGZyZWV6aW5nIGlzIGF2YWlsYWJsZSBoZXJlOlxuICogaHR0cHM6Ly93d3cuY2hyb21lc3RhdHVzLmNvbS9mZWF0dXJlLzU3MDQ1NTM3NDU4NzQ5NDRcbiAqXG4gKiBUbyBtaXRpZ2F0ZSBib3RoIG9mIHRoZXNlIHBvdGVudGlhbCBpc3N1ZXMsIHVzZVxuICogZ2V0VmVyc2lvblN0cmluZ0ZvckxvZ2dpbmcoKSBvciBmdWxsVmVyc2lvbk9mKCkgaW5zdGVhZC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBicm93c2VyIHZlcnNpb24gb3IgZW1wdHkgc3RyaW5nIGlmIHZlcnNpb24gY2Fubm90IGJlXG4gKiAgICAgZGV0ZXJtaW5lZC4gTm90ZSB0aGF0IGZvciBJbnRlcm5ldCBFeHBsb3JlciwgdGhpcyByZXR1cm5zIHRoZSB2ZXJzaW9uIG9mXG4gKiAgICAgdGhlIGJyb3dzZXIsIG5vdCB0aGUgdmVyc2lvbiBvZiB0aGUgcmVuZGVyaW5nIGVuZ2luZS4gKElFIDggaW5cbiAqICAgICBjb21wYXRpYmlsaXR5IG1vZGUgd2lsbCByZXR1cm4gOC4wIHJhdGhlciB0aGFuIDcuMC4gVG8gZGV0ZXJtaW5lIHRoZVxuICogICAgIHJlbmRlcmluZyBlbmdpbmUgdmVyc2lvbiwgbG9vayBhdCBkb2N1bWVudC5kb2N1bWVudE1vZGUgaW5zdGVhZC4gU2VlXG4gKiAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMTk2OTg4KHY9dnMuODUpLmFzcHggZm9yIG1vcmVcbiAqICAgICBkZXRhaWxzLilcbiAqL1xuZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgY29uc3QgdXNlckFnZW50U3RyaW5nID0gdXRpbC5nZXRVc2VyQWdlbnQoKTtcblxuICAvLyBTcGVjaWFsIGNhc2UgSUUgc2luY2UgSUUncyB2ZXJzaW9uIGlzIGluc2lkZSB0aGUgcGFyZW50aGVzaXMgYW5kXG4gIC8vIHdpdGhvdXQgdGhlICcvJy5cbiAgaWYgKGlzSUUoKSkge1xuICAgIHJldHVybiBnZXRJRVZlcnNpb24odXNlckFnZW50U3RyaW5nKTtcbiAgfVxuXG4gIGNvbnN0IHZlcnNpb25UdXBsZXMgPSB1dGlsLmV4dHJhY3RWZXJzaW9uVHVwbGVzKHVzZXJBZ2VudFN0cmluZyk7XG4gIGNvbnN0IGxvb2tVcFZhbHVlV2l0aEtleXMgPSBjcmVhdGVWZXJzaW9uTWFwKHZlcnNpb25UdXBsZXMpO1xuXG4gIC8vIENoZWNrIE9wZXJhIGJlZm9yZSBDaHJvbWUgc2luY2UgT3BlcmEgMTUrIGhhcyBcIkNocm9tZVwiIGluIHRoZSBzdHJpbmcuXG4gIC8vIFNlZVxuICAvLyBodHRwOi8vbXkub3BlcmEuY29tL09ESU4vYmxvZy8yMDEzLzA3LzE1L29wZXJhLXVzZXItYWdlbnQtc3RyaW5ncy1vcGVyYS0xNS1hbmQtYmV5b25kXG4gIGlmIChpc09wZXJhKCkpIHtcbiAgICAvLyBPcGVyYSAxMCBoYXMgVmVyc2lvbi8xMC4wIGJ1dCBPcGVyYS85LjgsIHNvIGxvb2sgZm9yIFwiVmVyc2lvblwiIGZpcnN0LlxuICAgIC8vIE9wZXJhIHVzZXMgJ09QUicgZm9yIG1vcmUgcmVjZW50IFVBcy5cbiAgICByZXR1cm4gbG9va1VwVmFsdWVXaXRoS2V5cyhbJ1ZlcnNpb24nLCAnT3BlcmEnXSk7XG4gIH1cblxuICAvLyBDaGVjayBFZGdlIGJlZm9yZSBDaHJvbWUgc2luY2UgaXQgaGFzIENocm9tZSBpbiB0aGUgc3RyaW5nLlxuICBpZiAoaXNFZGdlKCkpIHtcbiAgICByZXR1cm4gbG9va1VwVmFsdWVXaXRoS2V5cyhbJ0VkZ2UnXSk7XG4gIH1cblxuICAvLyBDaGVjayBDaHJvbWl1bSBFZGdlIGJlZm9yZSBDaHJvbWUgc2luY2UgaXQgaGFzIENocm9tZSBpbiB0aGUgc3RyaW5nLlxuICBpZiAoaXNFZGdlQ2hyb21pdW0oKSkge1xuICAgIHJldHVybiBsb29rVXBWYWx1ZVdpdGhLZXlzKFsnRWRnJ10pO1xuICB9XG5cbiAgLy8gQ2hlY2sgU2lsayBiZWZvcmUgQ2hyb21lIHNpbmNlIGl0IG1heSBoYXZlIENocm9tZSBpbiBpdHMgc3RyaW5nIGFuZCBiZVxuICAvLyB0cmVhdGVkIGFzIENocm9tZS5cbiAgaWYgKGlzU2lsaygpKSB7XG4gICAgcmV0dXJuIGxvb2tVcFZhbHVlV2l0aEtleXMoWydTaWxrJ10pO1xuICB9XG5cbiAgaWYgKGlzQ2hyb21lKCkpIHtcbiAgICByZXR1cm4gbG9va1VwVmFsdWVXaXRoS2V5cyhbJ0Nocm9tZScsICdDcmlPUycsICdIZWFkbGVzc0Nocm9tZSddKTtcbiAgfVxuXG4gIC8vIFVzdWFsbHkgcHJvZHVjdHMgYnJvd3NlciB2ZXJzaW9ucyBhcmUgaW4gdGhlIHRoaXJkIHR1cGxlIGFmdGVyIFwiTW96aWxsYVwiXG4gIC8vIGFuZCB0aGUgZW5naW5lLlxuICBjb25zdCB0dXBsZSA9IHZlcnNpb25UdXBsZXNbMl07XG4gIHJldHVybiB0dXBsZSAmJiB0dXBsZVsxXSB8fCAnJztcbn1cbmV4cG9ydHMuZ2V0VmVyc2lvbiA9IGdldFZlcnNpb247XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIncyB2ZXJzaW9uIGlzIGF0IGxlYXN0IGFzIGhpZ2ggYXMgdGhlXG4gKiBnaXZlbiBvbmUuXG4gKlxuICogTm90ZSB0aGF0IGZvciBicm93c2VycyB3aXRoIG11bHRpcGxlIGJyYW5kcywgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIGEgcHJpbWFyeVxuICogYnJhbmQgYW5kIGNoZWNrcyB0aGUgdmVyc2lvbiBmb3IgdGhhdCBicmFuZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIHRoaXMgZnVuY3Rpb24gaXMgbm90IHVzZXJBZ2VudERhdGEtYXdhcmUgYW5kIHdpbGwgcmV0dXJuXG4gKiBpbmNvcnJlY3QgdmFsdWVzIHdoZW4gdGhlIFVzZXIgQWdlbnQgc3RyaW5nIGlzIGZyb3plbi4gVGhlIGN1cnJlbnQgc3RhdHVzIG9mXG4gKiBVc2VyIEFnZW50IHN0cmluZyBmcmVlemluZyBpcyBhdmFpbGFibGUgaGVyZTpcbiAqIGh0dHBzOi8vd3d3LmNocm9tZXN0YXR1cy5jb20vZmVhdHVyZS81NzA0NTUzNzQ1ODc0OTQ0XG4gKlxuICogVG8gbWl0aWdhdGUgYm90aCBvZiB0aGVzZSBwb3RlbnRpYWwgaXNzdWVzLCB1c2UgaXNBdExlYXN0KCkvaXNBdE1vc3QoKSBvclxuICogZnVsbFZlcnNpb25PZigpIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uIFRoZSB2ZXJzaW9uIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYnJvd3NlciB2ZXJzaW9uIGlzIGhpZ2hlciBvciB0aGUgc2FtZSBhcyB0aGVcbiAqICAgICBnaXZlbiB2ZXJzaW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIGlzQXRMZWFzdCgpL2lzQXRNb3N0KCkgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gaXNWZXJzaW9uT3JIaWdoZXIodmVyc2lvbikge1xuICByZXR1cm4gY29tcGFyZVZlcnNpb25zKGdldFZlcnNpb24oKSwgdmVyc2lvbikgPj0gMDtcbn1cbmV4cG9ydHMuaXNWZXJzaW9uT3JIaWdoZXIgPSBpc1ZlcnNpb25PckhpZ2hlcjtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgSUUgdmVyc2lvbi4gTW9yZSBpbmZvcm1hdGlvbjpcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9iZzE4MjYyNSh2PXZzLjg1KS5hc3B4I3VhU3RyaW5nXG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaGg4NjkzMDEodj12cy44NSkuYXNweFxuICogaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDEwLzAzLzIzL2ludHJvZHVjaW5nLWllOS1zLXVzZXItYWdlbnQtc3RyaW5nLmFzcHhcbiAqIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llL2FyY2hpdmUvMjAwOS8wMS8wOS90aGUtaW50ZXJuZXQtZXhwbG9yZXItOC11c2VyLWFnZW50LXN0cmluZy11cGRhdGVkLWVkaXRpb24uYXNweFxuICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCB0aGUgVXNlci1BZ2VudC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0SUVWZXJzaW9uKHVzZXJBZ2VudCkge1xuICAvLyBJRTExIG1heSBpZGVudGlmeSBpdHNlbGYgYXMgTVNJRSA5LjAgb3IgTVNJRSAxMC4wIGR1ZSB0byBhbiBJRSAxMSB1cGdyYWRlXG4gIC8vIGJ1Zy4gRXhhbXBsZSBVQTpcbiAgLy8gTW96aWxsYS81LjAgKE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKVxuICAvLyBsaWtlIEdlY2tvLlxuICAvLyBTZWUgaHR0cDovL3d3dy53aGF0aXNteWJyb3dzZXIuY29tL2RldmVsb3BlcnMvdW5rbm93bi11c2VyLWFnZW50LWZyYWdtZW50cy5cbiAgY29uc3QgcnYgPSAvcnY6ICooW1xcZFxcLl0qKS8uZXhlYyh1c2VyQWdlbnQpO1xuICBpZiAocnYgJiYgcnZbMV0pIHtcbiAgICByZXR1cm4gcnZbMV07XG4gIH1cblxuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBjb25zdCBtc2llID0gL01TSUUgKyhbXFxkXFwuXSspLy5leGVjKHVzZXJBZ2VudCk7XG4gIGlmIChtc2llICYmIG1zaWVbMV0pIHtcbiAgICAvLyBJRSBpbiBjb21wYXRpYmlsaXR5IG1vZGUgdXN1YWxseSBpZGVudGlmaWVzIGl0c2VsZiBhcyBNU0lFIDcuMDsgaW4gdGhpc1xuICAgIC8vIGNhc2UsIHVzZSB0aGUgVHJpZGVudCB2ZXJzaW9uIHRvIGRldGVybWluZSB0aGUgdmVyc2lvbiBvZiBJRS4gRm9yIG1vcmVcbiAgICAvLyBkZXRhaWxzLCBzZWUgdGhlIGxpbmtzIGFib3ZlLlxuICAgIGNvbnN0IHRyaWRlbnRWZXJzaW9uID0gL1RyaWRlbnRcXC8oXFxkLlxcZCkvLmV4ZWModXNlckFnZW50KTtcbiAgICBpZiAobXNpZVsxXSA9PSAnNy4wJykge1xuICAgICAgaWYgKHRyaWRlbnRWZXJzaW9uICYmIHRyaWRlbnRWZXJzaW9uWzFdKSB7XG4gICAgICAgIHN3aXRjaCAodHJpZGVudFZlcnNpb25bMV0pIHtcbiAgICAgICAgICBjYXNlICc0LjAnOlxuICAgICAgICAgICAgdmVyc2lvbiA9ICc4LjAnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnNS4wJzpcbiAgICAgICAgICAgIHZlcnNpb24gPSAnOS4wJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJzYuMCc6XG4gICAgICAgICAgICB2ZXJzaW9uID0gJzEwLjAnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnNy4wJzpcbiAgICAgICAgICAgIHZlcnNpb24gPSAnMTEuMCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVyc2lvbiA9ICc3LjAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJzaW9uID0gbXNpZVsxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlcnNpb247XG59XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBuYXZpZ2F0b3IudXNlckFnZW50LXN1cHBsaWVkIGZ1bGwgdmVyc2lvblxuICogbnVtYmVyIG9mIHRoZSBjdXJyZW50IGJyb3dzZXIgb3IgYW4gZW1wdHkgc3RyaW5nLCBiYXNlZCBvbiB3aGV0aGVyIHRoZVxuICogY3VycmVudCBicm93c2VyIGlzIHRoZSBvbmUgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGJyb3dzZXIgVGhlIGJyYW5kIHdob3NlIHZlcnNpb24gc2hvdWxkIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRGdWxsVmVyc2lvbkZyb21Vc2VyQWdlbnRTdHJpbmcoYnJvd3Nlcikge1xuICBjb25zdCB1c2VyQWdlbnRTdHJpbmcgPSB1dGlsLmdldFVzZXJBZ2VudCgpO1xuICAvLyBTcGVjaWFsIGNhc2UgSUUgc2luY2UgSUUncyB2ZXJzaW9uIGlzIGluc2lkZSB0aGUgcGFyZW50aGVzaXMgYW5kXG4gIC8vIHdpdGhvdXQgdGhlICcvJy5cbiAgaWYgKGJyb3dzZXIgPT09IEJyYW5kLklFKSB7XG4gICAgcmV0dXJuIGlzSUUoKSA/IGdldElFVmVyc2lvbih1c2VyQWdlbnRTdHJpbmcpIDogJyc7XG4gIH1cblxuICBjb25zdCB2ZXJzaW9uVHVwbGVzID0gdXRpbC5leHRyYWN0VmVyc2lvblR1cGxlcyh1c2VyQWdlbnRTdHJpbmcpO1xuICBjb25zdCBsb29rVXBWYWx1ZVdpdGhLZXlzID0gY3JlYXRlVmVyc2lvbk1hcCh2ZXJzaW9uVHVwbGVzKTtcbiAgc3dpdGNoIChicm93c2VyKSB7XG4gICAgY2FzZSBCcmFuZC5PUEVSQTpcbiAgICAgIC8vIE9wZXJhIDEwIGhhcyBWZXJzaW9uLzEwLjAgYnV0IE9wZXJhLzkuOCwgc28gbG9vayBmb3IgXCJWZXJzaW9uXCJcbiAgICAgIC8vIGZpcnN0LiBPcGVyYSB1c2VzICdPUFInIGZvciBtb3JlIHJlY2VudCBVQXMuXG4gICAgICBpZiAoaXNPcGVyYSgpKSB7XG4gICAgICAgIHJldHVybiBsb29rVXBWYWx1ZVdpdGhLZXlzKFsnVmVyc2lvbicsICdPcGVyYSddKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPcGVyYUNocm9taXVtKCkpIHtcbiAgICAgICAgcmV0dXJuIGxvb2tVcFZhbHVlV2l0aEtleXMoWydPUFInXSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJyYW5kLkVER0U6XG4gICAgICBpZiAoaXNFZGdlKCkpIHtcbiAgICAgICAgcmV0dXJuIGxvb2tVcFZhbHVlV2l0aEtleXMoWydFZGdlJ10pO1xuICAgICAgfSBlbHNlIGlmIChpc0VkZ2VDaHJvbWl1bSgpKSB7XG4gICAgICAgIHJldHVybiBsb29rVXBWYWx1ZVdpdGhLZXlzKFsnRWRnJ10pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCcmFuZC5DSFJPTUlVTTpcbiAgICAgIGlmIChpc0Nocm9tZSgpKSB7XG4gICAgICAgIHJldHVybiBsb29rVXBWYWx1ZVdpdGhLZXlzKFsnQ2hyb21lJywgJ0NyaU9TJywgJ0hlYWRsZXNzQ2hyb21lJ10pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBGb3IgdGhlIGZvbGxvd2luZyBicm93c2VycywgdGhlIGJyb3dzZXIgdmVyc2lvbiBpcyBpbiB0aGUgdGhpcmQgdHVwbGUgYWZ0ZXJcbiAgLy8gXCJNb3ppbGxhXCIgYW5kIHRoZSBlbmdpbmUuXG4gIGlmICgoYnJvd3NlciA9PT0gQnJhbmQuRklSRUZPWCAmJiBpc0ZpcmVmb3goKSkgfHxcbiAgICAgIChicm93c2VyID09PSBCcmFuZC5TQUZBUkkgJiYgaXNTYWZhcmkoKSkgfHxcbiAgICAgIChicm93c2VyID09PSBCcmFuZC5BTkRST0lEX0JST1dTRVIgJiYgaXNBbmRyb2lkQnJvd3NlcigpKSB8fFxuICAgICAgKGJyb3dzZXIgPT09IEJyYW5kLlNJTEsgJiYgaXNTaWxrKCkpKSB7XG4gICAgY29uc3QgdHVwbGUgPSB2ZXJzaW9uVHVwbGVzWzJdO1xuICAgIHJldHVybiB0dXBsZSAmJiB0dXBsZVsxXSB8fCAnJztcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYWpvciB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBicm93c2VyIGJyYW5kLCBvciBOYU4gaWYgdGhlIGN1cnJlbnRcbiAqIGJyb3dzZXIgaXMgbm90IHRoZSBnaXZlbiBicmFuZC5cbiAqIE5vdGUgdGhhdCB0aGUgbWFqb3IgdmVyc2lvbiBudW1iZXIgbWF5IGJlIGRpZmZlcmVudCBkZXBlbmRpbmcgb24gd2hpY2hcbiAqIGJyb3dzZXIgaXMgc3BlY2lmaWVkLiBUaGUgcmV0dXJuZWQgdmFsdWUgY2FuIGJlIHVzZWQgdG8gbWFrZSBicm93c2VyIHZlcnNpb25cbiAqIGNvbXBhcmlzb25zIHVzaW5nIGNvbXBhcmlzb24gb3BlcmF0b3JzLlxuICogQGRlcHJlY2F0ZWQgVXNlIGlzQXRMZWFzdCBvciBpc0F0TW9zdCBpbnN0ZWFkLlxuICogQHBhcmFtIHshQnJhbmR9IGJyb3dzZXIgVGhlIGJyYW5kIHdob3NlIHZlcnNpb24gc2hvdWxkIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWFqb3IgdmVyc2lvbiBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiBicm93c2VyIHVuZGVyIHRoZSBnaXZlbiBicmFuZCwgb3IgTmFOIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgZG9lc24ndCBtYXRjaFxuICogdGhlIGdpdmVuIGJyYW5kLlxuICovXG5mdW5jdGlvbiB2ZXJzaW9uT2YoYnJvd3Nlcikge1xuICBsZXQgdmVyc2lvblBhcnRzO1xuICAvLyBTaWxrIGN1cnJlbnRseSBkb2VzIG5vdCBpZGVudGlmeSBpdHNlbGYgaW4gaXRzIHVzZXJBZ2VudERhdGEuYnJhbmRzIGFycmF5LFxuICAvLyBzbyBpZiBjaGVja2luZyBpdHMgdmVyc2lvbiwgYWx3YXlzIGZhbGwgYmFjayB0byB0aGUgdXNlciBhZ2VudCBzdHJpbmcuXG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSAmJiBicm93c2VyICE9PSBCcmFuZC5TSUxLKSB7XG4gICAgY29uc3QgZGF0YSA9IHV0aWwuZ2V0VXNlckFnZW50RGF0YSgpO1xuICAgIGNvbnN0IG1hdGNoaW5nQnJhbmQgPSBkYXRhLmJyYW5kcy5maW5kKCh7YnJhbmR9KSA9PiBicmFuZCA9PT0gYnJvd3Nlcik7XG4gICAgaWYgKCFtYXRjaGluZ0JyYW5kIHx8ICFtYXRjaGluZ0JyYW5kLnZlcnNpb24pIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZlcnNpb25QYXJ0cyA9IG1hdGNoaW5nQnJhbmQudmVyc2lvbi5zcGxpdCgnLicpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGZ1bGxWZXJzaW9uID0gZ2V0RnVsbFZlcnNpb25Gcm9tVXNlckFnZW50U3RyaW5nKGJyb3dzZXIpO1xuICAgIGlmIChmdWxsVmVyc2lvbiA9PT0gJycpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZlcnNpb25QYXJ0cyA9IGZ1bGxWZXJzaW9uLnNwbGl0KCcuJyk7XG4gIH1cbiAgaWYgKHZlcnNpb25QYXJ0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGNvbnN0IG1ham9yVmVyc2lvbiA9IHZlcnNpb25QYXJ0c1swXTtcbiAgcmV0dXJuIE51bWJlcihtYWpvclZlcnNpb24pOyAgLy8gUmV0dXJucyBOYU4gaWYgaXQgaXMgbm90IHBhcnNlYWJsZS5cbn1cbmV4cG9ydHMudmVyc2lvbk9mID0gdmVyc2lvbk9mO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBicm93c2VyIG1hdGNoZXMgdGhlIGdpdmVuIGJyYW5kIGFuZCBpcyBhdCBsZWFzdFxuICogdGhlIGdpdmVuIG1ham9yIHZlcnNpb24uIFRoZSBtYWpvciB2ZXJzaW9uIG11c3QgYmUgYSB3aG9sZSBudW1iZXIgKGkuZS5cbiAqIGRlY2ltYWxzIHNob3VsZCBub3QgYmUgdXNlZCB0byByZXByZXNlbnQgYSBtaW5vciB2ZXJzaW9uKS5cbiAqIEBwYXJhbSB7IUJyYW5kfSBicmFuZCBUaGUgYnJhbmQgd2hvc2UgdmVyc2lvbiBzaG91bGQgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gbWFqb3JWZXJzaW9uIFRoZSBtYWpvciB2ZXJzaW9uIG51bWJlciB0byBjb21wYXJlIGFnYWluc3QuXG4gKiAgICAgVGhpcyBtdXN0IGJlIGEgd2hvbGUgbnVtYmVyLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY3VycmVudCBicm93c2VyIGJvdGggbWF0Y2hlcyB0aGUgZ2l2ZW4gYnJhbmRcbiAqICAgICBhbmQgaXMgYXQgbGVhc3QgdGhlIGdpdmVuIHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIGlzQXRMZWFzdChicmFuZCwgbWFqb3JWZXJzaW9uKSB7XG4gIGdvb2dBc3NlcnRzLmFzc2VydChcbiAgICAgIE1hdGguZmxvb3IobWFqb3JWZXJzaW9uKSA9PT0gbWFqb3JWZXJzaW9uLFxuICAgICAgJ01ham9yIHZlcnNpb24gbXVzdCBiZSBhbiBpbnRlZ2VyJyk7XG4gIHJldHVybiB2ZXJzaW9uT2YoYnJhbmQpID49IG1ham9yVmVyc2lvbjtcbn1cbmV4cG9ydHMuaXNBdExlYXN0ID0gaXNBdExlYXN0O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBicm93c2VyIG1hdGNoZXMgdGhlIGdpdmVuIGJyYW5kIGFuZCBpcyBhdCBtb3N0XG4gKiB0aGUgZ2l2ZW4gdmVyc2lvbi4gVGhlIG1ham9yIHZlcnNpb24gbXVzdCBiZSBhIHdob2xlIG51bWJlciAoaS5lLiBkZWNpbWFsc1xuICogc2hvdWxkIG5vdCBiZSB1c2VkIHRvIHJlcHJlc2VudCBhIG1pbm9yIHZlcnNpb24pLlxuICogQHBhcmFtIHshQnJhbmR9IGJyYW5kIFRoZSBicmFuZCB3aG9zZSB2ZXJzaW9uIHNob3VsZCBiZSByZXR1cm5lZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvclZlcnNpb24gVGhlIG1ham9yIHZlcnNpb24gbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAqICAgICBUaGlzIG11c3QgYmUgYSB3aG9sZSBudW1iZXIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgYm90aCBtYXRjaGVzIHRoZSBnaXZlbiBicmFuZFxuICogICAgIGFuZCBpcyBhdCBtb3N0IHRoZSBnaXZlbiB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBpc0F0TW9zdChicmFuZCwgbWFqb3JWZXJzaW9uKSB7XG4gIGdvb2dBc3NlcnRzLmFzc2VydChcbiAgICAgIE1hdGguZmxvb3IobWFqb3JWZXJzaW9uKSA9PT0gbWFqb3JWZXJzaW9uLFxuICAgICAgJ01ham9yIHZlcnNpb24gbXVzdCBiZSBhbiBpbnRlZ2VyJyk7XG4gIHJldHVybiB2ZXJzaW9uT2YoYnJhbmQpIDw9IG1ham9yVmVyc2lvbjtcbn1cbmV4cG9ydHMuaXNBdE1vc3QgPSBpc0F0TW9zdDtcblxuLyoqXG4gKiBMb2FkcyB0aGUgaGlnaC1lbnRyb3B5IGJyb3dzZXIgYnJhbmQvdmVyc2lvbiBkYXRhIGFuZCB3cmFwcyB0aGUgY29ycmVjdFxuICogdmVyc2lvbiBzdHJpbmcgaW4gYSBWZXJzaW9uIG9iamVjdC5cbiAqIEBpbXBsZW1lbnRzIHtBc3luY1ZhbHVlPCFWZXJzaW9uPn1cbiAqL1xuY2xhc3MgSGlnaEVudHJvcHlCcmFuZFZlcnNpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJyYW5kIFRoZSBicmFuZCB3aG9zZSB2ZXJzaW9uIGlzIHJldHJpZXZlZCBpbiB0aGlzXG4gICAqICAgICBjb250YWluZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihicmFuZCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdCB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5icmFuZF8gPSBicmFuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshVmVyc2lvbnx1bmRlZmluZWR9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0SWZMb2FkZWQoKSB7XG4gICAgY29uc3QgbG9hZGVkVmVyc2lvbkxpc3QgPSBmdWxsVmVyc2lvbkxpc3QuZ2V0SWZMb2FkZWQoKTtcbiAgICBpZiAobG9hZGVkVmVyc2lvbkxpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbWF0Y2hpbmdCcmFuZCA9XG4gICAgICAgICAgbG9hZGVkVmVyc2lvbkxpc3QuZmluZCgoe2JyYW5kfSkgPT4gdGhpcy5icmFuZF8gPT09IGJyYW5kKTtcbiAgICAgIGdvb2dBc3NlcnRzLmFzc2VydEV4aXN0cyhtYXRjaGluZ0JyYW5kKTtcbiAgICAgIHJldHVybiBuZXcgVmVyc2lvbihtYXRjaGluZ0JyYW5kLnZlcnNpb24pO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IVByb21pc2U8IVZlcnNpb24+fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc3QgbG9hZGVkVmVyc2lvbkxpc3QgPSBhd2FpdCBmdWxsVmVyc2lvbkxpc3QubG9hZCgpO1xuICAgIGNvbnN0IG1hdGNoaW5nQnJhbmQgPVxuICAgICAgICBsb2FkZWRWZXJzaW9uTGlzdC5maW5kKCh7YnJhbmR9KSA9PiB0aGlzLmJyYW5kXyA9PT0gYnJhbmQpO1xuICAgIGdvb2dBc3NlcnRzLmFzc2VydEV4aXN0cyhtYXRjaGluZ0JyYW5kKTtcbiAgICByZXR1cm4gbmV3IFZlcnNpb24obWF0Y2hpbmdCcmFuZC52ZXJzaW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIFdyYXBzIGEgdmVyc2lvbiBzdHJpbmcgaW4gYSBWZXJzaW9uIG9iamVjdC5cbiAqIEBpbXBsZW1lbnRzIHtBc3luY1ZhbHVlPCFWZXJzaW9uPn1cbiAqL1xuY2xhc3MgVXNlckFnZW50U3RyaW5nRmFsbGJhY2tCcmFuZFZlcnNpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25TdHJpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZlcnNpb25TdHJpbmcpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3QgeyFWZXJzaW9ufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy52ZXJzaW9uXyA9IG5ldyBWZXJzaW9uKHZlcnNpb25TdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFWZXJzaW9ufHVuZGVmaW5lZH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRJZkxvYWRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhVmVyc2lvbj59XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXztcbiAgfVxufVxuXG4vKipcbiAqIFJlcXVlc3RzIGFsbCBmdWxsIGJyb3dzZXIgdmVyc2lvbnMgdG8gYmUgY2FjaGVkLiAgV2hlbiB0aGUgcmV0dXJuZWQgcHJvbWlzZVxuICogcmVzb2x2ZXMsIHN1YnNlcXVlbnQgY2FsbHMgdG8gYGZ1bGxWZXJzaW9uT2YoLi4uKS5nZXRJZkxvYWRlZCgpYCB3aWxsIHJldHVyblxuICogYSB2YWx1ZS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXZvaWRlZCBpbiBmYXZvciBvZiBkaXJlY3RseSBhd2FpdGluZ1xuICogYGZ1bGxWZXJzaW9uT2YoLi4uKS5sb2FkKClgIHdoZXJlIGl0IGlzIHVzZWQuXG4gKlxuICogQHJldHVybiB7IVByb21pc2U8dm9pZD59XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRGdWxsVmVyc2lvbnMoKSB7XG4gIGlmICh1c2VVc2VyQWdlbnREYXRhQnJhbmQoKSAmJiBoYXNGdWxsVmVyc2lvbkxpc3QoKSkge1xuICAgIGF3YWl0IGZ1bGxWZXJzaW9uTGlzdC5sb2FkKCk7XG4gIH1cbn1cbmV4cG9ydHMubG9hZEZ1bGxWZXJzaW9ucyA9IGxvYWRGdWxsVmVyc2lvbnM7XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgdmVyc2lvbiBzdHJpbmcgb2YgdGhlXG4gKiBjdXJyZW50IGJyb3dzZXIgLS0gb3IgdW5kZWZpbmVkLCBiYXNlZCBvbiB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgbWF0Y2hlc1xuICogdGhlIHJlcXVlc3RlZCBicm93c2VyIGJyYW5kLiBOb3RlIHRoYXQgdGhlIGZ1bGwgdmVyc2lvbiBzdHJpbmcgaXMgYVxuICogaGlnaC1lbnRyb3B5IHZhbHVlLCBhbmQgbXVzdCBiZSBhc3luY2hyb25vdXNseSBsb2FkZWQgYmVmb3JlIGl0IGNhbiBiZVxuICogYWNjZXNzZWQgc3luY2hyb25vdXNseS5cbiAqIEBwYXJhbSB7IUJyYW5kfSBicm93c2VyIFRoZSBicmFuZCB3aG9zZSB2ZXJzaW9uIHNob3VsZCBiZSByZXR1cm5lZC5cbiAqIEByZXR1cm4geyFBc3luY1ZhbHVlPCFWZXJzaW9uPnx1bmRlZmluZWR9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkXG4gKiAgICAgdG8gZ2V0IG9yIGxvYWQgdGhlIGZ1bGwgdmVyc2lvbiBzdHJpbmcgYXMgYSBoaWdoLWVudHJvcHkgdmFsdWUsIG9yXG4gKiB1bmRlZmluZWQgaWYgdGhlIGN1cnJlbnQgYnJvd3NlciBkb2Vzbid0IG1hdGNoIHRoZSBnaXZlbiBicmFuZC5cbiAqL1xuZnVuY3Rpb24gZnVsbFZlcnNpb25PZihicm93c2VyKSB7XG4gIC8vIFNpbGsgY3VycmVudGx5IGRvZXMgbm90IGlkZW50aWZ5IGl0c2VsZiBpbiBpdHMgdXNlckFnZW50RGF0YS5icmFuZHMgYXJyYXksXG4gIC8vIHNvIGlmIGNoZWNraW5nIGl0cyB2ZXJzaW9uLCBhbHdheXMgZmFsbCBiYWNrIHRvIHRoZSB1c2VyIGFnZW50IHN0cmluZy5cbiAgaWYgKHVzZVVzZXJBZ2VudERhdGFCcmFuZCgpICYmIGhhc0Z1bGxWZXJzaW9uTGlzdCgpKSB7XG4gICAgY29uc3QgZGF0YSA9IHV0aWwuZ2V0VXNlckFnZW50RGF0YSgpO1xuICAgIC8vIE9wZXJhdGUgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUgbG93LWVudHJvcHkgYW5kIGhpZ2gtZW50cm9weSBsaXN0c1xuICAgIC8vIG9mIGJyYW5kL3ZlcnNpb24gcGFpcnMgY29udGFpbiBhbiBpZGVudGljYWwgc2V0IG9mIGJyYW5kcy4gVGhlcmVmb3JlLCBpZlxuICAgIC8vIHRoZSBsb3ctZW50cm9weSBsaXN0IGRvZXNuJ3QgY29udGFpbiB0aGUgZ2l2ZW4gYnJhbmQsIHJldHVybiB1bmRlZmluZWQuXG4gICAgaWYgKCFkYXRhLmJyYW5kcy5maW5kKCh7YnJhbmR9KSA9PiBicmFuZCA9PT0gYnJvd3NlcikpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSGlnaEVudHJvcHlCcmFuZFZlcnNpb24oYnJvd3Nlcik7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZnVsbFZlcnNpb25Gcm9tVXNlckFnZW50U3RyaW5nID1cbiAgICAgICAgZ2V0RnVsbFZlcnNpb25Gcm9tVXNlckFnZW50U3RyaW5nKGJyb3dzZXIpO1xuICAgIGlmIChmdWxsVmVyc2lvbkZyb21Vc2VyQWdlbnRTdHJpbmcgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVzZXJBZ2VudFN0cmluZ0ZhbGxiYWNrQnJhbmRWZXJzaW9uKFxuICAgICAgICBmdWxsVmVyc2lvbkZyb21Vc2VyQWdlbnRTdHJpbmcpO1xuICB9XG59XG5leHBvcnRzLmZ1bGxWZXJzaW9uT2YgPSBmdWxsVmVyc2lvbk9mO1xuXG4vKipcbiAqIFJldHVybnMgYSB2ZXJzaW9uIHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBvciB1bmRlZmluZWQsIGJhc2VkIG9uXG4gKiB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgdGhlIG9uZSBzcGVjaWZpZWQuXG4gKiBUaGlzIHZhbHVlIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIGxvZ2dpbmcvZGVidWdnaW5nIHB1cnBvc2VzLiBEbyBub3QgdXNlIGl0XG4gKiB0byBicmFuY2ggY29kZSBwYXRocy4gRm9yIGNvbXBhcmluZyB2ZXJzaW9ucywgdXNlIGlzQXRMZWFzdCgpL2lzQXRNb3N0KCkgb3JcbiAqIGZ1bGxWZXJzaW9uT2YoKSBpbnN0ZWFkLlxuICogQHBhcmFtIHshQnJhbmR9IGJyb3dzZXIgVGhlIGJyYW5kIHdob3NlIHZlcnNpb24gc2hvdWxkIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmVyc2lvbiBhcyBhIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZ2V0VmVyc2lvblN0cmluZ0ZvckxvZ2dpbmcoYnJvd3Nlcikge1xuICBpZiAodXNlVXNlckFnZW50RGF0YUJyYW5kKCkpIHtcbiAgICBjb25zdCBmdWxsVmVyc2lvbk9iaiA9IGZ1bGxWZXJzaW9uT2YoYnJvd3Nlcik7XG4gICAgaWYgKGZ1bGxWZXJzaW9uT2JqKSB7XG4gICAgICBjb25zdCBmdWxsVmVyc2lvbiA9IGZ1bGxWZXJzaW9uT2JqLmdldElmTG9hZGVkKCk7XG4gICAgICBpZiAoZnVsbFZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bGxWZXJzaW9uLnRvVmVyc2lvblN0cmluZ0ZvckxvZ2dpbmcoKTtcbiAgICAgIH1cbiAgICAgIC8vIE5vIGZ1bGwgdmVyc2lvbiwgcmV0dXJuIHRoZSBtYWpvciB2ZXJzaW9uIGluc3RlYWQuXG4gICAgICBjb25zdCBkYXRhID0gdXRpbC5nZXRVc2VyQWdlbnREYXRhKCk7XG4gICAgICBjb25zdCBtYXRjaGluZ0JyYW5kID0gZGF0YS5icmFuZHMuZmluZCgoe2JyYW5kfSkgPT4gYnJhbmQgPT09IGJyb3dzZXIpO1xuICAgICAgLy8gQ2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgbWF0Y2hpbmdCcmFuZCBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2VcbiAgICAgIC8vIHRoZSBleGlzdGVuY2Ugb2YgZnVsbFZlcnNpb25PYmogaW1wbGllcyB0aGF0IHRoZXJlIGlzIGFscmVhZHkgYVxuICAgICAgLy8gbWF0Y2hpbmcgYnJhbmQuXG4gICAgICBnb29nQXNzZXJ0cy5hc3NlcnRFeGlzdHMobWF0Y2hpbmdCcmFuZCk7XG4gICAgICByZXR1cm4gbWF0Y2hpbmdCcmFuZC52ZXJzaW9uO1xuICAgIH1cbiAgICAvLyBJZiBmdWxsVmVyc2lvbk9iaiBpcyB1bmRlZmluZWQsIHRoaXMgZG9lc24ndCBtZWFuIHRoYXQgdGhlIGZ1bGwgdmVyc2lvblxuICAgIC8vIGlzIHVuYXZhaWxhYmxlLCBidXQgcmF0aGVyIHRoYXQgdGhlIGN1cnJlbnQgYnJvd3NlciBkb2Vzbid0IG1hdGNoIHRoZVxuICAgIC8vIGlucHV0IGBicm93c2VyYCBhcmd1bWVudC5cbiAgICByZXR1cm4gJyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEZ1bGxWZXJzaW9uRnJvbVVzZXJBZ2VudFN0cmluZyhicm93c2VyKTtcbiAgfVxufVxuZXhwb3J0cy5nZXRWZXJzaW9uU3RyaW5nRm9yTG9nZ2luZyA9IGdldFZlcnNpb25TdHJpbmdGb3JMb2dnaW5nO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENsb3N1cmUgdXNlciBhZ2VudCBkZXRlY3Rpb24uXG4gKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVXNlcl9hZ2VudFxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gYnJvd3NlciBicmFuZCwgcGxhdGZvcm0sIG9yIGRldmljZSBzZWUgdGhlIG90aGVyXG4gKiBzdWItbmFtZXNwYWNlcyBpbiBnb29nLmxhYnMudXNlckFnZW50IChicm93c2VyLCBwbGF0Zm9ybSwgYW5kIGRldmljZSkuXG4gKi9cblxuZ29vZy5tb2R1bGUoJ2dvb2cubGFicy51c2VyQWdlbnQuZW5naW5lJyk7XG5nb29nLm1vZHVsZS5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlKCk7XG5cbmNvbnN0IGdvb2dBcnJheSA9IGdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuY29uc3QgZ29vZ1N0cmluZyA9IGdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuaW50ZXJuYWwnKTtcbmNvbnN0IHV0aWwgPSBnb29nLnJlcXVpcmUoJ2dvb2cubGFicy51c2VyQWdlbnQudXRpbCcpO1xuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgaXMgUHJlc3RvLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ1ByZXN0bycpO1xufVxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgaXMgVHJpZGVudC5cbiAqL1xuZnVuY3Rpb24gaXNUcmlkZW50KCkge1xuICAvLyBJRSBvbmx5IHN0YXJ0ZWQgaW5jbHVkaW5nIHRoZSBUcmlkZW50IHRva2VuIGluIElFOC5cbiAgcmV0dXJuIHV0aWwubWF0Y2hVc2VyQWdlbnQoJ1RyaWRlbnQnKSB8fCB1dGlsLm1hdGNoVXNlckFnZW50KCdNU0lFJyk7XG59XG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVuZGVyaW5nIGVuZ2luZSBpcyBFZGdlSFRNTC5cbiAqL1xuZnVuY3Rpb24gaXNFZGdlKCkge1xuICByZXR1cm4gdXRpbC5tYXRjaFVzZXJBZ2VudCgnRWRnZScpO1xufVxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgaXMgV2ViS2l0LiBUaGlzIHdpbGwgcmV0dXJuXG4gKiB0cnVlIGZvciBDaHJvbWUsIEJsaW5rLWJhc2VkIE9wZXJhICgxNSspLCBFZGdlIENocm9taXVtIGFuZCBTYWZhcmkuXG4gKi9cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICByZXR1cm4gdXRpbC5tYXRjaFVzZXJBZ2VudElnbm9yZUNhc2UoJ1dlYktpdCcpICYmICFpc0VkZ2UoKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZW5kZXJpbmcgZW5naW5lIGlzIEdlY2tvLlxuICovXG5mdW5jdGlvbiBpc0dlY2tvKCkge1xuICByZXR1cm4gdXRpbC5tYXRjaFVzZXJBZ2VudCgnR2Vja28nKSAmJiAhaXNXZWJLaXQoKSAmJiAhaXNUcmlkZW50KCkgJiZcbiAgICAgICFpc0VkZ2UoKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZW5kZXJpbmcgZW5naW5lJ3MgdmVyc2lvbiBvciBlbXB0eSBzdHJpbmcgaWYgdmVyc2lvblxuICogICAgIGNhbid0IGJlIGRldGVybWluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XG4gIGNvbnN0IHVzZXJBZ2VudFN0cmluZyA9IHV0aWwuZ2V0VXNlckFnZW50KCk7XG4gIGlmICh1c2VyQWdlbnRTdHJpbmcpIHtcbiAgICBjb25zdCB0dXBsZXMgPSB1dGlsLmV4dHJhY3RWZXJzaW9uVHVwbGVzKHVzZXJBZ2VudFN0cmluZyk7XG5cbiAgICBjb25zdCBlbmdpbmVUdXBsZSA9IGdldEVuZ2luZVR1cGxlKHR1cGxlcyk7XG4gICAgaWYgKGVuZ2luZVR1cGxlKSB7XG4gICAgICAvLyBJbiBHZWNrbywgdGhlIHZlcnNpb24gc3RyaW5nIGlzIGVpdGhlciBpbiB0aGUgYnJvd3NlciBpbmZvIG9yIHRoZVxuICAgICAgLy8gRmlyZWZveCB2ZXJzaW9uLiAgU2VlIEdlY2tvIHVzZXIgYWdlbnQgc3RyaW5nIHJlZmVyZW5jZTpcbiAgICAgIC8vIGh0dHA6Ly9nb28uZ2wvbVVMcWFcbiAgICAgIGlmIChlbmdpbmVUdXBsZVswXSA9PSAnR2Vja28nKSB7XG4gICAgICAgIHJldHVybiBnZXRWZXJzaW9uRm9yS2V5KHR1cGxlcywgJ0ZpcmVmb3gnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVuZ2luZVR1cGxlWzFdO1xuICAgIH1cblxuICAgIC8vIE1TSUUgaGFzIG9ubHkgb25lIHZlcnNpb24gaWRlbnRpZmllciwgYW5kIHRoZSBUcmlkZW50IHZlcnNpb24gaXNcbiAgICAvLyBzcGVjaWZpZWQgaW4gdGhlIHBhcmVudGhldGljYWwuIElFIEVkZ2UgaXMgY292ZXJlZCBpbiB0aGUgZW5naW5lIHR1cGxlXG4gICAgLy8gZGV0ZWN0aW9uLlxuICAgIGNvbnN0IGJyb3dzZXJUdXBsZSA9IHR1cGxlc1swXTtcbiAgICBsZXQgaW5mbztcbiAgICBpZiAoYnJvd3NlclR1cGxlICYmIChpbmZvID0gYnJvd3NlclR1cGxlWzJdKSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSAvVHJpZGVudFxcLyhbXlxccztdKykvLmV4ZWMoaW5mbyk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IUFycmF5PHN0cmluZz4+fSB0dXBsZXMgRXh0cmFjdGVkIHZlcnNpb24gdHVwbGVzLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz58dW5kZWZpbmVkfSBUaGUgZW5naW5lIHR1cGxlIG9yIHVuZGVmaW5lZCBpZiBub3RcbiAqICAgICBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW5naW5lVHVwbGUodHVwbGVzKSB7XG4gIGlmICghaXNFZGdlKCkpIHtcbiAgICByZXR1cm4gdHVwbGVzWzFdO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHVwbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdHVwbGUgPSB0dXBsZXNbaV07XG4gICAgaWYgKHR1cGxlWzBdID09ICdFZGdlJykge1xuICAgICAgcmV0dXJuIHR1cGxlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmVyc2lvbiBUaGUgdmVyc2lvbiB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmluZyBlbmdpbmUgdmVyc2lvbiBpcyBoaWdoZXIgb3IgdGhlIHNhbWVcbiAqICAgICBhcyB0aGUgZ2l2ZW4gdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gaXNWZXJzaW9uT3JIaWdoZXIodmVyc2lvbikge1xuICByZXR1cm4gZ29vZ1N0cmluZy5jb21wYXJlVmVyc2lvbnMoZ2V0VmVyc2lvbigpLCB2ZXJzaW9uKSA+PSAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFBcnJheTxzdHJpbmc+Pn0gdHVwbGVzIFZlcnNpb24gdHVwbGVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGxvb2sgZm9yLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmVyc2lvbiBzdHJpbmcgb2YgdGhlIGdpdmVuIGtleSwgaWYgcHJlc2VudC5cbiAqICAgICBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldFZlcnNpb25Gb3JLZXkodHVwbGVzLCBrZXkpIHtcbiAgLy8gVE9ETyhubmF6ZSk6IE1vdmUgdG8gdXRpbCBpZiB1c2VmdWwgZWxzZXdoZXJlLlxuXG4gIGNvbnN0IHBhaXIgPSBnb29nQXJyYXkuZmluZCh0dXBsZXMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICByZXR1cm4ga2V5ID09IHBhaXJbMF07XG4gIH0pO1xuXG4gIHJldHVybiBwYWlyICYmIHBhaXJbMV0gfHwgJyc7XG59XG5cbmV4cG9ydHMgPSB7XG4gIGdldFZlcnNpb24sXG4gIGlzRWRnZSxcbiAgaXNHZWNrbyxcbiAgaXNQcmVzdG8sXG4gIGlzVHJpZGVudCxcbiAgaXNWZXJzaW9uT3JIaWdoZXIsXG4gIGlzV2ViS2l0LFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBXcmFwcGVyIGNsYXNzIGZvciBoYW5kbGluZyBYbWxIdHRwUmVxdWVzdHMuXG4gKlxuICogT25lIG9mZiByZXF1ZXN0cyBjYW4gYmUgc2VudCB0aHJvdWdoIGdvb2cubmV0LlhocklvLnNlbmQoKSBvciBhblxuICogaW5zdGFuY2UgY2FuIGJlIGNyZWF0ZWQgdG8gc2VuZCBtdWx0aXBsZSByZXF1ZXN0cy4gIEVhY2ggcmVxdWVzdCB1c2VzIGl0c1xuICogb3duIFhtbEh0dHBSZXF1ZXN0IG9iamVjdCBhbmQgaGFuZGxlcyBjbGVhcmluZyBvZiB0aGUgZXZlbnQgY2FsbGJhY2sgdG9cbiAqIGVuc3VyZSBubyBsZWFrcy5cbiAqXG4gKiBYaHJJbyBpcyBldmVudCBiYXNlZCwgaXQgZGlzcGF0Y2hlcyBldmVudHMgb24gc3VjY2VzcywgZmFpbHVyZSwgZmluaXNoaW5nLFxuICogcmVhZHktc3RhdGUgY2hhbmdlLCBvciBwcm9ncmVzcyAoZG93bmxvYWQgYW5kIHVwbG9hZCkuXG4gKlxuICogVGhlIHJlYWR5LXN0YXRlIG9yIHRpbWVvdXQgZXZlbnQgZmlyZXMgZmlyc3QsIGZvbGxvd2VkIGJ5XG4gKiBhIGdlbmVyaWMgY29tcGxldGVkIGV2ZW50LiBUaGVuIHRoZSBhYm9ydCwgZXJyb3IsIG9yIHN1Y2Nlc3MgZXZlbnRcbiAqIGlzIGZpcmVkIGFzIGFwcHJvcHJpYXRlLiBQcm9ncmVzcyBldmVudHMgYXJlIGZpcmVkIGFzIHRoZXkgYXJlXG4gKiByZWNlaXZlZC4gTGFzdGx5LCB0aGUgcmVhZHkgZXZlbnQgd2lsbCBmaXJlIHRvIGluZGljYXRlIHRoYXQgdGhlXG4gKiBvYmplY3QgbWF5IGJlIHVzZWQgdG8gbWFrZSBhbm90aGVyIHJlcXVlc3QuXG4gKlxuICogVGhlIGVycm9yIGV2ZW50IG1heSBhbHNvIGJlIGNhbGxlZCBiZWZvcmUgY29tcGxldGVkIGFuZFxuICogcmVhZHktc3RhdGUtY2hhbmdlIGlmIHRoZSBYbWxIdHRwUmVxdWVzdC5vcGVuKCkgb3IgLnNlbmQoKSBtZXRob2RzIHRocm93LlxuICpcbiAqIFRoaXMgY2xhc3MgZG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSByZXF1ZXN0cywgcXVldWluZywgb3IgcHJpb3JpdGl6YXRpb24uXG4gKlxuICogV2hlbiBwcm9ncmVzcyBldmVudHMgYXJlIHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlciwgYW5kIHByb2dyZXNzIGlzXG4gKiBlbmFibGVkIHZpYSAuc2V0UHJvZ3Jlc3NFdmVudHNFbmFibGVkKHRydWUpLCB0aGVcbiAqIGdvb2cubmV0LkV2ZW50VHlwZS5QUk9HUkVTUyBldmVudCB3aWxsIGJlIHRoZSByZS1kaXNwYXRjaGVkIGJyb3dzZXJcbiAqIHByb2dyZXNzIGV2ZW50LiBBZGRpdGlvbmFsbHksIGEgRE9XTkxPQURfUFJPR1JFU1Mgb3IgVVBMT0FEX1BST0dSRVNTIGV2ZW50XG4gKiB3aWxsIGJlIGZpcmVkIGZvciBkb3dubG9hZCBhbmQgdXBsb2FkIHByb2dyZXNzIHJlc3BlY3RpdmVseS5cbiAqL1xuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuWGhySW8nKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuWGhySW8uUmVzcG9uc2VUeXBlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5UaW1lcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmNvbGxlY3Rpb25zLm1hcHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5qc29uLmh5YnJpZCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxvZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5FcnJvckNvZGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuRXZlbnRUeXBlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0Lkh0dHBTdGF0dXMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuWG1sSHR0cCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVyaS51dGlscycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVzZXJBZ2VudCcpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5VcmknKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZGVidWcuRXJyb3JIYW5kbGVyJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLm5ldC5YaHJMaWtlJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLm5ldC5YbWxIdHRwRmFjdG9yeScpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIEJhc2ljIGNsYXNzIGZvciBoYW5kbGluZyBYTUxIdHRwUmVxdWVzdHMuXG4gKiBAcGFyYW0ge2dvb2cubmV0LlhtbEh0dHBGYWN0b3J5PX0gb3B0X3htbEh0dHBGYWN0b3J5IEZhY3RvcnkgdG8gdXNlIHdoZW5cbiAqICAgICBjcmVhdGluZyBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9XG4gKi9cbmdvb2cubmV0LlhocklvID0gZnVuY3Rpb24ob3B0X3htbEh0dHBGYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgWGhySW8uYmFzZSh0aGlzLCAnY29uc3RydWN0b3InKTtcblxuICAvKipcbiAgICogTWFwIG9mIGRlZmF1bHQgaGVhZGVycyB0byBhZGQgdG8gZXZlcnkgcmVxdWVzdCwgdXNlOlxuICAgKiBYaHJJby5oZWFkZXJzLnNldChuYW1lLCB2YWx1ZSlcbiAgICogQHR5cGUgeyFNYXA8c3RyaW5nLHN0cmluZz59XG4gICAqL1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgTWFwKCk7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIFhtbEh0dHBGYWN0b3J5XG4gICAqIEBwcml2YXRlIHtnb29nLm5ldC5YbWxIdHRwRmFjdG9yeX1cbiAgICovXG4gIHRoaXMueG1sSHR0cEZhY3RvcnlfID0gb3B0X3htbEh0dHBGYWN0b3J5IHx8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgWE1MSHR0cFJlcXVlc3QgaXMgYWN0aXZlLiAgQSByZXF1ZXN0IGlzIGFjdGl2ZSBmcm9tIHRoZSB0aW1lIHNlbmQoKVxuICAgKiBpcyBjYWxsZWQgdW50aWwgb25SZWFkeVN0YXRlQ2hhbmdlKCkgaXMgY29tcGxldGUsIG9yIGVycm9yKCkgb3IgYWJvcnQoKVxuICAgKiBpcyBjYWxsZWQuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5hY3RpdmVfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QgdGhhdCBpcyBiZWluZyB1c2VkIGZvciB0aGUgdHJhbnNmZXIuXG4gICAqIEBwcml2YXRlIHs/Z29vZy5uZXQuWGhyTGlrZS5Pck5hdGl2ZX1cbiAgICovXG4gIHRoaXMueGhyXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25zIHRvIHVzZSB3aXRoIHRoZSBjdXJyZW50IFhNTEh0dHBSZXF1ZXN0IG9iamVjdC5cbiAgICogQHByaXZhdGUgez9PYmplY3R9XG4gICAqL1xuICB0aGlzLnhock9wdGlvbnNfID0gbnVsbDtcblxuICAvKipcbiAgICogTGFzdCBVUkwgdGhhdCB3YXMgcmVxdWVzdGVkLlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfGdvb2cuVXJpfVxuICAgKi9cbiAgdGhpcy5sYXN0VXJpXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBNZXRob2QgZm9yIHRoZSBsYXN0IHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLmxhc3RNZXRob2RfID0gJyc7XG5cbiAgLyoqXG4gICAqIExhc3QgZXJyb3IgY29kZS5cbiAgICogQHByaXZhdGUgeyFnb29nLm5ldC5FcnJvckNvZGV9XG4gICAqL1xuICB0aGlzLmxhc3RFcnJvckNvZGVfID0gZ29vZy5uZXQuRXJyb3JDb2RlLk5PX0VSUk9SO1xuXG4gIC8qKlxuICAgKiBMYXN0IGVycm9yIG1lc3NhZ2UuXG4gICAqIEBwcml2YXRlIHtFcnJvcnxzdHJpbmd9XG4gICAqL1xuICB0aGlzLmxhc3RFcnJvcl8gPSAnJztcblxuICAvKipcbiAgICogVXNlZCB0byBlbnN1cmUgdGhhdCB3ZSBkb24ndCBkaXNwYXRjaCBhbiBtdWx0aXBsZSBFUlJPUiBldmVudHMuIFRoaXMgY2FuXG4gICAqIGhhcHBlbiBpbiBJRSB3aGVuIGl0IGRvZXMgYSBzeW5jaHJvbm91cyBsb2FkIGFuZCBvbmUgZXJyb3IgaXMgaGFuZGxlZCBpblxuICAgKiB0aGUgcmVhZHkgc3RhdGUgY2hhbmdlIGFuZCBvbmUgaXMgaGFuZGxlZCBkdWUgdG8gc2VuZCgpIHRocm93aW5nIGFuXG4gICAqIGV4Y2VwdGlvbi5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmVycm9yRGlzcGF0Y2hlZF8gPSBmYWxzZTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgZmlyZSB0aGUgY29tcGxldGUgZXZlbnQgZnJvbSBpbnNpZGUgYSBzZW5kIGNhbGwuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pblNlbmRfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFVzZWQgaW4gZGV0ZXJtaW5pbmcgaWYgYSBjYWxsIHRvIHtAbGluayAjb25SZWFkeVN0YXRlQ2hhbmdlX30gaXMgZnJvbVxuICAgKiB3aXRoaW4gYSBjYWxsIHRvIHRoaXMueGhyXy5vcGVuLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaW5PcGVuXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBVc2VkIGluIGRldGVybWluaW5nIGlmIGEgY2FsbCB0byB7QGxpbmsgI29uUmVhZHlTdGF0ZUNoYW5nZV99IGlzIGZyb21cbiAgICogd2l0aGluIGEgY2FsbCB0byB0aGlzLnhocl8uYWJvcnQuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pbkFib3J0XyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIGFuIGluY29tcGxldGUgcmVxdWVzdCB3aWxsIGJlIGFib3J0ZWRcbiAgICogYW5kIGEge0BsaW5rIGdvb2cubmV0LkV2ZW50VHlwZS5USU1FT1VUfSBldmVudCByYWlzZWQ7IDAgbWVhbnMgbm8gdGltZW91dFxuICAgKiBpcyBzZXQuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRpbWVvdXRJbnRlcnZhbF8gPSAwO1xuXG4gIC8qKlxuICAgKiBUaW1lciB0byB0cmFjayByZXF1ZXN0IHRpbWVvdXQuXG4gICAqIEBwcml2YXRlIHs/bnVtYmVyfVxuICAgKi9cbiAgdGhpcy50aW1lb3V0SWRfID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIHJlcXVlc3RlZCB0eXBlIGZvciB0aGUgcmVzcG9uc2UuIFRoZSBlbXB0eSBzdHJpbmcgbWVhbnMgdXNlIHRoZSBkZWZhdWx0XG4gICAqIFhIUiBiZWhhdmlvci5cbiAgICogQHByaXZhdGUge2dvb2cubmV0LlhocklvLlJlc3BvbnNlVHlwZX1cbiAgICovXG4gIHRoaXMucmVzcG9uc2VUeXBlXyA9IFJlc3BvbnNlVHlwZS5ERUZBVUxUO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgXCJjcmVkZW50aWFsZWRcIiByZXF1ZXN0IGlzIHRvIGJlIHNlbnQgKG9uZSB0aGF0IGlzIGF3YXJlIG9mXG4gICAqIGNvb2tpZXMgYW5kIGF1dGhlbnRpY2F0aW9uKS4gVGhpcyBpcyBhcHBsaWNhYmxlIG9ubHkgZm9yIGNyb3NzLWRvbWFpblxuICAgKiByZXF1ZXN0cyBhbmQgbW9yZSByZWNlbnQgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRoaXMgcGFydCBvZiB0aGUgSFRUUCBBY2Nlc3NcbiAgICogQ29udHJvbCBzdGFuZGFyZC5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXdpdGhjcmVkZW50aWFscy1hdHRyaWJ1dGVcbiAgICpcbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLndpdGhDcmVkZW50aWFsc18gPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciBwcm9ncmVzcyBldmVudHMgYXJlIGVuYWJsZWQgZm9yIHRoaXMgcmVxdWVzdC4gVGhpcyBpc1xuICAgKiBkaXNhYmxlZCBieSBkZWZhdWx0IGJlY2F1c2Ugc2V0dGluZyBhIHByb2dyZXNzIGV2ZW50IGhhbmRsZXJcbiAgICogY2F1c2VzIHByZS1mbGlnaHQgT1BUSU9OUyByZXF1ZXN0cyB0byBiZSBzZW50IGZvciBDT1JTIHJlcXVlc3RzLFxuICAgKiBldmVuIGluIGNhc2VzIHdoZXJlIGEgcHJlLWZsaWdodCByZXF1ZXN0IHdvdWxkIG5vdCBvdGhlcndpc2UgYmVcbiAgICogc2VudC5cbiAgICpcbiAgICogQHNlZSBodHRwOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jc2VjdXJpdHktY29uc2lkZXJhdGlvbnNcbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgY2FuIGNhdXNlIHByb2JsZW1zIGZvciBGaXJlZm94IDIyIGFuZCBiZWxvdywgYXMgYW5cbiAgICogb2xkZXIgXCJMU1Byb2dyZXNzRXZlbnRcIiB3aWxsIGJlIGRpc3BhdGNoZWQgYnkgdGhlIGJyb3dzZXIuIFRoYXRcbiAgICogcHJvZ3Jlc3MgZXZlbnQgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCwgYW5kIGNhbiBsZWFkIHRvIGZhaWx1cmVzLFxuICAgKiBpbmNsdWRpbmcgdGhyb3dpbmcgZXhjZXB0aW9ucy5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg0NTYzMVxuICAgKiBAc2VlIGIvMjM0Njk3OTNcbiAgICpcbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnByb2dyZXNzRXZlbnRzRW5hYmxlZF8gPSBmYWxzZTtcblxuICAvKipcbiAgICogVHJ1ZSBpZiB3ZSBjYW4gdXNlIFhNTEh0dHBSZXF1ZXN0J3MgdGltZW91dCBkaXJlY3RseS5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnVzZVhocjJUaW1lb3V0XyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpY2F0aW9uIGZvciBUcnVzdCBUb2tlbiBvcGVyYXRpb25zIChpc3N1YW5jZSwgc2lnbmluZywgYW5kXG4gICAqIHJlZGVtcHRpb24pLlxuICAgKiBAcHJpdmF0ZSB7P1RydXN0VG9rZW5BdHRyaWJ1dGVUeXBlfVxuICAgKi9cbiAgdGhpcy50cnVzdFRva2VuXyA9IG51bGw7XG59O1xuZ29vZy5pbmhlcml0cyhnb29nLm5ldC5YaHJJbywgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQpO1xuXG5jb25zdCBYaHJJbyA9IGdvb2cubmV0LlhocklvO1xuXG4vKipcbiAqIFJlc3BvbnNlIHR5cGVzIHRoYXQgbWF5IGJlIHJlcXVlc3RlZCBmb3IgWE1MSHR0cFJlcXVlc3RzLlxuICogQGVudW0ge3N0cmluZ31cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS1yZXNwb25zZXR5cGUtYXR0cmlidXRlXG4gKi9cbmdvb2cubmV0LlhocklvLlJlc3BvbnNlVHlwZSA9IHtcbiAgREVGQVVMVDogJycsXG4gIFRFWFQ6ICd0ZXh0JyxcbiAgRE9DVU1FTlQ6ICdkb2N1bWVudCcsXG4gIC8vIE5vdCBzdXBwb3J0ZWQgYXMgb2YgQ2hyb21lIDEwLjAuNjEyLjEgZGV2XG4gIEJMT0I6ICdibG9iJyxcbiAgQVJSQVlfQlVGRkVSOiAnYXJyYXlidWZmZXInLFxufTtcblxuY29uc3QgUmVzcG9uc2VUeXBlID0gZ29vZy5uZXQuWGhySW8uUmVzcG9uc2VUeXBlO1xuXG5cbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIFhocklvIGxvZ2dlclxuICogQHByaXZhdGUgez9nb29nLmxvZy5Mb2dnZXJ9XG4gKiBAY29uc3RcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmxvZ2dlcl8gPSBnb29nLmxvZy5nZXRMb2dnZXIoJ2dvb2cubmV0LlhocklvJyk7XG5cblxuLyoqXG4gKiBUaGUgQ29udGVudC1UeXBlIEhUVFAgaGVhZGVyIG5hbWVcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LlhocklvLkNPTlRFTlRfVFlQRV9IRUFERVIgPSAnQ29udGVudC1UeXBlJztcblxuXG4vKipcbiAqIFRoZSBDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nIEhUVFAgaGVhZGVyIG5hbWVcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LlhocklvLkNPTlRFTlRfVFJBTlNGRVJfRU5DT0RJTkcgPSAnQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZyc7XG5cblxuLyoqXG4gKiBUaGUgcGF0dGVybiBtYXRjaGluZyB0aGUgJ2h0dHAnIGFuZCAnaHR0cHMnIFVSSSBzY2hlbWVzXG4gKiBAdHlwZSB7IVJlZ0V4cH1cbiAqL1xuZ29vZy5uZXQuWGhySW8uSFRUUF9TQ0hFTUVfUEFUVEVSTiA9IC9eaHR0cHM/JC9pO1xuXG5jb25zdCBIVFRQX1NDSEVNRV9QQVRURVJOID0gZ29vZy5uZXQuWGhySW8uSFRUUF9TQ0hFTUVfUEFUVEVSTjtcblxuXG4vKipcbiAqIFRoZSBtZXRob2RzIHRoYXQgdHlwaWNhbGx5IGNvbWUgYWxvbmcgd2l0aCBmb3JtIGRhdGEuICBXZSBzZXQgZGlmZmVyZW50XG4gKiBoZWFkZXJzIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBIVFRQIGFjdGlvbiBpcyBvbmUgb2YgdGhlc2UuXG4gKiBAdHlwZSB7IUFycmF5PHN0cmluZz59XG4gKi9cbmdvb2cubmV0LlhocklvLk1FVEhPRFNfV0lUSF9GT1JNX0RBVEEgPSBbJ1BPU1QnLCAnUFVUJ107XG5cblxuLyoqXG4gKiBUaGUgQ29udGVudC1UeXBlIEhUVFAgaGVhZGVyIHZhbHVlIGZvciBhIHVybC1lbmNvZGVkIGZvcm1cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LlhocklvLkZPUk1fQ09OVEVOVF9UWVBFID1cbiAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnO1xuXG5cbi8qKlxuICogVGhlIFhNTEh0dHBSZXF1ZXN0IExldmVsIHR3byB0aW1lb3V0IGRlbGF5IG1zIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXRpbWVvdXQtYXR0cmlidXRlXG4gKlxuICogQHByaXZhdGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5nb29nLm5ldC5YaHJJby5YSFIyX1RJTUVPVVRfID0gJ3RpbWVvdXQnO1xuXG5cbi8qKlxuICogVGhlIFhNTEh0dHBSZXF1ZXN0IExldmVsIHR3byBvbnRpbWVvdXQgaGFuZGxlciBwcm9wZXJ0eSBuYW1lLlxuICpcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS10aW1lb3V0LWF0dHJpYnV0ZVxuICpcbiAqIEBwcml2YXRlIHtzdHJpbmd9XG4gKiBAY29uc3RcbiAqL1xuZ29vZy5uZXQuWGhySW8uWEhSMl9PTl9USU1FT1VUXyA9ICdvbnRpbWVvdXQnO1xuXG5cbi8qKlxuICogQWxsIG5vbi1kaXNwb3NlZCBpbnN0YW5jZXMgb2YgZ29vZy5uZXQuWGhySW8gY3JlYXRlZFxuICogYnkge0BsaW5rIGdvb2cubmV0LlhocklvLnNlbmR9IGFyZSBpbiB0aGlzIEFycmF5LlxuICogQHNlZSBnb29nLm5ldC5YaHJJby5jbGVhbnVwXG4gKiBAcHJpdmF0ZSB7IUFycmF5PCFnb29nLm5ldC5YaHJJbz59XG4gKi9cbmdvb2cubmV0LlhocklvLnNlbmRJbnN0YW5jZXNfID0gW107XG5cblxuLyoqXG4gKiBTdGF0aWMgc2VuZCB0aGF0IGNyZWF0ZXMgYSBzaG9ydCBsaXZlZCBpbnN0YW5jZSBvZiBYaHJJbyB0byBzZW5kIHRoZVxuICogcmVxdWVzdC5cbiAqIEBzZWUgZ29vZy5uZXQuWGhySW8uY2xlYW51cFxuICogQHBhcmFtIHtzdHJpbmd8Z29vZy5Vcml9IHVybCBVcmkgdG8gbWFrZSByZXF1ZXN0IHRvLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpnb29nLm5ldC5YaHJJbywgPyk9fSBvcHRfY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqICAgICBmb3Igd2hlbiByZXF1ZXN0IGlzIGNvbXBsZXRlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWV0aG9kIFNlbmQgbWV0aG9kLCBkZWZhdWx0OiBHRVQuXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlld3xCbG9ifERvY3VtZW50fEZvcm1EYXRhfHN0cmluZz19XG4gKiAgICAgb3B0X2NvbnRlbnQgQm9keSBkYXRhLlxuICogQHBhcmFtIHsoP09iamVjdHw/Z29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2U8c3RyaW5nLCBzdHJpbmc+KT19XG4gKiAgICAgb3B0X2hlYWRlcnMgTWFwIG9mIGhlYWRlcnMgdG8gYWRkIHRvIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdGltZW91dEludGVydmFsIE51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggYW5cbiAqICAgICBpbmNvbXBsZXRlIHJlcXVlc3Qgd2lsbCBiZSBhYm9ydGVkOyAwIG1lYW5zIG5vIHRpbWVvdXQgaXMgc2V0LlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dpdGhDcmVkZW50aWFscyBXaGV0aGVyIHRvIHNlbmQgY3JlZGVudGlhbHMgd2l0aCB0aGVcbiAqICAgICByZXF1ZXN0LiBEZWZhdWx0IHRvIGZhbHNlLiBTZWUge0BsaW5rIGdvb2cubmV0LlhocklvI3NldFdpdGhDcmVkZW50aWFsc30uXG4gKiBAcmV0dXJuIHshZ29vZy5uZXQuWGhySW99IFRoZSBzZW50IFhocklvLlxuICovXG5nb29nLm5ldC5YaHJJby5zZW5kID0gZnVuY3Rpb24oXG4gICAgdXJsLCBvcHRfY2FsbGJhY2ssIG9wdF9tZXRob2QsIG9wdF9jb250ZW50LCBvcHRfaGVhZGVycyxcbiAgICBvcHRfdGltZW91dEludGVydmFsLCBvcHRfd2l0aENyZWRlbnRpYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgeCA9IG5ldyBnb29nLm5ldC5YaHJJbygpO1xuICBnb29nLm5ldC5YaHJJby5zZW5kSW5zdGFuY2VzXy5wdXNoKHgpO1xuICBpZiAob3B0X2NhbGxiYWNrKSB7XG4gICAgeC5saXN0ZW4oZ29vZy5uZXQuRXZlbnRUeXBlLkNPTVBMRVRFLCBvcHRfY2FsbGJhY2spO1xuICB9XG4gIHgubGlzdGVuT25jZShnb29nLm5ldC5FdmVudFR5cGUuUkVBRFksIHguY2xlYW51cFNlbmRfKTtcbiAgaWYgKG9wdF90aW1lb3V0SW50ZXJ2YWwpIHtcbiAgICB4LnNldFRpbWVvdXRJbnRlcnZhbChvcHRfdGltZW91dEludGVydmFsKTtcbiAgfVxuICBpZiAob3B0X3dpdGhDcmVkZW50aWFscykge1xuICAgIHguc2V0V2l0aENyZWRlbnRpYWxzKG9wdF93aXRoQ3JlZGVudGlhbHMpO1xuICB9XG4gIHguc2VuZCh1cmwsIG9wdF9tZXRob2QsIG9wdF9jb250ZW50LCBvcHRfaGVhZGVycyk7XG4gIHJldHVybiB4O1xufTtcblxuXG4vKipcbiAqIERpc3Bvc2VzIGFsbCBub24tZGlzcG9zZWQgaW5zdGFuY2VzIG9mIGdvb2cubmV0LlhocklvIGNyZWF0ZWQgYnlcbiAqIHtAbGluayBnb29nLm5ldC5YaHJJby5zZW5kfS5cbiAqIHtAbGluayBnb29nLm5ldC5YaHJJby5zZW5kfSBjbGVhbnMgdXAgdGhlIGdvb2cubmV0LlhocklvIGluc3RhbmNlXG4gKiBpdCBjcmVhdGVzIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzIG9yIGZhaWxzLiAgSG93ZXZlciwgaWZcbiAqIHRoZSByZXF1ZXN0IG5ldmVyIGNvbXBsZXRlcywgdGhlbiB0aGUgZ29vZy5uZXQuWGhySW8gaXMgbm90IGRpc3Bvc2VkLlxuICogVGhpcyBjYW4gb2NjdXIgaWYgdGhlIHdpbmRvdyBpcyB1bmxvYWRlZCBiZWZvcmUgdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICogV2UgY291bGQgaGF2ZSB7QGxpbmsgZ29vZy5uZXQuWGhySW8uc2VuZH0gcmV0dXJuIHRoZSBnb29nLm5ldC5YaHJJb1xuICogaXQgY3JlYXRlcyBhbmQgbWFrZSB0aGUgY2xpZW50IG9mIHtAbGluayBnb29nLm5ldC5YaHJJby5zZW5kfSBiZVxuICogcmVzcG9uc2libGUgZm9yIGRpc3Bvc2luZyBpdCBpbiB0aGlzIGNhc2UuICBIb3dldmVyLCB0aGlzIG1ha2VzIHRoaW5nc1xuICogc2lnbmlmaWNhbnRseSBtb3JlIGNvbXBsaWNhdGVkIGZvciB0aGUgY2xpZW50LCBhbmQgdGhlIHdob2xlIHBvaW50XG4gKiBvZiB7QGxpbmsgZ29vZy5uZXQuWGhySW8uc2VuZH0gaXMgdGhhdCBpdCdzIHNpbXBsZSBhbmQgZWFzeSB0byB1c2UuXG4gKiBDbGllbnRzIG9mIHtAbGluayBnb29nLm5ldC5YaHJJby5zZW5kfSBzaG91bGQgY2FsbFxuICoge0BsaW5rIGdvb2cubmV0LlhocklvLmNsZWFudXB9IHdoZW4gZG9pbmcgZmluYWxcbiAqIGNsZWFudXAgb24gd2luZG93IHVubG9hZC5cbiAqL1xuZ29vZy5uZXQuWGhySW8uY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IGluc3RhbmNlcyA9IGdvb2cubmV0LlhocklvLnNlbmRJbnN0YW5jZXNfO1xuICB3aGlsZSAoaW5zdGFuY2VzLmxlbmd0aCkge1xuICAgIGluc3RhbmNlcy5wb3AoKS5kaXNwb3NlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBJbnN0YWxscyBleGNlcHRpb24gcHJvdGVjdGlvbiBmb3IgYWxsIGVudHJ5IHBvaW50IGludHJvZHVjZWQgYnlcbiAqIGdvb2cubmV0LlhocklvIGluc3RhbmNlcyB3aGljaCBhcmUgbm90IHByb3RlY3RlZCBieVxuICoge0BsaW5rIGdvb2cuZGVidWcuRXJyb3JIYW5kbGVyI3Byb3RlY3RXaW5kb3dTZXRUaW1lb3V0fSxcbiAqIHtAbGluayBnb29nLmRlYnVnLkVycm9ySGFuZGxlciNwcm90ZWN0V2luZG93U2V0SW50ZXJ2YWx9LCBvclxuICoge0BsaW5rIGdvb2cuZXZlbnRzLnByb3RlY3RCcm93c2VyRXZlbnRFbnRyeVBvaW50fS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZGVidWcuRXJyb3JIYW5kbGVyfSBlcnJvckhhbmRsZXIgRXJyb3IgaGFuZGxlciB3aXRoIHdoaWNoIHRvXG4gKiAgICAgcHJvdGVjdCB0aGUgZW50cnkgcG9pbnQocykuXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RlY3RFbnRyeVBvaW50cyA9IGZ1bmN0aW9uKGVycm9ySGFuZGxlcikge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubmV0LlhocklvLnByb3RvdHlwZS5vblJlYWR5U3RhdGVDaGFuZ2VFbnRyeVBvaW50XyA9XG4gICAgICBlcnJvckhhbmRsZXIucHJvdGVjdEVudHJ5UG9pbnQoXG4gICAgICAgICAgZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLm9uUmVhZHlTdGF0ZUNoYW5nZUVudHJ5UG9pbnRfKTtcbn07XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBvZiB0aGUgc3BlY2lmaWVkIGdvb2cubmV0LlhocklvIGNyZWF0ZWQgYnlcbiAqIHtAbGluayBnb29nLm5ldC5YaHJJby5zZW5kfSBhbmQgcmVtb3ZlcyBpdCBmcm9tXG4gKiB7QGxpbmsgZ29vZy5uZXQuWGhySW8ucGVuZGluZ1N0YXRpY1NlbmRJbnN0YW5jZXNffS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5jbGVhbnVwU2VuZF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmRpc3Bvc2UoKTtcbiAgZ29vZy5hcnJheS5yZW1vdmUoZ29vZy5uZXQuWGhySW8uc2VuZEluc3RhbmNlc18sIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2ggYW4gaW5jb21wbGV0ZSByZXF1ZXN0IHdpbGwgYmVcbiAqIGFib3J0ZWQsIG9yIDAgaWYgbm8gdGltZW91dCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRpbWVvdXQgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0VGltZW91dEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMudGltZW91dEludGVydmFsXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIGFuIGluY29tcGxldGUgcmVxdWVzdCB3aWxsIGJlXG4gKiBhYm9ydGVkIGFuZCBhIHtAbGluayBnb29nLm5ldC5FdmVudFR5cGUuVElNRU9VVH0gZXZlbnQgcmFpc2VkOyAwIG1lYW5zIG5vXG4gKiB0aW1lb3V0IGlzIHNldC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtcyBUaW1lb3V0IGludGVydmFsIGluIG1pbGxpc2Vjb25kczsgMCBtZWFucyBub25lLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuc2V0VGltZW91dEludGVydmFsID0gZnVuY3Rpb24obXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnRpbWVvdXRJbnRlcnZhbF8gPSBNYXRoLm1heCgwLCBtcyk7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgZGVzaXJlZCB0eXBlIGZvciB0aGUgcmVzcG9uc2UuIEF0IHRpbWUgb2Ygd3JpdGluZywgdGhpcyBpcyBvbmx5XG4gKiBzdXBwb3J0ZWQgaW4gdmVyeSByZWNlbnQgdmVyc2lvbnMgb2YgV2ViS2l0ICgxMC4wLjYxMi4xIGRldiBhbmQgbGF0ZXIpLlxuICpcbiAqIElmIHRoaXMgaXMgdXNlZCwgdGhlIHJlc3BvbnNlIG1heSBvbmx5IGJlIGFjY2Vzc2VkIHZpYSB7QGxpbmsgI2dldFJlc3BvbnNlfS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cubmV0LlhocklvLlJlc3BvbnNlVHlwZX0gdHlwZSBUaGUgZGVzaXJlZCB0eXBlIGZvciB0aGUgcmVzcG9uc2UuXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5zZXRSZXNwb25zZVR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5yZXNwb25zZVR5cGVfID0gdHlwZTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBkZXNpcmVkIHR5cGUgZm9yIHRoZSByZXNwb25zZS5cbiAqIEByZXR1cm4ge2dvb2cubmV0LlhocklvLlJlc3BvbnNlVHlwZX0gVGhlIGRlc2lyZWQgdHlwZSBmb3IgdGhlIHJlc3BvbnNlLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0UmVzcG9uc2VUeXBlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucmVzcG9uc2VUeXBlXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHdoZXRoZXIgYSBcImNyZWRlbnRpYWxlZFwiIHJlcXVlc3QgdGhhdCBpcyBhd2FyZSBvZiBjb29raWUgYW5kXG4gKiBhdXRoZW50aWNhdGlvbiBpbmZvcm1hdGlvbiBzaG91bGQgYmUgbWFkZS4gVGhpcyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgYnlcbiAqIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBIVFRQIEFjY2VzcyBDb250cm9sLiBBcyBvZiB0aGlzIHdyaXRpbmcsIHRoaXMgb3B0aW9uXG4gKiBpcyBub3Qgc3VwcG9ydGVkIGluIElFLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aENyZWRlbnRpYWxzIFdoZXRoZXIgdGhpcyBzaG91bGQgYmUgYSBcImNyZWRlbnRpYWxlZFwiXG4gKiAgICAgcmVxdWVzdC5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLnNldFdpdGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uKHdpdGhDcmVkZW50aWFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzXyA9IHdpdGhDcmVkZW50aWFscztcbn07XG5cblxuLyoqXG4gKiBHZXRzIHdoZXRoZXIgYSBcImNyZWRlbnRpYWxlZFwiIHJlcXVlc3QgaXMgdG8gYmUgc2VudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBkZXNpcmVkIHR5cGUgZm9yIHRoZSByZXNwb25zZS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFdpdGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLndpdGhDcmVkZW50aWFsc187XG59O1xuXG5cbi8qKlxuICogU2V0cyB3aGV0aGVyIHByb2dyZXNzIGV2ZW50cyBhcmUgZW5hYmxlZCBmb3IgdGhpcyByZXF1ZXN0LiBOb3RlXG4gKiB0aGF0IHByb2dyZXNzIGV2ZW50cyByZXF1aXJlIHByZS1mbGlnaHQgT1BUSU9OUyByZXF1ZXN0IGhhbmRsaW5nXG4gKiBmb3IgQ09SUyByZXF1ZXN0cywgYW5kIG1heSBjYXVzZSB0cm91YmxlIHdpdGggb2xkZXIgYnJvd3NlcnMuIFNlZVxuICogcHJvZ3Jlc3NFdmVudHNFbmFibGVkXyBmb3IgZGV0YWlscy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBXaGV0aGVyIHByb2dyZXNzIGV2ZW50cyBzaG91bGQgYmUgZW5hYmxlZC5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLnNldFByb2dyZXNzRXZlbnRzRW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnByb2dyZXNzRXZlbnRzRW5hYmxlZF8gPSBlbmFibGVkO1xufTtcblxuXG4vKipcbiAqIEdldHMgd2hldGhlciBwcm9ncmVzcyBldmVudHMgYXJlIGVuYWJsZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHByb2dyZXNzIGV2ZW50cyBhcmUgZW5hYmxlZCBmb3IgdGhpcyByZXF1ZXN0LlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0UHJvZ3Jlc3NFdmVudHNFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucHJvZ3Jlc3NFdmVudHNFbmFibGVkXztcbn07XG5cbi8qKlxuICogU3BlY2lmeSBhIFRydXN0IFRva2VucyBvcGVyYXRpb24gdG8gZXhlY3V0ZSBhbG9uZ3NpZGUgdGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0geyFUcnVzdFRva2VuQXR0cmlidXRlVHlwZX0gdHJ1c3RUb2tlbiBhIFRydXN0IFRva2VucyBvcGVyYXRpb24gdG9cbiAqICAgICBleGVjdXRlLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuc2V0VHJ1c3RUb2tlbiA9IGZ1bmN0aW9uKHRydXN0VG9rZW4pIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnRydXN0VG9rZW5fID0gdHJ1c3RUb2tlbjtcbn07XG5cbi8qKlxuICogSW5zdGFuY2Ugc2VuZCB0aGF0IGFjdHVhbGx5IHVzZXMgWE1MSHR0cFJlcXVlc3QgdG8gbWFrZSBhIHNlcnZlciBjYWxsLlxuICogQHBhcmFtIHtzdHJpbmd8Z29vZy5Vcml9IHVybCBVcmkgdG8gbWFrZSByZXF1ZXN0IHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWV0aG9kIFNlbmQgbWV0aG9kLCBkZWZhdWx0OiBHRVQuXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfEFycmF5QnVmZmVyVmlld3xCbG9ifERvY3VtZW50fEZvcm1EYXRhfHN0cmluZz19XG4gKiAgICAgb3B0X2NvbnRlbnQgQm9keSBkYXRhLlxuICogQHBhcmFtIHsoP09iamVjdHw/Z29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2U8c3RyaW5nLCBzdHJpbmc+KT19XG4gKiAgICAgb3B0X2hlYWRlcnMgTWFwIG9mIGhlYWRlcnMgdG8gYWRkIHRvIHRoZSByZXF1ZXN0LlxuICogQHN1cHByZXNzIHtkZXByZWNhdGVkfSBVc2UgZGVwcmVjYXRlZCBnb29nLnN0cnVjdHMuZm9yRWFjaCB0byBhbGxvdyBkaWZmZXJlbnRcbiAqIHR5cGVzIG9mIHBhcmFtZXRlcnMgZm9yIG9wdF9oZWFkZXJzLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKFxuICAgIHVybCwgb3B0X21ldGhvZCwgb3B0X2NvbnRlbnQsIG9wdF9oZWFkZXJzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMueGhyXykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1tnb29nLm5ldC5YaHJJb10gT2JqZWN0IGlzIGFjdGl2ZSB3aXRoIGFub3RoZXIgcmVxdWVzdD0nICtcbiAgICAgICAgdGhpcy5sYXN0VXJpXyArICc7IG5ld1VyaT0nICsgdXJsKTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IG9wdF9tZXRob2QgPyBvcHRfbWV0aG9kLnRvVXBwZXJDYXNlKCkgOiAnR0VUJztcblxuICB0aGlzLmxhc3RVcmlfID0gdXJsO1xuICB0aGlzLmxhc3RFcnJvcl8gPSAnJztcbiAgdGhpcy5sYXN0RXJyb3JDb2RlXyA9IGdvb2cubmV0LkVycm9yQ29kZS5OT19FUlJPUjtcbiAgdGhpcy5sYXN0TWV0aG9kXyA9IG1ldGhvZDtcbiAgdGhpcy5lcnJvckRpc3BhdGNoZWRfID0gZmFsc2U7XG4gIHRoaXMuYWN0aXZlXyA9IHRydWU7XG5cbiAgLy8gVXNlIHRoZSBmYWN0b3J5IHRvIGNyZWF0ZSB0aGUgWEhSIG9iamVjdCBhbmQgb3B0aW9uc1xuICB0aGlzLnhocl8gPSB0aGlzLmNyZWF0ZVhocigpO1xuICB0aGlzLnhock9wdGlvbnNfID0gdGhpcy54bWxIdHRwRmFjdG9yeV8gPyB0aGlzLnhtbEh0dHBGYWN0b3J5Xy5nZXRPcHRpb25zKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nLm5ldC5YbWxIdHRwLmdldE9wdGlvbnMoKTtcblxuICAvLyBTZXQgdXAgdGhlIG9ucmVhZHlzdGF0ZWNoYW5nZSBjYWxsYmFja1xuICB0aGlzLnhocl8ub25yZWFkeXN0YXRlY2hhbmdlID0gZ29vZy5iaW5kKHRoaXMub25SZWFkeVN0YXRlQ2hhbmdlXywgdGhpcyk7XG5cbiAgLy8gU2V0IHVwIHVwbG9hZC9kb3dubG9hZCBwcm9ncmVzcyBldmVudHMsIGlmIHByb2dyZXNzIGV2ZW50cyBhcmUgc3VwcG9ydGVkLlxuICBpZiAodGhpcy5nZXRQcm9ncmVzc0V2ZW50c0VuYWJsZWQoKSAmJiAnb25wcm9ncmVzcycgaW4gdGhpcy54aHJfKSB7XG4gICAgdGhpcy54aHJfLm9ucHJvZ3Jlc3MgPSBnb29nLmJpbmQoZnVuY3Rpb24oZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdGhpcy5vblByb2dyZXNzSGFuZGxlcl8oZSwgdHJ1ZSk7XG4gICAgfSwgdGhpcyk7XG4gICAgaWYgKHRoaXMueGhyXy51cGxvYWQpIHtcbiAgICAgIHRoaXMueGhyXy51cGxvYWQub25wcm9ncmVzcyA9IGdvb2cuYmluZCh0aGlzLm9uUHJvZ3Jlc3NIYW5kbGVyXywgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyeSB0byBvcGVuIHRoZSBYTUxIdHRwUmVxdWVzdCAoYWx3YXlzIGFzeW5jKSwgaWYgYW4gZXJyb3Igb2NjdXJzIGhlcmUgaXRcbiAgICogaXMgZ2VuZXJhbGx5IHBlcm1pc3Npb24gZGVuaWVkXG4gICAqL1xuICB0cnkge1xuICAgIGdvb2cubG9nLmZpbmUodGhpcy5sb2dnZXJfLCB0aGlzLmZvcm1hdE1zZ18oJ09wZW5pbmcgWGhyJykpO1xuICAgIHRoaXMuaW5PcGVuXyA9IHRydWU7XG4gICAgdGhpcy54aHJfLm9wZW4obWV0aG9kLCBTdHJpbmcodXJsKSwgdHJ1ZSk7ICAvLyBBbHdheXMgYXN5bmMhXG4gICAgdGhpcy5pbk9wZW5fID0gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGdvb2cubG9nLmZpbmUoXG4gICAgICAgIHRoaXMubG9nZ2VyXywgdGhpcy5mb3JtYXRNc2dfKCdFcnJvciBvcGVuaW5nIFhocjogJyArIGVyci5tZXNzYWdlKSk7XG4gICAgdGhpcy5lcnJvcl8oZ29vZy5uZXQuRXJyb3JDb2RlLkVYQ0VQVElPTiwgZXJyKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgbnVsbCBzaW5jZSB0aGlzIHdvbid0IGFsbG93IHJlcXVlc3RzIHdpdGggZm9ybSBkYXRhIHRvIGhhdmUgYVxuICAvLyBjb250ZW50IGxlbmd0aCBzcGVjaWZpZWQgd2hpY2ggd2lsbCBjYXVzZSBzb21lIHByb3hpZXMgdG8gcmV0dXJuIGEgNDExXG4gIC8vIGVycm9yLlxuICBjb25zdCBjb250ZW50ID0gb3B0X2NvbnRlbnQgfHwgJyc7XG5cbiAgY29uc3QgaGVhZGVycyA9IG5ldyBNYXAodGhpcy5oZWFkZXJzKTtcblxuICAvLyBBZGQgaGVhZGVycyBzcGVjaWZpYyB0byB0aGlzIHJlcXVlc3RcbiAgaWYgKG9wdF9oZWFkZXJzKSB7XG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihvcHRfaGVhZGVycykgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgIGZvciAobGV0IGtleSBpbiBvcHRfaGVhZGVycykge1xuICAgICAgICBoZWFkZXJzLnNldChrZXksIG9wdF9oZWFkZXJzW2tleV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR5cGVvZiBvcHRfaGVhZGVycy5rZXlzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiBvcHRfaGVhZGVycy5nZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIG9wdF9oZWFkZXJzLmtleXMoKSkge1xuICAgICAgICBoZWFkZXJzLnNldChrZXksIG9wdF9oZWFkZXJzLmdldChrZXkpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdVbmtub3duIGlucHV0IHR5cGUgZm9yIG9wdF9oZWFkZXJzOiAnICsgU3RyaW5nKG9wdF9oZWFkZXJzKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB3aGV0aGVyIGEgY29udGVudCB0eXBlIGhlYWRlciBpcyBzZXQsIGlnbm9yaW5nIGNhc2UuXG4gIC8vIEhUVFAgaGVhZGVyIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlLiAgU2VlOlxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzQuaHRtbCNzZWM0LjJcbiAgY29uc3QgY29udGVudFR5cGVLZXkgPVxuICAgICAgQXJyYXkuZnJvbShoZWFkZXJzLmtleXMoKSlcbiAgICAgICAgICAuZmluZChcbiAgICAgICAgICAgICAgaGVhZGVyID0+IGdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUVxdWFscyhcbiAgICAgICAgICAgICAgICAgIGdvb2cubmV0LlhocklvLkNPTlRFTlRfVFlQRV9IRUFERVIsIGhlYWRlcikpO1xuXG4gIGNvbnN0IGNvbnRlbnRJc0Zvcm1EYXRhID1cbiAgICAgIChnb29nLmdsb2JhbFsnRm9ybURhdGEnXSAmJiAoY29udGVudCBpbnN0YW5jZW9mIGdvb2cuZ2xvYmFsWydGb3JtRGF0YSddKSk7XG4gIGlmIChnb29nLmFycmF5LmNvbnRhaW5zKGdvb2cubmV0LlhocklvLk1FVEhPRFNfV0lUSF9GT1JNX0RBVEEsIG1ldGhvZCkgJiZcbiAgICAgICFjb250ZW50VHlwZUtleSAmJiAhY29udGVudElzRm9ybURhdGEpIHtcbiAgICAvLyBGb3IgcmVxdWVzdHMgdHlwaWNhbGx5IHdpdGggZm9ybSBkYXRhLCBkZWZhdWx0IHRvIHRoZSB1cmwtZW5jb2RlZCBmb3JtXG4gICAgLy8gY29udGVudCB0eXBlIHVubGVzcyB0aGlzIGlzIGEgRm9ybURhdGEgcmVxdWVzdC4gIEZvciBGb3JtRGF0YSxcbiAgICAvLyB0aGUgYnJvd3NlciB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBjb250ZW50IHR5cGVcbiAgICAvLyB3aXRoIGFuIGFwcHJvcHJpYXRlIG11bHRpcGFydCBib3VuZGFyeS5cbiAgICBoZWFkZXJzLnNldChcbiAgICAgICAgZ29vZy5uZXQuWGhySW8uQ09OVEVOVF9UWVBFX0hFQURFUiwgZ29vZy5uZXQuWGhySW8uRk9STV9DT05URU5UX1RZUEUpO1xuICB9XG5cbiAgLy8gQWRkIHRoZSBoZWFkZXJzIHRvIHRoZSBYaHIgb2JqZWN0XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlcnMpIHtcbiAgICB0aGlzLnhocl8uc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGlmICh0aGlzLnJlc3BvbnNlVHlwZV8pIHtcbiAgICB0aGlzLnhocl8ucmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGVfO1xuICB9XG4gIC8vIFNldCB4aHJfLndpdGhDcmVkZW50aWFscyBvbmx5IHdoZW4gdGhlIHZhbHVlIGlzIGRpZmZlcmVudCwgb3IgZWxzZSBpblxuICAvLyBzeW5jaHJvbm91cyBYTUxIdHBwUmVxdWVzdC5vcGVuIEZpcmVmb3ggd2lsbCB0aHJvdyBhbiBleGNlcHRpb24uXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTczNjM0MFxuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4gdGhpcy54aHJfICYmXG4gICAgICB0aGlzLnhocl8ud2l0aENyZWRlbnRpYWxzICE9PSB0aGlzLndpdGhDcmVkZW50aWFsc18pIHtcbiAgICB0aGlzLnhocl8ud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHNfO1xuICB9XG5cbiAgaWYgKCdzZXRUcnVzdFRva2VuJyBpbiB0aGlzLnhocl8gJiYgdGhpcy50cnVzdFRva2VuXykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhocl8uc2V0VHJ1c3RUb2tlbih0aGlzLnRydXN0VG9rZW5fKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGdvb2cubG9nLmZpbmUoXG4gICAgICAgICAgdGhpcy5sb2dnZXJfLCB0aGlzLmZvcm1hdE1zZ18oJ0Vycm9yIFNldFRydXN0VG9rZW46ICcgKyBlcnIubWVzc2FnZSkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVHJ5IHRvIHNlbmQgdGhlIHJlcXVlc3QsIG9yIG90aGVyIHdpc2UgcmVwb3J0IGFuIGVycm9yICg0MDQgbm90IGZvdW5kKS5cbiAgICovXG4gIHRyeSB7XG4gICAgdGhpcy5jbGVhblVwVGltZW91dFRpbWVyXygpOyAgLy8gUGFyYW5vaWQsIHNob3VsZCBuZXZlciBiZSBydW5uaW5nLlxuICAgIGlmICh0aGlzLnRpbWVvdXRJbnRlcnZhbF8gPiAwKSB7XG4gICAgICB0aGlzLnVzZVhocjJUaW1lb3V0XyA9IGdvb2cubmV0LlhocklvLnNob3VsZFVzZVhocjJUaW1lb3V0Xyh0aGlzLnhocl8pO1xuICAgICAgZ29vZy5sb2cuZmluZShcbiAgICAgICAgICB0aGlzLmxvZ2dlcl8sXG4gICAgICAgICAgdGhpcy5mb3JtYXRNc2dfKFxuICAgICAgICAgICAgICAnV2lsbCBhYm9ydCBhZnRlciAnICsgdGhpcy50aW1lb3V0SW50ZXJ2YWxfICtcbiAgICAgICAgICAgICAgJ21zIGlmIGluY29tcGxldGUsIHhocjIgJyArIHRoaXMudXNlWGhyMlRpbWVvdXRfKSk7XG4gICAgICBpZiAodGhpcy51c2VYaHIyVGltZW91dF8pIHtcbiAgICAgICAgdGhpcy54aHJfW2dvb2cubmV0LlhocklvLlhIUjJfVElNRU9VVF9dID0gdGhpcy50aW1lb3V0SW50ZXJ2YWxfO1xuICAgICAgICB0aGlzLnhocl9bZ29vZy5uZXQuWGhySW8uWEhSMl9PTl9USU1FT1VUX10gPVxuICAgICAgICAgICAgZ29vZy5iaW5kKHRoaXMudGltZW91dF8sIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aW1lb3V0SWRfID1cbiAgICAgICAgICAgIGdvb2cuVGltZXIuY2FsbE9uY2UodGhpcy50aW1lb3V0XywgdGhpcy50aW1lb3V0SW50ZXJ2YWxfLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sIHRoaXMuZm9ybWF0TXNnXygnU2VuZGluZyByZXF1ZXN0JykpO1xuICAgIHRoaXMuaW5TZW5kXyA9IHRydWU7XG4gICAgdGhpcy54aHJfLnNlbmQoY29udGVudCk7XG4gICAgdGhpcy5pblNlbmRfID0gZmFsc2U7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sIHRoaXMuZm9ybWF0TXNnXygnU2VuZCBlcnJvcjogJyArIGVyci5tZXNzYWdlKSk7XG4gICAgdGhpcy5lcnJvcl8oZ29vZy5uZXQuRXJyb3JDb2RlLkVYQ0VQVElPTiwgZXJyKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIFhNTEh0dHBSZXF1ZXN0IHRoYXQgc3VwcG9ydHMgdGhlIGxldmVsIDJcbiAqIHRpbWVvdXQgdmFsdWUgYW5kIGV2ZW50LlxuICpcbiAqIEN1cnJlbnRseSwgRkYgMjEuMCBPUyBYIGhhcyB0aGUgZmllbGRzIGJ1dCB3b24ndCBhY3R1YWxseSBjYWxsIHRoZSB0aW1lb3V0XG4gKiBoYW5kbGVyLiAgUGVyaGFwcyB0aGUgY29uZnVzaW9uIGluIHRoZSBidWcgcmVmZXJlbmNlZCBiZWxvdyBoYXNuJ3RcbiAqIGVudGlyZWx5IGJlZW4gcmVzb2x2ZWQuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXRpbWVvdXQtYXR0cmlidXRlXG4gKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUyNTgxNlxuICpcbiAqIEBwYXJhbSB7IWdvb2cubmV0Llhockxpa2UuT3JOYXRpdmV9IHhociBUaGUgcmVxdWVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJlcXVlc3Qgc3VwcG9ydHMgbGV2ZWwgMiB0aW1lb3V0LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8uc2hvdWxkVXNlWGhyMlRpbWVvdXRfID0gZnVuY3Rpb24oeGhyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXNlckFnZW50LklFICYmIGdvb2cudXNlckFnZW50LmlzVmVyc2lvbk9ySGlnaGVyKDkpICYmXG4gICAgICB0eXBlb2YgeGhyW2dvb2cubmV0LlhocklvLlhIUjJfVElNRU9VVF9dID09PSAnbnVtYmVyJyAmJlxuICAgICAgeGhyW2dvb2cubmV0LlhocklvLlhIUjJfT05fVElNRU9VVF9dICE9PSB1bmRlZmluZWQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBYSFIgb2JqZWN0LlxuICogQHJldHVybiB7IWdvb2cubmV0Llhockxpa2UuT3JOYXRpdmV9IFRoZSBuZXdseSBjcmVhdGVkIFhIUiBvYmplY3QuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5jcmVhdGVYaHIgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy54bWxIdHRwRmFjdG9yeV8gPyB0aGlzLnhtbEh0dHBGYWN0b3J5Xy5jcmVhdGVJbnN0YW5jZSgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZy5uZXQuWG1sSHR0cCgpO1xufTtcblxuXG4vKipcbiAqIFRoZSByZXF1ZXN0IGRpZG4ndCBjb21wbGV0ZSBhZnRlciB7QGxpbmsgZ29vZy5uZXQuWGhySW8jdGltZW91dEludGVydmFsX31cbiAqIG1pbGxpc2Vjb25kczsgcmFpc2VzIGEge0BsaW5rIGdvb2cubmV0LkV2ZW50VHlwZS5USU1FT1VUfSBldmVudCBhbmQgYWJvcnRzXG4gKiB0aGUgcmVxdWVzdC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS50aW1lb3V0XyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgZ29vZyA9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIElmIGdvb2cgaXMgdW5kZWZpbmVkIHRoZW4gdGhlIGNhbGxiYWNrIGhhcyBvY2N1cnJlZCBhcyB0aGUgYXBwbGljYXRpb25cbiAgICAvLyBpcyB1bmxvYWRpbmcgYW5kIHdpbGwgZXJyb3IuICBUaHVzIHdlIGxldCBpdCBzaWxlbnRseSBmYWlsLlxuICB9IGVsc2UgaWYgKHRoaXMueGhyXykge1xuICAgIHRoaXMubGFzdEVycm9yXyA9XG4gICAgICAgICdUaW1lZCBvdXQgYWZ0ZXIgJyArIHRoaXMudGltZW91dEludGVydmFsXyArICdtcywgYWJvcnRpbmcnO1xuICAgIHRoaXMubGFzdEVycm9yQ29kZV8gPSBnb29nLm5ldC5FcnJvckNvZGUuVElNRU9VVDtcbiAgICBnb29nLmxvZy5maW5lKHRoaXMubG9nZ2VyXywgdGhpcy5mb3JtYXRNc2dfKHRoaXMubGFzdEVycm9yXykpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChnb29nLm5ldC5FdmVudFR5cGUuVElNRU9VVCk7XG4gICAgdGhpcy5hYm9ydChnb29nLm5ldC5FcnJvckNvZGUuVElNRU9VVCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTb21ldGhpbmcgZXJyb3JyZWQsIHNvIGluYWN0aXZhdGUsIGZpcmUgZXJyb3IgY2FsbGJhY2sgYW5kIGNsZWFuIHVwXG4gKiBAcGFyYW0ge2dvb2cubmV0LkVycm9yQ29kZX0gZXJyb3JDb2RlIFRoZSBlcnJvciBjb2RlLlxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlcnJvciBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZXJyb3JfID0gZnVuY3Rpb24oZXJyb3JDb2RlLCBlcnIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmFjdGl2ZV8gPSBmYWxzZTtcbiAgaWYgKHRoaXMueGhyXykge1xuICAgIHRoaXMuaW5BYm9ydF8gPSB0cnVlO1xuICAgIHRoaXMueGhyXy5hYm9ydCgpOyAgLy8gRW5zdXJlcyBYSFIgaXNuJ3QgaHVuZyAoRkYpXG4gICAgdGhpcy5pbkFib3J0XyA9IGZhbHNlO1xuICB9XG4gIHRoaXMubGFzdEVycm9yXyA9IGVycjtcbiAgdGhpcy5sYXN0RXJyb3JDb2RlXyA9IGVycm9yQ29kZTtcbiAgdGhpcy5kaXNwYXRjaEVycm9yc18oKTtcbiAgdGhpcy5jbGVhblVwWGhyXygpO1xufTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgQ09NUExFVEUgYW5kIEVSUk9SIGluIGNhc2Ugb2YgYW4gZXJyb3IuIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGRvXG4gKiBub3QgZGlzcGF0Y2ggbXVsdGlwbGUgZXJyb3IgZXZlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmRpc3BhdGNoRXJyb3JzXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5lcnJvckRpc3BhdGNoZWRfKSB7XG4gICAgdGhpcy5lcnJvckRpc3BhdGNoZWRfID0gdHJ1ZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZ29vZy5uZXQuRXZlbnRUeXBlLkNPTVBMRVRFKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZ29vZy5uZXQuRXZlbnRUeXBlLkVSUk9SKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEFib3J0IHRoZSBjdXJyZW50IFhNTEh0dHBSZXF1ZXN0XG4gKiBAcGFyYW0ge2dvb2cubmV0LkVycm9yQ29kZT19IG9wdF9mYWlsdXJlQ29kZSBPcHRpb25hbCBlcnJvciBjb2RlIHRvIHVzZSAtXG4gKiAgICAgZGVmYXVsdHMgdG8gQUJPUlQuXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKG9wdF9mYWlsdXJlQ29kZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLnhocl8gJiYgdGhpcy5hY3RpdmVfKSB7XG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sIHRoaXMuZm9ybWF0TXNnXygnQWJvcnRpbmcnKSk7XG4gICAgdGhpcy5hY3RpdmVfID0gZmFsc2U7XG4gICAgdGhpcy5pbkFib3J0XyA9IHRydWU7XG4gICAgdGhpcy54aHJfLmFib3J0KCk7XG4gICAgdGhpcy5pbkFib3J0XyA9IGZhbHNlO1xuICAgIHRoaXMubGFzdEVycm9yQ29kZV8gPSBvcHRfZmFpbHVyZUNvZGUgfHwgZ29vZy5uZXQuRXJyb3JDb2RlLkFCT1JUO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChnb29nLm5ldC5FdmVudFR5cGUuQ09NUExFVEUpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChnb29nLm5ldC5FdmVudFR5cGUuQUJPUlQpO1xuICAgIHRoaXMuY2xlYW5VcFhocl8oKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIE51bGxpZmllcyBhbGwgY2FsbGJhY2tzIHRvIHJlZHVjZSByaXNrcyBvZiBsZWFrcy5cbiAqIEBvdmVycmlkZVxuICogQHByb3RlY3RlZFxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMueGhyXykge1xuICAgIC8vIFdlIGV4cGxpY2l0bHkgZG8gbm90IGNhbGwgeGhyXy5hYm9ydCgpIHVubGVzcyBhY3RpdmVfIGlzIHN0aWxsIHRydWUuXG4gICAgLy8gVGhpcyBpcyB0byBhdm9pZCB1bm5lY2Vzc2FyaWx5IGFib3J0aW5nIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0IHdoZW5cbiAgICAvLyBkaXNwb3NlKCkgaXMgY2FsbGVkIGluIGEgY2FsbGJhY2sgdHJpZ2dlcmVkIGJ5IGEgY29tcGxldGUgcmVzcG9uc2UsIGJ1dFxuICAgIC8vIGluIHdoaWNoIGJyb3dzZXIgY2xlYW51cCBoYXMgbm90IHlldCBmaW5pc2hlZC5cbiAgICAvLyAoU2VlIGh0dHA6Ly9iL2lzc3VlP2lkPTE2ODQyMTcuKVxuICAgIGlmICh0aGlzLmFjdGl2ZV8pIHtcbiAgICAgIHRoaXMuYWN0aXZlXyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbkFib3J0XyA9IHRydWU7XG4gICAgICB0aGlzLnhocl8uYWJvcnQoKTtcbiAgICAgIHRoaXMuaW5BYm9ydF8gPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5jbGVhblVwWGhyXyh0cnVlKTtcbiAgfVxuXG4gIFhocklvLmJhc2UodGhpcywgJ2Rpc3Bvc2VJbnRlcm5hbCcpO1xufTtcblxuXG4vKipcbiAqIEludGVybmFsIGhhbmRsZXIgZm9yIHRoZSBYSFIgb2JqZWN0J3MgcmVhZHlzdGF0ZWNoYW5nZSBldmVudC4gIFRoaXMgbWV0aG9kXG4gKiBjaGVja3MgdGhlIHN0YXR1cyBhbmQgdGhlIHJlYWR5c3RhdGUgYW5kIGZpcmVzIHRoZSBjb3JyZWN0IGNhbGxiYWNrcy5cbiAqIElmIHRoZSByZXF1ZXN0IGhhcyBlbmRlZCwgdGhlIGhhbmRsZXJzIGFyZSBjbGVhbmVkIHVwIGFuZCB0aGUgWEhSIG9iamVjdCBpc1xuICogbnVsbGlmaWVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLm9uUmVhZHlTdGF0ZUNoYW5nZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5pc0Rpc3Bvc2VkKCkpIHtcbiAgICAvLyBUaGlzIG1ldGhvZCBpcyB0aGUgdGFyZ2V0IG9mIGFuIHVudHJhY2tlZCBnb29nLlRpbWVyLmNhbGxPbmNlKCkuXG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdGhpcy5pbk9wZW5fICYmICF0aGlzLmluU2VuZF8gJiYgIXRoaXMuaW5BYm9ydF8pIHtcbiAgICAvLyBXZXJlIG5vdCBiZWluZyBjYWxsZWQgZnJvbSB3aXRoaW4gYSBjYWxsIHRvIHRoaXMueGhyXy5zZW5kXG4gICAgLy8gdGhpcy54aHJfLmFib3J0LCBvciB0aGlzLnhocl8ub3Blbiwgc28gdGhpcyBpcyBhbiBlbnRyeSBwb2ludFxuICAgIHRoaXMub25SZWFkeVN0YXRlQ2hhbmdlRW50cnlQb2ludF8oKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9uUmVhZHlTdGF0ZUNoYW5nZUhlbHBlcl8oKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFVzZWQgdG8gcHJvdGVjdCB0aGUgb25yZWFkeXN0YXRlY2hhbmdlIGhhbmRsZXIgZW50cnkgcG9pbnQuICBOZWNlc3NhcnlcbiAqIGFzIHsjb25SZWFkeVN0YXRlQ2hhbmdlX30gbWF5YmUgY2FsbGVkIGZyb20gd2l0aGluIHNlbmQgb3IgYWJvcnQsIHRoaXNcbiAqIG1ldGhvZCBpcyBvbmx5IGNhbGxlZCB3aGVuIHsjb25SZWFkeVN0YXRlQ2hhbmdlX30gaXMgY2FsbGVkIGFzIGFuXG4gKiBlbnRyeSBwb2ludC5cbiAqIHtAc2VlICNwcm90ZWN0RW50cnlQb2ludHN9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUub25SZWFkeVN0YXRlQ2hhbmdlRW50cnlQb2ludF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLm9uUmVhZHlTdGF0ZUNoYW5nZUhlbHBlcl8oKTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZm9yIHtAbGluayAjb25SZWFkeVN0YXRlQ2hhbmdlX30uICBUaGlzIGlzIHVzZWQgc28gdGhhdFxuICogZW50cnkgcG9pbnQgY2FsbHMgdG8ge0BsaW5rICNvblJlYWR5U3RhdGVDaGFuZ2VffSBjYW4gYmUgcm91dGVkIHRocm91Z2hcbiAqIHtAbGluayAjb25SZWFkeVN0YXRlQ2hhbmdlRW50cnlQb2ludF99LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLm9uUmVhZHlTdGF0ZUNoYW5nZUhlbHBlcl8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXRoaXMuYWN0aXZlXykge1xuICAgIC8vIGNhbiBnZXQgY2FsbGVkIGluc2lkZSBhYm9ydCBjYWxsXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnb29nID09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gTk9URSh1c2VyKTogSWYgZ29vZyBpcyB1bmRlZmluZWQgdGhlbiB0aGUgY2FsbGJhY2sgaGFzIG9jY3VycmVkIGFzIHRoZVxuICAgIC8vIGFwcGxpY2F0aW9uIGlzIHVubG9hZGluZyBhbmQgd2lsbCBlcnJvci4gIFRodXMgd2UgbGV0IGl0IHNpbGVudGx5IGZhaWwuXG5cbiAgfSBlbHNlIGlmIChcbiAgICAgIHRoaXMueGhyT3B0aW9uc19bZ29vZy5uZXQuWG1sSHR0cC5PcHRpb25UeXBlLkxPQ0FMX1JFUVVFU1RfRVJST1JdICYmXG4gICAgICB0aGlzLmdldFJlYWR5U3RhdGUoKSA9PSBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuQ09NUExFVEUgJiZcbiAgICAgIHRoaXMuZ2V0U3RhdHVzKCkgPT0gMikge1xuICAgIC8vIE5PVEUodXNlcik6IEluIElFIGlmIHNlbmQoKSBlcnJvcnMgb24gYSAqbG9jYWwqIHJlcXVlc3QgdGhlIHJlYWR5c3RhdGVcbiAgICAvLyBpcyBzdGlsbCBjaGFuZ2VkIHRvIENPTVBMRVRFLiAgV2UgbmVlZCB0byBpZ25vcmUgaXQgYW5kIGFsbG93IHRoZVxuICAgIC8vIHRyeS9jYXRjaCBhcm91bmQgc2VuZCgpIHRvIHBpY2sgdXAgdGhlIGVycm9yLlxuICAgIGdvb2cubG9nLmZpbmUoXG4gICAgICAgIHRoaXMubG9nZ2VyXyxcbiAgICAgICAgdGhpcy5mb3JtYXRNc2dfKCdMb2NhbCByZXF1ZXN0IGVycm9yIGRldGVjdGVkIGFuZCBpZ25vcmVkJykpO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gSUUgd2hlbiB0aGUgcmVzcG9uc2UgaGFzIGJlZW4gY2FjaGVkIHdlIHNvbWV0aW1lcyBnZXQgdGhlIGNhbGxiYWNrXG4gICAgLy8gZnJvbSBpbnNpZGUgdGhlIHNlbmQgY2FsbCBhbmQgdGhpcyB1c3VhbGx5IGJyZWFrcyBjb2RlIHRoYXQgYXNzdW1lcyB0aGF0XG4gICAgLy8gWGhySW8gaXMgYXN5bmNocm9ub3VzLiAgSWYgdGhhdCBpcyB0aGUgY2FzZSB3ZSBkZWxheSB0aGUgY2FsbGJhY2tcbiAgICAvLyB1c2luZyBhIHRpbWVyLlxuICAgIGlmICh0aGlzLmluU2VuZF8gJiZcbiAgICAgICAgdGhpcy5nZXRSZWFkeVN0YXRlKCkgPT0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkNPTVBMRVRFKSB7XG4gICAgICBnb29nLlRpbWVyLmNhbGxPbmNlKHRoaXMub25SZWFkeVN0YXRlQ2hhbmdlXywgMCwgdGhpcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LkV2ZW50VHlwZS5SRUFEWV9TVEFURV9DSEFOR0UpO1xuXG4gICAgLy8gcmVhZHlTdGF0ZSBpbmRpY2F0ZXMgdGhlIHRyYW5zZmVyIGhhcyBmaW5pc2hlZFxuICAgIGlmICh0aGlzLmlzQ29tcGxldGUoKSkge1xuICAgICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sIHRoaXMuZm9ybWF0TXNnXygnUmVxdWVzdCBjb21wbGV0ZScpKTtcblxuICAgICAgdGhpcy5hY3RpdmVfID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhbGwgdGhlIHNwZWNpZmljIGNhbGxiYWNrcyBmb3Igc3VjY2VzcyBvciBmYWlsdXJlLiBPbmx5IGNhbGwgdGhlXG4gICAgICAgIC8vIHN1Y2Nlc3MgaWYgdGhlIHN0YXR1cyBpcyAyMDAgKEhUVFBfT0spIG9yIDMwNCAoSFRUUF9DQUNIRUQpXG4gICAgICAgIGlmICh0aGlzLmlzU3VjY2VzcygpKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LkV2ZW50VHlwZS5DT01QTEVURSk7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LkV2ZW50VHlwZS5TVUNDRVNTKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxhc3RFcnJvckNvZGVfID0gZ29vZy5uZXQuRXJyb3JDb2RlLkhUVFBfRVJST1I7XG4gICAgICAgICAgdGhpcy5sYXN0RXJyb3JfID1cbiAgICAgICAgICAgICAgdGhpcy5nZXRTdGF0dXNUZXh0KCkgKyAnIFsnICsgdGhpcy5nZXRTdGF0dXMoKSArICddJztcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3JzXygpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLmNsZWFuVXBYaHJfKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogSW50ZXJuYWwgaGFuZGxlciBmb3IgdGhlIFhIUiBvYmplY3QncyBvbnByb2dyZXNzIGV2ZW50LiBGaXJlcyBib3RoIGEgZ2VuZXJpY1xuICogUFJPR1JFU1MgZXZlbnQgYW5kIGVpdGhlciBhIERPV05MT0FEX1BST0dSRVNTIG9yIFVQTE9BRF9QUk9HUkVTUyBldmVudCB0b1xuICogYWxsb3cgc3BlY2lmaWMgYmluZGluZyBmb3IgZWFjaCBYSFIgcHJvZ3Jlc3MgZXZlbnQuXG4gKiBAcGFyYW0geyFQcm9ncmVzc0V2ZW50fSBlIFhIUiBwcm9ncmVzcyBldmVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pc0Rvd25sb2FkIFdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvZ3Jlc3MgZXZlbnQgaXMgZnJvbSBhXG4gKiAgICAgZG93bmxvYWQuIFVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgRE9XTkxPQURfUFJPR1JFU1Mgb3IgVVBMT0FEX1BST0dSRVNTXG4gKiAgICAgZXZlbnQgc2hvdWxkIGJlIGRpc3BhdGNoZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUub25Qcm9ncmVzc0hhbmRsZXJfID0gZnVuY3Rpb24oZSwgb3B0X2lzRG93bmxvYWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KFxuICAgICAgZS50eXBlID09PSBnb29nLm5ldC5FdmVudFR5cGUuUFJPR1JFU1MsXG4gICAgICAnZ29vZy5uZXQuRXZlbnRUeXBlLlBST0dSRVNTIGlzIG9mIHRoZSBzYW1lIHR5cGUgYXMgcmF3IFhIUiBwcm9ncmVzcy4nKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgZ29vZy5uZXQuWGhySW8uYnVpbGRQcm9ncmVzc0V2ZW50XyhlLCBnb29nLm5ldC5FdmVudFR5cGUuUFJPR1JFU1MpKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LlhocklvLmJ1aWxkUHJvZ3Jlc3NFdmVudF8oXG4gICAgICBlLFxuICAgICAgb3B0X2lzRG93bmxvYWQgPyBnb29nLm5ldC5FdmVudFR5cGUuRE9XTkxPQURfUFJPR1JFU1MgOlxuICAgICAgICAgICAgICAgICAgICAgICBnb29nLm5ldC5FdmVudFR5cGUuVVBMT0FEX1BST0dSRVNTKSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBuYXRpdmUgUHJvZ3Jlc3NFdmVudC4gSUUgZG9lc24ndCBzdXBwb3J0XG4gKiBjb25zdHJ1Y3RpbmcgUHJvZ3Jlc3NFdmVudCB2aWEgXCJuZXdcIiwgYW5kIHRoZSBhbHRlcm5hdGl2ZXMgKGUuZy4sXG4gKiBQcm9ncmVzc0V2ZW50LmluaXRQcm9ncmVzc0V2ZW50KSBhcmUgbm9uLXN0YW5kYXJkIG9yIGRlcHJlY2F0ZWQuXG4gKiBAcGFyYW0geyFQcm9ncmVzc0V2ZW50fSBlIFhIUiBwcm9ncmVzcyBldmVudC5cbiAqIEBwYXJhbSB7IWdvb2cubmV0LkV2ZW50VHlwZX0gZXZlbnRUeXBlIFRoZSB0eXBlIG9mIHRoZSBldmVudC5cbiAqIEByZXR1cm4geyFQcm9ncmVzc0V2ZW50fSBUaGUgcHJvZ3Jlc3MgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5YaHJJby5idWlsZFByb2dyZXNzRXZlbnRfID0gZnVuY3Rpb24oZSwgZXZlbnRUeXBlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb2dyZXNzRXZlbnR9ICovICh7XG4gICAgdHlwZTogZXZlbnRUeXBlLFxuICAgIGxlbmd0aENvbXB1dGFibGU6IGUubGVuZ3RoQ29tcHV0YWJsZSxcbiAgICBsb2FkZWQ6IGUubG9hZGVkLFxuICAgIHRvdGFsOiBlLnRvdGFsLFxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVyIHRvIHByb3RlY3QgYWdhaW5zdCBsZWFrcywgYW5kIG51bGxpZnkgdGhlIFhNTEh0dHBSZXF1ZXN0XG4gKiBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZnJvbURpc3Bvc2UgSWYgdGhpcyBpcyBmcm9tIHRoZSBkaXNwb3NlIChkb24ndCB3YW50IHRvXG4gKiAgICAgZmlyZSBhbnkgZXZlbnRzKS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5jbGVhblVwWGhyXyA9IGZ1bmN0aW9uKG9wdF9mcm9tRGlzcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLnhocl8pIHtcbiAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdGltZW91dCBldmVudCBoYW5kbGVyLlxuICAgIHRoaXMuY2xlYW5VcFRpbWVvdXRUaW1lcl8oKTtcblxuICAgIC8vIFNhdmUgcmVmZXJlbmNlIHNvIHdlIGNhbiBtYXJrIGl0IGFzIGNsb3NlZCBhZnRlciB0aGUgUkVBRFkgZXZlbnQuICBUaGVcbiAgICAvLyBSRUFEWSBldmVudCBtYXkgdHJpZ2dlciBhbm90aGVyIHJlcXVlc3QsIHRodXMgd2UgbXVzdCBudWxsaWZ5IHRoaXMueGhyX1xuICAgIGNvbnN0IHhociA9IHRoaXMueGhyXztcbiAgICBjb25zdCBjbGVhcmVkT25SZWFkeVN0YXRlQ2hhbmdlID1cbiAgICAgICAgdGhpcy54aHJPcHRpb25zX1tnb29nLm5ldC5YbWxIdHRwLk9wdGlvblR5cGUuVVNFX05VTExfRlVOQ1RJT05dID9cbiAgICAgICAgZ29vZy5udWxsRnVuY3Rpb24gOlxuICAgICAgICBudWxsO1xuICAgIHRoaXMueGhyXyA9IG51bGw7XG4gICAgdGhpcy54aHJPcHRpb25zXyA9IG51bGw7XG5cbiAgICBpZiAoIW9wdF9mcm9tRGlzcG9zZSkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LkV2ZW50VHlwZS5SRUFEWSk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIE5PVEUodXNlcik6IE5vdCBudWxsaWZ5aW5nIGluIEZpcmVGb3ggY2FuIHN0aWxsIGxlYWsgaWYgdGhlIGNhbGxiYWNrc1xuICAgICAgLy8gYXJlIGRlZmluZWQgaW4gdGhlIHNhbWUgc2NvcGUgYXMgdGhlIGluc3RhbmNlIG9mIFhocklvLiBCdXQsIElFIGRvZXNuJ3RcbiAgICAgIC8vIGFsbG93IHlvdSB0byBzZXQgdGhlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byBOVUxMIHNvIG51bGxGdW5jdGlvbiBpc1xuICAgICAgLy8gdXNlZC5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBjbGVhcmVkT25SZWFkeVN0YXRlQ2hhbmdlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRoaXMgc2VlbXMgdG8gb2NjdXIgd2l0aCBhIEdlYXJzIEhUVFAgcmVxdWVzdC4gRGVsYXllZCB0aGUgc2V0dGluZyBvZlxuICAgICAgLy8gdGhpcyBvbnJlYWR5c3RhdGVjaGFuZ2UgdW50aWwgYWZ0ZXIgUkVBRFkgaXMgc2VudCBvdXQgYW5kIGNhdGNoaW5nIHRoZVxuICAgICAgLy8gZXJyb3IgdG8gc2VlIGlmIHdlIGNhbiB0cmFjayBkb3duIHRoZSBwcm9ibGVtLlxuICAgICAgZ29vZy5sb2cuZXJyb3IoXG4gICAgICAgICAgdGhpcy5sb2dnZXJfLFxuICAgICAgICAgICdQcm9ibGVtIGVuY291bnRlcmVkIHJlc2V0dGluZyBvbnJlYWR5c3RhdGVjaGFuZ2U6ICcgKyBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIE1ha2Ugc3VyZSB0aGUgdGltZW91dCB0aW1lciBpc24ndCBydW5uaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmNsZWFuVXBUaW1lb3V0VGltZXJfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMueGhyXyAmJiB0aGlzLnVzZVhocjJUaW1lb3V0Xykge1xuICAgIHRoaXMueGhyX1tnb29nLm5ldC5YaHJJby5YSFIyX09OX1RJTUVPVVRfXSA9IG51bGw7XG4gIH1cbiAgaWYgKHRoaXMudGltZW91dElkXykge1xuICAgIGdvb2cuVGltZXIuY2xlYXIodGhpcy50aW1lb3V0SWRfKTtcbiAgICB0aGlzLnRpbWVvdXRJZF8gPSBudWxsO1xuICB9XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGVyZSBpcyBhbiBhY3RpdmUgcmVxdWVzdC5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEhdGhpcy54aHJfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaGFzIGNvbXBsZXRlZC5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmlzQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5nZXRSZWFkeVN0YXRlKCkgPT0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkNPTVBMRVRFO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgY29tcGxldGVkIHdpdGggYSBzdWNjZXNzLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuaXNTdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3Qgc3RhdHVzID0gdGhpcy5nZXRTdGF0dXMoKTtcbiAgLy8gQSB6ZXJvIHN0YXR1cyBjb2RlIGlzIGNvbnNpZGVyZWQgc3VjY2Vzc2Z1bCBmb3IgbG9jYWwgZmlsZXMuXG4gIHJldHVybiBnb29nLm5ldC5IdHRwU3RhdHVzLmlzU3VjY2VzcyhzdGF0dXMpIHx8XG4gICAgICBzdGF0dXMgPT09IDAgJiYgIXRoaXMuaXNMYXN0VXJpRWZmZWN0aXZlU2NoZW1lSHR0cF8oKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBlZmZlY3RpdmUgc2NoZW1lIG9mIHRoZSBsYXN0IFVSSSB0aGF0IHdhc1xuICogICAgIGZldGNoZWQgd2FzICdodHRwJyBvciAnaHR0cHMnLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmlzTGFzdFVyaUVmZmVjdGl2ZVNjaGVtZUh0dHBfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3Qgc2NoZW1lID0gZ29vZy51cmkudXRpbHMuZ2V0RWZmZWN0aXZlU2NoZW1lKFN0cmluZyh0aGlzLmxhc3RVcmlfKSk7XG4gIHJldHVybiBIVFRQX1NDSEVNRV9QQVRURVJOLnRlc3Qoc2NoZW1lKTtcbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIHJlYWR5c3RhdGUgZnJvbSB0aGUgWGhyIG9iamVjdFxuICogV2lsbCBvbmx5IHJldHVybiBjb3JyZWN0IHJlc3VsdCB3aGVuIGNhbGxlZCBmcm9tIHRoZSBjb250ZXh0IG9mIGEgY2FsbGJhY2tcbiAqIEByZXR1cm4ge2dvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZX0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLiouXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRSZWFkeVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMueGhyXyA/XG4gICAgICAvKiogQHR5cGUge2dvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZX0gKi8gKHRoaXMueGhyXy5yZWFkeVN0YXRlKSA6XG4gICAgICBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuVU5JTklUSUFMSVpFRDtcbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIHN0YXR1cyBmcm9tIHRoZSBYaHIgb2JqZWN0XG4gKiBXaWxsIG9ubHkgcmV0dXJuIGNvcnJlY3QgcmVzdWx0IHdoZW4gY2FsbGVkIGZyb20gdGhlIGNvbnRleHQgb2YgYSBjYWxsYmFja1xuICogQHJldHVybiB7bnVtYmVyfSBIdHRwIHN0YXR1cy5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFN0YXR1cyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBJRSBkb2Vzbid0IGxpa2UgeW91IGNoZWNraW5nIHN0YXR1cyB1bnRpbCB0aGUgcmVhZHlzdGF0ZSBpcyBncmVhdGVyIHRoYW4gMlxuICAgKiAoaS5lLiBpdCBpcyByZWNlaXZpbmcgb3IgY29tcGxldGUpLiAgVGhlIHRyeS9jYXRjaCBpcyB1c2VkIGZvciB3aGVuIHRoZVxuICAgKiBwYWdlIGlzIHVubG9hZGluZyBhbmQgYW4gRVJST1JfTk9UX0FWQUlMQUJMRSBtYXkgb2NjdXIgd2hlbiBhY2Nlc3NpbmcgeGhyXy5cbiAgICovXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVhZHlTdGF0ZSgpID4gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkxPQURFRCA/XG4gICAgICAgIHRoaXMueGhyXy5zdGF0dXMgOlxuICAgICAgICAtMTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEdldCB0aGUgc3RhdHVzIHRleHQgZnJvbSB0aGUgWGhyIG9iamVjdFxuICogV2lsbCBvbmx5IHJldHVybiBjb3JyZWN0IHJlc3VsdCB3aGVuIGNhbGxlZCBmcm9tIHRoZSBjb250ZXh0IG9mIGEgY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ30gU3RhdHVzIHRleHQuXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRTdGF0dXNUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIElFIGRvZXNuJ3QgbGlrZSB5b3UgY2hlY2tpbmcgc3RhdHVzIHVudGlsIHRoZSByZWFkeXN0YXRlIGlzIGdyZWF0ZXIgdGhhbiAyXG4gICAqIChpLmUuIGl0IGlzIHJlY2VpdmluZyBvciBjb21wbGV0ZSkuICBUaGUgdHJ5L2NhdGNoIGlzIHVzZWQgZm9yIHdoZW4gdGhlXG4gICAqIHBhZ2UgaXMgdW5sb2FkaW5nIGFuZCBhbiBFUlJPUl9OT1RfQVZBSUxBQkxFIG1heSBvY2N1ciB3aGVuIGFjY2Vzc2luZyB4aHJfLlxuICAgKi9cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZWFkeVN0YXRlKCkgPiBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuTE9BREVEID9cbiAgICAgICAgdGhpcy54aHJfLnN0YXR1c1RleHQgOlxuICAgICAgICAnJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIGdvb2cubG9nLmZpbmUodGhpcy5sb2dnZXJfLCAnQ2FuIG5vdCBnZXQgc3RhdHVzOiAnICsgZS5tZXNzYWdlKTtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIGxhc3QgVXJpIHRoYXQgd2FzIHJlcXVlc3RlZFxuICogQHJldHVybiB7c3RyaW5nfSBMYXN0IFVyaS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldExhc3RVcmkgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gU3RyaW5nKHRoaXMubGFzdFVyaV8pO1xufTtcblxuXG4vKipcbiAqIEdldCB0aGUgcmVzcG9uc2UgdGV4dCBmcm9tIHRoZSBYaHIgb2JqZWN0XG4gKiBXaWxsIG9ubHkgcmV0dXJuIGNvcnJlY3QgcmVzdWx0IHdoZW4gY2FsbGVkIGZyb20gdGhlIGNvbnRleHQgb2YgYSBjYWxsYmFjay5cbiAqIEByZXR1cm4ge3N0cmluZ30gUmVzdWx0IGZyb20gdGhlIHNlcnZlciwgb3IgJycgaWYgbm8gcmVzdWx0IGF2YWlsYWJsZS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlVGV4dCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHRoaXMueGhyXyA/IHRoaXMueGhyXy5yZXNwb25zZVRleHQgOiAnJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtcmVzcG9uc2V0ZXh0LWF0dHJpYnV0ZVxuICAgIC8vIHN0YXRlcyB0aGF0IHJlc3BvbnNlVGV4dCBzaG91bGQgcmV0dXJuICcnIChhbmQgcmVzcG9uc2VYTUwgbnVsbClcbiAgICAvLyB3aGVuIHRoZSBzdGF0ZSBpcyBub3QgTE9BRElORyBvciBET05FLiBJbnN0ZWFkLCBJRSBjYW5cbiAgICAvLyB0aHJvdyB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMsIGZvciBleGFtcGxlIHdoZW4gYSByZXF1ZXN0IGlzIGFib3J0ZWRcbiAgICAvLyBvciBubyBkYXRhIGlzIGF2YWlsYWJsZSB5ZXQuXG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sICdDYW4gbm90IGdldCByZXNwb25zZVRleHQ6ICcgKyBlLm1lc3NhZ2UpO1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuXG4vKipcbiAqIEdldCB0aGUgcmVzcG9uc2UgYm9keSBmcm9tIHRoZSBYaHIgb2JqZWN0LiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgYXZhaWxhYmxlXG4gKiBpbiBJRSBzaW5jZSB2ZXJzaW9uIDcgYWNjb3JkaW5nIHRvIE1TRE46XG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvbXM1MzQzNjgodj12cy44NSkuYXNweFxuICogV2lsbCBvbmx5IHJldHVybiBjb3JyZWN0IHJlc3VsdCB3aGVuIGNhbGxlZCBmcm9tIHRoZSBjb250ZXh0IG9mIGEgY2FsbGJhY2suXG4gKlxuICogT25lIG9wdGlvbiBpcyB0byBjb25zdHJ1Y3QgYSBWQkFycmF5IGZyb20gdGhlIHJldHVybmVkIG9iamVjdCBhbmQgY29udmVydFxuICogaXQgdG8gYSBKYXZhU2NyaXB0IGFycmF5IHVzaW5nIHRoZSB0b0FycmF5IG1ldGhvZDpcbiAqIGAobmV3IHdpbmRvd1snVkJBcnJheSddKHhocklvLmdldFJlc3BvbnNlQm9keSgpKSkudG9BcnJheSgpYFxuICogVGhpcyB3aWxsIHJlc3VsdCBpbiBhbiBhcnJheSBvZiBudW1iZXJzIGluIHRoZSByYW5nZSBvZiBbMC4uMjU1XVxuICpcbiAqIEFub3RoZXIgb3B0aW9uIGlzIHRvIHVzZSB0aGUgVkJTY3JpcHQgQ1N0ciBtZXRob2QgdG8gY29udmVydCBpdCBpbnRvIGFcbiAqIHN0cmluZyBhcyBvdXRsaW5lZCBpbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5MTk5NzJcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IEJpbmFyeSByZXN1bHQgZnJvbSB0aGUgc2VydmVyIG9yIG51bGwgaWYgbm90IGF2YWlsYWJsZS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlQm9keSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRyeSB7XG4gICAgaWYgKHRoaXMueGhyXyAmJiAncmVzcG9uc2VCb2R5JyBpbiB0aGlzLnhocl8pIHtcbiAgICAgIHJldHVybiB0aGlzLnhocl9bJ3Jlc3BvbnNlQm9keSddO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIGNhbiB0aHJvdyB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMsIGZvciBleGFtcGxlIHdoZW4gYSByZXF1ZXN0IGlzIGFib3J0ZWRcbiAgICAvLyBvciBubyBkYXRhIGlzIHlldCBhdmFpbGFibGUuXG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sICdDYW4gbm90IGdldCByZXNwb25zZUJvZHk6ICcgKyBlLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuXG4vKipcbiAqIEdldCB0aGUgcmVzcG9uc2UgWE1MIGZyb20gdGhlIFhociBvYmplY3RcbiAqIFdpbGwgb25seSByZXR1cm4gY29ycmVjdCByZXN1bHQgd2hlbiBjYWxsZWQgZnJvbSB0aGUgY29udGV4dCBvZiBhIGNhbGxiYWNrLlxuICogQHJldHVybiB7RG9jdW1lbnR9IFRoZSBET00gRG9jdW1lbnQgcmVwcmVzZW50aW5nIHRoZSBYTUwgZmlsZSwgb3IgbnVsbFxuICogaWYgbm8gcmVzdWx0IGF2YWlsYWJsZS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlWG1sID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdHJ5IHtcbiAgICByZXR1cm4gdGhpcy54aHJfID8gdGhpcy54aHJfLnJlc3BvbnNlWE1MIDogbnVsbDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGdvb2cubG9nLmZpbmUodGhpcy5sb2dnZXJfLCAnQ2FuIG5vdCBnZXQgcmVzcG9uc2VYTUw6ICcgKyBlLm1lc3NhZ2UpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSByZXNwb25zZSBhbmQgZXZhbHVhdGVzIGl0IGFzIEpTT04gZnJvbSB0aGUgWGhyIG9iamVjdFxuICogV2lsbCBvbmx5IHJldHVybiBjb3JyZWN0IHJlc3VsdCB3aGVuIGNhbGxlZCBmcm9tIHRoZSBjb250ZXh0IG9mIGEgY2FsbGJhY2tcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3hzc2lQcmVmaXggT3B0aW9uYWwgWFNTSSBwcmVmaXggc3RyaW5nIHRvIHVzZSBmb3JcbiAqICAgICBzdHJpcHBpbmcgb2YgdGhlIHJlc3BvbnNlIGJlZm9yZSBwYXJzaW5nLiBUaGlzIG5lZWRzIHRvIGJlIHNldCBvbmx5IGlmXG4gKiAgICAgeW91ciBiYWNrZW5kIHNlcnZlciBwcmVwZW5kcyB0aGUgc2FtZSBwcmVmaXggc3RyaW5nIHRvIHRoZSBKU09OIHJlc3BvbnNlLlxuICogQHRocm93cyBFcnJvciBpZiB0aGUgcmVzcG9uc2UgdGV4dCBpcyBpbnZhbGlkIEpTT04uXG4gKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlSnNvbiA9IGZ1bmN0aW9uKG9wdF94c3NpUHJlZml4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnhocl8pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlVGV4dCA9IHRoaXMueGhyXy5yZXNwb25zZVRleHQ7XG4gIGlmIChvcHRfeHNzaVByZWZpeCAmJiByZXNwb25zZVRleHQuaW5kZXhPZihvcHRfeHNzaVByZWZpeCkgPT0gMCkge1xuICAgIHJlc3BvbnNlVGV4dCA9IHJlc3BvbnNlVGV4dC5zdWJzdHJpbmcob3B0X3hzc2lQcmVmaXgubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiBnb29nLmpzb24uaHlicmlkLnBhcnNlKHJlc3BvbnNlVGV4dCk7XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSByZXNwb25zZSBhcyB0aGUgdHlwZSBzcGVjaWZpY2VkIGJ5IHtAbGluayAjc2V0UmVzcG9uc2VUeXBlfS4gQXQgdGltZVxuICogb2Ygd3JpdGluZywgdGhpcyBpcyBvbmx5IGRpcmVjdGx5IHN1cHBvcnRlZCBpbiB2ZXJ5IHJlY2VudCB2ZXJzaW9ucyBvZiBXZWJLaXRcbiAqICgxMC4wLjYxMi4xIGRldiBhbmQgbGF0ZXIpLiBJZiB0aGUgZmllbGQgaXMgbm90IHN1cHBvcnRlZCBkaXJlY3RseSwgd2Ugd2lsbFxuICogdHJ5IHRvIGVtdWxhdGUgaXQuXG4gKlxuICogRW11bGF0aW5nIHRoZSByZXNwb25zZSBtZWFucyBmb2xsb3dpbmcgdGhlIHJ1bGVzIGxhaWQgb3V0IGF0XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXJlc3BvbnNlLWF0dHJpYnV0ZVxuICpcbiAqIE9uIGJyb3dzZXJzIHdpdGggbm8gc3VwcG9ydCBmb3IgdGhpcyAoQ2hyb21lIDwgMTAsIEZpcmVmb3ggPCA0LCBldGMpLCBvbmx5XG4gKiByZXNwb25zZSB0eXBlcyBvZiBERUZBVUxUIG9yIFRFWFQgbWF5IGJlIHVzZWQsIGFuZCB0aGUgcmVzcG9uc2UgcmV0dXJuZWQgd2lsbFxuICogYmUgdGhlIHRleHQgcmVzcG9uc2UuXG4gKlxuICogT24gYnJvd3NlcnMgd2l0aCBNb3ppbGxhJ3MgZHJhZnQgc3VwcG9ydCBmb3IgYXJyYXkgYnVmZmVycyAoRmlyZWZveCA0LCA1KSxcbiAqIG9ubHkgcmVzcG9uc2UgdHlwZXMgb2YgREVGQVVMVCwgVEVYVCwgYW5kIEFSUkFZX0JVRkZFUiBtYXkgYmUgdXNlZCwgYW5kIHRoZVxuICogcmVzcG9uc2UgcmV0dXJuZWQgd2lsbCBiZSBlaXRoZXIgdGhlIHRleHQgcmVzcG9uc2Ugb3IgdGhlIE1vemlsbGFcbiAqIGltcGxlbWVudGF0aW9uIG9mIHRoZSBhcnJheSBidWZmZXIgcmVzcG9uc2UuXG4gKlxuICogT24gYnJvd3NlcnMgd2lsbCBmdWxsIHN1cHBvcnQsIGFueSB2YWxpZCByZXNwb25zZSB0eXBlIHN1cHBvcnRlZCBieSB0aGVcbiAqIGJyb3dzZXIgbWF5IGJlIHVzZWQsIGFuZCB0aGUgcmVzcG9uc2UgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgd2lsbCBiZVxuICogcmV0dXJuZWQuXG4gKlxuICogQHJldHVybiB7Kn0gVGhlIHJlc3BvbnNlLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0UmVzcG9uc2UgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0cnkge1xuICAgIGlmICghdGhpcy54aHJfKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCdyZXNwb25zZScgaW4gdGhpcy54aHJfKSB7XG4gICAgICByZXR1cm4gdGhpcy54aHJfLnJlc3BvbnNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMucmVzcG9uc2VUeXBlXykge1xuICAgICAgY2FzZSBSZXNwb25zZVR5cGUuREVGQVVMVDpcbiAgICAgIGNhc2UgUmVzcG9uc2VUeXBlLlRFWFQ6XG4gICAgICAgIHJldHVybiB0aGlzLnhocl8ucmVzcG9uc2VUZXh0O1xuICAgICAgLy8gRE9DVU1FTlQgYW5kIEJMT0IgZG9uJ3QgbmVlZCB0byBiZSBoYW5kbGVkIGhlcmUgYmVjYXVzZSB0aGV5IGFyZVxuICAgICAgLy8gaW50cm9kdWNlZCBpbiB0aGUgc2FtZSBzcGVjIHRoYXQgYWRkcyB0aGUgLnJlc3BvbnNlIGZpZWxkLCBhbmQgd291bGRcbiAgICAgIC8vIGhhdmUgYmVlbiBjYXVnaHQgYWJvdmUuXG4gICAgICAvLyBBUlJBWV9CVUZGRVIgbmVlZHMgYW4gaW1wbGVtZW50YXRpb24gZm9yIEZpcmVmb3ggNCwgd2hlcmUgaXQgd2FzXG4gICAgICAvLyBpbXBsZW1lbnRlZCB1c2luZyBhIGRyYWZ0IHNwZWMgcmF0aGVyIHRoYW4gdGhlIGZpbmFsIHNwZWMuXG4gICAgICBjYXNlIFJlc3BvbnNlVHlwZS5BUlJBWV9CVUZGRVI6XG4gICAgICAgIGlmICgnbW96UmVzcG9uc2VBcnJheUJ1ZmZlcicgaW4gdGhpcy54aHJfKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMueGhyXy5tb3pSZXNwb25zZUFycmF5QnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEZlbGwgdGhyb3VnaCB0byBhIHJlc3BvbnNlIHR5cGUgdGhhdCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci5cbiAgICBnb29nLmxvZy5lcnJvcihcbiAgICAgICAgdGhpcy5sb2dnZXJfLFxuICAgICAgICAnUmVzcG9uc2UgdHlwZSAnICsgdGhpcy5yZXNwb25zZVR5cGVfICsgJyBpcyBub3QgJyArXG4gICAgICAgICAgICAnc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlcicpO1xuICAgIHJldHVybiBudWxsO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sICdDYW4gbm90IGdldCByZXNwb25zZTogJyArIGUubWVzc2FnZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSByZXNwb25zZS1oZWFkZXIgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBmcm9tIHRoZSBYaHIgb2JqZWN0XG4gKiBXaWxsIG9ubHkgcmV0dXJuIGNvcnJlY3QgcmVzdWx0IHdoZW4gY2FsbGVkIGZyb20gdGhlIGNvbnRleHQgb2YgYSBjYWxsYmFja1xuICogYW5kIHRoZSByZXF1ZXN0IGhhcyBjb21wbGV0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlLWhlYWRlciB0byByZXRyaWV2ZS5cbiAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFRoZSB2YWx1ZSBvZiB0aGUgcmVzcG9uc2UtaGVhZGVyIG5hbWVkIGtleS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24oa2V5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnhocl8gfHwgIXRoaXMuaXNDb21wbGV0ZSgpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlID0gdGhpcy54aHJfLmdldFJlc3BvbnNlSGVhZGVyKGtleSk7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIHRleHQgb2YgYWxsIHRoZSBoZWFkZXJzIGluIHRoZSByZXNwb25zZS5cbiAqIFdpbGwgb25seSByZXR1cm4gY29ycmVjdCByZXN1bHQgd2hlbiBjYWxsZWQgZnJvbSB0aGUgY29udGV4dCBvZiBhIGNhbGxiYWNrXG4gKiBhbmQgdGhlIHJlcXVlc3QgaGFzIGNvbXBsZXRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSByZXNwb25zZSBoZWFkZXJzIG9yIGVtcHR5IHN0cmluZy5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldEFsbFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIGdldEFsbFJlc3BvbnNlSGVhZGVycyBjYW4gcmV0dXJuIG51bGwgaWYgbm8gcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQsXG4gIC8vIGVuc3VyZSB3ZSBhbHdheXMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cbiAgcmV0dXJuIHRoaXMueGhyXyAmJiB0aGlzLmlzQ29tcGxldGUoKSA/XG4gICAgICAodGhpcy54aHJfLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKSA6XG4gICAgICAnJztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGFsbCByZXNwb25zZSBoZWFkZXJzIGFzIGEga2V5LXZhbHVlIG1hcC5cbiAqIE11bHRpcGxlIHZhbHVlcyBmb3IgdGhlIHNhbWUgaGVhZGVyIGtleSBjYW4gYmUgY29tYmluZWQgaW50byBvbmUsXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb21tYSBhbmQgYSBzcGFjZS5cbiAqIE5vdGUgdGhhdCB0aGUgbmF0aXZlIGdldFJlc3BvbnNlSGVhZGVyIG1ldGhvZCBmb3IgcmV0cmlldmluZyBhIHNpbmdsZSBoZWFkZXJcbiAqIGRvZXMgYSBjYXNlIGluc2Vuc2l0aXZlIG1hdGNoIG9uIHRoZSBoZWFkZXIgbmFtZS4gVGhpcyBtZXRob2QgZG9lcyBub3RcbiAqIGluY2x1ZGUgYW55IGNhc2Ugbm9ybWFsaXphdGlvbiBsb2dpYywgaXQgd2lsbCBqdXN0IHJldHVybiBhIGtleS12YWx1ZVxuICogcmVwcmVzZW50YXRpb24gb2YgdGhlIGhlYWRlcnMuXG4gKiBTZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtZ2V0cmVzcG9uc2VoZWFkZXIoKS1tZXRob2RcbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBBbiBvYmplY3Qgd2l0aCB0aGUgaGVhZGVyIGtleXMgYXMga2V5c1xuICogICAgIGFuZCBoZWFkZXIgdmFsdWVzIGFzIHZhbHVlcy5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRPRE8odXNlcik6IE1ha2UgdGhpcyBmdW5jdGlvbiBwYXJzZSBoZWFkZXJzIGFzIHBlciB0aGUgc3BlY1xuICAvLyAoaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTYjc2VjdGlvbi00LjIpLlxuXG4gIGNvbnN0IGhlYWRlcnNPYmplY3QgPSB7fTtcbiAgY29uc3QgaGVhZGVyc0FycmF5ID0gdGhpcy5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgnXFxyXFxuJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVyc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UoaGVhZGVyc0FycmF5W2ldKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGtleVZhbHVlID1cbiAgICAgICAgZ29vZy5zdHJpbmcuc3BsaXRMaW1pdChoZWFkZXJzQXJyYXlbaV0sICc6JywgLyogbWF4U3BsaXRDb3VudD0gKi8gMSk7XG4gICAgY29uc3Qga2V5ID0ga2V5VmFsdWVbMF07XG4gICAgbGV0IHZhbHVlID0ga2V5VmFsdWVbMV07XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhlcmUgbXVzdCBiZSBhIHZhbHVlIGJ1dCBpdCBjYW4gYmUgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIFdoaXRlc3BhY2UgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHZhbHVlIGlzIG1lYW5pbmdsZXNzLlxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICAgIC8vIFRoZSBrZXkgc2hvdWxkIG5vdCBjb250YWluIHdoaXRlc3BhY2UgYnV0IHdlIGN1cnJlbnRseSBpZ25vcmUgdGhhdC5cblxuICAgIGNvbnN0IHZhbHVlcyA9IGhlYWRlcnNPYmplY3Rba2V5XSB8fCBbXTtcbiAgICBoZWFkZXJzT2JqZWN0W2tleV0gPSB2YWx1ZXM7XG4gICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIGdvb2cub2JqZWN0Lm1hcChoZWFkZXJzT2JqZWN0LCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHZhbHVlcy5qb2luKCcsICcpO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSByZXNwb25zZS1oZWFkZXIgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBmcm9tIHRoZSBYaHIgb2JqZWN0LlxuICogQXMgb3Bwb3NlZCB0byB7QGxpbmsgI2dldFJlc3BvbnNlSGVhZGVyfSwgdGhpcyBtZXRob2QgZG9lcyBub3QgcmVxdWlyZSB0aGF0XG4gKiB0aGUgcmVxdWVzdCBoYXMgY29tcGxldGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2UtaGVhZGVyIHRvIHJldHJpZXZlLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSByZXNwb25zZS1oZWFkZXIsIG9yIG51bGwgaWYgaXQgaXNcbiAqICAgICB1bmF2YWlsYWJsZS5cbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFN0cmVhbWluZ1Jlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24oa2V5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMueGhyXyA/IHRoaXMueGhyXy5nZXRSZXNwb25zZUhlYWRlcihrZXkpIDogbnVsbDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSB0ZXh0IG9mIGFsbCB0aGUgaGVhZGVycyBpbiB0aGUgcmVzcG9uc2UuIEFzIG9wcG9zZWQgdG9cbiAqIHtAbGluayAjZ2V0QWxsUmVzcG9uc2VIZWFkZXJzfSwgdGhpcyBtZXRob2QgZG9lcyBub3QgcmVxdWlyZSB0aGF0IHRoZSByZXF1ZXN0XG4gKiBoYXMgY29tcGxldGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmFsdWUgb2YgdGhlIHJlc3BvbnNlIGhlYWRlcnMgb3IgZW1wdHkgc3RyaW5nLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0QWxsU3RyZWFtaW5nUmVzcG9uc2VIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMueGhyXyA/IHRoaXMueGhyXy5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSA6ICcnO1xufTtcblxuXG4vKipcbiAqIEdldCB0aGUgbGFzdCBlcnJvciBtZXNzYWdlXG4gKiBAcmV0dXJuIHshZ29vZy5uZXQuRXJyb3JDb2RlfSBMYXN0IGVycm9yIGNvZGUuXG4gKi9cbmdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMubGFzdEVycm9yQ29kZV87XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSBsYXN0IGVycm9yIG1lc3NhZ2VcbiAqIEByZXR1cm4ge3N0cmluZ30gTGFzdCBlcnJvciBtZXNzYWdlLlxuICovXG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0TGFzdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHR5cGVvZiB0aGlzLmxhc3RFcnJvcl8gPT09ICdzdHJpbmcnID8gdGhpcy5sYXN0RXJyb3JfIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRoaXMubGFzdEVycm9yXyk7XG59O1xuXG5cbi8qKlxuICogQWRkcyB0aGUgbGFzdCBtZXRob2QsIHN0YXR1cyBhbmQgVVJJIHRvIHRoZSBtZXNzYWdlLiAgVGhpcyBpcyB1c2VkIHRvIGFkZFxuICogdGhpcyBpbmZvcm1hdGlvbiB0byB0aGUgbG9nZ2luZyBjYWxscy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgVGhlIG1lc3NhZ2UgdGV4dCB0aGF0IHdlIHdhbnQgdG8gYWRkIHRoZSBleHRyYSB0ZXh0IHRvLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbWVzc2FnZSB3aXRoIHRoZSBleHRyYSB0ZXh0IGFwcGVuZGVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmZvcm1hdE1zZ18gPSBmdW5jdGlvbihtc2cpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbXNnICsgJyBbJyArIHRoaXMubGFzdE1ldGhvZF8gKyAnICcgKyB0aGlzLmxhc3RVcmlfICsgJyAnICtcbiAgICAgIHRoaXMuZ2V0U3RhdHVzKCkgKyAnXSc7XG59O1xuXG5cbi8vIFJlZ2lzdGVyIHRoZSB4aHIgaGFuZGxlciBhcyBhbiBlbnRyeSBwb2ludCwgc28gdGhhdFxuLy8gaXQgY2FuIGJlIG1vbml0b3JlZCBmb3IgZXhjZXB0aW9uIGhhbmRsaW5nLCBldGMuXG5nb29nLmRlYnVnLmVudHJ5UG9pbnRSZWdpc3RyeS5yZWdpc3RlcihcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFGdW5jdGlvbik6ICFGdW5jdGlvbn0gdHJhbnNmb3JtZXIgVGhlIHRyYW5zZm9ybWluZ1xuICAgICAqICAgICBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLm9uUmVhZHlTdGF0ZUNoYW5nZUVudHJ5UG9pbnRfID1cbiAgICAgICAgICB0cmFuc2Zvcm1lcihnb29nLm5ldC5YaHJJby5wcm90b3R5cGUub25SZWFkeVN0YXRlQ2hhbmdlRW50cnlQb2ludF8pO1xuICAgIH0pO1xufSk7ICAvLyBnb29nLnNjb3BlXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBwYXRjaGVkLCBzdGFuZGFyZGl6ZWQgZXZlbnQgb2JqZWN0IGZvciBicm93c2VyIGV2ZW50cy5cbiAqXG4gKiA8cHJlPlxuICogVGhlIHBhdGNoZWQgZXZlbnQgb2JqZWN0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbWVtYmVyczpcbiAqIC0gdHlwZSAgICAgICAgICAge3N0cmluZ30gICAgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snXG4gKiAtIHRhcmdldCAgICAgICAgIHtPYmplY3R9ICAgIFRoZSBlbGVtZW50IHRoYXQgYWN0dWFsbHkgdHJpZ2dlcmVkIHRoZSBldmVudFxuICogLSBjdXJyZW50VGFyZ2V0ICB7T2JqZWN0fSAgICBUaGUgZWxlbWVudCB0aGUgbGlzdGVuZXIgaXMgYXR0YWNoZWQgdG9cbiAqIC0gcmVsYXRlZFRhcmdldCAge09iamVjdH0gICAgRm9yIG1vdXNlb3ZlciBhbmQgbW91c2VvdXQsIHRoZSBwcmV2aW91cyBvYmplY3RcbiAqIC0gb2Zmc2V0WCAgICAgICAge251bWJlcn0gICAgWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRhcmdldFxuICogLSBvZmZzZXRZICAgICAgICB7bnVtYmVyfSAgICBZLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGFyZ2V0XG4gKiAtIGNsaWVudFggICAgICAgIHtudW1iZXJ9ICAgIFgtY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB2aWV3cG9ydFxuICogLSBjbGllbnRZICAgICAgICB7bnVtYmVyfSAgICBZLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAqIC0gc2NyZWVuWCAgICAgICAge251bWJlcn0gICAgWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW5cbiAqIC0gc2NyZWVuWSAgICAgICAge251bWJlcn0gICAgWS1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW5cbiAqIC0gYnV0dG9uICAgICAgICAge251bWJlcn0gICAgTW91c2UgYnV0dG9uLiBVc2UgaXNCdXR0b24oKSB0byB0ZXN0LlxuICogLSBrZXlDb2RlICAgICAgICB7bnVtYmVyfSAgICBLZXktY29kZVxuICogLSBjdHJsS2V5ICAgICAgICB7Ym9vbGVhbn0gICBXYXMgY3RybCBrZXkgZGVwcmVzc2VkXG4gKiAtIGFsdEtleSAgICAgICAgIHtib29sZWFufSAgIFdhcyBhbHQga2V5IGRlcHJlc3NlZFxuICogLSBzaGlmdEtleSAgICAgICB7Ym9vbGVhbn0gICBXYXMgc2hpZnQga2V5IGRlcHJlc3NlZFxuICogLSBtZXRhS2V5ICAgICAgICB7Ym9vbGVhbn0gICBXYXMgbWV0YSBrZXkgZGVwcmVzc2VkXG4gKiAtIHBvaW50ZXJJZCAgICAgIHtudW1iZXJ9ICAgIFBvaW50ZXIgSURcbiAqIC0gcG9pbnRlclR5cGUgICAge3N0cmluZ30gICAgUG9pbnRlciB0eXBlLCBlLmcuICdtb3VzZScsICdwZW4nLCBvciAndG91Y2gnXG4gKiAtIGRlZmF1bHRQcmV2ZW50ZWQge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGRlZmF1bHQgYWN0aW9uIGhhcyBiZWVuIHByZXZlbnRlZFxuICogLSBzdGF0ZSAgICAgICAgICB7T2JqZWN0fSAgICBIaXN0b3J5IHN0YXRlIG9iamVjdFxuICpcbiAqIE5PVEU6IFRoZSBrZXlDb2RlIG1lbWJlciBjb250YWlucyB0aGUgcmF3IGJyb3dzZXIga2V5Q29kZS4gRm9yIG5vcm1hbGl6ZWRcbiAqIGtleSBhbmQgY2hhcmFjdGVyIGNvZGUgdXNlIHtAbGluayBnb29nLmV2ZW50cy5LZXlIYW5kbGVyfS5cbiAqIDwvcHJlPlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Jyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5Nb3VzZUJ1dHRvbicpO1xuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuUG9pbnRlclR5cGUnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmRlYnVnJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50VHlwZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnJlZmxlY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuLyoqXG4gKiBBY2NlcHRzIGEgYnJvd3NlciBldmVudCBvYmplY3QgYW5kIGNyZWF0ZXMgYSBwYXRjaGVkLCBjcm9zcyBicm93c2VyIGV2ZW50XG4gKiBvYmplY3QuXG4gKiBUaGUgY29udGVudCBvZiB0aGlzIG9iamVjdCB3aWxsIG5vdCBiZSBpbml0aWFsaXplZCBpZiBubyBldmVudCBvYmplY3QgaXNcbiAqIHByb3ZpZGVkLiBJZiB0aGlzIGlzIHRoZSBjYXNlLCBpbml0KCkgbmVlZHMgdG8gYmUgaW52b2tlZCBzZXBhcmF0ZWx5LlxuICogQHBhcmFtIHtFdmVudD19IG9wdF9lIEJyb3dzZXIgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtFdmVudFRhcmdldD19IG9wdF9jdXJyZW50VGFyZ2V0IEN1cnJlbnQgdGFyZ2V0IGZvciBldmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuZXZlbnRzLkV2ZW50fVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQgPSBmdW5jdGlvbihvcHRfZSwgb3B0X2N1cnJlbnRUYXJnZXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InLCBvcHRfZSA/IG9wdF9lLnR5cGUgOiAnJyk7XG5cbiAgLyoqXG4gICAqIFRhcmdldCB0aGF0IGZpcmVkIHRoZSBldmVudC5cbiAgICogQG92ZXJyaWRlXG4gICAqIEB0eXBlIHs/Tm9kZX1cbiAgICovXG4gIHRoaXMudGFyZ2V0ID0gbnVsbDtcblxuICAvKipcbiAgICogTm9kZSB0aGF0IGhhZCB0aGUgbGlzdGVuZXIgYXR0YWNoZWQuXG4gICAqIEBvdmVycmlkZVxuICAgKiBAdHlwZSB7P05vZGV8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcblxuICAvKipcbiAgICogRm9yIG1vdXNlb3ZlciBhbmQgbW91c2VvdXQgZXZlbnRzLCB0aGUgcmVsYXRlZCBvYmplY3QgZm9yIHRoZSBldmVudC5cbiAgICogQHR5cGUgez9Ob2RlfVxuICAgKi9cbiAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gbnVsbDtcblxuICAvKipcbiAgICogWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRhcmdldC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMub2Zmc2V0WCA9IDA7XG5cbiAgLyoqXG4gICAqIFktY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB0YXJnZXQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLm9mZnNldFkgPSAwO1xuXG4gIC8qKlxuICAgKiBYLWNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGhlIHdpbmRvdy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuY2xpZW50WCA9IDA7XG5cbiAgLyoqXG4gICAqIFktY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB0aGUgd2luZG93LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jbGllbnRZID0gMDtcblxuICAvKipcbiAgICogWC1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBtb25pdG9yLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5zY3JlZW5YID0gMDtcblxuICAvKipcbiAgICogWS1jb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBtb25pdG9yLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5zY3JlZW5ZID0gMDtcblxuICAvKipcbiAgICogV2hpY2ggbW91c2UgYnV0dG9uIHdhcyBwcmVzc2VkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5idXR0b24gPSAwO1xuXG4gIC8qKlxuICAgKiBLZXkgb2Yga2V5IHByZXNzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5rZXkgPSAnJztcblxuICAvKipcbiAgICogS2V5Y29kZSBvZiBrZXkgcHJlc3MuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmtleUNvZGUgPSAwO1xuXG4gIC8qKlxuICAgKiBLZXljb2RlIG9mIGtleSBwcmVzcy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuY2hhckNvZGUgPSAwO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGNvbnRyb2wgd2FzIHByZXNzZWQgYXQgdGltZSBvZiBldmVudC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmN0cmxLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciBhbHQgd2FzIHByZXNzZWQgYXQgdGltZSBvZiBldmVudC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmFsdEtleSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHNoaWZ0IHdhcyBwcmVzc2VkIGF0IHRpbWUgb2YgZXZlbnQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5zaGlmdEtleSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBtZXRhIGtleSB3YXMgcHJlc3NlZCBhdCB0aW1lIG9mIGV2ZW50LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMubWV0YUtleSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBIaXN0b3J5IHN0YXRlIG9iamVjdCwgb25seSBzZXQgZm9yIFBvcFN0YXRlIGV2ZW50cyB3aGVyZSBpdCdzIGEgY29weSBvZiB0aGVcbiAgICogc3RhdGUgb2JqZWN0IHByb3ZpZGVkIHRvIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGUuXG4gICAqIEB0eXBlIHs/T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRlZmF1bHQgcGxhdGZvcm0gbW9kaWZpZXIga2V5IHdhcyBwcmVzc2VkIGF0IHRpbWUgb2YgZXZlbnQuXG4gICAqIChUaGlzIGlzIGNvbnRyb2wgZm9yIGFsbCBwbGF0Zm9ybXMgZXhjZXB0IE1hYywgd2hlcmUgaXQncyBNZXRhLilcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnBsYXRmb3JtTW9kaWZpZXJLZXkgPSBmYWxzZTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucG9pbnRlcklkID0gMDtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMucG9pbnRlclR5cGUgPSAnJztcblxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgZXZlbnQgb2JqZWN0LlxuICAgKiBAcHJpdmF0ZSB7P0V2ZW50fVxuICAgKi9cbiAgdGhpcy5ldmVudF8gPSBudWxsO1xuXG4gIGlmIChvcHRfZSkge1xuICAgIHRoaXMuaW5pdChvcHRfZSwgb3B0X2N1cnJlbnRUYXJnZXQpO1xuICB9XG59O1xuZ29vZy5pbmhlcml0cyhnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQsIGdvb2cuZXZlbnRzLkV2ZW50KTtcblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBJZiB0cnVlLCB1c2UgdGhlIGxheWVyWCBhbmQgbGF5ZXJZIHByb3BlcnRpZXMgb2YgYSBuYXRpdmVcbiAqIGJyb3dzZXIgZXZlbnQgb3ZlciB0aGUgb2Zmc2V0WCBhbmQgb2Zmc2V0WSBwcm9wZXJ0aWVzLCB3aGljaCBjYXVzZSBleHBlbnNpdmVcbiAqIHJlZmxvdy4gSWYgbGF5ZXJYIG9yIGxheWVyWSBpcyBub3QgZGVmaW5lZCwgb2Zmc2V0WCBhbmQgb2Zmc2V0WSB3aWxsIGJlIHVzZWRcbiAqIGFzIHVzdWFsLlxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuVVNFX0xBWUVSX1hZX0FTX09GRlNFVF9YWSA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5VU0VfTEFZRVJfWFlfQVNfT0ZGU0VUX1hZJywgZmFsc2UpO1xuXG5cbi8qKlxuICogTm9ybWFsaXplZCBidXR0b24gY29uc3RhbnRzIGZvciB0aGUgbW91c2UuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuTW91c2VCdXR0b24gPSB7XG4gIExFRlQ6IDAsXG4gIE1JRERMRTogMSxcbiAgUklHSFQ6IDJcbn07XG5cblxuLyoqXG4gKiBOb3JtYWxpemVkIHBvaW50ZXIgdHlwZSBjb25zdGFudHMgZm9yIHBvaW50ZXIgZXZlbnRzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LlBvaW50ZXJUeXBlID0ge1xuICBNT1VTRTogJ21vdXNlJyxcbiAgUEVOOiAncGVuJyxcbiAgVE9VQ0g6ICd0b3VjaCdcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgZGF0YSBmb3IgbWFwcGluZyBtb3VzZSBidXR0b25zLlxuICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxuICogQGRlcHJlY2F0ZWQgVXNlIGBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuSUVfQlVUVE9OX01BUGAgaW5zdGVhZC5cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LklFQnV0dG9uTWFwID0gZ29vZy5kZWJ1Zy5mcmVlemUoW1xuICAxLCAgLy8gTEVGVFxuICA0LCAgLy8gTUlERExFXG4gIDIgICAvLyBSSUdIVFxuXSk7XG5cblxuLyoqXG4gKiBTdGF0aWMgZGF0YSBmb3IgbWFwcGluZyBtb3VzZSBidXR0b25zLlxuICogQGNvbnN0IHshQXJyYXk8bnVtYmVyPn1cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LklFX0JVVFRPTl9NQVAgPSBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuSUVCdXR0b25NYXA7XG5cblxuLyoqXG4gKiBTdGF0aWMgZGF0YSBmb3IgbWFwcGluZyBNU1BvaW50ZXJFdmVudCB0eXBlcyB0byBQb2ludGVyRXZlbnQgdHlwZXMuXG4gKiBAY29uc3QgeyFPYmplY3Q8bnVtYmVyLCBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuUG9pbnRlclR5cGU+fVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuSUVfUE9JTlRFUl9UWVBFX01BUCA9IGdvb2cuZGVidWcuZnJlZXplKHtcbiAgMjogZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LlBvaW50ZXJUeXBlLlRPVUNILFxuICAzOiBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuUG9pbnRlclR5cGUuUEVOLFxuICA0OiBnb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuUG9pbnRlclR5cGUuTU9VU0Vcbn0pO1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIGJyb3dzZXIgZXZlbnQgb2JqZWN0IGFuZCBjcmVhdGVzIGEgcGF0Y2hlZCwgY3Jvc3MgYnJvd3NlciBldmVudFxuICogb2JqZWN0LlxuICogQHBhcmFtIHtFdmVudH0gZSBCcm93c2VyIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXQ9fSBvcHRfY3VycmVudFRhcmdldCBDdXJyZW50IHRhcmdldCBmb3IgZXZlbnQuXG4gKi9cbmdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGUsIG9wdF9jdXJyZW50VGFyZ2V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHR5cGUgPSB0aGlzLnR5cGUgPSBlLnR5cGU7XG5cbiAgLyoqXG4gICAqIE9uIHRvdWNoIGRldmljZXMgdXNlIHRoZSBmaXJzdCBcImNoYW5nZWQgdG91Y2hcIiBhcyB0aGUgcmVsZXZhbnQgdG91Y2guXG4gICAqIEB0eXBlIHs/VG91Y2h9XG4gICAqL1xuICB2YXIgcmVsZXZhbnRUb3VjaCA9XG4gICAgICBlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IG51bGw7XG5cbiAgLy8gVE9ETyhuaWNrc2FudG9zKTogQ2hhbmdlIHRoaXMudGFyZ2V0IHRvIHR5cGUgRXZlbnRUYXJnZXQuXG4gIHRoaXMudGFyZ2V0ID0gLyoqIEB0eXBlIHtOb2RlfSAqLyAoZS50YXJnZXQpIHx8IGUuc3JjRWxlbWVudDtcblxuICAvLyBUT0RPKG5pY2tzYW50b3MpOiBDaGFuZ2UgdGhpcy5jdXJyZW50VGFyZ2V0IHRvIHR5cGUgRXZlbnRUYXJnZXQuXG4gIHRoaXMuY3VycmVudFRhcmdldCA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKG9wdF9jdXJyZW50VGFyZ2V0KTtcblxuICB2YXIgcmVsYXRlZFRhcmdldCA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGUucmVsYXRlZFRhcmdldCk7XG4gIGlmIChyZWxhdGVkVGFyZ2V0KSB7XG4gICAgLy8gVGhlcmUncyBhIGJ1ZyBpbiBGaXJlRm94IHdoZXJlIHNvbWV0aW1lcywgcmVsYXRlZFRhcmdldCB3aWxsIGJlIGFcbiAgICAvLyBjaHJvbWUgZWxlbWVudCwgYW5kIGFjY2Vzc2luZyBhbnkgcHJvcGVydHkgb2YgaXQgd2lsbCBnZXQgYSBwZXJtaXNzaW9uXG4gICAgLy8gZGVuaWVkIGV4Y2VwdGlvbi4gU2VlOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5Nzc4MFxuICAgIGlmIChnb29nLnVzZXJBZ2VudC5HRUNLTykge1xuICAgICAgaWYgKCFnb29nLnJlZmxlY3QuY2FuQWNjZXNzUHJvcGVydHkocmVsYXRlZFRhcmdldCwgJ25vZGVOYW1lJykpIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT0gZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1ZFUikge1xuICAgIHJlbGF0ZWRUYXJnZXQgPSBlLmZyb21FbGVtZW50O1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1VUKSB7XG4gICAgcmVsYXRlZFRhcmdldCA9IGUudG9FbGVtZW50O1xuICB9XG5cbiAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZFRhcmdldDtcblxuICBpZiAocmVsZXZhbnRUb3VjaCkge1xuICAgIHRoaXMuY2xpZW50WCA9IHJlbGV2YW50VG91Y2guY2xpZW50WCAhPT0gdW5kZWZpbmVkID8gcmVsZXZhbnRUb3VjaC5jbGllbnRYIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGV2YW50VG91Y2gucGFnZVg7XG4gICAgdGhpcy5jbGllbnRZID0gcmVsZXZhbnRUb3VjaC5jbGllbnRZICE9PSB1bmRlZmluZWQgPyByZWxldmFudFRvdWNoLmNsaWVudFkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsZXZhbnRUb3VjaC5wYWdlWTtcbiAgICB0aGlzLnNjcmVlblggPSByZWxldmFudFRvdWNoLnNjcmVlblggfHwgMDtcbiAgICB0aGlzLnNjcmVlblkgPSByZWxldmFudFRvdWNoLnNjcmVlblkgfHwgMDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LlVTRV9MQVlFUl9YWV9BU19PRkZTRVRfWFkpIHtcbiAgICAgIHRoaXMub2Zmc2V0WCA9IChlLmxheWVyWCAhPT0gdW5kZWZpbmVkKSA/IGUubGF5ZXJYIDogZS5vZmZzZXRYO1xuICAgICAgdGhpcy5vZmZzZXRZID0gKGUubGF5ZXJZICE9PSB1bmRlZmluZWQpID8gZS5sYXllclkgOiBlLm9mZnNldFk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlYmtpdCBlbWl0cyBhIGxhbWUgd2FybmluZyB3aGVuZXZlciBsYXllclgvbGF5ZXJZIGlzIGFjY2Vzc2VkLlxuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTAxNzMzXG4gICAgICB0aGlzLm9mZnNldFggPSAoZ29vZy51c2VyQWdlbnQuV0VCS0lUIHx8IGUub2Zmc2V0WCAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgICAgZS5vZmZzZXRYIDpcbiAgICAgICAgICBlLmxheWVyWDtcbiAgICAgIHRoaXMub2Zmc2V0WSA9IChnb29nLnVzZXJBZ2VudC5XRUJLSVQgfHwgZS5vZmZzZXRZICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICBlLm9mZnNldFkgOlxuICAgICAgICAgIGUubGF5ZXJZO1xuICAgIH1cbiAgICB0aGlzLmNsaWVudFggPSBlLmNsaWVudFggIT09IHVuZGVmaW5lZCA/IGUuY2xpZW50WCA6IGUucGFnZVg7XG4gICAgdGhpcy5jbGllbnRZID0gZS5jbGllbnRZICE9PSB1bmRlZmluZWQgPyBlLmNsaWVudFkgOiBlLnBhZ2VZO1xuICAgIHRoaXMuc2NyZWVuWCA9IGUuc2NyZWVuWCB8fCAwO1xuICAgIHRoaXMuc2NyZWVuWSA9IGUuc2NyZWVuWSB8fCAwO1xuICB9XG5cbiAgdGhpcy5idXR0b24gPSBlLmJ1dHRvbjtcblxuICB0aGlzLmtleUNvZGUgPSBlLmtleUNvZGUgfHwgMDtcbiAgdGhpcy5rZXkgPSBlLmtleSB8fCAnJztcbiAgdGhpcy5jaGFyQ29kZSA9IGUuY2hhckNvZGUgfHwgKHR5cGUgPT0gJ2tleXByZXNzJyA/IGUua2V5Q29kZSA6IDApO1xuICB0aGlzLmN0cmxLZXkgPSBlLmN0cmxLZXk7XG4gIHRoaXMuYWx0S2V5ID0gZS5hbHRLZXk7XG4gIHRoaXMuc2hpZnRLZXkgPSBlLnNoaWZ0S2V5O1xuICB0aGlzLm1ldGFLZXkgPSBlLm1ldGFLZXk7XG4gIHRoaXMucGxhdGZvcm1Nb2RpZmllcktleSA9IGdvb2cudXNlckFnZW50Lk1BQyA/IGUubWV0YUtleSA6IGUuY3RybEtleTtcbiAgdGhpcy5wb2ludGVySWQgPSBlLnBvaW50ZXJJZCB8fCAwO1xuICB0aGlzLnBvaW50ZXJUeXBlID0gZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LmdldFBvaW50ZXJUeXBlXyhlKTtcbiAgdGhpcy5zdGF0ZSA9IGUuc3RhdGU7XG4gIHRoaXMuZXZlbnRfID0gZTtcbiAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIC8vIFN5bmMgbmF0aXZlIGV2ZW50IHN0YXRlIHRvIGludGVybmFsIHN0YXRlIHZpYSBzdXBlciBjbGFzcywgd2hlcmUgZGVmYXVsdFxuICAgIC8vIHByZXZlbnRpb24gaXMgaW1wbGVtZW50ZWQgYW5kIG1hbmFnZWQuXG4gICAgZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnN1cGVyQ2xhc3NfLnByZXZlbnREZWZhdWx0LmNhbGwodGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBUZXN0cyB0byBzZWUgd2hpY2ggYnV0dG9uIHdhcyBwcmVzc2VkIGR1cmluZyB0aGUgZXZlbnQuIFRoaXMgaXMgcmVhbGx5IG9ubHlcbiAqIHVzZWZ1bCBpbiBJRSBhbmQgR2Vja28gYnJvd3NlcnMuIEFuZCBpbiBJRSwgaXQncyBvbmx5IHVzZWZ1bCBmb3JcbiAqIG1vdXNlZG93bi9tb3VzZXVwIGV2ZW50cywgYmVjYXVzZSBjbGljayBvbmx5IGZpcmVzIGZvciB0aGUgbGVmdCBtb3VzZSBidXR0b24uXG4gKlxuICogU2FmYXJpIDIgb25seSByZXBvcnRzIHRoZSBsZWZ0IGJ1dHRvbiBiZWluZyBjbGlja2VkLCBhbmQgdXNlcyB0aGUgdmFsdWUgJzEnXG4gKiBpbnN0ZWFkIG9mIDAuIE9wZXJhIG9ubHkgcmVwb3J0cyBhIG1vdXNlZG93biBldmVudCBmb3IgdGhlIG1pZGRsZSBidXR0b24sIGFuZFxuICogbm8gbW91c2UgZXZlbnRzIGZvciB0aGUgcmlnaHQgYnV0dG9uLiBPcGVyYSBoYXMgZGVmYXVsdCBiZWhhdmlvciBmb3IgbGVmdCBhbmRcbiAqIG1pZGRsZSBjbGljayB0aGF0IGNhbiBvbmx5IGJlIG92ZXJyaWRkZW4gdmlhIGEgY29uZmlndXJhdGlvbiBzZXR0aW5nLlxuICpcbiAqIFRoZXJlJ3MgYSBuaWNlIHRhYmxlIG9mIHRoaXMgbWVzcyBhdCBodHRwOi8vd3d3LnVuaXhwYXBhLmNvbS9qcy9tb3VzZS5odG1sLlxuICpcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuQnJvd3NlckV2ZW50Lk1vdXNlQnV0dG9ufSBidXR0b24gVGhlIGJ1dHRvblxuICogICAgIHRvIHRlc3QgZm9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBidXR0b24gd2FzIHByZXNzZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5wcm90b3R5cGUuaXNCdXR0b24gPSBmdW5jdGlvbihidXR0b24pIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5ldmVudF8uYnV0dG9uID09IGJ1dHRvbjtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoaXMgaGFzIGFuIFwiYWN0aW9uXCItcHJvZHVjaW5nIG1vdXNlIGJ1dHRvbi5cbiAqXG4gKiBCeSBkZWZpbml0aW9uLCB0aGlzIGluY2x1ZGVzIGxlZnQtY2xpY2sgb24gd2luZG93cy9saW51eCwgYW5kIGxlZnQtY2xpY2tcbiAqIHdpdGhvdXQgdGhlIGN0cmwga2V5IG9uIE1hY3MuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIHJlc3VsdC5cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnByb3RvdHlwZS5pc01vdXNlQWN0aW9uQnV0dG9uID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gQ3RybCtjbGljayBzaG91bGQgbmV2ZXIgYmVoYXZlIGxpa2UgYSBsZWZ0LWNsaWNrIG9uIG1hYywgcmVnYXJkbGVzcyBvZlxuICAvLyB3aGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciB3aWxsIGFjdHVhbGx5IGV2ZXIgZW1pdCBzdWNoIGFuIGV2ZW50LiAgSWZcbiAgLy8gd2Ugc2VlIGl0LCB0cmVhdCBpdCBsaWtlIHJpZ2h0LWNsaWNrIGFsd2F5cy5cbiAgcmV0dXJuIHRoaXMuaXNCdXR0b24oZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Lk1vdXNlQnV0dG9uLkxFRlQpICYmXG4gICAgICAhKGdvb2cudXNlckFnZW50Lk1BQyAmJiB0aGlzLmN0cmxLZXkpO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5zdXBlckNsYXNzXy5zdG9wUHJvcGFnYXRpb24uY2FsbCh0aGlzKTtcbiAgaWYgKHRoaXMuZXZlbnRfLnN0b3BQcm9wYWdhdGlvbikge1xuICAgIHRoaXMuZXZlbnRfLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZXZlbnRfLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkJyb3dzZXJFdmVudC5zdXBlckNsYXNzXy5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO1xuICB2YXIgYmUgPSB0aGlzLmV2ZW50XztcbiAgaWYgKCFiZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGJlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgYmUucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge0V2ZW50fSBUaGUgdW5kZXJseWluZyBicm93c2VyIGV2ZW50IG9iamVjdC5cbiAqL1xuZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LnByb3RvdHlwZS5nZXRCcm93c2VyRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5ldmVudF87XG59O1xuXG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHBvaW50ZXIgdHlwZSBmcm9tIHRoZSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7IUV2ZW50fSBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwb2ludGVyIHR5cGUsIGUuZy4gJ21vdXNlJywgJ3BlbicsIG9yICd0b3VjaCcuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5Ccm93c2VyRXZlbnQuZ2V0UG9pbnRlclR5cGVfID0gZnVuY3Rpb24oZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgKGUucG9pbnRlclR5cGUpID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBlLnBvaW50ZXJUeXBlO1xuICB9XG4gIC8vIElFMTAgdXNlcyBpbnRlZ2VyIGNvZGVzIGZvciBwb2ludGVyIHR5cGUuXG4gIC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaGg3NzIzNTkodj12cy44NSkuYXNweFxuICByZXR1cm4gZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50LklFX1BPSU5URVJfVFlQRV9NQVBbZS5wb2ludGVyVHlwZV0gfHwgJyc7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEV2ZW50IFR5cGVzLlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5FdmVudFR5cGUnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycycpO1xuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5Nb3VzZUFzTW91c2VFdmVudFR5cGUnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuTW91c2VFdmVudHMnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuUG9pbnRlckFzTW91c2VFdmVudFR5cGUnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuUG9pbnRlckFzVG91Y2hFdmVudFR5cGUnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuUG9pbnRlckZhbGxiYWNrRXZlbnRUeXBlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLlBvaW50ZXJUb3VjaEZhbGxiYWNrRXZlbnRUeXBlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuQnJvd3NlckZlYXR1cmUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBwcmVmaXhlZCBldmVudCBuYW1lIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwcmVmaXhlZCBldmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRWZW5kb3JQcmVmaXhlZE5hbWVfID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXNlckFnZW50LldFQktJVCA/ICd3ZWJraXQnICsgZXZlbnROYW1lIDogZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5cbi8qKlxuICogQ29uc3RhbnRzIGZvciBldmVudCBuYW1lcy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VHlwZSA9IHtcbiAgLy8gTW91c2UgZXZlbnRzXG4gIENMSUNLOiAnY2xpY2snLFxuICBSSUdIVENMSUNLOiAncmlnaHRjbGljaycsXG4gIERCTENMSUNLOiAnZGJsY2xpY2snLFxuICBBVVhDTElDSzogJ2F1eGNsaWNrJyxcbiAgTU9VU0VET1dOOiAnbW91c2Vkb3duJyxcbiAgTU9VU0VVUDogJ21vdXNldXAnLFxuICBNT1VTRU9WRVI6ICdtb3VzZW92ZXInLFxuICBNT1VTRU9VVDogJ21vdXNlb3V0JyxcbiAgTU9VU0VNT1ZFOiAnbW91c2Vtb3ZlJyxcbiAgTU9VU0VFTlRFUjogJ21vdXNlZW50ZXInLFxuICBNT1VTRUxFQVZFOiAnbW91c2VsZWF2ZScsXG5cbiAgLy8gTm9uLWV4aXN0ZW50IGV2ZW50OyB3aWxsIG5ldmVyIGZpcmUuIFRoaXMgZXhpc3RzIGFzIGEgbW91c2UgY291bnRlcnBhcnQgdG9cbiAgLy8gUE9JTlRFUkNBTkNFTC5cbiAgTU9VU0VDQU5DRUw6ICdtb3VzZWNhbmNlbCcsXG5cbiAgLy8gU2VsZWN0aW9uIGV2ZW50cy5cbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdGlvbi1hcGkvXG4gIFNFTEVDVElPTkNIQU5HRTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIFNFTEVDVFNUQVJUOiAnc2VsZWN0c3RhcnQnLCAgLy8gSUUsIFNhZmFyaSwgQ2hyb21lXG5cbiAgLy8gV2hlZWwgZXZlbnRzXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gIFdIRUVMOiAnd2hlZWwnLFxuXG4gIC8vIEtleSBldmVudHNcbiAgS0VZUFJFU1M6ICdrZXlwcmVzcycsXG4gIEtFWURPV046ICdrZXlkb3duJyxcbiAgS0VZVVA6ICdrZXl1cCcsXG5cbiAgLy8gRm9jdXNcbiAgQkxVUjogJ2JsdXInLFxuICBGT0NVUzogJ2ZvY3VzJyxcbiAgREVBQ1RJVkFURTogJ2RlYWN0aXZhdGUnLCAgLy8gSUUgb25seVxuICBGT0NVU0lOOiAnZm9jdXNpbicsXG4gIEZPQ1VTT1VUOiAnZm9jdXNvdXQnLFxuXG4gIC8vIEZvcm1zXG4gIENIQU5HRTogJ2NoYW5nZScsXG4gIFJFU0VUOiAncmVzZXQnLFxuICBTRUxFQ1Q6ICdzZWxlY3QnLFxuICBTVUJNSVQ6ICdzdWJtaXQnLFxuICBJTlBVVDogJ2lucHV0JyxcbiAgUFJPUEVSVFlDSEFOR0U6ICdwcm9wZXJ0eWNoYW5nZScsICAvLyBJRSBvbmx5XG5cbiAgLy8gRHJhZyBhbmQgZHJvcFxuICBEUkFHU1RBUlQ6ICdkcmFnc3RhcnQnLFxuICBEUkFHOiAnZHJhZycsXG4gIERSQUdFTlRFUjogJ2RyYWdlbnRlcicsXG4gIERSQUdPVkVSOiAnZHJhZ292ZXInLFxuICBEUkFHTEVBVkU6ICdkcmFnbGVhdmUnLFxuICBEUk9QOiAnZHJvcCcsXG4gIERSQUdFTkQ6ICdkcmFnZW5kJyxcblxuICAvLyBUb3VjaCBldmVudHNcbiAgLy8gTm90ZSB0aGF0IG90aGVyIHRvdWNoIGV2ZW50cyBleGlzdCwgYnV0IHdlIHNob3VsZCBmb2xsb3cgdGhlIFczQyBsaXN0IGhlcmUuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy8jbGlzdC1vZi10b3VjaGV2ZW50LXR5cGVzXG4gIFRPVUNIU1RBUlQ6ICd0b3VjaHN0YXJ0JyxcbiAgVE9VQ0hNT1ZFOiAndG91Y2htb3ZlJyxcbiAgVE9VQ0hFTkQ6ICd0b3VjaGVuZCcsXG4gIFRPVUNIQ0FOQ0VMOiAndG91Y2hjYW5jZWwnLFxuXG4gIC8vIE1pc2NcbiAgQkVGT1JFVU5MT0FEOiAnYmVmb3JldW5sb2FkJyxcbiAgQ09OU09MRU1FU1NBR0U6ICdjb25zb2xlbWVzc2FnZScsXG4gIENPTlRFWFRNRU5VOiAnY29udGV4dG1lbnUnLFxuICBERVZJQ0VDSEFOR0U6ICdkZXZpY2VjaGFuZ2UnLFxuICBERVZJQ0VNT1RJT046ICdkZXZpY2Vtb3Rpb24nLFxuICBERVZJQ0VPUklFTlRBVElPTjogJ2RldmljZW9yaWVudGF0aW9uJyxcbiAgRE9NQ09OVEVOVExPQURFRDogJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICBFUlJPUjogJ2Vycm9yJyxcbiAgSEVMUDogJ2hlbHAnLFxuICBMT0FEOiAnbG9hZCcsXG4gIExPU0VDQVBUVVJFOiAnbG9zZWNhcHR1cmUnLFxuICBPUklFTlRBVElPTkNIQU5HRTogJ29yaWVudGF0aW9uY2hhbmdlJyxcbiAgUkVBRFlTVEFURUNIQU5HRTogJ3JlYWR5c3RhdGVjaGFuZ2UnLFxuICBSRVNJWkU6ICdyZXNpemUnLFxuICBTQ1JPTEw6ICdzY3JvbGwnLFxuICBVTkxPQUQ6ICd1bmxvYWQnLFxuXG4gIC8vIE1lZGlhIGV2ZW50c1xuICBDQU5QTEFZOiAnY2FucGxheScsXG4gIENBTlBMQVlUSFJPVUdIOiAnY2FucGxheXRocm91Z2gnLFxuICBEVVJBVElPTkNIQU5HRTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgRU1QVElFRDogJ2VtcHRpZWQnLFxuICBFTkRFRDogJ2VuZGVkJyxcbiAgTE9BREVEREFUQTogJ2xvYWRlZGRhdGEnLFxuICBMT0FERURNRVRBREFUQTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgUEFVU0U6ICdwYXVzZScsXG4gIFBMQVk6ICdwbGF5JyxcbiAgUExBWUlORzogJ3BsYXlpbmcnLFxuICBQUk9HUkVTUzogJ3Byb2dyZXNzJyxcbiAgUkFURUNIQU5HRTogJ3JhdGVjaGFuZ2UnLFxuICBTRUVLRUQ6ICdzZWVrZWQnLFxuICBTRUVLSU5HOiAnc2Vla2luZycsXG4gIFNUQUxMRUQ6ICdzdGFsbGVkJyxcbiAgU1VTUEVORDogJ3N1c3BlbmQnLFxuICBUSU1FVVBEQVRFOiAndGltZXVwZGF0ZScsXG4gIFZPTFVNRUNIQU5HRTogJ3ZvbHVtZWNoYW5nZScsXG4gIFdBSVRJTkc6ICd3YWl0aW5nJyxcblxuICAvLyBNZWRpYSBTb3VyY2UgRXh0ZW5zaW9ucyBldmVudHNcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhLXNvdXJjZS8jbWVkaWFzb3VyY2UtZXZlbnRzXG4gIFNPVVJDRU9QRU46ICdzb3VyY2VvcGVuJyxcbiAgU09VUkNFRU5ERUQ6ICdzb3VyY2VlbmRlZCcsXG4gIFNPVVJDRUNMT1NFRDogJ3NvdXJjZWNsb3NlZCcsXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI3NvdXJjZWJ1ZmZlci1ldmVudHNcbiAgQUJPUlQ6ICdhYm9ydCcsXG4gIFVQREFURTogJ3VwZGF0ZScsXG4gIFVQREFURVNUQVJUOiAndXBkYXRlc3RhcnQnLFxuICBVUERBVEVFTkQ6ICd1cGRhdGVlbmQnLFxuXG4gIC8vIEhUTUwgNSBIaXN0b3J5IGV2ZW50c1xuICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvYnJvd3NlcnMuaHRtbCNldmVudC1kZWZpbml0aW9ucy0wXG4gIEhBU0hDSEFOR0U6ICdoYXNoY2hhbmdlJyxcbiAgUEFHRUhJREU6ICdwYWdlaGlkZScsXG4gIFBBR0VTSE9XOiAncGFnZXNob3cnLFxuICBQT1BTVEFURTogJ3BvcHN0YXRlJyxcblxuICAvLyBDb3B5IGFuZCBQYXN0ZVxuICAvLyBTdXBwb3J0IGlzIGxpbWl0ZWQuIE1ha2Ugc3VyZSBpdCB3b3JrcyBvbiB5b3VyIGZhdm9yaXRlIGJyb3dzZXJcbiAgLy8gYmVmb3JlIHVzaW5nLlxuICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvY3V0Y29weXBhc3RlLmh0bWxcbiAgQ09QWTogJ2NvcHknLFxuICBQQVNURTogJ3Bhc3RlJyxcbiAgQ1VUOiAnY3V0JyxcbiAgQkVGT1JFQ09QWTogJ2JlZm9yZWNvcHknLFxuICBCRUZPUkVDVVQ6ICdiZWZvcmVjdXQnLFxuICBCRUZPUkVQQVNURTogJ2JlZm9yZXBhc3RlJyxcblxuICAvLyBIVE1MNSBvbmxpbmUvb2ZmbGluZSBldmVudHMuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL29mZmxpbmUtd2ViYXBwcy8jcmVsYXRlZFxuICBPTkxJTkU6ICdvbmxpbmUnLFxuICBPRkZMSU5FOiAnb2ZmbGluZScsXG5cbiAgLy8gSFRNTCA1IHdvcmtlciBldmVudHNcbiAgTUVTU0FHRTogJ21lc3NhZ2UnLFxuICBDT05ORUNUOiAnY29ubmVjdCcsXG5cbiAgLy8gU2VydmljZSBXb3JrZXIgRXZlbnRzIC0gU2VydmljZVdvcmtlckdsb2JhbFNjb3BlIGNvbnRleHRcbiAgLy8gU2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9TZXJ2aWNlV29ya2VyLyNleGVjdXRpb24tY29udGV4dC1ldmVudHNcbiAgLy8gTm90ZTogbWVzc2FnZSBldmVudCBkZWZpbmVkIGluIHdvcmtlciBldmVudHMgc2VjdGlvblxuICBJTlNUQUxMOiAnaW5zdGFsbCcsXG4gIEFDVElWQVRFOiAnYWN0aXZhdGUnLFxuICBGRVRDSDogJ2ZldGNoJyxcbiAgRk9SRUlHTkZFVENIOiAnZm9yZWlnbmZldGNoJyxcbiAgTUVTU0FHRUVSUk9SOiAnbWVzc2FnZWVycm9yJyxcblxuICAvLyBTZXJ2aWNlIFdvcmtlciBFdmVudHMgLSBEb2N1bWVudCBjb250ZXh0XG4gIC8vIFNlZSBodHRwczovL3czYy5naXRodWIuaW8vU2VydmljZVdvcmtlci8jZG9jdW1lbnQtY29udGV4dC1ldmVudHNcbiAgU1RBVEVDSEFOR0U6ICdzdGF0ZWNoYW5nZScsXG4gIFVQREFURUZPVU5EOiAndXBkYXRlZm91bmQnLFxuICBDT05UUk9MTEVSQ0hBTkdFOiAnY29udHJvbGxlcmNoYW5nZScsXG5cbiAgLy8gQ1NTIGFuaW1hdGlvbiBldmVudHMuXG4gIEFOSU1BVElPTlNUQVJUOlxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRWZW5kb3JQcmVmaXhlZE5hbWVfKCdBbmltYXRpb25TdGFydCcpLFxuICBBTklNQVRJT05FTkQ6XG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFZlbmRvclByZWZpeGVkTmFtZV8oJ0FuaW1hdGlvbkVuZCcpLFxuICBBTklNQVRJT05JVEVSQVRJT046XG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFZlbmRvclByZWZpeGVkTmFtZV8oJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuXG4gIC8vIENTUyB0cmFuc2l0aW9uIGV2ZW50cy4gQmFzZWQgb24gdGhlIGJyb3dzZXIgc3VwcG9ydCBkZXNjcmliZWQgYXQ6XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2Nzcy9jc3NfdHJhbnNpdGlvbnMjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gIFRSQU5TSVRJT05FTkQ6XG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFZlbmRvclByZWZpeGVkTmFtZV8oJ1RyYW5zaXRpb25FbmQnKSxcblxuICAvLyBXM0MgUG9pbnRlciBFdmVudHNcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvcG9pbnRlcmV2ZW50cy9cbiAgUE9JTlRFUkRPV046ICdwb2ludGVyZG93bicsXG4gIFBPSU5URVJVUDogJ3BvaW50ZXJ1cCcsXG4gIFBPSU5URVJDQU5DRUw6ICdwb2ludGVyY2FuY2VsJyxcbiAgUE9JTlRFUk1PVkU6ICdwb2ludGVybW92ZScsXG4gIFBPSU5URVJPVkVSOiAncG9pbnRlcm92ZXInLFxuICBQT0lOVEVST1VUOiAncG9pbnRlcm91dCcsXG4gIFBPSU5URVJFTlRFUjogJ3BvaW50ZXJlbnRlcicsXG4gIFBPSU5URVJMRUFWRTogJ3BvaW50ZXJsZWF2ZScsXG4gIEdPVFBPSU5URVJDQVBUVVJFOiAnZ290cG9pbnRlcmNhcHR1cmUnLFxuICBMT1NUUE9JTlRFUkNBUFRVUkU6ICdsb3N0cG9pbnRlcmNhcHR1cmUnLFxuXG4gIC8vIElFIHNwZWNpZmljIGV2ZW50cy5cbiAgLy8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDc3MjEwMyh2PXZzLjg1KS5hc3B4XG4gIC8vIE5vdGU6IHRoZXNlIGV2ZW50cyB3aWxsIGJlIHN1cHBsYW50ZWQgaW4gSUUxMS5cbiAgTVNHRVNUVVJFQ0hBTkdFOiAnTVNHZXN0dXJlQ2hhbmdlJyxcbiAgTVNHRVNUVVJFRU5EOiAnTVNHZXN0dXJlRW5kJyxcbiAgTVNHRVNUVVJFSE9MRDogJ01TR2VzdHVyZUhvbGQnLFxuICBNU0dFU1RVUkVTVEFSVDogJ01TR2VzdHVyZVN0YXJ0JyxcbiAgTVNHRVNUVVJFVEFQOiAnTVNHZXN0dXJlVGFwJyxcbiAgTVNHT1RQT0lOVEVSQ0FQVFVSRTogJ01TR290UG9pbnRlckNhcHR1cmUnLFxuICBNU0lORVJUSUFTVEFSVDogJ01TSW5lcnRpYVN0YXJ0JyxcbiAgTVNMT1NUUE9JTlRFUkNBUFRVUkU6ICdNU0xvc3RQb2ludGVyQ2FwdHVyZScsXG4gIE1TUE9JTlRFUkNBTkNFTDogJ01TUG9pbnRlckNhbmNlbCcsXG4gIE1TUE9JTlRFUkRPV046ICdNU1BvaW50ZXJEb3duJyxcbiAgTVNQT0lOVEVSRU5URVI6ICdNU1BvaW50ZXJFbnRlcicsXG4gIE1TUE9JTlRFUkhPVkVSOiAnTVNQb2ludGVySG92ZXInLFxuICBNU1BPSU5URVJMRUFWRTogJ01TUG9pbnRlckxlYXZlJyxcbiAgTVNQT0lOVEVSTU9WRTogJ01TUG9pbnRlck1vdmUnLFxuICBNU1BPSU5URVJPVVQ6ICdNU1BvaW50ZXJPdXQnLFxuICBNU1BPSU5URVJPVkVSOiAnTVNQb2ludGVyT3ZlcicsXG4gIE1TUE9JTlRFUlVQOiAnTVNQb2ludGVyVXAnLFxuXG4gIC8vIE5hdGl2ZSBJTUVzL2lucHV0IHRvb2xzIGV2ZW50cy5cbiAgVEVYVDogJ3RleHQnLFxuICAvLyBUaGUgdGV4dElucHV0IGV2ZW50IGlzIHN1cHBvcnRlZCBpbiBJRTkrLCBidXQgb25seSBpbiBsb3dlciBjYXNlLiBBbGwgb3RoZXJcbiAgLy8gYnJvd3NlcnMgdXNlIHRoZSBjYW1lbC1jYXNlIGV2ZW50IG5hbWUuXG4gIFRFWFRJTlBVVDogZ29vZy51c2VyQWdlbnQuSUUgPyAndGV4dGlucHV0JyA6ICd0ZXh0SW5wdXQnLFxuICBDT01QT1NJVElPTlNUQVJUOiAnY29tcG9zaXRpb25zdGFydCcsXG4gIENPTVBPU0lUSU9OVVBEQVRFOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICBDT01QT1NJVElPTkVORDogJ2NvbXBvc2l0aW9uZW5kJyxcblxuICAvLyBUaGUgYmVmb3JlaW5wdXQgZXZlbnQgaXMgaW5pdGlhbGx5IG9ubHkgc3VwcG9ydGVkIGluIFNhZmFyaS4gU2VlXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM0MjY3MCBmb3IgQ2hyb21lXG4gIC8vIGltcGxlbWVudGF0aW9uIHRyYWNraW5nLlxuICBCRUZPUkVJTlBVVDogJ2JlZm9yZWlucHV0JyxcblxuICAvLyBXZWJ2aWV3IHRhZyBldmVudHNcbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYXBwcy90YWdzL3dlYnZpZXdcbiAgRVhJVDogJ2V4aXQnLFxuICBMT0FEQUJPUlQ6ICdsb2FkYWJvcnQnLFxuICBMT0FEQ09NTUlUOiAnbG9hZGNvbW1pdCcsXG4gIExPQURSRURJUkVDVDogJ2xvYWRyZWRpcmVjdCcsXG4gIExPQURTVEFSVDogJ2xvYWRzdGFydCcsXG4gIExPQURTVE9QOiAnbG9hZHN0b3AnLFxuICBSRVNQT05TSVZFOiAncmVzcG9uc2l2ZScsXG4gIFNJWkVDSEFOR0VEOiAnc2l6ZWNoYW5nZWQnLFxuICBVTlJFU1BPTlNJVkU6ICd1bnJlc3BvbnNpdmUnLFxuXG4gIC8vIEhUTUw1IFBhZ2UgVmlzaWJpbGl0eSBBUEkuICBTZWUgZGV0YWlscyBhdFxuICAvLyBgZ29vZy5sYWJzLmRvbS5QYWdlVmlzaWJpbGl0eU1vbml0b3JgLlxuICBWSVNJQklMSVRZQ0hBTkdFOiAndmlzaWJpbGl0eWNoYW5nZScsXG5cbiAgLy8gTG9jYWxTdG9yYWdlIGV2ZW50LlxuICBTVE9SQUdFOiAnc3RvcmFnZScsXG5cbiAgLy8gRE9NIExldmVsIDIgbXV0YXRpb24gZXZlbnRzIChkZXByZWNhdGVkKS5cbiAgRE9NU1VCVFJFRU1PRElGSUVEOiAnRE9NU3VidHJlZU1vZGlmaWVkJyxcbiAgRE9NTk9ERUlOU0VSVEVEOiAnRE9NTm9kZUluc2VydGVkJyxcbiAgRE9NTk9ERVJFTU9WRUQ6ICdET01Ob2RlUmVtb3ZlZCcsXG4gIERPTU5PREVSRU1PVkVERlJPTURPQ1VNRU5UOiAnRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnQnLFxuICBET01OT0RFSU5TRVJURURJTlRPRE9DVU1FTlQ6ICdET01Ob2RlSW5zZXJ0ZWRJbnRvRG9jdW1lbnQnLFxuICBET01BVFRSTU9ESUZJRUQ6ICdET01BdHRyTW9kaWZpZWQnLFxuICBET01DSEFSQUNURVJEQVRBTU9ESUZJRUQ6ICdET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWQnLFxuXG4gIC8vIFByaW50IGV2ZW50cy5cbiAgQkVGT1JFUFJJTlQ6ICdiZWZvcmVwcmludCcsXG4gIEFGVEVSUFJJTlQ6ICdhZnRlcnByaW50JyxcblxuICAvLyBXZWIgYXBwIG1hbmlmZXN0IGV2ZW50cy5cbiAgQkVGT1JFSU5TVEFMTFBST01QVDogJ2JlZm9yZWluc3RhbGxwcm9tcHQnLFxuICBBUFBJTlNUQUxMRUQ6ICdhcHBpbnN0YWxsZWQnXG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBvbmUgb2YgdGhlIGdpdmVuIHBvaW50ZXIgZmFsbGJhY2sgZXZlbnQgbmFtZXMgaW4gb3JkZXIgb2YgcHJlZmVyZW5jZTpcbiAqICAgMS4gcG9pbnRlckV2ZW50TmFtZVxuICogICAyLiBtc1BvaW50ZXJFdmVudE5hbWVcbiAqICAgMy4gZmFsbGJhY2tFdmVudE5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb2ludGVyRXZlbnROYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNQb2ludGVyRXZlbnROYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZmFsbGJhY2tFdmVudE5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN1cHBvcnRlZCBwb2ludGVyIG9yIGZhbGxiYWNrIChtb3VzZSBvciB0b3VjaCkgZXZlbnRcbiAqICAgICBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfID0gZnVuY3Rpb24oXG4gICAgcG9pbnRlckV2ZW50TmFtZSwgbXNQb2ludGVyRXZlbnROYW1lLCBmYWxsYmFja0V2ZW50TmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChnb29nLmV2ZW50cy5Ccm93c2VyRmVhdHVyZS5QT0lOVEVSX0VWRU5UUykge1xuICAgIHJldHVybiBwb2ludGVyRXZlbnROYW1lO1xuICB9XG4gIGlmIChnb29nLmV2ZW50cy5Ccm93c2VyRmVhdHVyZS5NU1BPSU5URVJfRVZFTlRTKSB7XG4gICAgcmV0dXJuIG1zUG9pbnRlckV2ZW50TmFtZTtcbiAgfVxuICByZXR1cm4gZmFsbGJhY2tFdmVudE5hbWU7XG59O1xuXG5cbi8qKlxuICogQ29uc3RhbnRzIGZvciBwb2ludGVyIGV2ZW50IG5hbWVzIHRoYXQgZmFsbCBiYWNrIHRvIGNvcnJlc3BvbmRpbmcgbW91c2UgZXZlbnRcbiAqIG5hbWVzIG9uIHVuc3VwcG9ydGVkIHBsYXRmb3Jtcy4gVGhlc2UgYXJlIGludGVuZGVkIHRvIGJlIGRyb3AtaW4gcmVwbGFjZW1lbnRzXG4gKiBmb3IgY29ycmVzcG9uZGluZyB2YWx1ZXMgaW4gYGdvb2cuZXZlbnRzLkV2ZW50VHlwZWAuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5Qb2ludGVyRmFsbGJhY2tFdmVudFR5cGUgPSB7XG4gIFBPSU5URVJET1dOOiBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFBvaW50ZXJGYWxsYmFja0V2ZW50TmFtZV8oXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuUE9JTlRFUkRPV04sIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NU1BPSU5URVJET1dOLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFRE9XTiksXG4gIFBPSU5URVJVUDogZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfKFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlBPSU5URVJVUCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1TUE9JTlRFUlVQLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFVVApLFxuICBQT0lOVEVSQ0FOQ0VMOiBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFBvaW50ZXJGYWxsYmFja0V2ZW50TmFtZV8oXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuUE9JTlRFUkNBTkNFTCxcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NU1BPSU5URVJDQU5DRUwsXG4gICAgICAvLyBXaGVuIGZhbGxpbmcgYmFjayB0byBtb3VzZSBldmVudHMsIHRoZXJlIGlzIG5vIE1PVVNFQ0FOQ0VMIGVxdWl2YWxlbnRcbiAgICAgIC8vIG9mIFBPSU5URVJDQU5DRUwuIEluIHRoaXMgY2FzZSBQT0lOVEVSVVAgYWxyZWFkeSBmYWxscyBiYWNrIHRvIE1PVVNFVVBcbiAgICAgIC8vIHdoaWNoIHJlcHJlc2VudHMgYm90aCBVUCBhbmQgQ0FOQ0VMLiBQT0lOVEVSQ0FOQ0VMIGRvZXMgbm90IGZhbGwgYmFja1xuICAgICAgLy8gdG8gTU9VU0VVUCB0byBwcmV2ZW50IGxpc3RlbmluZyB0d2ljZSBvbiB0aGUgc2FtZSBldmVudC5cbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRUNBTkNFTCksXG4gIFBPSU5URVJNT1ZFOiBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFBvaW50ZXJGYWxsYmFja0V2ZW50TmFtZV8oXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuUE9JTlRFUk1PVkUsIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NU1BPSU5URVJNT1ZFLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFTU9WRSksXG4gIFBPSU5URVJPVkVSOiBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFBvaW50ZXJGYWxsYmFja0V2ZW50TmFtZV8oXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuUE9JTlRFUk9WRVIsIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NU1BPSU5URVJPVkVSLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1ZFUiksXG4gIFBPSU5URVJPVVQ6IGdvb2cuZXZlbnRzLkV2ZW50VHlwZUhlbHBlcnMuZ2V0UG9pbnRlckZhbGxiYWNrRXZlbnROYW1lXyhcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5QT0lOVEVST1VULCBnb29nLmV2ZW50cy5FdmVudFR5cGUuTVNQT0lOVEVST1VULFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFT1VUKSxcbiAgUE9JTlRFUkVOVEVSOiBnb29nLmV2ZW50cy5FdmVudFR5cGVIZWxwZXJzLmdldFBvaW50ZXJGYWxsYmFja0V2ZW50TmFtZV8oXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuUE9JTlRFUkVOVEVSLCBnb29nLmV2ZW50cy5FdmVudFR5cGUuTVNQT0lOVEVSRU5URVIsXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VFTlRFUiksXG4gIFBPSU5URVJMRUFWRTogZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfKFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlBPSU5URVJMRUFWRSwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1TUE9JTlRFUkxFQVZFLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFTEVBVkUpXG59O1xuXG5cbi8qKlxuICogQ29uc3RhbnRzIGZvciBwb2ludGVyIGV2ZW50IG5hbWVzIHRoYXQgZmFsbCBiYWNrIHRvIGNvcnJlc3BvbmRpbmcgdG91Y2ggZXZlbnRcbiAqIG5hbWVzIG9uIHVuc3VwcG9ydGVkIHBsYXRmb3Jtcy4gVGhlc2UgYXJlIGludGVuZGVkIHRvIGJlIGRyb3AtaW4gcmVwbGFjZW1lbnRzXG4gKiBmb3IgY29ycmVzcG9uZGluZyB2YWx1ZXMgaW4gYGdvb2cuZXZlbnRzLkV2ZW50VHlwZWAuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5Qb2ludGVyVG91Y2hGYWxsYmFja0V2ZW50VHlwZSA9IHtcbiAgUE9JTlRFUkRPV046IGdvb2cuZXZlbnRzLkV2ZW50VHlwZUhlbHBlcnMuZ2V0UG9pbnRlckZhbGxiYWNrRXZlbnROYW1lXyhcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5QT0lOVEVSRE9XTiwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1TUE9JTlRFUkRPV04sXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuVE9VQ0hTVEFSVCksXG4gIFBPSU5URVJVUDogZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfKFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlBPSU5URVJVUCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1TUE9JTlRFUlVQLFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlRPVUNIRU5EKSxcbiAgUE9JTlRFUkNBTkNFTDogZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfKFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlBPSU5URVJDQU5DRUwsXG4gICAgICBnb29nLmV2ZW50cy5FdmVudFR5cGUuTVNQT0lOVEVSQ0FOQ0VMLCBnb29nLmV2ZW50cy5FdmVudFR5cGUuVE9VQ0hDQU5DRUwpLFxuICBQT0lOVEVSTU9WRTogZ29vZy5ldmVudHMuRXZlbnRUeXBlSGVscGVycy5nZXRQb2ludGVyRmFsbGJhY2tFdmVudE5hbWVfKFxuICAgICAgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlBPSU5URVJNT1ZFLCBnb29nLmV2ZW50cy5FdmVudFR5cGUuTVNQT0lOVEVSTU9WRSxcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5UT1VDSE1PVkUpXG59O1xuXG5cbi8qKlxuICogTWFwcGluZyBvZiBtb3VzZSBldmVudCBuYW1lcyB0byB1bmRlcmx5aW5nIGJyb3dzZXIgZXZlbnQgbmFtZXMuXG4gKiBAdHlwZWRlZiB7e1xuICogICAgIE1PVVNFRE9XTjogc3RyaW5nLFxuICogICAgIE1PVVNFVVA6IHN0cmluZyxcbiAqICAgICBNT1VTRUNBTkNFTDpzdHJpbmcsXG4gKiAgICAgTU9VU0VNT1ZFOnN0cmluZyxcbiAqICAgICBNT1VTRU9WRVI6c3RyaW5nLFxuICogICAgIE1PVVNFT1VUOnN0cmluZyxcbiAqICAgICBNT1VTRUVOVEVSOnN0cmluZyxcbiAqICAgICBNT1VTRUxFQVZFOiBzdHJpbmcsXG4gKiB9fVxuICovXG5nb29nLmV2ZW50cy5Nb3VzZUV2ZW50cztcblxuXG4vKipcbiAqIEFuIGFsaWFzIGZvciBgZ29vZy5ldmVudHMuRXZlbnRUeXBlLk1PVVNFKmAgZXZlbnQgdHlwZXMgdGhhdCBpcyBvdmVycmlkZGVuIGJ5XG4gKiBjb3JyZXNwb25kaW5nIGBQT0lOVEVSKmAgZXZlbnQgdHlwZXMuXG4gKiBAY29uc3QgeyFnb29nLmV2ZW50cy5Nb3VzZUV2ZW50c31cbiAqL1xuZ29vZy5ldmVudHMuUG9pbnRlckFzTW91c2VFdmVudFR5cGUgPSB7XG4gIE1PVVNFRE9XTjogZ29vZy5ldmVudHMuUG9pbnRlckZhbGxiYWNrRXZlbnRUeXBlLlBPSU5URVJET1dOLFxuICBNT1VTRVVQOiBnb29nLmV2ZW50cy5Qb2ludGVyRmFsbGJhY2tFdmVudFR5cGUuUE9JTlRFUlVQLFxuICBNT1VTRUNBTkNFTDogZ29vZy5ldmVudHMuUG9pbnRlckZhbGxiYWNrRXZlbnRUeXBlLlBPSU5URVJDQU5DRUwsXG4gIE1PVVNFTU9WRTogZ29vZy5ldmVudHMuUG9pbnRlckZhbGxiYWNrRXZlbnRUeXBlLlBPSU5URVJNT1ZFLFxuICBNT1VTRU9WRVI6IGdvb2cuZXZlbnRzLlBvaW50ZXJGYWxsYmFja0V2ZW50VHlwZS5QT0lOVEVST1ZFUixcbiAgTU9VU0VPVVQ6IGdvb2cuZXZlbnRzLlBvaW50ZXJGYWxsYmFja0V2ZW50VHlwZS5QT0lOVEVST1VULFxuICBNT1VTRUVOVEVSOiBnb29nLmV2ZW50cy5Qb2ludGVyRmFsbGJhY2tFdmVudFR5cGUuUE9JTlRFUkVOVEVSLFxuICBNT1VTRUxFQVZFOiBnb29nLmV2ZW50cy5Qb2ludGVyRmFsbGJhY2tFdmVudFR5cGUuUE9JTlRFUkxFQVZFXG59O1xuXG5cbi8qKlxuICogQW4gYWxpYXMgZm9yIGBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0UqYCBldmVudCB0eXBlcyB0aGF0IGNvbnRpbnVlIHRvIHVzZVxuICogbW91c2UgZXZlbnRzLlxuICogQGNvbnN0IHshZ29vZy5ldmVudHMuTW91c2VFdmVudHN9XG4gKi9cbmdvb2cuZXZlbnRzLk1vdXNlQXNNb3VzZUV2ZW50VHlwZSA9IHtcbiAgTU9VU0VET1dOOiBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VET1dOLFxuICBNT1VTRVVQOiBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VVUCxcbiAgTU9VU0VDQU5DRUw6IGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRUNBTkNFTCxcbiAgTU9VU0VNT1ZFOiBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VNT1ZFLFxuICBNT1VTRU9WRVI6IGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRU9WRVIsXG4gIE1PVVNFT1VUOiBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VPVVQsXG4gIE1PVVNFRU5URVI6IGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRUVOVEVSLFxuICBNT1VTRUxFQVZFOiBnb29nLmV2ZW50cy5FdmVudFR5cGUuTU9VU0VMRUFWRVxufTtcblxuXG4vKipcbiAqIEFuIGFsaWFzIGZvciBgZ29vZy5ldmVudHMuRXZlbnRUeXBlLlRPVUNIKmAgZXZlbnQgdHlwZXMgdGhhdCBpcyBvdmVycmlkZGVuIGJ5XG4gKiBjb3JyZXNwb25kaW5nIGBQT0lOVEVSKmAgZXZlbnQgdHlwZXMuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5Qb2ludGVyQXNUb3VjaEV2ZW50VHlwZSA9IHtcbiAgVE9VQ0hDQU5DRUw6IGdvb2cuZXZlbnRzLlBvaW50ZXJUb3VjaEZhbGxiYWNrRXZlbnRUeXBlLlBPSU5URVJDQU5DRUwsXG4gIFRPVUNIRU5EOiBnb29nLmV2ZW50cy5Qb2ludGVyVG91Y2hGYWxsYmFja0V2ZW50VHlwZS5QT0lOVEVSVVAsXG4gIFRPVUNITU9WRTogZ29vZy5ldmVudHMuUG9pbnRlclRvdWNoRmFsbGJhY2tFdmVudFR5cGUuUE9JTlRFUk1PVkUsXG4gIFRPVUNIU1RBUlQ6IGdvb2cuZXZlbnRzLlBvaW50ZXJUb3VjaEZhbGxiYWNrRXZlbnRUeXBlLlBPSU5URVJET1dOXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEFuIGludGVyZmFjZSBmb3IgYSBsaXN0ZW5hYmxlIEphdmFTY3JpcHQgb2JqZWN0LlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZScpO1xuXG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudElkJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudExpa2UnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXknKTtcblxuXG4vKipcbiAqIEEgbGlzdGVuYWJsZSBpbnRlcmZhY2UuIEEgbGlzdGVuYWJsZSBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgYWJpbGl0eVxuICogdG8gZGlzcGF0Y2gvYnJvYWRjYXN0IGV2ZW50cyB0byBcImV2ZW50IGxpc3RlbmVyc1wiIHJlZ2lzdGVyZWQgdmlhXG4gKiBsaXN0ZW4vbGlzdGVuT25jZS5cbiAqXG4gKiBUaGUgaW50ZXJmYWNlIGFsbG93cyBmb3IgYW4gZXZlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHNpbWlsYXJcbiAqIHRvIG9uZSBvZmZlcmVkIGJ5IG5hdGl2ZSBicm93c2VyIGV2ZW50IHRhcmdldHMsIHN1Y2ggYXNcbiAqIGNhcHR1cmUvYnViYmxlIG1lY2hhbmlzbSwgc3RvcHBpbmcgcHJvcGFnYXRpb24sIGFuZCBwcmV2ZW50aW5nXG4gKiBkZWZhdWx0IGFjdGlvbnMuIENhcHR1cmUvYnViYmxlIG1lY2hhbmlzbSBkZXBlbmRzIG9uIHRoZSBhbmNlc3RvclxuICogdHJlZSBjb25zdHJ1Y3RlZCB2aWEgYCNnZXRQYXJlbnRFdmVudFRhcmdldGA7IHRoaXMgdHJlZVxuICogbXVzdCBiZSBkaXJlY3RlZCBhY3ljbGljIGdyYXBoLiBUaGUgbWVhbmluZyBvZiBkZWZhdWx0IGFjdGlvbihzKVxuICogaW4gcHJldmVudERlZmF1bHQgaXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIHVzZSBjYXNlLlxuICpcbiAqIEltcGxlbWVudGF0aW9ucyB0aGF0IGRvIG5vdCBzdXBwb3J0IGNhcHR1cmUvYnViYmxlIG9yIGNhbiBub3QgaGF2ZVxuICogYSBwYXJlbnQgbGlzdGVuYWJsZSBjYW4gc2ltcGx5IG5vdCBpbXBsZW1lbnQgYW55IGFiaWxpdHkgdG8gc2V0IHRoZVxuICogcGFyZW50IGxpc3RlbmFibGUgKGFuZCBoYXZlIGAjZ2V0UGFyZW50RXZlbnRUYXJnZXRgIHJldHVyblxuICogbnVsbCkuXG4gKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB3aXRoIG9yIGluZGVwZW5kZW50bHkgZnJvbVxuICogZ29vZy5ldmVudHMuXG4gKlxuICogSW1wbGVtZW50YXRpb24gbXVzdCBjYWxsIGAjYWRkSW1wbGVtZW50YXRpb24oaW1wbENsYXNzKWAuXG4gKlxuICogQGludGVyZmFjZVxuICogQHNlZSBnb29nLmV2ZW50c1xuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1FdmVudHMvZXZlbnRzLmh0bWxcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZSA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBBbiBleHBhbmRvIHByb3BlcnR5IHRvIGluZGljYXRlIHRoYXQgYW4gb2JqZWN0IGltcGxlbWVudHNcbiAqIGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuXG4gKlxuICogU2VlIGFkZEltcGxlbWVudGF0aW9uL2lzSW1wbGVtZW50ZWRCeS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUCA9XG4gICAgJ2Nsb3N1cmVfbGlzdGVuYWJsZV8nICsgKChNYXRoLnJhbmRvbSgpICogMWU2KSB8IDApO1xuXG5cbi8qKlxuICogTWFya3MgYSBnaXZlbiBjbGFzcyAoY29uc3RydWN0b3IpIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mXG4gKiBMaXN0ZW5hYmxlLCBzbyB0aGF0IHdlIGNhbiBxdWVyeSB0aGF0IGZhY3QgYXQgcnVudGltZS4gVGhlIGNsYXNzXG4gKiBtdXN0IGhhdmUgYWxyZWFkeSBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6Z29vZy5ldmVudHMuTGlzdGVuYWJsZSwuLi4pfSBjbHMgVGhlIGNsYXNzIGNvbnN0cnVjdG9yLlxuICogICAgIFRoZSBjb3JyZXNwb25kaW5nIGNsYXNzIG11c3QgaGF2ZSBhbHJlYWR5IGltcGxlbWVudGVkIHRoZSBpbnRlcmZhY2UuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUuYWRkSW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbihjbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjbHMucHJvdG90eXBlW2dvb2cuZXZlbnRzLkxpc3RlbmFibGUuSU1QTEVNRU5URURfQllfUFJPUF0gPSB0cnVlO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgZ2l2ZW4gaW5zdGFuY2UgaW1wbGVtZW50cyBMaXN0ZW5hYmxlLiBUaGVcbiAqICAgICBjbGFzcy9zdXBlcmNsYXNzIG9mIHRoZSBpbnN0YW5jZSBtdXN0IGNhbGwgYWRkSW1wbGVtZW50YXRpb24uXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEhKG9iaiAmJiBvYmpbZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5JTVBMRU1FTlRFRF9CWV9QUk9QXSk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lci4gQSBsaXN0ZW5lciBjYW4gb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuXG4gKiBvYmplY3QgYW5kIGlmIGl0IGlzIGFkZGVkIGFnYWluIHRoZSBrZXkgZm9yIHRoZSBsaXN0ZW5lciBpc1xuICogcmV0dXJuZWQuIE5vdGUgdGhhdCBpZiB0aGUgZXhpc3RpbmcgbGlzdGVuZXIgaXMgYSBvbmUtb2ZmIGxpc3RlbmVyXG4gKiAocmVnaXN0ZXJlZCB2aWEgbGlzdGVuT25jZSksIGl0IHdpbGwgbm8gbG9uZ2VyIGJlIGEgb25lLW9mZlxuICogbGlzdGVuZXIgYWZ0ZXIgYSBjYWxsIHRvIGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgZXZlbnQgdHlwZSBpZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOihib29sZWFufHVuZGVmaW5lZCl9IGxpc3RlbmVyIENhbGxiYWNrXG4gKiAgICAgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2VcbiAqICAgICAoZGVmYXVsdHMgdG8gZmFsc2UpLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBTQ09QRSxFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbihcbiAgICB0eXBlLCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7fTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyByZW1vdmVkIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgdGhlXG4gKiBsaXN0ZW5lciBmaXJlZCBvbmNlLlxuICpcbiAqIElmIGFuIGV4aXN0aW5nIGxpc3RlbmVyIGFscmVhZHkgZXhpc3RzLCBsaXN0ZW5PbmNlIHdpbGwgZG9cbiAqIG5vdGhpbmcuIEluIHBhcnRpY3VsYXIsIGlmIHRoZSBsaXN0ZW5lciB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkXG4gKiB2aWEgbGlzdGVuKCksIGxpc3Rlbk9uY2UoKSB3aWxsIG5vdCB0dXJuIHRoZSBsaXN0ZW5lciBpbnRvIGFcbiAqIG9uZS1vZmYgbGlzdGVuZXIuIFNpbWlsYXJseSwgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciwgbGlzdGVuT25jZSBkb2VzIG5vdCBtb2RpZnkgdGhlIGxpc3RlbmVycyAoaXQgaXNcbiAqIHN0aWxsIGEgb25jZSBsaXN0ZW5lcikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSBldmVudCB0eXBlIGlkLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6KGJvb2xlYW58dW5kZWZpbmVkKX0gbGlzdGVuZXIgQ2FsbGJhY2tcbiAqICAgICBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlQ2FwdHVyZSBXaGV0aGVyIHRvIGZpcmUgaW4gY2FwdHVyZSBwaGFzZVxuICogICAgIChkZWZhdWx0cyB0byBmYWxzZSkuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gVW5pcXVlIGtleSBmb3IgdGhlIGxpc3RlbmVyLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUucHJvdG90eXBlLmxpc3Rlbk9uY2UgPSBmdW5jdGlvbihcbiAgICB0eXBlLCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7fTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgd2hpY2ggd2FzIGFkZGVkIHdpdGggbGlzdGVuKCkgb3IgbGlzdGVuT25jZSgpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgZXZlbnQgdHlwZSBpZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOihib29sZWFufHVuZGVmaW5lZCl9IGxpc3RlbmVyIENhbGxiYWNrXG4gKiAgICAgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2VcbiAqICAgICAoZGVmYXVsdHMgdG8gZmFsc2UpLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsXG4gKiAgICAgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbnkgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gKiBAdGVtcGxhdGUgU0NPUEUsRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUudW5saXN0ZW4gPSBmdW5jdGlvbihcbiAgICB0eXBlLCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7fTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgd2hpY2ggd2FzIGFkZGVkIHdpdGggbGlzdGVuKCkgYnkgdGhlIGtleVxuICogcmV0dXJuZWQgYnkgbGlzdGVuKCkuXG4gKlxuICogQHBhcmFtIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0ga2V5IFRoZSBrZXkgcmV0dXJuZWQgYnlcbiAqICAgICBsaXN0ZW4oKSBvciBsaXN0ZW5PbmNlKCkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFueSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUudW5saXN0ZW5CeUtleSA9IGZ1bmN0aW9uKGtleSkge307XG5cblxuLyoqXG4gKiBEaXNwYXRjaGVzIGFuIGV2ZW50IChvciBldmVudCBsaWtlIG9iamVjdCkgYW5kIGNhbGxzIGFsbCBsaXN0ZW5lcnNcbiAqIGxpc3RlbmluZyBmb3IgZXZlbnRzIG9mIHRoaXMgdHlwZS4gVGhlIHR5cGUgb2YgdGhlIGV2ZW50IGlzIGRlY2lkZWQgYnkgdGhlXG4gKiB0eXBlIHByb3BlcnR5IG9uIHRoZSBldmVudCBvYmplY3QuXG4gKlxuICogSWYgYW55IG9mIHRoZSBsaXN0ZW5lcnMgcmV0dXJucyBmYWxzZSBPUiBjYWxscyBwcmV2ZW50RGVmYXVsdCB0aGVuIHRoaXNcbiAqIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLiAgSWYgb25lIG9mIHRoZSBjYXB0dXJlIGxpc3RlbmVycyBjYWxsc1xuICogc3RvcFByb3BhZ2F0aW9uLCB0aGVuIHRoZSBidWJibGUgbGlzdGVuZXJzIHdvbid0IGZpcmUuXG4gKlxuICogQHBhcmFtIHs/Z29vZy5ldmVudHMuRXZlbnRMaWtlfSBlIEV2ZW50IG9iamVjdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IElmIGFueW9uZSBjYWxsZWQgcHJldmVudERlZmF1bHQgb24gdGhlIGV2ZW50IG9iamVjdCAob3JcbiAqICAgICBpZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlKSB0aGlzIHdpbGwgYWxzbyByZXR1cm4gZmFsc2UuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGUucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihlKSB7fTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIHRoaXMgbGlzdGVuYWJsZS4gSWYgdHlwZSBpcyBzcGVjaWZpZWQsXG4gKiBpdCB3aWxsIG9ubHkgcmVtb3ZlIGxpc3RlbmVycyBvZiB0aGUgcGFydGljdWxhciB0eXBlLiBvdGhlcndpc2UgYWxsXG4gKiByZWdpc3RlcmVkIGxpc3RlbmVycyB3aWxsIGJlIHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ9fSBvcHRfdHlwZSBUeXBlIG9mIGV2ZW50IHRvIHJlbW92ZSxcbiAqICAgICBkZWZhdWx0IGlzIHRvIHJlbW92ZSBhbGwgdHlwZXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBvZiBsaXN0ZW5lcnMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24ob3B0X3R5cGUpIHt9O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50IG9mIHRoaXMgZXZlbnQgdGFyZ2V0IHRvIHVzZSBmb3IgY2FwdHVyZS9idWJibGVcbiAqIG1lY2hhbmlzbS5cbiAqXG4gKiBOT1RFKGNocmlzaGVucnkpOiBUaGUgbmFtZSByZWZsZWN0cyB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24gb2ZcbiAqIGN1c3RvbSBldmVudCB0YXJnZXQgKGBnb29nLmV2ZW50cy5FdmVudFRhcmdldGApLiBXZSBkZWNpZGVkXG4gKiB0aGF0IGNoYW5naW5nIHRoZSBuYW1lIGlzIG5vdCB3b3J0aCBpdC5cbiAqXG4gKiBAcmV0dXJuIHs/Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gVGhlIHBhcmVudCBFdmVudFRhcmdldCBvciBudWxsIGlmXG4gKiAgICAgdGhlcmUgaXMgbm8gcGFyZW50LlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5nZXRQYXJlbnRFdmVudFRhcmdldCA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBGaXJlcyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgaW4gdGhpcyBsaXN0ZW5hYmxlIGZvciB0aGUgZ2l2ZW5cbiAqIHR5cGUgYW5kIGNhcHR1cmUgbW9kZSwgcGFzc2luZyB0aGVtIHRoZSBnaXZlbiBldmVudE9iamVjdC4gVGhpc1xuICogZG9lcyBub3QgcGVyZm9ybSBhY3R1YWwgY2FwdHVyZS9idWJibGUuIE9ubHkgaW1wbGVtZW50b3JzIG9mIHRoZVxuICogaW50ZXJmYWNlIHNob3VsZCBiZSB1c2luZyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgdHlwZSBvZiB0aGVcbiAqICAgICBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7RVZFTlRPQkp9IGV2ZW50T2JqZWN0IFRoZSBldmVudCBvYmplY3QgdG8gZmlyZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYWxsIGxpc3RlbmVycyBzdWNjZWVkZWQgd2l0aG91dFxuICogICAgIGF0dGVtcHRpbmcgdG8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yLiBJZiBhbnkgbGlzdGVuZXIgcmV0dXJuc1xuICogICAgIGZhbHNlIG9yIGNhbGxlZCBnb29nLmV2ZW50cy5FdmVudCNwcmV2ZW50RGVmYXVsdCwgdGhpcyByZXR1cm5zXG4gKiAgICAgZmFsc2UuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUuZmlyZUxpc3RlbmVycyA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGNhcHR1cmUsIGV2ZW50T2JqZWN0KSB7fTtcblxuXG4vKipcbiAqIEdldHMgYWxsIGxpc3RlbmVycyBpbiB0aGlzIGxpc3RlbmFibGUgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZFxuICogY2FwdHVyZSBtb2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEByZXR1cm4geyFBcnJheTwhZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleT59IEFuIGFycmF5IG9mIHJlZ2lzdGVyZWRcbiAqICAgICBsaXN0ZW5lcnMuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUuZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSwgY2FwdHVyZSkge307XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5IGZvciB0aGUgZXZlbnQgb3IgbnVsbCBpZiBubyBzdWNoXG4gKiBsaXN0ZW5lciBpcyBpbiB1c2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICogICAgIHdpdGhvdXQgdGhlICdvbicgcHJlZml4LlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6KGJvb2xlYW58dW5kZWZpbmVkKX0gbGlzdGVuZXIgVGhlXG4gKiAgICAgbGlzdGVuZXIgZnVuY3Rpb24gdG8gZ2V0LlxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgY2FwdHVyaW5nIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7P2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IHRoZSBmb3VuZCBsaXN0ZW5lciBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBTQ09QRSxFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlLnByb3RvdHlwZS5nZXRMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge307XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZXJlIGlzIGFueSBhY3RpdmUgbGlzdGVuZXJzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWRcbiAqIHNpZ25hdHVyZS4gSWYgZWl0aGVyIHRoZSB0eXBlIG9yIGNhcHR1cmUgcGFyYW1ldGVycyBhcmVcbiAqIHVuc3BlY2lmaWVkLCB0aGUgZnVuY3Rpb24gd2lsbCBtYXRjaCBvbiB0aGUgcmVtYWluaW5nIGNyaXRlcmlhLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj19IG9wdF90eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBXaGV0aGVyIHRvIGNoZWNrIGZvciBjYXB0dXJlIG9yIGJ1YmJsZVxuICogICAgIGxpc3RlbmVycy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYW55IGFjdGl2ZSBsaXN0ZW5lcnMgbWF0Y2hpbmdcbiAqICAgICB0aGUgcmVxdWVzdGVkIHR5cGUgYW5kL29yIGNhcHR1cmUgcGhhc2UuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5wcm90b3R5cGUuaGFzTGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICBvcHRfdHlwZSwgb3B0X2NhcHR1cmUpIHt9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEFuIGludGVyZmFjZSB0aGF0IGRlc2NyaWJlcyBhIHNpbmdsZSByZWdpc3RlcmVkIGxpc3RlbmVyLlxuICovXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXknKTtcblxuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZScpO1xuXG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgZGVzY3JpYmVzIGEgc2luZ2xlIHJlZ2lzdGVyZWQgbGlzdGVuZXIuXG4gKiBAaW50ZXJmYWNlXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkgPSBmdW5jdGlvbigpIHt9O1xuXG5cbi8qKlxuICogQ291bnRlciB1c2VkIHRvIGNyZWF0ZSBhIHVuaXF1ZSBrZXlcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LmNvdW50ZXJfID0gMDtcblxuXG4vKipcbiAqIFJlc2VydmVzIGEga2V5IHRvIGJlIHVzZWQgZm9yIExpc3RlbmFibGVLZXkja2V5IGZpZWxkLlxuICogQHJldHVybiB7bnVtYmVyfSBBIG51bWJlciB0byBiZSB1c2VkIHRvIGZpbGwgTGlzdGVuYWJsZUtleSNrZXlcbiAqICAgICBmaWVsZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5yZXNlcnZlS2V5ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICsrZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5jb3VudGVyXztcbn07XG5cblxuLyoqXG4gKiBUaGUgc291cmNlIGV2ZW50IHRhcmdldC5cbiAqIEB0eXBlIHs/T2JqZWN0fD9nb29nLmV2ZW50cy5MaXN0ZW5hYmxlfVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LnByb3RvdHlwZS5zcmM7XG5cblxuLyoqXG4gKiBUaGUgZXZlbnQgdHlwZSB0aGUgbGlzdGVuZXIgaXMgbGlzdGVuaW5nIHRvLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUudHlwZTtcblxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEB0eXBlIHtmdW5jdGlvbig/KTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsfVxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5LnByb3RvdHlwZS5saXN0ZW5lcjtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGxpc3RlbmVyIHdvcmtzIG9uIGNhcHR1cmUgcGhhc2UuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUuY2FwdHVyZTtcblxuXG4vKipcbiAqIFRoZSAndGhpcycgb2JqZWN0IGZvciB0aGUgbGlzdGVuZXIgZnVuY3Rpb24ncyBzY29wZS5cbiAqIEB0eXBlIHs/T2JqZWN0fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUuaGFuZGxlcjtcblxuXG4vKipcbiAqIEEgZ2xvYmFsbHkgdW5pcXVlIG51bWJlciB0byBpZGVudGlmeSB0aGUga2V5LlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleS5wcm90b3R5cGUua2V5O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IExpc3RlbmVyIG9iamVjdC5cbiAqIEBzZWUgLi4vZGVtb3MvZXZlbnRzLmh0bWxcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleScpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZScpO1xuXG5cblxuLyoqXG4gKiBTaW1wbGUgY2xhc3MgdGhhdCBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgYSBsaXN0ZW5lclxuICogQHBhcmFtIHtmdW5jdGlvbig/KTo/fSBsaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3h5IFdyYXBwZXIgZm9yIHRoZSBsaXN0ZW5lciB0aGF0IHBhdGNoZXMgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBzcmMgU291cmNlIG9iamVjdCBmb3JcbiAqICAgICB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFdmVudCB0eXBlLlxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlIFdoZXRoZXIgaW4gY2FwdHVyZSBvciBidWJibGUgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9oYW5kbGVyIE9iamVjdCBpbiB3aG9zZSBjb250ZXh0IHRvIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLlxuICogQGltcGxlbWVudHMge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICBsaXN0ZW5lciwgcHJveHksIHNyYywgdHlwZSwgY2FwdHVyZSwgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuZXIuRU5BQkxFX01PTklUT1JJTkcpIHtcbiAgICB0aGlzLmNyZWF0aW9uU3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgb3ZlciB0aGUgb3JpZ2luYWwgbGlzdGVuZXIuIFRoaXMgaXMgdXNlZCBzb2xlbHkgdG9cbiAgICogaGFuZGxlIG5hdGl2ZSBicm93c2VyIGV2ZW50cyAoaXQgaXMgdXNlZCB0byBzaW11bGF0ZSB0aGUgY2FwdHVyZVxuICAgKiBwaGFzZSBhbmQgdG8gcGF0Y2ggdGhlIGV2ZW50IG9iamVjdCkuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHRoaXMucHJveHkgPSBwcm94eTtcblxuICAvKipcbiAgICogT2JqZWN0IG9yIG5vZGUgdGhhdCBjYWxsYmFjayBpcyBsaXN0ZW5pbmcgdG9cbiAgICogQHR5cGUge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9XG4gICAqL1xuICB0aGlzLnNyYyA9IHNyYztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUuXG4gICAqIEBjb25zdCB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy50eXBlID0gdHlwZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYmVpbmcgY2FsbGVkIGluIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZVxuICAgKiBAY29uc3Qge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmNhcHR1cmUgPSAhIWNhcHR1cmU7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIG9iamVjdCB3aG9zZSBjb250ZXh0IHRvIGV4ZWN1dGUgdGhlIGxpc3RlbmVyIGluXG4gICAqIEB0eXBlIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgKi9cbiAgdGhpcy5oYW5kbGVyID0gb3B0X2hhbmRsZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBrZXkgb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAY29uc3Qge251bWJlcn1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0aGlzLmtleSA9IGdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXkucmVzZXJ2ZUtleSgpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgYWZ0ZXIgaXQgaGFzIGJlZW4gY2FsbGVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuY2FsbE9uY2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgbGlzdGVuZXIgaGFzIGJlZW4gcmVtb3ZlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLnJlbW92ZWQgPSBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRvIGVuYWJsZSB0aGUgbW9uaXRvcmluZyBvZiB0aGVcbiAqICAgICBnb29nLmV2ZW50cy5MaXN0ZW5lciBpbnN0YW5jZXMuIFN3aXRjaGluZyBvbiB0aGUgbW9uaXRvcmluZyBpcyBvbmx5XG4gKiAgICAgcmVjb21tZW5kZWQgZm9yIGRlYnVnZ2luZyBiZWNhdXNlIGl0IGhhcyBhIHNpZ25pZmljYW50IGltcGFjdCBvblxuICogICAgIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgdXNhZ2UuIElmIHN3aXRjaGVkIG9mZiwgdGhlIG1vbml0b3JpbmcgY29kZVxuICogICAgIGNvbXBpbGVzIGRvd24gdG8gMCBieXRlcy5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXIuRU5BQkxFX01PTklUT1JJTkcgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLmV2ZW50cy5MaXN0ZW5lci5FTkFCTEVfTU9OSVRPUklORycsIGZhbHNlKTtcblxuXG4vKipcbiAqIElmIG1vbml0b3JpbmcgdGhlIGdvb2cuZXZlbnRzLkxpc3RlbmVyIGluc3RhbmNlcyBpcyBlbmFibGVkLCBzdG9yZXMgdGhlXG4gKiBjcmVhdGlvbiBzdGFjayB0cmFjZSBvZiB0aGUgRGlzcG9zYWJsZSBpbnN0YW5jZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyLnByb3RvdHlwZS5jcmVhdGlvblN0YWNrO1xuXG5cbi8qKlxuICogTWFya3MgdGhpcyBsaXN0ZW5lciBhcyByZW1vdmVkLiBUaGlzIGFsc28gcmVtb3ZlIHJlZmVyZW5jZXMgaGVsZCBieVxuICogdGhpcyBsaXN0ZW5lciBvYmplY3QgKHN1Y2ggYXMgbGlzdGVuZXIgYW5kIGV2ZW50IHNvdXJjZSkuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyLnByb3RvdHlwZS5tYXJrQXNSZW1vdmVkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5yZW1vdmVkID0gdHJ1ZTtcbiAgdGhpcy5saXN0ZW5lciA9IG51bGw7XG4gIHRoaXMucHJveHkgPSBudWxsO1xuICB0aGlzLnNyYyA9IG51bGw7XG4gIHRoaXMuaGFuZGxlciA9IG51bGw7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgbWFwIG9mIGxpc3RlbmVycyB0aGF0IHByb3ZpZGVzIHV0aWxpdHkgZnVuY3Rpb25zIHRvXG4gKiBkZWFsIHdpdGggbGlzdGVuZXJzIG9uIGFuIGV2ZW50IHRhcmdldC4gVXNlZCBieVxuICogYGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0YC5cbiAqXG4gKiBXQVJOSU5HOiBEbyBub3QgdXNlIHRoaXMgY2xhc3MgZnJvbSBvdXRzaWRlIGdvb2cuZXZlbnRzIHBhY2thZ2UuXG4gKlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkxpc3RlbmVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cub2JqZWN0Jyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudElkJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5MaXN0ZW5hYmxlJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5Jyk7XG5cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbGlzdGVuZXIgbWFwLlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBzcmMgVGhlIHNyYyBvYmplY3QuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBmaW5hbFxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcCA9IGZ1bmN0aW9uKHNyYykge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKiBAdHlwZSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gKi9cbiAgdGhpcy5zcmMgPSBzcmM7XG5cbiAgLyoqXG4gICAqIE1hcHMgb2YgZXZlbnQgdHlwZSB0byBhbiBhcnJheSBvZiBsaXN0ZW5lcnMuXG4gICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIUFycmF5PCFnb29nLmV2ZW50cy5MaXN0ZW5lcj4+fVxuICAgKi9cbiAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcblxuICAvKipcbiAgICogVGhlIGNvdW50IG9mIHR5cGVzIGluIHRoaXMgbWFwIHRoYXQgaGF2ZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMudHlwZUNvdW50XyA9IDA7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgY291bnQgb2YgZXZlbnQgdHlwZXMgaW4gdGhpcyBtYXAgdGhhdCBhY3R1YWxseVxuICogICAgIGhhdmUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5nZXRUeXBlQ291bnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy50eXBlQ291bnRfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVG90YWwgbnVtYmVyIG9mIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5wcm90b3R5cGUuZ2V0TGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIHR5cGUgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICBjb3VudCArPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGNvdW50O1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIuIEEgbGlzdGVuZXIgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSB0byBhblxuICogb2JqZWN0IGFuZCBpZiBpdCBpcyBhZGRlZCBhZ2FpbiB0aGUga2V5IGZvciB0aGUgbGlzdGVuZXIgaXNcbiAqIHJldHVybmVkLlxuICpcbiAqIE5vdGUgdGhhdCBhIG9uZS1vZmYgbGlzdGVuZXIgd2lsbCBub3QgY2hhbmdlIGFuIGV4aXN0aW5nIGxpc3RlbmVyLFxuICogaWYgYW55LiBPbiB0aGUgb3RoZXIgaGFuZCBhIG5vcm1hbCBsaXN0ZW5lciB3aWxsIGNoYW5nZSBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciB0byBiZWNvbWUgYSBub3JtYWwgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIGxpc3RlbmVyIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhpcyBsaXN0ZW5lciBjYWxsYmFjayBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhbGxPbmNlIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgb25lLW9mZlxuICogICAgIGxpc3RlbmVyLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgVGhlIGNhcHR1cmUgbW9kZSBvZiB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBjYWxsT25jZSwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHR5cGVTdHIgPSB0eXBlLnRvU3RyaW5nKCk7XG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5saXN0ZW5lcnNbdHlwZVN0cl07XG4gIGlmICghbGlzdGVuZXJBcnJheSkge1xuICAgIGxpc3RlbmVyQXJyYXkgPSB0aGlzLmxpc3RlbmVyc1t0eXBlU3RyXSA9IFtdO1xuICAgIHRoaXMudHlwZUNvdW50XysrO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyT2JqO1xuICB2YXIgaW5kZXggPSBnb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5maW5kTGlzdGVuZXJJbmRleF8oXG4gICAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyQXJyYXlbaW5kZXhdO1xuICAgIGlmICghY2FsbE9uY2UpIHtcbiAgICAgIC8vIEVuc3VyZSB0aGF0LCBpZiB0aGVyZSBpcyBhbiBleGlzdGluZyBjYWxsT25jZSBsaXN0ZW5lciwgaXQgaXMgbm9cbiAgICAgIC8vIGxvbmdlciBhIGNhbGxPbmNlIGxpc3RlbmVyLlxuICAgICAgbGlzdGVuZXJPYmouY2FsbE9uY2UgPSBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGlzdGVuZXJPYmogPSBuZXcgZ29vZy5ldmVudHMuTGlzdGVuZXIoXG4gICAgICAgIGxpc3RlbmVyLCBudWxsLCB0aGlzLnNyYywgdHlwZVN0ciwgISFvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xuICAgIGxpc3RlbmVyT2JqLmNhbGxPbmNlID0gY2FsbE9uY2U7XG4gICAgbGlzdGVuZXJBcnJheS5wdXNoKGxpc3RlbmVyT2JqKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuZXJPYmo7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhIG1hdGNoaW5nIGxpc3RlbmVyLlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIGxpc3RlbmVyIGV2ZW50IHR5cGUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhpcyBsaXN0ZW5lciBjYWxsYmFjayBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlQ2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFueSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdHlwZVN0ciA9IHR5cGUudG9TdHJpbmcoKTtcbiAgaWYgKCEodHlwZVN0ciBpbiB0aGlzLmxpc3RlbmVycykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJBcnJheSA9IHRoaXMubGlzdGVuZXJzW3R5cGVTdHJdO1xuICB2YXIgaW5kZXggPSBnb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5maW5kTGlzdGVuZXJJbmRleF8oXG4gICAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgb3B0X3VzZUNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICB2YXIgbGlzdGVuZXJPYmogPSBsaXN0ZW5lckFycmF5W2luZGV4XTtcbiAgICBsaXN0ZW5lck9iai5tYXJrQXNSZW1vdmVkKCk7XG4gICAgZ29vZy5hcnJheS5yZW1vdmVBdChsaXN0ZW5lckFycmF5LCBpbmRleCk7XG4gICAgaWYgKGxpc3RlbmVyQXJyYXkubGVuZ3RoID09IDApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1t0eXBlU3RyXTtcbiAgICAgIHRoaXMudHlwZUNvdW50Xy0tO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbGlzdGVuZXIgb2JqZWN0LlxuICogQHBhcmFtIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIHJlbW92ZWQuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5yZW1vdmVCeUtleSA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHR5cGUgPSBsaXN0ZW5lci50eXBlO1xuICBpZiAoISh0eXBlIGluIHRoaXMubGlzdGVuZXJzKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciByZW1vdmVkID0gZ29vZy5hcnJheS5yZW1vdmUodGhpcy5saXN0ZW5lcnNbdHlwZV0sIGxpc3RlbmVyKTtcbiAgaWYgKHJlbW92ZWQpIHtcbiAgICAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5MaXN0ZW5lcn0gKi8gKGxpc3RlbmVyKS5tYXJrQXNSZW1vdmVkKCk7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzW3R5cGVdLmxlbmd0aCA9PSAwKSB7XG4gICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICB0aGlzLnR5cGVDb3VudF8tLTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbW92ZWQ7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gdGhpcyBtYXAuIElmIG9wdF90eXBlIGlzIHByb3ZpZGVkLCBvbmx5XG4gKiBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gdHlwZSBhcmUgcmVtb3ZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPX0gb3B0X3R5cGUgVHlwZSBvZiBldmVudCB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBvZiBsaXN0ZW5lcnMgcmVtb3ZlZC5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uKG9wdF90eXBlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHR5cGVTdHIgPSBvcHRfdHlwZSAmJiBvcHRfdHlwZS50b1N0cmluZygpO1xuICB2YXIgY291bnQgPSAwO1xuICBmb3IgKHZhciB0eXBlIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgaWYgKCF0eXBlU3RyIHx8IHR5cGUgPT0gdHlwZVN0cikge1xuICAgICAgdmFyIGxpc3RlbmVyQXJyYXkgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICArK2NvdW50O1xuICAgICAgICBsaXN0ZW5lckFycmF5W2ldLm1hcmtBc1JlbW92ZWQoKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIHRoaXMudHlwZUNvdW50Xy0tO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5cbi8qKlxuICogR2V0cyBhbGwgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHR5cGUgYW5kIGNhcHR1cmUgbW9kZS4gVGhlXG4gKiByZXR1cm5lZCBhcnJheSBpcyBhIGNvcHkgKGJ1dCB0aGUgbGlzdGVuZXIgb2JqZWN0cyBhcmUgbm90KS5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lcnNcbiAqICAgICB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJuIHshQXJyYXk8IWdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXk+fSBBbiBhcnJheSBvZiBtYXRjaGluZ1xuICogICAgIGxpc3RlbmVycy5cbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAucHJvdG90eXBlLmdldExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUsIGNhcHR1cmUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbGlzdGVuZXJBcnJheSA9IHRoaXMubGlzdGVuZXJzW3R5cGUudG9TdHJpbmcoKV07XG4gIHZhciBydiA9IFtdO1xuICBpZiAobGlzdGVuZXJBcnJheSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGxpc3RlbmVyT2JqID0gbGlzdGVuZXJBcnJheVtpXTtcbiAgICAgIGlmIChsaXN0ZW5lck9iai5jYXB0dXJlID09IGNhcHR1cmUpIHtcbiAgICAgICAgcnYucHVzaChsaXN0ZW5lck9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBydjtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5IGZvciB0aGUgZXZlbnQgb3IgbnVsbCBpZiBubyBzdWNoXG4gKiBsaXN0ZW5lciBpcyBpbiB1c2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGxpc3RlbmVyXG4gKiAgICAgdG8gcmV0cmlldmUuXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGdldC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBXaGV0aGVyIHRoZSBsaXN0ZW5lciBpcyBhIGNhcHR1cmluZyBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5fSB0aGUgZm91bmQgbGlzdGVuZXIgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwLnByb3RvdHlwZS5nZXRMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5saXN0ZW5lcnNbdHlwZS50b1N0cmluZygpXTtcbiAgdmFyIGkgPSAtMTtcbiAgaWYgKGxpc3RlbmVyQXJyYXkpIHtcbiAgICBpID0gZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAuZmluZExpc3RlbmVySW5kZXhfKFxuICAgICAgICBsaXN0ZW5lckFycmF5LCBsaXN0ZW5lciwgY2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xuICB9XG4gIHJldHVybiBpID4gLTEgPyBsaXN0ZW5lckFycmF5W2ldIDogbnVsbDtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZXJlIGlzIGEgbWF0Y2hpbmcgbGlzdGVuZXIuIElmIGVpdGhlciB0aGUgdHlwZSBvciBjYXB0dXJlXG4gKiBwYXJhbWV0ZXJzIGFyZSB1bnNwZWNpZmllZCwgdGhlIGZ1bmN0aW9uIHdpbGwgbWF0Y2ggb24gdGhlXG4gKiByZW1haW5pbmcgY3JpdGVyaWEuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ9fSBvcHRfdHlwZSBUaGUgdHlwZSBvZiB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYW4gYWN0aXZlIGxpc3RlbmVyIG1hdGNoaW5nXG4gKiAgICAgdGhlIHJlcXVlc3RlZCB0eXBlIGFuZC9vciBjYXB0dXJlIHBoYXNlLlxuICovXG5nb29nLmV2ZW50cy5MaXN0ZW5lck1hcC5wcm90b3R5cGUuaGFzTGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICBvcHRfdHlwZSwgb3B0X2NhcHR1cmUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaGFzVHlwZSA9IChvcHRfdHlwZSAhPT0gdW5kZWZpbmVkKTtcbiAgdmFyIHR5cGVTdHIgPSBoYXNUeXBlID8gb3B0X3R5cGUudG9TdHJpbmcoKSA6ICcnO1xuICB2YXIgaGFzQ2FwdHVyZSA9IChvcHRfY2FwdHVyZSAhPT0gdW5kZWZpbmVkKTtcblxuICByZXR1cm4gZ29vZy5vYmplY3Quc29tZSh0aGlzLmxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXJBcnJheSwgdHlwZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVyQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICgoIWhhc1R5cGUgfHwgbGlzdGVuZXJBcnJheVtpXS50eXBlID09IHR5cGVTdHIpICYmXG4gICAgICAgICAgKCFoYXNDYXB0dXJlIHx8IGxpc3RlbmVyQXJyYXlbaV0uY2FwdHVyZSA9PSBvcHRfY2FwdHVyZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgaW5kZXggb2YgYSBtYXRjaGluZyBnb29nLmV2ZW50cy5MaXN0ZW5lciBpbiB0aGUgZ2l2ZW5cbiAqIGxpc3RlbmVyQXJyYXkuXG4gKiBAcGFyYW0geyFBcnJheTwhZ29vZy5ldmVudHMuTGlzdGVuZXI+fSBsaXN0ZW5lckFycmF5IEFycmF5IG9mIGxpc3RlbmVyLlxuICogQHBhcmFtIHshRnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF91c2VDYXB0dXJlIFRoZSBjYXB0dXJlIGZsYWcgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2xpc3RlbmVyU2NvcGUgVGhlIGxpc3RlbmVyIHNjb3BlLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIGxpc3RlbmVyIHdpdGhpbiB0aGVcbiAqICAgICBsaXN0ZW5lckFycmF5LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAuZmluZExpc3RlbmVySW5kZXhfID0gZnVuY3Rpb24oXG4gICAgbGlzdGVuZXJBcnJheSwgbGlzdGVuZXIsIG9wdF91c2VDYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIHZhciBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyQXJyYXlbaV07XG4gICAgaWYgKCFsaXN0ZW5lck9iai5yZW1vdmVkICYmIGxpc3RlbmVyT2JqLmxpc3RlbmVyID09IGxpc3RlbmVyICYmXG4gICAgICAgIGxpc3RlbmVyT2JqLmNhcHR1cmUgPT0gISFvcHRfdXNlQ2FwdHVyZSAmJlxuICAgICAgICBsaXN0ZW5lck9iai5oYW5kbGVyID09IG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBvYmplY3RzL21hcHMvaGFzaGVzLlxuICovXG5nb29nLm1vZHVsZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gYW4gb2JqZWN0L21hcC9oYXNoLlxuICogQHBhcmFtIHs/T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULFYsPyw/T2JqZWN0PEssVj4pOj99IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5XG4gKiAgICAgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IGFuZCB0aGVcbiAqICAgICBvYmplY3QpIGFuZCB0aGUgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqIFRoaXMgaXMgdXNlZCBhcyB0aGUgJ3RoaXMnIG9iamVjdCB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGYsIG9wdF9vYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICB9XG59XG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIG9iamVjdC9tYXAvaGFzaC4gSWYgdGhhdCBjYWxsIHJldHVybnNcbiAqIHRydWUsIGFkZHMgdGhlIGVsZW1lbnQgdG8gYSBuZXcgb2JqZWN0LlxuICogQHBhcmFtIHs/T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IG92ZXIgd2hpY2ggdG8gaXRlcmF0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULFYsPyw/T2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yXG4gKiAgICAgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IGFuZFxuICogICAgIHRoZSBvYmplY3QpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi4gSWYgdGhlIHJldHVybiB2YWx1ZSBpcyB0cnVlIHRoZVxuICogICAgIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIHJlc3VsdCBvYmplY3QuIElmIGl0IGlzIGZhbHNlIHRoZSBlbGVtZW50IGlzIG5vdFxuICogICAgIGluY2x1ZGVkLlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGlzIGlzIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3Qgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHshT2JqZWN0PEssVj59IGEgbmV3IG9iamVjdCBpbiB3aGljaCBvbmx5IGVsZW1lbnRzIHRoYXQgcGFzc2VkIHRoZVxuICogICAgIHRlc3QgYXJlIHByZXNlbnQuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZnVuY3Rpb24gZmlsdGVyKG9iaiwgZiwgb3B0X29iaikge1xuICBjb25zdCByZXMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgb2JqW2tleV0sIGtleSwgb2JqKSkge1xuICAgICAgcmVzW2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBGb3IgZXZlcnkgZWxlbWVudCBpbiBhbiBvYmplY3QvbWFwL2hhc2ggY2FsbHMgYSBmdW5jdGlvbiBhbmQgaW5zZXJ0cyB0aGVcbiAqIHJlc3VsdCBpbnRvIGEgbmV3IG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBvdmVyIHdoaWNoIHRvIGl0ZXJhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCxWLD8sP09iamVjdDxLLFY+KTpSfSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBldmVyeVxuICogICAgIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleSBhbmQgdGhlXG4gKiAgICAgb2JqZWN0KSBhbmQgc2hvdWxkIHJldHVybiBzb21ldGhpbmcuIFRoZSByZXN1bHQgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIGFcbiAqICAgICBuZXcgb2JqZWN0LlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGlzIGlzIHVzZWQgYXMgdGhlICd0aGlzJyBvYmplY3Qgd2l0aGluIGYuXG4gKiBAcmV0dXJuIHshT2JqZWN0PEssUj59IGEgbmV3IG9iamVjdCB3aXRoIHRoZSByZXN1bHRzIGZyb20gZi5cbiAqIEB0ZW1wbGF0ZSBULEssVixSXG4gKi9cbmZ1bmN0aW9uIG1hcChvYmosIGYsIG9wdF9vYmopIHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIHJlc1trZXldID0gZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIG9iamVjdC9tYXAvaGFzaC4gSWYgYW55XG4gKiBjYWxsIHJldHVybnMgdHJ1ZSwgcmV0dXJucyB0cnVlICh3aXRob3V0IGNoZWNraW5nIHRoZSByZXN0KS4gSWZcbiAqIGFsbCBjYWxscyByZXR1cm4gZmFsc2UsIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gez9PYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCxWLD8sP09iamVjdDxLLFY+KTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvclxuICogICAgIGV2ZXJ5IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleSBhbmRcbiAqICAgICB0aGUgb2JqZWN0KSBhbmQgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqIFRoaXMgaXMgdXNlZCBhcyB0aGUgJ3RoaXMnIG9iamVjdCB3aXRoaW4gZi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSB0ZXN0LlxuICogQHRlbXBsYXRlIFQsSyxWXG4gKi9cbmZ1bmN0aW9uIHNvbWUob2JqLCBmLCBvcHRfb2JqKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIG9ialtrZXldLCBrZXksIG9iaikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIG9iamVjdC9tYXAvaGFzaC4gSWZcbiAqIGFsbCBjYWxscyByZXR1cm4gdHJ1ZSwgcmV0dXJucyB0cnVlLiBJZiBhbnkgY2FsbCByZXR1cm5zIGZhbHNlLCByZXR1cm5zXG4gKiBmYWxzZSBhdCB0aGlzIHBvaW50IGFuZCBkb2VzIG5vdCBjb250aW51ZSB0byBjaGVjayB0aGUgcmVtYWluaW5nIGVsZW1lbnRzLlxuICogQHBhcmFtIHs/T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpULFYsPyw/T2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqICAgICBmb3IgZXZlcnkgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5XG4gKiAgICAgYW5kIHRoZSBvYmplY3QpIGFuZCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7VD19IG9wdF9vYmogVGhpcyBpcyB1c2VkIGFzIHRoZSAndGhpcycgb2JqZWN0IHdpdGhpbiBmLlxuICogQHJldHVybiB7Ym9vbGVhbn0gZmFsc2UgaWYgYW55IGVsZW1lbnQgZmFpbHMgdGhlIHRlc3QuXG4gKiBAdGVtcGxhdGUgVCxLLFZcbiAqL1xuZnVuY3Rpb24gZXZlcnkob2JqLCBmLCBvcHRfb2JqKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmICghZi5jYWxsKC8qKiBAdHlwZSB7P30gKi8gKG9wdF9vYmopLCBvYmpba2V5XSwga2V5LCBvYmopKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBrZXktdmFsdWUgcGFpcnMgaW4gdGhlIG9iamVjdCBtYXAuXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IGZvciB3aGljaCB0byBnZXQgdGhlIG51bWJlciBvZiBrZXktdmFsdWVcbiAqICAgICBwYWlycy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBrZXktdmFsdWUgcGFpcnMgaW4gdGhlIG9iamVjdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIGdldENvdW50KG9iaikge1xuICBsZXQgcnYgPSAwO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBydisrO1xuICB9XG4gIHJldHVybiBydjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG9uZSBrZXkgZnJvbSB0aGUgb2JqZWN0IG1hcCwgaWYgYW55IGV4aXN0cy5cbiAqIEZvciBtYXAgbGl0ZXJhbHMgdGhlIHJldHVybmVkIGtleSB3aWxsIGJlIHRoZSBmaXJzdCBvbmUgaW4gbW9zdCBvZiB0aGVcbiAqIGJyb3dzZXJzIChhIGtub3cgZXhjZXB0aW9uIGlzIEtvbnF1ZXJvcikuXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHBpY2sgYSBrZXkgZnJvbS5cbiAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFRoZSBrZXkgb3IgdW5kZWZpbmVkIGlmIHRoZSBvYmplY3QgaXMgZW1wdHkuXG4gKi9cbmZ1bmN0aW9uIGdldEFueUtleShvYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGtleTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgb25lIHZhbHVlIGZyb20gdGhlIG9iamVjdCBtYXAsIGlmIGFueSBleGlzdHMuXG4gKiBGb3IgbWFwIGxpdGVyYWxzIHRoZSByZXR1cm5lZCB2YWx1ZSB3aWxsIGJlIHRoZSBmaXJzdCBvbmUgaW4gbW9zdCBvZiB0aGVcbiAqIGJyb3dzZXJzIChhIGtub3cgZXhjZXB0aW9uIGlzIEtvbnF1ZXJvcikuXG4gKiBAcGFyYW0gez9PYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gcGljayBhIHZhbHVlIGZyb20uXG4gKiBAcmV0dXJuIHtWfHVuZGVmaW5lZH0gVGhlIHZhbHVlIG9yIHVuZGVmaW5lZCBpZiB0aGUgb2JqZWN0IGlzIGVtcHR5LlxuICogQHRlbXBsYXRlIEssVlxuICovXG5mdW5jdGlvbiBnZXRBbnlWYWx1ZShvYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0L2hhc2gvbWFwIGNvbnRhaW5zIHRoZSBnaXZlbiBvYmplY3QgYXMgYSB2YWx1ZS5cbiAqIEFuIGFsaWFzIGZvciBjb250YWluc1ZhbHVlKG9iaiwgdmFsKS5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBpbiB3aGljaCB0byBsb29rIGZvciB2YWwuXG4gKiBAcGFyYW0ge1Z9IHZhbCBUaGUgb2JqZWN0IGZvciB3aGljaCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdmFsIGlzIHByZXNlbnQuXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwgdmFsKSB7XG4gIHJldHVybiBjb250YWluc1ZhbHVlKG9iaiwgdmFsKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZXMgb2YgdGhlIG9iamVjdC9tYXAvaGFzaC5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIGdldCB0aGUgdmFsdWVzLlxuICogQHJldHVybiB7IUFycmF5PFY+fSBUaGUgdmFsdWVzIGluIHRoZSBvYmplY3QvbWFwL2hhc2guXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlcyhvYmopIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzW2krK10gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGtleXMgb2YgdGhlIG9iamVjdC9tYXAvaGFzaC5cbiAqIEBwYXJhbSB7P09iamVjdH0gb2JqIFRoZSBvYmplY3QgZnJvbSB3aGljaCB0byBnZXQgdGhlIGtleXMuXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gQXJyYXkgb2YgcHJvcGVydHkga2V5cy5cbiAqL1xuZnVuY3Rpb24gZ2V0S2V5cyhvYmopIHtcbiAgY29uc3QgcmVzID0gW107XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzW2krK10gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBHZXQgYSB2YWx1ZSBmcm9tIGFuIG9iamVjdCBtdWx0aXBsZSBsZXZlbHMgZGVlcC4gIFRoaXMgaXMgdXNlZnVsIGZvclxuICogcHVsbGluZyB2YWx1ZXMgZnJvbSBkZWVwbHkgbmVzdGVkIG9iamVjdHMsIHN1Y2ggYXMgSlNPTiByZXNwb25zZXMuXG4gKiBFeGFtcGxlIHVzYWdlOiBnZXRWYWx1ZUJ5S2V5cyhqc29uT2JqLCAnZm9vJywgJ2VudHJpZXMnLCAzKVxuICogQHBhcmFtIHs/T2JqZWN0fSBvYmogQW4gb2JqZWN0IHRvIGdldCB0aGUgdmFsdWUgZnJvbS4gQ2FuIGJlIGFycmF5LWxpa2UuXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8bnVtYmVyfCFJQXJyYXlMaWtlPG51bWJlcnxzdHJpbmc+KX0gdmFyX2FyZ3MgQSBudW1iZXIgb2ZcbiAqICAgICBrZXlzIChhcyBzdHJpbmdzLCBvciBudW1iZXJzLCBmb3IgYXJyYXktbGlrZSBvYmplY3RzKS4gQ2FuIGFsc28gYmVcbiAqICAgICBzcGVjaWZpZWQgYXMgYSBzaW5nbGUgYXJyYXkgb2Yga2V5cy5cbiAqIEByZXR1cm4geyp9IFRoZSByZXN1bHRpbmcgdmFsdWUuIElmLCBhdCBhbnkgcG9pbnQsIHRoZSB2YWx1ZSBmb3IgYSBrZXkgaW4gdGhlXG4gKiAgICAgY3VycmVudCBvYmplY3QgaXMgbnVsbCBvciB1bmRlZmluZWQsIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZUJ5S2V5cyhvYmosIHZhcl9hcmdzKSB7XG4gIGNvbnN0IGlzQXJyYXlMaWtlID0gZ29vZy5pc0FycmF5TGlrZSh2YXJfYXJncyk7XG4gIGNvbnN0IGtleXMgPSBpc0FycmF5TGlrZSA/XG4gICAgICAvKiogQHR5cGUgeyFJQXJyYXlMaWtlPG51bWJlcnxzdHJpbmc+fSAqLyAodmFyX2FyZ3MpIDpcbiAgICAgIGFyZ3VtZW50cztcblxuICAvLyBTdGFydCB3aXRoIHRoZSAybmQgcGFyYW1ldGVyIGZvciB0aGUgdmFyaWFibGUgcGFyYW1ldGVycyBzeW50YXguXG4gIGZvciAobGV0IGkgPSBpc0FycmF5TGlrZSA/IDAgOiAxOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBvYmogPSBvYmpba2V5c1tpXV07XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIG9iamVjdC9tYXAvaGFzaCBjb250YWlucyB0aGUgZ2l2ZW4ga2V5LlxuICogQHBhcmFtIHs/T2JqZWN0fSBvYmogVGhlIG9iamVjdCBpbiB3aGljaCB0byBsb29rIGZvciBrZXkuXG4gKiBAcGFyYW0gez99IGtleSBUaGUga2V5IGZvciB3aGljaCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgSWYgdGhlIG1hcCBjb250YWlucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiBjb250YWluc0tleShvYmosIGtleSkge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIGtleSBpbiBvYmo7XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgb2JqZWN0L21hcC9oYXNoIGNvbnRhaW5zIHRoZSBnaXZlbiB2YWx1ZS4gVGhpcyBpcyBPKG4pLlxuICogQHBhcmFtIHs/T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IGluIHdoaWNoIHRvIGxvb2sgZm9yIHZhbC5cbiAqIEBwYXJhbSB7Vn0gdmFsIFRoZSB2YWx1ZSBmb3Igd2hpY2ggdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIElmIHRoZSBtYXAgY29udGFpbnMgdGhlIHZhbHVlLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5mdW5jdGlvbiBjb250YWluc1ZhbHVlKG9iaiwgdmFsKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChvYmpba2V5XSA9PSB2YWwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogU2VhcmNoZXMgYW4gb2JqZWN0IGZvciBhbiBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBnaXZlbiBjb25kaXRpb24gYW5kXG4gKiByZXR1cm5zIGl0cyBrZXkuXG4gKiBAcGFyYW0gez9PYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gc2VhcmNoIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsVixzdHJpbmcsP09iamVjdDxLLFY+KTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0b1xuICogICAgIGNhbGwgZm9yIGV2ZXJ5IGVsZW1lbnQuIFRha2VzIDMgYXJndW1lbnRzICh0aGUgdmFsdWUsIHRoZSBrZXkgYW5kIHRoZVxuICogICAgIG9iamVjdCkgYW5kIHNob3VsZCByZXR1cm4gYSBib29sZWFuLlxuICogQHBhcmFtIHtUPX0gdGhpc09iaiBBbiBvcHRpb25hbCBcInRoaXNcIiBjb250ZXh0IGZvciB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSBUaGUga2V5IG9mIGFuIGVsZW1lbnQgZm9yIHdoaWNoIHRoZSBmdW5jdGlvblxuICogICAgIHJldHVybnMgdHJ1ZSBvciB1bmRlZmluZWQgaWYgbm8gc3VjaCBlbGVtZW50IGlzIGZvdW5kLlxuICogQHRlbXBsYXRlIFQsSyxWXG4gKi9cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBmLCB0aGlzT2JqID0gdW5kZWZpbmVkKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAodGhpc09iaiksIG9ialtrZXldLCBrZXksIG9iaikpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogU2VhcmNoZXMgYW4gb2JqZWN0IGZvciBhbiBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBnaXZlbiBjb25kaXRpb24gYW5kXG4gKiByZXR1cm5zIGl0cyB2YWx1ZS5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byBzZWFyY2ggaW4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCxWLHN0cmluZyw/T2JqZWN0PEssVj4pOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvXG4gKiAgICAgY2FsbCBmb3IgZXZlcnkgZWxlbWVudC4gVGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleSBhbmQgdGhlXG4gKiAgICAgb2JqZWN0KSBhbmQgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1Q9fSB0aGlzT2JqIEFuIG9wdGlvbmFsIFwidGhpc1wiIGNvbnRleHQgZm9yIHRoZSBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge1Z9IFRoZSB2YWx1ZSBvZiBhbiBlbGVtZW50IGZvciB3aGljaCB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlIG9yXG4gKiAgICAgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggZWxlbWVudCBpcyBmb3VuZC5cbiAqIEB0ZW1wbGF0ZSBULEssVlxuICovXG5mdW5jdGlvbiBmaW5kVmFsdWUob2JqLCBmLCB0aGlzT2JqID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IGtleSA9IGZpbmRLZXkob2JqLCBmLCB0aGlzT2JqKTtcbiAgcmV0dXJuIGtleSAmJiBvYmpba2V5XTtcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBvYmplY3QvbWFwL2hhc2ggaXMgZW1wdHkuXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG9iaiBpcyBlbXB0eS5cbiAqL1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleSB2YWx1ZSBwYWlycyBmcm9tIHRoZSBvYmplY3QvbWFwL2hhc2guXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNsZWFyLlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY2xlYXIob2JqKSB7XG4gIGZvciAoY29uc3QgaSBpbiBvYmopIHtcbiAgICBkZWxldGUgb2JqW2ldO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGJhc2VkIG9uIHRoZSBrZXkuXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IGZyb20gd2hpY2ggdG8gcmVtb3ZlIHRoZSBrZXkuXG4gKiBAcGFyYW0gez99IGtleSBUaGUga2V5IHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlKG9iaiwga2V5KSB7XG4gIGxldCBydjtcbiAgaWYgKHJ2ID0ga2V5IGluIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKG9iaikpIHtcbiAgICBkZWxldGUgb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHJ2O1xufVxuXG4vKipcbiAqIEFkZHMgYSBrZXktdmFsdWUgcGFpciB0byB0aGUgb2JqZWN0LiBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSBrZXkgaXNcbiAqIGFscmVhZHkgaW4gdXNlLiBVc2Ugc2V0IGlmIHlvdSB3YW50IHRvIGNoYW5nZSBhbiBleGlzdGluZyBwYWlyLlxuICogQHBhcmFtIHs/T2JqZWN0PEssVj59IG9iaiBUaGUgb2JqZWN0IHRvIHdoaWNoIHRvIGFkZCB0aGUga2V5LXZhbHVlIHBhaXIuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gYWRkLlxuICogQHBhcmFtIHtWfSB2YWwgVGhlIHZhbHVlIHRvIGFkZC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmZ1bmN0aW9uIGFkZChvYmosIGtleSwgdmFsKSB7XG4gIGlmIChvYmogIT09IG51bGwgJiYga2V5IGluIG9iaikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG9iamVjdCBhbHJlYWR5IGNvbnRhaW5zIHRoZSBrZXkgXCIke2tleX1cImApO1xuICB9XG4gIHNldChvYmosIGtleSwgdmFsKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleS5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIGdldCB0aGUgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgZm9yIHdoaWNoIHRvIGdldCB0aGUgdmFsdWUuXG4gKiBAcGFyYW0ge1I9fSB2YWwgVGhlIHZhbHVlIHRvIHJldHVybiBpZiBubyBpdGVtIGlzIGZvdW5kIGZvciB0aGUgZ2l2ZW4ga2V5XG4gKiAgICAgKGRlZmF1bHQgaXMgdW5kZWZpbmVkKS5cbiAqIEByZXR1cm4ge1Z8Unx1bmRlZmluZWR9IFRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleS5cbiAqIEB0ZW1wbGF0ZSBLLFYsUlxuICovXG5mdW5jdGlvbiBnZXQob2JqLCBrZXksIHZhbCA9IHVuZGVmaW5lZCkge1xuICBpZiAob2JqICE9PSBudWxsICYmIGtleSBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cblxuLyoqXG4gKiBBZGRzIGEga2V5LXZhbHVlIHBhaXIgdG8gdGhlIG9iamVjdC9tYXAvaGFzaC5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byB3aGljaCB0byBhZGQgdGhlIGtleS12YWx1ZSBwYWlyLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGFkZC5cbiAqIEBwYXJhbSB7Vn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFkZC5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsdWUpIHtcbiAgb2JqW2tleV0gPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBBZGRzIGEga2V5LXZhbHVlIHBhaXIgdG8gdGhlIG9iamVjdC9tYXAvaGFzaCBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldC5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogVGhlIG9iamVjdCB0byB3aGljaCB0byBhZGQgdGhlIGtleS12YWx1ZSBwYWlyLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGFkZC5cbiAqIEBwYXJhbSB7Vn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFkZCBpZiB0aGUga2V5IHdhc24ndCBwcmVzZW50LlxuICogQHJldHVybiB7Vn0gVGhlIHZhbHVlIG9mIHRoZSBlbnRyeSBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqL1xuZnVuY3Rpb24gc2V0SWZVbmRlZmluZWQob2JqLCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBrZXkgaW4gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAob2JqKSA/IG9ialtrZXldIDogKG9ialtrZXldID0gdmFsdWUpO1xufVxuXG4vKipcbiAqIFNldHMgYSBrZXkgYW5kIHZhbHVlIHRvIGFuIG9iamVjdCBpZiB0aGUga2V5IGlzIG5vdCBzZXQuIFRoZSB2YWx1ZSB3aWxsIGJlXG4gKiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBnaXZlbiBmdW5jdGlvbi4gSWYgdGhlIGtleSBhbHJlYWR5IGV4aXN0cywgdGhlXG4gKiBvYmplY3Qgd2lsbCBub3QgYmUgY2hhbmdlZCBhbmQgdGhlIGZ1bmN0aW9uIHdpbGwgbm90IGJlIGNhbGxlZCAodGhlIGZ1bmN0aW9uXG4gKiB3aWxsIGJlIGxhemlseSBldmFsdWF0ZWQgLS0gb25seSBjYWxsZWQgaWYgbmVjZXNzYXJ5KS5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgcGFydGljdWxhcmx5IHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhbiBgT2JqZWN0YCB3aGljaCBpc1xuICogYWN0aW5nIGFzIGEgY2FjaGUuXG4gKiBAcGFyYW0gez9PYmplY3Q8SyxWPn0gb2JqIFRoZSBvYmplY3QgdG8gd2hpY2ggdG8gYWRkIHRoZSBrZXktdmFsdWUgcGFpci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBhZGQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6Vn0gZiBUaGUgdmFsdWUgdG8gYWRkIGlmIHRoZSBrZXkgd2Fzbid0IHByZXNlbnQuXG4gKiBAcmV0dXJuIHtWfSBUaGUgdmFsdWUgb2YgdGhlIGVudHJ5IGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIEssVlxuICovXG5mdW5jdGlvbiBzZXRXaXRoUmV0dXJuVmFsdWVJZk5vdFNldChvYmosIGtleSwgZikge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IGYoKTtcbiAgb2JqW2tleV0gPSB2YWw7XG4gIHJldHVybiB2YWw7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIG9iamVjdHMgZm9yIGVxdWFsaXR5IHVzaW5nID09PSBvbiB0aGUgdmFsdWVzLlxuICogQHBhcmFtIHshT2JqZWN0PEssVj59IGFcbiAqIEBwYXJhbSB7IU9iamVjdDxLLFY+fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHRlbXBsYXRlIEssVlxuICovXG5mdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICBmb3IgKGNvbnN0IGsgaW4gYSkge1xuICAgIGlmICghKGsgaW4gYikgfHwgYVtrXSAhPT0gYltrXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IGsgaW4gYikge1xuICAgIGlmICghKGsgaW4gYSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNoYWxsb3cgY2xvbmUgb2YgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdDxLLFY+fSBvYmogT2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybiB7IU9iamVjdDxLLFY+fSBDbG9uZSBvZiB0aGUgaW5wdXQgb2JqZWN0LlxuICogQHRlbXBsYXRlIEssVlxuICovXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIHJlc1trZXldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBDbG9uZXMgYSB2YWx1ZS4gVGhlIGlucHV0IG1heSBiZSBhbiBPYmplY3QsIEFycmF5LCBvciBiYXNpYyB0eXBlLiBPYmplY3RzIGFuZFxuICogYXJyYXlzIHdpbGwgYmUgY2xvbmVkIHJlY3Vyc2l2ZWx5LlxuICogV0FSTklOR1M6XG4gKiA8Y29kZT51bnNhZmVDbG9uZTwvY29kZT4gZG9lcyBub3QgZGV0ZWN0IHJlZmVyZW5jZSBsb29wcy4gT2JqZWN0c1xuICogdGhhdCByZWZlciB0byB0aGVtc2VsdmVzIHdpbGwgY2F1c2UgaW5maW5pdGUgcmVjdXJzaW9uLlxuICogPGNvZGU+dW5zYWZlQ2xvbmU8L2NvZGU+IGlzIHVuYXdhcmUgb2YgdW5pcXVlIGlkZW50aWZpZXJzLCBhbmRcbiAqIGNvcGllcyBVSURzIGNyZWF0ZWQgYnkgPGNvZGU+Z2V0VWlkPC9jb2RlPiBpbnRvIGNsb25lZCByZXN1bHRzLlxuICogQHBhcmFtIHtUfSBvYmogVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybiB7VH0gQSBjbG9uZSBvZiB0aGUgaW5wdXQgdmFsdWUuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiB1bnNhZmVDbG9uZShvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHJldHVybiBvYmo7XG4gIGlmICh0eXBlb2Ygb2JqLmNsb25lID09PSAnZnVuY3Rpb24nKSByZXR1cm4gb2JqLmNsb25lKCk7XG4gIGlmICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJiBvYmogaW5zdGFuY2VvZiBNYXApIHtcbiAgICByZXR1cm4gbmV3IE1hcChvYmopO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIG9iaiBpbnN0YW5jZW9mIFNldCkge1xuICAgIHJldHVybiBuZXcgU2V0KG9iaik7XG4gIH1cbiAgY29uc3QgY2xvbmUgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6XG4gICAgICB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmIEFycmF5QnVmZmVyLmlzVmlldyhvYmopICYmXG4gICAgICAgICAgIShvYmogaW5zdGFuY2VvZiBEYXRhVmlldykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvYmouY29uc3RydWN0b3Iob2JqLmxlbmd0aCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBjbG9uZVtrZXldID0gdW5zYWZlQ2xvbmUob2JqW2tleV0pO1xuICB9XG4gIHJldHVybiBjbG9uZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG9iamVjdCBpbiB3aGljaCBhbGwgdGhlIGtleXMgYW5kIHZhbHVlcyBhcmUgaW50ZXJjaGFuZ2VkXG4gKiAoa2V5cyBiZWNvbWUgdmFsdWVzIGFuZCB2YWx1ZXMgYmVjb21lIGtleXMpLiBJZiBtdWx0aXBsZSBrZXlzIG1hcCB0byB0aGVcbiAqIHNhbWUgdmFsdWUsIHRoZSBjaG9zZW4gdHJhbnNwb3NlZCB2YWx1ZSBpcyBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQuXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHRyYW5zcG9zZS5cbiAqIEByZXR1cm4geyFPYmplY3R9IFRoZSB0cmFuc3Bvc2VkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdHJhbnNwb3NlKG9iaikge1xuICBjb25zdCB0cmFuc3Bvc2VkID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIHRyYW5zcG9zZWRbb2JqW2tleV1dID0ga2V5O1xuICB9XG4gIHJldHVybiB0cmFuc3Bvc2VkO1xufVxuXG4vKipcbiAqIFRoZSBuYW1lcyBvZiB0aGUgZmllbGRzIHRoYXQgYXJlIGRlZmluZWQgb24gT2JqZWN0LnByb3RvdHlwZS5cbiAqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xuY29uc3QgUFJPVE9UWVBFX0ZJRUxEUyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZicsXG5dO1xuXG4vKipcbiAqIEV4dGVuZHMgYW4gb2JqZWN0IHdpdGggYW5vdGhlciBvYmplY3QuXG4gKiBUaGlzIG9wZXJhdGVzICdpbi1wbGFjZSc7IGl0IGRvZXMgbm90IGNyZWF0ZSBhIG5ldyBPYmplY3QuXG4gKiBFeGFtcGxlOlxuICogdmFyIG8gPSB7fTtcbiAqIGV4dGVuZChvLCB7YTogMCwgYjogMX0pO1xuICogbzsgLy8ge2E6IDAsIGI6IDF9XG4gKiBleHRlbmQobywge2I6IDIsIGM6IDN9KTtcbiAqIG87IC8vIHthOiAwLCBiOiAyLCBjOiAzfVxuICogQHBhcmFtIHs/T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0byBtb2RpZnkuIEV4aXN0aW5nIHByb3BlcnRpZXMgd2lsbCBiZVxuICogICAgIG92ZXJ3cml0dGVuIGlmIHRoZXkgYXJlIGFsc28gcHJlc2VudCBpbiBvbmUgb2YgdGhlIG9iamVjdHMgaW4gYHZhcl9hcmdzYC5cbiAqIEBwYXJhbSB7Li4uKD9PYmplY3R8dW5kZWZpbmVkKX0gdmFyX2FyZ3MgVGhlIG9iamVjdHMgZnJvbSB3aGljaCB2YWx1ZXNcbiAqICAgICB3aWxsIGJlIGNvcGllZC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgT2JqZWN0LmFzc2lnblxuICovXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCB2YXJfYXJncykge1xuICBsZXQga2V5O1xuICBsZXQgc291cmNlO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuXG4gICAgLy8gRm9yIElFIHRoZSBmb3ItaW4tbG9vcCBkb2VzIG5vdCBjb250YWluIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdFxuICAgIC8vIGVudW1lcmFibGUgb24gdGhlIHByb3RvdHlwZSBvYmplY3QgKGZvciBleGFtcGxlIGlzUHJvdG90eXBlT2YgZnJvbVxuICAgIC8vIE9iamVjdC5wcm90b3R5cGUpIGFuZCBpdCB3aWxsIGFsc28gbm90IGluY2x1ZGUgJ3JlcGxhY2UnIG9uIG9iamVjdHMgdGhhdFxuICAgIC8vIGV4dGVuZCBTdHJpbmcgYW5kIGNoYW5nZSAncmVwbGFjZScgKG5vdCB0aGF0IGl0IGlzIGNvbW1vbiBmb3IgYW55b25lIHRvXG4gICAgLy8gZXh0ZW5kIGFueXRoaW5nIGV4Y2VwdCBPYmplY3QpLlxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBQUk9UT1RZUEVfRklFTERTLmxlbmd0aDsgaisrKSB7XG4gICAgICBrZXkgPSBQUk9UT1RZUEVfRklFTERTW2pdO1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBidWlsdCBmcm9tIHRoZSBrZXktdmFsdWUgcGFpcnMgcHJvdmlkZWQgYXMgYXJndW1lbnRzLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhbmQgaXQgaXMgYW4gYXJyYXlcbiAqICAgICB0aGVuIHRoaXMgaXMgdXNlZCBhcyB0aGUgYXJndW1lbnRzLCBvdGhlcndpc2UgZXZlbiBhcmd1bWVudHMgYXJlIHVzZWQgYXNcbiAqICAgICB0aGUgcHJvcGVydHkgbmFtZXMgYW5kIG9kZCBhcmd1bWVudHMgYXJlIHVzZWQgYXMgdGhlIHByb3BlcnR5IHZhbHVlcy5cbiAqIEByZXR1cm4geyFPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuICogQHRocm93cyB7IUVycm9yfSBJZiB0aGVyZSBhcmUgdW5ldmVuIG51bWJlciBvZiBhcmd1bWVudHMgb3IgdGhlcmUgaXMgb25seSBvbmVcbiAqICAgICBub24gYXJyYXkgYXJndW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZSh2YXJfYXJncykge1xuICBjb25zdCBhcmdMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICBpZiAoYXJnTGVuZ3RoID09IDEgJiYgQXJyYXkuaXNBcnJheShhcmd1bWVudHNbMF0pKSB7XG4gICAgcmV0dXJuIGNyZWF0ZS5hcHBseShudWxsLCBhcmd1bWVudHNbMF0pO1xuICB9XG5cbiAgaWYgKGFyZ0xlbmd0aCAlIDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzJyk7XG4gIH1cblxuICBjb25zdCBydiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ0xlbmd0aDsgaSArPSAyKSB7XG4gICAgcnZbYXJndW1lbnRzW2ldXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gIH1cbiAgcmV0dXJuIHJ2O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdoZXJlIHRoZSBwcm9wZXJ0eSBuYW1lcyBjb21lIGZyb20gdGhlIGFyZ3VtZW50cyBidXRcbiAqIHRoZSB2YWx1ZSBpcyBhbHdheXMgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYW5kIGl0IGlzIGFuIGFycmF5XG4gKiAgICAgdGhlbiB0aGlzIGlzIHVzZWQgYXMgdGhlIGFyZ3VtZW50cywgb3RoZXJ3aXNlIHRoZSBhcmd1bWVudHMgYXJlIHVzZWQgYXNcbiAqICAgICB0aGUgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJuIHshT2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2V0KHZhcl9hcmdzKSB7XG4gIGNvbnN0IGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChhcmdMZW5ndGggPT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICByZXR1cm4gY3JlYXRlU2V0LmFwcGx5KG51bGwsIGFyZ3VtZW50c1swXSk7XG4gIH1cblxuICBjb25zdCBydiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ0xlbmd0aDsgaSsrKSB7XG4gICAgcnZbYXJndW1lbnRzW2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJ2O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW1tdXRhYmxlIHZpZXcgb2YgdGhlIHVuZGVybHlpbmcgb2JqZWN0LCBpZiB0aGUgYnJvd3NlclxuICogc3VwcG9ydHMgaW1tdXRhYmxlIG9iamVjdHMuXG4gKiBJbiBkZWZhdWx0IG1vZGUsIHdyaXRlcyB0byB0aGlzIHZpZXcgd2lsbCBmYWlsIHNpbGVudGx5LiBJbiBzdHJpY3QgbW9kZSxcbiAqIHRoZXkgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSB7IU9iamVjdDxLLFY+fSBvYmogQW4gb2JqZWN0LlxuICogQHJldHVybiB7IU9iamVjdDxLLFY+fSBBbiBpbW11dGFibGUgdmlldyBvZiB0aGF0IG9iamVjdCwgb3IgdGhlIG9yaWdpbmFsXG4gKiAgICAgb2JqZWN0IGlmIHRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGltbXV0YWJsZXMuXG4gKiBAdGVtcGxhdGUgSyxWXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVZpZXcob2JqKSB7XG4gIGxldCByZXN1bHQgPSBvYmo7XG4gIGlmIChPYmplY3QuaXNGcm96ZW4gJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShvYmopO1xuICAgIE9iamVjdC5mcmVlemUocmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIEFuIG9iamVjdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyBhbiBpbW11dGFibGUgdmlldyBvZiB0aGUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc0ltbXV0YWJsZVZpZXcob2JqKSB7XG4gIHJldHVybiAhIU9iamVjdC5pc0Zyb3plbiAmJiBPYmplY3QuaXNGcm96ZW4ob2JqKTtcbn1cblxuLyoqXG4gKiBHZXQgYWxsIHByb3BlcnRpZXMgbmFtZXMgb24gYSBnaXZlbiBPYmplY3QgcmVnYXJkbGVzcyBvZiBlbnVtZXJhYmlsaXR5LlxuICogPHA+IElmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBub3JcbiAqIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIHRoZW4gdGhpcyBpcyBlcXVpdmFsZW50IHRvIHVzaW5nXG4gKiBgZ2V0S2V5c2BcbiAqIEBwYXJhbSB7P09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZ2V0IHRoZSBwcm9wZXJ0aWVzIG9mLlxuICogQHBhcmFtIHtib29sZWFuPX0gaW5jbHVkZU9iamVjdFByb3RvdHlwZSBXaGV0aGVyIHByb3BlcnRpZXMgZGVmaW5lZCBvblxuICogICAgIGBPYmplY3QucHJvdG90eXBlYCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGluY2x1ZGVGdW5jdGlvblByb3RvdHlwZSBXaGV0aGVyIHByb3BlcnRpZXMgZGVmaW5lZCBvblxuICogICAgIGBGdW5jdGlvbi5wcm90b3R5cGVgIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0LlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGdldEFsbFByb3BlcnR5TmFtZXMoXG4gICAgb2JqLCBpbmNsdWRlT2JqZWN0UHJvdG90eXBlID0gdW5kZWZpbmVkLFxuICAgIGluY2x1ZGVGdW5jdGlvblByb3RvdHlwZSA9IHVuZGVmaW5lZCkge1xuICBpZiAoIW9iaikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIE5haXZlbHkgdXNlIGEgZm9yLi5pbiBsb29wIHRvIGdldCB0aGUgcHJvcGVydHkgbmFtZXMgaWYgdGhlIGJyb3dzZXIgZG9lc24ndFxuICAvLyBzdXBwb3J0IGFueSBvdGhlciBBUElzIGZvciBnZXR0aW5nIGl0LlxuICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8ICFPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICByZXR1cm4gZ2V0S2V5cyhvYmopO1xuICB9XG5cbiAgY29uc3QgdmlzaXRlZFNldCA9IHt9O1xuXG4gIC8vIFRyYXZlcnNlIHRoZSBwcm90b3R5cGUgY2hhaW4gYW5kIGFkZCBhbGwgcHJvcGVydGllcyB0byB0aGUgdmlzaXRlZCBzZXQuXG4gIGxldCBwcm90byA9IG9iajtcbiAgd2hpbGUgKHByb3RvICYmIChwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZSB8fCAhIWluY2x1ZGVPYmplY3RQcm90b3R5cGUpICYmXG4gICAgICAgICAocHJvdG8gIT09IEZ1bmN0aW9uLnByb3RvdHlwZSB8fCAhIWluY2x1ZGVGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2aXNpdGVkU2V0W25hbWVzW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBnZXRLZXlzKHZpc2l0ZWRTZXQpO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRVM1IG9yIEVTNiBjbGFzcyByZWZlcmVuY2UsIHJldHVybiBpdHMgc3VwZXIgY2xhc3MgLyBzdXBlclxuICogY29uc3RydWN0b3IuXG4gKiBUaGlzIHNob3VsZCBiZSB1c2VkIGluIHJhcmUgY2FzZXMgd2hlcmUgeW91IG5lZWQgdG8gd2FsayB1cCB0aGUgaW5oZXJpdGFuY2VcbiAqIHRyZWUgKHRoaXMgaXMgZ2VuZXJhbGx5IGEgYmFkIGlkZWEpLiBCdXQgdGhpcyB3b3JrIHdpdGggRVM1IGFuZCBFUzYgY2xhc3NlcyxcbiAqIHVubGlrZSByZWx5aW5nIG9uIHRoZSBzdXBlckNsYXNzXyBwcm9wZXJ0eS5cbiAqIE5vdGU6IFRvIHN0YXJ0IHdhbGtpbmcgdXAgdGhlIGhpZXJhcmNoeSBmcm9tIGFuIGluc3RhbmNlIGNhbGwgdGhpcyB3aXRoIGl0c1xuICogYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eTsgZS5nLiBgZ2V0U3VwZXJDbGFzcyhpbnN0YW5jZS5jb25zdHJ1Y3RvcilgLlxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6ID8pfSBjb25zdHJ1Y3RvclxuICogQHJldHVybiB7P09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0U3VwZXJDbGFzcyhjb25zdHJ1Y3Rvcikge1xuICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICByZXR1cm4gcHJvdG8gJiYgcHJvdG8uY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydHMgPSB7XG4gIGFkZCxcbiAgY2xlYXIsXG4gIGNsb25lLFxuICBjb250YWlucyxcbiAgY29udGFpbnNLZXksXG4gIGNvbnRhaW5zVmFsdWUsXG4gIGNyZWF0ZSxcbiAgY3JlYXRlSW1tdXRhYmxlVmlldyxcbiAgY3JlYXRlU2V0LFxuICBlcXVhbHMsXG4gIGV2ZXJ5LFxuICBleHRlbmQsXG4gIGZpbHRlcixcbiAgZmluZEtleSxcbiAgZmluZFZhbHVlLFxuICBmb3JFYWNoLFxuICBnZXQsXG4gIGdldEFsbFByb3BlcnR5TmFtZXMsXG4gIGdldEFueUtleSxcbiAgZ2V0QW55VmFsdWUsXG4gIGdldENvdW50LFxuICBnZXRLZXlzLFxuICBnZXRTdXBlckNsYXNzLFxuICBnZXRWYWx1ZUJ5S2V5cyxcbiAgZ2V0VmFsdWVzLFxuICBpc0VtcHR5LFxuICBpc0ltbXV0YWJsZVZpZXcsXG4gIG1hcCxcbiAgcmVtb3ZlLFxuICBzZXQsXG4gIHNldElmVW5kZWZpbmVkLFxuICBzZXRXaXRoUmV0dXJuVmFsdWVJZk5vdFNldCxcbiAgc29tZSxcbiAgdHJhbnNwb3NlLFxuICB1bnNhZmVDbG9uZSxcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQW4gZXZlbnQgbWFuYWdlciBmb3IgYm90aCBuYXRpdmUgYnJvd3NlciBldmVudFxuICogdGFyZ2V0cyBhbmQgY3VzdG9tIEphdmFTY3JpcHQgZXZlbnQgdGFyZ2V0c1xuICogKGBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlYCkuIFRoaXMgcHJvdmlkZXMgYW4gYWJzdHJhY3Rpb25cbiAqIG92ZXIgYnJvd3NlcnMnIGV2ZW50IHN5c3RlbXMuXG4gKlxuICogSXQgYWxzbyBwcm92aWRlcyBhIHNpbXVsYXRpb24gb2YgVzNDIGV2ZW50IG1vZGVsJ3MgY2FwdHVyZSBwaGFzZSBpblxuICogSW50ZXJuZXQgRXhwbG9yZXIgKElFIDggYW5kIGJlbG93KS4gQ2F2ZWF0OiB0aGUgc2ltdWxhdGlvbiBkb2VzIG5vdFxuICogaW50ZXJhY3Qgd2VsbCB3aXRoIGxpc3RlbmVycyByZWdpc3RlcmVkIGRpcmVjdGx5IG9uIHRoZSBlbGVtZW50c1xuICogKGJ5cGFzc2luZyBnb29nLmV2ZW50cykgb3IgZXZlbiB3aXRoIGxpc3RlbmVycyByZWdpc3RlcmVkIHZpYVxuICogZ29vZy5ldmVudHMgaW4gYSBzZXBhcmF0ZSBKUyBiaW5hcnkuIEluIHRoZXNlIGNhc2VzLCB3ZSBwcm92aWRlXG4gKiBubyBvcmRlcmluZyBndWFyYW50ZWVzLlxuICpcbiAqIFRoZSBsaXN0ZW5lcnMgd2lsbCByZWNlaXZlIGEgXCJwYXRjaGVkXCIgZXZlbnQgb2JqZWN0LiBTdWNoIGV2ZW50IG9iamVjdFxuICogY29udGFpbnMgbm9ybWFsaXplZCB2YWx1ZXMgZm9yIGNlcnRhaW4gZXZlbnQgcHJvcGVydGllcyB0aGF0IGRpZmZlcnMgaW5cbiAqIGRpZmZlcmVudCBicm93c2Vycy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogPHByZT5cbiAqIGdvb2cuZXZlbnRzLmxpc3RlbihteU5vZGUsICdjbGljaycsIGZ1bmN0aW9uKGUpIHsgYWxlcnQoJ3dvbycpIH0pO1xuICogZ29vZy5ldmVudHMubGlzdGVuKG15Tm9kZSwgJ21vdXNlb3ZlcicsIG1vdXNlSGFuZGxlciwgdHJ1ZSk7XG4gKiBnb29nLmV2ZW50cy51bmxpc3RlbihteU5vZGUsICdtb3VzZW92ZXInLCBtb3VzZUhhbmRsZXIsIHRydWUpO1xuICogZ29vZy5ldmVudHMucmVtb3ZlQWxsKG15Tm9kZSk7XG4gKiA8L3ByZT5cbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gSUUgYW5kIGV2ZW50IG9iamVjdCBwYXRjaGluZ11cbiAqXG4gKiBAc2VlIC4uL2RlbW9zL2V2ZW50cy5odG1sXG4gKiBAc2VlIC4uL2RlbW9zL2V2ZW50LXByb3BhZ2F0aW9uLmh0bWxcbiAqIEBzZWUgLi4vZGVtb3Mvc3RvcGV2ZW50Lmh0bWxcbiAqL1xuXG4vLyBJTVBMRU1FTlRBVElPTiBOT1RFUzpcbi8vIGdvb2cuZXZlbnRzIHN0b3JlcyBhbiBhdXhpbGlhcnkgZGF0YSBzdHJ1Y3R1cmUgb24gZWFjaCBFdmVudFRhcmdldFxuLy8gc291cmNlIGJlaW5nIGxpc3RlbmVkIG9uLiBUaGlzIGFsbG93cyB1cyB0byB0YWtlIGFkdmFudGFnZSBvZiBHQyxcbi8vIGhhdmluZyB0aGUgZGF0YSBzdHJ1Y3R1cmUgR0MnZCB3aGVuIHRoZSBFdmVudFRhcmdldCBpcyBHQydkLiBUaGlzXG4vLyBHQyBiZWhhdmlvciBpcyBlcXVpdmFsZW50IHRvIHVzaW5nIFczQyBET00gRXZlbnRzIGRpcmVjdGx5LlxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZScpO1xuZ29vZy5wcm92aWRlKCdnb29nLmV2ZW50cy5LZXknKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGUnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5kZWJ1Zy5lbnRyeVBvaW50UmVnaXN0cnknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkJyb3dzZXJGZWF0dXJlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkxpc3RlbmFibGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZGVidWcuRXJyb3JIYW5kbGVyJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudElkJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudExpa2UnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkV2ZW50V3JhcHBlcicpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleScpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuTGlzdGVuZXInKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHtudW1iZXJ8Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX1cbiAqL1xuZ29vZy5ldmVudHMuS2V5O1xuXG5cbi8qKlxuICogQHR5cGVkZWYge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9XG4gKi9cbmdvb2cuZXZlbnRzLkxpc3RlbmFibGVUeXBlO1xuXG5cbi8qKlxuICogUHJvcGVydHkgbmFtZSBvbiBhIG5hdGl2ZSBldmVudCB0YXJnZXQgZm9yIHRoZSBsaXN0ZW5lciBtYXBcbiAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9XG4gKi9cbmdvb2cuZXZlbnRzLkxJU1RFTkVSX01BUF9QUk9QXyA9ICdjbG9zdXJlX2xtXycgKyAoKE1hdGgucmFuZG9tKCkgKiAxZTYpIHwgMCk7XG5cblxuLyoqXG4gKiBTdHJpbmcgdXNlZCB0byBwcmVwZW5kIHRvIElFIGV2ZW50IHR5cGVzLlxuICogQGNvbnN0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5vblN0cmluZ18gPSAnb24nO1xuXG5cbi8qKlxuICogTWFwIG9mIGNvbXB1dGVkIFwib248ZXZlbnRuYW1lPlwiIHN0cmluZ3MgZm9yIElFIGV2ZW50IHR5cGVzLiBDYWNoaW5nXG4gKiB0aGlzIHJlbW92ZXMgYW4gZXh0cmEgb2JqZWN0IGFsbG9jYXRpb24gaW4gZ29vZy5ldmVudHMubGlzdGVuIHdoaWNoXG4gKiBpbXByb3ZlcyBJRTYgcGVyZm9ybWFuY2UuXG4gKiBAY29uc3RcbiAqIEBkaWN0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5vblN0cmluZ01hcF8gPSB7fTtcblxuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9IERpZmZlcmVudCBjYXB0dXJlIHNpbXVsYXRpb24gbW9kZSBmb3IgSUU4LS5cbiAqL1xuZ29vZy5ldmVudHMuQ2FwdHVyZVNpbXVsYXRpb25Nb2RlID0ge1xuICAvKipcbiAgICogRG9lcyBub3QgcGVyZm9ybSBjYXB0dXJlIHNpbXVsYXRpb24uIFdpbGwgYXNzZXJ0cyBpbiBJRTgtIHdoZW4geW91XG4gICAqIGFkZCBjYXB0dXJlIGxpc3RlbmVycy5cbiAgICovXG4gIE9GRl9BTkRfRkFJTDogMCxcblxuICAvKipcbiAgICogRG9lcyBub3QgcGVyZm9ybSBjYXB0dXJlIHNpbXVsYXRpb24sIHNpbGVudGx5IGlnbm9yZSBjYXB0dXJlXG4gICAqIGxpc3RlbmVycy5cbiAgICovXG4gIE9GRl9BTkRfU0lMRU5UOiAxLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBjYXB0dXJlIHNpbXVsYXRpb24uXG4gICAqL1xuICBPTjogMlxufTtcblxuXG4vKipcbiAqIEBkZWZpbmUge251bWJlcn0gVGhlIGNhcHR1cmUgc2ltdWxhdGlvbiBtb2RlIGZvciBJRTgtLiBCeSBkZWZhdWx0LFxuICogICAgIHRoaXMgaXMgT04uXG4gKi9cbmdvb2cuZXZlbnRzLkNBUFRVUkVfU0lNVUxBVElPTl9NT0RFID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5ldmVudHMuQ0FQVFVSRV9TSU1VTEFUSU9OX01PREUnLCAyKTtcblxuXG4vKipcbiAqIEVzdGltYXRlZCBjb3VudCBvZiB0b3RhbCBuYXRpdmUgbGlzdGVuZXJzLlxuICogQHByaXZhdGUge251bWJlcn1cbiAqL1xuZ29vZy5ldmVudHMubGlzdGVuZXJDb3VudEVzdGltYXRlXyA9IDA7XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBhIHNwZWNpZmljIGV2ZW50IG9uIGEgbmF0aXZlIGV2ZW50XG4gKiB0YXJnZXQgKHN1Y2ggYXMgYSBET00gZWxlbWVudCkgb3IgYW4gb2JqZWN0IHRoYXQgaGFzIGltcGxlbWVudGVkXG4gKiB7QGxpbmsgZ29vZy5ldmVudHMuTGlzdGVuYWJsZX0uIEEgbGlzdGVuZXIgY2FuIG9ubHkgYmUgYWRkZWQgb25jZVxuICogdG8gYW4gb2JqZWN0IGFuZCBpZiBpdCBpcyBhZGRlZCBhZ2FpbiB0aGUga2V5IGZvciB0aGUgbGlzdGVuZXIgaXNcbiAqIHJldHVybmVkLiBOb3RlIHRoYXQgaWYgdGhlIGV4aXN0aW5nIGxpc3RlbmVyIGlzIGEgb25lLW9mZiBsaXN0ZW5lclxuICogKHJlZ2lzdGVyZWQgdmlhIGxpc3Rlbk9uY2UpLCBpdCB3aWxsIG5vIGxvbmdlciBiZSBhIG9uZS1vZmZcbiAqIGxpc3RlbmVyIGFmdGVyIGEgY2FsbCB0byBsaXN0ZW4oKS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW5cbiAqICAgICB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9XG4gKiAgICAgbGlzdGVuZXIgQ2FsbGJhY2sgbWV0aG9kLCBvciBhbiBvYmplY3Qgd2l0aCBhIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogICAgIFdBUk5JTkc6IHBhc3NpbmcgYW4gT2JqZWN0IGlzIG5vdyBzb2Z0bHkgZGVwcmVjYXRlZC5cbiAqIEBwYXJhbSB7KGJvb2xlYW58IUFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKT19IG9wdF9vcHRpb25zXG4gKiBAcGFyYW0ge1Q9fSBvcHRfaGFuZGxlciBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuS2V5fSBVbmlxdWUga2V5IGZvciB0aGUgbGlzdGVuZXIuXG4gKiBAdGVtcGxhdGUgVCxFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5saXN0ZW4gPSBmdW5jdGlvbihzcmMsIHR5cGUsIGxpc3RlbmVyLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMub25jZSkge1xuICAgIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5PbmNlKFxuICAgICAgICBzcmMsIHR5cGUsIGxpc3RlbmVyLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBnb29nLmV2ZW50cy5saXN0ZW4oc3JjLCB0eXBlW2ldLCBsaXN0ZW5lciwgb3B0X29wdGlvbnMsIG9wdF9oYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsaXN0ZW5lciA9IGdvb2cuZXZlbnRzLndyYXBMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpKSB7XG4gICAgdmFyIGNhcHR1cmUgPVxuICAgICAgICBnb29nLmlzT2JqZWN0KG9wdF9vcHRpb25zKSA/ICEhb3B0X29wdGlvbnMuY2FwdHVyZSA6ICEhb3B0X29wdGlvbnM7XG4gICAgcmV0dXJuIHNyYy5saXN0ZW4oXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSAqLyAodHlwZSksIGxpc3RlbmVyLCBjYXB0dXJlLFxuICAgICAgICBvcHRfaGFuZGxlcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdvb2cuZXZlbnRzLmxpc3Rlbl8oXG4gICAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAoc3JjKSwgdHlwZSwgbGlzdGVuZXIsXG4gICAgICAgIC8qIGNhbGxPbmNlICovIGZhbHNlLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpYyBldmVudCBvbiBhIG5hdGl2ZSBldmVudFxuICogdGFyZ2V0LiBBIGxpc3RlbmVyIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgdG8gYW4gb2JqZWN0IGFuZCBpZiBpdFxuICogaXMgYWRkZWQgYWdhaW4gdGhlIGtleSBmb3IgdGhlIGxpc3RlbmVyIGlzIHJldHVybmVkLlxuICpcbiAqIE5vdGUgdGhhdCBhIG9uZS1vZmYgbGlzdGVuZXIgd2lsbCBub3QgY2hhbmdlIGFuIGV4aXN0aW5nIGxpc3RlbmVyLFxuICogaWYgYW55LiBPbiB0aGUgb3RoZXIgaGFuZCBhIG5vcm1hbCBsaXN0ZW5lciB3aWxsIGNoYW5nZSBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciB0byBiZWNvbWUgYSBub3JtYWwgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gc3JjIFRoZSBub2RlIHRvIGxpc3RlbiB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3w/Z29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj59IHR5cGUgRXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FsbE9uY2UgV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtb2ZmXG4gKiAgICAgbGlzdGVuZXIgb3Igb3RoZXJ3aXNlLlxuICogQHBhcmFtIHsoYm9vbGVhbnwhQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpPX0gb3B0X29wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXIgRWxlbWVudCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBFVkVOVE9CSlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMubGlzdGVuXyA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgbGlzdGVuZXIsIGNhbGxPbmNlLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZXZlbnQgdHlwZScpO1xuICB9XG5cbiAgdmFyIGNhcHR1cmUgPVxuICAgICAgZ29vZy5pc09iamVjdChvcHRfb3B0aW9ucykgPyAhIW9wdF9vcHRpb25zLmNhcHR1cmUgOiAhIW9wdF9vcHRpb25zO1xuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhzcmMpO1xuICBpZiAoIWxpc3RlbmVyTWFwKSB7XG4gICAgc3JjW2dvb2cuZXZlbnRzLkxJU1RFTkVSX01BUF9QUk9QX10gPSBsaXN0ZW5lck1hcCA9XG4gICAgICAgIG5ldyBnb29nLmV2ZW50cy5MaXN0ZW5lck1hcChzcmMpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyT2JqID0gLyoqIEB0eXBlIHtnb29nLmV2ZW50cy5MaXN0ZW5lcn0gKi8gKFxuICAgICAgbGlzdGVuZXJNYXAuYWRkKHR5cGUsIGxpc3RlbmVyLCBjYWxsT25jZSwgY2FwdHVyZSwgb3B0X2hhbmRsZXIpKTtcblxuICAvLyBJZiB0aGUgbGlzdGVuZXJPYmogYWxyZWFkeSBoYXMgYSBwcm94eSwgaXQgaGFzIGJlZW4gc2V0IHVwXG4gIC8vIHByZXZpb3VzbHkuIFdlIHNpbXBseSByZXR1cm4uXG4gIGlmIChsaXN0ZW5lck9iai5wcm94eSkge1xuICAgIHJldHVybiBsaXN0ZW5lck9iajtcbiAgfVxuXG4gIHZhciBwcm94eSA9IGdvb2cuZXZlbnRzLmdldFByb3h5KCk7XG4gIGxpc3RlbmVyT2JqLnByb3h5ID0gcHJveHk7XG5cbiAgcHJveHkuc3JjID0gc3JjO1xuICBwcm94eS5saXN0ZW5lciA9IGxpc3RlbmVyT2JqO1xuXG4gIC8vIEF0dGFjaCB0aGUgcHJveHkgdGhyb3VnaCB0aGUgYnJvd3NlcidzIEFQSVxuICBpZiAoc3JjLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAvLyBEb24ndCBwYXNzIGFuIG9iamVjdCBhcyBgY2FwdHVyZWAgaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoYXQuXG4gICAgaWYgKCFnb29nLmV2ZW50cy5Ccm93c2VyRmVhdHVyZS5QQVNTSVZFX0VWRU5UUykge1xuICAgICAgb3B0X29wdGlvbnMgPSBjYXB0dXJlO1xuICAgIH1cbiAgICAvLyBEb24ndCBicmVhayB0ZXN0cyB0aGF0IGV4cGVjdCBhIGJvb2xlYW4uXG4gICAgaWYgKG9wdF9vcHRpb25zID09PSB1bmRlZmluZWQpIG9wdF9vcHRpb25zID0gZmFsc2U7XG4gICAgc3JjLmFkZEV2ZW50TGlzdGVuZXIodHlwZS50b1N0cmluZygpLCBwcm94eSwgb3B0X29wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHNyYy5hdHRhY2hFdmVudCkge1xuICAgIC8vIFRoZSBlbHNlIGlmIGFib3ZlIHVzZWQgdG8gYmUgYW4gdW5jb25kaXRpb25hbCBlbHNlLiBJdCB3b3VsZCBjYWxsXG4gICAgLy8gYXR0YWNoRXZlbnQgY29tZSBnd3Mgb3IgaGlnaCB3YXRlci4gVGhpcyB3b3VsZCBzb21ldGltZXMgdGhyb3cgYW5cbiAgICAvLyBleGNlcHRpb24gb24gSUUxMSwgc3BvaWxpbmcgdGhlIGRheSBvZiBzb21lIGNhbGxlcnMuIFRoZSBwcmV2aW91c1xuICAgIC8vIGluY2FybmF0aW9uIG9mIHRoaXMgY29kZSwgZnJvbSAyMDA3LCBpbmRpY2F0ZXMgdGhhdCBpdCByZXBsYWNlZCBhblxuICAgIC8vIGVhcmxpZXIgc3RpbGwgdmVyc2lvbiB0aGF0IGNhdXNlZCBleGNlc3MgYWxsb2NhdGlvbnMgb24gSUU2LlxuICAgIHNyYy5hdHRhY2hFdmVudChnb29nLmV2ZW50cy5nZXRPblN0cmluZ18odHlwZS50b1N0cmluZygpKSwgcHJveHkpO1xuICB9IGVsc2UgaWYgKHNyYy5hZGRMaXN0ZW5lciAmJiBzcmMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICAvLyBJbiBJRSwgTWVkaWFRdWVyeUxpc3QgdXNlcyBhZGRMaXN0ZW5lcigpIGluc3RlYWRkIG9mIGFkZEV2ZW50TGlzdGVuZXIuIEluXG4gICAgLy8gU2FmYXJpLCB0aGVyZSBpcyBubyBnbG9iYWwgZm9yIHRoZSBNZWRpYVF1ZXJ5TGlzdCBjb25zdHJ1Y3Rvciwgc28gd2UganVzdFxuICAgIC8vIGNoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBcImxvb2tzIGxpa2VcIiBNZWRpYVF1ZXJ5TGlzdC5cbiAgICBnb29nLmFzc2VydHMuYXNzZXJ0KFxuICAgICAgICB0eXBlID09PSAnY2hhbmdlJywgJ01lZGlhUXVlcnlMaXN0IG9ubHkgaGFzIGEgY2hhbmdlIGV2ZW50Jyk7XG4gICAgc3JjLmFkZExpc3RlbmVyKHByb3h5KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS4nKTtcbiAgfVxuXG4gIGdvb2cuZXZlbnRzLmxpc3RlbmVyQ291bnRFc3RpbWF0ZV8rKztcbiAgcmV0dXJuIGxpc3RlbmVyT2JqO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcmV0dXJuaW5nIGEgcHJveHkgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgbmV3IG9yIHJldXNlZCBmdW5jdGlvbiBvYmplY3QuXG4gKi9cbmdvb2cuZXZlbnRzLmdldFByb3h5ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgcHJveHlDYWxsYmFja0Z1bmN0aW9uID0gZ29vZy5ldmVudHMuaGFuZGxlQnJvd3NlckV2ZW50XztcbiAgY29uc3QgZiA9IGZ1bmN0aW9uKGV2ZW50T2JqZWN0KSB7XG4gICAgcmV0dXJuIHByb3h5Q2FsbGJhY2tGdW5jdGlvbi5jYWxsKGYuc3JjLCBmLmxpc3RlbmVyLCBldmVudE9iamVjdCk7XG4gIH07XG4gIHJldHVybiBmO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWMgZXZlbnQgb24gYSBuYXRpdmUgZXZlbnRcbiAqIHRhcmdldCAoc3VjaCBhcyBhIERPTSBlbGVtZW50KSBvciBhbiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWRcbiAqIHtAbGluayBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfS4gQWZ0ZXIgdGhlIGV2ZW50IGhhcyBmaXJlZCB0aGUgZXZlbnRcbiAqIGxpc3RlbmVyIGlzIHJlbW92ZWQgZnJvbSB0aGUgdGFyZ2V0LlxuICpcbiAqIElmIGFuIGV4aXN0aW5nIGxpc3RlbmVyIGFscmVhZHkgZXhpc3RzLCBsaXN0ZW5PbmNlIHdpbGwgZG9cbiAqIG5vdGhpbmcuIEluIHBhcnRpY3VsYXIsIGlmIHRoZSBsaXN0ZW5lciB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkXG4gKiB2aWEgbGlzdGVuKCksIGxpc3Rlbk9uY2UoKSB3aWxsIG5vdCB0dXJuIHRoZSBsaXN0ZW5lciBpbnRvIGFcbiAqIG9uZS1vZmYgbGlzdGVuZXIuIFNpbWlsYXJseSwgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBleGlzdGluZ1xuICogb25lLW9mZiBsaXN0ZW5lciwgbGlzdGVuT25jZSBkb2VzIG5vdCBtb2RpZnkgdGhlIGxpc3RlbmVycyAoaXQgaXNcbiAqIHN0aWxsIGEgb25jZSBsaXN0ZW5lcikuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBzcmMgVGhlIG5vZGUgdG8gbGlzdGVuXG4gKiAgICAgdG8gZXZlbnRzIG9uLlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxcbiAqICAgICAhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj58IUFycmF5PCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj59XG4gKiAgICAgdHlwZSBFdmVudCB0eXBlIG9yIGFycmF5IG9mIGV2ZW50IHR5cGVzLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsIEVWRU5UT0JKKTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsfVxuICogICAgIGxpc3RlbmVyIENhbGxiYWNrIG1ldGhvZC5cbiAqIEBwYXJhbSB7KGJvb2xlYW58IUFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKT19IG9wdF9vcHRpb25zXG4gKiBAcGFyYW0ge1Q9fSBvcHRfaGFuZGxlciBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Z29vZy5ldmVudHMuS2V5fSBVbmlxdWUga2V5IGZvciB0aGUgbGlzdGVuZXIuXG4gKiBAdGVtcGxhdGUgVCxFVkVOVE9CSlxuICovXG5nb29nLmV2ZW50cy5saXN0ZW5PbmNlID0gZnVuY3Rpb24oXG4gICAgc3JjLCB0eXBlLCBsaXN0ZW5lciwgb3B0X29wdGlvbnMsIG9wdF9oYW5kbGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGdvb2cuZXZlbnRzLmxpc3Rlbk9uY2Uoc3JjLCB0eXBlW2ldLCBsaXN0ZW5lciwgb3B0X29wdGlvbnMsIG9wdF9oYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsaXN0ZW5lciA9IGdvb2cuZXZlbnRzLndyYXBMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpKSB7XG4gICAgdmFyIGNhcHR1cmUgPVxuICAgICAgICBnb29nLmlzT2JqZWN0KG9wdF9vcHRpb25zKSA/ICEhb3B0X29wdGlvbnMuY2FwdHVyZSA6ICEhb3B0X29wdGlvbnM7XG4gICAgcmV0dXJuIHNyYy5saXN0ZW5PbmNlKFxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZH0gKi8gKHR5cGUpLCBsaXN0ZW5lciwgY2FwdHVyZSxcbiAgICAgICAgb3B0X2hhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5fKFxuICAgICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKHNyYyksIHR5cGUsIGxpc3RlbmVyLFxuICAgICAgICAvKiBjYWxsT25jZSAqLyB0cnVlLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgd3JhcHBlciBvbiBhIERPTSBOb2RlIG9yIGFuXG4gKiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWQge0BsaW5rIGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9LiBBIGxpc3RlbmVyIGNhblxuICogb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgdGFyZ2V0IHRvXG4gKiAgICAgbGlzdGVuIHRvIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsID8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyXG4gKiAgICAgQ2FsbGJhY2sgbWV0aG9kLCBvciBhbiBvYmplY3Qgd2l0aCBhIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2UgKGRlZmF1bHRzIHRvXG4gKiAgICAgZmFsc2UpLlxuICogQHBhcmFtIHtUPX0gb3B0X2hhbmRsZXIgRWxlbWVudCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZXZlbnRzLmxpc3RlbldpdGhXcmFwcGVyID0gZnVuY3Rpb24oXG4gICAgc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgd3JhcHBlci5saXN0ZW4oc3JjLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gc3JjIFRoZSB0YXJnZXQgdG8gc3RvcFxuICogICAgIGxpc3RlbmluZyB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMgdG8gdW5saXN0ZW4gdG8uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyIFRoZVxuICogICAgIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7KGJvb2xlYW58IUV2ZW50TGlzdGVuZXJPcHRpb25zKT19IG9wdF9vcHRpb25zXG4gKiAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZSBvZiB0aGVcbiAqICAgICBldmVudC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXIgRWxlbWVudCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4gez9ib29sZWFufSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGxpc3RlbmVyIHdhcyB0aGVyZSB0byByZW1vdmUuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMudW5saXN0ZW4gPSBmdW5jdGlvbihzcmMsIHR5cGUsIGxpc3RlbmVyLCBvcHRfb3B0aW9ucywgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkrKykge1xuICAgICAgZ29vZy5ldmVudHMudW5saXN0ZW4oc3JjLCB0eXBlW2ldLCBsaXN0ZW5lciwgb3B0X29wdGlvbnMsIG9wdF9oYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGNhcHR1cmUgPVxuICAgICAgZ29vZy5pc09iamVjdChvcHRfb3B0aW9ucykgPyAhIW9wdF9vcHRpb25zLmNhcHR1cmUgOiAhIW9wdF9vcHRpb25zO1xuXG4gIGxpc3RlbmVyID0gZ29vZy5ldmVudHMud3JhcExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHNyYykpIHtcbiAgICByZXR1cm4gc3JjLnVubGlzdGVuKFxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZH0gKi8gKHR5cGUpLCBsaXN0ZW5lciwgY2FwdHVyZSxcbiAgICAgICAgb3B0X2hhbmRsZXIpO1xuICB9XG5cbiAgaWYgKCFzcmMpIHtcbiAgICAvLyBUT0RPKGNocmlzaGVucnkpOiBXZSBzaG91bGQgdGlnaHRlbiB0aGUgQVBJIHRvIG9ubHkgYWNjZXB0XG4gICAgLy8gbm9uLW51bGwgb2JqZWN0cywgb3IgYWRkIGFuIGFzc2VydGlvbiBoZXJlLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAoc3JjKSk7XG4gIGlmIChsaXN0ZW5lck1hcCkge1xuICAgIHZhciBsaXN0ZW5lck9iaiA9IGxpc3RlbmVyTWFwLmdldExpc3RlbmVyKFxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZH0gKi8gKHR5cGUpLCBsaXN0ZW5lciwgY2FwdHVyZSxcbiAgICAgICAgb3B0X2hhbmRsZXIpO1xuICAgIGlmIChsaXN0ZW5lck9iaikge1xuICAgICAgcmV0dXJuIGdvb2cuZXZlbnRzLnVubGlzdGVuQnlLZXkobGlzdGVuZXJPYmopO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIHdhcyBhZGRlZCB3aXRoIGxpc3RlbigpIGJ5IHRoZSBrZXlcbiAqIHJldHVybmVkIGJ5IGxpc3RlbigpLlxuICpcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuS2V5fSBrZXkgVGhlIGtleSByZXR1cm5lZCBieSBsaXN0ZW4oKSBmb3IgdGhpc1xuICogICAgIGV2ZW50IGxpc3RlbmVyLlxuICogQHJldHVybiB7Ym9vbGVhbn0gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBsaXN0ZW5lciB3YXMgdGhlcmUgdG8gcmVtb3ZlLlxuICovXG5nb29nLmV2ZW50cy51bmxpc3RlbkJ5S2V5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gVE9ETyhjaHJpc2hlbnJ5KTogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiB0ZXN0cyB0aGF0IHJlbHkgb24gdGhpc1xuICAvLyBhcmUgZml4ZWQuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGtleTtcbiAgaWYgKCFsaXN0ZW5lciB8fCBsaXN0ZW5lci5yZW1vdmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNyYyA9IGxpc3RlbmVyLnNyYztcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHNyYykpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZX0gKi8gKHNyYykudW5saXN0ZW5CeUtleShsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgdHlwZSA9IGxpc3RlbmVyLnR5cGU7XG4gIHZhciBwcm94eSA9IGxpc3RlbmVyLnByb3h5O1xuICBpZiAoc3JjLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICBzcmMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBwcm94eSwgbGlzdGVuZXIuY2FwdHVyZSk7XG4gIH0gZWxzZSBpZiAoc3JjLmRldGFjaEV2ZW50KSB7XG4gICAgc3JjLmRldGFjaEV2ZW50KGdvb2cuZXZlbnRzLmdldE9uU3RyaW5nXyh0eXBlKSwgcHJveHkpO1xuICB9IGVsc2UgaWYgKHNyYy5hZGRMaXN0ZW5lciAmJiBzcmMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIocHJveHkpO1xuICB9XG4gIGdvb2cuZXZlbnRzLmxpc3RlbmVyQ291bnRFc3RpbWF0ZV8tLTtcblxuICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oXG4gICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKHNyYykpO1xuICAvLyBUT0RPKGNocmlzaGVucnkpOiBUcnkgdG8gcmVtb3ZlIHRoaXMgY29uZGl0aW9uYWwgYW5kIGV4ZWN1dGUgdGhlXG4gIC8vIGZpcnN0IGJyYW5jaCBhbHdheXMuIFRoaXMgc2hvdWxkIGJlIHNhZmUuXG4gIGlmIChsaXN0ZW5lck1hcCkge1xuICAgIGxpc3RlbmVyTWFwLnJlbW92ZUJ5S2V5KGxpc3RlbmVyKTtcbiAgICBpZiAobGlzdGVuZXJNYXAuZ2V0VHlwZUNvdW50KCkgPT0gMCkge1xuICAgICAgLy8gTnVsbCB0aGUgc3JjLCBqdXN0IGJlY2F1c2UgdGhpcyBpcyBzaW1wbGUgdG8gZG8gKGFuZCB1c2VmdWxcbiAgICAgIC8vIGZvciBJRSA8PSA3KS5cbiAgICAgIGxpc3RlbmVyTWFwLnNyYyA9IG51bGw7XG4gICAgICAvLyBXZSBkb24ndCB1c2UgZGVsZXRlIGhlcmUgYmVjYXVzZSBJRSBkb2VzIG5vdCBhbGxvdyBkZWxldGVcbiAgICAgIC8vIG9uIGEgd2luZG93IG9iamVjdC5cbiAgICAgIHNyY1tnb29nLmV2ZW50cy5MSVNURU5FUl9NQVBfUFJPUF9dID0gbnVsbDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuTGlzdGVuZXJ9ICovIChsaXN0ZW5lcikubWFya0FzUmVtb3ZlZCgpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciB3aGljaCB3YXMgYWRkZWQgd2l0aCBsaXN0ZW5XaXRoV3JhcHBlcigpLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuTGlzdGVuYWJsZX0gc3JjIFRoZSB0YXJnZXQgdG8gc3RvcFxuICogICAgIGxpc3RlbmluZyB0byBldmVudHMgb24uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50V3JhcHBlcn0gd3JhcHBlciBFdmVudCB3cmFwcGVyIHRvIHVzZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gbGlzdGVuZXIgVGhlXG4gKiAgICAgbGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgSW4gRE9NLWNvbXBsaWFudCBicm93c2VycywgdGhpcyBkZXRlcm1pbmVzXG4gKiAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZSBvZiB0aGVcbiAqICAgICBldmVudC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXIgRWxlbWVudCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqL1xuZ29vZy5ldmVudHMudW5saXN0ZW5XaXRoV3JhcHBlciA9IGZ1bmN0aW9uKFxuICAgIHNyYywgd3JhcHBlciwgbGlzdGVuZXIsIG9wdF9jYXB0LCBvcHRfaGFuZGxlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHdyYXBwZXIudW5saXN0ZW4oc3JjLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9oYW5kbGVyKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgZnJvbSBhbiBvYmplY3QuIFlvdSBjYW4gYWxzbyBvcHRpb25hbGx5XG4gKiByZW1vdmUgbGlzdGVuZXJzIG9mIGEgcGFydGljdWxhciB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fHVuZGVmaW5lZH0gb2JqIE9iamVjdCB0byByZW1vdmUgbGlzdGVuZXJzIGZyb20uIE11c3QgYmUgYW5cbiAqICAgICBFdmVudFRhcmdldCBvciBhIGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZD19IG9wdF90eXBlIFR5cGUgb2YgZXZlbnQgdG8gcmVtb3ZlLlxuICogICAgIERlZmF1bHQgaXMgYWxsIHR5cGVzLlxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgb2YgbGlzdGVuZXJzIHJlbW92ZWQuXG4gKi9cbmdvb2cuZXZlbnRzLnJlbW92ZUFsbCA9IGZ1bmN0aW9uKG9iaiwgb3B0X3R5cGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUT0RPKGNocmlzaGVucnkpOiBDaGFuZ2UgdGhlIHR5cGUgb2Ygb2JqIHRvXG4gIC8vICghRXZlbnRUYXJnZXR8IWdvb2cuZXZlbnRzLkxpc3RlbmFibGUpLlxuXG4gIGlmICghb2JqKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkob2JqKSkge1xuICAgIHJldHVybiAvKiogQHR5cGUgez99ICovIChvYmopLnJlbW92ZUFsbExpc3RlbmVycyhvcHRfdHlwZSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJNYXAgPSBnb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8oXG4gICAgICAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKG9iaikpO1xuICBpZiAoIWxpc3RlbmVyTWFwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgY291bnQgPSAwO1xuICB2YXIgdHlwZVN0ciA9IG9wdF90eXBlICYmIG9wdF90eXBlLnRvU3RyaW5nKCk7XG4gIGZvciAodmFyIHR5cGUgaW4gbGlzdGVuZXJNYXAubGlzdGVuZXJzKSB7XG4gICAgaWYgKCF0eXBlU3RyIHx8IHR5cGUgPT0gdHlwZVN0cikge1xuICAgICAgLy8gQ2xvbmUgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHVubGlzdGVuQnlLZXlcbiAgICAgIC8vIGNoYW5naW5nIHRoZSBjb250ZW50IG9mIHRoZSBMaXN0ZW5lck1hcC5cbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBsaXN0ZW5lck1hcC5saXN0ZW5lcnNbdHlwZV0uY29uY2F0KCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoZ29vZy5ldmVudHMudW5saXN0ZW5CeUtleShsaXN0ZW5lcnNbaV0pKSB7XG4gICAgICAgICAgKytjb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdGVuZXJzIGZvciBhIGdpdmVuIG9iamVjdCwgdHlwZSBhbmQgY2FwdHVyZSBwaGFzZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0byBnZXQgbGlzdGVuZXJzIGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgQ2FwdHVyZSBwaGFzZT8uXG4gKiBAcmV0dXJuIHshQXJyYXk8IWdvb2cuZXZlbnRzLkxpc3RlbmVyPn0gQXJyYXkgb2YgbGlzdGVuZXIgb2JqZWN0cy5cbiAqL1xuZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24ob2JqLCB0eXBlLCBjYXB0dXJlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KG9iaikpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZX0gKi8gKG9iaikuZ2V0TGlzdGVuZXJzKFxuICAgICAgICB0eXBlLCBjYXB0dXJlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgLy8gVE9ETyhjaHJpc2hlbnJ5KTogV2Ugc2hvdWxkIHRpZ2h0ZW4gdGhlIEFQSSB0byBhY2NlcHRcbiAgICAgIC8vICFFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLCBhbmQgYWRkIGFuIGFzc2VydGlvbiBoZXJlLlxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgICAgLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIChvYmopKTtcbiAgICByZXR1cm4gbGlzdGVuZXJNYXAgPyBsaXN0ZW5lck1hcC5nZXRMaXN0ZW5lcnModHlwZSwgY2FwdHVyZSkgOiBbXTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGdvb2cuZXZlbnRzLkxpc3RlbmVyIGZvciB0aGUgZXZlbnQgb3IgbnVsbCBpZiBubyBzdWNoIGxpc3RlbmVyIGlzXG4gKiBpbiB1c2UuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBzcmMgVGhlIHRhcmdldCBmcm9tXG4gKiAgICAgd2hpY2ggdG8gZ2V0IGxpc3RlbmVycy5cbiAqIEBwYXJhbSB7P3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj59IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbihFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gbGlzdGVuZXIgVGhlXG4gKiAgICAgbGlzdGVuZXIgZnVuY3Rpb24gdG8gZ2V0LlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHQgSW4gRE9NLWNvbXBsaWFudCBicm93c2VycywgdGhpcyBkZXRlcm1pbmVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCBkdXJpbmcgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9oYW5kbGVyIEVsZW1lbnQgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlS2V5fSB0aGUgZm91bmQgbGlzdGVuZXIgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqL1xuZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXIgPSBmdW5jdGlvbihzcmMsIHR5cGUsIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUT0RPKGNocmlzaGVucnkpOiBDaGFuZ2UgdHlwZSBmcm9tID9zdHJpbmcgdG8gc3RyaW5nLCBvciBhZGQgYXNzZXJ0aW9uLlxuICB0eXBlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0eXBlKTtcbiAgbGlzdGVuZXIgPSBnb29nLmV2ZW50cy53cmFwTGlzdGVuZXIobGlzdGVuZXIpO1xuICB2YXIgY2FwdHVyZSA9ICEhb3B0X2NhcHQ7XG4gIGlmIChnb29nLmV2ZW50cy5MaXN0ZW5hYmxlLmlzSW1wbGVtZW50ZWRCeShzcmMpKSB7XG4gICAgcmV0dXJuIHNyYy5nZXRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSwgb3B0X2hhbmRsZXIpO1xuICB9XG5cbiAgaWYgKCFzcmMpIHtcbiAgICAvLyBUT0RPKGNocmlzaGVucnkpOiBXZSBzaG91bGQgdGlnaHRlbiB0aGUgQVBJIHRvIG9ubHkgYWNjZXB0XG4gICAgLy8gbm9uLW51bGwgb2JqZWN0cywgb3IgYWRkIGFuIGFzc2VydGlvbiBoZXJlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyTWFwID0gZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXJNYXBfKFxuICAgICAgLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIChzcmMpKTtcbiAgaWYgKGxpc3RlbmVyTWFwKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyTWFwLmdldExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlLCBvcHRfaGFuZGxlcik7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGFuIGV2ZW50IHRhcmdldCBoYXMgYW55IGFjdGl2ZSBsaXN0ZW5lcnMgbWF0Y2hpbmcgdGhlXG4gKiBzcGVjaWZpZWQgc2lnbmF0dXJlLiBJZiBlaXRoZXIgdGhlIHR5cGUgb3IgY2FwdHVyZSBwYXJhbWV0ZXJzIGFyZVxuICogdW5zcGVjaWZpZWQsIHRoZSBmdW5jdGlvbiB3aWxsIG1hdGNoIG9uIHRoZSByZW1haW5pbmcgY3JpdGVyaWEuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfSBvYmogVGFyZ2V0IHRvIGdldFxuICogICAgIGxpc3RlbmVycyBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZD19IG9wdF90eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBXaGV0aGVyIHRvIGNoZWNrIGZvciBjYXB0dXJlIG9yIGJ1YmJsZS1waGFzZVxuICogICAgIGxpc3RlbmVycy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYW4gZXZlbnQgdGFyZ2V0IGhhcyBvbmUgb3IgbW9yZSBsaXN0ZW5lcnMgbWF0Y2hpbmdcbiAqICAgICB0aGUgcmVxdWVzdGVkIHR5cGUgYW5kL29yIGNhcHR1cmUgcGhhc2UuXG4gKi9cbmdvb2cuZXZlbnRzLmhhc0xpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBvcHRfdHlwZSwgb3B0X2NhcHR1cmUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5pc0ltcGxlbWVudGVkQnkob2JqKSkge1xuICAgIHJldHVybiBvYmouaGFzTGlzdGVuZXIob3B0X3R5cGUsIG9wdF9jYXB0dXJlKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAob2JqKSk7XG4gIHJldHVybiAhIWxpc3RlbmVyTWFwICYmIGxpc3RlbmVyTWFwLmhhc0xpc3RlbmVyKG9wdF90eXBlLCBvcHRfY2FwdHVyZSk7XG59O1xuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBuaWNlIHN0cmluZyBzaG93aW5nIHRoZSBub3JtYWxpemVkIGV2ZW50IG9iamVjdHMgcHVibGljIG1lbWJlcnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBlIEV2ZW50IE9iamVjdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIG9mIHRoZSBwdWJsaWMgbWVtYmVycyBvZiB0aGUgbm9ybWFsaXplZCBldmVudCBvYmplY3QuXG4gKi9cbmdvb2cuZXZlbnRzLmV4cG9zZSA9IGZ1bmN0aW9uKGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgc3RyID0gW107XG4gIGZvciAodmFyIGtleSBpbiBlKSB7XG4gICAgaWYgKGVba2V5XSAmJiBlW2tleV0uaWQpIHtcbiAgICAgIHN0ci5wdXNoKGtleSArICcgPSAnICsgZVtrZXldICsgJyAoJyArIGVba2V5XS5pZCArICcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ci5wdXNoKGtleSArICcgPSAnICsgZVtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ci5qb2luKCdcXG4nKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggb24gcHJlcGVuZGVkIHRvIHRoZSBzcGVjaWZpZWQgdHlwZS4gVGhpcyBpcyB1c2VkIGZvciBJRVxuICogd2hpY2ggZXhwZWN0cyBcIm9uXCIgdG8gYmUgcHJlcGVuZGVkLiBUaGlzIGZ1bmN0aW9uIGNhY2hlcyB0aGUgc3RyaW5nIGluIG9yZGVyXG4gKiB0byBhdm9pZCBleHRyYSBhbGxvY2F0aW9ucyBpbiBzdGVhZHkgc3RhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFdmVudCB0eXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHlwZSBzdHJpbmcgd2l0aCAnb24nIHByZXBlbmRlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmdldE9uU3RyaW5nXyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZSBpbiBnb29nLmV2ZW50cy5vblN0cmluZ01hcF8pIHtcbiAgICByZXR1cm4gZ29vZy5ldmVudHMub25TdHJpbmdNYXBfW3R5cGVdO1xuICB9XG4gIHJldHVybiBnb29nLmV2ZW50cy5vblN0cmluZ01hcF9bdHlwZV0gPSBnb29nLmV2ZW50cy5vblN0cmluZ18gKyB0eXBlO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIGFuIG9iamVjdCdzIGxpc3RlbmVycyBvZiBhIHBhcnRpY3VsYXIgdHlwZSBhbmQgcGhhc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB3aG9zZSBsaXN0ZW5lcnMgdG8gY2FsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgV2hpY2ggZXZlbnQgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRPYmplY3QgRXZlbnQgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWxsIGxpc3RlbmVycyByZXR1cm5lZCB0cnVlIGVsc2UgZmFsc2UuXG4gKi9cbmdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcnMgPSBmdW5jdGlvbihvYmosIHR5cGUsIGNhcHR1cmUsIGV2ZW50T2JqZWN0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KG9iaikpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZX0gKi8gKG9iaikuZmlyZUxpc3RlbmVycyhcbiAgICAgICAgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpO1xuICB9XG5cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcnNfKG9iaiwgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpO1xufTtcblxuXG4vKipcbiAqIEZpcmVzIGFuIG9iamVjdCdzIGxpc3RlbmVycyBvZiBhIHBhcnRpY3VsYXIgdHlwZSBhbmQgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB3aG9zZSBsaXN0ZW5lcnMgdG8gY2FsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgV2hpY2ggZXZlbnQgcGhhc2UuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRPYmplY3QgRXZlbnQgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWxsIGxpc3RlbmVycyByZXR1cm5lZCB0cnVlIGVsc2UgZmFsc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5maXJlTGlzdGVuZXJzXyA9IGZ1bmN0aW9uKG9iaiwgdHlwZSwgY2FwdHVyZSwgZXZlbnRPYmplY3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIHZhciByZXR2YWwgPSB0cnVlO1xuXG4gIHZhciBsaXN0ZW5lck1hcCA9IGdvb2cuZXZlbnRzLmdldExpc3RlbmVyTWFwXyhcbiAgICAgIC8qKiBAdHlwZSB7RXZlbnRUYXJnZXR9ICovIChvYmopKTtcbiAgaWYgKGxpc3RlbmVyTWFwKSB7XG4gICAgLy8gVE9ETyhjaHJpc2hlbnJ5KTogT3JpZ2luYWwgY29kZSBhdm9pZHMgYXJyYXkgY3JlYXRpb24gd2hlbiB0aGVyZVxuICAgIC8vIGlzIG5vIGxpc3RlbmVyLCBzbyB3ZSBkbyB0aGUgc2FtZS4gSWYgdGhpcyBvcHRpbWl6YXRpb24gdHVybnNcbiAgICAvLyBvdXQgdG8gYmUgbm90IHJlcXVpcmVkLCB3ZSBjYW4gcmVwbGFjZSB0aGlzIHdpdGhcbiAgICAvLyBsaXN0ZW5lck1hcC5nZXRMaXN0ZW5lcnModHlwZSwgY2FwdHVyZSkgaW5zdGVhZCwgd2hpY2ggaXMgc2ltcGxlci5cbiAgICB2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyTWFwLmxpc3RlbmVyc1t0eXBlLnRvU3RyaW5nKCldO1xuICAgIGlmIChsaXN0ZW5lckFycmF5KSB7XG4gICAgICBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJBcnJheS5jb25jYXQoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckFycmF5W2ldO1xuICAgICAgICAvLyBXZSBtaWdodCBub3QgaGF2ZSBhIGxpc3RlbmVyIGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbiAgICAgICAgaWYgKGxpc3RlbmVyICYmIGxpc3RlbmVyLmNhcHR1cmUgPT0gY2FwdHVyZSAmJiAhbGlzdGVuZXIucmVtb3ZlZCkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBnb29nLmV2ZW50cy5maXJlTGlzdGVuZXIobGlzdGVuZXIsIGV2ZW50T2JqZWN0KTtcbiAgICAgICAgICByZXR2YWwgPSByZXR2YWwgJiYgKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXR2YWw7XG59O1xuXG5cbi8qKlxuICogRmlyZXMgYSBsaXN0ZW5lciB3aXRoIGEgc2V0IG9mIGFyZ3VtZW50c1xuICpcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuZXJ9IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciBvYmplY3QgdG8gY2FsbC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudE9iamVjdCBUaGUgZXZlbnQgb2JqZWN0IHRvIHBhc3MgdG8gdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7Kn0gUmVzdWx0IG9mIGxpc3RlbmVyLlxuICovXG5nb29nLmV2ZW50cy5maXJlTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lciwgZXZlbnRPYmplY3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbGlzdGVuZXJGbiA9IGxpc3RlbmVyLmxpc3RlbmVyO1xuICB2YXIgbGlzdGVuZXJIYW5kbGVyID0gbGlzdGVuZXIuaGFuZGxlciB8fCBsaXN0ZW5lci5zcmM7XG5cbiAgaWYgKGxpc3RlbmVyLmNhbGxPbmNlKSB7XG4gICAgZ29vZy5ldmVudHMudW5saXN0ZW5CeUtleShsaXN0ZW5lcik7XG4gIH1cbiAgcmV0dXJuIGxpc3RlbmVyRm4uY2FsbChsaXN0ZW5lckhhbmRsZXIsIGV2ZW50T2JqZWN0KTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSB0b3RhbCBudW1iZXIgb2YgbGlzdGVuZXJzIGN1cnJlbnRseSBpbiB0aGUgc3lzdGVtLlxuICogQHJldHVybiB7bnVtYmVyfSBOdW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQGRlcHJlY2F0ZWQgVGhpcyByZXR1cm5zIGVzdGltYXRlZCBjb3VudCwgbm93IHRoYXQgQ2xvc3VyZSBubyBsb25nZXJcbiAqIHN0b3JlcyBhIGNlbnRyYWwgbGlzdGVuZXIgcmVnaXN0cnkuIFdlIHN0aWxsIHJldHVybiBhbiBlc3RpbWF0aW9uXG4gKiB0byBrZWVwIGV4aXN0aW5nIGxpc3RlbmVyLXJlbGF0ZWQgdGVzdHMgcGFzc2luZy4gSW4gdGhlIG5lYXIgZnV0dXJlLFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQuXG4gKi9cbmdvb2cuZXZlbnRzLmdldFRvdGFsTGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLmV2ZW50cy5saXN0ZW5lckNvdW50RXN0aW1hdGVfO1xufTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgKG9yIGV2ZW50IGxpa2Ugb2JqZWN0KSBhbmQgY2FsbHMgYWxsIGxpc3RlbmVyc1xuICogbGlzdGVuaW5nIGZvciBldmVudHMgb2YgdGhpcyB0eXBlLiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQgaXMgZGVjaWRlZCBieSB0aGVcbiAqIHR5cGUgcHJvcGVydHkgb24gdGhlIGV2ZW50IG9iamVjdC5cbiAqXG4gKiBJZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlIE9SIGNhbGxzIHByZXZlbnREZWZhdWx0IHRoZW4gdGhpc1xuICogZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuICBJZiBvbmUgb2YgdGhlIGNhcHR1cmUgbGlzdGVuZXJzIGNhbGxzXG4gKiBzdG9wUHJvcGFnYXRpb24sIHRoZW4gdGhlIGJ1YmJsZSBsaXN0ZW5lcnMgd29uJ3QgZmlyZS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGV9IHNyYyBUaGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudExpa2V9IGUgRXZlbnQgb2JqZWN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gSWYgYW55b25lIGNhbGxlZCBwcmV2ZW50RGVmYXVsdCBvbiB0aGUgZXZlbnQgb2JqZWN0IChvclxuICogICAgIGlmIGFueSBvZiB0aGUgaGFuZGxlcnMgcmV0dXJucyBmYWxzZSkgdGhpcyB3aWxsIGFsc28gcmV0dXJuIGZhbHNlLlxuICogICAgIElmIHRoZXJlIGFyZSBubyBoYW5kbGVycywgb3IgaWYgYWxsIGhhbmRsZXJzIHJldHVybiB0cnVlLCB0aGlzIHJldHVybnNcbiAqICAgICB0cnVlLlxuICovXG5nb29nLmV2ZW50cy5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oc3JjLCBlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIGdvb2cuZXZlbnRzLkxpc3RlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHNyYyksXG4gICAgICAnQ2FuIG5vdCB1c2UgZ29vZy5ldmVudHMuZGlzcGF0Y2hFdmVudCB3aXRoICcgK1xuICAgICAgICAgICdub24tZ29vZy5ldmVudHMuTGlzdGVuYWJsZSBpbnN0YW5jZS4nKTtcbiAgcmV0dXJuIHNyYy5kaXNwYXRjaEV2ZW50KGUpO1xufTtcblxuXG4vKipcbiAqIEluc3RhbGxzIGV4Y2VwdGlvbiBwcm90ZWN0aW9uIGZvciB0aGUgYnJvd3NlciBldmVudCBlbnRyeSBwb2ludCB1c2luZyB0aGVcbiAqIGdpdmVuIGVycm9yIGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHtnb29nLmRlYnVnLkVycm9ySGFuZGxlcn0gZXJyb3JIYW5kbGVyIEVycm9yIGhhbmRsZXIgd2l0aCB3aGljaCB0b1xuICogICAgIHByb3RlY3QgdGhlIGVudHJ5IHBvaW50LlxuICovXG5nb29nLmV2ZW50cy5wcm90ZWN0QnJvd3NlckV2ZW50RW50cnlQb2ludCA9IGZ1bmN0aW9uKGVycm9ySGFuZGxlcikge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLmhhbmRsZUJyb3dzZXJFdmVudF8gPVxuICAgICAgZXJyb3JIYW5kbGVyLnByb3RlY3RFbnRyeVBvaW50KGdvb2cuZXZlbnRzLmhhbmRsZUJyb3dzZXJFdmVudF8pO1xufTtcblxuXG4vKipcbiAqIEhhbmRsZXMgYW4gZXZlbnQgYW5kIGRpc3BhdGNoZXMgaXQgdG8gdGhlIGNvcnJlY3QgbGlzdGVuZXJzLiBUaGlzXG4gKiBmdW5jdGlvbiBpcyBhIHByb3h5IGZvciB0aGUgcmVhbCBsaXN0ZW5lciB0aGUgdXNlciBzcGVjaWZpZWQuXG4gKlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5lcn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIG9iamVjdC5cbiAqIEBwYXJhbSB7RXZlbnQ9fSBvcHRfZXZ0IE9wdGlvbmFsIGV2ZW50IG9iamVjdCB0aGF0IGdldHMgcGFzc2VkIGluIHZpYSB0aGVcbiAqICAgICBuYXRpdmUgZXZlbnQgaGFuZGxlcnMuXG4gKiBAcmV0dXJuIHsqfSBSZXN1bHQgb2YgdGhlIGV2ZW50IGhhbmRsZXIuXG4gKiBAdGhpcyB7RXZlbnRUYXJnZXR9IFRoZSBvYmplY3Qgb3IgRWxlbWVudCB0aGF0IGZpcmVkIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmhhbmRsZUJyb3dzZXJFdmVudF8gPSBmdW5jdGlvbihsaXN0ZW5lciwgb3B0X2V2dCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChsaXN0ZW5lci5yZW1vdmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIHNpbXBseSBmaXJlIHRoZSBsaXN0ZW5lci5cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLmZpcmVMaXN0ZW5lcihcbiAgICAgIGxpc3RlbmVyLCBuZXcgZ29vZy5ldmVudHMuQnJvd3NlckV2ZW50KG9wdF9ldnQsIHRoaXMpKTtcbn07XG5cblxuLyoqXG4gKiBUaGlzIGlzIHVzZWQgdG8gbWFyayB0aGUgSUUgZXZlbnQgb2JqZWN0IHNvIHdlIGRvIG5vdCBkbyB0aGUgQ2xvc3VyZSBwYXNzXG4gKiB0d2ljZSBmb3IgYSBidWJibGluZyBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIElFIGJyb3dzZXIgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5tYXJrSWVFdmVudF8gPSBmdW5jdGlvbihlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gT25seSB0aGUga2V5Q29kZSBhbmQgdGhlIHJldHVyblZhbHVlIGNhbiBiZSBjaGFuZ2VkLiBXZSB1c2Uga2V5Q29kZSBmb3JcbiAgLy8gbm9uIGtleWJvYXJkIGV2ZW50cy5cbiAgLy8gZXZlbnQucmV0dXJuVmFsdWUgaXMgYSBiaXQgbW9yZSB0cmlja3kuIEl0IGlzIHVuZGVmaW5lZCBieSBkZWZhdWx0LiBBXG4gIC8vIGJvb2xlYW4gZmFsc2UgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uLiBJbiBhIHdpbmRvdy5vbmJlZm9yZXVubG9hZCBhbmRcbiAgLy8gdGhlIHJldHVyblZhbHVlIGlzIG5vbiB1bmRlZmluZWQgaXQgd2lsbCBiZSBhbGVydGVkLiBIb3dldmVyLCB3ZSB3aWxsIG9ubHlcbiAgLy8gbW9kaWZ5IHRoZSByZXR1cm5WYWx1ZSBmb3Iga2V5Ym9hcmQgZXZlbnRzLiBXZSBjYW4gZ2V0IGEgcHJvYmxlbSBpZiBub25cbiAgLy8gY2xvc3VyZSBldmVudHMgc2V0cyB0aGUga2V5Q29kZSBvciB0aGUgcmV0dXJuVmFsdWVcblxuICB2YXIgdXNlUmV0dXJuVmFsdWUgPSBmYWxzZTtcblxuICBpZiAoZS5rZXlDb2RlID09IDApIHtcbiAgICAvLyBXZSBjYW5ub3QgY2hhbmdlIHRoZSBrZXlDb2RlIGluIGNhc2UgdGhhdCBzcmNFbGVtZW50IGlzIGlucHV0W3R5cGU9ZmlsZV0uXG4gICAgLy8gV2UgY291bGQgdGVzdCB0aGF0IHRoYXQgaXMgdGhlIGNhc2UgYnV0IHRoYXQgd291bGQgYWxsb2NhdGUgMyBvYmplY3RzLlxuICAgIC8vIElmIHdlIHVzZSB0cnkvY2F0Y2ggd2Ugd2lsbCBvbmx5IGFsbG9jYXRlIGV4dHJhIG9iamVjdHMgaW4gdGhlIGNhc2Ugb2YgYVxuICAgIC8vIGZhaWx1cmUuXG5cbiAgICB0cnkge1xuICAgICAgZS5rZXlDb2RlID0gLTE7XG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHVzZVJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodXNlUmV0dXJuVmFsdWUgfHxcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovIChlLnJldHVyblZhbHVlKSA9PSB1bmRlZmluZWQpIHtcbiAgICBlLnJldHVyblZhbHVlID0gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFRoaXMgaXMgdXNlZCB0byBjaGVjayBpZiBhbiBJRSBldmVudCBoYXMgYWxyZWFkeSBiZWVuIGhhbmRsZWQgYnkgdGhlIENsb3N1cmVcbiAqIHN5c3RlbSBzbyB3ZSBkbyBub3QgZG8gdGhlIENsb3N1cmUgcGFzcyB0d2ljZSBmb3IgYSBidWJibGluZyBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGUgIFRoZSBJRSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgb2JqZWN0IGhhcyBiZWVuIG1hcmtlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLmlzTWFya2VkSWVFdmVudF8gPSBmdW5jdGlvbihlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGUua2V5Q29kZSA8IDAgfHwgZS5yZXR1cm5WYWx1ZSAhPSB1bmRlZmluZWQ7XG59O1xuXG5cbi8qKlxuICogQ291bnRlciB0byBjcmVhdGUgdW5pcXVlIGV2ZW50IGlkcy5cbiAqIEBwcml2YXRlIHtudW1iZXJ9XG4gKi9cbmdvb2cuZXZlbnRzLnVuaXF1ZUlkQ291bnRlcl8gPSAwO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuaXF1ZSBldmVudCBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllciBUaGUgaWRlbnRpZmllci5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSB1bmlxdWUgaWRlbnRpZmllci5cbiAqIEBpZEdlbmVyYXRvciB7dW5pcXVlfVxuICovXG5nb29nLmV2ZW50cy5nZXRVbmlxdWVJZCA9IGZ1bmN0aW9uKGlkZW50aWZpZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gaWRlbnRpZmllciArICdfJyArIGdvb2cuZXZlbnRzLnVuaXF1ZUlkQ291bnRlcl8rKztcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBzcmMgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJuIHtnb29nLmV2ZW50cy5MaXN0ZW5lck1hcH0gQSBsaXN0ZW5lciBtYXAgZm9yIHRoZSBnaXZlblxuICogICAgIHNvdXJjZSBvYmplY3QsIG9yIG51bGwgaWYgbm9uZSBleGlzdHMuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5nZXRMaXN0ZW5lck1hcF8gPSBmdW5jdGlvbihzcmMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbGlzdGVuZXJNYXAgPSBzcmNbZ29vZy5ldmVudHMuTElTVEVORVJfTUFQX1BST1BfXTtcbiAgLy8gSUUgc2VyaWFsaXplcyB0aGUgcHJvcGVydHkgYXMgd2VsbCAoZS5nLiB3aGVuIHNlcmlhbGl6aW5nIG91dGVyXG4gIC8vIEhUTUwpLiBTbyB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlIHZhbHVlIGlzIG9mIHRoZSBjb3JyZWN0IHR5cGUuXG4gIHJldHVybiBsaXN0ZW5lck1hcCBpbnN0YW5jZW9mIGdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwID8gbGlzdGVuZXJNYXAgOiBudWxsO1xufTtcblxuXG4vKipcbiAqIEV4cGFuZG8gcHJvcGVydHkgZm9yIGxpc3RlbmVyIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIE9iamVjdCB3aXRoXG4gKiBoYW5kbGVFdmVudC5cbiAqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfVxuICovXG5nb29nLmV2ZW50cy5MSVNURU5FUl9XUkFQUEVSX1BST1BfID1cbiAgICAnX19jbG9zdXJlX2V2ZW50c19mbl8nICsgKChNYXRoLnJhbmRvbSgpICogMWU5KSA+Pj4gMCk7XG5cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIG9yIGFuXG4gKiAgICAgb2JqZWN0IHRoYXQgY29udGFpbnMgaGFuZGxlRXZlbnQgbWV0aG9kLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBFaXRoZXIgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9yIGEgZnVuY3Rpb24gdGhhdFxuICogICAgIGNhbGxzIG9iai5oYW5kbGVFdmVudC4gSWYgdGhlIHNhbWUgbGlzdGVuZXIgaXMgcGFzc2VkIHRvIHRoaXNcbiAqICAgICBmdW5jdGlvbiBtb3JlIHRoYW4gb25jZSwgdGhlIHNhbWUgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byBiZVxuICogICAgIHJldHVybmVkLlxuICovXG5nb29nLmV2ZW50cy53cmFwTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQobGlzdGVuZXIsICdMaXN0ZW5lciBjYW4gbm90IGJlIG51bGwuJyk7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgfVxuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICBsaXN0ZW5lci5oYW5kbGVFdmVudCwgJ0FuIG9iamVjdCBsaXN0ZW5lciBtdXN0IGhhdmUgaGFuZGxlRXZlbnQgbWV0aG9kLicpO1xuICBpZiAoIWxpc3RlbmVyW2dvb2cuZXZlbnRzLkxJU1RFTkVSX1dSQVBQRVJfUFJPUF9dKSB7XG4gICAgbGlzdGVuZXJbZ29vZy5ldmVudHMuTElTVEVORVJfV1JBUFBFUl9QUk9QX10gPSBmdW5jdGlvbihlKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAobGlzdGVuZXIpLmhhbmRsZUV2ZW50KGUpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGxpc3RlbmVyW2dvb2cuZXZlbnRzLkxJU1RFTkVSX1dSQVBQRVJfUFJPUF9dO1xufTtcblxuXG4vLyBSZWdpc3RlciB0aGUgYnJvd3NlciBldmVudCBoYW5kbGVyIGFzIGFuIGVudHJ5IHBvaW50LCBzbyB0aGF0XG4vLyBpdCBjYW4gYmUgbW9uaXRvcmVkIGZvciBleGNlcHRpb24gaGFuZGxpbmcsIGV0Yy5cbmdvb2cuZGVidWcuZW50cnlQb2ludFJlZ2lzdHJ5LnJlZ2lzdGVyKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUZ1bmN0aW9uKTogIUZ1bmN0aW9ufSB0cmFuc2Zvcm1lciBUaGUgdHJhbnNmb3JtaW5nXG4gICAgICogICAgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBnb29nLmV2ZW50cy5oYW5kbGVCcm93c2VyRXZlbnRfID1cbiAgICAgICAgICB0cmFuc2Zvcm1lcihnb29nLmV2ZW50cy5oYW5kbGVCcm93c2VyRXZlbnRfKTtcbiAgICB9KTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIGRpc3Bvc2FibGUgaW1wbGVtZW50YXRpb24gb2YgYSBjdXN0b21cbiAqIGxpc3RlbmFibGUvZXZlbnQgdGFyZ2V0LiBTZWUgYWxzbzogZG9jdW1lbnRhdGlvbiBmb3JcbiAqIGBnb29nLmV2ZW50cy5MaXN0ZW5hYmxlYC5cbiAqXG4gKiBAc2VlIC4uL2RlbW9zL2V2ZW50dGFyZ2V0Lmh0bWxcbiAqIEBzZWUgZ29vZy5ldmVudHMuTGlzdGVuYWJsZVxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLkRpc3Bvc2FibGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkxpc3RlbmFibGUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuZXJNYXAnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkV2ZW50SWQnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkV2ZW50TGlrZScpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleScpO1xuXG5cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgZ29vZy5ldmVudHMuTGlzdGVuYWJsZWAgd2l0aCBmdWxsIFczQ1xuICogRXZlbnRUYXJnZXQtbGlrZSBzdXBwb3J0IChjYXB0dXJlL2J1YmJsZSBtZWNoYW5pc20sIHN0b3BwaW5nIGV2ZW50XG4gKiBwcm9wYWdhdGlvbiwgcHJldmVudGluZyBkZWZhdWx0IGFjdGlvbnMpLlxuICpcbiAqIFlvdSBtYXkgc3ViY2xhc3MgdGhpcyBjbGFzcyB0byB0dXJuIHlvdXIgY2xhc3MgaW50byBhIExpc3RlbmFibGUuXG4gKlxuICogVW5sZXNzIHByb3BhZ2F0aW9uIGlzIHN0b3BwZWQsIGFuIGV2ZW50IGRpc3BhdGNoZWQgYnkgYW5cbiAqIEV2ZW50VGFyZ2V0IHdpbGwgYnViYmxlIHRvIHRoZSBwYXJlbnQgcmV0dXJuZWQgYnlcbiAqIGBnZXRQYXJlbnRFdmVudFRhcmdldGAuIFRvIHNldCB0aGUgcGFyZW50LCBjYWxsXG4gKiBgc2V0UGFyZW50RXZlbnRUYXJnZXRgLiBTdWJjbGFzc2VzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICogY2hhbmdpbmcgdGhlIHBhcmVudCBjYW4gb3ZlcnJpZGUgdGhlIHNldHRlciB0byB0aHJvdyBhbiBlcnJvci5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogPHByZT5cbiAqICAgdmFyIHNvdXJjZSA9IG5ldyBnb29nLmV2ZW50cy5FdmVudFRhcmdldCgpO1xuICogICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gKiAgICAgYWxlcnQoJ1R5cGU6ICcgKyBlLnR5cGUgKyAnOyBUYXJnZXQ6ICcgKyBlLnRhcmdldCk7XG4gKiAgIH1cbiAqICAgc291cmNlLmxpc3RlbignZm9vJywgaGFuZGxlRXZlbnQpO1xuICogICAvLyBPcjogZ29vZy5ldmVudHMubGlzdGVuKHNvdXJjZSwgJ2ZvbycsIGhhbmRsZUV2ZW50KTtcbiAqICAgLi4uXG4gKiAgIHNvdXJjZS5kaXNwYXRjaEV2ZW50KCdmb28nKTsgIC8vIHdpbGwgY2FsbCBoYW5kbGVFdmVudFxuICogICAuLi5cbiAqICAgc291cmNlLnVubGlzdGVuKCdmb28nLCBoYW5kbGVFdmVudCk7XG4gKiAgIC8vIE9yOiBnb29nLmV2ZW50cy51bmxpc3Rlbihzb3VyY2UsICdmb28nLCBoYW5kbGVFdmVudCk7XG4gKiA8L3ByZT5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLkRpc3Bvc2FibGV9XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZX1cbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLkRpc3Bvc2FibGUuY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogTWFwcyBvZiBldmVudCB0eXBlIHRvIGFuIGFycmF5IG9mIGxpc3RlbmVycy5cbiAgICogQHByaXZhdGUgeyFnb29nLmV2ZW50cy5MaXN0ZW5lck1hcH1cbiAgICovXG4gIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfID0gbmV3IGdvb2cuZXZlbnRzLkxpc3RlbmVyTWFwKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHRvIHVzZSBmb3IgZXZlbnQudGFyZ2V0LiBVc2VmdWwgd2hlbiBtaXhpbmcgaW4gYW5cbiAgICogRXZlbnRUYXJnZXQgdG8gYW5vdGhlciBvYmplY3QuXG4gICAqIEBwcml2YXRlIHshT2JqZWN0fVxuICAgKi9cbiAgdGhpcy5hY3R1YWxFdmVudFRhcmdldF8gPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBQYXJlbnQgZXZlbnQgdGFyZ2V0LCB1c2VkIGR1cmluZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogVE9ETyhjaHJpc2hlbnJ5KTogQ2hhbmdlIHRoaXMgdG8gZ29vZy5ldmVudHMuTGlzdGVuYWJsZS4gVGhpc1xuICAgKiBjdXJyZW50bHkgYnJlYWtzIHBlb3BsZSB3aG8gZXhwZWN0IGdldFBhcmVudEV2ZW50VGFyZ2V0IHRvIHJldHVyblxuICAgKiBnb29nLmV2ZW50cy5FdmVudFRhcmdldC5cbiAgICpcbiAgICogQHByaXZhdGUgez9nb29nLmV2ZW50cy5FdmVudFRhcmdldH1cbiAgICovXG4gIHRoaXMucGFyZW50RXZlbnRUYXJnZXRfID0gbnVsbDtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LCBnb29nLkRpc3Bvc2FibGUpO1xuZ29vZy5ldmVudHMuTGlzdGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbihnb29nLmV2ZW50cy5FdmVudFRhcmdldCk7XG5cblxuLyoqXG4gKiBBbiBhcnRpZmljaWFsIGNhcCBvbiB0aGUgbnVtYmVyIG9mIGFuY2VzdG9ycyB5b3UgY2FuIGhhdmUuIFRoaXMgaXMgbWFpbmx5XG4gKiBmb3IgbG9vcCBkZXRlY3Rpb24uXG4gKiBAY29uc3Qge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Lk1BWF9BTkNFU1RPUlNfID0gMTAwMDtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudCBvZiB0aGlzIGV2ZW50IHRhcmdldCB0byB1c2UgZm9yIGJ1YmJsaW5nLlxuICpcbiAqIEByZXR1cm4ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBUaGUgcGFyZW50IEV2ZW50VGFyZ2V0IG9yIG51bGwgaWZcbiAqICAgICB0aGVyZSBpcyBubyBwYXJlbnQuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmdldFBhcmVudEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucGFyZW50RXZlbnRUYXJnZXRfO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHBhcmVudCBvZiB0aGlzIGV2ZW50IHRhcmdldCB0byB1c2UgZm9yIGNhcHR1cmUvYnViYmxlXG4gKiBtZWNoYW5pc20uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBwYXJlbnQgUGFyZW50IGxpc3RlbmFibGUgKG51bGwgaWYgbm9uZSkuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5zZXRQYXJlbnRFdmVudFRhcmdldCA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucGFyZW50RXZlbnRUYXJnZXRfID0gcGFyZW50O1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGV2ZW50IHRhcmdldC4gVGhlIHNhbWUgaGFuZGxlciBjYW4gb25seSBiZVxuICogYWRkZWQgb25jZSBwZXIgdGhlIHR5cGUuIEV2ZW4gaWYgeW91IGFkZCB0aGUgc2FtZSBoYW5kbGVyIG11bHRpcGxlIHRpbWVzXG4gKiB1c2luZyB0aGUgc2FtZSB0eXBlIHRoZW4gaXQgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlIHdoZW4gdGhlIGV2ZW50IGlzXG4gKiBkaXNwYXRjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gZm9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGhhbmRsZXIgVGhlIGZ1bmN0aW9uXG4gKiAgICAgdG8gaGFuZGxlIHRoZSBldmVudC4gVGhlIGhhbmRsZXIgY2FuIGFsc28gYmUgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50c1xuICogICAgIHRoZSBoYW5kbGVFdmVudCBtZXRob2Qgd2hpY2ggdGFrZXMgdGhlIGV2ZW50IG9iamVjdCBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0dXJlIEluIERPTS1jb21wbGlhbnQgYnJvd3NlcnMsIHRoaXMgZGV0ZXJtaW5lc1xuICogICAgIHdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGZpcmVkIGR1cmluZyB0aGUgY2FwdHVyZSBvciBidWJibGUgcGhhc2VcbiAqICAgICBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9oYW5kbGVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGxcbiAqICAgICB0aGUgbGlzdGVuZXIuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYCNsaXN0ZW5gIGluc3RlYWQsIHdoZW4gcG9zc2libGUuIE90aGVyd2lzZSwgdXNlXG4gKiAgICAgYGdvb2cuZXZlbnRzLmxpc3RlbmAgaWYgeW91IGFyZSBwYXNzaW5nIE9iamVjdFxuICogICAgIChpbnN0ZWFkIG9mIEZ1bmN0aW9uKSBhcyBoYW5kbGVyLlxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGhhbmRsZXIsIG9wdF9jYXB0dXJlLCBvcHRfaGFuZGxlclNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5ldmVudHMubGlzdGVuKHRoaXMsIHR5cGUsIGhhbmRsZXIsIG9wdF9jYXB0dXJlLCBvcHRfaGFuZGxlclNjb3BlKTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIGV2ZW50IHRhcmdldC4gVGhlIGhhbmRsZXIgbXVzdCBiZSB0aGVcbiAqIHNhbWUgb2JqZWN0IGFzIHRoZSBvbmUgYWRkZWQuIElmIHRoZSBoYW5kbGVyIGhhcyBub3QgYmVlbiBhZGRlZCB0aGVuXG4gKiBub3RoaW5nIGlzIGRvbmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWR9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gaGFuZGxlciBUaGUgZnVuY3Rpb25cbiAqICAgICB0byBoYW5kbGUgdGhlIGV2ZW50LiBUaGUgaGFuZGxlciBjYW4gYWxzbyBiZSBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzXG4gKiAgICAgdGhlIGhhbmRsZUV2ZW50IG1ldGhvZCB3aGljaCB0YWtlcyB0aGUgZXZlbnQgb2JqZWN0IGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NhcHR1cmUgSW4gRE9NLWNvbXBsaWFudCBicm93c2VycywgdGhpcyBkZXRlcm1pbmVzXG4gKiAgICAgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgZmlyZWQgZHVyaW5nIHRoZSBjYXB0dXJlIG9yIGJ1YmJsZSBwaGFzZVxuICogICAgIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hhbmRsZXJTY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbFxuICogICAgIHRoZSBsaXN0ZW5lci5cbiAqIEBkZXByZWNhdGVkIFVzZSBgI3VubGlzdGVuYCBpbnN0ZWFkLCB3aGVuIHBvc3NpYmxlLiBPdGhlcndpc2UsIHVzZVxuICogICAgIGBnb29nLmV2ZW50cy51bmxpc3RlbmAgaWYgeW91IGFyZSBwYXNzaW5nIE9iamVjdFxuICogICAgIChpbnN0ZWFkIG9mIEZ1bmN0aW9uKSBhcyBoYW5kbGVyLlxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGhhbmRsZXIsIG9wdF9jYXB0dXJlLCBvcHRfaGFuZGxlclNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5ldmVudHMudW5saXN0ZW4odGhpcywgdHlwZSwgaGFuZGxlciwgb3B0X2NhcHR1cmUsIG9wdF9oYW5kbGVyU2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P2dvb2cuZXZlbnRzLkV2ZW50TGlrZX0gZSBFdmVudCBvYmplY3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiBhbnlvbmUgY2FsbGVkIHByZXZlbnREZWZhdWx0IG9uIHRoZSBldmVudCBvYmplY3QgKG9yXG4gKiAgICAgaWYgYW55IG9mIHRoZSBsaXN0ZW5lcnMgcmV0dXJucyBmYWxzZSkgdGhpcyB3aWxsIGFsc28gcmV0dXJuIGZhbHNlLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuYXNzZXJ0SW5pdGlhbGl6ZWRfKCk7XG5cbiAgdmFyIGFuY2VzdG9yc1RyZWUsIGFuY2VzdG9yID0gdGhpcy5nZXRQYXJlbnRFdmVudFRhcmdldCgpO1xuICBpZiAoYW5jZXN0b3IpIHtcbiAgICBhbmNlc3RvcnNUcmVlID0gW107XG4gICAgdmFyIGFuY2VzdG9yQ291bnQgPSAxO1xuICAgIGZvciAoOyBhbmNlc3RvcjsgYW5jZXN0b3IgPSBhbmNlc3Rvci5nZXRQYXJlbnRFdmVudFRhcmdldCgpKSB7XG4gICAgICBhbmNlc3RvcnNUcmVlLnB1c2goYW5jZXN0b3IpO1xuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgICAgICAoKythbmNlc3RvckNvdW50IDwgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQuTUFYX0FOQ0VTVE9SU18pLFxuICAgICAgICAgICdpbmZpbml0ZSBsb29wJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnRJbnRlcm5hbF8oXG4gICAgICB0aGlzLmFjdHVhbEV2ZW50VGFyZ2V0XywgZSwgYW5jZXN0b3JzVHJlZSk7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBsaXN0ZW5lcnMgZnJvbSB0aGlzIG9iamVjdC4gIENsYXNzZXMgdGhhdCBleHRlbmQgRXZlbnRUYXJnZXQgbWF5XG4gKiBuZWVkIHRvIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIG9yZGVyIHRvIHJlbW92ZSByZWZlcmVuY2VzIHRvIERPTSBFbGVtZW50c1xuICogYW5kIGFkZGl0aW9uYWwgbGlzdGVuZXJzLlxuICogQG92ZXJyaWRlXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwb3NlSW50ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmV2ZW50cy5FdmVudFRhcmdldC5zdXBlckNsYXNzXy5kaXNwb3NlSW50ZXJuYWwuY2FsbCh0aGlzKTtcblxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLnBhcmVudEV2ZW50VGFyZ2V0XyA9IG51bGw7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fSB0eXBlIFRoZSBldmVudCB0eXBlIGlkLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6KGJvb2xlYW58dW5kZWZpbmVkKX0gbGlzdGVuZXIgQ2FsbGJhY2tcbiAqICAgICBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdXNlQ2FwdHVyZSBXaGV0aGVyIHRvIGZpcmUgaW4gY2FwdHVyZSBwaGFzZVxuICogICAgIChkZWZhdWx0cyB0byBmYWxzZSkuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHshZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gVW5pcXVlIGtleSBmb3IgdGhlIGxpc3RlbmVyLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uKFxuICAgIHR5cGUsIGxpc3RlbmVyLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmFzc2VydEluaXRpYWxpemVkXygpO1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18uYWRkKFxuICAgICAgU3RyaW5nKHR5cGUpLCBsaXN0ZW5lciwgZmFsc2UgLyogY2FsbE9uY2UgKi8sIG9wdF91c2VDYXB0dXJlLFxuICAgICAgb3B0X2xpc3RlbmVyU2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPn0gdHlwZSBUaGUgZXZlbnQgdHlwZSBpZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOihib29sZWFufHVuZGVmaW5lZCl9IGxpc3RlbmVyIENhbGxiYWNrXG4gKiAgICAgbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3VzZUNhcHR1cmUgV2hldGhlciB0byBmaXJlIGluIGNhcHR1cmUgcGhhc2VcbiAqICAgICAoZGVmYXVsdHMgdG8gZmFsc2UpLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9saXN0ZW5lclNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZVxuICogICAgIGxpc3RlbmVyLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IFVuaXF1ZSBrZXkgZm9yIHRoZSBsaXN0ZW5lci5cbiAqIEB0ZW1wbGF0ZSBTQ09QRSxFVkVOVE9CSlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5saXN0ZW5PbmNlID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIG9wdF91c2VDYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5hZGQoXG4gICAgICBTdHJpbmcodHlwZSksIGxpc3RlbmVyLCB0cnVlIC8qIGNhbGxPbmNlICovLCBvcHRfdXNlQ2FwdHVyZSxcbiAgICAgIG9wdF9saXN0ZW5lclNjb3BlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj59IHR5cGUgVGhlIGV2ZW50IHR5cGUgaWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6U0NPUEUsIEVWRU5UT0JKKTooYm9vbGVhbnx1bmRlZmluZWQpfSBsaXN0ZW5lciBDYWxsYmFja1xuICogICAgIG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF91c2VDYXB0dXJlIFdoZXRoZXIgdG8gZmlyZSBpbiBjYXB0dXJlIHBoYXNlXG4gKiAgICAgKGRlZmF1bHRzIHRvIGZhbHNlKS5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfbGlzdGVuZXJTY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbFxuICogICAgIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYW55IGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIG9wdF91c2VDYXB0dXJlLCBvcHRfbGlzdGVuZXJTY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5yZW1vdmUoXG4gICAgICBTdHJpbmcodHlwZSksIGxpc3RlbmVyLCBvcHRfdXNlQ2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IWdvb2cuZXZlbnRzLkxpc3RlbmFibGVLZXl9IGtleSBUaGUga2V5IHJldHVybmVkIGJ5XG4gKiAgICAgbGlzdGVuKCkgb3IgbGlzdGVuT25jZSgpLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbnkgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLnVubGlzdGVuQnlLZXkgPSBmdW5jdGlvbihrZXkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18ucmVtb3ZlQnlLZXkoa2V5KTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZD19IG9wdF90eXBlIFR5cGUgb2YgZXZlbnQgdG8gcmVtb3ZlLFxuICogICAgIGRlZmF1bHQgaXMgdG8gcmVtb3ZlIGFsbCB0eXBlcy5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIGxpc3RlbmVycyByZW1vdmVkLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbihvcHRfdHlwZSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRPRE8oY2hyaXNoZW5yeSk6IFByZXZpb3VzbHksIHJlbW92ZUFsbExpc3RlbmVycyBjYW4gYmUgY2FsbGVkIG9uXG4gIC8vIHVuaW5pdGlhbGl6ZWQgRXZlbnRUYXJnZXQsIHNvIHdlIHByZXNlcnZlIHRoYXQgYmVoYXZpb3IuIFdlXG4gIC8vIHNob3VsZCByZW1vdmUgdGhpcyB3aGVuIHVzYWdlcyB0aGF0IHJlbHkgb24gdGhhdCBmYWN0IGFyZSBwdXJnZWQuXG4gIGlmICghdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18ucmVtb3ZlQWxsKG9wdF90eXBlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj59IHR5cGUgVGhlIHR5cGUgb2YgdGhlXG4gKiAgICAgbGlzdGVuZXJzIHRvIGZpcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgVGhlIGNhcHR1cmUgbW9kZSBvZiB0aGUgbGlzdGVuZXJzIHRvIGZpcmUuXG4gKiBAcGFyYW0ge0VWRU5UT0JKfSBldmVudE9iamVjdCBUaGUgZXZlbnQgb2JqZWN0IHRvIGZpcmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFsbCBsaXN0ZW5lcnMgc3VjY2VlZGVkIHdpdGhvdXRcbiAqICAgICBhdHRlbXB0aW5nIHRvIHByZXZlbnQgZGVmYXVsdCBiZWhhdmlvci4gSWYgYW55IGxpc3RlbmVyIHJldHVybnNcbiAqICAgICBmYWxzZSBvciBjYWxsZWQgZ29vZy5ldmVudHMuRXZlbnQjcHJldmVudERlZmF1bHQsIHRoaXMgcmV0dXJuc1xuICogICAgIGZhbHNlLlxuICogQHRlbXBsYXRlIEVWRU5UT0JKXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmZpcmVMaXN0ZW5lcnMgPSBmdW5jdGlvbihcbiAgICB0eXBlLCBjYXB0dXJlLCBldmVudE9iamVjdCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRPRE8oY2hyaXNoZW5yeSk6IE9yaWdpbmFsIGNvZGUgYXZvaWRzIGFycmF5IGNyZWF0aW9uIHdoZW4gdGhlcmVcbiAgLy8gaXMgbm8gbGlzdGVuZXIsIHNvIHdlIGRvIHRoZSBzYW1lLiBJZiB0aGlzIG9wdGltaXphdGlvbiB0dXJuc1xuICAvLyBvdXQgdG8gYmUgbm90IHJlcXVpcmVkLCB3ZSBjYW4gcmVwbGFjZSB0aGlzIHdpdGhcbiAgLy8gZ2V0TGlzdGVuZXJzKHR5cGUsIGNhcHR1cmUpIGluc3RlYWQsIHdoaWNoIGlzIHNpbXBsZXIuXG4gIHZhciBsaXN0ZW5lckFycmF5ID0gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18ubGlzdGVuZXJzW1N0cmluZyh0eXBlKV07XG4gIGlmICghbGlzdGVuZXJBcnJheSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lckFycmF5LmNvbmNhdCgpO1xuXG4gIHZhciBydiA9IHRydWU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXJyYXlbaV07XG4gICAgLy8gV2UgbWlnaHQgbm90IGhhdmUgYSBsaXN0ZW5lciBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gICAgaWYgKGxpc3RlbmVyICYmICFsaXN0ZW5lci5yZW1vdmVkICYmIGxpc3RlbmVyLmNhcHR1cmUgPT0gY2FwdHVyZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm4gPSBsaXN0ZW5lci5saXN0ZW5lcjtcbiAgICAgIHZhciBsaXN0ZW5lckhhbmRsZXIgPSBsaXN0ZW5lci5oYW5kbGVyIHx8IGxpc3RlbmVyLnNyYztcblxuICAgICAgaWYgKGxpc3RlbmVyLmNhbGxPbmNlKSB7XG4gICAgICAgIHRoaXMudW5saXN0ZW5CeUtleShsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBydiA9IGxpc3RlbmVyRm4uY2FsbChsaXN0ZW5lckhhbmRsZXIsIGV2ZW50T2JqZWN0KSAhPT0gZmFsc2UgJiYgcnY7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ2ICYmICFldmVudE9iamVjdC5kZWZhdWx0UHJldmVudGVkO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSBUaGUgY2FwdHVyZSBtb2RlIG9mIHRoZSBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAqIEByZXR1cm4geyFBcnJheTwhZ29vZy5ldmVudHMuTGlzdGVuYWJsZUtleT59IEFuIGFycmF5IG9mIHJlZ2lzdGVyZWRcbiAqICAgICBsaXN0ZW5lcnMuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuZ2V0TGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSwgY2FwdHVyZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmV2ZW50VGFyZ2V0TGlzdGVuZXJzXy5nZXRMaXN0ZW5lcnMoU3RyaW5nKHR5cGUpLCBjYXB0dXJlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3whZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj59IHR5cGUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gKiAgICAgd2l0aG91dCB0aGUgJ29uJyBwcmVmaXguXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6U0NPUEUsIEVWRU5UT0JKKTooYm9vbGVhbnx1bmRlZmluZWQpfSBsaXN0ZW5lciBUaGVcbiAqICAgICBsaXN0ZW5lciBmdW5jdGlvbiB0byBnZXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmUgV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X2xpc3RlbmVyU2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlXG4gKiAgICAgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHs/Z29vZy5ldmVudHMuTGlzdGVuYWJsZUtleX0gdGhlIGZvdW5kIGxpc3RlbmVyIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICogQHRlbXBsYXRlIFNDT1BFLEVWRU5UT0JKXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQucHJvdG90eXBlLmdldExpc3RlbmVyID0gZnVuY3Rpb24oXG4gICAgdHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUsIG9wdF9saXN0ZW5lclNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfLmdldExpc3RlbmVyKFxuICAgICAgU3RyaW5nKHR5cGUpLCBsaXN0ZW5lciwgY2FwdHVyZSwgb3B0X2xpc3RlbmVyU2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj19IG9wdF90eXBlIEV2ZW50IHR5cGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdHVyZSBXaGV0aGVyIHRvIGNoZWNrIGZvciBjYXB0dXJlIG9yIGJ1YmJsZVxuICogICAgIGxpc3RlbmVycy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYW55IGFjdGl2ZSBsaXN0ZW5lcnMgbWF0Y2hpbmdcbiAqICAgICB0aGUgcmVxdWVzdGVkIHR5cGUgYW5kL29yIGNhcHR1cmUgcGhhc2UuXG4gKiBAdGVtcGxhdGUgRVZFTlRPQkpcbiAqIEBvdmVycmlkZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuaGFzTGlzdGVuZXIgPSBmdW5jdGlvbihcbiAgICBvcHRfdHlwZSwgb3B0X2NhcHR1cmUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaWQgPSAob3B0X3R5cGUgIT09IHVuZGVmaW5lZCkgPyBTdHJpbmcob3B0X3R5cGUpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gdGhpcy5ldmVudFRhcmdldExpc3RlbmVyc18uaGFzTGlzdGVuZXIoaWQsIG9wdF9jYXB0dXJlKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB0YXJnZXQgdG8gYmUgdXNlZCBmb3IgYGV2ZW50LnRhcmdldGAgd2hlbiBmaXJpbmdcbiAqIGV2ZW50LiBNYWlubHkgdXNlZCBmb3IgdGVzdGluZy4gRm9yIGV4YW1wbGUsIHNlZVxuICogYGdvb2cudGVzdGluZy5ldmVudHMubWl4aW5MaXN0ZW5hYmxlYC5cbiAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5zZXRUYXJnZXRGb3JUZXN0aW5nID0gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5hY3R1YWxFdmVudFRhcmdldF8gPSB0YXJnZXQ7XG59O1xuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBldmVudCB0YXJnZXQgaW5zdGFuY2UgaXMgaW5pdGlhbGl6ZWQgcHJvcGVybHkuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUuYXNzZXJ0SW5pdGlhbGl6ZWRfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIHRoaXMuZXZlbnRUYXJnZXRMaXN0ZW5lcnNfLFxuICAgICAgJ0V2ZW50IHRhcmdldCBpcyBub3QgaW5pdGlhbGl6ZWQuIERpZCB5b3UgY2FsbCB0aGUgc3VwZXJjbGFzcyAnICtcbiAgICAgICAgICAnKGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KSBjb25zdHJ1Y3Rvcj8nKTtcbn07XG5cblxuLyoqXG4gKiBEaXNwYXRjaGVzIHRoZSBnaXZlbiBldmVudCBvbiB0aGUgYW5jZXN0b3JzVHJlZS5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IHRvIGRpc3BhdGNoIG9uLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudHxPYmplY3R8c3RyaW5nfSBlIFRoZSBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5PGdvb2cuZXZlbnRzLkxpc3RlbmFibGU+PX0gb3B0X2FuY2VzdG9yc1RyZWUgVGhlIGFuY2VzdG9yc1xuICogICAgIHRyZWUgb2YgdGhlIHRhcmdldCwgaW4gcmV2ZXJzZSBvcmRlciBmcm9tIHRoZSBjbG9zZXN0IGFuY2VzdG9yXG4gKiAgICAgdG8gdGhlIHJvb3QgZXZlbnQgdGFyZ2V0LiBNYXkgYmUgbnVsbCBpZiB0aGUgdGFyZ2V0IGhhcyBubyBhbmNlc3Rvci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IElmIGFueW9uZSBjYWxsZWQgcHJldmVudERlZmF1bHQgb24gdGhlIGV2ZW50IG9iamVjdCAob3JcbiAqICAgICBpZiBhbnkgb2YgdGhlIGxpc3RlbmVycyByZXR1cm5zIGZhbHNlKSB0aGlzIHdpbGwgYWxzbyByZXR1cm4gZmFsc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudFRhcmdldC5kaXNwYXRjaEV2ZW50SW50ZXJuYWxfID0gZnVuY3Rpb24oXG4gICAgdGFyZ2V0LCBlLCBvcHRfYW5jZXN0b3JzVHJlZSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSAqL1xuICB2YXIgdHlwZSA9IGUudHlwZSB8fCAvKiogQHR5cGUge3N0cmluZ30gKi8gKGUpO1xuXG4gIC8vIElmIGFjY2VwdGluZyBhIHN0cmluZyBvciBvYmplY3QsIGNyZWF0ZSBhIGN1c3RvbSBldmVudCBvYmplY3Qgc28gdGhhdFxuICAvLyBwcmV2ZW50RGVmYXVsdCBhbmQgc3RvcFByb3BhZ2F0aW9uIHdvcmsgd2l0aCB0aGUgZXZlbnQuXG4gIGlmICh0eXBlb2YgZSA9PT0gJ3N0cmluZycpIHtcbiAgICBlID0gbmV3IGdvb2cuZXZlbnRzLkV2ZW50KGUsIHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoIShlIGluc3RhbmNlb2YgZ29vZy5ldmVudHMuRXZlbnQpKSB7XG4gICAgdmFyIG9sZEV2ZW50ID0gZTtcbiAgICBlID0gbmV3IGdvb2cuZXZlbnRzLkV2ZW50KHR5cGUsIHRhcmdldCk7XG4gICAgZ29vZy5vYmplY3QuZXh0ZW5kKGUsIG9sZEV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBlLnRhcmdldCA9IGUudGFyZ2V0IHx8IHRhcmdldDtcbiAgfVxuXG4gIHZhciBydiA9IHRydWUsIGN1cnJlbnRUYXJnZXQ7XG5cbiAgLy8gRXhlY3V0ZXMgYWxsIGNhcHR1cmUgbGlzdGVuZXJzIG9uIHRoZSBhbmNlc3RvcnMsIGlmIGFueS5cbiAgaWYgKG9wdF9hbmNlc3RvcnNUcmVlKSB7XG4gICAgZm9yICh2YXIgaSA9IG9wdF9hbmNlc3RvcnNUcmVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAhZS5oYXNQcm9wYWdhdGlvblN0b3BwZWQoKSAmJiBpID49IDA7IGktLSkge1xuICAgICAgY3VycmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldCA9IG9wdF9hbmNlc3RvcnNUcmVlW2ldO1xuICAgICAgcnYgPSBjdXJyZW50VGFyZ2V0LmZpcmVMaXN0ZW5lcnModHlwZSwgdHJ1ZSwgZSkgJiYgcnY7XG4gICAgfVxuICB9XG5cbiAgLy8gRXhlY3V0ZXMgY2FwdHVyZSBhbmQgYnViYmxlIGxpc3RlbmVycyBvbiB0aGUgdGFyZ2V0LlxuICBpZiAoIWUuaGFzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICBjdXJyZW50VGFyZ2V0ID0gLyoqIEB0eXBlIHs/fSAqLyAoZS5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0KTtcbiAgICBydiA9IGN1cnJlbnRUYXJnZXQuZmlyZUxpc3RlbmVycyh0eXBlLCB0cnVlLCBlKSAmJiBydjtcbiAgICBpZiAoIWUuaGFzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgIHJ2ID0gY3VycmVudFRhcmdldC5maXJlTGlzdGVuZXJzKHR5cGUsIGZhbHNlLCBlKSAmJiBydjtcbiAgICB9XG4gIH1cblxuICAvLyBFeGVjdXRlcyBhbGwgYnViYmxlIGxpc3RlbmVycyBvbiB0aGUgYW5jZXN0b3JzLCBpZiBhbnkuXG4gIGlmIChvcHRfYW5jZXN0b3JzVHJlZSkge1xuICAgIGZvciAoaSA9IDA7ICFlLmhhc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIGkgPCBvcHRfYW5jZXN0b3JzVHJlZS5sZW5ndGg7XG4gICAgICAgICBpKyspIHtcbiAgICAgIGN1cnJlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgPSBvcHRfYW5jZXN0b3JzVHJlZVtpXTtcbiAgICAgIHJ2ID0gY3VycmVudFRhcmdldC5maXJlTGlzdGVuZXJzKHR5cGUsIGZhbHNlLCBlKSAmJiBydjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnY7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEpTT04gdXRpbGl0eSBmdW5jdGlvbnMuXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuanNvbicpO1xuZ29vZy5wcm92aWRlKCdnb29nLmpzb24uUmVwbGFjZXInKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5qc29uLlJldml2ZXInKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5qc29uLlNlcmlhbGl6ZXInKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IElmIHRydWUsIHVzZSB0aGUgbmF0aXZlIEpTT04gcGFyc2luZyBBUEkuXG4gKiBOT1RFOiBUaGUgZGVmYXVsdCBgZ29vZy5qc29uLnBhcnNlYCBpbXBsZW1lbnRhdGlvbiBpcyBhYmxlIHRvIGhhbmRsZVxuICogaW52YWxpZCBKU09OLiBKU1BCIHVzZWQgdG8gcHJvZHVjZSBpbnZhbGlkIEpTT04gd2hpY2ggaXMgbm90IHRoZSBjYXNlXG4gKiBhbnltb3JlIHNvIHRoaXMgaXMgc2FmZSB0byBlbmFibGUgZm9yIHBhcnNpbmcgSlNQQi4gVXNpbmcgbmF0aXZlIEpTT04gaXNcbiAqIGZhc3RlciBhbmQgc2FmZXIgdGhhbiB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB1c2luZyBgZXZhbGAuXG4gKi9cbmdvb2cuanNvbi5VU0VfTkFUSVZFX0pTT04gPSBnb29nLmRlZmluZSgnZ29vZy5qc29uLlVTRV9OQVRJVkVfSlNPTicsIGZhbHNlKTtcblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBJZiB0cnVlLCB0cnkgdGhlIG5hdGl2ZSBKU09OIHBhcnNpbmcgQVBJIGZpcnN0LiBJZiBpdFxuICogZmFpbHMsIGxvZyBhbiBlcnJvciBhbmQgdXNlIGBldmFsYCBpbnN0ZWFkLiBUaGlzIGlzIHVzZWZ1bCB3aGVuXG4gKiB0cmFuc2l0aW9uaW5nIHRvIGBnb29nLmpzb24uVVNFX05BVElWRV9KU09OYC4gVGhlIGVycm9yIGxvZ2dlciBuZWVkcyB0b1xuICogYmUgc2V0IGJ5IGBnb29nLmpzb24uc2V0RXJyb3JMb2dnZXJgLiBJZiBpdCBpcyBub3Qgc2V0IHRoZW4gdGhlIGVycm9yXG4gKiBpcyBpZ25vcmVkLlxuICovXG5nb29nLmpzb24uVFJZX05BVElWRV9KU09OID0gZ29vZy5kZWZpbmUoJ2dvb2cuanNvbi5UUllfTkFUSVZFX0pTT04nLCB0cnVlKTtcblxuXG4vKipcbiAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGFuIGludmFsaWQgSlNPTiBzdHJpbmcuIFRoaXMgb25seSBlbnN1cmVzIHRoYXQgd2UgYXJlXG4gKiBub3QgdXNpbmcgYW55IGludmFsaWQgY2hhcmFjdGVyc1xuICogQHBhcmFtIHtzdHJpbmd9IHMgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgaW5wdXQgaXMgYSB2YWxpZCBKU09OIHN0cmluZy5cbiAqL1xuZ29vZy5qc29uLmlzVmFsaWQgPSBmdW5jdGlvbihzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gQWxsIGVtcHR5IHdoaXRlc3BhY2UgaXMgbm90IHZhbGlkLlxuICBpZiAoL15cXHMqJC8udGVzdChzKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgdGFrZW4gZnJvbSBodHRwOi8vd3d3Lmpzb24ub3JnL2pzb24yLmpzIHdoaWNoIGlzIHJlbGVhc2VkIHRvIHRoZVxuICAvLyBwdWJsaWMgZG9tYWluLlxuICAvLyBDaGFuZ2VzOiBXZSBkaXNzYWxsb3cgXFx1MjAyOCBMaW5lIHNlcGFyYXRvciBhbmQgXFx1MjAyOSBQYXJhZ3JhcGggc2VwYXJhdG9yXG4gIC8vIGluc2lkZSBzdHJpbmdzLiAgV2UgYWxzbyB0cmVhdCBcXHUyMDI4IGFuZCBcXHUyMDI5IGFzIHdoaXRlc3BhY2Ugd2hpY2ggdGhleVxuICAvLyBhcmUgaW4gdGhlIFJGQyBidXQgSUUgYW5kIFNhZmFyaSBkb2VzIG5vdCBtYXRjaCBcXHMgdG8gdGhlc2Ugc28gd2UgbmVlZCB0b1xuICAvLyBpbmNsdWRlIHRoZW0gaW4gdGhlIHJlZyBleHBzIGluIGFsbCBwbGFjZXMgd2hlcmUgd2hpdGVzcGFjZSBpcyBhbGxvd2VkLlxuICAvLyBXZSBhbGxvd2VkIFxceDdmIGluc2lkZSBzdHJpbmdzIGJlY2F1c2Ugc29tZSB0b29scyBkb24ndCBlc2NhcGUgaXQsXG4gIC8vIGUuZy4gaHR0cDovL3d3dy5qc29uLm9yZy9qYXZhL29yZy9qc29uL0pTT05PYmplY3QuamF2YVxuXG4gIC8vIFBhcnNpbmcgaGFwcGVucyBpbiB0aHJlZSBzdGFnZXMuIEluIHRoZSBmaXJzdCBzdGFnZSwgd2UgcnVuIHRoZSB0ZXh0XG4gIC8vIGFnYWluc3QgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IGxvb2sgZm9yIG5vbi1KU09OIHBhdHRlcm5zLiBXZSBhcmVcbiAgLy8gZXNwZWNpYWxseSBjb25jZXJuZWQgd2l0aCAnKCknIGFuZCAnbmV3JyBiZWNhdXNlIHRoZXkgY2FuIGNhdXNlIGludm9jYXRpb24sXG4gIC8vIGFuZCAnPScgYmVjYXVzZSBpdCBjYW4gY2F1c2UgbXV0YXRpb24uIEJ1dCBqdXN0IHRvIGJlIHNhZmUsIHdlIHdhbnQgdG9cbiAgLy8gcmVqZWN0IGFsbCB1bmV4cGVjdGVkIGZvcm1zLlxuXG4gIC8vIFdlIHNwbGl0IHRoZSBmaXJzdCBzdGFnZSBpbnRvIDQgcmVnZXhwIG9wZXJhdGlvbnMgaW4gb3JkZXIgdG8gd29yayBhcm91bmRcbiAgLy8gY3JpcHBsaW5nIGluZWZmaWNpZW5jaWVzIGluIElFJ3MgYW5kIFNhZmFyaSdzIHJlZ2V4cCBlbmdpbmVzLiBGaXJzdCB3ZVxuICAvLyByZXBsYWNlIGFsbCBiYWNrc2xhc2ggcGFpcnMgd2l0aCAnQCcgKGEgbm9uLUpTT04gY2hhcmFjdGVyKS4gU2Vjb25kLCB3ZVxuICAvLyByZXBsYWNlIGFsbCBzaW1wbGUgdmFsdWUgdG9rZW5zIHdpdGggJ10nIGNoYXJhY3RlcnMsIGJ1dCBvbmx5IHdoZW4gZm9sbG93ZWRcbiAgLy8gYnkgYSBjb2xvbiwgY29tbWEsIGNsb3NpbmcgYnJhY2tldCBvciBlbmQgb2Ygc3RyaW5nLiBUaGlyZCwgd2UgZGVsZXRlIGFsbFxuICAvLyBvcGVuIGJyYWNrZXRzIHRoYXQgZm9sbG93IGEgY29sb24gb3IgY29tbWEgb3IgdGhhdCBiZWdpbiB0aGUgdGV4dC4gRmluYWxseSxcbiAgLy8gd2UgbG9vayB0byBzZWUgdGhhdCB0aGUgcmVtYWluaW5nIGNoYXJhY3RlcnMgYXJlIG9ubHkgd2hpdGVzcGFjZSBvciAnXScgb3JcbiAgLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuXG5cbiAgLy8gRG9uJ3QgbWFrZSB0aGVzZSBzdGF0aWMgc2luY2UgdGhleSBoYXZlIHRoZSBnbG9iYWwgZmxhZy5cbiAgY29uc3QgYmFja3NsYXNoZXNSZSA9IC9cXFxcW1wiXFxcXFxcL2JmbnJ0dV0vZztcbiAgY29uc3Qgc2ltcGxlVmFsdWVzUmUgPVxuICAgICAgLyg/OlwiW15cIlxcXFxcXG5cXHJcXHUyMDI4XFx1MjAyOVxceDAwLVxceDA4XFx4MGEtXFx4MWZdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPylbXFxzXFx1MjAyOFxcdTIwMjldKig/PTp8LHxdfH18JCkvZztcbiAgY29uc3Qgb3BlbkJyYWNrZXRzUmUgPSAvKD86Xnw6fCwpKD86W1xcc1xcdTIwMjhcXHUyMDI5XSpcXFspKy9nO1xuICBjb25zdCByZW1haW5kZXJSZSA9IC9eW1xcXSw6e31cXHNcXHUyMDI4XFx1MjAyOV0qJC87XG5cbiAgcmV0dXJuIHJlbWFpbmRlclJlLnRlc3QoXG4gICAgICBzLnJlcGxhY2UoYmFja3NsYXNoZXNSZSwgJ0AnKVxuICAgICAgICAgIC5yZXBsYWNlKHNpbXBsZVZhbHVlc1JlLCAnXScpXG4gICAgICAgICAgLnJlcGxhY2Uob3BlbkJyYWNrZXRzUmUsICcnKSk7XG59O1xuXG4vKipcbiAqIExvZ3MgYSBwYXJzaW5nIGVycm9yIGluIGBKU09OLnBhcnNlYCBzb2x2YWJsZSBieSB1c2luZyBgZXZhbGBcbiAqIGlmIGBnb29nLmpzb24uVFJZX05BVElWRV9KU09OYCBpcyBlbmFibGVkLlxuICogQHByaXZhdGUge2Z1bmN0aW9uKHN0cmluZywgIUVycm9yKX0gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgZXJyb3IgbWVzc2FnZSxcbiAqICAgICB0aGUgc2Vjb25kIGlzIHRoZSBleGNlcHRpb24gdGhyb3duIGJ5IGBKU09OLnBhcnNlYC5cbiAqL1xuZ29vZy5qc29uLmVycm9yTG9nZ2VyXyA9IGdvb2cubnVsbEZ1bmN0aW9uO1xuXG5cbi8qKlxuICogU2V0cyBhbiBlcnJvciBsb2dnZXIgdG8gdXNlIGlmIHRoZXJlJ3MgYSByZWNvdmVyYWJsZSBwYXJzaW5nIGVycm9yIGFuZFxuICogYGdvb2cuanNvbi5UUllfTkFUSVZFX0pTT05gIGlzIGVuYWJsZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgIUVycm9yKX0gZXJyb3JMb2dnZXIgVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGVcbiAqICAgICBlcnJvciBtZXNzYWdlLCB0aGUgc2Vjb25kIGlzIHRoZSBleGNlcHRpb24gdGhyb3duIGJ5IGBKU09OLnBhcnNlYC5cbiAqL1xuZ29vZy5qc29uLnNldEVycm9yTG9nZ2VyID0gZnVuY3Rpb24oZXJyb3JMb2dnZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmpzb24uZXJyb3JMb2dnZXJfID0gZXJyb3JMb2dnZXI7XG59O1xuXG5cbi8qKlxuICogUGFyc2VzIGEgSlNPTiBzdHJpbmcgYW5kIHJldHVybnMgdGhlIHJlc3VsdC4gVGhpcyB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmXG4gKiB0aGUgc3RyaW5nIGlzIGFuIGludmFsaWQgSlNPTiBzdHJpbmcuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgaXMgdmVyeSBzbG93IG9uIGxhcmdlIHN0cmluZ3MuIFVzZSBKU09OLnBhcnNlIGlmIHBvc3NpYmxlLlxuICpcbiAqIEBwYXJhbSB7Kn0gcyBUaGUgSlNPTiBzdHJpbmcgdG8gcGFyc2UuXG4gKiBAdGhyb3dzIEVycm9yIGlmIHMgaXMgaW52YWxpZCBKU09OLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgb2JqZWN0IGdlbmVyYXRlZCBmcm9tIHRoZSBKU09OIHN0cmluZywgb3IgbnVsbC5cbiAqIEBkZXByZWNhdGVkIFVzZSBKU09OLnBhcnNlLlxuICovXG5nb29nLmpzb24ucGFyc2UgPSBnb29nLmpzb24uVVNFX05BVElWRV9KU09OID9cbiAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCopOk9iamVjdH0gKi8gKGdvb2cuZ2xvYmFsWydKU09OJ11bJ3BhcnNlJ10pIDpcbiAgICBmdW5jdGlvbihzKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBsZXQgZXJyb3I7XG4gICAgICBpZiAoZ29vZy5qc29uLlRSWV9OQVRJVkVfSlNPTikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnb29nLmdsb2JhbFsnSlNPTiddWydwYXJzZSddKHMpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yID0gZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG8gPSBTdHJpbmcocyk7XG4gICAgICBpZiAoZ29vZy5qc29uLmlzVmFsaWQobykpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IC8qKiBAdHlwZSB7P09iamVjdH0gKi8gKGV2YWwoJygnICsgbyArICcpJykpO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgZ29vZy5qc29uLmVycm9yTG9nZ2VyXygnSW52YWxpZCBKU09OOiAnICsgbywgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlNPTiBzdHJpbmc6ICcgKyBvKTtcbiAgICB9O1xuXG5cbi8qKlxuICogSlNPTiByZXBsYWNlciwgYXMgZGVmaW5lZCBpbiBTZWN0aW9uIDE1LjEyLjMgb2YgdGhlIEVTNSBzcGVjLlxuICogQHNlZSBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xMi4zXG4gKlxuICogVE9ETyhuaWNrc2FudG9zKTogQXJyYXkgc2hvdWxkIGFsc28gYmUgYSB2YWxpZCByZXBsYWNlci5cbiAqXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb24odGhpczpPYmplY3QsIHN0cmluZywgKik6ICp9XG4gKi9cbmdvb2cuanNvbi5SZXBsYWNlcjtcblxuXG4vKipcbiAqIEpTT04gcmV2aXZlciwgYXMgZGVmaW5lZCBpbiBTZWN0aW9uIDE1LjEyLjIgb2YgdGhlIEVTNSBzcGVjLlxuICogQHNlZSBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xMi4zXG4gKlxuICogQHR5cGVkZWYge2Z1bmN0aW9uKHRoaXM6T2JqZWN0LCBzdHJpbmcsICopOiAqfVxuICovXG5nb29nLmpzb24uUmV2aXZlcjtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgYW4gb2JqZWN0IG9yIGEgdmFsdWUgdG8gYSBKU09OIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7P2dvb2cuanNvbi5SZXBsYWNlcj19IG9wdF9yZXBsYWNlciBBIHJlcGxhY2VyIGZ1bmN0aW9uXG4gKiAgICAgY2FsbGVkIGZvciBlYWNoIChrZXksIHZhbHVlKSBwYWlyIHRoYXQgZGV0ZXJtaW5lcyBob3cgdGhlIHZhbHVlXG4gKiAgICAgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuIEJ5IGRlZnVsdCwgdGhpcyBqdXN0IHJldHVybnMgdGhlIHZhbHVlXG4gKiAgICAgYW5kIGFsbG93cyBkZWZhdWx0IHNlcmlhbGl6YXRpb24gdG8ga2ljayBpbi5cbiAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlcmUgYXJlIGxvb3BzIGluIHRoZSBvYmplY3QgZ3JhcGguXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgSlNPTiBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0LlxuICovXG5nb29nLmpzb24uc2VyaWFsaXplID0gZ29vZy5qc29uLlVTRV9OQVRJVkVfSlNPTiA/XG4gICAgLyoqIEB0eXBlIHtmdW5jdGlvbigqLCA/Z29vZy5qc29uLlJlcGxhY2VyPSk6c3RyaW5nfSAqL1xuICAgIChnb29nLmdsb2JhbFsnSlNPTiddWydzdHJpbmdpZnknXSkgOlxuICAgIGZ1bmN0aW9uKG9iamVjdCwgb3B0X3JlcGxhY2VyKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICAvLyBOT1RFKG5pY2tzYW50b3MpOiBDdXJyZW50bHksIHdlIG5ldmVyIHVzZSBKU09OLnN0cmluZ2lmeS5cbiAgICAgIC8vXG4gICAgICAvLyBUaGUgbGFzdCB0aW1lIEkgZXZhbHVhdGVkIHRoaXMsIEpTT04uc3RyaW5naWZ5IGhhZCBzdWJ0bGUgYnVncyBhbmRcbiAgICAgIC8vIGJlaGF2aW9yIGRpZmZlcmVuY2VzIG9uIGFsbCBicm93c2VycywgYW5kIHRoZSBwZXJmb3JtYW5jZSB3aW4gd2FzIG5vdFxuICAgICAgLy8gbGFyZ2UgZW5vdWdoIHRvIGp1c3RpZnkgYWxsIHRoZSBpc3N1ZXMuIFRoaXMgbWF5IGNoYW5nZSBpbiB0aGUgZnV0dXJlXG4gICAgICAvLyBhcyBicm93c2VyIGltcGxlbWVudGF0aW9ucyBnZXQgYmV0dGVyLlxuICAgICAgLy9cbiAgICAgIC8vIGFzc2VydFNlcmlhbGl6ZSBpbiBqc29uX3Rlc3QgY29udGFpbnMgaWYgYnJhbmNoZXMgZm9yIHRoZSBjYXNlc1xuICAgICAgLy8gdGhhdCBmYWlsLlxuICAgICAgcmV0dXJuIG5ldyBnb29nLmpzb24uU2VyaWFsaXplcihvcHRfcmVwbGFjZXIpLnNlcmlhbGl6ZShvYmplY3QpO1xuICAgIH07XG5cblxuXG4vKipcbiAqIENsYXNzIHRoYXQgaXMgdXNlZCB0byBzZXJpYWxpemUgSlNPTiBvYmplY3RzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHs/Z29vZy5qc29uLlJlcGxhY2VyPX0gb3B0X3JlcGxhY2VyIFJlcGxhY2VyLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmdvb2cuanNvbi5TZXJpYWxpemVyID0gZnVuY3Rpb24ob3B0X3JlcGxhY2VyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIEB0eXBlIHtnb29nLmpzb24uUmVwbGFjZXJ8bnVsbHx1bmRlZmluZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlcGxhY2VyXyA9IG9wdF9yZXBsYWNlcjtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIGFuIG9iamVjdCBvciBhIHZhbHVlIHRvIGEgSlNPTiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBzZXJpYWxpemUuXG4gKiBAdGhyb3dzIEVycm9yIGlmIHRoZXJlIGFyZSBsb29wcyBpbiB0aGUgb2JqZWN0IGdyYXBoLlxuICogQHJldHVybiB7c3RyaW5nfSBBIEpTT04gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dC5cbiAqL1xuZ29vZy5qc29uLlNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHNiID0gW107XG4gIHRoaXMuc2VyaWFsaXplSW50ZXJuYWwob2JqZWN0LCBzYik7XG4gIHJldHVybiBzYi5qb2luKCcnKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIGEgZ2VuZXJpYyB2YWx1ZSB0byBhIEpTT04gc3RyaW5nXG4gKiBAcHJvdGVjdGVkXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2IgQXJyYXkgdXNlZCBhcyBhIHN0cmluZyBidWlsZGVyLlxuICogQHRocm93cyBFcnJvciBpZiB0aGVyZSBhcmUgbG9vcHMgaW4gdGhlIG9iamVjdCBncmFwaC5cbiAqL1xuZ29vZy5qc29uLlNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZUludGVybmFsID0gZnVuY3Rpb24ob2JqZWN0LCBzYikge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIC8vIHVuZGVmaW5lZCA9PSBudWxsIHNvIHRoaXMgYnJhbmNoIGNvdmVycyB1bmRlZmluZWQgYXMgd2VsbCBhcyBudWxsXG4gICAgc2IucHVzaCgnbnVsbCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgdGhpcy5zZXJpYWxpemVBcnJheShvYmplY3QsIHNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICBvYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcgfHwgb2JqZWN0IGluc3RhbmNlb2YgTnVtYmVyIHx8XG4gICAgICAgIG9iamVjdCBpbnN0YW5jZW9mIEJvb2xlYW4pIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdC52YWx1ZU9mKCk7XG4gICAgICAvLyBGYWxsIHRocm91Z2ggdG8gc3dpdGNoIGJlbG93LlxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlcmlhbGl6ZU9iamVjdF8oLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAob2JqZWN0KSwgc2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIG9iamVjdCkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICB0aGlzLnNlcmlhbGl6ZVN0cmluZ18ob2JqZWN0LCBzYik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgdGhpcy5zZXJpYWxpemVOdW1iZXJfKG9iamVjdCwgc2IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBzYi5wdXNoKFN0cmluZyhvYmplY3QpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHNiLnB1c2goJ251bGwnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIHR5cGVvZiBvYmplY3QpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2hhcmFjdGVyIG1hcHBpbmdzIHVzZWQgaW50ZXJuYWxseSBmb3IgZ29vZy5zdHJpbmcucXVvdGVcbiAqIEBwcml2YXRlXG4gKiBAdHlwZSB7IU9iamVjdH1cbiAqL1xuZ29vZy5qc29uLlNlcmlhbGl6ZXIuY2hhclRvSnNvbkNoYXJDYWNoZV8gPSB7XG4gICdcXFwiJzogJ1xcXFxcIicsXG4gICdcXFxcJzogJ1xcXFxcXFxcJyxcbiAgJy8nOiAnXFxcXC8nLFxuICAnXFxiJzogJ1xcXFxiJyxcbiAgJ1xcZic6ICdcXFxcZicsXG4gICdcXG4nOiAnXFxcXG4nLFxuICAnXFxyJzogJ1xcXFxyJyxcbiAgJ1xcdCc6ICdcXFxcdCcsXG5cbiAgJ1xceDBCJzogJ1xcXFx1MDAwYicgIC8vICdcXHYnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSlNjcmlwdFxufTtcblxuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIG1hdGNoIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIHJlcGxhY2VkLlxuICogVGhlIFM2MCBicm93c2VyIGhhcyBhIGJ1ZyB3aGVyZSB1bmljb2RlIGNoYXJhY3RlcnMgYXJlIG5vdCBtYXRjaGVkIGJ5XG4gKiByZWd1bGFyIGV4cHJlc3Npb25zLiBUaGUgY29uZGl0aW9uIGJlbG93IGRldGVjdHMgc3VjaCBiZWhhdmlvdXIgYW5kXG4gKiBhZGp1c3RzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYWNjb3JkaW5nbHkuXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUgeyFSZWdFeHB9XG4gKi9cbmdvb2cuanNvbi5TZXJpYWxpemVyLmNoYXJzVG9SZXBsYWNlXyA9IC9cXHVmZmZmLy50ZXN0KCdcXHVmZmZmJykgP1xuICAgIC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxcdWZmZmZdL2cgOlxuICAgIC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceGZmXS9nO1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyBhIHN0cmluZyB0byBhIEpTT04gc3RyaW5nXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHMgVGhlIHN0cmluZyB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHNiIEFycmF5IHVzZWQgYXMgYSBzdHJpbmcgYnVpbGRlci5cbiAqL1xuZ29vZy5qc29uLlNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZVN0cmluZ18gPSBmdW5jdGlvbihzLCBzYikge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRoZSBvZmZpY2lhbCBKU09OIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IHdvcmsgd2l0aCBpbnRlcm5hdGlvbmFsXG4gIC8vIGNoYXJhY3RlcnMuXG4gIHNiLnB1c2goJ1wiJywgcy5yZXBsYWNlKGdvb2cuanNvbi5TZXJpYWxpemVyLmNoYXJzVG9SZXBsYWNlXywgZnVuY3Rpb24oYykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBjYWNoaW5nIHRoZSByZXN1bHQgaW1wcm92ZXMgcGVyZm9ybWFuY2UgYnkgYSBmYWN0b3IgMi0zXG4gICAgbGV0IHJ2ID0gZ29vZy5qc29uLlNlcmlhbGl6ZXIuY2hhclRvSnNvbkNoYXJDYWNoZV9bY107XG4gICAgaWYgKCFydikge1xuICAgICAgcnYgPSAnXFxcXHUnICsgKGMuY2hhckNvZGVBdCgwKSB8IDB4MTAwMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG4gICAgICBnb29nLmpzb24uU2VyaWFsaXplci5jaGFyVG9Kc29uQ2hhckNhY2hlX1tjXSA9IHJ2O1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG4gIH0pLCAnXCInKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIGEgbnVtYmVyIHRvIGEgSlNPTiBzdHJpbmdcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2IgQXJyYXkgdXNlZCBhcyBhIHN0cmluZyBidWlsZGVyLlxuICovXG5nb29nLmpzb24uU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplTnVtYmVyXyA9IGZ1bmN0aW9uKG4sIHNiKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgc2IucHVzaChpc0Zpbml0ZShuKSAmJiAhaXNOYU4obikgPyBTdHJpbmcobikgOiAnbnVsbCcpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgYW4gYXJyYXkgdG8gYSBKU09OIHN0cmluZ1xuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBhcnIgVGhlIGFycmF5IHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2IgQXJyYXkgdXNlZCBhcyBhIHN0cmluZyBidWlsZGVyLlxuICogQHByb3RlY3RlZFxuICovXG5nb29nLmpzb24uU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplQXJyYXkgPSBmdW5jdGlvbihhcnIsIHNiKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgbCA9IGFyci5sZW5ndGg7XG4gIHNiLnB1c2goJ1snKTtcbiAgbGV0IHNlcCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHNiLnB1c2goc2VwKTtcblxuICAgIGNvbnN0IHZhbHVlID0gYXJyW2ldO1xuICAgIHRoaXMuc2VyaWFsaXplSW50ZXJuYWwoXG4gICAgICAgIHRoaXMucmVwbGFjZXJfID8gdGhpcy5yZXBsYWNlcl8uY2FsbChhcnIsIFN0cmluZyhpKSwgdmFsdWUpIDogdmFsdWUsXG4gICAgICAgIHNiKTtcblxuICAgIHNlcCA9ICcsJztcbiAgfVxuICBzYi5wdXNoKCddJyk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyBhbiBvYmplY3QgdG8gYSBKU09OIHN0cmluZ1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzYiBBcnJheSB1c2VkIGFzIGEgc3RyaW5nIGJ1aWxkZXIuXG4gKi9cbmdvb2cuanNvbi5TZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVPYmplY3RfID0gZnVuY3Rpb24ob2JqLCBzYikge1xuICAndXNlIHN0cmljdCc7XG4gIHNiLnB1c2goJ3snKTtcbiAgbGV0IHNlcCA9ICcnO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIC8vIFNraXAgZnVuY3Rpb25zLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNiLnB1c2goc2VwKTtcbiAgICAgICAgdGhpcy5zZXJpYWxpemVTdHJpbmdfKGtleSwgc2IpO1xuICAgICAgICBzYi5wdXNoKCc6Jyk7XG5cbiAgICAgICAgdGhpcy5zZXJpYWxpemVJbnRlcm5hbChcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZXJfID8gdGhpcy5yZXBsYWNlcl8uY2FsbChvYmosIGtleSwgdmFsdWUpIDogdmFsdWUsIHNiKTtcblxuICAgICAgICBzZXAgPSAnLCc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNiLnB1c2goJ30nKTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2ltcGxlIGZyZWVsaXN0LlxuICpcbiAqIEFuIGFudGVyYXRpdmUgdG8gZ29vZy5zdHJ1Y3RzLlNpbXBsZVBvb2wsIGl0IGltcG9zZXMgdGhlIHJlcXVpcmVtZW50IHRoYXQgdGhlXG4gKiBvYmplY3RzIGluIHRoZSBsaXN0IGNvbnRhaW4gYSBcIm5leHRcIiBwcm9wZXJ0eSB0aGF0IGNhbiBiZSB1c2VkIHRvIG1haW50YWluXG4gKiB0aGUgcG9vbC5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuYXN5bmMuRnJlZUxpc3QnKTtcblxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBJVEVNXG4gKi9cbmdvb2cuYXN5bmMuRnJlZUxpc3QgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6SVRFTX0gY3JlYXRlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oSVRFTSk6dm9pZH0gcmVzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVhdGUsIHJlc2V0LCBsaW1pdCkge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge251bWJlcn0gKi9cbiAgICB0aGlzLmxpbWl0XyA9IGxpbWl0O1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge2Z1bmN0aW9uKCl9ICovXG4gICAgdGhpcy5jcmVhdGVfID0gY3JlYXRlO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge2Z1bmN0aW9uKElURU0pOnZvaWR9ICovXG4gICAgdGhpcy5yZXNldF8gPSByZXNldDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMub2NjdXBhbnRzXyA9IDA7XG4gICAgLyoqIEBwcml2YXRlIHtJVEVNfSAqL1xuICAgIHRoaXMuaGVhZF8gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lURU19XG4gICAqL1xuICBnZXQoKSB7XG4gICAgbGV0IGl0ZW07XG4gICAgaWYgKHRoaXMub2NjdXBhbnRzXyA+IDApIHtcbiAgICAgIHRoaXMub2NjdXBhbnRzXy0tO1xuICAgICAgaXRlbSA9IHRoaXMuaGVhZF87XG4gICAgICB0aGlzLmhlYWRfID0gaXRlbS5uZXh0O1xuICAgICAgaXRlbS5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSA9IHRoaXMuY3JlYXRlXygpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lURU19IGl0ZW0gQW4gaXRlbSBhdmFpbGFibGUgZm9yIHBvc3NpYmxlIGZ1dHVyZSByZXVzZS5cbiAgICovXG4gIHB1dChpdGVtKSB7XG4gICAgdGhpcy5yZXNldF8oaXRlbSk7XG4gICAgaWYgKHRoaXMub2NjdXBhbnRzXyA8IHRoaXMubGltaXRfKSB7XG4gICAgICB0aGlzLm9jY3VwYW50c18rKztcbiAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuaGVhZF87XG4gICAgICB0aGlzLmhlYWRfID0gaXRlbTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmlzaWJsZSBmb3IgdGVzdGluZy5cbiAgICogQHBhY2thZ2VcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgb2NjdXBhbnRzKCkge1xuICAgIHJldHVybiB0aGlzLm9jY3VwYW50c187XG4gIH1cbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5nb29nLm1vZHVsZSgnZ29vZy5hc3luYy5Xb3JrUXVldWUnKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuY29uc3QgRnJlZUxpc3QgPSBnb29nLnJlcXVpcmUoJ2dvb2cuYXN5bmMuRnJlZUxpc3QnKTtcbmNvbnN0IHthc3NlcnR9ID0gZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcblxuLy8gVE9ETyhqb2hubGVueik6IGdlbmVyYWxpemUgdGhlIFdvcmtRdWV1ZSBpZiB0aGlzIGlzIHVzZWQgYnkgbW9yZVxuLy8gdGhhbiBnb29nLmFzeW5jLnJ1bi5cblxuXG4vKipcbiAqIEEgbG93IEdDIHdvcmtxdWV1ZS4gVGhlIGtleSBlbGVtZW50cyBvZiB0aGlzIGRlc2lnbjpcbiAqICAgLSBhdm9pZHMgdGhlIG5lZWQgZm9yIGdvb2cuYmluZCBvciBlcXVpdmFsZW50IGJ5IGNhcnJ5aW5nIHNjb3BlXG4gKiAgIC0gYXZvaWRzIHRoZSBuZWVkIGZvciBhcnJheSByZWFsbG9jYXRpb24gYnkgdXNpbmcgYSBsaW5rZWQgbGlzdFxuICogICAtIG1pbmltaXplcyB3b3JrIGVudHJ5IG9iamVjdHMgYWxsb2NhdGlvbiBieSByZWN5Y2xpbmcgb2JqZWN0c1xuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmNsYXNzIFdvcmtRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMud29ya0hlYWRfID0gbnVsbDtcbiAgICB0aGlzLndvcmtUYWlsXyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmblxuICAgKiBAcGFyYW0ge09iamVjdHxudWxsfHVuZGVmaW5lZH0gc2NvcGVcbiAgICovXG4gIGFkZChmbiwgc2NvcGUpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRVbnVzZWRJdGVtXygpO1xuICAgIGl0ZW0uc2V0KGZuLCBzY29wZSk7XG5cbiAgICBpZiAodGhpcy53b3JrVGFpbF8pIHtcbiAgICAgIHRoaXMud29ya1RhaWxfLm5leHQgPSBpdGVtO1xuICAgICAgdGhpcy53b3JrVGFpbF8gPSBpdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoIXRoaXMud29ya0hlYWRfKTtcbiAgICAgIHRoaXMud29ya0hlYWRfID0gaXRlbTtcbiAgICAgIHRoaXMud29ya1RhaWxfID0gaXRlbTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P1dvcmtJdGVtfVxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIGxldCBpdGVtID0gbnVsbDtcblxuICAgIGlmICh0aGlzLndvcmtIZWFkXykge1xuICAgICAgaXRlbSA9IHRoaXMud29ya0hlYWRfO1xuICAgICAgdGhpcy53b3JrSGVhZF8gPSB0aGlzLndvcmtIZWFkXy5uZXh0O1xuICAgICAgaWYgKCF0aGlzLndvcmtIZWFkXykge1xuICAgICAgICB0aGlzLndvcmtUYWlsXyA9IG51bGw7XG4gICAgICB9XG4gICAgICBpdGVtLm5leHQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXb3JrSXRlbX0gaXRlbVxuICAgKi9cbiAgcmV0dXJuVW51c2VkKGl0ZW0pIHtcbiAgICBXb3JrUXVldWUuZnJlZWxpc3RfLnB1dChpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshV29ya0l0ZW19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRVbnVzZWRJdGVtXygpIHtcbiAgICByZXR1cm4gV29ya1F1ZXVlLmZyZWVsaXN0Xy5nZXQoKTtcbiAgfVxufVxuXG4vKiogQGRlZmluZSB7bnVtYmVyfSBUaGUgbWF4aW11bSBudW1iZXIgb2YgZW50cmllcyB0byBrZWVwIGZvciByZWN5Y2xpbmcuICovXG5Xb3JrUXVldWUuREVGQVVMVF9NQVhfVU5VU0VEID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5hc3luYy5Xb3JrUXVldWUuREVGQVVMVF9NQVhfVU5VU0VEJywgMTAwKTtcblxuLyoqIEBjb25zdCBAcHJpdmF0ZSB7IUZyZWVMaXN0PCFXb3JrSXRlbT59ICovXG5Xb3JrUXVldWUuZnJlZWxpc3RfID0gbmV3IEZyZWVMaXN0KFxuICAgICgpID0+IG5ldyBXb3JrSXRlbSgpLCBpdGVtID0+IGl0ZW0ucmVzZXQoKSwgV29ya1F1ZXVlLkRFRkFVTFRfTUFYX1VOVVNFRCk7XG5cbi8qKlxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmNsYXNzIFdvcmtJdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKX0gKi9cbiAgICB0aGlzLmZuID0gbnVsbDtcbiAgICAvKiogQHR5cGUgez9PYmplY3R8bnVsbHx1bmRlZmluZWR9ICovXG4gICAgdGhpcy5zY29wZSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHs/V29ya0l0ZW19ICovXG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBzY29wZVxuICAgKi9cbiAgc2V0KGZuLCBzY29wZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB0aGlzLmZuID0gZm47XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gIH1cblxuICAvKiogUmVzZXQgdGhlIHdvcmsgaXRlbSBzbyB0aGV5IGRvbid0IHByZXZlbnQgR0MgYmVmb3JlIHJldXNlICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuZm4gPSBudWxsO1xuICAgIHRoaXMuc2NvcGUgPSBudWxsO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0cyA9IFdvcmtRdWV1ZTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5hc3luYy5ydW4nKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLldvcmtRdWV1ZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLm5leHRUaWNrJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXN5bmMudGhyb3dFeGNlcHRpb24nKTtcblxuLyoqXG4gKiBAZGVmaW5lIHtib29sZWFufSBJZiB0cnVlLCB1c2UgdGhlIGdsb2JhbCBQcm9taXNlIHRvIGltcGxlbWVudCBnb29nLmFzeW5jLnJ1blxuICogYXNzdW1pbmcgZWl0aGVyIHRoZSBuYXRpdmUsIG9yIHBvbHlmaWxsIHZlcnNpb24gd2lsbCBiZSB1c2VkLiBEb2VzIHN0aWxsXG4gKiBwZXJtaXQgdGVzdHMgdG8gdXNlIGZvcmNlTmV4dFRpY2suXG4gKi9cbmdvb2cuQVNTVU1FX05BVElWRV9QUk9NSVNFID0gZ29vZy5kZWZpbmUoJ2dvb2cuQVNTVU1FX05BVElWRV9QUk9NSVNFJywgZmFsc2UpO1xuXG4vKipcbiAqIEZpcmVzIHRoZSBwcm92aWRlZCBjYWxsYmFjayBqdXN0IGJlZm9yZSB0aGUgY3VycmVudCBjYWxsc3RhY2sgdW53aW5kcywgb3IgYXNcbiAqIHNvb24gYXMgcG9zc2libGUgYWZ0ZXIgdGhlIGN1cnJlbnQgSlMgZXhlY3V0aW9uIGNvbnRleHQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VEhJUyl9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfY29udGV4dCBPYmplY3QgdG8gdXNlIGFzIHRoZSBcInRoaXMgdmFsdWVcIiB3aGVuIGNhbGxpbmdcbiAqICAgICB0aGUgcHJvdmlkZWQgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5nb29nLmFzeW5jLnJ1biA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRfY29udGV4dCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghZ29vZy5hc3luYy5ydW4uc2NoZWR1bGVfKSB7XG4gICAgZ29vZy5hc3luYy5ydW4uaW5pdGlhbGl6ZVJ1bm5lcl8oKTtcbiAgfVxuICBpZiAoIWdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8pIHtcbiAgICAvLyBOb3RoaW5nIGlzIGN1cnJlbnRseSBzY2hlZHVsZWQsIHNjaGVkdWxlIGl0IG5vdy5cbiAgICBnb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV8oKTtcbiAgICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfID0gdHJ1ZTtcbiAgfVxuXG4gIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZV8uYWRkKGNhbGxiYWNrLCBvcHRfY29udGV4dCk7XG59O1xuXG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGZ1bmN0aW9uIHRvIHVzZSB0byBwcm9jZXNzIHRoZSB3b3JrIHF1ZXVlLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5hc3luYy5ydW4uaW5pdGlhbGl6ZVJ1bm5lcl8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZ29vZy5BU1NVTUVfTkFUSVZFX1BST01JU0UgfHxcbiAgICAgIChnb29nLmdsb2JhbC5Qcm9taXNlICYmIGdvb2cuZ2xvYmFsLlByb21pc2UucmVzb2x2ZSkpIHtcbiAgICAvLyBVc2UgZ29vZy5nbG9iYWwuUHJvbWlzZSBpbnN0ZWFkIG9mIGp1c3QgUHJvbWlzZSBiZWNhdXNlIHRoZSByZWxldmFudFxuICAgIC8vIGV4dGVybnMgbWF5IGJlIG1pc3NpbmcsIGFuZCBkb24ndCBhbGlhcyBpdCBiZWNhdXNlIHRoaXMgY291bGQgY29uZnVzZSB0aGVcbiAgICAvLyBjb21waWxlciBpbnRvIHRoaW5raW5nIHRoZSBwb2x5ZmlsbCBpcyByZXF1aXJlZCB3aGVuIGl0IHNob3VsZCBiZSB0cmVhdGVkXG4gICAgLy8gYXMgb3B0aW9uYWwuXG4gICAgdmFyIHByb21pc2UgPSBnb29nLmdsb2JhbC5Qcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBnb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV8gPSBmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHByb21pc2UudGhlbihnb29nLmFzeW5jLnJ1bi5wcm9jZXNzV29ya1F1ZXVlKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGdvb2cuYXN5bmMucnVuLnNjaGVkdWxlXyA9IGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgZ29vZy5hc3luYy5uZXh0VGljayhnb29nLmFzeW5jLnJ1bi5wcm9jZXNzV29ya1F1ZXVlKTtcbiAgICB9O1xuICB9XG59O1xuXG5cbi8qKlxuICogRm9yY2VzIGdvb2cuYXN5bmMucnVuIHRvIHVzZSBuZXh0VGljayBpbnN0ZWFkIG9mIFByb21pc2UuXG4gKlxuICogVGhpcyBzaG91bGQgb25seSBiZSBkb25lIGluIHVuaXQgdGVzdHMuIEl0J3MgdXNlZnVsIGJlY2F1c2UgTW9ja0Nsb2NrXG4gKiByZXBsYWNlcyBuZXh0VGljaywgYnV0IG5vdCB0aGUgYnJvd3NlciBQcm9taXNlIGltcGxlbWVudGF0aW9uLCBzbyBpdCBhbGxvd3NcbiAqIFByb21pc2UtYmFzZWQgY29kZSB0byBiZSB0ZXN0ZWQgd2l0aCBNb2NrQ2xvY2suXG4gKlxuICogSG93ZXZlciwgd2UgYWxzbyB3YW50IHRvIHJ1biBwcm9taXNlcyBpZiB0aGUgTW9ja0Nsb2NrIGlzIG5vIGxvbmdlciBpblxuICogY29udHJvbCBzbyB3ZSBzY2hlZHVsZSBhIGJhY2t1cCBcInNldFRpbWVvdXRcIiB0byB0aGUgdW5tb2NrZWQgdGltZW91dCBpZlxuICogcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbigpKT19IG9wdF9yZWFsU2V0VGltZW91dFxuICovXG5nb29nLmFzeW5jLnJ1bi5mb3JjZU5leHRUaWNrID0gZnVuY3Rpb24ob3B0X3JlYWxTZXRUaW1lb3V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3luYy5ydW4uc2NoZWR1bGVfID0gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGdvb2cuYXN5bmMubmV4dFRpY2soZ29vZy5hc3luYy5ydW4ucHJvY2Vzc1dvcmtRdWV1ZSk7XG4gICAgaWYgKG9wdF9yZWFsU2V0VGltZW91dCkge1xuICAgICAgb3B0X3JlYWxTZXRUaW1lb3V0KGdvb2cuYXN5bmMucnVuLnByb2Nlc3NXb3JrUXVldWUpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gdXNlZCB0byBzY2hlZHVsZSB3b3JrIGFzeW5jaHJvbm91c2VseS5cbiAqIEBwcml2YXRlIHtmdW5jdGlvbigpfVxuICovXG5nb29nLmFzeW5jLnJ1bi5zY2hlZHVsZV87XG5cblxuLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuZ29vZy5hc3luYy5ydW4ud29ya1F1ZXVlU2NoZWR1bGVkXyA9IGZhbHNlO1xuXG5cbi8qKiBAcHJpdmF0ZSB7IWdvb2cuYXN5bmMuV29ya1F1ZXVlfSAqL1xuZ29vZy5hc3luYy5ydW4ud29ya1F1ZXVlXyA9IG5ldyBnb29nLmFzeW5jLldvcmtRdWV1ZSgpO1xuXG5cbmlmIChnb29nLkRFQlVHKSB7XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgd29yayBxdWV1ZS4gT25seSBhdmFpbGFibGUgZm9yIHRlc3RzIGluIGRlYnVnIG1vZGUuXG4gICAqL1xuICBnb29nLmFzeW5jLnJ1bi5yZXNldFF1ZXVlID0gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGdvb2cuYXN5bmMucnVuLndvcmtRdWV1ZVNjaGVkdWxlZF8gPSBmYWxzZTtcbiAgICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVfID0gbmV3IGdvb2cuYXN5bmMuV29ya1F1ZXVlKCk7XG4gIH07XG5cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBzY2hlZHVsZXIuIE9ubHkgYXZhaWxhYmxlIGZvciB0ZXN0cyBpbiBkZWJ1ZyBtb2RlLlxuICAgKi9cbiAgZ29vZy5hc3luYy5ydW4ucmVzZXRTY2hlZHVsZXJGb3JUZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgZ29vZy5hc3luYy5ydW4uaW5pdGlhbGl6ZVJ1bm5lcl8oKTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIFJ1biBhbnkgcGVuZGluZyBnb29nLmFzeW5jLnJ1biB3b3JrIGl0ZW1zLiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBpbnRlbmRlZFxuICogZm9yIGdlbmVyYWwgdXNlLCBidXQgZm9yIHVzZSBieSBlbnRyeSBwb2ludCBoYW5kbGVycyB0byBydW4gaXRlbXMgYWhlYWQgb2ZcbiAqIGdvb2cuYXN5bmMubmV4dFRpY2suXG4gKi9cbmdvb2cuYXN5bmMucnVuLnByb2Nlc3NXb3JrUXVldWUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBOT1RFOiBhZGRpdGlvbmFsIHdvcmsgcXVldWUgaXRlbXMgbWF5IGJlIGFkZGVkIHdoaWxlIHByb2Nlc3NpbmcuXG4gIHZhciBpdGVtID0gbnVsbDtcbiAgd2hpbGUgKGl0ZW0gPSBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVfLnJlbW92ZSgpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGl0ZW0uZm4uY2FsbChpdGVtLnNjb3BlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBnb29nLmFzeW5jLnRocm93RXhjZXB0aW9uKGUpO1xuICAgIH1cbiAgICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVfLnJldHVyblVudXNlZChpdGVtKTtcbiAgfVxuXG4gIC8vIFRoZXJlIGFyZSBubyBtb3JlIHdvcmsgaXRlbXMsIGFsbG93IHByb2Nlc3NpbmcgdG8gYmUgc2NoZWR1bGVkIGFnYWluLlxuICBnb29nLmFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfID0gZmFsc2U7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFByb3ZpZGVzIGEgZnVuY3Rpb24gdG8gdGhyb3cgYW4gZXJyb3Igd2l0aG91dCBpbnRlcnJ1cHRpbmdcbiAqIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBjb250ZXh0LlxuICovXG5cbmdvb2cubW9kdWxlKCdnb29nLmFzeW5jLnRocm93RXhjZXB0aW9uJyk7XG5nb29nLm1vZHVsZS5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlKCk7XG5cbi8qKlxuICogVGhyb3cgYW4gaXRlbSB3aXRob3V0IGludGVycnVwdGluZyB0aGUgY3VycmVudCBleGVjdXRpb24gY29udGV4dC4gIEZvclxuICogZXhhbXBsZSwgaWYgcHJvY2Vzc2luZyBhIGdyb3VwIG9mIGl0ZW1zIGluIGEgbG9vcCwgc29tZXRpbWVzIGl0IGlzIHVzZWZ1bFxuICogdG8gcmVwb3J0IGFuIGVycm9yIHdoaWxlIHN0aWxsIGFsbG93aW5nIHRoZSByZXN0IG9mIHRoZSBiYXRjaCB0byBiZVxuICogcHJvY2Vzc2VkLlxuICogQHBhcmFtIHsqfSBleGNlcHRpb25cbiAqL1xuZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oZXhjZXB0aW9uKSB7XG4gIC8vIEVhY2ggdGhyb3cgbmVlZHMgdG8gYmUgaW4gaXRzIG93biBjb250ZXh0LlxuICBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0aHJvdyBleGNlcHRpb247XG4gIH0sIDApO1xufVxuZXhwb3J0cyA9IHRocm93RXhjZXB0aW9uO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgdGltZXIgY2xhc3MgdG8gd2hpY2ggb3RoZXIgY2xhc3NlcyBhbmQgb2JqZWN0cyBjYW4gbGlzdGVuIG9uLlxuICogVGhpcyBpcyBvbmx5IGFuIGFic3RyYWN0aW9uIGFib3ZlIGBzZXRJbnRlcnZhbGAuXG4gKlxuICogQHNlZSAuLi9kZW1vcy90aW1lcnMuaHRtbFxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5UaW1lcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuUHJvbWlzZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudFRhcmdldCcpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5UaGVuYWJsZScpO1xuXG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgaGFuZGxpbmcgdGltaW5nIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbnRlcnZhbCBOdW1iZXIgb2YgbXMgYmV0d2VlbiB0aWNrcyAoZGVmYXVsdDogMW1zKS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3RpbWVyT2JqZWN0ICBBbiBvYmplY3QgdGhhdCBoYXMgYHNldFRpbWVvdXRgLFxuICogICAgIGBzZXRJbnRlcnZhbGAsIGBjbGVhclRpbWVvdXRgIGFuZCBgY2xlYXJJbnRlcnZhbGBcbiAqICAgICAoZS5nLiwgYHdpbmRvd2ApLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9XG4gKi9cbmdvb2cuVGltZXIgPSBmdW5jdGlvbihvcHRfaW50ZXJ2YWwsIG9wdF90aW1lck9iamVjdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LmNhbGwodGhpcyk7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBtcyBiZXR3ZWVuIHRpY2tzXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmludGVydmFsXyA9IG9wdF9pbnRlcnZhbCB8fCAxO1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIGBzZXRUaW1lb3V0YCwgYHNldEludGVydmFsYCxcbiAgICogYGNsZWFyVGltZW91dGAgYW5kIGBjbGVhckludGVydmFsYC4gV2UgZGVmYXVsdCB0byB0aGUgd2luZG93XG4gICAqIG9iamVjdC4gQ2hhbmdpbmcgdGhpcyBvbiB7QGxpbmsgZ29vZy5UaW1lci5wcm90b3R5cGV9IGNoYW5nZXMgdGhlIG9iamVjdFxuICAgKiBmb3IgYWxsIHRpbWVyIGluc3RhbmNlcyB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdXIgZW52aXJvbm1lbnQgaGFzIHNvbWVcbiAgICogb3RoZXIgaW1wbGVtZW50YXRpb24gb2YgdGltZXJzIHRoYW4gdGhlIGB3aW5kb3dgIG9iamVjdC5cbiAgICogQHByaXZhdGUge3tzZXRUaW1lb3V0OiFGdW5jdGlvbiwgY2xlYXJUaW1lb3V0OiFGdW5jdGlvbn19XG4gICAqL1xuICB0aGlzLnRpbWVyT2JqZWN0XyA9IC8qKiBAdHlwZSB7e3NldFRpbWVvdXQsIGNsZWFyVGltZW91dH19ICovIChcbiAgICAgIG9wdF90aW1lck9iamVjdCB8fCBnb29nLlRpbWVyLmRlZmF1bHRUaW1lck9iamVjdCk7XG5cbiAgLyoqXG4gICAqIENhY2hlZCBgdGlja19gIGJvdW5kIHRvIHRoZSBvYmplY3QgZm9yIGxhdGVyIHVzZSBpbiB0aGUgdGltZXIuXG4gICAqIEBwcml2YXRlIHtGdW5jdGlvbn1cbiAgICogQGNvbnN0XG4gICAqL1xuICB0aGlzLmJvdW5kVGlja18gPSBnb29nLmJpbmQodGhpcy50aWNrXywgdGhpcyk7XG5cbiAgLyoqXG4gICAqIEZpcmVmb3ggYnJvd3NlciBvZnRlbiBmaXJlcyB0aGUgdGltZXIgZXZlbnQgc29vbmVyIChzb21ldGltZXMgTVVDSCBzb29uZXIpXG4gICAqIHRoYW4gdGhlIHJlcXVlc3RlZCB0aW1lb3V0LiBTbyB3ZSBjb21wYXJlIHRoZSB0aW1lIHRvIHdoZW4gdGhlIGV2ZW50IHdhc1xuICAgKiBsYXN0IGZpcmVkLCBhbmQgcmVzY2hlZHVsZSBpZiBhcHByb3ByaWF0ZS4gU2VlIGFsc29cbiAgICoge0BsaW5rIGdvb2cuVGltZXIuaW50ZXJ2YWxTY2FsZX0uXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxhc3RfID0gZ29vZy5ub3coKTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuVGltZXIsIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0KTtcblxuXG4vKipcbiAqIE1heGltdW0gdGltZW91dCB2YWx1ZS5cbiAqXG4gKiBUaW1lb3V0IHZhbHVlcyB0b28gYmlnIHRvIGZpdCBpbnRvIGEgc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIG1heSBjYXVzZSBvdmVyZmxvd1xuICogaW4gRkYsIFNhZmFyaSwgYW5kIENocm9tZSwgcmVzdWx0aW5nIGluIHRoZSB0aW1lb3V0IGJlaW5nIHNjaGVkdWxlZFxuICogaW1tZWRpYXRlbHkuIEl0IG1ha2VzIG1vcmUgc2Vuc2Ugc2ltcGx5IG5vdCB0byBzY2hlZHVsZSB0aGVzZSB0aW1lb3V0cywgc2luY2VcbiAqIDI0LjggZGF5cyBpcyBiZXlvbmQgYSByZWFzb25hYmxlIGV4cGVjdGF0aW9uIGZvciB0aGUgYnJvd3NlciB0byBzdGF5IG9wZW4uXG4gKlxuICogQHByaXZhdGUge251bWJlcn1cbiAqIEBjb25zdFxuICovXG5nb29nLlRpbWVyLk1BWF9USU1FT1VUXyA9IDIxNDc0ODM2NDc7XG5cblxuLyoqXG4gKiBBIHRpbWVyIElEIHRoYXQgY2Fubm90IGJlIHJldHVybmVkIGJ5IGFueSBrbm93biBpbXBsZW1lbnRhdGlvbiBvZlxuICogYHdpbmRvdy5zZXRUaW1lb3V0YC4gUGFzc2luZyB0aGlzIHZhbHVlIHRvIGB3aW5kb3cuY2xlYXJUaW1lb3V0YFxuICogc2hvdWxkIHRoZXJlZm9yZSBiZSBhIG5vLW9wLlxuICpcbiAqIEBwcml2YXRlIHtudW1iZXJ9XG4gKiBAY29uc3RcbiAqL1xuZ29vZy5UaW1lci5JTlZBTElEX1RJTUVPVVRfSURfID0gLTE7XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoaXMgdGltZXIgaXMgZW5hYmxlZFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLmVuYWJsZWQgPSBmYWxzZTtcblxuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgYHNldFRpbWVvdXRgLCBgc2V0SW50ZXJ2YWxgLFxuICogYGNsZWFyVGltZW91dGAgYW5kIGBjbGVhckludGVydmFsYC4gV2UgZGVmYXVsdCB0byB0aGUgZ2xvYmFsXG4gKiBvYmplY3QuIENoYW5naW5nIGBnb29nLlRpbWVyLmRlZmF1bHRUaW1lck9iamVjdGAgY2hhbmdlcyB0aGUgb2JqZWN0IGZvclxuICogYWxsIHRpbWVyIGluc3RhbmNlcyB3aGljaCBjYW4gYmUgdXNlZnVsIGlmIHlvdXIgZW52aXJvbm1lbnQgaGFzIHNvbWUgb3RoZXJcbiAqIGltcGxlbWVudGF0aW9uIG9mIHRpbWVycyB5b3UnZCBsaWtlIHRvIHVzZS5cbiAqIEB0eXBlIHt7c2V0VGltZW91dCwgY2xlYXJUaW1lb3V0fX1cbiAqL1xuZ29vZy5UaW1lci5kZWZhdWx0VGltZXJPYmplY3QgPSBnb29nLmdsb2JhbDtcblxuXG4vKipcbiAqIFZhcmlhYmxlIHRoYXQgY29udHJvbHMgdGhlIHRpbWVyIGVycm9yIGNvcnJlY3Rpb24uIElmIHRoZSB0aW1lciBpcyBjYWxsZWRcbiAqIGJlZm9yZSB0aGUgcmVxdWVzdGVkIGludGVydmFsIHRpbWVzIGBpbnRlcnZhbFNjYWxlYCwgd2hpY2ggb2Z0ZW5cbiAqIGhhcHBlbnMgb24gTW96aWxsYSwgdGhlIHRpbWVyIGlzIHJlc2NoZWR1bGVkLlxuICogQHNlZSB7QGxpbmsgI2xhc3RffVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZ29vZy5UaW1lci5pbnRlcnZhbFNjYWxlID0gMC44O1xuXG5cbi8qKlxuICogVmFyaWFibGUgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBvZiBgc2V0SW50ZXJ2YWxgLlxuICogQHByaXZhdGUgez9udW1iZXJ9XG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLnRpbWVyXyA9IG51bGw7XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBpbnRlcnZhbCBvZiB0aGUgdGltZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGludGVydmFsIE51bWJlciBvZiBtcyBiZXR3ZWVuIHRpY2tzLlxuICovXG5nb29nLlRpbWVyLnByb3RvdHlwZS5nZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmludGVydmFsXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBpbnRlcnZhbCBvZiB0aGUgdGltZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgTnVtYmVyIG9mIG1zIGJldHdlZW4gdGlja3MuXG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLnNldEludGVydmFsID0gZnVuY3Rpb24oaW50ZXJ2YWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmludGVydmFsXyA9IGludGVydmFsO1xuICBpZiAodGhpcy50aW1lcl8gJiYgdGhpcy5lbmFibGVkKSB7XG4gICAgLy8gU3RvcCBhbmQgdGhlbiBzdGFydCB0aGUgdGltZXIgdG8gcmVzZXQgdGhlIGludGVydmFsLlxuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfSBlbHNlIGlmICh0aGlzLnRpbWVyXykge1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHRoZSBgc2V0VGltZW91dGAgdXNlZCBieSB0aGUgdGltZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlRpbWVyLnByb3RvdHlwZS50aWNrXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLmVuYWJsZWQpIHtcbiAgICB2YXIgZWxhcHNlZCA9IGdvb2cubm93KCkgLSB0aGlzLmxhc3RfO1xuICAgIGlmIChlbGFwc2VkID4gMCAmJiBlbGFwc2VkIDwgdGhpcy5pbnRlcnZhbF8gKiBnb29nLlRpbWVyLmludGVydmFsU2NhbGUpIHtcbiAgICAgIHRoaXMudGltZXJfID0gdGhpcy50aW1lck9iamVjdF8uc2V0VGltZW91dChcbiAgICAgICAgICB0aGlzLmJvdW5kVGlja18sIHRoaXMuaW50ZXJ2YWxfIC0gZWxhcHNlZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJldmVudHMgc2V0SW50ZXJ2YWwgZnJvbSByZWdpc3RlcmluZyBhIGR1cGxpY2F0ZSB0aW1lb3V0IHdoZW4gY2FsbGVkXG4gICAgLy8gaW4gdGhlIHRpbWVyIGV2ZW50IGhhbmRsZXIuXG4gICAgaWYgKHRoaXMudGltZXJfKSB7XG4gICAgICB0aGlzLnRpbWVyT2JqZWN0Xy5jbGVhclRpbWVvdXQodGhpcy50aW1lcl8pO1xuICAgICAgdGhpcy50aW1lcl8gPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hUaWNrKCk7XG4gICAgLy8gVGhlIHRpbWVyIGNvdWxkIGJlIHN0b3BwZWQgaW4gdGhlIHRpbWVyIGV2ZW50IGhhbmRsZXIuXG4gICAgaWYgKHRoaXMuZW5hYmxlZCkge1xuICAgICAgLy8gU3RvcCBhbmQgc3RhcnQgdG8gZW5zdXJlIHRoZXJlIGlzIGFsd2F5cyBvbmx5IG9uZSB0aW1lb3V0IGV2ZW4gaWZcbiAgICAgIC8vIHN0YXJ0IGlzIGNhbGxlZCBpbiB0aGUgdGltZXIgZXZlbnQgaGFuZGxlci5cbiAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgdGhlIFRJQ0sgZXZlbnQuIFRoaXMgaXMgaXRzIG93biBtZXRob2Qgc28gc3ViY2xhc3NlcyBjYW4gb3ZlcnJpZGUuXG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLmRpc3BhdGNoVGljayA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudChnb29nLlRpbWVyLlRJQ0spO1xufTtcblxuXG4vKipcbiAqIFN0YXJ0cyB0aGUgdGltZXIuXG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyBpbnRlcnZhbCBhbHJlYWR5IHJlZ2lzdGVyZWQsIHN0YXJ0IGl0IG5vd1xuICBpZiAoIXRoaXMudGltZXJfKSB7XG4gICAgLy8gSU1QT1JUQU5UIVxuICAgIC8vIHdpbmRvdy5zZXRJbnRlcnZhbCBpbiBGaXJlRm94IGhhcyBhIGJ1ZyAtIGl0IGZpcmVzIGJhc2VkIG9uXG4gICAgLy8gYWJzb2x1dGUgdGltZSwgcmF0aGVyIHRoYW4gb24gcmVsYXRpdmUgdGltZS4gV2hhdCB0aGlzIG1lYW5zXG4gICAgLy8gaXMgdGhhdCBpZiBhIGNvbXB1dGVyIGlzIHNsZWVwaW5nL2hpYmVybmF0aW5nIGZvciAyNCBob3Vyc1xuICAgIC8vIGFuZCB0aGUgdGltZXIgaW50ZXJ2YWwgd2FzIGNvbmZpZ3VyZWQgdG8gZmlyZSBldmVyeSAxMDAwbXMsXG4gICAgLy8gdGhlbiBhZnRlciB0aGUgUEMgd2FrZXMgdXAgdGhlIHRpbWVyIHdpbGwgZmlyZSwgaW4gcmFwaWRcbiAgICAvLyBzdWNjZXNzaW9uLCAzNjAwKjI0IHRpbWVzLlxuICAgIC8vIFRoaXMgYnVnIGlzIGRlc2NyaWJlZCBoZXJlIGFuZCBpcyBhbHJlYWR5IGZpeGVkLCBidXQgaXQgd2lsbFxuICAgIC8vIHRha2UgdGltZSB0byBwcm9wYWdhdGUsIHNvIGZvciBub3cgSSBhbSBzd2l0Y2hpbmcgdGhpcyBvdmVyXG4gICAgLy8gdG8gc2V0VGltZW91dCBsb2dpYy5cbiAgICAvLyAgICAgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Mzc2NjQzXG4gICAgLy9cbiAgICB0aGlzLnRpbWVyXyA9IHRoaXMudGltZXJPYmplY3RfLnNldFRpbWVvdXQodGhpcy5ib3VuZFRpY2tfLCB0aGlzLmludGVydmFsXyk7XG4gICAgdGhpcy5sYXN0XyA9IGdvb2cubm93KCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdG9wcyB0aGUgdGltZXIuXG4gKi9cbmdvb2cuVGltZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgaWYgKHRoaXMudGltZXJfKSB7XG4gICAgdGhpcy50aW1lck9iamVjdF8uY2xlYXJUaW1lb3V0KHRoaXMudGltZXJfKTtcbiAgICB0aGlzLnRpbWVyXyA9IG51bGw7XG4gIH1cbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5UaW1lci5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5UaW1lci5zdXBlckNsYXNzXy5kaXNwb3NlSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgdGhpcy5zdG9wKCk7XG4gIGRlbGV0ZSB0aGlzLnRpbWVyT2JqZWN0Xztcbn07XG5cblxuLyoqXG4gKiBDb25zdGFudCBmb3IgdGhlIHRpbWVyJ3MgZXZlbnQgdHlwZS5cbiAqIEBjb25zdFxuICovXG5nb29nLlRpbWVyLlRJQ0sgPSAndGljayc7XG5cblxuLyoqXG4gKiBDYWxscyB0aGUgZ2l2ZW4gZnVuY3Rpb24gb25jZSwgYWZ0ZXIgdGhlIG9wdGlvbmFsIHBhdXNlLlxuICogPHA+XG4gKiBUaGUgZnVuY3Rpb24gaXMgYWx3YXlzIGNhbGxlZCBhc3luY2hyb25vdXNseSwgZXZlbiBpZiB0aGUgZGVsYXkgaXMgMC4gVGhpc1xuICogaXMgYSBjb21tb24gdHJpY2sgdG8gc2NoZWR1bGUgYSBmdW5jdGlvbiB0byBydW4gYWZ0ZXIgYSBiYXRjaCBvZiBicm93c2VyXG4gKiBldmVudCBwcm9jZXNzaW5nLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSl8e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKCl9fG51bGx9IGxpc3RlbmVyIEZ1bmN0aW9uXG4gKiAgICAgb3Igb2JqZWN0IHRoYXQgaGFzIGEgaGFuZGxlRXZlbnQgbWV0aG9kLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfZGVsYXkgTWlsbGlzZWNvbmRzIHRvIHdhaXQ7IGRlZmF1bHQgaXMgMC5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfaGFuZGxlciBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgaGFuZGxlIHRvIHRoZSB0aW1lciBJRC5cbiAqIEB0ZW1wbGF0ZSBTQ09QRVxuICovXG5nb29nLlRpbWVyLmNhbGxPbmNlID0gZnVuY3Rpb24obGlzdGVuZXIsIG9wdF9kZWxheSwgb3B0X2hhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKG9wdF9oYW5kbGVyKSB7XG4gICAgICBsaXN0ZW5lciA9IGdvb2cuYmluZChsaXN0ZW5lciwgb3B0X2hhbmRsZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiB0eXBlb2YgbGlzdGVuZXIuaGFuZGxlRXZlbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHVzaW5nIHR5cGVvZiB0byBwcmV2ZW50IHN0cmljdCBqcyB3YXJuaW5nXG4gICAgbGlzdGVuZXIgPSBnb29nLmJpbmQobGlzdGVuZXIuaGFuZGxlRXZlbnQsIGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdGVuZXIgYXJndW1lbnQnKTtcbiAgfVxuXG4gIGlmIChOdW1iZXIob3B0X2RlbGF5KSA+IGdvb2cuVGltZXIuTUFYX1RJTUVPVVRfKSB7XG4gICAgLy8gVGltZW91dHMgZ3JlYXRlciB0aGFuIE1BWF9JTlQgcmV0dXJuIGltbWVkaWF0ZWx5IGR1ZSB0byBpbnRlZ2VyXG4gICAgLy8gb3ZlcmZsb3cgaW4gbWFueSBicm93c2Vycy4gIFNpbmNlIE1BWF9JTlQgaXMgMjQuOCBkYXlzLCBqdXN0IGRvbid0XG4gICAgLy8gc2NoZWR1bGUgYW55dGhpbmcgYXQgYWxsLlxuICAgIHJldHVybiBnb29nLlRpbWVyLklOVkFMSURfVElNRU9VVF9JRF87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdvb2cuVGltZXIuZGVmYXVsdFRpbWVyT2JqZWN0LnNldFRpbWVvdXQobGlzdGVuZXIsIG9wdF9kZWxheSB8fCAwKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENsZWFycyBhIHRpbWVvdXQgaW5pdGlhdGVkIGJ5IHtAbGluayAjY2FsbE9uY2V9LlxuICogQHBhcmFtIHs/bnVtYmVyfSB0aW1lcklkIEEgdGltZXIgSUQuXG4gKi9cbmdvb2cuVGltZXIuY2xlYXIgPSBmdW5jdGlvbih0aW1lcklkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5UaW1lci5kZWZhdWx0VGltZXJPYmplY3QuY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBNaWxsaXNlY29uZHMgdG8gd2FpdC5cbiAqIEBwYXJhbSB7KFJFU1VMVHxnb29nLlRoZW5hYmxlPFJFU1VMVD58VGhlbmFibGUpPX0gb3B0X3Jlc3VsdCBUaGUgdmFsdWVcbiAqICAgICB3aXRoIHdoaWNoIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5Qcm9taXNlPFJFU1VMVD59IEEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXJcbiAqICAgICB0aGUgc3BlY2lmaWVkIGRlbGF5LCB1bmxlc3MgaXQgaXMgY2FuY2VsZWQgZmlyc3QuXG4gKiBAdGVtcGxhdGUgUkVTVUxUXG4gKi9cbmdvb2cuVGltZXIucHJvbWlzZSA9IGZ1bmN0aW9uKGRlbGF5LCBvcHRfcmVzdWx0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHRpbWVyS2V5ID0gbnVsbDtcbiAgcmV0dXJuIG5ldyBnb29nXG4gICAgICAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICB0aW1lcktleSA9IGdvb2cuVGltZXIuY2FsbE9uY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICAgIHJlc29sdmUob3B0X3Jlc3VsdCk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgaWYgKHRpbWVyS2V5ID09IGdvb2cuVGltZXIuSU5WQUxJRF9USU1FT1VUX0lEXykge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzY2hlZHVsZSB0aW1lci4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbkNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHRpbWVyLiBUaGUgbW9zdCBsaWtlbHkgcmVhc29uIGlzIFwiY2FuY2VsXCIgc2lnbmFsLlxuICAgICAgICBnb29nLlRpbWVyLmNsZWFyKHRpbWVyS2V5KTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGVmaW5pdGlvbiBvZiB0aGUgZ29vZy5hc3luYy5UaHJvdHRsZSBjbGFzcy5cbiAqXG4gKiBAc2VlIC4uL2RlbW9zL3RpbWVycy5odG1sXG4gKi9cblxuZ29vZy5tb2R1bGUoJ2dvb2cuYXN5bmMuVGhyb3R0bGUnKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuY29uc3QgRGlzcG9zYWJsZSA9IGdvb2cucmVxdWlyZSgnZ29vZy5EaXNwb3NhYmxlJyk7XG5jb25zdCBUaW1lciA9IGdvb2cucmVxdWlyZSgnZ29vZy5UaW1lcicpO1xuXG5cbi8qKlxuICogVGhyb3R0bGUgd2lsbCBwZXJmb3JtIGFuIGFjdGlvbiB0aGF0IGlzIHBhc3NlZCBpbiBubyBtb3JlIHRoYW4gb25jZVxuICogcGVyIGludGVydmFsIChzcGVjaWZpZWQgaW4gbWlsbGlzZWNvbmRzKS4gSWYgaXQgZ2V0cyBtdWx0aXBsZSBzaWduYWxzXG4gKiB0byBwZXJmb3JtIHRoZSBhY3Rpb24gd2hpbGUgaXQgaXMgd2FpdGluZywgaXQgd2lsbCBvbmx5IHBlcmZvcm0gdGhlIGFjdGlvblxuICogb25jZSBhdCB0aGUgZW5kIG9mIHRoZSBpbnRlcnZhbC5cbiAqIEBmaW5hbFxuICogQHRlbXBsYXRlIFRcbiAqL1xuY2xhc3MgVGhyb3R0bGUgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczogVCwgLi4uPyl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGxiYWNrIHdoZW4gdGhlXG4gICAqICAgICBhY3Rpb24gaXMgdHJpZ2dlcmVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgSW50ZXJ2YWwgb3ZlciB3aGljaCB0byB0aHJvdHRsZS4gVGhlIGxpc3RlbmVyIGNhblxuICAgKiAgICAgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgaW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7VD19IGhhbmRsZXIgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IobGlzdGVuZXIsIGludGVydmFsLCBoYW5kbGVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0byBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbih0aGlzOiBULCAuLi4/KX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubGlzdGVuZXJfID0gaGFuZGxlciAhPSBudWxsID8gbGlzdGVuZXIuYmluZChoYW5kbGVyKSA6IGxpc3RlbmVyO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJ2YWwgZm9yIHRoZSB0aHJvdHRsZSB0aW1lXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaW50ZXJ2YWxfID0gaW50ZXJ2YWw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCBhcmd1bWVudHMgcGFzc2VkIGludG8gYGZpcmVgLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHBlbmRpbmdcbiAgICAgKiBjYWxsLlxuICAgICAqIEBwcml2YXRlIHs/SUFycmF5TGlrZX1cbiAgICAgKi9cbiAgICB0aGlzLmFyZ3NfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBhY3Rpb24gaXMgcGVuZGluZyBhbmQgbmVlZHMgdG8gYmUgZmlyZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnNob3VsZEZpcmVfID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIGNvdW50IG9mIG5lc3RlZCBwYXVzZXMgY3VycmVudGx5IGluIGVmZmVjdCBvbiB0aGUgdGhyb3R0bGUuXG4gICAgICogV2hlbiB0aGlzIGNvdW50IGlzIG5vdCB6ZXJvLCBmaXJlZCBhY3Rpb25zIHdpbGwgYmUgcG9zdHBvbmVkIHVudGlsIHRoZVxuICAgICAqIHRocm90dGxlIGlzIHJlc3VtZWQgZW5vdWdoIHRpbWVzIHRvIGRyb3AgdGhlIHBhdXNlIGNvdW50IHRvIHplcm8uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucGF1c2VDb3VudF8gPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGltZXIgZm9yIHNjaGVkdWxpbmcgdGhlIG5leHQgY2FsbGJhY2tcbiAgICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudGltZXJfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZmllcyB0aGUgdGhyb3R0bGUgdGhhdCB0aGUgYWN0aW9uIGhhcyBoYXBwZW5lZC4gSXQgd2lsbCB0aHJvdHRsZVxuICAgKiB0aGUgY2FsbCBzbyB0aGF0IHRoZSBjYWxsYmFjayBpcyBub3QgY2FsbGVkIHRvbyBvZnRlbiBhY2NvcmRpbmcgdG8gdGhlXG4gICAqIGludGVydmFsIHBhcmFtZXRlciBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLCBwYXNzaW5nIHRoZSBhcmd1bWVudHNcbiAgICogZnJvbSB0aGUgbGFzdCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24gaW50byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gey4uLj99IHZhcl9hcmdzIEFyZ3VtZW50cyB0byBwYXNzIG9uIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmaXJlKHZhcl9hcmdzKSB7XG4gICAgdGhpcy5hcmdzXyA9IGFyZ3VtZW50cztcbiAgICBpZiAoIXRoaXMudGltZXJfICYmICF0aGlzLnBhdXNlQ291bnRfKSB7XG4gICAgICB0aGlzLmRvQWN0aW9uXygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3VsZEZpcmVfID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbnkgcGVuZGluZyBhY3Rpb24gY2FsbGJhY2suIFRoZSB0aHJvdHRsZSBjYW4gYmUgcmVzdGFydGVkIGJ5XG4gICAqIGNhbGxpbmcge0BsaW5rICNmaXJlfS5cbiAgICovXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMudGltZXJfKSB7XG4gICAgICBUaW1lci5jbGVhcih0aGlzLnRpbWVyXyk7XG4gICAgICB0aGlzLnRpbWVyXyA9IG51bGw7XG4gICAgICB0aGlzLnNob3VsZEZpcmVfID0gZmFsc2U7XG4gICAgICB0aGlzLmFyZ3NfID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSB0aHJvdHRsZS4gIEFsbCBwZW5kaW5nIGFuZCBmdXR1cmUgYWN0aW9uIGNhbGxiYWNrcyB3aWxsIGJlXG4gICAqIGRlbGF5ZWQgdW50aWwgdGhlIHRocm90dGxlIGlzIHJlc3VtZWQuICBQYXVzZXMgY2FuIGJlIG5lc3RlZC5cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGF1c2VDb3VudF8rKztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN1bWVzIHRoZSB0aHJvdHRsZS4gIElmIGRvaW5nIHNvIGRyb3BzIHRoZSBwYXVzaW5nIGNvdW50IHRvIHplcm8sXG4gICAqIHBlbmRpbmcgYWN0aW9uIGNhbGxiYWNrcyB3aWxsIGJlIGV4ZWN1dGVkIGFzIHNvb24gYXMgcG9zc2libGUsIGJ1dFxuICAgKiBzdGlsbCBubyBzb29uZXIgdGhhbiBhbiBpbnRlcnZhbCdzIGRlbGF5IGFmdGVyIHRoZSBwcmV2aW91cyBjYWxsLlxuICAgKiBGdXR1cmUgYWN0aW9uIGNhbGxiYWNrcyB3aWxsIGJlIGV4ZWN1dGVkIGFzIG5vcm1hbC5cbiAgICovXG4gIHJlc3VtZSgpIHtcbiAgICB0aGlzLnBhdXNlQ291bnRfLS07XG4gICAgaWYgKCF0aGlzLnBhdXNlQ291bnRfICYmIHRoaXMuc2hvdWxkRmlyZV8gJiYgIXRoaXMudGltZXJfKSB7XG4gICAgICB0aGlzLnNob3VsZEZpcmVfID0gZmFsc2U7XG4gICAgICB0aGlzLmRvQWN0aW9uXygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZGlzcG9zZUludGVybmFsKCkge1xuICAgIHN1cGVyLmRpc3Bvc2VJbnRlcm5hbCgpO1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIHRoZSB0aW1lciB0byBmaXJlIHRoZSB0aHJvdHRsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25UaW1lcl8oKSB7XG4gICAgdGhpcy50aW1lcl8gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkRmlyZV8gJiYgIXRoaXMucGF1c2VDb3VudF8pIHtcbiAgICAgIHRoaXMuc2hvdWxkRmlyZV8gPSBmYWxzZTtcbiAgICAgIHRoaXMuZG9BY3Rpb25fKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBjYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZG9BY3Rpb25fKCkge1xuICAgIHRoaXMudGltZXJfID0gVGltZXIuY2FsbE9uY2UoKCkgPT4gdGhpcy5vblRpbWVyXygpLCB0aGlzLmludGVydmFsXyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuYXJnc187XG4gICAgLy8gcmVsZWFzZSBtZW1vcnkgZmlyc3Qgc28gaXQgYWx3YXlzIGhhcHBlbnMgZXZlbiBpZiBsaXN0ZW5lciB0aHJvd3NcbiAgICB0aGlzLmFyZ3NfID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVyXy5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxufVxuXG5leHBvcnRzID0gVGhyb3R0bGU7XG4iLG51bGwsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDbGFzcyB0byBjcmVhdGUgb2JqZWN0cyB3aGljaCB3YW50IHRvIGhhbmRsZSBtdWx0aXBsZSBldmVudHNcbiAqIGFuZCBoYXZlIHRoZWlyIGxpc3RlbmVycyBlYXNpbHkgY2xlYW5lZCB1cCB2aWEgYSBkaXNwb3NlIG1ldGhvZC5cbiAqXG4gKiBFeGFtcGxlOlxuICogPHByZT5cbiAqIGZ1bmN0aW9uIFNvbWV0aGluZygpIHtcbiAqICAgU29tZXRoaW5nLmJhc2UodGhpcyk7XG4gKlxuICogICAuLi4gc2V0IHVwIG9iamVjdCAuLi5cbiAqXG4gKiAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcbiAqICAgdGhpcy5saXN0ZW4odGhpcy5zdGFyRWwsIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5DTElDSywgdGhpcy5oYW5kbGVTdGFyKTtcbiAqICAgdGhpcy5saXN0ZW4odGhpcy5oZWFkZXJFbCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLkNMSUNLLCB0aGlzLmV4cGFuZCk7XG4gKiAgIHRoaXMubGlzdGVuKHRoaXMuY29sbGFwc2VFbCwgZ29vZy5ldmVudHMuRXZlbnRUeXBlLkNMSUNLLCB0aGlzLmNvbGxhcHNlKTtcbiAqICAgdGhpcy5saXN0ZW4odGhpcy5pbmZvRWwsIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRU9WRVIsIHRoaXMuc2hvd0hvdmVyKTtcbiAqICAgdGhpcy5saXN0ZW4odGhpcy5pbmZvRWwsIGdvb2cuZXZlbnRzLkV2ZW50VHlwZS5NT1VTRU9VVCwgdGhpcy5oaWRlSG92ZXIpO1xuICogfVxuICogZ29vZy5pbmhlcml0cyhTb21ldGhpbmcsIGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcik7XG4gKlxuICogU29tZXRoaW5nLnByb3RvdHlwZS5kaXNwb3NlSW50ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAqICAgU29tZXRoaW5nLmJhc2UodGhpcywgJ2Rpc3Bvc2VJbnRlcm5hbCcpO1xuICogICBnb29nLmRvbS5yZW1vdmVOb2RlKHRoaXMuY29udGFpbmVyKTtcbiAqIH07XG4gKlxuICpcbiAqIC8vIFRoZW4gZWxzZXdoZXJlOlxuICpcbiAqIHZhciBhY3RpdmVTb21ldGhpbmcgPSBudWxsO1xuICogZnVuY3Rpb24gb3BlblNvbWV0aGluZygpIHtcbiAqICAgYWN0aXZlU29tZXRoaW5nID0gbmV3IFNvbWV0aGluZygpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGNsb3NlU29tZXRoaW5nKCkge1xuICogICBpZiAoYWN0aXZlU29tZXRoaW5nKSB7XG4gKiAgICAgYWN0aXZlU29tZXRoaW5nLmRpc3Bvc2UoKTsgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnNcbiAqICAgICBhY3RpdmVTb21ldGhpbmcgPSBudWxsO1xuICogICB9XG4gKiB9XG4gKiA8L3ByZT5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcicpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuRGlzcG9zYWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5ldmVudHMuRXZlbnQnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkV2ZW50SWQnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Jyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudFdyYXBwZXInKTtcblxuXG5cbi8qKlxuICogU3VwZXIgY2xhc3MgZm9yIG9iamVjdHMgdGhhdCB3YW50IHRvIGVhc2lseSBtYW5hZ2UgYSBudW1iZXIgb2YgZXZlbnRcbiAqIGxpc3RlbmVycy4gIEl0IGFsbG93cyBhIHNob3J0IGN1dCB0byBsaXN0ZW4gYW5kIGFsc28gcHJvdmlkZXMgYSBxdWljayB3YXlcbiAqIHRvIHJlbW92ZSBhbGwgZXZlbnRzIGxpc3RlbmVycyBiZWxvbmdpbmcgdG8gdGhpcyBvYmplY3QuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X3Njb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lcnMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLkRpc3Bvc2FibGV9XG4gKiBAdGVtcGxhdGUgU0NPUEVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24ob3B0X3Njb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5EaXNwb3NhYmxlLmNhbGwodGhpcyk7XG4gIC8vIFRPRE8obWtuaWNoZWwpOiBSZW5hbWUgdGhpcyB0byB0aGlzLnNjb3BlXyBhbmQgZml4IHRoZSBjbGFzc2VzIGluIGdvb2dsZTNcbiAgLy8gdGhhdCBhY2Nlc3MgdGhpcyBwcml2YXRlIHZhcmlhYmxlLiA6KFxuICB0aGlzLmhhbmRsZXJfID0gb3B0X3Njb3BlO1xuXG4gIC8qKlxuICAgKiBLZXlzIGZvciBldmVudHMgdGhhdCBhcmUgYmVpbmcgbGlzdGVuZWQgdG8uXG4gICAqIEB0eXBlIHshT2JqZWN0PCFnb29nLmV2ZW50cy5LZXk+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5rZXlzXyA9IHt9O1xufTtcbmdvb2cuaW5oZXJpdHMoZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLCBnb29nLkRpc3Bvc2FibGUpO1xuXG5cbi8qKlxuICogVXRpbGl0eSBhcnJheSB1c2VkIHRvIHVuaWZ5IHRoZSBjYXNlcyBvZiBsaXN0ZW5pbmcgZm9yIGFuIGFycmF5IG9mIHR5cGVzXG4gKiBhbmQgbGlzdGVuaW5nIGZvciBhIHNpbmdsZSBldmVudCwgd2l0aG91dCB1c2luZyByZWN1cnNpb24gb3IgYWxsb2NhdGluZ1xuICogYW4gYXJyYXkgZWFjaCB0aW1lLlxuICogQHR5cGUgeyFBcnJheTxzdHJpbmc+fVxuICogQGNvbnN0XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIudHlwZUFycmF5XyA9IFtdO1xuXG5cbi8qKlxuICogTGlzdGVuIHRvIGFuIGV2ZW50IG9uIGEgTGlzdGVuYWJsZS4gIElmIHRoZSBmdW5jdGlvbiBpcyBvbWl0dGVkIHRoZW4gdGhlXG4gKiBFdmVudEhhbmRsZXIncyBoYW5kbGVFdmVudCBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZX0gc3JjIEV2ZW50IHNvdXJjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58XG4gKiAgICAgIWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fCFBcnJheTwhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj4+fVxuICogICAgIHR5cGUgRXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yIG9yIGFycmF5IG9mIGV2ZW50IHR5cGVzLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCBFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbD19XG4gKiAgICAgb3B0X2ZuIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHVzZWQgYXMgdGhlIGxpc3RlbmVyIG9yIGFuIG9iamVjdFxuICogICAgIHdpdGggaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyhib29sZWFufCFBZGRFdmVudExpc3RlbmVyT3B0aW9ucyk9fSBvcHRfb3B0aW9uc1xuICogQHJldHVybiB7VEhJU30gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvciBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0aGlzIHtUSElTfVxuICogQHRlbXBsYXRlIEVWRU5UT0JKLCBUSElTXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24oXG4gICAgc3JjLCB0eXBlLCBvcHRfZm4sIG9wdF9vcHRpb25zKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9ICovICh0aGlzKTtcbiAgcmV0dXJuIHNlbGYubGlzdGVuXyhzcmMsIHR5cGUsIG9wdF9mbiwgb3B0X29wdGlvbnMpO1xufTtcblxuXG4vKipcbiAqIExpc3RlbiB0byBhbiBldmVudCBvbiBhIExpc3RlbmFibGUuICBJZiB0aGUgZnVuY3Rpb24gaXMgb21pdHRlZCB0aGVuIHRoZVxuICogRXZlbnRIYW5kbGVyJ3MgaGFuZGxlRXZlbnQgbWV0aG9kIHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGV9IHNyYyBFdmVudCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciBvciBhcnJheSBvZiBldmVudCB0eXBlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULCBFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24odGhpczpULCA/KTo/fXxcbiAqICAgICBudWxsfHVuZGVmaW5lZH0gZm4gT3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyB0aGVcbiAqICAgICBsaXN0ZW5lciBvciBhbiBvYmplY3Qgd2l0aCBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbnwhQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN8dW5kZWZpbmVkfSBvcHRpb25zXG4gKiBAcGFyYW0ge1R9IHNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge1RISVN9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGhpcyB7VEhJU31cbiAqIEB0ZW1wbGF0ZSBULCBFVkVOVE9CSiwgVEhJU1xuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLmxpc3RlbldpdGhTY29wZSA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgZm4sIG9wdGlvbnMsIHNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9ICovICh0aGlzKTtcbiAgLy8gVE9ETyhta25pY2hlbCk6IERlcHJlY2F0ZSB0aGlzIGZ1bmN0aW9uLlxuICByZXR1cm4gc2VsZi5saXN0ZW5fKHNyYywgdHlwZSwgZm4sIG9wdGlvbnMsIHNjb3BlKTtcbn07XG5cblxuLyoqXG4gKiBMaXN0ZW4gdG8gYW4gZXZlbnQgb24gYSBMaXN0ZW5hYmxlLiAgSWYgdGhlIGZ1bmN0aW9uIGlzIG9taXR0ZWQgdGhlbiB0aGVcbiAqIEV2ZW50SGFuZGxlcidzIGhhbmRsZUV2ZW50IG1ldGhvZCB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVUeXBlfSBzcmMgRXZlbnQgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxcbiAqICAgICAhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj58IUFycmF5PCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj59XG4gKiAgICAgdHlwZSBFdmVudCB0eXBlIHRvIGxpc3RlbiBmb3Igb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVWRU5UT0JKKTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsPX0gb3B0X2ZuXG4gKiAgICAgT3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyB0aGUgbGlzdGVuZXIgb3IgYW4gb2JqZWN0IHdpdGhcbiAqICAgICBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7KGJvb2xlYW58IUFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKT19IG9wdF9vcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHtUSElTfSBUaGlzIG9iamVjdCwgYWxsb3dpbmcgZm9yIGNoYWluaW5nIG9mIGNhbGxzLlxuICogQHRoaXMge1RISVN9XG4gKiBAdGVtcGxhdGUgRVZFTlRPQkosIFRISVNcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuXyA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfb3B0aW9ucywgb3B0X3Njb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9ICovICh0aGlzKTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci50eXBlQXJyYXlfWzBdID0gdHlwZS50b1N0cmluZygpO1xuICAgIH1cbiAgICB0eXBlID0gZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnR5cGVBcnJheV87XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpc3RlbmVyT2JqID0gZ29vZy5ldmVudHMubGlzdGVuKFxuICAgICAgICBzcmMsIHR5cGVbaV0sIG9wdF9mbiB8fCBzZWxmLmhhbmRsZUV2ZW50LCBvcHRfb3B0aW9ucyB8fCBmYWxzZSxcbiAgICAgICAgb3B0X3Njb3BlIHx8IHNlbGYuaGFuZGxlcl8gfHwgc2VsZik7XG5cbiAgICBpZiAoIWxpc3RlbmVyT2JqKSB7XG4gICAgICAvLyBXaGVuIGdvb2cuZXZlbnRzLmxpc3RlbiBydW4gb24gT0ZGX0FORF9GQUlMIG9yIE9GRl9BTkRfU0lMRU5UXG4gICAgICAvLyAoZ29vZy5ldmVudHMuQ2FwdHVyZVNpbXVsYXRpb25Nb2RlKSBpbiBJRTgtLCBpdCB3aWxsIHJldHVybiBudWxsXG4gICAgICAvLyB2YWx1ZS5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSBsaXN0ZW5lck9iai5rZXk7XG4gICAgc2VsZi5rZXlzX1trZXldID0gbGlzdGVuZXJPYmo7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn07XG5cblxuLyoqXG4gKiBMaXN0ZW4gdG8gYW4gZXZlbnQgb24gYSBMaXN0ZW5hYmxlLiAgSWYgdGhlIGZ1bmN0aW9uIGlzIG9taXR0ZWQsIHRoZW4gdGhlXG4gKiBFdmVudEhhbmRsZXIncyBoYW5kbGVFdmVudCBtZXRob2Qgd2lsbCBiZSB1c2VkLiBBZnRlciB0aGUgZXZlbnQgaGFzIGZpcmVkIHRoZVxuICogZXZlbnQgbGlzdGVuZXIgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0YXJnZXQuIElmIGFuIGFycmF5IG9mIGV2ZW50IHR5cGVzIGlzXG4gKiBwcm92aWRlZCwgZWFjaCBldmVudCB0eXBlIHdpbGwgYmUgbGlzdGVuZWQgdG8gb25jZS5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuTGlzdGVuYWJsZVR5cGV9IHNyYyBFdmVudCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fFxuICogICAgICFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPnwhQXJyYXk8IWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+Pn1cbiAqICAgICB0eXBlIEV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciBvciBhcnJheSBvZiBldmVudCB0eXBlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpTQ09QRSwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGw9fVxuICogb3B0X2ZuXG4gKiAgICBPcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIHRoZSBsaXN0ZW5lciBvciBhbiBvYmplY3Qgd2l0aFxuICogICAgaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyhib29sZWFufCFBZGRFdmVudExpc3RlbmVyT3B0aW9ucyk9fSBvcHRfb3B0aW9uc1xuICogQHJldHVybiB7VEhJU30gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvciBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0aGlzIHtUSElTfVxuICogQHRlbXBsYXRlIEVWRU5UT0JKLCBUSElTXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuT25jZSA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfb3B0aW9ucykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIHJldHVybiBzZWxmLmxpc3Rlbk9uY2VfKHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfb3B0aW9ucyk7XG59O1xuXG5cbi8qKlxuICogTGlzdGVuIHRvIGFuIGV2ZW50IG9uIGEgTGlzdGVuYWJsZS4gIElmIHRoZSBmdW5jdGlvbiBpcyBvbWl0dGVkLCB0aGVuIHRoZVxuICogRXZlbnRIYW5kbGVyJ3MgaGFuZGxlRXZlbnQgbWV0aG9kIHdpbGwgYmUgdXNlZC4gQWZ0ZXIgdGhlIGV2ZW50IGhhcyBmaXJlZCB0aGVcbiAqIGV2ZW50IGxpc3RlbmVyIGlzIHJlbW92ZWQgZnJvbSB0aGUgdGFyZ2V0LiBJZiBhbiBhcnJheSBvZiBldmVudCB0eXBlcyBpc1xuICogcHJvdmlkZWQsIGVhY2ggZXZlbnQgdHlwZSB3aWxsIGJlIGxpc3RlbmVkIHRvIG9uY2UuXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkxpc3RlbmFibGVUeXBlfSBzcmMgRXZlbnQgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxcbiAqICAgICAhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj58IUFycmF5PCFnb29nLmV2ZW50cy5FdmVudElkPEVWRU5UT0JKPj59XG4gKiAgICAgdHlwZSBFdmVudCB0eXBlIHRvIGxpc3RlbiBmb3Igb3IgYXJyYXkgb2YgZXZlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCwgRVZFTlRPQkopOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKHRoaXM6VCwgPyk6P318XG4gKiAgICAgbnVsbHx1bmRlZmluZWR9IGZuIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHVzZWQgYXMgdGhlXG4gKiAgICAgbGlzdGVuZXIgb3IgYW4gb2JqZWN0IHdpdGggaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBjYXB0dXJlIE9wdGlvbmFsIHdoZXRoZXIgdG8gdXNlIGNhcHR1cmUgcGhhc2UuXG4gKiBAcGFyYW0ge1R9IHNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge1RISVN9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGhpcyB7VEhJU31cbiAqIEB0ZW1wbGF0ZSBULCBFVkVOVE9CSiwgVEhJU1xuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLmxpc3Rlbk9uY2VXaXRoU2NvcGUgPSBmdW5jdGlvbihcbiAgICBzcmMsIHR5cGUsIGZuLCBjYXB0dXJlLCBzY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIC8vIFRPRE8obWtuaWNoZWwpOiBEZXByZWNhdGUgdGhpcyBmdW5jdGlvbi5cbiAgcmV0dXJuIHNlbGYubGlzdGVuT25jZV8oc3JjLCB0eXBlLCBmbiwgY2FwdHVyZSwgc2NvcGUpO1xufTtcblxuXG4vKipcbiAqIExpc3RlbiB0byBhbiBldmVudCBvbiBhIExpc3RlbmFibGUuICBJZiB0aGUgZnVuY3Rpb24gaXMgb21pdHRlZCwgdGhlbiB0aGVcbiAqIEV2ZW50SGFuZGxlcidzIGhhbmRsZUV2ZW50IG1ldGhvZCB3aWxsIGJlIHVzZWQuIEFmdGVyIHRoZSBldmVudCBoYXMgZmlyZWRcbiAqIHRoZSBldmVudCBsaXN0ZW5lciBpcyByZW1vdmVkIGZyb20gdGhlIHRhcmdldC4gSWYgYW4gYXJyYXkgb2YgZXZlbnQgdHlwZXMgaXNcbiAqIHByb3ZpZGVkLCBlYWNoIGV2ZW50IHR5cGUgd2lsbCBiZSBsaXN0ZW5lZCB0byBvbmNlLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZX0gc3JjIEV2ZW50IHNvdXJjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58XG4gKiAgICAgIWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fCFBcnJheTwhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj4+fVxuICogICAgIHR5cGUgRXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yIG9yIGFycmF5IG9mIGV2ZW50IHR5cGVzLlxuICogQHBhcmFtIHtmdW5jdGlvbihFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbD19IG9wdF9mblxuICogICAgT3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyB0aGUgbGlzdGVuZXIgb3IgYW4gb2JqZWN0IHdpdGhcbiAqICAgIGhhbmRsZUV2ZW50IGZ1bmN0aW9uLlxuICogQHBhcmFtIHsoYm9vbGVhbnwhQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpPX0gb3B0X29wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge1RISVN9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGhpcyB7VEhJU31cbiAqIEB0ZW1wbGF0ZSBFVkVOVE9CSiwgVEhJU1xuICogQHByaXZhdGVcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW5PbmNlXyA9IGZ1bmN0aW9uKFxuICAgIHNyYywgdHlwZSwgb3B0X2ZuLCBvcHRfb3B0aW9ucywgb3B0X3Njb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9ICovICh0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGYubGlzdGVuT25jZV8oc3JjLCB0eXBlW2ldLCBvcHRfZm4sIG9wdF9vcHRpb25zLCBvcHRfc2NvcGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbGlzdGVuZXJPYmogPSBnb29nLmV2ZW50cy5saXN0ZW5PbmNlKFxuICAgICAgICBzcmMsIHR5cGUsIG9wdF9mbiB8fCBzZWxmLmhhbmRsZUV2ZW50LCBvcHRfb3B0aW9ucyxcbiAgICAgICAgb3B0X3Njb3BlIHx8IHNlbGYuaGFuZGxlcl8gfHwgc2VsZik7XG4gICAgaWYgKCFsaXN0ZW5lck9iaikge1xuICAgICAgLy8gV2hlbiBnb29nLmV2ZW50cy5saXN0ZW4gcnVuIG9uIE9GRl9BTkRfRkFJTCBvciBPRkZfQU5EX1NJTEVOVFxuICAgICAgLy8gKGdvb2cuZXZlbnRzLkNhcHR1cmVTaW11bGF0aW9uTW9kZSkgaW4gSUU4LSwgaXQgd2lsbCByZXR1cm4gbnVsbFxuICAgICAgLy8gdmFsdWUuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbGlzdGVuZXJPYmoua2V5O1xuICAgIHNlbGYua2V5c19ba2V5XSA9IGxpc3RlbmVyT2JqO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgd3JhcHBlciBvbiBhIERPTSBOb2RlIG9yIGFuXG4gKiBvYmplY3QgdGhhdCBoYXMgaW1wbGVtZW50ZWQge0BsaW5rIGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fS4gQSBsaXN0ZW5lciBjYW5cbiAqIG9ubHkgYmUgYWRkZWQgb25jZSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldHxnb29nLmV2ZW50cy5FdmVudFRhcmdldH0gc3JjIFRoZSBub2RlIHRvIGxpc3RlbiB0b1xuICogICAgIGV2ZW50cyBvbi5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnRXcmFwcGVyfSB3cmFwcGVyIEV2ZW50IHdyYXBwZXIgdG8gdXNlLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCA/KTo/fHtoYW5kbGVFdmVudDpmdW5jdGlvbig/KTo/fXxudWxsfSBsaXN0ZW5lclxuICogICAgIENhbGxiYWNrIG1ldGhvZCwgb3IgYW4gb2JqZWN0IHdpdGggYSBoYW5kbGVFdmVudCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IFdoZXRoZXIgdG8gZmlyZSBpbiBjYXB0dXJlIHBoYXNlIChkZWZhdWx0cyB0b1xuICogICAgIGZhbHNlKS5cbiAqIEByZXR1cm4ge1RISVN9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGhpcyB7VEhJU31cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFdyYXBwZXIgPSBmdW5jdGlvbihcbiAgICBzcmMsIHdyYXBwZXIsIGxpc3RlbmVyLCBvcHRfY2FwdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIC8vIFRPRE8obWtuaWNoZWwpOiBSZW1vdmUgdGhlIG9wdF9zY29wZSBmcm9tIHRoaXMgZnVuY3Rpb24gYW5kIHRoZW5cbiAgLy8gdGVtcGxhdGl6ZSBpdC5cbiAgcmV0dXJuIHNlbGYubGlzdGVuV2l0aFdyYXBwZXJfKHNyYywgd3JhcHBlciwgbGlzdGVuZXIsIG9wdF9jYXB0KTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHdpdGggYSBzcGVjaWZpYyBldmVudCB3cmFwcGVyIG9uIGEgRE9NIE5vZGUgb3IgYW5cbiAqIG9iamVjdCB0aGF0IGhhcyBpbXBsZW1lbnRlZCB7QGxpbmsgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXR9LiBBIGxpc3RlbmVyIGNhblxuICogb25seSBiZSBhZGRlZCBvbmNlIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fGdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBzcmMgVGhlIG5vZGUgdG8gbGlzdGVuIHRvXG4gKiAgICAgZXZlbnRzIG9uLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudFdyYXBwZXJ9IHdyYXBwZXIgRXZlbnQgd3JhcHBlciB0byB1c2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCwgPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24odGhpczpULCA/KTo/fXxudWxsfVxuICogICAgIGxpc3RlbmVyIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHVzZWQgYXMgdGhlXG4gKiAgICAgbGlzdGVuZXIgb3IgYW4gb2JqZWN0IHdpdGggaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBjYXB0dXJlIE9wdGlvbmFsIHdoZXRoZXIgdG8gdXNlIGNhcHR1cmUgcGhhc2UuXG4gKiBAcGFyYW0ge1R9IHNjb3BlIE9iamVjdCBpbiB3aG9zZSBzY29wZSB0byBjYWxsIHRoZSBsaXN0ZW5lci5cbiAqIEByZXR1cm4ge1RISVN9IFRoaXMgb2JqZWN0LCBhbGxvd2luZyBmb3IgY2hhaW5pbmcgb2YgY2FsbHMuXG4gKiBAdGhpcyB7VEhJU31cbiAqIEB0ZW1wbGF0ZSBULCBUSElTXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFdyYXBwZXJBbmRTY29wZSA9IGZ1bmN0aW9uKFxuICAgIHNyYywgd3JhcHBlciwgbGlzdGVuZXIsIGNhcHR1cmUsIHNjb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHNlbGYgPSAvKiogQHR5cGUgeyFnb29nLmV2ZW50cy5FdmVudEhhbmRsZXJ9ICovICh0aGlzKTtcbiAgLy8gVE9ETyhta25pY2hlbCk6IERlcHJlY2F0ZSB0aGlzIGZ1bmN0aW9uLlxuICByZXR1cm4gc2VsZi5saXN0ZW5XaXRoV3JhcHBlcl8oc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgY2FwdHVyZSwgc2NvcGUpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgd2l0aCBhIHNwZWNpZmljIGV2ZW50IHdyYXBwZXIgb24gYSBET00gTm9kZSBvciBhblxuICogb2JqZWN0IHRoYXQgaGFzIGltcGxlbWVudGVkIHtAbGluayBnb29nLmV2ZW50cy5FdmVudFRhcmdldH0uIEEgbGlzdGVuZXIgY2FuXG4gKiBvbmx5IGJlIGFkZGVkIG9uY2UgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9IHNyYyBUaGUgbm9kZSB0byBsaXN0ZW4gdG9cbiAqICAgICBldmVudHMgb24uXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50V3JhcHBlcn0gd3JhcHBlciBFdmVudCB3cmFwcGVyIHRvIHVzZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbH0gbGlzdGVuZXIgQ2FsbGJhY2tcbiAqICAgICBtZXRob2QsIG9yIGFuIG9iamVjdCB3aXRoIGEgaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY2FwdCBXaGV0aGVyIHRvIGZpcmUgaW4gY2FwdHVyZSBwaGFzZSAoZGVmYXVsdHMgdG9cbiAqICAgICBmYWxzZSkuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZSBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7VEhJU30gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvciBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0aGlzIHtUSElTfVxuICogQHRlbXBsYXRlIFRISVNcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUubGlzdGVuV2l0aFdyYXBwZXJfID0gZnVuY3Rpb24oXG4gICAgc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9zY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIHdyYXBwZXIubGlzdGVuKFxuICAgICAgc3JjLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9zY29wZSB8fCBzZWxmLmhhbmRsZXJfIHx8IHNlbGYsIHNlbGYpO1xuICByZXR1cm4gc2VsZjtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE51bWJlciBvZiBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBieSB0aGlzIGhhbmRsZXIuXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUuZ2V0TGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIGtleSBpbiB0aGlzLmtleXNfKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmtleXNfLCBrZXkpKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5cbi8qKlxuICogVW5saXN0ZW5zIG9uIGFuIGV2ZW50LlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlVHlwZX0gc3JjIEV2ZW50IHNvdXJjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58XG4gKiAgICAgIWdvb2cuZXZlbnRzLkV2ZW50SWQ8RVZFTlRPQko+fCFBcnJheTwhZ29vZy5ldmVudHMuRXZlbnRJZDxFVkVOVE9CSj4+fVxuICogICAgIHR5cGUgRXZlbnQgdHlwZSBvciBhcnJheSBvZiBldmVudCB0eXBlcyB0byB1bmxpc3RlbiB0by5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczo/LCBFVkVOVE9CSik6P3x7aGFuZGxlRXZlbnQ6ZnVuY3Rpb24oPyk6P318bnVsbD19XG4gKiAgICAgb3B0X2ZuIE9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHVzZWQgYXMgdGhlIGxpc3RlbmVyIG9yIGFuIG9iamVjdFxuICogICAgIHdpdGggaGFuZGxlRXZlbnQgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyhib29sZWFufCFFdmVudExpc3RlbmVyT3B0aW9ucyk9fSBvcHRfb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7VEhJU30gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvciBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0aGlzIHtUSElTfVxuICogQHRlbXBsYXRlIEVWRU5UT0JKLCBUSElTXG4gKi9cbmdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5wcm90b3R5cGUudW5saXN0ZW4gPSBmdW5jdGlvbihcbiAgICBzcmMsIHR5cGUsIG9wdF9mbiwgb3B0X29wdGlvbnMsIG9wdF9zY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzZWxmLnVubGlzdGVuKHNyYywgdHlwZVtpXSwgb3B0X2ZuLCBvcHRfb3B0aW9ucywgb3B0X3Njb3BlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNhcHR1cmUgPVxuICAgICAgICBnb29nLmlzT2JqZWN0KG9wdF9vcHRpb25zKSA/ICEhb3B0X29wdGlvbnMuY2FwdHVyZSA6ICEhb3B0X29wdGlvbnM7XG4gICAgdmFyIGxpc3RlbmVyID0gZ29vZy5ldmVudHMuZ2V0TGlzdGVuZXIoXG4gICAgICAgIHNyYywgdHlwZSwgb3B0X2ZuIHx8IHNlbGYuaGFuZGxlRXZlbnQsIGNhcHR1cmUsXG4gICAgICAgIG9wdF9zY29wZSB8fCBzZWxmLmhhbmRsZXJfIHx8IHNlbGYpO1xuXG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBnb29nLmV2ZW50cy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyKTtcbiAgICAgIGRlbGV0ZSBzZWxmLmtleXNfW2xpc3RlbmVyLmtleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciB3aGljaCB3YXMgYWRkZWQgd2l0aCBsaXN0ZW5XaXRoV3JhcHBlcigpLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9IHNyYyBUaGUgdGFyZ2V0IHRvIHN0b3BcbiAqICAgICBsaXN0ZW5pbmcgdG8gZXZlbnRzIG9uLlxuICogQHBhcmFtIHtnb29nLmV2ZW50cy5FdmVudFdyYXBwZXJ9IHdyYXBwZXIgRXZlbnQgd3JhcHBlciB0byB1c2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOj98e2hhbmRsZUV2ZW50OmZ1bmN0aW9uKD8pOj99fG51bGx9IGxpc3RlbmVyIFRoZVxuICogICAgIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jYXB0IEluIERPTS1jb21wbGlhbnQgYnJvd3NlcnMsIHRoaXMgZGV0ZXJtaW5lc1xuICogICAgIHdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGZpcmVkIGR1cmluZyB0aGUgY2FwdHVyZSBvciBidWJibGUgcGhhc2Ugb2YgdGhlXG4gKiAgICAgZXZlbnQuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZSBFbGVtZW50IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHJldHVybiB7VEhJU30gVGhpcyBvYmplY3QsIGFsbG93aW5nIGZvciBjaGFpbmluZyBvZiBjYWxscy5cbiAqIEB0aGlzIHtUSElTfVxuICogQHRlbXBsYXRlIFRISVNcbiAqL1xuZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyLnByb3RvdHlwZS51bmxpc3RlbldpdGhXcmFwcGVyID0gZnVuY3Rpb24oXG4gICAgc3JjLCB3cmFwcGVyLCBsaXN0ZW5lciwgb3B0X2NhcHQsIG9wdF9zY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gLyoqIEB0eXBlIHshZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyfSAqLyAodGhpcyk7XG4gIHdyYXBwZXIudW5saXN0ZW4oXG4gICAgICBzcmMsIGxpc3RlbmVyLCBvcHRfY2FwdCwgb3B0X3Njb3BlIHx8IHNlbGYuaGFuZGxlcl8gfHwgc2VsZiwgc2VsZik7XG4gIHJldHVybiBzZWxmO1xufTtcblxuXG4vKipcbiAqIFVubGlzdGVucyB0byBhbGwgZXZlbnRzLlxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cub2JqZWN0LmZvckVhY2godGhpcy5rZXlzXywgZnVuY3Rpb24obGlzdGVuZXJPYmosIGtleSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodGhpcy5rZXlzXy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBnb29nLmV2ZW50cy51bmxpc3RlbkJ5S2V5KGxpc3RlbmVyT2JqKTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIHRoaXMua2V5c18gPSB7fTtcbn07XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBvZiB0aGlzIEV2ZW50SGFuZGxlciBhbmQgcmVtb3ZlcyBhbGwgbGlzdGVuZXJzIHRoYXQgaXQgcmVnaXN0ZXJlZC5cbiAqIEBvdmVycmlkZVxuICogQHByb3RlY3RlZFxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlci5zdXBlckNsYXNzXy5kaXNwb3NlSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgdGhpcy5yZW1vdmVBbGwoKTtcbn07XG5cblxuLyoqXG4gKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXJcbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnR9IGUgRXZlbnQgb2JqZWN0LlxuICovXG5nb29nLmV2ZW50cy5FdmVudEhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRocm93IG5ldyBFcnJvcignRXZlbnRIYW5kbGVyLmhhbmRsZUV2ZW50IG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBQcm92aWRlcyBhIHV0aWxpdHkgZm9yIHRyYWNpbmcgYW5kIGRlYnVnZ2luZyBXZWJDaGFubmVsXG4gKiAgICAgcmVxdWVzdHMuXG4gKlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbERlYnVnJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5qc29uJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubG9nJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLlVyaScpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlJyk7XG5cblxuXG4vKipcbiAqIExvZ3MgYW5kIGtlZXBzIGEgYnVmZmVyIG9mIGRlYnVnZ2luZyBpbmZvIGZvciB0aGUgQ2hhbm5lbC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzdHJ1Y3RcbiAqIEBmaW5hbFxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbERlYnVnID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFRoZSBsb2dnZXIgaW5zdGFuY2UuXG4gICAqIEBjb25zdFxuICAgKiBAcHJpdmF0ZSB7P2dvb2cubG9nLkxvZ2dlcn1cbiAgICovXG4gIHRoaXMubG9nZ2VyXyA9IGdvb2cubG9nLmdldExvZ2dlcignZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxEZWJ1ZycpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSByZWRhY3QuIERlZmF1bHRzIHRvIHRydWUuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5yZWRhY3RFbmFibGVkXyA9IHRydWU7XG59O1xuXG5cbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG52YXIgV2ViQ2hhbm5lbERlYnVnID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxEZWJ1ZztcblxuXG4vKipcbiAqIFR1cm5zIG9mZiByZWRhY3QuXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUuZGlzYWJsZVJlZGFjdCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVkYWN0RW5hYmxlZF8gPSBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBMb2dzIHRoYXQgdGhlIGJyb3dzZXIgd2VudCBvZmZsaW5lIGR1cmluZyB0aGUgbGlmZXRpbWUgb2YgYSByZXF1ZXN0LlxuICogQHBhcmFtIHtnb29nLlVyaX0gdXJsIFRoZSBVUkwgYmVpbmcgcmVxdWVzdGVkLlxuICovXG5XZWJDaGFubmVsRGVidWcucHJvdG90eXBlLmJyb3dzZXJPZmZsaW5lUmVzcG9uc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmluZm8oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiAnQlJPV1NFUl9PRkZMSU5FOiAnICsgdXJsO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBMb2dzIGFuIFhtbEh0dHAgcmVxdWVzdC4uXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyYiBUaGUgcmVxdWVzdCB0eXBlIChHRVQvUE9TVCkuXG4gKiBAcGFyYW0ge2dvb2cuVXJpfSB1cmkgVGhlIHJlcXVlc3QgZGVzdGluYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8dW5kZWZpbmVkfSBpZCBUaGUgcmVxdWVzdCBpZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhdHRlbXB0IFdoaWNoIGF0dGVtcHQgIyB0aGUgcmVxdWVzdCB3YXMuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBvc3REYXRhIFRoZSBkYXRhIHBvc3RlZCBpbiB0aGUgcmVxdWVzdC5cbiAqL1xuV2ViQ2hhbm5lbERlYnVnLnByb3RvdHlwZS54bWxIdHRwQ2hhbm5lbFJlcXVlc3QgPSBmdW5jdGlvbihcbiAgICB2ZXJiLCB1cmksIGlkLCBhdHRlbXB0LCBwb3N0RGF0YSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5pbmZvKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gJ1hNTEhUVFAgUkVRICgnICsgaWQgKyAnKSBbYXR0ZW1wdCAnICsgYXR0ZW1wdCArICddOiAnICsgdmVyYiArXG4gICAgICAgICdcXG4nICsgdXJpICsgJ1xcbicgKyBzZWxmLm1heWJlUmVkYWN0UG9zdERhdGFfKHBvc3REYXRhKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogTG9ncyB0aGUgbWV0YSBkYXRhIHJlY2VpdmVkIGZyb20gYW4gWG1sSHR0cCByZXF1ZXN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHZlcmIgVGhlIHJlcXVlc3QgdHlwZSAoR0VUL1BPU1QpLlxuICogQHBhcmFtIHtnb29nLlVyaX0gdXJpIFRoZSByZXF1ZXN0IGRlc3RpbmF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZH0gaWQgVGhlIHJlcXVlc3QgaWQuXG4gKiBAcGFyYW0ge251bWJlcn0gYXR0ZW1wdCBXaGljaCBhdHRlbXB0ICMgdGhlIHJlcXVlc3Qgd2FzLlxuICogQHBhcmFtIHtnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGV9IHJlYWR5U3RhdGUgVGhlIHJlYWR5IHN0YXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGUgVGhlIEhUVFAgc3RhdHVzIGNvZGUuXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUueG1sSHR0cENoYW5uZWxSZXNwb25zZU1ldGFEYXRhID0gZnVuY3Rpb24oXG4gICAgdmVyYiwgdXJpLCBpZCwgYXR0ZW1wdCwgcmVhZHlTdGF0ZSwgc3RhdHVzQ29kZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuaW5mbyhmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuICdYTUxIVFRQIFJFU1AgKCcgKyBpZCArICcpIFsgYXR0ZW1wdCAnICsgYXR0ZW1wdCArICddOiAnICsgdmVyYiArXG4gICAgICAgICdcXG4nICsgdXJpICsgJ1xcbicgKyByZWFkeVN0YXRlICsgJyAnICsgc3RhdHVzQ29kZTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogTG9ncyB0aGUgcmVzcG9uc2UgZGF0YSByZWNlaXZlZCBmcm9tIGFuIFhtbEh0dHAgcmVxdWVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnx1bmRlZmluZWR9IGlkIFRoZSByZXF1ZXN0IGlkLlxuICogQHBhcmFtIHs/c3RyaW5nfSByZXNwb25zZVRleHQgVGhlIHJlc3BvbnNlIHRleHQuXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBvcHRfZGVzYyBPcHRpb25hbCByZXF1ZXN0IGRlc2NyaXB0aW9uLlxuICovXG5XZWJDaGFubmVsRGVidWcucHJvdG90eXBlLnhtbEh0dHBDaGFubmVsUmVzcG9uc2VUZXh0ID0gZnVuY3Rpb24oXG4gICAgaWQsIHJlc3BvbnNlVGV4dCwgb3B0X2Rlc2MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuaW5mbyhmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuICdYTUxIVFRQIFRFWFQgKCcgKyBpZCArICcpOiAnICsgc2VsZi5yZWRhY3RSZXNwb25zZV8ocmVzcG9uc2VUZXh0KSArXG4gICAgICAgIChvcHRfZGVzYyA/ICcgJyArIG9wdF9kZXNjIDogJycpO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBMb2dzIGEgcmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtnb29nLlVyaX0gdXJpIFRoZSB1cmkgdGhhdCB0aW1lZCBvdXQuXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUudGltZW91dFJlc3BvbnNlID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5pbmZvKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gJ1RJTUVPVVQ6ICcgKyB1cmk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIExvZ3MgYSBkZWJ1ZyBtZXNzYWdlLlxuICogQHBhcmFtIHshZ29vZy5sb2cuTG9nZ2FibGV9IHRleHQgVGhlIG1lc3NhZ2UuXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5sb2cuZmluZSh0aGlzLmxvZ2dlcl8sIHRleHQpO1xufTtcblxuXG4vKipcbiAqIExvZ3MgYW4gZXhjZXB0aW9uXG4gKiBAcGFyYW0ge0Vycm9yfSBlIFRoZSBlcnJvciBvciBlcnJvciBldmVudC5cbiAqIEBwYXJhbSB7Z29vZy5sb2cuTG9nZ2FibGU9fSBvcHRfbXNnIFRoZSBvcHRpb25hbCBtZXNzYWdlLFxuICogICAgIGRlZmF1bHRzIHRvICdFeGNlcHRpb24nLlxuICovXG5XZWJDaGFubmVsRGVidWcucHJvdG90eXBlLmR1bXBFeGNlcHRpb24gPSBmdW5jdGlvbihlLCBvcHRfbXNnKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5sb2cuZXJyb3IodGhpcy5sb2dnZXJfLCBvcHRfbXNnIHx8ICdFeGNlcHRpb24nLCBlKTtcbn07XG5cblxuLyoqXG4gKiBMb2dzIGFuIGluZm8gbWVzc2FnZS5cbiAqIEBwYXJhbSB7IWdvb2cubG9nLkxvZ2dhYmxlfSB0ZXh0IFRoZSBtZXNzYWdlLlxuICovXG5XZWJDaGFubmVsRGVidWcucHJvdG90eXBlLmluZm8gPSBmdW5jdGlvbih0ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5sb2cuaW5mbyh0aGlzLmxvZ2dlcl8sIHRleHQpO1xufTtcblxuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcGFyYW0geyFnb29nLmxvZy5Mb2dnYWJsZX0gdGV4dCBUaGUgbWVzc2FnZS5cbiAqL1xuV2ViQ2hhbm5lbERlYnVnLnByb3RvdHlwZS53YXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubG9nLndhcm5pbmcodGhpcy5sb2dnZXJfLCB0ZXh0KTtcbn07XG5cblxuLyoqXG4gKiBMb2dzIGEgc2V2ZXJlIG1lc3NhZ2UuXG4gKiBAcGFyYW0geyFnb29nLmxvZy5Mb2dnYWJsZX0gdGV4dCBUaGUgbWVzc2FnZS5cbiAqL1xuV2ViQ2hhbm5lbERlYnVnLnByb3RvdHlwZS5zZXZlcmUgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5sb2cuZXJyb3IodGhpcy5sb2dnZXJfLCB0ZXh0KTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHBvdGVudGlhbGx5IHByaXZhdGUgZGF0YSBmcm9tIGEgcmVzcG9uc2Ugc28gdGhhdCB3ZSBkb24ndFxuICogYWNjaWRlbnRhbGx5IHNhdmUgcHJpdmF0ZSBhbmQgcGVyc29uYWwgZGF0YSB0byB0aGUgc2VydmVyIGxvZ3MuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHJlc3BvbnNlVGV4dCBBIEpTT04gcmVzcG9uc2UgdG8gY2xlYW4uXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgY2xlYW5lZCByZXNwb25zZS5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUucmVkYWN0UmVzcG9uc2VfID0gZnVuY3Rpb24ocmVzcG9uc2VUZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnJlZGFjdEVuYWJsZWRfKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlVGV4dDtcbiAgfVxuXG4gIGlmICghcmVzcG9uc2VUZXh0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciByZXNwb25zZUFycmF5ID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xuICAgIGlmIChyZXNwb25zZUFycmF5KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2VBcnJheVtpXSkpIHtcbiAgICAgICAgICB0aGlzLm1heWJlUmVkYWN0QXJyYXlfKHJlc3BvbnNlQXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdvb2cuanNvbi5zZXJpYWxpemUocmVzcG9uc2VBcnJheSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLmRlYnVnKCdFeGNlcHRpb24gcGFyc2luZyBleHBlY3RlZCBKUyBhcnJheSAtIHByb2JhYmx5IHdhcyBub3QgSlMnKTtcbiAgICByZXR1cm4gcmVzcG9uc2VUZXh0O1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBkYXRhIGZyb20gYSByZXNwb25zZSBhcnJheSB0aGF0IG1heSBiZSBzZW5zaXRpdmUuXG4gKiBAcGFyYW0geyFBcnJheTw/Pn0gYXJyYXkgVGhlIGFycmF5IHRvIGNsZWFuLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbERlYnVnLnByb3RvdHlwZS5tYXliZVJlZGFjdEFycmF5XyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGRhdGFQYXJ0ID0gYXJyYXlbMV07XG4gIGlmICghQXJyYXkuaXNBcnJheShkYXRhUGFydCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGRhdGFQYXJ0Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHlwZSA9IGRhdGFQYXJ0WzBdO1xuICBpZiAodHlwZSAhPSAnbm9vcCcgJiYgdHlwZSAhPSAnc3RvcCcgJiYgdHlwZSAhPSAnY2xvc2UnKSB7XG4gICAgLy8gcmVkYWN0IGFsbCBmaWVsZHMgaW4gdGhlIGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBkYXRhUGFydC5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVBhcnRbaV0gPSAnJztcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHBvdGVudGlhbGx5IHByaXZhdGUgZGF0YSBmcm9tIGEgcmVxdWVzdCBQT1NUIGJvZHkgc28gdGhhdCB3ZSBkb24ndFxuICogYWNjaWRlbnRhbGx5IHNhdmUgcHJpdmF0ZSBhbmQgcGVyc29uYWwgZGF0YSB0byB0aGUgc2VydmVyIGxvZ3MuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRhdGEgVGhlIGRhdGEgc3RyaW5nIHRvIGNsZWFuLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGRhdGEgc3RyaW5nIHdpdGggc2Vuc2l0aXZlIGRhdGEgcmVwbGFjZWQgYnkgJ3JlZGFjdGVkJy5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxEZWJ1Zy5wcm90b3R5cGUubWF5YmVSZWRhY3RQb3N0RGF0YV8gPSBmdW5jdGlvbihkYXRhKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnJlZGFjdEVuYWJsZWRfKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgb3V0ID0gJyc7XG4gIHZhciBwYXJhbXMgPSBkYXRhLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBhcmFtID0gcGFyYW1zW2ldO1xuICAgIHZhciBrZXlWYWx1ZSA9IHBhcmFtLnNwbGl0KCc9Jyk7XG4gICAgaWYgKGtleVZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlWYWx1ZVswXTtcbiAgICAgIHZhciB2YWx1ZSA9IGtleVZhbHVlWzFdO1xuXG4gICAgICB2YXIga2V5UGFydHMgPSBrZXkuc3BsaXQoJ18nKTtcbiAgICAgIGlmIChrZXlQYXJ0cy5sZW5ndGggPj0gMiAmJiBrZXlQYXJ0c1sxXSA9PSAndHlwZScpIHtcbiAgICAgICAgb3V0ICs9IGtleSArICc9JyArIHZhbHVlICsgJyYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9IGtleSArICc9JyArXG4gICAgICAgICAgICAncmVkYWN0ZWQnICtcbiAgICAgICAgICAgICcmJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG59KTsgIC8vIGdvb2cuc2NvcGVcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTdGF0aWMgdXRpbGl0aWVzIGZvciBjb2xsZWN0aW5nIHN0YXRzIGFzc29jaWF0ZWQgd2l0aFxuICogQ2hhbm5lbFJlcXVlc3QuXG4gKlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwucmVxdWVzdFN0YXRzJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHMuRXZlbnQnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHknKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHlFdmVudCcpO1xuZ29vZy5wcm92aWRlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwucmVxdWVzdFN0YXRzLlN0YXQnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cy5TdGF0RXZlbnQnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cy5UaW1pbmdFdmVudCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Jyk7XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcbmNvbnN0IHJlcXVlc3RTdGF0cyA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHM7XG5cblxuLyoqXG4gKiBFdmVudHMgZmlyZWQuXG4gKiBAY29uc3RcbiAqL1xucmVxdWVzdFN0YXRzLkV2ZW50ID0ge307XG5cblxuLyoqXG4gKiBTaW5nbGV0b24gZXZlbnQgdGFyZ2V0IGZvciBmaXJpbmcgc3RhdCBldmVudHNcbiAqIEB0eXBlIHs/Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9XG4gKiBAcHJpdmF0ZVxuICovXG5yZXF1ZXN0U3RhdHMuZXZlbnRUYXJnZXRfID0gbnVsbDtcblxuLyoqXG4gKiBTaW5nbGV0b24gZXZlbnQgdGFyZ2V0IGZvciBmaXJpbmcgc3RhdCBldmVudHNcbiAqIEByZXR1cm4geyFnb29nLmV2ZW50cy5FdmVudFRhcmdldH1cbiAqIEBwcml2YXRlXG4gKi9cbnJlcXVlc3RTdGF0cy5nZXRTdGF0RXZlbnRUYXJnZXRfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmVxdWVzdFN0YXRzLmV2ZW50VGFyZ2V0XyA9XG4gICAgICByZXF1ZXN0U3RhdHMuZXZlbnRUYXJnZXRfIHx8IG5ldyBnb29nLmV2ZW50cy5FdmVudFRhcmdldCgpO1xuICByZXR1cm4gcmVxdWVzdFN0YXRzLmV2ZW50VGFyZ2V0Xztcbn07XG5cbi8qKlxuICogVGhlIHR5cGUgb2YgZXZlbnQgdGhhdCBvY2N1cnMgZXZlcnkgdGltZSBzb21lIGluZm9ybWF0aW9uIGFib3V0IGhvdyByZWFjaGFibGVcbiAqIHRoZSBzZXJ2ZXIgaXMgaXMgZGlzY292ZXJlZC5cbiAqL1xucmVxdWVzdFN0YXRzLkV2ZW50LlNFUlZFUl9SRUFDSEFCSUxJVFlfRVZFTlQgPSAnc2VydmVycmVhY2hhYmlsaXR5JztcblxuXG4vKipcbiAqIFR5cGVzIG9mIGV2ZW50cyB3aGljaCByZXZlYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlYWNoYWJpbGl0eSBvZiB0aGVcbiAqIHNlcnZlci5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnJlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHkgPSB7XG4gIFJFUVVFU1RfTUFERTogMSxcbiAgUkVRVUVTVF9TVUNDRUVERUQ6IDIsXG4gIFJFUVVFU1RfRkFJTEVEOiAzLFxuICBCQUNLX0NIQU5ORUxfQUNUSVZJVFk6IDQgIC8vIGFueSByZXNwb25zZSBkYXRhIHJlY2VpdmVkXG59O1xuXG5cblxuLyoqXG4gKiBFdmVudCBjbGFzcyBmb3IgU0VSVkVSX1JFQUNIQUJJTElUWV9FVkVOVC5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSB0YXJnZXQgVGhlIHN0YXQgZXZlbnQgdGFyZ2V0IGZvclxuICAgICAgIHRoZSBjaGFubmVsLlxuICogQHBhcmFtIHtyZXF1ZXN0U3RhdHMuU2VydmVyUmVhY2hhYmlsaXR5fSByZWFjaGFiaWxpdHlUeXBlXG4gKiAgICAgVGhlIHJlYWNoYWJpbGl0eSBldmVudCB0eXBlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnR9XG4gKi9cbnJlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHlFdmVudCA9IGZ1bmN0aW9uKHRhcmdldCwgcmVhY2hhYmlsaXR5VHlwZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkV2ZW50LmNhbGwoXG4gICAgICB0aGlzLCByZXF1ZXN0U3RhdHMuRXZlbnQuU0VSVkVSX1JFQUNIQUJJTElUWV9FVkVOVCwgdGFyZ2V0KTtcblxuICAvKipcbiAgICogQHR5cGUge3JlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHl9XG4gICAqL1xuICB0aGlzLnJlYWNoYWJpbGl0eVR5cGUgPSByZWFjaGFiaWxpdHlUeXBlO1xufTtcbmdvb2cuaW5oZXJpdHMocmVxdWVzdFN0YXRzLlNlcnZlclJlYWNoYWJpbGl0eUV2ZW50LCBnb29nLmV2ZW50cy5FdmVudCk7XG5cblxuLyoqXG4gKiBOb3RpZnkgdGhlIGNoYW5uZWwgdGhhdCBhIHBhcnRpY3VsYXIgZmluZSBncmFpbmVkIG5ldHdvcmsgZXZlbnQgaGFzIG9jY3VycmVkLlxuICogU2hvdWxkIGJlIGNvbnNpZGVyZWQgcGFja2FnZS1wcml2YXRlLlxuICogQHBhcmFtIHtyZXF1ZXN0U3RhdHMuU2VydmVyUmVhY2hhYmlsaXR5fSByZWFjaGFiaWxpdHlUeXBlXG4gKiAgICAgVGhlIHJlYWNoYWJpbGl0eSBldmVudCB0eXBlLlxuICovXG5yZXF1ZXN0U3RhdHMubm90aWZ5U2VydmVyUmVhY2hhYmlsaXR5RXZlbnQgPSBmdW5jdGlvbihyZWFjaGFiaWxpdHlUeXBlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgdGFyZ2V0ID0gcmVxdWVzdFN0YXRzLmdldFN0YXRFdmVudFRhcmdldF8oKTtcbiAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgcmVxdWVzdFN0YXRzLlNlcnZlclJlYWNoYWJpbGl0eUV2ZW50KHRhcmdldCwgcmVhY2hhYmlsaXR5VHlwZSkpO1xufTtcblxuXG4vKipcbiAqIFN0YXQgRXZlbnQgdGhhdCBmaXJlcyB3aGVuIHRoaW5ncyBvZiBpbnRlcmVzdCBoYXBwZW4gdGhhdCBtYXkgYmUgdXNlZnVsIGZvclxuICogYXBwbGljYXRpb25zIHRvIGtub3cgYWJvdXQgZm9yIHN0YXRzIG9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAqL1xucmVxdWVzdFN0YXRzLkV2ZW50LlNUQVRfRVZFTlQgPSAnc3RhdGV2ZW50JztcblxuXG4vKipcbiAqIEVudW0gdGhhdCBpZGVudGlmaWVzIGV2ZW50cyBmb3Igc3RhdGlzdGljcyB0aGF0IGFyZSBpbnRlcmVzdGluZyB0byB0cmFjay5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnJlcXVlc3RTdGF0cy5TdGF0ID0ge1xuICAvKiogRXZlbnQgaW5kaWNhdGluZyBhIG5ldyBjb25uZWN0aW9uIGF0dGVtcHQuICovXG4gIENPTk5FQ1RfQVRURU1QVDogMCxcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gZXJyb3IgZHVlIHRvIGEgZ2VuZXJhbCBuZXR3b3JrIHByb2JsZW0uICovXG4gIEVSUk9SX05FVFdPUks6IDEsXG5cbiAgLyoqXG4gICAqIEV2ZW50IGluZGljYXRpbmcgYSBjb25uZWN0aW9uIGVycm9yIHRoYXQgaXNuJ3QgZHVlIHRvIGEgZ2VuZXJhbCBuZXR3b3JrXG4gICAqIHByb2JsZW0uXG4gICAqL1xuICBFUlJPUl9PVEhFUjogMixcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyB0aGUgc3RhcnQgb2YgdGVzdCBzdGFnZSBvbmUuICovXG4gIFRFU1RfU1RBR0VfT05FX1NUQVJUOiAzLFxuXG4gIC8qKiBFdmVudCBpbmRpY2F0aW5nIHRoZSBzdGFydCBvZiB0ZXN0IHN0YWdlIHR3by4gKi9cbiAgVEVTVF9TVEFHRV9UV09fU1RBUlQ6IDQsXG5cbiAgLyoqIEV2ZW50IGluZGljYXRpbmcgdGhlIGZpcnN0IHBpZWNlIG9mIHRlc3QgZGF0YSB3YXMgcmVjZWl2ZWQuICovXG4gIFRFU1RfU1RBR0VfVFdPX0RBVEFfT05FOiA1LFxuXG4gIC8qKlxuICAgKiBFdmVudCBpbmRpY2F0aW5nIHRoYXQgdGhlIHNlY29uZCBwaWVjZSBvZiB0ZXN0IGRhdGEgd2FzIHJlY2VpdmVkIGFuZCBpdCB3YXNcbiAgICogcmVjZWl2ZWQgc2VwYXJhdGVseSBmcm9tIHRoZSBmaXJzdC5cbiAgICovXG4gIFRFU1RfU1RBR0VfVFdPX0RBVEFfVFdPOiA2LFxuXG4gIC8qKiBFdmVudCBpbmRpY2F0aW5nIGJvdGggcGllY2VzIG9mIHRlc3QgZGF0YSB3ZXJlIHJlY2VpdmVkIHNpbXVsdGFuZW91c2x5LiAqL1xuICBURVNUX1NUQUdFX1RXT19EQVRBX0JPVEg6IDcsXG5cbiAgLyoqIEV2ZW50IGluZGljYXRpbmcgc3RhZ2Ugb25lIG9mIHRoZSB0ZXN0IHJlcXVlc3QgZmFpbGVkLiAqL1xuICBURVNUX1NUQUdFX09ORV9GQUlMRUQ6IDgsXG5cbiAgLyoqIEV2ZW50IGluZGljYXRpbmcgc3RhZ2UgdHdvIG9mIHRoZSB0ZXN0IHJlcXVlc3QgZmFpbGVkLiAqL1xuICBURVNUX1NUQUdFX1RXT19GQUlMRUQ6IDksXG5cbiAgLyoqXG4gICAqIEV2ZW50IGluZGljYXRpbmcgdGhhdCBhIGJ1ZmZlcmluZyBwcm94eSBpcyBsaWtlbHkgYmV0d2VlbiB0aGUgY2xpZW50IGFuZFxuICAgKiB0aGUgc2VydmVyLlxuICAgKi9cbiAgUFJPWFk6IDEwLFxuXG4gIC8qKlxuICAgKiBFdmVudCBpbmRpY2F0aW5nIHRoYXQgbm8gYnVmZmVyaW5nIHByb3h5IGlzIGxpa2VseSBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kXG4gICAqIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBOT1BST1hZOiAxMSxcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyBhbiB1bmtub3duIFNJRCBlcnJvci4gKi9cbiAgUkVRVUVTVF9VTktOT1dOX1NFU1NJT05fSUQ6IDEyLFxuXG4gIC8qKiBFdmVudCBpbmRpY2F0aW5nIGEgYmFkIHN0YXR1cyBjb2RlIHdhcyByZWNlaXZlZC4gKi9cbiAgUkVRVUVTVF9CQURfU1RBVFVTOiAxMyxcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyBpbmNvbXBsZXRlIGRhdGEgd2FzIHJlY2VpdmVkICovXG4gIFJFUVVFU1RfSU5DT01QTEVURV9EQVRBOiAxNCxcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyBiYWQgZGF0YSB3YXMgcmVjZWl2ZWQgKi9cbiAgUkVRVUVTVF9CQURfREFUQTogMTUsXG5cbiAgLyoqIEV2ZW50IGluZGljYXRpbmcgbm8gZGF0YSB3YXMgcmVjZWl2ZWQgd2hlbiBkYXRhIHdhcyBleHBlY3RlZC4gKi9cbiAgUkVRVUVTVF9OT19EQVRBOiAxNixcblxuICAvKiogRXZlbnQgaW5kaWNhdGluZyBhIHJlcXVlc3QgdGltZW91dC4gKi9cbiAgUkVRVUVTVF9USU1FT1VUOiAxNyxcblxuICAvKipcbiAgICogRXZlbnQgaW5kaWNhdGluZyB0aGF0IHRoZSBzZXJ2ZXIgbmV2ZXIgcmVjZWl2ZWQgb3VyIGhhbmdpbmcgR0VUIGFuZCBzbyBpdFxuICAgKiBpcyBiZWluZyByZXRyaWVkLlxuICAgKi9cbiAgQkFDS0NIQU5ORUxfTUlTU0lORzogMTgsXG5cbiAgLyoqXG4gICAqIEV2ZW50IGluZGljYXRpbmcgdGhhdCB3ZSBoYXZlIGRldGVybWluZWQgdGhhdCBvdXIgaGFuZ2luZyBHRVQgaXMgbm90XG4gICAqIHJlY2VpdmluZyBkYXRhIHdoZW4gaXQgc2hvdWxkIGJlLiBUaHVzIGl0IGlzIGRlYWQgZGVhZCBhbmQgd2lsbCBiZSByZXRyaWVkLlxuICAgKi9cbiAgQkFDS0NIQU5ORUxfREVBRDogMTksXG5cbiAgLyoqXG4gICAqIFRoZSBicm93c2VyIGRlY2xhcmVkIGl0c2VsZiBvZmZsaW5lIGR1cmluZyB0aGUgbGlmZXRpbWUgb2YgYSByZXF1ZXN0LCBvclxuICAgKiB3YXMgb2ZmbGluZSB3aGVuIGEgcmVxdWVzdCB3YXMgaW5pdGlhbGx5IG1hZGUuXG4gICAqL1xuICBCUk9XU0VSX09GRkxJTkU6IDIwXG59O1xuXG5cblxuLyoqXG4gKiBFdmVudCBjbGFzcyBmb3IgU1RBVF9FVkVOVC5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgc3RhdCBldmVudCB0YXJnZXQgZm9yXG4gICAgICAgdGhlIGNoYW5uZWwuXG4gKiBAcGFyYW0ge3JlcXVlc3RTdGF0cy5TdGF0fSBzdGF0IFRoZSBzdGF0LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnR9XG4gKi9cbnJlcXVlc3RTdGF0cy5TdGF0RXZlbnQgPSBmdW5jdGlvbihldmVudFRhcmdldCwgc3RhdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkV2ZW50LmNhbGwodGhpcywgcmVxdWVzdFN0YXRzLkV2ZW50LlNUQVRfRVZFTlQsIGV2ZW50VGFyZ2V0KTtcblxuICAvKipcbiAgICogVGhlIHN0YXRcbiAgICogQHR5cGUge3JlcXVlc3RTdGF0cy5TdGF0fVxuICAgKi9cbiAgdGhpcy5zdGF0ID0gc3RhdDtcbn07XG5nb29nLmluaGVyaXRzKHJlcXVlc3RTdGF0cy5TdGF0RXZlbnQsIGdvb2cuZXZlbnRzLkV2ZW50KTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpbmdsZXRvbiBldmVudCB0YXJnZXQgZm9yIHN0YXQgZXZlbnRzLlxuICogQHJldHVybiB7IWdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSBUaGUgZXZlbnQgdGFyZ2V0IGZvciBzdGF0IGV2ZW50cy5cbiAqL1xucmVxdWVzdFN0YXRzLmdldFN0YXRFdmVudFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiByZXF1ZXN0U3RhdHMuZ2V0U3RhdEV2ZW50VGFyZ2V0XygpO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxsIHRoZSBzdGF0IGV2ZW50IGNhbGxiYWNrLlxuICogQHBhcmFtIHtyZXF1ZXN0U3RhdHMuU3RhdH0gc3RhdCBUaGUgc3RhdC5cbiAqL1xucmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudCA9IGZ1bmN0aW9uKHN0YXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCB0YXJnZXQgPSByZXF1ZXN0U3RhdHMuZ2V0U3RhdEV2ZW50VGFyZ2V0XygpO1xuICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgcmVxdWVzdFN0YXRzLlN0YXRFdmVudCh0YXJnZXQsIHN0YXQpKTtcbn07XG5cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGZpcmVzIHdoZW4gUE9TVCByZXF1ZXN0cyBjb21wbGV0ZSBzdWNjZXNzZnVsbHksIGluZGljYXRpbmdcbiAqIHRoZSBzaXplIG9mIHRoZSBQT1NUIGFuZCB0aGUgcm91bmQgdHJpcCB0aW1lLlxuICovXG5yZXF1ZXN0U3RhdHMuRXZlbnQuVElNSU5HX0VWRU5UID0gJ3RpbWluZ2V2ZW50JztcblxuXG5cbi8qKlxuICogRXZlbnQgY2xhc3MgZm9yIHJlcXVlc3RTdGF0cy5FdmVudC5USU1JTkdfRVZFTlRcbiAqXG4gKiBAcGFyYW0ge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fSB0YXJnZXQgVGhlIHN0YXQgZXZlbnQgdGFyZ2V0IGZvclxuICAgICAgIHRoZSBjaGFubmVsLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRoZSBQT1NUIGRhdGEuXG4gKiBAcGFyYW0ge251bWJlcn0gcnR0IFRoZSB0b3RhbCByb3VuZCB0cmlwIHRpbWUgZnJvbSBQT1NUIHRvIHJlc3BvbnNlIGluIE1TLlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgUE9TVCBoYWQgdG8gYmUgcmV0cmllZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuZXZlbnRzLkV2ZW50fVxuICovXG5yZXF1ZXN0U3RhdHMuVGltaW5nRXZlbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNpemUsIHJ0dCwgcmV0cmllcykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuZXZlbnRzLkV2ZW50LmNhbGwodGhpcywgcmVxdWVzdFN0YXRzLkV2ZW50LlRJTUlOR19FVkVOVCwgdGFyZ2V0KTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuc2l6ZSA9IHNpemU7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnJ0dCA9IHJ0dDtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucmV0cmllcyA9IHJldHJpZXM7XG59O1xuZ29vZy5pbmhlcml0cyhyZXF1ZXN0U3RhdHMuVGltaW5nRXZlbnQsIGdvb2cuZXZlbnRzLkV2ZW50KTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBub3RpZnkgbGlzdGVuZXJzIGFib3V0IFBPU1QgcmVxdWVzdCBwZXJmb3JtYW5jZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBOdW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0aGUgUE9TVCBkYXRhLlxuICogQHBhcmFtIHtudW1iZXJ9IHJ0dCBUaGUgYW1vdW50IG9mIHRpbWUgZnJvbSBQT1NUIHN0YXJ0IHRvIHJlc3BvbnNlLlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgUE9TVCBoYWQgdG8gYmUgcmV0cmllZC5cbiAqL1xucmVxdWVzdFN0YXRzLm5vdGlmeVRpbWluZ0V2ZW50ID0gZnVuY3Rpb24oc2l6ZSwgcnR0LCByZXRyaWVzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgdGFyZ2V0ID0gcmVxdWVzdFN0YXRzLmdldFN0YXRFdmVudFRhcmdldF8oKTtcbiAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgcmVxdWVzdFN0YXRzLlRpbWluZ0V2ZW50KHRhcmdldCwgc2l6ZSwgcnR0LCByZXRyaWVzKSk7XG59O1xuXG5cbi8qKlxuICogQWxsb3dzIHRoZSBhcHBsaWNhdGlvbiB0byBzZXQgYW4gZXhlY3V0aW9uIGhvb2tzIGZvciB3aGVuIGEgY2hhbm5lbFxuICogc3RhcnRzIHByb2Nlc3NpbmcgcmVxdWVzdHMuIFRoaXMgaXMgdXNlZnVsIHRvIHRyYWNrIHRpbWluZyBvciBsb2dnaW5nXG4gKiBzcGVjaWFsIGluZm9ybWF0aW9uLiBUaGUgZnVuY3Rpb24gdGFrZXMgbm8gcGFyYW1ldGVycyBhbmQgcmV0dXJuIHZvaWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdGFydEhvb2sgIFRoZSBmdW5jdGlvbiBmb3IgdGhlIHN0YXJ0IGhvb2suXG4gKi9cbnJlcXVlc3RTdGF0cy5zZXRTdGFydFRocmVhZEV4ZWN1dGlvbkhvb2sgPSBmdW5jdGlvbihzdGFydEhvb2spIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXF1ZXN0U3RhdHMuc3RhcnRFeGVjdXRpb25Ib29rXyA9IHN0YXJ0SG9vaztcbn07XG5cblxuLyoqXG4gKiBBbGxvd3MgdGhlIGFwcGxpY2F0aW9uIHRvIHNldCBhbiBleGVjdXRpb24gaG9va3MgZm9yIHdoZW4gYSBjaGFubmVsXG4gKiBzdG9wcyBwcm9jZXNzaW5nIHJlcXVlc3RzLiBUaGlzIGlzIHVzZWZ1bCB0byB0cmFjayB0aW1pbmcgb3IgbG9nZ2luZ1xuICogc3BlY2lhbCBpbmZvcm1hdGlvbi4gVGhlIGZ1bmN0aW9uIHRha2VzIG5vIHBhcmFtZXRlcnMgYW5kIHJldHVybiB2b2lkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kSG9vayAgVGhlIGZ1bmN0aW9uIGZvciB0aGUgZW5kIGhvb2suXG4gKi9cbnJlcXVlc3RTdGF0cy5zZXRFbmRUaHJlYWRFeGVjdXRpb25Ib29rID0gZnVuY3Rpb24oZW5kSG9vaykge1xuICAndXNlIHN0cmljdCc7XG4gIHJlcXVlc3RTdGF0cy5lbmRFeGVjdXRpb25Ib29rXyA9IGVuZEhvb2s7XG59O1xuXG5cbi8qKlxuICogQXBwbGljYXRpb24gcHJvdmlkZWQgZXhlY3V0aW9uIGhvb2sgZm9yIHRoZSBzdGFydCBob29rLlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbnJlcXVlc3RTdGF0cy5zdGFydEV4ZWN1dGlvbkhvb2tfID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEFwcGxpY2F0aW9uIHByb3ZpZGVkIGV4ZWN1dGlvbiBob29rIGZvciB0aGUgZW5kIGhvb2suXG4gKlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQHByaXZhdGVcbiAqL1xucmVxdWVzdFN0YXRzLmVuZEV4ZWN1dGlvbkhvb2tfID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxsIHRoZSBzdGFydCBob29rXG4gKi9cbnJlcXVlc3RTdGF0cy5vblN0YXJ0RXhlY3V0aW9uID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmVxdWVzdFN0YXRzLnN0YXJ0RXhlY3V0aW9uSG9va18oKTtcbn07XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsbCB0aGUgZW5kIGhvb2tcbiAqL1xucmVxdWVzdFN0YXRzLm9uRW5kRXhlY3V0aW9uID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmVxdWVzdFN0YXRzLmVuZEV4ZWN1dGlvbkhvb2tfKCk7XG59O1xuXG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgU2FmZVRpbWVvdXQgd2hpY2ggY2FsbHMgdGhlIHN0YXJ0IGFuZCBlbmQgZXhlY3V0aW9uIGhvb2tzXG4gKiB3aXRoIGEgdHJ5Li4uZmluYWxseSBibG9jay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtcyBUaGUgdGltZSBpbiBNUyBmb3IgdGhlIHRpbWVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgSUQgb2YgdGhlIHRpbWVyLlxuICovXG5yZXF1ZXN0U3RhdHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKGZuLCBtcykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZuIG11c3Qgbm90IGJlIG51bGwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHJldHVybiBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXF1ZXN0U3RhdHMub25TdGFydEV4ZWN1dGlvbigpO1xuICAgIHRyeSB7XG4gICAgICBmbigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXF1ZXN0U3RhdHMub25FbmRFeGVjdXRpb24oKTtcbiAgICB9XG4gIH0sIG1zKTtcbn07XG59KTsgIC8vIGdvb2cuc2NvcGVcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBFcnJvciBjb2RlcyBzaGFyZWQgYmV0d2VlbiBnb29nLm5ldC5JZnJhbWVJbyBhbmRcbiAqIGdvb2cubmV0LlhocklvLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuRXJyb3JDb2RlJyk7XG5cblxuLyoqXG4gKiBFcnJvciBjb2Rlc1xuICogQGVudW0ge251bWJlcn1cbiAqL1xuZ29vZy5uZXQuRXJyb3JDb2RlID0ge1xuXG4gIC8qKlxuICAgKiBUaGVyZSBpcyBubyBlcnJvciBjb25kaXRpb24uXG4gICAqL1xuICBOT19FUlJPUjogMCxcblxuICAvKipcbiAgICogVGhlIG1vc3QgY29tbW9uIGVycm9yIGZyb20gaWZyYW1laW8sIHVuZm9ydHVuYXRlbHksIGlzIHRoYXQgdGhlIGJyb3dzZXJcbiAgICogcmVzcG9uZGVkIHdpdGggYW4gZXJyb3IgcGFnZSB0aGF0IGlzIGNsYXNzZWQgYXMgYSBkaWZmZXJlbnQgZG9tYWluLiBUaGVcbiAgICogc2l0dWF0aW9ucywgYXJlIHdoZW4gYSBicm93c2VyIGVycm9yIHBhZ2UgIGlzIHNob3duIC0tIDQwNCwgYWNjZXNzIGRlbmllZCxcbiAgICogRE5TIGZhaWx1cmUsIGNvbm5lY3Rpb24gcmVzZXQgZXRjLilcbiAgICpcbiAgICovXG4gIEFDQ0VTU19ERU5JRUQ6IDEsXG5cbiAgLyoqXG4gICAqIEN1cnJlbnRseSB0aGUgb25seSBjYXNlIHdoZXJlIGZpbGUgbm90IGZvdW5kIHdpbGwgYmUgY2F1c2VkIGlzIHdoZW4gdGhlXG4gICAqIGNvZGUgaXMgcnVubmluZyBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0gYW5kIGEgbm9uLUlFIGJyb3dzZXIgbWFrZXMgYVxuICAgKiByZXF1ZXN0IHRvIGEgZmlsZSB0aGF0IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBGSUxFX05PVF9GT1VORDogMixcblxuICAvKipcbiAgICogSWYgRmlyZWZveCBzaG93cyBhIGJyb3dzZXIgZXJyb3IgcGFnZSwgc3VjaCBhcyBhIGNvbm5lY3Rpb24gcmVzZXQgYnlcbiAgICogc2VydmVyIG9yIGFjY2VzcyBkZW5pZWQsIHRoZW4gaXQgd2lsbCBmYWlsIHNpbGVudGx5IHdpdGhvdXQgdGhlIGVycm9yIG9yXG4gICAqIGxvYWQgaGFuZGxlcnMgZmlyaW5nLlxuICAgKi9cbiAgRkZfU0lMRU5UX0VSUk9SOiAzLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gZXJyb3IgcHJvdmlkZWQgYnkgdGhlIGNsaWVudCB0aHJvdWdoIHRoZSBlcnJvciBjaGVjayBob29rLlxuICAgKi9cbiAgQ1VTVE9NX0VSUk9SOiA0LFxuXG4gIC8qKlxuICAgKiBFeGNlcHRpb24gd2FzIHRocm93biB3aGlsZSBwcm9jZXNzaW5nIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgRVhDRVBUSU9OOiA1LFxuXG4gIC8qKlxuICAgKiBUaGUgSHR0cCByZXNwb25zZSByZXR1cm5lZCBhIG5vbi1zdWNjZXNzZnVsIGh0dHAgc3RhdHVzIGNvZGUuXG4gICAqL1xuICBIVFRQX0VSUk9SOiA2LFxuXG4gIC8qKlxuICAgKiBUaGUgcmVxdWVzdCB3YXMgYWJvcnRlZC5cbiAgICovXG4gIEFCT1JUOiA3LFxuXG4gIC8qKlxuICAgKiBUaGUgcmVxdWVzdCB0aW1lZCBvdXQuXG4gICAqL1xuICBUSU1FT1VUOiA4LFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgaXMgbm90IGF2YWlsYWJsZSBvZmZsaW5lLlxuICAgKi9cbiAgT0ZGTElORTogOSxcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnJpZW5kbHkgZXJyb3IgbWVzc2FnZSBmb3IgYW4gZXJyb3IgY29kZS4gVGhlc2UgbWVzc2FnZXMgYXJlIGZvclxuICogZGVidWdnaW5nIGFuZCBhcmUgbm90IGxvY2FsaXplZC5cbiAqIEBwYXJhbSB7Z29vZy5uZXQuRXJyb3JDb2RlfSBlcnJvckNvZGUgQW4gZXJyb3IgY29kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBtZXNzYWdlIGZvciBkZWJ1Z2dpbmcuXG4gKi9cbmdvb2cubmV0LkVycm9yQ29kZS5nZXREZWJ1Z01lc3NhZ2UgPSBmdW5jdGlvbihlcnJvckNvZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgIGNhc2UgZ29vZy5uZXQuRXJyb3JDb2RlLk5PX0VSUk9SOlxuICAgICAgcmV0dXJuICdObyBFcnJvcic7XG5cbiAgICBjYXNlIGdvb2cubmV0LkVycm9yQ29kZS5BQ0NFU1NfREVOSUVEOlxuICAgICAgcmV0dXJuICdBY2Nlc3MgZGVuaWVkIHRvIGNvbnRlbnQgZG9jdW1lbnQnO1xuXG4gICAgY2FzZSBnb29nLm5ldC5FcnJvckNvZGUuRklMRV9OT1RfRk9VTkQ6XG4gICAgICByZXR1cm4gJ0ZpbGUgbm90IGZvdW5kJztcblxuICAgIGNhc2UgZ29vZy5uZXQuRXJyb3JDb2RlLkZGX1NJTEVOVF9FUlJPUjpcbiAgICAgIHJldHVybiAnRmlyZWZveCBzaWxlbnRseSBlcnJvcmVkJztcblxuICAgIGNhc2UgZ29vZy5uZXQuRXJyb3JDb2RlLkNVU1RPTV9FUlJPUjpcbiAgICAgIHJldHVybiAnQXBwbGljYXRpb24gY3VzdG9tIGVycm9yJztcblxuICAgIGNhc2UgZ29vZy5uZXQuRXJyb3JDb2RlLkVYQ0VQVElPTjpcbiAgICAgIHJldHVybiAnQW4gZXhjZXB0aW9uIG9jY3VycmVkJztcblxuICAgIGNhc2UgZ29vZy5uZXQuRXJyb3JDb2RlLkhUVFBfRVJST1I6XG4gICAgICByZXR1cm4gJ0h0dHAgcmVzcG9uc2UgYXQgNDAwIG9yIDUwMCBsZXZlbCc7XG5cbiAgICBjYXNlIGdvb2cubmV0LkVycm9yQ29kZS5BQk9SVDpcbiAgICAgIHJldHVybiAnUmVxdWVzdCB3YXMgYWJvcnRlZCc7XG5cbiAgICBjYXNlIGdvb2cubmV0LkVycm9yQ29kZS5USU1FT1VUOlxuICAgICAgcmV0dXJuICdSZXF1ZXN0IHRpbWVkIG91dCc7XG5cbiAgICBjYXNlIGdvb2cubmV0LkVycm9yQ29kZS5PRkZMSU5FOlxuICAgICAgcmV0dXJuICdUaGUgcmVzb3VyY2UgaXMgbm90IGF2YWlsYWJsZSBvZmZsaW5lJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ1VucmVjb2duaXplZCBlcnJvciBjb2RlJztcbiAgfVxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDb21tb24gZXZlbnRzIGZvciB0aGUgbmV0d29yayBjbGFzc2VzLlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5FdmVudFR5cGUnKTtcblxuXG4vKipcbiAqIEV2ZW50IG5hbWVzIGZvciBuZXR3b3JrIGV2ZW50c1xuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuRXZlbnRUeXBlID0ge1xuICBDT01QTEVURTogJ2NvbXBsZXRlJyxcbiAgU1VDQ0VTUzogJ3N1Y2Nlc3MnLFxuICBFUlJPUjogJ2Vycm9yJyxcbiAgQUJPUlQ6ICdhYm9ydCcsXG4gIFJFQURZOiAncmVhZHknLFxuICBSRUFEWV9TVEFURV9DSEFOR0U6ICdyZWFkeXN0YXRlY2hhbmdlJyxcbiAgVElNRU9VVDogJ3RpbWVvdXQnLFxuICBJTkNSRU1FTlRBTF9EQVRBOiAnaW5jcmVtZW50YWxkYXRhJyxcbiAgUFJPR1JFU1M6ICdwcm9ncmVzcycsXG4gIC8vIERPV05MT0FEX1BST0dSRVNTIGFuZCBVUExPQURfUFJPR1JFU1MgYXJlIHNwZWNpYWwgZXZlbnRzIGRpc3BhdGNoZWQgYnlcbiAgLy8gZ29vZy5uZXQuWGhySW8gdG8gYWxsb3cgYmluZGluZyBsaXN0ZW5lcnMgc3BlY2lmaWMgdG8gZWFjaCB0eXBlIG9mXG4gIC8vIHByb2dyZXNzLlxuICBET1dOTE9BRF9QUk9HUkVTUzogJ2Rvd25sb2FkcHJvZ3Jlc3MnLFxuICBVUExPQURfUFJPR1JFU1M6ICd1cGxvYWRwcm9ncmVzcycsXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEludGVyZmFjZSBmb3IgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBYTUxIdHRwUmVxdWVzdCBvYmplY3RzXG4gKiBhbmQgbWV0YWRhdGEgYWJvdXQgdGhlbS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LlhtbEh0dHBGYWN0b3J5Jyk7XG5cbi8qKiBAc3VwcHJlc3Mge2V4dHJhUmVxdWlyZX0gVHlwZWRlZi4gKi9cbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuWGhyTGlrZScpO1xuXG5cblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhbiBYbWxIdHRwUmVxdWVzdCBmYWN0b3J5LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmdvb2cubmV0LlhtbEh0dHBGYWN0b3J5ID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIENhY2hlIG9mIG9wdGlvbnMgLSB3ZSBvbmx5IGFjdHVhbGx5IGNhbGwgaW50ZXJuYWxHZXRPcHRpb25zIG9uY2UuXG4gKiBAdHlwZSB7P09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LlhtbEh0dHBGYWN0b3J5LnByb3RvdHlwZS5jYWNoZWRPcHRpb25zXyA9IG51bGw7XG5cblxuLyoqXG4gKiBAcmV0dXJuIHshZ29vZy5uZXQuWGhyTGlrZS5Pck5hdGl2ZX0gQSBuZXcgWGhyTGlrZSBpbnN0YW5jZS5cbiAqL1xuZ29vZy5uZXQuWG1sSHR0cEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUluc3RhbmNlID0gZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEByZXR1cm4ge09iamVjdH0gT3B0aW9ucyBkZXNjcmliaW5nIGhvdyB4aHIgb2JqZWN0cyBvYnRhaW5lZCBmcm9tIHRoaXNcbiAqICAgICBmYWN0b3J5IHNob3VsZCBiZSB1c2VkLlxuICovXG5nb29nLm5ldC5YbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmNhY2hlZE9wdGlvbnNfIHx8XG4gICAgICAodGhpcy5jYWNoZWRPcHRpb25zXyA9IHRoaXMuaW50ZXJuYWxHZXRPcHRpb25zKCkpO1xufTtcblxuXG4vKipcbiAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIHN1YmNsYXNzZXMgdG8gcHJlc2VydmUgdGhlIGNhY2hpbmcgb2ZmZXJlZCBieVxuICogZ2V0T3B0aW9ucygpLlxuICogQHJldHVybiB7T2JqZWN0fSBPcHRpb25zIGRlc2NyaWJpbmcgaG93IHhociBvYmplY3RzIG9idGFpbmVkIGZyb20gdGhpc1xuICogICAgIGZhY3Rvcnkgc2hvdWxkIGJlIHVzZWQuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmdvb2cubmV0LlhtbEh0dHBGYWN0b3J5LnByb3RvdHlwZS5pbnRlcm5hbEdldE9wdGlvbnMgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoZSBBUEkgc3BlYyBmb3IgdGhlIFdlYkNoYW5uZWwgbWVzc2FnaW5nIGxpYnJhcnkuXG4gKlxuICogU2ltaWxhciB0byBIVE1MNSBXZWJTb2NrZXQsIFdlYkNoYW5uZWwgb2ZmZXJzIGFuIGFic3RyYWN0aW9uIGZvclxuICogcG9pbnQtdG8tcG9pbnQgc29ja2V0LWxpa2UgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGEgYnJvd3NlciBjbGllbnQgYW5kXG4gKiBhIHJlbW90ZSBvcmlnaW4uXG4gKlxuICogV2ViQ2hhbm5lbHMgYXJlIGNyZWF0ZWQgdmlhIDxjb2RlPldlYkNoYW5uZWw8L2NvZGU+LiBNdWx0aXBsZSBXZWJDaGFubmVsc1xuICogbWF5IGJlIG11bHRpcGxleGVkIG92ZXIgdGhlIHNhbWUgV2ViQ2hhbm5lbFRyYW5zcG9ydCwgd2hpY2ggZW5jYXBzdWxhdGVzXG4gKiB0aGUgdW5kZXJseWluZyBwaHlzaWNhbCBjb25uZWN0aXZpdHkgb3ZlciBzdGFuZGFyZCB3aXJlIHByb3RvY29sc1xuICogc3VjaCBhcyBIVFRQLlxuICpcbiAqIEEgV2ViQ2hhbm5lbCBpbiB0dXJuIHJlcHJlc2VudHMgYSBsb2dpY2FsIGNvbW11bmljYXRpb24gY2hhbm5lbCBiZXR3ZWVuXG4gKiB0aGUgY2xpZW50IGFuZCBzZXJ2ZXIgZW5kcG9pbnQuIEEgV2ViQ2hhbm5lbCByZW1haW5zIG9wZW4gZm9yIGFzIGxvbmdcbiAqIGFzIHRoZSBjbGllbnQgb3Igc2VydmVyIGVuZHBvaW50IGFsbG93cy5cbiAqXG4gKiBNZXNzYWdlcyBhcmUgZGVsaXZlcmVkIGluLW9yZGVyIGFuZCByZWxpYWJseSBvdmVyIHRoZSBzYW1lIFdlYkNoYW5uZWwsXG4gKiBhbmQgdGhlIGNob2ljZSBvZiB0aGUgdW5kZXJseWluZyB3aXJlIHByb3RvY29scyBpcyBjb21wbGV0ZWx5IHRyYW5zcGFyZW50XG4gKiB0byB0aGUgQVBJIHVzZXJzLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBoYXZlIG5vIGltbWVkaWF0ZSBwbGFuIHRvIG1vdmUgdGhpcyBBUEkgb3V0IG9mIGxhYnMuIFdoaWxlXG4gKiB0aGUgaW1wbGVtZW50YXRpb24gaXMgcHJvZHVjdGlvbiByZWFkeSwgdGhlIEFQSSBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LldlYkNoYW5uZWwnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuRXZlbnQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuTGlzdGVuYWJsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5YbWxIdHRwRmFjdG9yeScpO1xuXG5cblxuLyoqXG4gKiBBIFdlYkNoYW5uZWwgcmVwcmVzZW50cyBhIGxvZ2ljYWwgYmktZGlyZWN0aW9uYWwgY2hhbm5lbCBvdmVyIHdoaWNoIHRoZVxuICogY2xpZW50IGNvbW11bmljYXRlcyB3aXRoIGEgcmVtb3RlIHNlcnZlciB0aGF0IGhvbGRzIHRoZSBvdGhlciBlbmRwb2ludFxuICogb2YgdGhlIGNoYW5uZWwuIEEgV2ViQ2hhbm5lbCBpcyBhbHdheXMgY3JlYXRlZCBpbiB0aGUgY29udGV4dCBvZiBhIHNoYXJlZFxuICoge0BsaW5rIFdlYkNoYW5uZWxUcmFuc3BvcnR9IGluc3RhbmNlLiBJdCBpcyB1cCB0byB0aGUgdW5kZXJseWluZyBjbGllbnQtc2lkZVxuICogYW5kIHNlcnZlci1zaWRlIGltcGxlbWVudGF0aW9ucyB0byBkZWNpZGUgaG93IG9yIHdoZW4gbXVsdGlwbGV4aW5nIGlzXG4gKiB0byBiZSBlbmFibGVkLlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqIEBleHRlbmRzIHtnb29nLmV2ZW50cy5MaXN0ZW5hYmxlfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsID0gZnVuY3Rpb24oKSB7fTtcblxuXG5cbi8qKlxuICogVGhpcyBpbnRlcmZhY2UgZGVmaW5lcyBhIHBsdWdnYWJsZSBBUEkgdG8gYWxsb3cgV2ViQ2hhbm5lbCBydW50aW1lIHRvIHN1cHBvcnRcbiAqIGN1c3RvbWl6ZWQgYWxnb3JpdGhtcyBpbiBvcmRlciB0byByZWNvdmVyIGZyb20gdHJhbnNpZW50IGZhaWx1cmVzIHN1Y2ggYXNcbiAqIHRob3NlIGZhaWx1cmVzIGNhdXNlZCBieSBuZXR3b3JrIG9yIHByb3hpZXMgKGludGVybWVkaWFyaWVzKS5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtIG1heSBhbHNvIGNob29zZSB0byBmYWlsLWZhc3QsIGUuZy4gc3dpdGNoIHRoZSBjbGllbnQgdG8gc29tZVxuICogb2ZmbGluZSBtb2RlLlxuICpcbiAqIEV4dHJhIG1lYXN1cmVtZW50cyBhbmQgbG9nZ2luZyBjb3VsZCBhbHNvIGJlIGltcGxlbWVudGVkIGluIHRoZSBjdXN0b21cbiAqIG1vZHVsZSwgd2hpY2ggaGFzIHRoZSBmdWxsIGtub3dsZWRnZSBvZiBhbGwgdGhlIHN0YXRlIHRyYW5zaXRpb25zXG4gKiAoZHVlIHRvIGZhaWx1cmVzKS5cbiAqXG4gKiBBIGRlZmF1bHQgYWxnb3JpdGhtIHdpbGwgYmUgcHJvdmlkZWQgYnkgdGhlIHdlYmNoYW5uZWwgbGlicmFyeSBpdHNlbGYuIEN1c3RvbVxuICogYWxnb3JpdGhtcyBhcmUgZXhwZWN0ZWQgdG8gYmUgdGFpbG9yZWQgdG8gc3BlY2lmaWMgY2xpZW50IHBsYXRmb3JtcyBvclxuICogbmV0d29ya2luZyBlbnZpcm9ubWVudHMsIGUuZy4gbW9iaWxlLCBjZWxsdWxhciBuZXR3b3JrLlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5GYWlsdXJlUmVjb3ZlcnkgPSBmdW5jdGlvbigpIHt9O1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBzcGVjIGZvciBuZXdseSBjcmVhdGVkIFdlYkNoYW5uZWwgaW5zdGFuY2VzLlxuICpcbiAqIFdlYkNoYW5uZWxzIGFyZSBjb25maWd1cmVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBjb250YWluaW5nXG4gKiB7QGxpbmsgV2ViQ2hhbm5lbFRyYW5zcG9ydH0uIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgYXJlIHNwZWNpZmllZFxuICogd2hlbiBhIG5ldyBpbnN0YW5jZSBvZiBXZWJDaGFubmVsIGlzIGNyZWF0ZWQgdmlhIHtAbGluayBXZWJDaGFubmVsVHJhbnNwb3J0fS5cbiAqIEByZWNvcmRcbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBUcmFuc3BvcnQtbWV0YWRhdGEgc3VwcG9ydC5cbiAqXG4gKiBDdXN0b20gSFRUUCBoZWFkZXJzIHRvIGJlIGFkZGVkIHRvIGV2ZXJ5IG1lc3NhZ2Ugc2VudCB0byB0aGVcbiAqIHNlcnZlci4gVGhpcyBvYmplY3QgaXMgbXV0YWJsZSwgYW5kIGN1c3RvbSBoZWFkZXJzIG1heSBiZSBjaGFuZ2VkLCByZW1vdmVkLFxuICogb3IgYWRkZWQgZHVyaW5nIHRoZSBydW50aW1lIGFmdGVyIGEgY2hhbm5lbCBoYXMgYmVlbiBvcGVuZWQuXG4gKlxuICogQ3VzdG9tIGhlYWRlcnMgbWF5IHRyaWdnZXIgQ09SUyBwcmVmbGlnaHQuIFNlZSBvdGhlciByZWxhdGVkIG9wdGlvbnMuXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLm1lc3NhZ2VIZWFkZXJzO1xuXG4vKipcbiAqIFRyYW5zcG9ydC1tZXRhZGF0YSBzdXBwb3J0LlxuICpcbiAqIFNpbWlsYXIgdG8gbWVzc2FnZUhlYWRlcnMsIGJ1dCBhbnkgY3VzdG9tIEhUVFAgaGVhZGVycyB3aWxsXG4gKiBiZSBzZW50IG9ubHkgb25jZSB3aGVuIHRoZSBjaGFubmVsIGlzIG9wZW5lZCBhcyBwYXJ0IG9mIHRoZSBoYW5kc2hhZSByZXF1ZXN0LlxuICogVHlwaWNhbCB1c2FnZSBpcyB0byBzZW5kIGFuIGF1dGggaGVhZGVyIHRvIHRoZSBzZXJ2ZXIsIHdoaWNoIG9ubHkgY2hlY2tzXG4gKiB0aGUgYXV0aCBoZWFkZXIgYXQgdGhlIHRpbWUgZHVyaW5nIHRoZSBoYW5kc2hha2Ugd2hlbiB0aGUgY2hhbm5lbCBpcyBvcGVuZWQuXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLmluaXRNZXNzYWdlSGVhZGVycztcblxuLyoqXG4gKiBTZW50IGFzIGluaXRNZXNzYWdlSGVhZGVycyB2aWEgWC1XZWJDaGFubmVsLUNvbnRlbnQtVHlwZSxcbiAqIHRvIGluZm9ybSB0aGUgc2VydmVyIHRoZSBNSU1FIHR5cGUgb2YgV2ViQ2hhbm5lbCBtZXNzYWdlcy5cbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLm1lc3NhZ2VDb250ZW50VHlwZTtcblxuLyoqXG4gKiBUcmFuc3BvcnQtbWV0YWRhdGEgc3VwcG9ydC5cbiAqXG4gKiBDdXN0b20gdXJsIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gYmUgYWRkZWQgdG8gZXZlcnkgbWVzc2FnZVxuICogc2VudCB0byB0aGUgc2VydmVyLiBUaGlzIG9iamVjdCBpcyBtdXRhYmxlLCBhbmQgY3VzdG9tIHBhcmFtZXRlcnMgbWF5IGJlXG4gKiBjaGFuZ2VkLCByZW1vdmVkIG9yIGFkZGVkIGR1cmluZyB0aGUgcnVudGltZSBhZnRlciBhIGNoYW5uZWwgaGFzIGJlZW4gb3BlbmVkLlxuICpcbiAqIFRPRE86IGluaXRNZXNzYWdlVXJsUGFyYW1zXG4gKiBUT0RPOiBjbG9zZU1lc3NhZ2VVcmxQYXJhbXMgIChjdXN0b20gdXJsIHF1ZXJ5IHBhcmFtcyB0byBiZSBhZGRlZCB0byB0aGVcbiAqIGNoYW5uZWwtY2xvc2UgbWVzc2FnZS4gQ3VzdG9tIGhlYWRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZHVlIHRvIHRoZSB1c2Ugb2ZcbiAqIFNlbmRCZWFjb24pXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5tZXNzYWdlVXJsUGFyYW1zO1xuXG4vKipcbiAqIFdoZXRoZXIgYSBzcGVjaWFsIGhlYWRlciBzaG91bGQgYmUgYWRkZWQgdG9cbiAqIGVhY2ggbWVzc2FnZSBzbyB0aGF0IHRoZSBzZXJ2ZXIgY2FuIGRpc3BhdGNoIHdlYmNoYW5uZWwgbWVzc2FnZXMgd2l0aG91dFxuICoga25vd2luZyB0aGUgVVJMIHBhdGggcHJlZml4LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5jbGllbnRQcm90b2NvbEhlYWRlclJlcXVpcmVkO1xuXG4vKipcbiAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbi1mbGlnaHQgSFRUUCByZXF1ZXN0cyBhbGxvd2VkXG4gKiB3aGVuIFNQRFkgaXMgZW5hYmxlZC4gQ3VycmVudGx5IHdlIG9ubHkgZGV0ZWN0IFNQRFkgaW4gQ2hyb21lLlxuICogVGhpcyBwYXJhbWV0ZXIgZGVmYXVsdHMgdG8gMTAuIFdoZW4gU1BEWSBpcyBub3QgZW5hYmxlZCwgdGhpcyBwYXJhbWV0ZXJcbiAqIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5jb25jdXJyZW50UmVxdWVzdExpbWl0O1xuXG4vKipcbiAqIFNldHRpbmcgdGhpcyB0byB0cnVlIHRvIGFsbG93IHRoZSB1c2Ugb2Ygc3ViLWRvbWFpbnNcbiAqIChhcyBjb25maWd1cmVkIGJ5IHRoZSBzZXJ2ZXIpIHRvIHNlbmQgWEhScyB3aXRoIHRoZSBDT1JTIHdpdGhDcmVkZW50aWFsc1xuICogYml0IHNldCB0byB0cnVlLlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHI7XG5cbi8qKlxuICogV2hldGhlciB0byBieXBhc3MgdjggZW5jb2Rpbmcgb2YgY2xpZW50LXNlbnQgbWVzc2FnZXMuXG4gKiBUaGlzIGRlZmF1bHRzIHRvIGZhbHNlIG5vdyBkdWUgdG8gbGVnYWN5IHNlcnZlcnMuIE5ldyBhcHBsaWNhdGlvbnMgc2hvdWxkXG4gKiBhbHdheXMgY29uZmlndXJlIHRoaXMgb3B0aW9uIHRvIHRydWUuXG4gKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuT3B0aW9ucy5wcm90b3R5cGUuc2VuZFJhd0pzb247XG5cbi8qKlxuICogVGhlIFVSTCBwYXJhbWV0ZXIgbmFtZSB0aGF0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGlkIChmb3Igc3RpY2t5IHJvdXRpbmcgb2ZcbiAqIEhUVFAgcmVxdWVzdHMpLiBXaGVuIHRoaXMgcGFyYW0gaXMgc3BlY2lmaWVkLCBhIHNlcnZlciB0aGF0IHN1cHBvcnRzIHRoaXNcbiAqIG9wdGlvbiB3aWxsIHJlc3BvbmQgd2l0aCBhbiBvcGFxdWUgc2Vzc2lvbiBpZCBhcyBwYXJ0IG9mIHRoZSBpbml0aWFsXG4gKiBoYW5kc2hha2UgKHZpYSB0aGUgWC1IVFRQLVNlc3Npb24tSWQgaGVhZGVyKTsgYW5kIGFsbCB0aGUgc3Vic2VxdWVudCByZXF1ZXN0c1xuICogd2lsbCBjb250YWluIHRoZSBodHRwU2Vzc2lvbklkUGFyYW0uIFRoaXMgb3B0aW9uIHdpbGwgdGFrZSBwcmVjZWRlbmNlIG92ZXJcbiAqIGFueSBkdXBsaWNhdGVkIHBhcmFtZXRlciBzcGVjaWZpZWQgd2l0aCBtZXNzYWdlVXJsUGFyYW1zLCB3aG9zZSB2YWx1ZSB3aWxsIGJlXG4gKiBpZ25vcmVkLlxuICogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuT3B0aW9ucy5wcm90b3R5cGUuaHR0cFNlc3Npb25JZFBhcmFtO1xuXG4vKipcbiAqIFRoZSBVUkwgcGFyYW1ldGVyIG5hbWUgdG8gYWxsb3cgY3VzdG9tIEhUVFBcbiAqIGhlYWRlcnMgdG8gYmUgb3ZlcndyaXR0ZW4gYXMgYSBVUkwgcGFyYW0gdG8gYnlwYXNzIENPUlMgcHJlZmxpZ2h0LlxuICpcbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLmh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW07XG5cbi8qKlxuICogV2hldGhlciB0byBlbmNvZGUgT3B0aW9ucy5pbml0TWVzc2FnZUhlYWRlcnMgaW4gdGhlIEhUVFAgcmVxdWVzdCBib2R5LlxuICogVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gZmFsc2UuIElmIHRydWUsIE9wdGlvbnMuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbVxuICogd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIFRoaXMgb3B0aW9uIHNob3VsZCBub3QgYmUgc2V0IGlmIE9wdGlvbnMuZmFzdEhhbmRzaGFrZSBpcyBzZXQgKHdoaWNoXG4gKiB1c2VzIEdFVCBmb3IgaGFuZHNoYWtlKS5cbiAqXG4gKiBXZWItb25seSBmZWF0dXJlLlxuICpcbiAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5lbmNvZGVJbml0TWVzc2FnZUhlYWRlcnM7XG5cbi8qKlxuICogV2hldGhlciB0byBmb3JjZSBsb25nLXBvbGxpbmcgZnJvbSBjbGllbnQgdG8gc2VydmVyLlxuICogVGhpcyBkZWZhdWx0cyB0byBmYWxzZS4gTG9uZy1wb2xsaW5nIG1heSBiZSBuZWNlc3Nhcnkgd2hlbiBhIChNSVRNKSBwcm94eVxuICogaXMgYnVmZmVyaW5nIGRhdGEgc2VudCBieSB0aGUgc2VydmVyLlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLmZvcmNlTG9uZ1BvbGxpbmc7XG5cbi8qKlxuICogV2hldGhlciB0byBlbmFibGUgYXV0b21hdGljIGRldGVjdGlvbiBvZiBidWZmZXJpbmcgcHJveGllcy4gSW4gdGhlIHByZXNlbmNlXG4gKiBvZiBhbnkgYnVmZmVyaW5nIHByb3h5LCB3ZWJjaGFubmVsIHdpbGwgdXNlIGxvbmctcG9sbGluZyB0byBzZW5kIG1lc3NhZ2VzXG4gKiBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudC4gVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBDdXJyZW50bHkgd2hlbiBmYXN0SGFuZHNoYWtlIGlzIGVuYWJsZWQsIHRoaXMgb3B0aW9uIHdpbGwgYmUgaWdub3JlZC5cbiAqIENvbXBhcmVkIHRvIFwiZm9yY2VMb25nUG9sbGluZ1wiLCB0aGlzIG9wdGlvbiBtYXkgaW50cm9kdWNlIHVwIHRvIDItUlRUXG4gKiBleHRyYSBsYXRlbmN5IGZvciBkZWxpdmVyaW5nIG1lc3NhZ2VzIGdlbmVyYXRlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAqIGhhbmRzaGFrZS5cbiAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5kZXRlY3RCdWZmZXJpbmdQcm94eTtcblxuLyoqXG4gKiBFbmFibGUgdHJ1ZSAwLVJUVCBtZXNzYWdlIGRlbGl2ZXJ5LCBpbmNsdWRpbmdcbiAqIGxldmVyYWdpbmcgUVVJQyAwLVJUVCAod2hpY2ggcmVxdWlyZXMgR0VUIHRvIGJlIHVzZWQpLiBUaGlzIG9wdGlvblxuICogZGVmYXVsdHMgdG8gZmFsc2UuIE5vdGUgaXQgaXMgYWxsb3dlZCB0byBzZW5kIG1lc3NhZ2VzIGJlZm9yZSBPcGVuIGV2ZW50IGlzXG4gKiByZWNlaXZlZCwgYWZ0ZXIgYSBjaGFubmVsIGhhcyBiZWVuIG9wZW5lZC4gSW4gb3JkZXIgdG8gZW5hYmxlIDAtUlRULFxuICogbWVzc2FnZXMgd2lsbCBiZSBlbmNvZGVkIGFzIHBhcnQgb2YgVVJMIGFuZCB0aGVyZWZvcmUgdGhlcmUgbmVlZHMgYmUgYSBzaXplXG4gKiBsaW1pdCBmb3IgdGhvc2UgaW5pdGlhbCBtZXNzYWdlcyB0aGF0IGFyZSBzZW50IGltbWVkaWF0ZWx5IGFzIHBhcnQgb2YgdGhlXG4gKiBHRVQgaGFuZHNoYWtlIHJlcXVlc3QuIFdpdGggc2VuZFJhd0pzb249dHJ1ZSwgdGhpcyBsaW1pdCBpcyBjdXJyZW50bHkgc2V0XG4gKiB0byA0SyBjaGFycyBhbmQgZGF0YSBiZXlvbmQgdGhpcyBsaW1pdCB3aWxsIGJlIGJ1ZmZlcmVkIHRpbGwgdGhlIGhhbmRzaGFrZVxuICogKDEtUlRUKSBmaW5pc2hlcy4gV2l0aCBzZW5kUmF3SnNvbj1mYWxzZSwgaXQncyB1cCB0byB0aGUgYXBwbGljYXRpb25cbiAqIHRvIGxpbWl0IHRoZSBhbW91bnQgb2YgZGF0YSB0aGF0IGlzIHNlbnQgYXMgcGFydCBvZiB0aGUgaGFuZHNoYWtlLlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLmZhc3RIYW5kc2hha2U7XG5cbi8qKlxuICogRW5hYmxlIHRoZSBibG9ja2luZyBSUEMgc2VtYW50aWNzIGZvciB0aGUgaGFuZHNoYWtlOlxuICogMSkgdGhlIGNvbXBsZXRpb24gb2YgaGFuZHNoYWtlIGlzIGJsb2NrZWQgYnkgdGhlIHNlcnZlci1zaWRlIGFwcGxpY2F0aW9uXG4gKiBsb2dpYyBmb3IgaGFuZGxpbmcgdGhlIGhhbmRzaGFrZSAoSFRUUCkgcmVxdWVzdDsgMikgdGhlIGNsaWVudCBhcHBsaWNhdGlvblxuICogd2lsbCBpbnNwZWN0IHRoZSBoYW5kc2hha2UgKEhUVFApIHJlc3BvbnNlIGhlYWRlcnMgYXMgZ2VuZXJhdGVkXG4gKiBieSB0aGUgc2VydmVyIGFwcGxpY2F0aW9uICh2LnMuIGJ5IG9ubHkgdGhlIHdlYmNoYW5uZWwgcnVudGltZSkuIFRoaXMgb3B0aW9uXG4gKiBkZWZhdWx0cyB0byBmYWxzZS5cbiAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5ibG9ja2luZ0hhbmRzaGFrZTtcblxuLyoqXG4gKiBXaGV0aGVyIHRvIGRpc2FibGUgbG9nZ2luZyByZWRhY3QuIEJ5IGRlZmF1bHQsIHJlZGFjdCBpc1xuICogZW5hYmxlZCB0byByZW1vdmUgYW55IG1lc3NhZ2UgcGF5bG9hZCBvciB1c2VyLXByb3ZpZGVkIGluZm9cbiAqIGZyb20gY2xvc3VyZSBsb2dzLlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLmRpc2FibGVSZWRhY3Q7XG5cbi8qKlxuICogSW5mb3JtIHRoZSBzZXJ2ZXIgYWJvdXQgdGhlIGNsaWVudCBwcm9maWxlIHRvIGVuYWJsZVxuICogY3VzdG9taXplZCBjb25maWdzIHRoYXQgYXJlIG9wdGltaXplZCBmb3IgY2VydGFpbiBjbGllbnRzIG9yIGVudmlyb25tZW50cy5cbiAqIEN1cnJlbnRseSB0aGlzIGluZm9ybWF0aW9uIGlzIHNlbnQgdmlhIFgtV2ViQ2hhbm5lbC1DbGllbnQtUHJvZmlsZSBoZWFkZXIuXG4gKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5jbGllbnRQcm9maWxlO1xuXG4vKipcbiAqIFRoZSBpbnRlcm5hbCBjaGFubmVsIHBhcmFtZXRlciBuYW1lIHRvIGFsbG93XG4gKiBleHBlcmltZW50YWwgY2hhbm5lbCBjb25maWd1cmF0aW9ucy4gU3VwcG9ydGVkIG9wdGlvbnMgaW5jbHVkZSBmYXN0ZmFpbCxcbiAqIGJhc2VSZXRyeURlbGF5TXMsIHJldHJ5RGVsYXlTZWVkTXMsIGZvcndhcmRDaGFubmVsTWF4UmV0cmllcyBhbmRcbiAqIGZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNcy4gTm90ZSB0aGF0IHRoZXNlIG9wdGlvbnMgYXJlIHN1YmplY3QgdG9cbiAqIGNoYW5nZS5cbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbnxudW1iZXI+fHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zLnByb3RvdHlwZS5pbnRlcm5hbENoYW5uZWxQYXJhbXM7XG5cbi8qKlxuICogQWxsb3dzIHRoZSBjYWxsZXIgdG8gb3ZlcnJpZGUgdGhlIGZhY3RvcnkgdXNlZCB0byBjcmVhdGVcbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuIFRoaXMgaXMgaW50cm9kdWNlZCB0byBkaXNhYmxlIENPUlMgb24gZmlyZWZveCBPUy5cbiAqIEB0eXBlIHshZ29vZy5uZXQuWG1sSHR0cEZhY3Rvcnl8dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLnhtbEh0dHBGYWN0b3J5O1xuXG4vKipcbiAqIENsaWVudC1zaWRlIHRocmVzaG9sZHMgdGhhdCBkZWNpZGUgd2hlbiB0byByZWZyZXNoXG4gKiBhbiB1bmRlcmx5aW5nIEhUVFAgcmVxdWVzdCwgdG8gbGltaXQgbWVtb3J5IGNvbnN1bXB0aW9uIGR1ZSB0byBYSFIgYnVmZmVyaW5nXG4gKiBvciBjb21wcmVzc2lvbiBjb250ZXh0LiBUaGUgY2xpZW50LXNpZGUgdGhyZXNob2xkcyBzaG91bGQgYmUgc2lnbmlmaWNhbnRseVxuICogc21hbGxlciB0aGFuIHRoZSBzZXJ2ZXItc2lkZSB0aHJlc2hvbGRzLiBUaGlzIGFsbG93cyB0aGUgY2xpZW50IHRvIGVsaW1pbmF0ZVxuICogYW55IGxhdGVuY3kgaW50cm9kdWNlZCBieSByZXF1ZXN0IHJlZnJlc2hpbmcsIGkuZS4gYW4gUlRUIHdpbmRvdyBkdXJpbmcgd2hpY2hcbiAqIG1lc3NhZ2VzIG1heSBiZSBidWZmZXJlZCBvbiB0aGUgc2VydmVyLXNpZGUuIFN1cHBvcnRlZCBwYXJhbXMgaW5jbHVkZVxuICogdG90YWxCeXRlc1JlY2VpdmVkLCB0b3RhbER1cmF0aW9uTXMuXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIG51bWJlcj58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLnJlcXVlc3RSZWZyZXNoVGhyZXNob2xkcztcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRvIHVzZSBXSEFUV0cgRmV0Y2gvc3RyZWFtcyAod2hlbiBzdXBwb3J0ZWQpXG4gKiBmb3IgdGhlIGJhY2tjaGFubmVsLiBJZiBhIGN1c3RvbSAneG1sSHR0cEZhY3RvcnknIGlzIHNwZWZpY2llZCwgdGhpcyBvcHRpb25cbiAqIHdpbGwgbm90IGJlIGVmZmVjdGl2ZS4gVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gZmFsc2Ugbm93IGFuZCB3aWxsIGV2ZW50dWFsbHlcbiAqIGJlIHR1cm5lZCBvbiBieSBkZWZhdWx0LlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMucHJvdG90eXBlLnVzZUZldGNoU3RyZWFtcztcblxuLyoqXG4gKiBPcHQtaW4gdG8gZW5hYmxlIENocm9tZSBvcmlnaW4gdHJpYWxzIGZyb20gdGhlIFdlYkNoYW5uZWwgY2xpZW50LiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvT3JpZ2luVHJpYWxzXG4gKlxuICogT3JpZ2luIHRyaWFsIGhpc3Rvcnk6XG4gKiAtIGZldGNoIHVwbG9hZCAoMTEvMjAyMCAtIDA3LzIwMjEpXG4gKiBodHRwczovL2RldmVsb3BlcnMuY2hyb21lLmNvbS9vcmlnaW50cmlhbHMvIy92aWV3X3RyaWFsLzM1MjQwNjY3MDg0MTc0MTMxMjFcbiAqXG4gKiBQYXJ0aWNpcGF0aW5nIGluIHRoZSBvcmlnaW4gdHJpYWxzIHdpbGwgaGVscCBDaHJvbWUgdG8gcmVsZWFzZSBuZXcgV2ViXG4gKiBwbGF0Zm9ybSBmZWF0dXJlcyBzb29uZXIsIHdoaWNoIHdpbGwgaW4gdHVybiBoZWxwIGltcHJvdmUgV2ViQ2hhbm5lbFxuICogcGVyZm9ybWFuY2UuXG4gKlxuICogT3JpZ2luIHRyaWFscyBhcmUgbm90IGV4cGVjdGVkIHRvIGludGVyZmVyZSB3aXRoIFdlYkNoYW5uZWwgd2lyZSBtZXNzYWdlc1xuICogYW5kIHNob3VsZCBub3QgaW50cm9kdWNlIGFueSBub3RpY2VhYmxlIG92ZXJoZWFkLlxuICpcbiAqIFRoaXMgaXMgZW5hYmxlZCBieSBkZWZhdWx0IHdpdGggYW55IG9uLWdvaW5nIG9yaWdpbi10cmlhbC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuT3B0aW9ucy5wcm90b3R5cGUuZW5hYmxlT3JpZ2luVHJpYWxzO1xuXG5cbi8qKlxuICogVHlwZXMgdGhhdCBhcmUgYWxsb3dlZCBhcyBtZXNzYWdlIGRhdGEuXG4gKlxuICogTm90ZSB0aGF0IEpTIG9iamVjdHMgKHNlbnQgYnkgdGhlIGNsaWVudCkgY2FuIG9ubHkgaGF2ZSBzdHJpbmcgZW5jb2RlZFxuICogdmFsdWVzIGR1ZSB0byB0aGUgbGltaXRhdGlvbiBvZiB0aGUgY3VycmVudCB3aXJlIHByb3RvY29sLlxuICpcbiAqIFVuaWNvZGUgc3RyaW5ncyAoc2VudCBieSB0aGUgc2VydmVyKSBtYXkgb3IgbWF5IG5vdCBuZWVkIGJlIGVzY2FwZWQsIGFzXG4gKiBkZWNpZGVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKlxuICogQHR5cGVkZWYgeyghQXJyYXlCdWZmZXJ8IUJsb2J8IU9iamVjdDxzdHJpbmcsICFPYmplY3R8c3RyaW5nPnwhQXJyYXl8c3RyaW5nKX1cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRGF0YTtcblxuXG4vKipcbiAqIE9wZW4gdGhlIFdlYkNoYW5uZWwgYWdhaW5zdCB0aGUgVVJJIHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwucHJvdG90eXBlLm9wZW4gPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogQ2xvc2UgdGhlIFdlYkNoYW5uZWwuXG4gKlxuICogVGhpcyBpcyBhIGZ1bGwgY2xvc2UgKHNodXRkb3duKSB3aXRoIG5vIGd1YXJhbnRlZSBvZiBGSUZPIGRlbGl2ZXJ5IGluIHJlc3BlY3RcbiAqIHRvIGFueSBpbi1mbGlnaHQgbWVzc2FnZXMgc2VudCB0byB0aGUgc2VydmVyLlxuICpcbiAqIElmIHlvdSBuZWVkIHN1Y2ggYSBndWFyYW50ZWUsIHNlZSB0aGUgSGFsZiB0aGUgaGFsZkNsb3NlKCkgbWV0aG9kLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLnByb3RvdHlwZS5jbG9zZSA9IGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqXG4gKiBIYWxmLWNsb3NlIHRoZSBXZWJDaGFubmVsLlxuICpcbiAqIEhhbGYtY2xvc2Ugc2VtYW50aWNzOlxuICogMS4gZGVsaXZlcmVkIGFzIGEgcmVndWxhciBtZXNzYWdlIGluIEZJRk8gcHJvZ3JhbW1pbmcgb3JkZXJcbiAqIDIuIHRoZSBzZXJ2ZXIgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgaGFsZi1jbG9zZSB0b28gKHdpdGggb3Igd2l0aG91dFxuICogICAgYXBwbGljYXRpb24gaW52b2x2ZWQpLCB3aGljaCB3aWxsIHRyaWdnZXIgYSBmdWxsIGNsb3NlIChzaHV0ZG93bilcbiAqICAgIG9uIHRoZSBjbGllbnQgc2lkZVxuICogMy4gZm9yIG5vdywgdGhlIGhhbGYtY2xvc2UgZXZlbnQgZGVmaW5lZCBmb3Igc2VydmVyLWluaXRpYXRlZFxuICogICAgaGFsZi1jbG9zZSBpcyBub3QgZXhwb3NlZCB0byB0aGUgY2xpZW50IGFwcGxpY2F0aW9uXG4gKiA0LiBhIGNsaWVudC1zaWRlIGhhbGYtY2xvc2UgbWF5IGJlIHRyaWdnZXJlZCBpbnRlcm5hbGx5IHdoZW4gdGhlIGNsaWVudFxuICogICAgcmVjZWl2ZXMgYSBoYWxmLWNsb3NlIGZyb20gdGhlIHNlcnZlcjsgYW5kIHRoZSBjbGllbnQgaXMgZXhwZWN0ZWQgdG9cbiAqICAgIGRvIGEgZnVsbCBjbG9zZSBhZnRlciB0aGUgaGFsZi1jbG9zZSBpcyBhY2tlZCBhbmQgZGVsaXZlcmVkXG4gKiAgICBvbiB0aGUgc2VydmVyLXNpZGUuXG4gKiA1LiBGdWxsIGNsb3NlIGlzIGFsd2F5cyBhIGZvcmNlZCBvbmUuIFNlZSB0aGUgY2xvc2UoKSBtZXRob2QuXG4gKlxuICogTmV3IG1lc3NhZ2VzIHNlbnQgYWZ0ZXIgaGFsZkNsb3NlKCkgd2lsbCBiZSBkcm9wcGVkLlxuICpcbiAqIE5PVEU6IFRoaXMgaXMgbm90IHlldCBpbXBsZW1lbnRlZCwgYW5kIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGNhbGxlZC5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5wcm90b3R5cGUuaGFsZkNsb3NlID0gZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyIHRoYXQgbWFpbnRhaW5zIHRoZSBvdGhlciBlbmRwb2ludCBvZlxuICogdGhlIFdlYkNoYW5uZWwuXG4gKlxuICogTy1SVFQgYmVoYXZpb3I6XG4gKiAxLiBtZXNzYWdlcyBzZW50IGJlZm9yZSBvcGVuKCkgaXMgY2FsbGVkIHdpbGwgYWx3YXlzIGJlIGRlbGl2ZXJlZCBhc1xuICogICAgcGFydCBvZiB0aGUgaGFuZHNoYWtlLCBpLmUuIHdpdGggMC1SVFRcbiAqIDIuIG1lc3NhZ2VzIHNlbnQgYWZ0ZXIgb3BlbigpIGlzIGNhbGxlZCBidXQgYmVmb3JlIHRoZSBPUEVOIGV2ZW50XG4gKiAgICBpcyByZWNlaXZlZCB3aWxsIGJlIGRlbGl2ZXJlZCBhcyBwYXJ0IG9mIHRoZSBoYW5kc2hha2UgaWZcbiAqICAgIHNlbmQoKSBpcyBjYWxsZWQgZnJvbSB0aGUgc2FtZSBleGVjdXRpb24gY29udGV4dCBhcyBvcGVuKCkuXG4gKiAzLiBvdGhlcndpc2UsIHRob3NlIG1lc3NhZ2VzIHdpbGwgYmUgYnVmZmVyZWQgdGlsbCB0aGUgaGFuZHNoYWtlXG4gKiAgICBpcyBjb21wbGV0ZWQgKHdoaWNoIHdpbGwgZmlyZSB0aGUgT1BFTiBldmVudCkuXG4gKlxuICogQHBhcmFtIHshZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRGF0YX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLnByb3RvdHlwZS5zZW5kID0gZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIENvbW1vbiBldmVudHMgZmlyZWQgYnkgV2ViQ2hhbm5lbHMuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZSA9IHtcbiAgLyoqIERpc3BhdGNoZWQgd2hlbiB0aGUgY2hhbm5lbCBpcyBvcGVuZWQuICovXG4gIE9QRU46IGdvb2cuZXZlbnRzLmdldFVuaXF1ZUlkKCdvcGVuJyksXG5cbiAgLyoqIERpc3BhdGNoZWQgd2hlbiB0aGUgY2hhbm5lbCBpcyBjbG9zZWQuICovXG4gIENMT1NFOiBnb29nLmV2ZW50cy5nZXRVbmlxdWVJZCgnY2xvc2UnKSxcblxuICAvKipcbiAgICogRGlzcGF0Y2hlZCB3aGVuIHRoZSBjaGFubmVsIGlzIGFib3J0ZWQgZHVlIHRvIGVycm9ycy5cbiAgICpcbiAgICogRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVhc29ucywgYSBDTE9TRSBldmVudCB3aWxsIGFsc28gYmVcbiAgICogZGlzcGF0Y2hlZCwgZm9sbG93aW5nIHRoZSBFUlJPUiBldmVudCwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIGNoYW5uZWxcbiAgICogaGFzIGJlZW4gY29tcGxldGVseSBzaHV0ZG93biAuXG4gICAqL1xuICBFUlJPUjogZ29vZy5ldmVudHMuZ2V0VW5pcXVlSWQoJ2Vycm9yJyksXG5cbiAgLyoqIERpc3BhdGNoZWQgd2hlbiB0aGUgY2hhbm5lbCBoYXMgcmVjZWl2ZWQgYSBuZXcgbWVzc2FnZS4gKi9cbiAgTUVTU0FHRTogZ29vZy5ldmVudHMuZ2V0VW5pcXVlSWQoJ21lc3NhZ2UnKVxufTtcblxuXG5cbi8qKlxuICogVGhlIGV2ZW50IGludGVyZmFjZSBmb3IgdGhlIE1FU1NBR0UgZXZlbnQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnR9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRXZlbnQuYmFzZShcbiAgICAgIHRoaXMsICdjb25zdHJ1Y3RvcicsIGdvb2cubmV0LldlYkNoYW5uZWwuRXZlbnRUeXBlLk1FU1NBR0UpO1xufTtcbmdvb2cuaW5oZXJpdHMoZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRXZlbnQsIGdvb2cuZXZlbnRzLkV2ZW50KTtcblxuXG4vKipcbiAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAqXG4gKiBAdHlwZSB7IWdvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZURhdGF9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZUV2ZW50LnByb3RvdHlwZS5kYXRhO1xuXG5cbi8qKlxuICogVGhlIG1ldGFkYXRhIGtleSB3aGVuIHRoZSBNRVNTQUdFIGV2ZW50IHJlcHJlc2VudHMgYSBtZXRhZGF0YSBtZXNzYWdlLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk1lc3NhZ2VFdmVudC5wcm90b3R5cGUubWV0YWRhdGFLZXk7XG5cblxuLyoqXG4gKiBNZXRhZGF0YSBhcyBIVFRQIHN0YXR1cyBjb2RlLiBUeXBpY2FsbHkgc2VudCBiZWZvcmUgdGhlIGNoYW5uZWwgaXNcbiAqIGhhbGYtY2xvc2VkIGJ5IHRoZSBzZXJ2ZXIuIFRvIGJlIGltcGxlbWVudGVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk1lc3NhZ2VFdmVudC5wcm90b3R5cGUuc3RhdHVzQ29kZTtcblxuXG4vKipcbiAqIE1ldGFkYXRhIGFzIEhUVFAgaGVhZGVycy4gVHlwaWNhbGx5IHNlbnQgYmVmb3JlIHRoZSBjaGFubmVsIGlzXG4gKiBoYWxmLWNsb3NlZCBieSB0aGUgc2VydmVyLiBUbyBiZSBpbXBsZW1lbnRlZC5cbiAqXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz58dW5kZWZpbmVkfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLk1lc3NhZ2VFdmVudC5wcm90b3R5cGUucmVzcG9uc2VIZWFkZXJzO1xuXG5cbi8qKlxuICogV2ViQ2hhbm5lbCBsZXZlbCBlcnJvciBjb25kaXRpb25zLlxuICpcbiAqIFN1bW1hcnkgb2YgZXJyb3IgZGVidWdnaW5nIGFuZCByZXBvcnRpbmcgaW4gV2ViQ2hhbm5lbDpcbiAqXG4gKiBOZXR3b3JrIEVycm9yXG4gKiAxLiBCeSBkZWZhdWx0IHRoZSB3ZWJjaGFubmVsIGxpYnJhcnkgd2lsbCBzZXQgdGhlIGVycm9yIHN0YXR1cyB0b1xuICogICAgTkVUV09SS19FUlJPUiB3aGVuIGEgY2hhbm5lbCBoYXMgdG8gYmUgYWJvcnRlZCBvciBjbG9zZWQuIE5FVFdPUktfRVJST1JcbiAqICAgIG1heSBiZSByZWNvdmVyZWQgYnkgdGhlIGFwcGxpY2F0aW9uIGJ5IHJldHJ5aW5nIGFuZCBvcGVuaW5nIGEgbmV3IGNoYW5uZWwuXG4gKiAyLiBUaGVyZSBtYXkgYmUgbG9zdCBtZXNzYWdlcyAobm90IGFja2VkIGJ5IHRoZSBzZXJ2ZXIpIHdoZW4gYSBjaGFubmVsIGlzXG4gKiAgICBhYm9ydGVkLiBDdXJyZW50bHkgd2UgZG9uJ3QgaGF2ZSBhIHB1YmxpYyBBUEkgdG8gcmV0cmlldmUgbWVzc2FnZXMgdGhhdFxuICogICAgYXJlIHdhaXRpbmcgdG8gYmUgYWNrZWQgb24gdGhlIGNsaWVudCBzaWRlLiBGaWxlIGEgYnVnIGlmIHlvdSB0aGluayBpdFxuICogICAgaXMgdXNlZnVsIHRvIGV4cG9zZSBzdWNoIGFuIEFQSS5cbiAqIDMuIERldGFpbHMgb2Ygd2h5IGEgY2hhbm5lbCBmYWlscyBhcmUgYXZhaWxhYmxlIHZpYSBjbG9zdXJlIGRlYnVnIGxvZ3MsXG4gKiAgICBhbmQgc3RhdHMgZXZlbnRzIChzZWUgd2ViY2hhbm5lbC9yZXF1ZXN0c3RhdHMuanMpLiBUaG9zZSBhcmUgaW50ZXJuYWxcbiAqICAgIHN0YXRzIGFuZCBhcmUgc3ViamVjdCB0byBjaGFuZ2UuIEZpbGUgYSBidWcgaWYgeW91IHRoaW5rIGl0J3MgdXNlZnVsIHRvXG4gKiAgICB2ZXJzaW9uIGFuZCBleHBvc2Ugc3VjaCBzdGF0cyBhcyBwYXJ0IG9mIHRoZSBXZWJDaGFubmVsIEFQSS5cbiAqXG4gKiBTZXJ2ZXIgRXJyb3JcbiAqIDEuIFNFUlZFUl9FUlJPUiBpcyBpbnRlbmRlZCB0byBpbmRpY2F0ZSBhIG5vbi1yZWNvdmVyYWJsZSBjb25kaXRpb24sIGUuZy5cbiAqICAgIHdoZW4gYXV0aCBmYWlscy5cbiAqIDIuIFdlIGRvbid0IGN1cnJlbnRseSBnZW5lcmF0ZSBhbnkgc3VjaCBlcnJvcnMsIGJlY2F1c2UgbW9zdCBvZiB0aGUgdGltZVxuICogICAgaXQncyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdXBwZXItbGF5ZXIgZnJhbWV3b3JrcyBvciB0aGUgYXBwbGljYXRpb25cbiAqICAgIGl0c2VsZiB0byBpbmRpY2F0ZSB0byB0aGUgY2xpZW50IHdoeSBhIHdlYmNoYW5uZWwgaGFzIGJlZW4gZmFpbGVkXG4gKiAgICBieSB0aGUgc2VydmVyLlxuICogMy4gV2hlbiBhIGNoYW5uZWwgaXMgZmFpbGVkIGJ5IHRoZSBzZXJ2ZXIgZXhwbGljaXRseSwgd2Ugc3RpbGwgc2lnbmFsXG4gKiAgICBORVRXT1JLX0VSUk9SIHRvIHRoZSBjbGllbnQuIEV4cGxpY2l0IHNlcnZlciBmYWlsdXJlIG1heSBoYXBwZW4gd2hlbiB0aGVcbiAqICAgIHNlcnZlciBkb2VzIGEgZmFpbC1vdmVyLCBvciBiZWNvbWVzIG92ZXJsb2FkZWQsIG9yIGNvbmR1Y3RzIGEgZm9yY2VkXG4gKiAgICBzaHV0ZG93biBldGMuXG4gKiA0LiBXZSB1c2Ugc29tZSBoZXVyaXN0aWMgdG8gZGVjaWRlIGlmIHRoZSBuZXR3b3JrIChha2EgY2xvdWQpIGlzIGRvd25cbiAqICAgIHYucy4gdGhlIGFjdHVhbCBzZXJ2ZXIgaXMgZG93bi5cbiAqXG4gKiAgUnVudGltZVByb3BlcnRpZXMuZ2V0TGFzdFN0YXR1c0NvZGUgaXMgYSB1c2VmdWwgc3RhdGUgdGhhdCB3ZSBleHBvc2UgdG9cbiAqICB0aGUgY2xpZW50IHRvIGluZGljYXRlIHRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlIG9mIHRoZSBsYXN0IEhUVFBcbiAqICByZXF1ZXN0IGluaXRpYXRlZCBieSB0aGUgV2ViQ2hhbm5lbCBjbGllbnQgbGlicmFyeSwgZm9yIGRlYnVnZ2luZ1xuICogIHB1cnBvc2VzIG9ubHkuXG4gKlxuICogIFNlZSBXZWJDaGFubmVsLk9wdGlvbnMuYmFja0NoYW5uZWxGYWlsdXJlUmVjb3ZlcnkgYW5kXG4gKiAgV2ViQ2hhbm5lbC5GYWlsdXJlUmVjb3ZlcnkgdG8gaW5zdGFsbCBhIGN1c3RvbSBmYWlsdXJlLXJlY292ZXJ5IGFsZ29yaXRobS5cbiAqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLkVycm9yU3RhdHVzID0ge1xuICAvKiogTm8gZXJyb3IgaGFzIG9jY3VycmVkLiAqL1xuICBPSzogMCxcblxuICAvKiogQ29tbXVuaWNhdGlvbiB0byB0aGUgc2VydmVyIGhhcyBmYWlsZWQuICovXG4gIE5FVFdPUktfRVJST1I6IDEsXG5cbiAgLyoqIFRoZSBzZXJ2ZXIgZmFpbHMgdG8gYWNjZXB0IG9yIHByb2Nlc3MgdGhlIFdlYkNoYW5uZWwuICovXG4gIFNFUlZFUl9FUlJPUjogMlxufTtcblxuXG5cbi8qKlxuICogVGhlIGV2ZW50IGludGVyZmFjZSBmb3IgdGhlIEVSUk9SIGV2ZW50LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cuZXZlbnRzLkV2ZW50fVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLkVycm9yRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLm5ldC5XZWJDaGFubmVsLkVycm9yRXZlbnQuYmFzZShcbiAgICAgIHRoaXMsICdjb25zdHJ1Y3RvcicsIGdvb2cubmV0LldlYkNoYW5uZWwuRXZlbnRUeXBlLkVSUk9SKTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cubmV0LldlYkNoYW5uZWwuRXJyb3JFdmVudCwgZ29vZy5ldmVudHMuRXZlbnQpO1xuXG5cbi8qKlxuICogVGhlIGVycm9yIHN0YXR1cy5cbiAqXG4gKiBAdHlwZSB7IWdvb2cubmV0LldlYkNoYW5uZWwuRXJyb3JTdGF0dXN9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuRXJyb3JFdmVudC5wcm90b3R5cGUuc3RhdHVzO1xuXG5cbi8qKlxuICogQHJldHVybiB7IWdvb2cubmV0LldlYkNoYW5uZWwuUnVudGltZVByb3BlcnRpZXN9IFRoZSBydW50aW1lIHByb3BlcnRpZXNcbiAqIG9mIHRoZSBXZWJDaGFubmVsIGluc3RhbmNlLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLnByb3RvdHlwZS5nZXRSdW50aW1lUHJvcGVydGllcyA9IGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuXG4vKipcbiAqIFRoZSBydW50aW1lIHByb3BlcnRpZXMgb2YgdGhlIFdlYkNoYW5uZWwgaW5zdGFuY2UuXG4gKlxuICogVGhpcyBjbGFzcyBpcyBkZWZpbmVkIGZvciBkZWJ1Z2dpbmcgYW5kIG1vbml0b3JpbmcgcHVycG9zZXMsIGFzIHdlbGwgYXMgZm9yXG4gKiBydW50aW1lIGZ1bmN0aW9ucyB0aGF0IHRoZSBhcHBsaWNhdGlvbiBtYXkgY2hvb3NlIHRvIG1hbmFnZSBieSBpdHNlbGYuXG4gKlxuICogQGludGVyZmFjZVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzID0gZnVuY3Rpb24oKSB7fTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGVmZmVjdGl2ZSBsaW1pdCBmb3IgdGhlIG51bWJlciBvZiBjb25jdXJyZW50IEhUVFBcbiAqIHJlcXVlc3RzIHRoYXQgYXJlIGFsbG93ZWQgdG8gYmUgbWFkZSBmb3Igc2VuZGluZyBtZXNzYWdlcyBmcm9tIHRoZSBjbGllbnRcbiAqIHRvIHRoZSBzZXJ2ZXIuIFdoZW4gU1BEWSBpcyBub3QgZW5hYmxlZCwgdGhpcyBsaW1pdCB3aWxsIGJlIG9uZS5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5SdW50aW1lUHJvcGVydGllcy5wcm90b3R5cGUuZ2V0Q29uY3VycmVudFJlcXVlc3RMaW1pdCA9XG4gICAgZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEZvciBhcHBsaWNhdGlvbnMgdGhhdCBuZWVkIHN1cHBvcnQgbXVsdGlwbGUgY2hhbm5lbHMgKGUuZy4gZnJvbVxuICogZGlmZmVyZW50IHRhYnMpIHRvIHRoZSBzYW1lIG9yaWdpbiwgdXNlIHRoaXMgbWV0aG9kIHRvIGRlY2lkZSBpZiBTUERZIGlzXG4gKiBlbmFibGVkIGFuZCB0aGVyZWZvcmUgaXQgaXMgc2FmZSB0byBvcGVuIG11bHRpcGxlIGNoYW5uZWxzLlxuICpcbiAqIElmIFNQRFkgaXMgZGlzYWJsZWQsIHRoZSBhcHBsaWNhdGlvbiBtYXkgY2hvb3NlIHRvIGxpbWl0IHRoZSBudW1iZXIgb2YgYWN0aXZlXG4gKiBjaGFubmVscyB0byBvbmUgb3IgdXNlIG90aGVyIG1lYW5zIHN1Y2ggYXMgc3ViLWRvbWFpbnMgdG8gd29yayBhcm91bmRcbiAqIHRoZSBicm93c2VyIGNvbm5lY3Rpb24gbGltaXQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBTUERZIGlzIGVuYWJsZWQgZm9yIHRoZSBvcmlnaW4gYWdhaW5zdCB3aGljaFxuICogdGhlIGNoYW5uZWwgaXMgY3JlYXRlZC5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5SdW50aW1lUHJvcGVydGllcy5wcm90b3R5cGUuaXNTcGR5RW5hYmxlZCA9XG4gICAgZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiByZXF1ZXN0cyAoZm9yIHNlbmRpbmcgbWVzc2FnZXMgdG8gdGhlIHNlcnZlcilcbiAqIHRoYXQgYXJlIHBlbmRpbmcuIElmIHRoaXMgbnVtYmVyIGlzIGFwcHJvYWNoaW5nIHRoZSB2YWx1ZSBvZlxuICogZ2V0Q29uY3VycmVudFJlcXVlc3RMaW1pdCgpLCBjbGllbnQtdG8tc2VydmVyIG1lc3NhZ2UgZGVsaXZlcnkgbWF5IGV4cGVyaWVuY2VcbiAqIGEgaGlnaGVyIGxhdGVuY3kuXG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuUnVudGltZVByb3BlcnRpZXMucHJvdG90eXBlLmdldFBlbmRpbmdSZXF1ZXN0Q291bnQgPVxuICAgIGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqXG4gKiBGb3IgYXBwbGljYXRpb25zIHRvIHF1ZXJ5IHRoZSBjdXJyZW50IEhUVFAgc2Vzc2lvbiBpZCwgc2VudCBieSB0aGUgc2VydmVyXG4gKiBkdXJpbmcgdGhlIGluaXRpYWwgaGFuZHNoYWtlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IHRoZSBIVFRQIHNlc3Npb24gaWQgb3IgbnVsbCBpZiBubyBIVFRQIHNlc3Npb24gaXMgaW4gdXNlLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzLnByb3RvdHlwZS5nZXRIdHRwU2Vzc2lvbklkID1cbiAgICBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogRXhwZXJpbWVudGFsIEFQSS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgYW4gaW4tYmFuZCBjb21taXQgcmVxdWVzdCB0byB0aGUgc2VydmVyLCB3aGljaCB3aWxsXG4gKiBhY2sgdGhlIGNvbW1pdCByZXF1ZXN0IGFzIHNvb24gYXMgYWxsIG1lc3NhZ2VzIHNlbnQgcHJpb3IgdG8gdGhpcyBjb21taXRcbiAqIHJlcXVlc3QgaGF2ZSBiZWVuIGNvbW1pdHRlZCBieSB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQ29tbWl0dGluZyBhIG1lc3NhZ2UgaGFzIGEgc3Ryb25nZXIgc2VtYW50aWNzIHRoYW4gZGVsaXZlcmluZyBhIG1lc3NhZ2VcbiAqIHRvIHRoZSBhcHBsaWNhdGlvbi4gRGV0YWlsIHNwZWM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmlkaXdlYi93ZWJjaGFubmVsL2Jsb2IvbWFzdGVyL2NvbW1pdC5tZFxuICpcbiAqIFRpbWVvdXQgb3IgY2FuY2VsbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIHRoZSBhcHBsaWNhdGlvbiBpcyBleHBlY3RlZCB0b1xuICogYWJvcnQgdGhlIGNoYW5uZWwgaWYgdGhlIGNvbW1pdC1hY2sgZmFpbHMgdG8gYXJyaXZlIGluIHRpbWUuXG4gKlxuICogPT09XG4gKlxuICogVGhpcyBpcyBjdXJyZW50bHkgaW1wbGVtZW50ZWQgb25seSBpbiB0aGUgY2xpZW50IGxheWVyIGFuZCB0aGUgY29tbWl0XG4gKiBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIGNsaWVudC1zZW50IG1lc3NhZ2VzIGhhdmUgYmVlblxuICogZGVsaXZlcmVkIGJ5IHRoZSBzZXJ2ZXItc2lkZSB3ZWJjaGFubmVsIGVuZHBvaW50LiBUaGlzIHNlbWFudGljcyBpc1xuICogZGlmZmVyZW50IGFuZCB3ZWFrZXIgdGhhbiB3aGF0J3MgcmVxdWlyZWQgZm9yIGVuZC10by1lbmQgYWNrIHdoaWNoIHJlcXVpcmVzXG4gKiB0aGUgc2VydmVyIGFwcGxpY2F0aW9uIHRvIGFjayB0aGUgaW4tb3JkZXIgZGVsaXZlcnkgb2YgbWVzc2FnZXMgdGhhdCBhcmUgc2VudFxuICogYmVmb3JlIHRoZSBjb21taXQgcmVxdWVzdCBpcyBpc3N1ZWQuXG4gKlxuICogQ29tbWl0IHNob3VsZCBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgY2hhbm5lbCBvcGVuIGV2ZW50IGlzIHJlY2VpdmVkLlxuICogRHVwbGljYXRlZCBjb21taXRzIGFyZSBhbGxvd2VkIGFuZCBvbmx5IHRoZSBsYXN0IGNhbGxiYWNrIGlzIGd1YXJhbnRlZWQuXG4gKiBDb21taXQgY2FsbGVkIGFmdGVyIHRoZSBjaGFubmVsIGhhcyBiZWVuIGNsb3NlZCB3aWxsIGJlIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkIG9uY2UgYW5cbiAqIGFjayBoYXMgYmVlbiByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgY29tbWl0IG9yIGFueSBuZXdseSBpc3N1ZWQgY29tbWl0LlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzLnByb3RvdHlwZS5jb21taXQgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgbWF5IGJlIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uIHRvIHJlY292ZXIgZnJvbSBhIHBlZXIgZmFpbHVyZVxuICogb3IgdG8gZW5hYmxlIHNlbmRlci1pbml0aWF0ZWQgZmxvdy1jb250cm9sLlxuICpcbiAqIERldGFpbCBzcGVjOiBodHRwczovL2dpdGh1Yi5jb20vYmlkaXdlYi93ZWJjaGFubmVsL2Jsb2IvbWFzdGVyL2NvbW1pdC5tZFxuICpcbiAqIE5vdGUgdGhhdCB0aGUgY2FsbGVyIHNob3VsZCBOT1QgbW9kaWZ5IHRoZSBsaXN0IG9mIHJldHVybmVkIG1lc3NhZ2VzLlxuICpcbiAqIEByZXR1cm4geyFBcnJheTwhZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRGF0YT59IFRoZSBsaXN0IG9mIG1lc3NhZ2VzIHRoYXRcbiAqIGhhdmUgbm90IHJlY2VpdmVkIGNvbW1pdC1hY2sgZnJvbSB0aGUgc2VydmVyOyBvciBpZiBubyBjb21taXQgaGFzIGJlZW5cbiAqIGlzc3VlZCwgdGhlIGxpc3Qgb2YgbWVzc2FnZXMgdGhhdCBoYXZlIG5vdCBiZWVuIGRlbGl2ZXJlZCB0byB0aGUgc2VydmVyXG4gKiBhcHBsaWNhdGlvbi5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5SdW50aW1lUHJvcGVydGllcy5wcm90b3R5cGUuZ2V0Tm9uQWNrZWRNZXNzYWdlcyA9XG4gICAgZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEEgbG93IHdhdGVyLW1hcmsgbWVzc2FnZSBjb3VudCB0byBub3RpZnkgdGhlIGFwcGxpY2F0aW9uIHdoZW4gdGhlXG4gKiBmbG93LWNvbnRyb2wgY29uZGl0aW9uIGlzIGNsZWFyZWQsIHRoYXQgaXMsIHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzXG4gKiBhYmxlIHRvIHNlbmQgbW9yZSBtZXNzYWdlcy5cbiAqXG4gKiBXZSBleHBlY3QgdGhlIGFwcGxpY2F0aW9uIHRvIGNvbmZpZ3VyZSBhIGhpZ2ggd2F0ZXItbWFyayBtZXNzYWdlIGNvdW50LFxuICogd2hpY2ggaXMgY2hlY2tlZCB2aWEgZ2V0Tm9uQWNrZWRNZXNzYWdlQ291bnQoKS4gV2hlbiB0aGUgaGlnaCB3YXRlci1tYXJrXG4gKiBpcyBleGNlZWRlZCwgdGhlIGFwcGxpY2F0aW9uIHNob3VsZCBpbnN0YWxsIGEgY2FsbGJhY2sgdmlhIHRoaXMgbWV0aG9kXG4gKiB0byBiZSBub3RpZmllZCB3aGVuIHRvIHN0YXJ0IHRvIHNlbmQgbmV3IG1lc3NhZ2VzLlxuICpcbiAqIFRoaXMgaXMgbm90IHlldCBpbXBsZW1lbnRlZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgVGhlIGxvdyB3YXRlci1tYXJrIGNvdW50LiBJdCBpcyBhbiBlcnJvciB0byBwYXNzXG4gKiBhIG5vbi1wb3NpdGl2ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgVGhlIGNhbGwgYmFjayB0byBub3RpZnkgdGhlIGFwcGxpY2F0aW9uXG4gKiB3aGVuIE5vbkFja2VkTWVzc2FnZUNvdW50IGlzIGJlbG93IHRoZSBzcGVjaWZpZWQgbG93IHdhdGVyLW1hcmsgY291bnQuXG4gKiBBbnkgcHJldmlvdXNseSByZWdpc3RlcmVkIGNhbGxiYWNrIGlzIGNsZWFyZWQuIFRoaXMgbmV3IGNhbGxiYWNrIHdpbGxcbiAqIGJlIGNsZWFyZWQgb25jZSBpdCBoYXMgYmVlbiBmaXJlZCwgb3Igd2hlbiB0aGUgY2hhbm5lbCBpcyBjbG9zZWQgb3IgYWJvcnRlZC5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5SdW50aW1lUHJvcGVydGllcy5wcm90b3R5cGUubm90aWZ5Tm9uQWNrZWRNZXNzYWdlQ291bnQgPVxuICAgIGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqXG4gKiBFeHBlcmltZW50YWwgQVBJLlxuICpcbiAqIFRoaXMgbWV0aG9kIHJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGhhbmRsZSB0aGUgY29tbWl0IHJlcXVlc3Qgc2VudFxuICogYnkgdGhlIHNlcnZlci4gQ29tbWl0IHByb3RvY29sIHNwZWM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmlkaXdlYi93ZWJjaGFubmVsL2Jsb2IvbWFzdGVyL2NvbW1pdC5tZFxuICpcbiAqIFRoaXMgaXMgbm90IHlldCBpbXBsZW1lbnRlZC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFPYmplY3QpfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgd2lsbCB0YWtlIGFuIG9wYXF1ZVxuICogY29tbWl0SWQgd2hpY2ggbmVlZHMgYmUgcGFzc2VkIGJhY2sgdG8gdGhlIHNlcnZlciB3aGVuIGFuIGFjay1jb21taXRcbiAqIHJlc3BvbnNlIGlzIGdlbmVyYXRlZCBieSB0aGUgY2xpZW50IGFwcGxpY2F0aW9uLCB2aWEgYWNrQ29tbWl0KCkuXG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuUnVudGltZVByb3BlcnRpZXMucHJvdG90eXBlLm9uQ29tbWl0ID0gZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEV4cGVyaW1lbnRhbCBBUEkuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCBieSB0aGUgYXBwbGljYXRpb24gdG8gZ2VuZXJhdGUgYW4gYWNrLWNvbW1pdCByZXNwb25zZVxuICogZm9yIHRoZSBnaXZlbiBjb21taXRJZC4gQ29tbWl0IHByb3RvY29sIHNwZWM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmlkaXdlYi93ZWJjaGFubmVsL2Jsb2IvbWFzdGVyL2NvbW1pdC5tZFxuICpcbiAqIFRoaXMgaXMgbm90IHlldCBpbXBsZW1lbnRlZC5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3R9IGNvbW1pdElkIFRoZSBjb21taXRJZCB3aGljaCBkZW5vdGVzIHRoZSBjb21taXQgcmVxdWVzdFxuICogZnJvbSB0aGUgc2VydmVyIHRoYXQgbmVlZHMgYmUgYWNrJ2VkLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzLnByb3RvdHlwZS5hY2tDb21taXQgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogVHJhbnNwb3J0LW1ldGFkYXRhIHN1cHBvcnQuXG4gKlxuICogVE9ETzogZ2V0TGFzdFJlc3BvbnNlSGVhZGVycyAob25seSBmb3Igbm9uLTIwMCBzdGF0dXMpXG4gKiBUT0RPOiBnZXRJbml0U3RhdHVzQ29kZSAgIChoYW5kc2hha2UpXG4gKiBUT0RPOiBnZXRJbml0UmVzcG9uc2VIZWFkZXJzICAoaGFuZHNoYWtlKVxuICpcbiAqIE5vdGUgdGhhdCByZXNwb25zZSBoZWFkZXJzIGZyb20gY2xpZW50LWluaXRpYXRlZCBjbG9zZSAoYWJvcnQpIGFyZSBub3RcbiAqIGF2YWlsYWJsZS5cbiAqXG4gKiBJbiBmdXR1cmUgd2hlbiBjbGllbnQtaW5pdGlhdGVkIGhhbGYtY2xvc2UgaXMgc3VwcG9ydGVkLCBpdHMgcmVzcG9uc2Ugc3RhdHVzXG4gKiB3aWxsIGJlIGF2YWlsYWJsZSB2aWEgdGhpcyBBUEkuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbm9uLTIwMCBIVFRQIHN0YXR1cyBjb2RlIHJlY2VpdmVkIHRoYXQgY2F1c2VzIHRoZVxuICogY2hhbm5lbCB0byBiZSBhYm9ydGVkLlxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzLnByb3RvdHlwZS5nZXRMYXN0U3RhdHVzQ29kZSA9XG4gICAgZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIEVudW0gdG8gaW5kaWNhdGUgdGhlIGN1cnJlbnQgcmVjb3Zlcnkgc3RhdGUuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5GYWlsdXJlUmVjb3ZlcnkuU3RhdGUgPSB7XG4gIC8qKiBJbml0aWFsIHN0YXRlLiAqL1xuICBJTklUOiAnaW5pdCcsXG5cbiAgLyoqIE9uY2UgYSBmYWlsdXJlIGhhcyBiZWVuIGRldGVjdGVkLiAqL1xuICBGQUlMRUQ6ICdmYWlsZWQnLFxuXG4gIC8qKlxuICAgKiBPbmNlIGEgcmVjb3Zlcnkgb3BlcmF0aW9uIGhhcyBiZWVuIGlzc3VlZCwgZS5nLiBhIG5ldyByZXF1ZXN0IHRvIHJlc3VtZVxuICAgKiBjb21tdW5pY2F0aW9uLlxuICAgKi9cbiAgUkVDT1ZFUklORzogJ3JlY292ZXJpbmcnLFxuXG4gIC8qKiBUaGUgY2hhbm5lbCBoYXMgYmVlbiBjbG9zZWQuICAqL1xuICBDTE9TRUQ6ICdjbG9zZWQnXG59O1xuXG5cbi8qKlxuICogRW51bSB0byBpbmRpY2F0ZSBkaWZmZXJlbnQgZmFpbHVyZSBjb25kaXRpb25zIGFzIGRldGVjdGVkIGJ5IHRoZSB3ZWJjaGFubmVsXG4gKiBydW50aW1lLlxuICpcbiAqIFRoaXMgZW51bSBpcyB0byBiZSB1c2VkIG9ubHkgYmV0d2VlbiB0aGUgcnVudGltZSBhbmQgRmFpbHVyZVJlY292ZXJ5IG1vZHVsZSxcbiAqIGFuZCBuZXcgc3RhdGVzIGFyZSBleHBlY3RlZCB0byBiZSBpbnRyb2R1Y2VkIGluIGZ1dHVyZS5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLkZhaWx1cmVSZWNvdmVyeS5GYWlsdXJlQ29uZGl0aW9uID0ge1xuICAvKipcbiAgICogVGhlIEhUVFAgcmVzcG9uc2UgcmV0dXJuZWQgYSBub24tc3VjY2Vzc2Z1bCBodHRwIHN0YXR1cyBjb2RlLlxuICAgKi9cbiAgSFRUUF9FUlJPUjogJ2h0dHBfZXJyb3InLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVxdWVzdCB3YXMgYWJvcnRlZC5cbiAgICovXG4gIEFCT1JUOiAnYWJvcnQnLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVxdWVzdCB0aW1lZCBvdXQuXG4gICAqL1xuICBUSU1FT1VUOiAndGltZW91dCcsXG5cbiAgLyoqXG4gICAqIEV4Y2VwdGlvbiB3YXMgdGhyb3duIHdoaWxlIHByb2Nlc3NpbmcgdGhlIHJlcXVlc3QvcmVzcG9uc2UuXG4gICAqL1xuICBFWENFUFRJT046ICdleGNlcHRpb24nXG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IWdvb2cubmV0LldlYkNoYW5uZWwuRmFpbHVyZVJlY292ZXJ5LlN0YXRlfSB0aGUgY3VycmVudCBzdGF0ZSxcbiAqIG1haW5seSBmb3IgZGVidWdnaW5nIHVzZS5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5GYWlsdXJlUmVjb3ZlcnkucHJvdG90eXBlLmdldFN0YXRlID0gZ29vZy5hYnN0cmFjdE1ldGhvZDtcblxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGZvciBXZWJDaGFubmVsIHJ1bnRpbWUgdG8gc2V0IHRoZSBjdXJyZW50IGZhaWx1cmUgY29uZGl0aW9uXG4gKiBhbmQgdG8gcHJvdmlkZSBhIGNhbGxiYWNrIGZvciB0aGUgYWxnb3JpdGhtIHRvIHNpZ25hbCB0byB0aGUgcnVudGltZVxuICogd2hlbiBpdCBpcyB0aW1lIHRvIGlzc3VlIGEgcmVjb3Zlcnkgb3BlcmF0aW9uLCBlLmcuIGEgbmV3IHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIuXG4gKlxuICogU3VwcG9ydGVkIHRyYW5zaXRpb25zIGluY2x1ZGU6XG4gKiAgIElOSVQtPkZBSUxFRFxuICogICBGQUlMRUQtPkZBSUxFRCAocmUtZW50cnkgb2spXG4gKiAgIFJFQ09WRVJZLT5GQUlMRUQuXG4gKlxuICogSWdub3JlZCBpZiBzdGF0ZSA9PSBDTE9TRUQuXG4gKlxuICogQWR2YW5jZWQgaW1wbGVtZW50YXRpb25zIGFyZSBleHBlY3RlZCB0byB0cmFjayBhbGwgdGhlIHN0YXRlIHRyYW5zaXRpb25zXG4gKiBhbmQgdGhlaXIgdGltZXN0YW1wcyBmb3IgbW9uaXRvcmluZyBwdXJwb3Nlcy5cbiAqXG4gKiBAcGFyYW0geyFnb29nLm5ldC5XZWJDaGFubmVsLkZhaWx1cmVSZWNvdmVyeS5GYWlsdXJlQ29uZGl0aW9ufSBmYWlsdXJlIFRoZVxuICogbmV3IGZhaWx1cmUgY29uZGl0aW9uIGdlbmVyYXRlZCBieSB0aGUgV2ViQ2hhbm5lbCBydW50aW1lLlxuICogQHBhcmFtIHshRnVuY3Rpb259IG9wZXJhdGlvbiBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gdGhlIFdlYkNoYW5uZWxcbiAqIHJ1bnRpbWUgdG8gaXNzdWUgYSByZWNvdmVyeSBvcGVyYXRpb24sIGUuZy4gYSBuZXcgcmVxdWVzdC4gRS5nLiB0aGUgZGVmYXVsdFxuICogcmVjb3ZlcnkgYWxnb3JpdGhtIHdpbGwgaXNzdWUgdGltZW91dC1iYXNlZCByZWNvdmVyeSBvcGVyYXRpb25zLlxuICogUG9zdC1jb25kaXRpb24gZm9yIHRoZSBjYWxsYmFjazogc3RhdGUgdHJhbnNpdGlvbiB0byBSRUNPVkVSSU5HLlxuICpcbiAqIEByZXR1cm4geyFnb29nLm5ldC5XZWJDaGFubmVsLkZhaWx1cmVSZWNvdmVyeS5TdGF0ZX0gVGhlIHVwZGF0ZWQgc3RhdGVcbiAqIGFzIGRlY2lkZWQgYnkgdGhlIGZhaWx1cmUgcmVjb3ZlcnkgbW9kdWxlLiBVcG9uIGEgcmVjb3ZlcmFibGUgZmFpbHVyZSBldmVudCxcbiAqIHRoZSBzdGF0ZSBpcyB0cmFuc2l0aW9uZWQgdG8gUkVDT1ZFUklORzsgb3IgdGhlIHN0YXRlIGlzIHRyYW5zaXRpb25lZCB0b1xuICogRkFJTEVEIHdoaWNoIGluZGljYXRlcyBhIGZhaWwtZmFzdCBkZWNpc2lvbiBmb3IgdGhlIHJ1bnRpbWUgdG8gZXhlY3V0ZS5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5GYWlsdXJlUmVjb3ZlcnkucHJvdG90eXBlLnNldEZhaWx1cmUgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogVGhlIFdlYmNoYW5uZWwgcnVudGltZSBuZWVkcyBjYWxsIHRoaXMgbWV0aG9kIHdoZW4gd2ViY2hhbm5lbCBpcyBjbG9zZWQgb3JcbiAqIGFib3J0ZWQuXG4gKlxuICogT25jZSB0aGUgaW5zdGFuY2UgaXMgY2xvc2VkLCBhbnkgYWNjZXNzIHRvIHRoZSBpbnN0YW5jZSB3aWxsIGJlIGEgbm8tb3AuXG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuRmFpbHVyZVJlY292ZXJ5LnByb3RvdHlwZS5jbG9zZSA9IGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqXG4gKiBBIHJlcXVlc3QgaGVhZGVyIHRvIGluZGljYXRlIHRvIHRoZSBzZXJ2ZXIgdGhlIG1lc3NhZ2luZyBwcm90b2NvbFxuICogZWFjaCBIVFRQIG1lc3NhZ2UgaXMgc3BlYWtpbmcuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX0NMSUVOVF9QUk9UT0NPTCA9ICdYLUNsaWVudC1Qcm90b2NvbCc7XG5cblxuLyoqXG4gKiBUaGUgdmFsdWUgZm9yIHgtY2xpZW50LXByb3RvY29sIHdoZW4gdGhlIG1lc3NhZ2luZyBwcm90b2NvbCBpcyBXZWJDaGFubmVsLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuWF9DTElFTlRfUFJPVE9DT0xfV0VCX0NIQU5ORUwgPSAnd2ViY2hhbm5lbCc7XG5cblxuLyoqXG4gKiBBIHJlc3BvbnNlIGhlYWRlciBmb3IgdGhlIHNlcnZlciB0byBzaWduYWwgdGhlIHdpcmUtcHJvdG9jb2wgdGhhdFxuICogdGhlIGJyb3dzZXIgZXN0YWJsaXNoZXMgd2l0aCB0aGUgc2VydmVyIChvciBwcm94eSksIGUuZy4gXCJzcGR5XCIgKGFrYSBodHRwLzIpXG4gKiBcInF1aWNcIi4gVGhpcyBpbmZvcm1hdGlvbiBhdm9pZHMgdGhlIG5lZWQgdG8gdXNlIHByaXZhdGUgQVBJcyB0byBkZWNpZGUgaWZcbiAqIEhUVFAgcmVxdWVzdHMgYXJlIG11bHRpcGxleGVkIGV0Yy5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLm5ldC5XZWJDaGFubmVsLlhfQ0xJRU5UX1dJUkVfUFJPVE9DT0wgPSAnWC1DbGllbnQtV2lyZS1Qcm90b2NvbCc7XG5cblxuLyoqXG4gKiBBIHJlc3BvbnNlIGhlYWRlciBmb3IgdGhlIHNlcnZlciB0byBzZW5kIGJhY2sgdGhlIEhUVFAgc2Vzc2lvbiBpZCBhcyBwYXJ0IG9mXG4gKiB0aGUgaW5pdGlhbCBoYW5kc2hha2UuIFRoZSB2YWx1ZSBvZiB0aGUgSFRUUCBzZXNzaW9uIGlkIGlzIG9wYXF1ZSB0byB0aGVcbiAqIFdlYkNoYW5uZWwgcHJvdG9jb2wuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX0hUVFBfU0VTU0lPTl9JRCA9ICdYLUhUVFAtU2Vzc2lvbi1JZCc7XG5cblxuLyoqXG4gKiBBIHJlc3BvbnNlIGhlYWRlciBmb3IgdGhlIHNlcnZlciB0byBzZW5kIGJhY2sgYW55IGluaXRpYWwgcmVzcG9uc2UgZGF0YSBhcyBhXG4gKiBoZWFkZXIgdG8gYXZvaWQgYW55IHBvc3NpYmxlIGJ1ZmZlcmluZyBieSBhbiBpbnRlcm1lZGlhcnksIHdoaWNoIG1heVxuICogYmUgdW5kZXNpcmVkIGR1cmluZyB0aGUgaGFuZHNoYWtlLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWwuWF9IVFRQX0lOSVRJQUxfUkVTUE9OU0UgPSAnWC1IVFRQLUluaXRpYWwtUmVzcG9uc2UnO1xuXG5cbi8qKlxuICogQSByZXF1ZXN0IGhlYWRlciBmb3Igc3BlY2lmeWluZyB0aGUgY29udGVudC10eXBlIG9mIFdlYkNoYW5uZWwgbWVzc2FnZXMsXG4gKiBlLmcuIGFwcGxpY2F0aW9uLWRlZmluZWQgSlNPTiBlbmNvZGluZyBzdHlsZXMuIEN1cnJlbnRseSB0aGlzIGhlYWRlclxuICogaXMgc2VudCBieSB0aGUgY2xpZW50IHZpYSBpbml0TWVzc2FnZUhlYWRlcnMgd2hlbiB0aGUgY2hhbm5lbCBpcyBvcGVuZWQuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX1dFQkNIQU5ORUxfQ09OVEVOVF9UWVBFID0gJ1gtV2ViQ2hhbm5lbC1Db250ZW50LVR5cGUnO1xuXG5cbi8qKlxuICogQSByZXF1ZXN0IGhlYWRlciBmb3Igc3BlY2lmeWluZyB0aGUgY2xpZW50IHByb2ZpbGUgaW4gb3JkZXIgdG8gYXBwbHlcbiAqIGN1c3RvbWl6ZWQgY29uZmlnIHBhcmFtcyBvbiB0aGUgc2VydmVyIHNpZGUsIGUuZy4gdGltZW91dHMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX1dFQkNIQU5ORUxfQ0xJRU5UX1BST0ZJTEUgPSAnWC1XZWJDaGFubmVsLUNsaWVudC1Qcm9maWxlJztcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBMb3cgbGV2ZWwgaGFuZGxpbmcgb2YgWE1MSHR0cFJlcXVlc3QuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5EZWZhdWx0WG1sSHR0cEZhY3RvcnknKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuWG1sSHR0cCcpO1xuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5YbWxIdHRwLk9wdGlvblR5cGUnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LlhtbEh0dHBEZWZpbmVzJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LldyYXBwZXJYbWxIdHRwRmFjdG9yeScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5YbWxIdHRwRmFjdG9yeScpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5uZXQuWGhyTGlrZScpO1xuXG5cbi8qKlxuICogU3RhdGljIGNsYXNzIGZvciBjcmVhdGluZyBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICogQHJldHVybiB7IWdvb2cubmV0Llhockxpa2UuT3JOYXRpdmV9IEEgbmV3IFhNTEh0dHBSZXF1ZXN0IG9iamVjdC5cbiAqL1xuZ29vZy5uZXQuWG1sSHR0cCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLm5ldC5YbWxIdHRwLmZhY3RvcnlfLmNyZWF0ZUluc3RhbmNlKCk7XG59O1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0byBhc3N1bWUgWE1MSHR0cFJlcXVlc3QgZXhpc3RzLiBTZXR0aW5nIHRoaXMgdG9cbiAqICAgICB0cnVlIGJ5cGFzc2VzIHRoZSBBY3RpdmVYIHByb2JpbmcgY29kZS5cbiAqIE5PVEUocnVpbG9wZXMpOiBEdWUgdG8gdGhlIHdheSBKU0NvbXBpbGVyIHdvcmtzLCB0aGlzIGRlZmluZSAqd2lsbCBub3QqIHN0cmlwXG4gKiBvdXQgdGhlIEFjdGl2ZVggcHJvYmluZyBjb2RlIGZyb20gYmluYXJpZXMuICBUbyBhY2hpZXZlIHRoaXMsIHVzZVxuICogYGdvb2cubmV0LlhtbEh0dHBEZWZpbmVzLkFTU1VNRV9OQVRJVkVfWEhSYCBpbnN0ZWFkLlxuICogVE9ETyhydWlsb3Blcyk6IENvbGxhcHNlIGJvdGggZGVmaW5lcy5cbiAqL1xuZ29vZy5uZXQuWG1sSHR0cC5BU1NVTUVfTkFUSVZFX1hIUiA9XG4gICAgZ29vZy5kZWZpbmUoJ2dvb2cubmV0LlhtbEh0dHAuQVNTVU1FX05BVElWRV9YSFInLCBmYWxzZSk7XG5cblxuLyoqIEBjb25zdCAqL1xuZ29vZy5uZXQuWG1sSHR0cERlZmluZXMgPSB7fTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdG8gYXNzdW1lIFhNTEh0dHBSZXF1ZXN0IGV4aXN0cy4gU2V0dGluZyB0aGlzIHRvXG4gKiAgICAgdHJ1ZSBlbGltaW5hdGVzIHRoZSBBY3RpdmVYIHByb2JpbmcgY29kZS5cbiAqL1xuZ29vZy5uZXQuWG1sSHR0cERlZmluZXMuQVNTVU1FX05BVElWRV9YSFIgPVxuICAgIGdvb2cuZGVmaW5lKCdnb29nLm5ldC5YbWxIdHRwRGVmaW5lcy5BU1NVTUVfTkFUSVZFX1hIUicsIGZhbHNlKTtcblxuXG4vKipcbiAqIEdldHMgdGhlIG9wdGlvbnMgdG8gdXNlIHdpdGggdGhlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMgb2J0YWluZWQgdXNpbmdcbiAqIHRoZSBzdGF0aWMgbWV0aG9kcy5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIG9wdGlvbnMuXG4gKi9cbmdvb2cubmV0LlhtbEh0dHAuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLm5ldC5YbWxIdHRwLmZhY3RvcnlfLmdldE9wdGlvbnMoKTtcbn07XG5cblxuLyoqXG4gKiBUeXBlIG9mIG9wdGlvbnMgdGhhdCBhbiBYbWxIdHRwIG9iamVjdCBjYW4gaGF2ZS5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmdvb2cubmV0LlhtbEh0dHAuT3B0aW9uVHlwZSA9IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgYSBnb29nLm51bGxGdW5jdGlvbiBzaG91bGQgYmUgdXNlZCB0byBjbGVhciB0aGUgb25yZWFkeXN0YXRlY2hhbmdlXG4gICAqIGhhbmRsZXIgaW5zdGVhZCBvZiBudWxsLlxuICAgKi9cbiAgVVNFX05VTExfRlVOQ1RJT046IDAsXG5cbiAgLyoqXG4gICAqIE5PVEUodXNlcik6IEluIElFIGlmIHNlbmQoKSBlcnJvcnMgb24gYSAqbG9jYWwqIHJlcXVlc3QgdGhlIHJlYWR5c3RhdGVcbiAgICogaXMgc3RpbGwgY2hhbmdlZCB0byBDT01QTEVURS4gIFdlIG5lZWQgdG8gaWdub3JlIGl0IGFuZCBhbGxvdyB0aGVcbiAgICogdHJ5L2NhdGNoIGFyb3VuZCBzZW5kKCkgdG8gcGljayB1cCB0aGUgZXJyb3IuXG4gICAqL1xuICBMT0NBTF9SRVFVRVNUX0VSUk9SOiAxLFxufTtcblxuXG4vKipcbiAqIFN0YXR1cyBjb25zdGFudHMgZm9yIFhNTEhUVFAsIG1hdGNoZXM6XG4gKiBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM0MzYxKHY9dnMuODUpLmFzcHhcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZSA9IHtcbiAgLyoqXG4gICAqIENvbnN0YW50IGZvciB3aGVuIHhtbGh0dHByZXF1ZXN0LnJlYWR5U3RhdGUgaXMgdW5pbml0aWFsaXplZFxuICAgKi9cbiAgVU5JTklUSUFMSVpFRDogMCxcblxuICAvKipcbiAgICogQ29uc3RhbnQgZm9yIHdoZW4geG1saHR0cHJlcXVlc3QucmVhZHlTdGF0ZSBpcyBsb2FkaW5nLlxuICAgKi9cbiAgTE9BRElORzogMSxcblxuICAvKipcbiAgICogQ29uc3RhbnQgZm9yIHdoZW4geG1saHR0cHJlcXVlc3QucmVhZHlTdGF0ZSBpcyBsb2FkZWQuXG4gICAqL1xuICBMT0FERUQ6IDIsXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IGZvciB3aGVuIHhtbGh0dHByZXF1ZXN0LnJlYWR5U3RhdGUgaXMgaW4gYW4gaW50ZXJhY3RpdmUgc3RhdGUuXG4gICAqL1xuICBJTlRFUkFDVElWRTogMyxcblxuICAvKipcbiAgICogQ29uc3RhbnQgZm9yIHdoZW4geG1saHR0cHJlcXVlc3QucmVhZHlTdGF0ZSBpcyBjb21wbGV0ZWRcbiAgICovXG4gIENPTVBMRVRFOiA0LFxufTtcblxuXG4vKipcbiAqIFRoZSBnbG9iYWwgZmFjdG9yeSBpbnN0YW5jZSBmb3IgY3JlYXRpbmcgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqIEB0eXBlIHtnb29nLm5ldC5YbWxIdHRwRmFjdG9yeX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LlhtbEh0dHAuZmFjdG9yeV87XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBmYWN0b3JpZXMgZm9yIGNyZWF0aW5nIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMgYW5kIHRoZWlyIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5IFRoZSBmYWN0b3J5IGZvciBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uc0ZhY3RvcnkgVGhlIGZhY3RvcnkgZm9yIG9wdGlvbnMuXG4gKiBAZGVwcmVjYXRlZCBVc2Ugc2V0R2xvYmFsRmFjdG9yeSBpbnN0ZWFkLlxuICovXG5nb29nLm5ldC5YbWxIdHRwLnNldEZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5LCBvcHRpb25zRmFjdG9yeSkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubmV0LlhtbEh0dHAuc2V0R2xvYmFsRmFjdG9yeShuZXcgZ29vZy5uZXQuV3JhcHBlclhtbEh0dHBGYWN0b3J5KFxuICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydChmYWN0b3J5KSwgZ29vZy5hc3NlcnRzLmFzc2VydChvcHRpb25zRmFjdG9yeSkpKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBnbG9iYWwgZmFjdG9yeSBvYmplY3QuXG4gKiBAcGFyYW0geyFnb29nLm5ldC5YbWxIdHRwRmFjdG9yeX0gZmFjdG9yeSBOZXcgZ2xvYmFsIGZhY3Rvcnkgb2JqZWN0LlxuICovXG5nb29nLm5ldC5YbWxIdHRwLnNldEdsb2JhbEZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5uZXQuWG1sSHR0cC5mYWN0b3J5XyA9IGZhY3Rvcnk7XG59O1xuXG5cblxuLyoqXG4gKiBEZWZhdWx0IGZhY3RvcnkgdG8gdXNlIHdoZW4gY3JlYXRpbmcgeGhyIG9iamVjdHMuICBZb3UgcHJvYmFibHkgc2hvdWxkbid0IGJlXG4gKiBpbnN0YW50aWF0aW5nIHRoaXMgZGlyZWN0bHksIGJ1dCByYXRoZXIgdXNpbmcgaXQgdmlhIGdvb2cubmV0LlhtbEh0dHAuXG4gKiBAZXh0ZW5kcyB7Z29vZy5uZXQuWG1sSHR0cEZhY3Rvcnl9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZ29vZy5uZXQuRGVmYXVsdFhtbEh0dHBGYWN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5uZXQuWG1sSHR0cEZhY3RvcnkuY2FsbCh0aGlzKTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cubmV0LkRlZmF1bHRYbWxIdHRwRmFjdG9yeSwgZ29vZy5uZXQuWG1sSHR0cEZhY3RvcnkpO1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cubmV0LkRlZmF1bHRYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlSW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBwcm9nSWQgPSB0aGlzLmdldFByb2dJZF8oKTtcbiAgaWYgKHByb2dJZCkge1xuICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChwcm9nSWQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgfVxufTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLm5ldC5EZWZhdWx0WG1sSHR0cEZhY3RvcnkucHJvdG90eXBlLmludGVybmFsR2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHByb2dJZCA9IHRoaXMuZ2V0UHJvZ0lkXygpO1xuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmIChwcm9nSWQpIHtcbiAgICBvcHRpb25zW2dvb2cubmV0LlhtbEh0dHAuT3B0aW9uVHlwZS5VU0VfTlVMTF9GVU5DVElPTl0gPSB0cnVlO1xuICAgIG9wdGlvbnNbZ29vZy5uZXQuWG1sSHR0cC5PcHRpb25UeXBlLkxPQ0FMX1JFUVVFU1RfRVJST1JdID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn07XG5cblxuLyoqXG4gKiBUaGUgQWN0aXZlWCBQUk9HIElEIHN0cmluZyB0byB1c2UgdG8gY3JlYXRlIHhocidzIGluIElFLiBMYXppbHkgaW5pdGlhbGl6ZWQuXG4gKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LkRlZmF1bHRYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuaWVQcm9nSWRfO1xuXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgcHJpdmF0ZSBzdGF0ZSB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEFjdGl2ZVggUFJPRyBJRCBzdHJpbmcgdG8gdXNlIHRvIGNyZWF0ZSB4aHIncyBpbiBJRS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LkRlZmF1bHRYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuZ2V0UHJvZ0lkXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChnb29nLm5ldC5YbWxIdHRwLkFTU1VNRV9OQVRJVkVfWEhSIHx8XG4gICAgICBnb29nLm5ldC5YbWxIdHRwRGVmaW5lcy5BU1NVTUVfTkFUSVZFX1hIUikge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIFRoZSBmb2xsb3dpbmcgYmxvZyBwb3N0IGRlc2NyaWJlcyB3aGF0IFBST0cgSURzIHRvIHVzZSB0byBjcmVhdGUgdGhlXG4gIC8vIFhNTEhUVFAgb2JqZWN0IGluIEludGVybmV0IEV4cGxvcmVyOlxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20veG1sdGVhbS9hcmNoaXZlLzIwMDYvMTAvMjMvdXNpbmctdGhlLXJpZ2h0LXZlcnNpb24tb2YtbXN4bWwtaW4taW50ZXJuZXQtZXhwbG9yZXIuYXNweFxuICAvLyBIb3dldmVyIHdlIGRvIG5vdCAoeWV0KSBmdWxseSB0cnVzdCB0aGF0IHRoaXMgd2lsbCBiZSBPSyBmb3Igb2xkIHZlcnNpb25zXG4gIC8vIG9mIElFIG9uIFdpbjl4IHNvIHdlIHRoZXJlZm9yZSBrZWVwIHRoZSBsYXN0IDIuXG4gIGlmICghdGhpcy5pZVByb2dJZF8gJiYgdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgQWN0aXZlWE9iamVjdCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIENhbmRpZGF0ZSBBY3RpdmUgWCB0eXBlcy5cbiAgICBjb25zdCBBQ1RJVkVfWF9JREVOVFMgPSBbXG4gICAgICAnTVNYTUwyLlhNTEhUVFAuNi4wJyxcbiAgICAgICdNU1hNTDIuWE1MSFRUUC4zLjAnLFxuICAgICAgJ01TWE1MMi5YTUxIVFRQJyxcbiAgICAgICdNaWNyb3NvZnQuWE1MSFRUUCcsXG4gICAgXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFDVElWRV9YX0lERU5UUy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0gQUNUSVZFX1hfSURFTlRTW2ldO1xuXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQWN0aXZlWE9iamVjdChjYW5kaWRhdGUpO1xuICAgICAgICAvLyBOT1RFKHVzZXIpOiBjYW5ub3QgYXNzaWduIHByb2dpZCBhbmQgcmV0dXJuIGNhbmRpZGF0ZSBpbiBvbmUgbGluZVxuICAgICAgICAvLyBiZWNhdXNlIEpTQ29tcGlsZXIgY29tcGxhaW5nczogQlVHIDY1ODEyNlxuICAgICAgICB0aGlzLmllUHJvZ0lkXyA9IGNhbmRpZGF0ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZzsgdHJ5IG5leHQgY2hvaWNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY291bGRuJ3QgZmluZCBhbnkgbWF0Y2hlc1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NvdWxkIG5vdCBjcmVhdGUgQWN0aXZlWE9iamVjdC4gQWN0aXZlWCBtaWdodCBiZSBkaXNhYmxlZCwnICtcbiAgICAgICAgJyBvciBNU1hNTCBtaWdodCBub3QgYmUgaW5zdGFsbGVkJyk7XG4gIH1cblxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLmllUHJvZ0lkXyk7XG59O1xuXG5cbi8vIFNldCB0aGUgZ2xvYmFsIGZhY3RvcnkgdG8gYW4gaW5zdGFuY2Ugb2YgdGhlIGRlZmF1bHQgZmFjdG9yeS5cbmdvb2cubmV0LlhtbEh0dHAuc2V0R2xvYmFsRmFjdG9yeShuZXcgZ29vZy5uZXQuRGVmYXVsdFhtbEh0dHBGYWN0b3J5KCkpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERlZmluaXRpb24gb2YgdGhlIENoYW5uZWxSZXF1ZXN0IGNsYXNzLiBUaGUgcmVxdWVzdFxuICogb2JqZWN0IGVuY2Fwc3VsYXRlcyB0aGUgbG9naWMgZm9yIG1ha2luZyBhIHNpbmdsZSByZXF1ZXN0LCBlaXRoZXIgZm9yIHRoZVxuICogZm9yd2FyZCBjaGFubmVsLCBiYWNrIGNoYW5uZWwsIG9yIHRlc3QgY2hhbm5lbCwgdG8gdGhlIHNlcnZlci4gSXQgY29udGFpbnNcbiAqIHRoZSBsb2dpYyBmb3IgdGhlIHR3byB0eXBlcyBvZiB0cmFuc3BvcnRzIHdlIHVzZTpcbiAqIFhNTEhUVFAgYW5kIEltYWdlIHJlcXVlc3QuIEl0IHByb3ZpZGVzIHRpbWVvdXQgZGV0ZWN0aW9uLiBNb3JlIHRyYW5zcG9ydHNcbiAqIHRvIGJlIGFkZGVkIGluIGZ1dHVyZSwgc3VjaCBhcyBGZXRjaCwgV2ViU29ja2V0LlxuICpcbiAqL1xuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkNoYW5uZWxSZXF1ZXN0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5UaW1lcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5hc3luYy5UaHJvdHRsZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmRpc3Bvc2UnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5ldmVudHMuRXZlbnRIYW5kbGVyJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsRGVidWcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLmVudmlyb25tZW50Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuRXJyb3JDb2RlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LkV2ZW50VHlwZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5XZWJDaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LlhtbEh0dHAnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuVXJpJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLmV2ZW50cy5FdmVudCcpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmUuUXVldWVkTWFwJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLm5ldC5YaHJJbycpO1xuXG5cblxuLyoqXG4gKiBBIG5ldyBDaGFubmVsUmVxdWVzdCBpcyBjcmVhdGVkIGZvciBlYWNoIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsfSBjaGFubmVsXG4gKiAgICAgVGhlIGNoYW5uZWwgdGhhdCBvd25zIHRoaXMgcmVxdWVzdC5cbiAqIEBwYXJhbSB7Z29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxEZWJ1Z30gY2hhbm5lbERlYnVnIEFcbiAqICAgICBXZWJDaGFubmVsRGVidWcgdG8gdXNlIGZvciBsb2dnaW5nLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc2Vzc2lvbklkIFRoZSBzZXNzaW9uIGlkIGZvciB0aGUgY2hhbm5lbC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcj19IG9wdF9yZXF1ZXN0SWQgVGhlIHJlcXVlc3QgaWQgZm9yIHRoaXMgcmVxdWVzdC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3JldHJ5SWQgVGhlIHJldHJ5IGlkIGZvciB0aGlzIHJlcXVlc3QuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBzdHJ1Y3RcbiAqIEBmaW5hbFxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3QgPSBmdW5jdGlvbihcbiAgICBjaGFubmVsLCBjaGFubmVsRGVidWcsIG9wdF9zZXNzaW9uSWQsIG9wdF9yZXF1ZXN0SWQsIG9wdF9yZXRyeUlkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFRoZSBjaGFubmVsIG9iamVjdCB0aGF0IG93bnMgdGhlIHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHtnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbH1cbiAgICovXG4gIHRoaXMuY2hhbm5lbF8gPSBjaGFubmVsO1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhbm5lbCBkZWJ1ZyB0byB1c2UgZm9yIGxvZ2dpbmdcbiAgICogQHByaXZhdGUge2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsRGVidWd9XG4gICAqL1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18gPSBjaGFubmVsRGVidWc7XG5cbiAgLyoqXG4gICAqIFRoZSBTZXNzaW9uIElEIGZvciB0aGUgY2hhbm5lbC5cbiAgICogQHByaXZhdGUge3N0cmluZ3x1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLnNpZF8gPSBvcHRfc2Vzc2lvbklkO1xuXG4gIC8qKlxuICAgKiBUaGUgUklEIChyZXF1ZXN0IElEKSBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMucmlkXyA9IG9wdF9yZXF1ZXN0SWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBhdHRlbXB0IG51bWJlciBvZiB0aGUgY3VycmVudCByZXF1ZXN0LlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5yZXRyeUlkXyA9IG9wdF9yZXRyeUlkIHx8IDE7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0byBrZWVwIHRyYWNrIG9mIHRoZSBjaGFubmVsIHJlcXVlc3QgZXZlbnQgbGlzdGVuZXJzLlxuICAgKiBAcHJpdmF0ZSB7IWdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcjxcbiAgICogICAgICFnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3Q+fVxuICAgKi9cbiAgdGhpcy5ldmVudEhhbmRsZXJfID0gbmV3IGdvb2cuZXZlbnRzLkV2ZW50SGFuZGxlcih0aGlzKTtcblxuICAvKipcbiAgICogVGhlIHRpbWVvdXQgaW4gbXMgYmVmb3JlIGZhaWxpbmcgdGhlIHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnRpbWVvdXRfID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkNoYW5uZWxSZXF1ZXN0LlRJTUVPVVRfTVNfO1xuXG4gIC8qKlxuICAgKiBBIHRpbWVyIGZvciBwb2xsaW5nIHJlc3BvbnNlVGV4dCBpbiBicm93c2VycyB0aGF0IGRvbid0IGZpcmVcbiAgICogb25yZWFkeXN0YXRlY2hhbmdlIGR1cmluZyBpbmNyZW1lbnRhbCBsb2FkaW5nIG9mIHJlc3BvbnNlVGV4dC5cbiAgICogQHByaXZhdGUge2dvb2cuVGltZXJ9XG4gICAqL1xuICB0aGlzLnBvbGxpbmdUaW1lcl8gPVxuICAgICAgbmV3IGdvb2cuVGltZXIoZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLmVudmlyb25tZW50LmdldFBvbGxpbmdJbnRlcnZhbCgpKTtcblxuICAvKipcbiAgICogRXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byBhbGwgdGhlIHJlcXVlc3RzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAgICogQHByaXZhdGUgez9PYmplY3R9XG4gICAqL1xuICB0aGlzLmV4dHJhSGVhZGVyc18gPSBudWxsO1xuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwuIFRoaXMgaXMgb25seSBzZXQgdG8gdHJ1ZSBhZnRlciB0aGVcbiAgICogcmVxdWVzdCBzdWNjZXNzZnVsbHkgY29tcGxldGVzLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuc3VjY2Vzc2Z1bF8gPSBmYWxzZTtcblxuXG4gIC8qKlxuICAgKiBUaGUgVGltZXJJRCBvZiB0aGUgdGltZXIgdXNlZCB0byBkZXRlY3QgaWYgdGhlIHJlcXVlc3QgaGFzIHRpbWVkLW91dC5cbiAgICogQHR5cGUgez9udW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLndhdGNoRG9nVGltZXJJZF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSBpbiB0aGUgZnV0dXJlIHdoZW4gdGhlIHJlcXVlc3Qgd2lsbCB0aW1lb3V0LlxuICAgKiBAcHJpdmF0ZSB7P251bWJlcn1cbiAgICovXG4gIHRoaXMud2F0Y2hEb2dUaW1lb3V0VGltZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSB0aGUgcmVxdWVzdCBzdGFydGVkLlxuICAgKiBAcHJpdmF0ZSB7P251bWJlcn1cbiAgICovXG4gIHRoaXMucmVxdWVzdFN0YXJ0VGltZV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiByZXF1ZXN0IChYTUxIVFRQLCBJTUcpXG4gICAqIEBwcml2YXRlIHs/bnVtYmVyfVxuICAgKi9cbiAgdGhpcy50eXBlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIFVyaSBmb3IgdGhlIHJlcXVlc3QuIFRoZSBpbmNsdWRlcyBhbGwgdGhlIHBhcmFtZXRlcnMgZXhjZXB0IHRoZVxuICAgKiBvbmUgdGhhdCBpbmRpY2F0ZXMgdGhlIHJldHJ5IG51bWJlci5cbiAgICogQHByaXZhdGUgez9nb29nLlVyaX1cbiAgICovXG4gIHRoaXMuYmFzZVVyaV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVxdWVzdCBVcmkgdGhhdCB3YXMgYWN0dWFsbHkgdXNlZCBmb3IgdGhlIG1vc3QgcmVjZW50IHJlcXVlc3QgYXR0ZW1wdC5cbiAgICogQHByaXZhdGUgez9nb29nLlVyaX1cbiAgICovXG4gIHRoaXMucmVxdWVzdFVyaV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcG9zdCBkYXRhLCBpZiB0aGUgcmVxdWVzdCBpcyBhIHBvc3QuXG4gICAqIEBwcml2YXRlIHs/c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5wb3N0RGF0YV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBwZW5kaW5nIG1lc3NhZ2VzIHRoYXQgd2UgaGF2ZSBlaXRoZXIgcmVjZWl2ZWQgYSBub24tc3VjY2Vzc2Z1bFxuICAgKiByZXNwb25zZSBmb3IsIG9yIG5vIHJlc3BvbnNlIGF0IGFsbCwgYW5kIHdoaWNoIHRoZXJlZm9yZSBtYXkgb3IgbWF5IG5vdFxuICAgKiBoYXZlIGJlZW4gcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQHByaXZhdGUgeyFBcnJheTxnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5RdWV1ZWRNYXA+fVxuICAgKi9cbiAgdGhpcy5wZW5kaW5nTWVzc2FnZXNfID0gW107XG5cbiAgLyoqXG4gICAqIFRoZSBYaHJMdGUgcmVxdWVzdCBpZiB0aGUgcmVxdWVzdCBpcyB1c2luZyBYTUxIVFRQXG4gICAqIEBwcml2YXRlIHs/Z29vZy5uZXQuWGhySW99XG4gICAqL1xuICB0aGlzLnhtbEh0dHBfID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG9mIHdoZXJlIHRoZSBuZXh0IHVucHJvY2Vzc2VkIGNodW5rIHN0YXJ0cyBpbiB0aGUgcmVzcG9uc2VcbiAgICogdGV4dC5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMueG1sSHR0cENodW5rU3RhcnRfID0gMDtcblxuICAvKipcbiAgICogVGhlIHZlcmIgKEdldCBvciBQb3N0KSBmb3IgdGhlIHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHs/c3RyaW5nfVxuICAgKi9cbiAgdGhpcy52ZXJiXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsYXN0IGVycm9yIGlmIHRoZSByZXF1ZXN0IGZhaWxlZC5cbiAgICogQHByaXZhdGUgez9nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3QuRXJyb3J9XG4gICAqL1xuICB0aGlzLmxhc3RFcnJvcl8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbGFzdCBzdGF0dXMgY29kZSByZWNlaXZlZC5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubGFzdFN0YXR1c0NvZGVfID0gLTE7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHJlcXVlc3QgaGFzIGJlZW4gY2FuY2VsbGVkIGR1ZSB0byBhIGNhbGwgdG8gY2FuY2VsLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuY2FuY2VsbGVkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBBIHRocm90dGxlIHRpbWUgaW4gbXMgZm9yIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnRzIGZvciB0aGUgYmFja2NoYW5uZWwuXG4gICAqIFVzZWZ1bCBmb3IgdGhyb3R0bGluZyB3aGVuIHJlYWR5IHN0YXRlIGlzIElOVEVSQUNUSVZFIChwYXJ0aWFsIGRhdGEpLlxuICAgKiBJZiBzZXQgdG8gemVybyBubyB0aHJvdHRsZSBpcyB1c2VkLlxuICAgKlxuICAgKiBTZWUgV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnJlYWR5U3RhdGVDaGFuZ2VUaHJvdHRsZU1zX1xuICAgKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5yZWFkeVN0YXRlQ2hhbmdlVGhyb3R0bGVNc18gPSAwO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhyb3R0bGUgZm9yIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnRzIGZvciB0aGUgY3VycmVudCByZXF1ZXN0LCBvciBudWxsXG4gICAqIGlmIHRoZXJlIGlzIG5vbmUuXG4gICAqIEBwcml2YXRlIHs/Z29vZy5hc3luYy5UaHJvdHRsZX1cbiAgICovXG4gIHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdGhlIHJlc3VsdCBpcyBleHBlY3RlZCB0byBiZSBlbmNvZGVkIGZvciBjaHVua2luZyBhbmQgdGh1c1xuICAgKiByZXF1aXJlcyBkZWNvZGluZy5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmRlY29kZUNodW5rc18gPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBkZWNvZGUgeC1odHRwLWluaXRpYWwtcmVzcG9uc2UuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5kZWNvZGVJbml0aWFsUmVzcG9uc2VfID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgeC1odHRwLWluaXRpYWwtcmVzcG9uc2UgaGFzIGJlZW4gZGVjb2RlZCAoZGlzcGF0Y2hlZCkuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5pbml0aWFsUmVzcG9uc2VEZWNvZGVkXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBmaXJzdCBieXRlIG9mIHJlc3BvbnNlIGJvZHkgaGFzIGFycml2ZWQsIGZvciBhIHN1Y2Nlc3NmdWxcbiAgICogcmVzcG9uc2UuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5maXJzdEJ5dGVSZWNlaXZlZF8gPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc3RhdGUgb2YgZmV0Y2ggcmVzcG9uc2VzIGlmIHdlYmNoYW5uZWwgaXMgdXNpbmcgV0hBVFdHXG4gICAqIGZldGNoL3N0cmVhbXMuXG4gICAqIEBwcml2YXRlIHshZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkZldGNoUmVzcG9uc2VTdGF0ZX1cbiAgICovXG4gIHRoaXMuZmV0Y2hSZXNwb25zZVN0YXRlXyA9IG5ldyBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuRmV0Y2hSZXNwb25zZVN0YXRlKCk7XG59O1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBmZXRjaC9zdHJlYW0gcHJvcGVydGllcy5cbiAqIEBzdHJ1Y3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuRmV0Y2hSZXNwb25zZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFRoZSBUZXh0RGVjb2RlciBmb3IgZGVjb2RpbmcgVWludDhBcnJheSByZXNwb25zZXMgZnJvbSBmZXRjaCByZXF1ZXN0LlxuICAgKiBAdHlwZSB7P2dvb2cuZ2xvYmFsLlRleHREZWNvZGVyfVxuICAgKi9cbiAgdGhpcy50ZXh0RGVjb2RlciA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmNvbnN1bWVkIHJlc3BvbnNlIHRleHQgZnJvbSB0aGUgZmV0Y2ggcmVxdWVzdHMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnJlc3BvbnNlQnVmZmVyID0gJyc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSByZXNwb25zZSBib2R5IGhhcyBhcnJpdmVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMucmVzcG9uc2VBcnJpdmVkRm9yRmV0Y2ggPSBmYWxzZTtcbn07XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcbmNvbnN0IFdlYkNoYW5uZWwgPSBnb29nLm5ldC5XZWJDaGFubmVsO1xuY29uc3QgQ2hhbm5lbCA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsO1xuY29uc3QgQ2hhbm5lbFJlcXVlc3QgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3Q7XG5jb25zdCBGZXRjaFJlc3BvbnNlU3RhdGUgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuRmV0Y2hSZXNwb25zZVN0YXRlO1xuY29uc3QgcmVxdWVzdFN0YXRzID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cztcbmNvbnN0IFdlYkNoYW5uZWxEZWJ1ZyA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsRGVidWc7XG5jb25zdCBlbnZpcm9ubWVudCA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5lbnZpcm9ubWVudDtcblxuLyoqXG4gKiBEZWZhdWx0IHRpbWVvdXQgaW4gTVMgZm9yIGEgcmVxdWVzdC4gVGhlIHNlcnZlciBtdXN0IHJldHVybiBkYXRhIHdpdGhpbiB0aGlzXG4gKiB0aW1lIGxpbWl0IGZvciB0aGUgcmVxdWVzdCB0byBub3QgdGltZW91dC5cbiAqIEBwcml2YXRlIHtudW1iZXJ9XG4gKi9cbkNoYW5uZWxSZXF1ZXN0LlRJTUVPVVRfTVNfID0gNDUgKiAxMDAwO1xuXG5cbi8qKlxuICogRW51bSBmb3IgY2hhbm5lbCByZXF1ZXN0cyB0eXBlXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QuVHlwZV8gPSB7XG4gIC8qKlxuICAgKiBYTUxIVFRQIHJlcXVlc3RzLlxuICAgKi9cbiAgWE1MX0hUVFA6IDEsXG5cbiAgLyoqXG4gICAqIElNRyByZXF1ZXN0cy5cbiAgICovXG4gIENMT1NFX1JFUVVFU1Q6IDJcbn07XG5cblxuLyoqXG4gKiBFbnVtIHR5cGUgZm9yIGlkZW50aWZ5aW5nIGFuIGVycm9yLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuQ2hhbm5lbFJlcXVlc3QuRXJyb3IgPSB7XG4gIC8qKlxuICAgKiBFcnJvcnMgZHVlIHRvIGEgbm9uLTIwMCBzdGF0dXMgY29kZS5cbiAgICovXG4gIFNUQVRVUzogMCxcblxuICAvKipcbiAgICogRXJyb3JzIGR1ZSB0byBubyBkYXRhIGJlaW5nIHJldHVybmVkLlxuICAgKi9cbiAgTk9fREFUQTogMSxcblxuICAvKipcbiAgICogRXJyb3JzIGR1ZSB0byBhIHRpbWVvdXQuXG4gICAqL1xuICBUSU1FT1VUOiAyLFxuXG4gIC8qKlxuICAgKiBFcnJvcnMgZHVlIHRvIHRoZSBzZXJ2ZXIgcmV0dXJuaW5nIGFuIHVua25vd24uXG4gICAqL1xuICBVTktOT1dOX1NFU1NJT05fSUQ6IDMsXG5cbiAgLyoqXG4gICAqIEVycm9ycyBkdWUgdG8gYmFkIGRhdGEgYmVpbmcgcmVjZWl2ZWQuXG4gICAqL1xuICBCQURfREFUQTogNCxcblxuICAvKipcbiAgICogRXJyb3JzIGR1ZSB0byB0aGUgaGFuZGxlciB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gICAqL1xuICBIQU5ETEVSX0VYQ0VQVElPTjogNSxcblxuICAvKipcbiAgICogVGhlIGJyb3dzZXIgZGVjbGFyZWQgaXRzZWxmIG9mZmxpbmUgZHVyaW5nIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgQlJPV1NFUl9PRkZMSU5FOiA2XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIHVzZWZ1bCBlcnJvciBzdHJpbmcgZm9yIGRlYnVnZ2luZyBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIGVycm9yXG4gKiBjb2RlLlxuICogQHBhcmFtIHs/Q2hhbm5lbFJlcXVlc3QuRXJyb3J9IGVycm9yQ29kZSBUaGUgZXJyb3IgY29kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNDb2RlIFRoZSBIVFRQIHN0YXR1cyBjb2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZXJyb3Igc3RyaW5nIGZvciB0aGUgZ2l2ZW4gY29kZSBjb21iaW5hdGlvbi5cbiAqL1xuQ2hhbm5lbFJlcXVlc3QuZXJyb3JTdHJpbmdGcm9tQ29kZSA9IGZ1bmN0aW9uKGVycm9yQ29kZSwgc3RhdHVzQ29kZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgY2FzZSBDaGFubmVsUmVxdWVzdC5FcnJvci5TVEFUVVM6XG4gICAgICByZXR1cm4gJ05vbi0yMDAgcmV0dXJuIGNvZGUgKCcgKyBzdGF0dXNDb2RlICsgJyknO1xuICAgIGNhc2UgQ2hhbm5lbFJlcXVlc3QuRXJyb3IuTk9fREFUQTpcbiAgICAgIHJldHVybiAnWE1MSFRUUCBmYWlsdXJlIChubyBkYXRhKSc7XG4gICAgY2FzZSBDaGFubmVsUmVxdWVzdC5FcnJvci5USU1FT1VUOlxuICAgICAgcmV0dXJuICdIdHRwQ29ubmVjdGlvbiB0aW1lb3V0JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdVbmtub3duIGVycm9yJztcbiAgfVxufTtcblxuXG4vKipcbiAqIFNlbnRpbmVsIHZhbHVlIHVzZWQgdG8gaW5kaWNhdGUgYW4gaW52YWxpZCBjaHVuayBpbiBhIG11bHRpLWNodW5rIHJlc3BvbnNlLlxuICogQHByaXZhdGUgeyFPYmplY3R9XG4gKi9cbkNoYW5uZWxSZXF1ZXN0LklOVkFMSURfQ0hVTktfID0ge307XG5cblxuLyoqXG4gKiBTZW50aW5lbCB2YWx1ZSB1c2VkIHRvIGluZGljYXRlIGFuIGluY29tcGxldGUgY2h1bmsgaW4gYSBtdWx0aS1jaHVua1xuICogcmVzcG9uc2UuXG4gKiBAcHJpdmF0ZSB7IU9iamVjdH1cbiAqL1xuQ2hhbm5lbFJlcXVlc3QuSU5DT01QTEVURV9DSFVOS18gPSB7fTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBYSFIgc3RyZWFtaW5nIGlzIHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBYSFIgc3RyZWFtaW5nIGlzIHN1cHBvcnRlZC5cbiAqIEBzZWUgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtbGlicmFyeS9pc3N1ZXMvZGV0YWlsP2lkPTM0NlxuICovXG5DaGFubmVsUmVxdWVzdC5zdXBwb3J0c1hoclN0cmVhbWluZyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAhZ29vZy51c2VyQWdlbnQuSUUgfHwgZ29vZy51c2VyQWdlbnQuaXNEb2N1bWVudE1vZGVPckhpZ2hlcigxMCk7XG59O1xuXG5cbi8qKlxuICogU2V0cyBleHRyYSBIVFRQIGhlYWRlcnMgdG8gYWRkIHRvIGFsbCB0aGUgcmVxdWVzdHMgc2VudCB0byB0aGUgc2VydmVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHRyYUhlYWRlcnMgVGhlIEhUVFAgaGVhZGVycy5cbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnNldEV4dHJhSGVhZGVycyA9IGZ1bmN0aW9uKGV4dHJhSGVhZGVycykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZXh0cmFIZWFkZXJzXyA9IGV4dHJhSGVhZGVycztcbn07XG5cblxuLyoqXG4gKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgSFRUUCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZlcmIgVGhlIEhUVFAgbWV0aG9kXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5zZXRWZXJiID0gZnVuY3Rpb24odmVyYikge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMudmVyYl8gPSB2ZXJiO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHRpbWVvdXQgZm9yIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0ICAgVGhlIHRpbWVvdXQgaW4gTVMgZm9yIHdoZW4gd2UgZmFpbCB0aGUgcmVxdWVzdC5cbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy50aW1lb3V0XyA9IHRpbWVvdXQ7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgdGhyb3R0bGUgZm9yIGhhbmRsaW5nIG9ucmVhZHlzdGF0ZWNoYW5nZSBldmVudHMgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aHJvdHRsZSBUaGUgdGhyb3R0bGUgaW4gbXMuICBBIHZhbHVlIG9mIHplcm8gaW5kaWNhdGVzXG4gKiAgICAgbm8gdGhyb3R0bGUuXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZWFkeVN0YXRlQ2hhbmdlVGhyb3R0bGUgPSBmdW5jdGlvbih0aHJvdHRsZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlTXNfID0gdGhyb3R0bGU7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgcGVuZGluZyBtZXNzYWdlcyB0aGF0IHRoaXMgcmVxdWVzdCBpcyBoYW5kbGluZy5cbiAqXG4gKiBAcGFyYW0geyFBcnJheTxnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5RdWV1ZWRNYXA+fSBwZW5kaW5nTWVzc2FnZXNcbiAqICAgICBUaGUgcGVuZGluZyBtZXNzYWdlcyBmb3IgdGhpcyByZXF1ZXN0LlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuc2V0UGVuZGluZ01lc3NhZ2VzID0gZnVuY3Rpb24ocGVuZGluZ01lc3NhZ2VzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5wZW5kaW5nTWVzc2FnZXNfID0gcGVuZGluZ01lc3NhZ2VzO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIHBlbmRpbmcgbWVzc2FnZXMgdGhhdCB0aGlzIHJlcXVlc3QgaXMgaGFuZGxpbmcsIGluIGNhc2Ugb2YgYSByZXRyeS5cbiAqXG4gKiBAcmV0dXJuIHshQXJyYXk8Z29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmUuUXVldWVkTWFwPn0gVGhlIHBlbmRpbmdcbiAqICAgICBtZXNzYWdlcyBmb3IgdGhpcyByZXF1ZXN0LlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0UGVuZGluZ01lc3NhZ2VzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucGVuZGluZ01lc3NhZ2VzXztcbn07XG5cblxuLyoqXG4gKiBVc2VzIFhNTEhUVFAgdG8gc2VuZCBhbiBIVFRQIFBPU1QgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuVXJpfSB1cmkgIFRoZSB1cmkgb2YgdGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBvc3REYXRhICBUaGUgZGF0YSBmb3IgdGhlIHBvc3QgYm9keS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVjb2RlQ2h1bmtzICBXaGV0aGVyIHRvIHRoZSByZXN1bHQgaXMgZXhwZWN0ZWQgdG8gYmVcbiAqICAgICBlbmNvZGVkIGZvciBjaHVua2luZyBhbmQgdGh1cyByZXF1aXJlcyBkZWNvZGluZy5cbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnhtbEh0dHBQb3N0ID0gZnVuY3Rpb24odXJpLCBwb3N0RGF0YSwgZGVjb2RlQ2h1bmtzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy50eXBlXyA9IENoYW5uZWxSZXF1ZXN0LlR5cGVfLlhNTF9IVFRQO1xuICB0aGlzLmJhc2VVcmlfID0gdXJpLmNsb25lKCkubWFrZVVuaXF1ZSgpO1xuICB0aGlzLnBvc3REYXRhXyA9IHBvc3REYXRhO1xuICB0aGlzLmRlY29kZUNodW5rc18gPSBkZWNvZGVDaHVua3M7XG4gIHRoaXMuc2VuZFhtbEh0dHBfKG51bGwgLyogaG9zdFByZWZpeCAqLyk7XG59O1xuXG5cbi8qKlxuICogVXNlcyBYTUxIVFRQIHRvIHNlbmQgYW4gSFRUUCBHRVQgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuVXJpfSB1cmkgIFRoZSB1cmkgb2YgdGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRlY29kZUNodW5rcyAgV2hldGhlciB0byB0aGUgcmVzdWx0IGlzIGV4cGVjdGVkIHRvIGJlXG4gKiAgICAgZW5jb2RlZCBmb3IgY2h1bmtpbmcgYW5kIHRodXMgcmVxdWlyZXMgZGVjb2RpbmcuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGhvc3RQcmVmaXggIFRoZSBob3N0IHByZWZpeCwgaWYgd2UgbWlnaHQgYmUgdXNpbmcgYVxuICogICAgIHNlY29uZGFyeSBkb21haW4uICBOb3RlIHRoYXQgaXQgc2hvdWxkIGFsc28gYmUgaW4gdGhlIFVSTCwgYWRkaW5nIHRoaXNcbiAqICAgICB3b24ndCBjYXVzZSBpdCB0byBiZSBhZGRlZCB0byB0aGUgVVJMLlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUueG1sSHR0cEdldCA9IGZ1bmN0aW9uKHVyaSwgZGVjb2RlQ2h1bmtzLCBob3N0UHJlZml4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy50eXBlXyA9IENoYW5uZWxSZXF1ZXN0LlR5cGVfLlhNTF9IVFRQO1xuICB0aGlzLmJhc2VVcmlfID0gdXJpLmNsb25lKCkubWFrZVVuaXF1ZSgpO1xuICB0aGlzLnBvc3REYXRhXyA9IG51bGw7XG4gIHRoaXMuZGVjb2RlQ2h1bmtzXyA9IGRlY29kZUNodW5rcztcblxuICB0aGlzLnNlbmRYbWxIdHRwXyhob3N0UHJlZml4KTtcbn07XG5cblxuLyoqXG4gKiBTZW5kcyBhIHJlcXVlc3QgdmlhIFhNTEhUVFAgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSByZXF1ZXN0XG4gKiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBob3N0UHJlZml4IFRoZSBob3N0IHByZWZpeCwgaWYgd2UgbWlnaHQgYmUgdXNpbmcgYSBzZWNvbmRhcnlcbiAqICAgICBkb21haW4uXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuc2VuZFhtbEh0dHBfID0gZnVuY3Rpb24oaG9zdFByZWZpeCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVxdWVzdFN0YXJ0VGltZV8gPSBEYXRlLm5vdygpO1xuICB0aGlzLmVuc3VyZVdhdGNoRG9nVGltZXJfKCk7XG5cbiAgLy8gY2xvbmUgdGhlIGJhc2UgVVJJIHRvIGNyZWF0ZSB0aGUgcmVxdWVzdCBVUkkuIFRoZSByZXF1ZXN0IHVyaSBoYXMgdGhlXG4gIC8vIGF0dGVtcHQgbnVtYmVyIGFzIGEgcGFyYW1ldGVyIHdoaWNoIGhlbHBzIGluIGRlYnVnZ2luZy5cbiAgdGhpcy5yZXF1ZXN0VXJpXyA9IHRoaXMuYmFzZVVyaV8uY2xvbmUoKTtcbiAgdGhpcy5yZXF1ZXN0VXJpXy5zZXRQYXJhbWV0ZXJWYWx1ZXMoJ3QnLCB0aGlzLnJldHJ5SWRfKTtcblxuICAvLyBzZW5kIHRoZSByZXF1ZXN0IGVpdGhlciBhcyBhIFBPU1Qgb3IgR0VUXG4gIHRoaXMueG1sSHR0cENodW5rU3RhcnRfID0gMDtcbiAgY29uc3QgdXNlU2Vjb25kYXJ5RG9tYWlucyA9IHRoaXMuY2hhbm5lbF8uc2hvdWxkVXNlU2Vjb25kYXJ5RG9tYWlucygpO1xuICB0aGlzLmZldGNoUmVzcG9uc2VTdGF0ZV8gPSBuZXcgRmV0Y2hSZXNwb25zZVN0YXRlKCk7XG4gIC8vIElmIHRoZSByZXF1ZXN0IGlzIGEgR0VUIHJlcXVlc3QsIHN0YXJ0IGEgYmFja2NoYW5uZWwgdG8gdHJhbnNmZXIgc3RyZWFtaW5nXG4gIC8vIGRhdGEuIE5vdGUgdGhhdCBXZWJDaGFubmVsIEdFVCByZXF1ZXN0IGNhbiBhbHNvIGJlIHVzZWQgZm9yIGNsb3NpbmcgdGhlXG4gIC8vIGNoYW5uZWwgYXMgaW4gbWV0aG9kIENoYW5uZWxSZXF1ZXN0I3NlbmRDbG9zZVJlcXVlc3QuXG4gIC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIENoYW5uZWwjY3JlYXRlWGhySW8gaXMgSlMgb25seS5cbiAgdGhpcy54bWxIdHRwXyA9IHRoaXMuY2hhbm5lbF8uY3JlYXRlWGhySW8oXG4gICAgICB1c2VTZWNvbmRhcnlEb21haW5zID8gaG9zdFByZWZpeCA6IG51bGwsICF0aGlzLnBvc3REYXRhXyk7XG5cbiAgaWYgKHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlTXNfID4gMCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlXyA9IG5ldyBnb29nLmFzeW5jLlRocm90dGxlKFxuICAgICAgICBnb29nLmJpbmQodGhpcy54bWxIdHRwSGFuZGxlcl8sIHRoaXMsIHRoaXMueG1sSHR0cF8pLFxuICAgICAgICB0aGlzLnJlYWR5U3RhdGVDaGFuZ2VUaHJvdHRsZU1zXyk7XG4gIH1cblxuICB0aGlzLmV2ZW50SGFuZGxlcl8ubGlzdGVuKFxuICAgICAgdGhpcy54bWxIdHRwXywgZ29vZy5uZXQuRXZlbnRUeXBlLlJFQURZX1NUQVRFX0NIQU5HRSxcbiAgICAgIHRoaXMucmVhZHlTdGF0ZUNoYW5nZUhhbmRsZXJfKTtcblxuICBjb25zdCBoZWFkZXJzID1cbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzXyA/IGdvb2cub2JqZWN0LmNsb25lKHRoaXMuZXh0cmFIZWFkZXJzXykgOiB7fTtcbiAgaWYgKHRoaXMucG9zdERhdGFfKSB7XG4gICAgaWYgKCF0aGlzLnZlcmJfKSB7XG4gICAgICB0aGlzLnZlcmJfID0gJ1BPU1QnO1xuICAgIH1cbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgIHRoaXMueG1sSHR0cF8uc2VuZCh0aGlzLnJlcXVlc3RVcmlfLCB0aGlzLnZlcmJfLCB0aGlzLnBvc3REYXRhXywgaGVhZGVycyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy52ZXJiXyA9ICdHRVQnO1xuICAgIHRoaXMueG1sSHR0cF8uc2VuZCh0aGlzLnJlcXVlc3RVcmlfLCB0aGlzLnZlcmJfLCBudWxsLCBoZWFkZXJzKTtcbiAgfVxuICByZXF1ZXN0U3RhdHMubm90aWZ5U2VydmVyUmVhY2hhYmlsaXR5RXZlbnQoXG4gICAgICByZXF1ZXN0U3RhdHMuU2VydmVyUmVhY2hhYmlsaXR5LlJFUVVFU1RfTUFERSk7XG4gIHRoaXMuY2hhbm5lbERlYnVnXy54bWxIdHRwQ2hhbm5lbFJlcXVlc3QoXG4gICAgICB0aGlzLnZlcmJfLCB0aGlzLnJlcXVlc3RVcmlfLCB0aGlzLnJpZF8sIHRoaXMucmV0cnlJZF8sIHRoaXMucG9zdERhdGFfKTtcbn07XG5cblxuLyoqXG4gKiBIYW5kbGVzIGEgcmVhZHlzdGF0ZWNoYW5nZSBldmVudC5cbiAqIEBwYXJhbSB7Z29vZy5ldmVudHMuRXZlbnR9IGV2dCBUaGUgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUucmVhZHlTdGF0ZUNoYW5nZUhhbmRsZXJfID0gZnVuY3Rpb24oZXZ0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgeGhyID0gLyoqIEB0eXBlIHtnb29nLm5ldC5YaHJJb30gKi8gKGV2dC50YXJnZXQpO1xuICBjb25zdCB0aHJvdHRsZSA9IHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlXztcbiAgaWYgKHRocm90dGxlICYmXG4gICAgICB4aHIuZ2V0UmVhZHlTdGF0ZSgpID09IGdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZS5JTlRFUkFDVElWRSkge1xuICAgIC8vIE9ubHkgdGhyb3R0bGUgaW4gdGhlIHBhcnRpYWwgZGF0YSBjYXNlLlxuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnVGhyb3R0bGluZyByZWFkeXN0YXRlY2hhbmdlLicpO1xuICAgIHRocm90dGxlLmZpcmUoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSBoYXZlbid0IHRocm90dGxlZCwganVzdCBoYW5kbGUgcmVzcG9uc2UgZGlyZWN0bHkuXG4gICAgdGhpcy54bWxIdHRwSGFuZGxlcl8oeGhyKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFhtbEh0dHAgaGFuZGxlclxuICogQHBhcmFtIHtnb29nLm5ldC5YaHJJb30geG1saHR0cCBUaGUgWGhySW8gb2JqZWN0IGZvciB0aGUgY3VycmVudCByZXF1ZXN0LlxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnhtbEh0dHBIYW5kbGVyXyA9IGZ1bmN0aW9uKHhtbGh0dHApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXF1ZXN0U3RhdHMub25TdGFydEV4ZWN1dGlvbigpO1xuXG4gIHRyeSB7XG4gICAgaWYgKHhtbGh0dHAgPT0gdGhpcy54bWxIdHRwXykge1xuICAgICAgdGhpcy5vblhtbEh0dHBSZWFkeVN0YXRlQ2hhbmdlZF8oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLndhcm5pbmcoXG4gICAgICAgICAgJ0NhbGxlZCBiYWNrIHdpdGggYW4gJyArXG4gICAgICAgICAgJ3VuZXhwZWN0ZWQgeG1saHR0cCcpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoJ0ZhaWxlZCBjYWxsIHRvIE9uWG1sSHR0cFJlYWR5U3RhdGVDaGFuZ2VkXycpO1xuICAgIGlmICh0aGlzLmhhc1Jlc3BvbnNlQm9keV8oKSkge1xuICAgICAgY29uc3QgY2hhbm5lbFJlcXVlc3QgPSB0aGlzO1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmR1bXBFeGNlcHRpb24oZXgsIGZ1bmN0aW9uKCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHJldHVybiAnUmVzcG9uc2VUZXh0OiAnICsgY2hhbm5lbFJlcXVlc3QueG1sSHR0cF8uZ2V0UmVzcG9uc2VUZXh0KCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmR1bXBFeGNlcHRpb24oZXgsICdObyByZXNwb25zZSB0ZXh0Jyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJlcXVlc3RTdGF0cy5vbkVuZEV4ZWN1dGlvbigpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIGJ5IHRoZSByZWFkeXN0YXRlIGhhbmRsZXIgZm9yIFhNTEhUVFAgcmVxdWVzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLm9uWG1sSHR0cFJlYWR5U3RhdGVDaGFuZ2VkXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHJlYWR5U3RhdGUgPSB0aGlzLnhtbEh0dHBfLmdldFJlYWR5U3RhdGUoKTtcbiAgY29uc3QgZXJyb3JDb2RlID0gdGhpcy54bWxIdHRwXy5nZXRMYXN0RXJyb3JDb2RlKCk7XG4gIGNvbnN0IHN0YXR1c0NvZGUgPSB0aGlzLnhtbEh0dHBfLmdldFN0YXR1cygpO1xuXG4gIC8vIHdlIGdldCBwYXJ0aWFsIHJlc3VsdHMgaW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHJlYWR5IHN0YXRlIGludGVyYWN0aXZlLlxuICAvLyBXZSBhbHNvIG1ha2Ugc3VyZSB0aGF0IGdldFJlc3BvbnNlVGV4dCBpcyBub3QgbnVsbCBpbiBpbnRlcmFjdGl2ZSBtb2RlXG4gIC8vIGJlZm9yZSB3ZSBjb250aW51ZS5cbiAgaWYgKHJlYWR5U3RhdGUgPCBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuSU5URVJBQ1RJVkUgfHxcbiAgICAgIChyZWFkeVN0YXRlID09IGdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZS5JTlRFUkFDVElWRSAmJlxuICAgICAgICFlbnZpcm9ubWVudC5pc1BvbGxpbmdSZXF1aXJlZCgpICYmICAvLyBvdGhlcndpc2UsIGdvIG9uIHRvIHN0YXJ0UG9sbGluZ1xuICAgICAgICF0aGlzLmhhc1Jlc3BvbnNlQm9keV8oKSkpIHtcbiAgICByZXR1cm47ICAvLyBub3QgeWV0IHJlYWR5XG4gIH1cblxuICAvLyBEaXNwYXRjaCBhbnkgYXBwcm9wcmlhdGUgbmV0d29yayBldmVudHMuXG4gIGlmICghdGhpcy5jYW5jZWxsZWRfICYmIHJlYWR5U3RhdGUgPT0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkNPTVBMRVRFICYmXG4gICAgICBlcnJvckNvZGUgIT0gZ29vZy5uZXQuRXJyb3JDb2RlLkFCT1JUKSB7XG4gICAgLy8gUHJldHR5IGNvbnNlcnZhdGl2ZSwgdGhlc2UgYXJlIHRoZSBvbmx5IGtub3duIHNjZW5hcmlvcyB3aGljaCB3ZSdkXG4gICAgLy8gY29uc2lkZXIgaW5kaWNhdGl2ZSBvZiBhIHRydWx5IG5vbi1mdW5jdGlvbmFsIG5ldHdvcmsgY29ubmVjdGlvbi5cbiAgICBpZiAoZXJyb3JDb2RlID09IGdvb2cubmV0LkVycm9yQ29kZS5USU1FT1VUIHx8IHN0YXR1c0NvZGUgPD0gMCkge1xuICAgICAgcmVxdWVzdFN0YXRzLm5vdGlmeVNlcnZlclJlYWNoYWJpbGl0eUV2ZW50KFxuICAgICAgICAgIHJlcXVlc3RTdGF0cy5TZXJ2ZXJSZWFjaGFiaWxpdHkuUkVRVUVTVF9GQUlMRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0U3RhdHMubm90aWZ5U2VydmVyUmVhY2hhYmlsaXR5RXZlbnQoXG4gICAgICAgICAgcmVxdWVzdFN0YXRzLlNlcnZlclJlYWNoYWJpbGl0eS5SRVFVRVNUX1NVQ0NFRURFRCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZ290IHNvbWUgZGF0YSBzbyBjYW5jZWwgdGhlIHdhdGNoZG9nIHRpbWVyXG4gIHRoaXMuY2FuY2VsV2F0Y2hEb2dUaW1lcl8oKTtcblxuICBjb25zdCBzdGF0dXMgPSB0aGlzLnhtbEh0dHBfLmdldFN0YXR1cygpO1xuICB0aGlzLmxhc3RTdGF0dXNDb2RlXyA9IHN0YXR1cztcbiAgY29uc3QgcmVzcG9uc2VUZXh0ID0gdGhpcy5kZWNvZGVYbWxIdHRwUmVzcG9uc2VfKCk7XG5cbiAgaWYgKCF0aGlzLmhhc1Jlc3BvbnNlQm9keV8oKSkge1xuICAgIGNvbnN0IGNoYW5uZWxSZXF1ZXN0ID0gdGhpcztcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoZnVuY3Rpb24oKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gJ05vIHJlc3BvbnNlIHRleHQgZm9yIHVyaSAnICsgY2hhbm5lbFJlcXVlc3QucmVxdWVzdFVyaV8gK1xuICAgICAgICAgICcgc3RhdHVzICcgKyBzdGF0dXM7XG4gICAgfSk7XG4gIH1cbiAgdGhpcy5zdWNjZXNzZnVsXyA9IChzdGF0dXMgPT0gMjAwKTtcblxuICB0aGlzLmNoYW5uZWxEZWJ1Z18ueG1sSHR0cENoYW5uZWxSZXNwb25zZU1ldGFEYXRhKFxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLnZlcmJfKSwgdGhpcy5yZXF1ZXN0VXJpXywgdGhpcy5yaWRfLFxuICAgICAgdGhpcy5yZXRyeUlkXywgcmVhZHlTdGF0ZSwgc3RhdHVzKTtcblxuICBpZiAoIXRoaXMuc3VjY2Vzc2Z1bF8pIHtcbiAgICBpZiAoc3RhdHVzID09IDQwMCAmJiByZXNwb25zZVRleHQuaW5kZXhPZignVW5rbm93biBTSUQnKSA+IDApIHtcbiAgICAgIC8vIHRoZSBzZXJ2ZXIgZXJyb3Igc3RyaW5nIHdpbGwgaW5jbHVkZSAnVW5rbm93biBTSUQnIHdoaWNoIGluZGljYXRlcyB0aGVcbiAgICAgIC8vIHNlcnZlciBkb2Vzbid0IGtub3cgYWJvdXQgdGhlIHNlc3Npb24gKG1heWJlIGl0IGdvdCByZXN0YXJ0ZWQsIG1heWJlXG4gICAgICAvLyB0aGUgdXNlciBnb3QgbW92ZWQgdG8gYW5vdGhlciBzZXJ2ZXIsIGV0Yy4sKS4gSGFuZGxlcnMgY2FuIHNwZWNpYWxcbiAgICAgIC8vIGNhc2UgdGhpcyBlcnJvclxuICAgICAgdGhpcy5sYXN0RXJyb3JfID0gQ2hhbm5lbFJlcXVlc3QuRXJyb3IuVU5LTk9XTl9TRVNTSU9OX0lEO1xuICAgICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChcbiAgICAgICAgICByZXF1ZXN0U3RhdHMuU3RhdC5SRVFVRVNUX1VOS05PV05fU0VTU0lPTl9JRCk7XG4gICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ud2FybmluZygnWE1MSFRUUCBVbmtub3duIFNJRCAoJyArIHRoaXMucmlkXyArICcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGFzdEVycm9yXyA9IENoYW5uZWxSZXF1ZXN0LkVycm9yLlNUQVRVUztcbiAgICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlTdGF0RXZlbnQocmVxdWVzdFN0YXRzLlN0YXQuUkVRVUVTVF9CQURfU1RBVFVTKTtcbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy53YXJuaW5nKFxuICAgICAgICAgICdYTUxIVFRQIEJhZCBzdGF0dXMgJyArIHN0YXR1cyArICcgKCcgKyB0aGlzLnJpZF8gKyAnKScpO1xuICAgIH1cbiAgICB0aGlzLmNsZWFudXBfKCk7XG4gICAgdGhpcy5kaXNwYXRjaEZhaWx1cmVfKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuc2hvdWxkQ2hlY2tJbml0aWFsUmVzcG9uc2VfKCkpIHtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2UgPSB0aGlzLmdldEluaXRpYWxSZXNwb25zZV8oKTtcbiAgICBpZiAoaW5pdGlhbFJlc3BvbnNlKSB7XG4gICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ueG1sSHR0cENoYW5uZWxSZXNwb25zZVRleHQoXG4gICAgICAgICAgdGhpcy5yaWRfLCBpbml0aWFsUmVzcG9uc2UsXG4gICAgICAgICAgJ0luaXRpYWwgaGFuZHNoYWtlIHJlc3BvbnNlIHZpYSAnICtcbiAgICAgICAgICAgICAgV2ViQ2hhbm5lbC5YX0hUVFBfSU5JVElBTF9SRVNQT05TRSk7XG4gICAgICB0aGlzLmluaXRpYWxSZXNwb25zZURlY29kZWRfID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2FmZU9uUmVxdWVzdERhdGFfKGluaXRpYWxSZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bF8gPSBmYWxzZTtcbiAgICAgIHRoaXMubGFzdEVycm9yXyA9IENoYW5uZWxSZXF1ZXN0LkVycm9yLlVOS05PV05fU0VTU0lPTl9JRDsgIC8vIGZhaWwtZmFzdFxuICAgICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChcbiAgICAgICAgICByZXF1ZXN0U3RhdHMuU3RhdC5SRVFVRVNUX1VOS05PV05fU0VTU0lPTl9JRCk7XG4gICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ud2FybmluZyhcbiAgICAgICAgICAnWE1MSFRUUCBNaXNzaW5nIFhfSFRUUF9JTklUSUFMX1JFU1BPTlNFJyArXG4gICAgICAgICAgJyAoJyArIHRoaXMucmlkXyArICcpJyk7XG4gICAgICB0aGlzLmNsZWFudXBfKCk7XG4gICAgICB0aGlzLmRpc3BhdGNoRmFpbHVyZV8oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5kZWNvZGVDaHVua3NfKSB7XG4gICAgdGhpcy5kZWNvZGVOZXh0Q2h1bmtzXyhyZWFkeVN0YXRlLCByZXNwb25zZVRleHQpO1xuICAgIGlmIChlbnZpcm9ubWVudC5pc1BvbGxpbmdSZXF1aXJlZCgpICYmIHRoaXMuc3VjY2Vzc2Z1bF8gJiZcbiAgICAgICAgcmVhZHlTdGF0ZSA9PSBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuSU5URVJBQ1RJVkUpIHtcbiAgICAgIHRoaXMuc3RhcnRQb2xsaW5nXygpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ueG1sSHR0cENoYW5uZWxSZXNwb25zZVRleHQoXG4gICAgICAgIHRoaXMucmlkXywgcmVzcG9uc2VUZXh0LCBudWxsKTtcbiAgICB0aGlzLnNhZmVPblJlcXVlc3REYXRhXyhyZXNwb25zZVRleHQpO1xuICB9XG5cbiAgaWYgKHJlYWR5U3RhdGUgPT0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkNPTVBMRVRFKSB7XG4gICAgdGhpcy5jbGVhbnVwXygpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN1Y2Nlc3NmdWxfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0aGlzLmNhbmNlbGxlZF8pIHtcbiAgICBpZiAocmVhZHlTdGF0ZSA9PSBnb29nLm5ldC5YbWxIdHRwLlJlYWR5U3RhdGUuQ09NUExFVEUpIHtcbiAgICAgIHRoaXMuY2hhbm5lbF8ub25SZXF1ZXN0Q29tcGxldGUodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGlzIGZhbHNlLCB0aGUgcmVzdWx0IGZyb20gdGhpcyBjYWxsYmFjayBzaG91bGRuJ3QgY2FycnlcbiAgICAgIC8vIG92ZXIgdG8gdGhlIG5leHQgY2FsbGJhY2ssIG90aGVyd2lzZSB0aGUgcmVxdWVzdCBsb29rcyBzdWNjZXNzZnVsIGlmXG4gICAgICAvLyB0aGUgd2F0Y2hkb2cgdGltZXIgZ2V0cyBjYWxsZWRcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bF8gPSBmYWxzZTtcbiAgICAgIHRoaXMuZW5zdXJlV2F0Y2hEb2dUaW1lcl8oKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHdlIG5lZWQgY2hlY2sgdGhlIGluaXRpYWwtcmVzcG9uc2UgaGVhZGVyIHRoYXQgaXMgc2VudCBkdXJpbmcgdGhlXG4gKiBmYXN0IGhhbmRzaGFrZS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBpbml0aWFsLXJlc3BvbnNlIGhlYWRlciBpcyB5ZXQgdG8gYmUgcHJvY2Vzc2VkLlxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnNob3VsZENoZWNrSW5pdGlhbFJlc3BvbnNlXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmRlY29kZUluaXRpYWxSZXNwb25zZV8gJiYgIXRoaXMuaW5pdGlhbFJlc3BvbnNlRGVjb2RlZF87XG59O1xuXG5cbi8qKlxuICogUXVlcmllcyB0aGUgaW5pdGlhbCByZXNwb25zZSBoZWFkZXIgdGhhdCBpcyBzZW50IGR1cmluZyB0aGUgaGFuZHNoYWtlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBub24tZW1wdHkgaGVhZGVyIHZhbHVlIG9yIG51bGwuXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0SW5pdGlhbFJlc3BvbnNlXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLnhtbEh0dHBfKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnhtbEh0dHBfLmdldFN0cmVhbWluZ1Jlc3BvbnNlSGVhZGVyKFxuICAgICAgICBXZWJDaGFubmVsLlhfSFRUUF9JTklUSUFMX1JFU1BPTlNFKTtcbiAgICBpZiAodmFsdWUgJiYgIWdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGluaXRpYWwgcmVzcG9uc2UgaGVhZGVyIGhhcyBiZWVuIGhhbmRsZWQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBYX0hUVFBfSU5JVElBTF9SRVNQT05TRSBoYXMgYmVlbiBoYW5kbGVkLlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuaXNJbml0aWFsUmVzcG9uc2VEZWNvZGVkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaW5pdGlhbFJlc3BvbnNlRGVjb2RlZF87XG59O1xuXG5cbi8qKlxuICogRGVjb2RlcyBYX0hUVFBfSU5JVElBTF9SRVNQT05TRSBpZiBwcmVzZW50LlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuc2V0RGVjb2RlSW5pdGlhbFJlc3BvbnNlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5kZWNvZGVJbml0aWFsUmVzcG9uc2VfID0gdHJ1ZTtcbn07XG5cblxuXG4vKipcbiAqIERlY29kZXMgdGhlIHJlc3BvbnNlcyBmcm9tIFhocklvIG9iamVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJlc3BvbnNlVGV4dFxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLmRlY29kZVhtbEh0dHBSZXNwb25zZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXRoaXMudXNlRmV0Y2hTdHJlYW1zRm9yUmVzcG9uc2VfKCkpIHtcbiAgICByZXR1cm4gdGhpcy54bWxIdHRwXy5nZXRSZXNwb25zZVRleHQoKTtcbiAgfVxuICBjb25zdCByZXNwb25zZUNodW5rcyA9XG4gICAgICAvKiogQHR5cGUgeyFBcnJheTwhVWludDhBcnJheT59ICovICh0aGlzLnhtbEh0dHBfLmdldFJlc3BvbnNlKCkpO1xuICBsZXQgcmVzcG9uc2VUZXh0ID0gJyc7XG4gIGNvbnN0IHJlc3BvbnNlTGVuZ3RoID0gcmVzcG9uc2VDaHVua3MubGVuZ3RoO1xuICBjb25zdCByZXF1ZXN0Q29tcGxldGVkID1cbiAgICAgIHRoaXMueG1sSHR0cF8uZ2V0UmVhZHlTdGF0ZSgpID09IGdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZS5DT01QTEVURTtcbiAgaWYgKCF0aGlzLmZldGNoUmVzcG9uc2VTdGF0ZV8udGV4dERlY29kZXIpIHtcbiAgICBpZiAodHlwZW9mIFRleHREZWNvZGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLnNldmVyZShcbiAgICAgICAgICAnVGV4dERlY29kZXIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuJyk7XG4gICAgICB0aGlzLmNsZWFudXBfKCk7XG4gICAgICB0aGlzLmRpc3BhdGNoRmFpbHVyZV8oKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdGhpcy5mZXRjaFJlc3BvbnNlU3RhdGVfLnRleHREZWNvZGVyID0gbmV3IGdvb2cuZ2xvYmFsLlRleHREZWNvZGVyKCk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNwb25zZUxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5mZXRjaFJlc3BvbnNlU3RhdGVfLnJlc3BvbnNlQXJyaXZlZEZvckZldGNoID0gdHJ1ZTtcbiAgICBjb25zdCBpc0xhc3RDaHVuayA9IHJlcXVlc3RDb21wbGV0ZWQgJiYgaSA9PSByZXNwb25zZUxlbmd0aCAtIDE7XG4gICAgcmVzcG9uc2VUZXh0ICs9IHRoaXMuZmV0Y2hSZXNwb25zZVN0YXRlXy50ZXh0RGVjb2Rlci5kZWNvZGUoXG4gICAgICAgIHJlc3BvbnNlQ2h1bmtzW2ldLCB7c3RyZWFtOiBpc0xhc3RDaHVua30pO1xuICB9XG4gIHJlc3BvbnNlQ2h1bmtzLnNwbGljZSgwLCByZXNwb25zZUxlbmd0aCk7XG4gIHRoaXMuZmV0Y2hSZXNwb25zZVN0YXRlXy5yZXNwb25zZUJ1ZmZlciArPSByZXNwb25zZVRleHQ7XG4gIHRoaXMueG1sSHR0cENodW5rU3RhcnRfID0gMDtcbiAgcmV0dXJuIHRoaXMuZmV0Y2hSZXNwb25zZVN0YXRlXy5yZXNwb25zZUJ1ZmZlcjtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgcmVzcG9uc2UgaGFzIHJlc3BvbnNlIGJvZHkuXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5oYXNSZXNwb25zZUJvZHlfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnhtbEh0dHBfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0aGlzLmZldGNoUmVzcG9uc2VTdGF0ZV8ucmVzcG9uc2VBcnJpdmVkRm9yRmV0Y2gpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gISghdGhpcy54bWxIdHRwXy5nZXRSZXNwb25zZVRleHQoKSAmJiAhdGhpcy54bWxIdHRwXy5nZXRSZXNwb25zZSgpKTtcbn07XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIHJlc3BvbnNlIGJvZHkgaXMgc3RyZWFtZWQuXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS51c2VGZXRjaFN0cmVhbXNGb3JSZXNwb25zZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXRoaXMueG1sSHR0cF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICAgIHRoaXMudmVyYl8gPT0gJ0dFVCcgJiYgdGhpcy50eXBlXyAhPSBDaGFubmVsUmVxdWVzdC5UeXBlXy5DTE9TRV9SRVFVRVNUICYmXG4gICAgICB0aGlzLmNoYW5uZWxfLnVzZXNGZXRjaFN0cmVhbXMoKSk7XG59O1xuXG5cbi8qKlxuICogUmVzZXRzIHRoZSByZXNwb25zZSBidWZmZXIgaWYgdGhlIHNhdmVkIGNodW5rIGhhcyBiZWVuIHByb2Nlc3NlZC5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3whT2JqZWN0fHVuZGVmaW5lZH0gY2h1bmtUZXh0XG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5tYXliZVJlc2V0QnVmZmVyXyA9IGZ1bmN0aW9uKGNodW5rVGV4dCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLnVzZUZldGNoU3RyZWFtc0ZvclJlc3BvbnNlXygpICYmXG4gICAgICBjaHVua1RleHQgIT0gQ2hhbm5lbFJlcXVlc3QuSU5DT01QTEVURV9DSFVOS18gJiZcbiAgICAgIGNodW5rVGV4dCAhPSBDaGFubmVsUmVxdWVzdC5JTlZBTElEX0NIVU5LXykge1xuICAgIHRoaXMuZmV0Y2hSZXNwb25zZVN0YXRlXy5yZXNwb25zZUJ1ZmZlciA9ICcnO1xuICAgIHRoaXMueG1sSHR0cENodW5rU3RhcnRfID0gMDtcbiAgfVxufTtcblxuXG4vKipcbiAqIERlY29kZXMgdGhlIG5leHQgc2V0IG9mIGF2YWlsYWJsZSBjaHVua3MgaW4gdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHtudW1iZXJ9IHJlYWR5U3RhdGUgVGhlIHZhbHVlIG9mIHJlYWR5U3RhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzcG9uc2VUZXh0IFRoZSB2YWx1ZSBvZiByZXNwb25zZVRleHQuXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZGVjb2RlTmV4dENodW5rc18gPSBmdW5jdGlvbihcbiAgICByZWFkeVN0YXRlLCByZXNwb25zZVRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBsZXQgZGVjb2RlTmV4dENodW5rc1N1Y2Nlc3NmdWwgPSB0cnVlO1xuXG4gIGxldCBjaHVua1RleHQ7XG4gIHdoaWxlICghdGhpcy5jYW5jZWxsZWRfICYmIHRoaXMueG1sSHR0cENodW5rU3RhcnRfIDwgcmVzcG9uc2VUZXh0Lmxlbmd0aCkge1xuICAgIGNodW5rVGV4dCA9IHRoaXMuZ2V0TmV4dENodW5rXyhyZXNwb25zZVRleHQpO1xuICAgIGlmIChjaHVua1RleHQgPT0gQ2hhbm5lbFJlcXVlc3QuSU5DT01QTEVURV9DSFVOS18pIHtcbiAgICAgIGlmIChyZWFkeVN0YXRlID09IGdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZS5DT01QTEVURSkge1xuICAgICAgICAvLyBzaG91bGQgaGF2ZSBjb25zdW1lZCBlbnRpcmUgcmVzcG9uc2Ugd2hlbiB0aGUgcmVxdWVzdCBpcyBkb25lXG4gICAgICAgIHRoaXMubGFzdEVycm9yXyA9IENoYW5uZWxSZXF1ZXN0LkVycm9yLkJBRF9EQVRBO1xuICAgICAgICByZXF1ZXN0U3RhdHMubm90aWZ5U3RhdEV2ZW50KHJlcXVlc3RTdGF0cy5TdGF0LlJFUVVFU1RfSU5DT01QTEVURV9EQVRBKTtcbiAgICAgICAgZGVjb2RlTmV4dENodW5rc1N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy54bWxIdHRwQ2hhbm5lbFJlc3BvbnNlVGV4dChcbiAgICAgICAgICB0aGlzLnJpZF8sIG51bGwsICdbSW5jb21wbGV0ZSBSZXNwb25zZV0nKTtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2h1bmtUZXh0ID09IENoYW5uZWxSZXF1ZXN0LklOVkFMSURfQ0hVTktfKSB7XG4gICAgICB0aGlzLmxhc3RFcnJvcl8gPSBDaGFubmVsUmVxdWVzdC5FcnJvci5CQURfREFUQTtcbiAgICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlTdGF0RXZlbnQocmVxdWVzdFN0YXRzLlN0YXQuUkVRVUVTVF9CQURfREFUQSk7XG4gICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ueG1sSHR0cENoYW5uZWxSZXNwb25zZVRleHQoXG4gICAgICAgICAgdGhpcy5yaWRfLCByZXNwb25zZVRleHQsICdbSW52YWxpZCBDaHVua10nKTtcbiAgICAgIGRlY29kZU5leHRDaHVua3NTdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLnhtbEh0dHBDaGFubmVsUmVzcG9uc2VUZXh0KFxuICAgICAgICAgIHRoaXMucmlkXywgLyoqIEB0eXBlIHtzdHJpbmd9ICovIChjaHVua1RleHQpLCBudWxsKTtcbiAgICAgIHRoaXMuc2FmZU9uUmVxdWVzdERhdGFfKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoY2h1bmtUZXh0KSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5tYXliZVJlc2V0QnVmZmVyXyhjaHVua1RleHQpO1xuXG4gIGlmIChyZWFkeVN0YXRlID09IGdvb2cubmV0LlhtbEh0dHAuUmVhZHlTdGF0ZS5DT01QTEVURSAmJlxuICAgICAgcmVzcG9uc2VUZXh0Lmxlbmd0aCA9PSAwICYmXG4gICAgICAhdGhpcy5mZXRjaFJlc3BvbnNlU3RhdGVfLnJlc3BvbnNlQXJyaXZlZEZvckZldGNoKSB7XG4gICAgLy8gYWxzbyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgZ2V0IGFueSByZXNwb25zZVxuICAgIHRoaXMubGFzdEVycm9yXyA9IENoYW5uZWxSZXF1ZXN0LkVycm9yLk5PX0RBVEE7XG4gICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5SRVFVRVNUX05PX0RBVEEpO1xuICAgIGRlY29kZU5leHRDaHVua3NTdWNjZXNzZnVsID0gZmFsc2U7XG4gIH1cblxuICB0aGlzLnN1Y2Nlc3NmdWxfID0gdGhpcy5zdWNjZXNzZnVsXyAmJiBkZWNvZGVOZXh0Q2h1bmtzU3VjY2Vzc2Z1bDtcblxuICBpZiAoIWRlY29kZU5leHRDaHVua3NTdWNjZXNzZnVsKSB7XG4gICAgLy8gbWFsZm9ybWVkIHJlc3BvbnNlIC0gd2UgbWFrZSB0aGlzIHRyaWdnZXIgcmV0cnkgbG9naWNcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ueG1sSHR0cENoYW5uZWxSZXNwb25zZVRleHQoXG4gICAgICAgIHRoaXMucmlkXywgcmVzcG9uc2VUZXh0LCAnW0ludmFsaWQgQ2h1bmtlZCBSZXNwb25zZV0nKTtcbiAgICB0aGlzLmNsZWFudXBfKCk7XG4gICAgdGhpcy5kaXNwYXRjaEZhaWx1cmVfKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHJlc3BvbnNlVGV4dC5sZW5ndGggPiAwICYmICF0aGlzLmZpcnN0Qnl0ZVJlY2VpdmVkXykge1xuICAgICAgdGhpcy5maXJzdEJ5dGVSZWNlaXZlZF8gPSB0cnVlO1xuICAgICAgdGhpcy5jaGFubmVsXy5vbkZpcnN0Qnl0ZVJlY2VpdmVkKHRoaXMsIHJlc3BvbnNlVGV4dCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUG9sbHMgdGhlIHJlc3BvbnNlIGZvciBuZXcgZGF0YS5cbiAqIEBwcml2YXRlXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5wb2xsUmVzcG9uc2VfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnhtbEh0dHBfKSB7XG4gICAgcmV0dXJuOyAgLy8gYWxyZWFkeSBjbG9zZWRcbiAgfVxuICBjb25zdCByZWFkeVN0YXRlID0gdGhpcy54bWxIdHRwXy5nZXRSZWFkeVN0YXRlKCk7XG4gIGNvbnN0IHJlc3BvbnNlVGV4dCA9IHRoaXMueG1sSHR0cF8uZ2V0UmVzcG9uc2VUZXh0KCk7XG4gIGlmICh0aGlzLnhtbEh0dHBDaHVua1N0YXJ0XyA8IHJlc3BvbnNlVGV4dC5sZW5ndGgpIHtcbiAgICB0aGlzLmNhbmNlbFdhdGNoRG9nVGltZXJfKCk7XG4gICAgdGhpcy5kZWNvZGVOZXh0Q2h1bmtzXyhyZWFkeVN0YXRlLCByZXNwb25zZVRleHQpO1xuICAgIGlmICh0aGlzLnN1Y2Nlc3NmdWxfICYmXG4gICAgICAgIHJlYWR5U3RhdGUgIT0gZ29vZy5uZXQuWG1sSHR0cC5SZWFkeVN0YXRlLkNPTVBMRVRFKSB7XG4gICAgICB0aGlzLmVuc3VyZVdhdGNoRG9nVGltZXJfKCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbGluZyBpbnRlcnZhbCBmb3IgY2hhbmdlcyB0byByZXNwb25zZVRleHQgb2YgdGhlXG4gKiBYTUxIdHRwUmVxdWVzdCwgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3QgZmlyZSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAqIGFzIGRhdGEgY29tZXMgaW4gaW5jcmVtZW50YWxseS4gIFRoaXMgdGltZXIgaXMgZGlzYWJsZWQgaW5cbiAqIGNsZWFudXBfKCkuXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuc3RhcnRQb2xsaW5nXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZXZlbnRIYW5kbGVyXy5saXN0ZW4oXG4gICAgICB0aGlzLnBvbGxpbmdUaW1lcl8sIGdvb2cuVGltZXIuVElDSywgdGhpcy5wb2xsUmVzcG9uc2VfKTtcbiAgdGhpcy5wb2xsaW5nVGltZXJfLnN0YXJ0KCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBjaHVuayBvZiBhIGNodW5rLWVuY29kZWQgcmVzcG9uc2UuIFRoaXMgaXMgbm90IHN0YW5kYXJkXG4gKiBIVFRQIGNodW5rZWQgZW5jb2RpbmcgYmVjYXVzZSBicm93c2VycyBkb24ndCBleHBvc2UgdGhlIGNodW5rIGJvdW5kYXJpZXMgdG9cbiAqIHRoZSBhcHBsaWNhdGlvbiB0aHJvdWdoIFhNTEhUVFAuIFNvIHdlIGhhdmUgYW4gYWRkaXRpb25hbCBjaHVuayBlbmNvZGluZyBhdFxuICogdGhlIGFwcGxpY2F0aW9uIGxldmVsIHRoYXQgbGV0cyB1cyB0ZWxsIHdoZXJlIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZlxuICogaW5kaXZpZHVhbCByZXNwb25zZXMgYXJlIHNvIHRoYXQgd2UgY2FuIG9ubHkgdHJ5IHRvIGV2YWwgYSBjb21wbGV0ZSBKUyBhcnJheS5cbiAqXG4gKiBUaGUgZW5jb2RpbmcgaXMgdGhlIHNpemUgb2YgdGhlIGNodW5rIGVuY29kZWQgYXMgYSBkZWNpbWFsIHN0cmluZyBmb2xsb3dlZFxuICogYnkgYSBuZXdsaW5lIGZvbGxvd2VkIGJ5IHRoZSBkYXRhLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVRleHQgVGhlIHJlc3BvbnNlIHRleHQgZnJvbSB0aGUgWE1MSFRUUCByZXNwb25zZS5cbiAqIEByZXR1cm4ge3N0cmluZ3whT2JqZWN0fSBUaGUgbmV4dCBjaHVuayBzdHJpbmcgb3IgYSBzZW50aW5lbCBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRpbmcgYSBzcGVjaWFsIGNvbmRpdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5nZXROZXh0Q2h1bmtfID0gZnVuY3Rpb24ocmVzcG9uc2VUZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3Qgc2l6ZVN0YXJ0SW5kZXggPSB0aGlzLnhtbEh0dHBDaHVua1N0YXJ0XztcbiAgY29uc3Qgc2l6ZUVuZEluZGV4ID0gcmVzcG9uc2VUZXh0LmluZGV4T2YoJ1xcbicsIHNpemVTdGFydEluZGV4KTtcbiAgaWYgKHNpemVFbmRJbmRleCA9PSAtMSkge1xuICAgIHJldHVybiBDaGFubmVsUmVxdWVzdC5JTkNPTVBMRVRFX0NIVU5LXztcbiAgfVxuXG4gIGNvbnN0IHNpemVBc1N0cmluZyA9IHJlc3BvbnNlVGV4dC5zdWJzdHJpbmcoc2l6ZVN0YXJ0SW5kZXgsIHNpemVFbmRJbmRleCk7XG4gIGNvbnN0IHNpemUgPSBOdW1iZXIoc2l6ZUFzU3RyaW5nKTtcbiAgaWYgKGlzTmFOKHNpemUpKSB7XG4gICAgcmV0dXJuIENoYW5uZWxSZXF1ZXN0LklOVkFMSURfQ0hVTktfO1xuICB9XG5cbiAgY29uc3QgY2h1bmtTdGFydEluZGV4ID0gc2l6ZUVuZEluZGV4ICsgMTtcbiAgaWYgKGNodW5rU3RhcnRJbmRleCArIHNpemUgPiByZXNwb25zZVRleHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIENoYW5uZWxSZXF1ZXN0LklOQ09NUExFVEVfQ0hVTktfO1xuICB9XG5cbiAgY29uc3QgY2h1bmtUZXh0ID0gcmVzcG9uc2VUZXh0LnN1YnN0cihjaHVua1N0YXJ0SW5kZXgsIHNpemUpO1xuICB0aGlzLnhtbEh0dHBDaHVua1N0YXJ0XyA9IGNodW5rU3RhcnRJbmRleCArIHNpemU7XG4gIHJldHVybiBjaHVua1RleHQ7XG59O1xuXG5cbi8qKlxuICogVXNlcyBhbiBJTUcgdGFnIG9yIG5hdmlnYXRvci5zZW5kQmVhY29uIHRvIHNlbmQgYW4gSFRUUCBnZXQgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBUaGlzIGlzIG9ubHkgY3VycmVudGx5IHVzZWQgdG8gdGVybWluYXRlIHRoZSBjb25uZWN0aW9uLCBhcyBhbiBJTUcgdGFnIGlzXG4gKiB0aGUgbW9zdCByZWxpYWJsZSB3YXkgdG8gc2VuZCBzb21ldGhpbmcgdG8gdGhlIHNlcnZlciB3aGlsZSB0aGUgcGFnZVxuICogaXMgZ2V0dGluZyB0b3JuIGRvd24uXG4gKlxuICogTmF2aWdhdG9yLnNlbmRCZWFjb24gaXMgYXZhaWxhYmxlIG9uIENocm9tZSBhbmQgRmlyZWZveCBhcyBhIGZvcm1hbFxuICogc29sdXRpb24gdG8gZW5zdXJlIGRlbGl2ZXJ5IHdpdGhvdXQgYmxvY2tpbmcgd2luZG93IGNsb3NlLiBTZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9OYXZpZ2F0b3Ivc2VuZEJlYWNvblxuICpcbiAqIEZvciBDaHJvbWUgQXBwcywgc2VuZEJlYWNvbiBpcyBhbHdheXMgbmVjZXNzYXJ5IGR1ZSB0byBDb250ZW50IFNlY3VyaXR5XG4gKiBQb2xpY3kgKENTUCkgdmlvbGF0aW9uIG9mIHVzaW5nIGFuIElNRyB0YWcuXG4gKlxuICogRm9yIHJlYWN0LW5hdGl2ZSwgd2UgdXNlIHhociB0byBzZW5kIHRoZSBhY3R1YWwgY2xvc2UgcmVxdWVzdCwgYW5kIGFzc3VtZVxuICogdGhlcmUgaXMgbm8gcGFnZS1jbG9zZSBpc3N1ZSB3aXRoIHJlYWN0LW5hdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cuVXJpfSB1cmkgVGhlIHVyaSB0byBzZW5kIGEgcmVxdWVzdCB0by5cbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLnNlbmRDbG9zZVJlcXVlc3QgPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnR5cGVfID0gQ2hhbm5lbFJlcXVlc3QuVHlwZV8uQ0xPU0VfUkVRVUVTVDtcbiAgdGhpcy5iYXNlVXJpXyA9IHVyaS5jbG9uZSgpLm1ha2VVbmlxdWUoKTtcblxuICBsZXQgcmVxdWVzdFNlbnQgPSBmYWxzZTtcblxuICBpZiAoZ29vZy5nbG9iYWwubmF2aWdhdG9yICYmIGdvb2cuZ2xvYmFsLm5hdmlnYXRvci5zZW5kQmVhY29uKSB7XG4gICAgLy8gZW1wdHkgc3RyaW5nIGJvZHkgdG8gYXZvaWQgNDEzIGVycm9yIG9uIGNocm9tZSA8IDQxXG4gICAgcmVxdWVzdFNlbnQgPVxuICAgICAgICBnb29nLmdsb2JhbC5uYXZpZ2F0b3Iuc2VuZEJlYWNvbih0aGlzLmJhc2VVcmlfLnRvU3RyaW5nKCksICcnKTtcbiAgfVxuXG4gIGlmICghcmVxdWVzdFNlbnQgJiYgZ29vZy5nbG9iYWwuSW1hZ2UpIHtcbiAgICBjb25zdCBlbHRJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBlbHRJbWcuc3JjID0gdGhpcy5iYXNlVXJpXztcbiAgICByZXF1ZXN0U2VudCA9IHRydWU7XG4gIH1cblxuICBpZiAoIXJlcXVlc3RTZW50KSB7XG4gICAgLy8gbm8gaGFuZGxlciBpcyBzZXQgdG8gbWF0Y2ggdGhlIHNlbmRCZWFjb24vSW1hZ2UgYmVoYXZpb3JcbiAgICB0aGlzLnhtbEh0dHBfID0gdGhpcy5jaGFubmVsXy5jcmVhdGVYaHJJbyhudWxsKTtcbiAgICB0aGlzLnhtbEh0dHBfLnNlbmQodGhpcy5iYXNlVXJpXyk7XG4gIH1cblxuICB0aGlzLnJlcXVlc3RTdGFydFRpbWVfID0gRGF0ZS5ub3coKTtcbiAgdGhpcy5lbnN1cmVXYXRjaERvZ1RpbWVyXygpO1xufTtcblxuXG4vKipcbiAqIENhbmNlbHMgdGhlIHJlcXVlc3Qgbm8gbWF0dGVyIHdoYXQgdGhlIHVuZGVybHlpbmcgdHJhbnNwb3J0IGlzLlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jYW5jZWxsZWRfID0gdHJ1ZTtcbiAgdGhpcy5jbGVhbnVwXygpO1xufTtcblxuXG4vKipcbiAqIFJlc2V0cyB0aGUgdGltZW91dC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF90aW1lb3V0IFRoZSBuZXcgdGltZW91dFxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUucmVzZXRUaW1lb3V0ID0gZnVuY3Rpb24ob3B0X3RpbWVvdXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAob3B0X3RpbWVvdXQpIHtcbiAgICB0aGlzLnNldFRpbWVvdXQob3B0X3RpbWVvdXQpO1xuICB9XG4gIC8vIHJlc3RhcnQgb25seSBpZiBhIHRpbWVyIGlzIGN1cnJlbnRseSBzZXRcbiAgaWYgKHRoaXMud2F0Y2hEb2dUaW1lcklkXykge1xuICAgIHRoaXMuY2FuY2VsV2F0Y2hEb2dUaW1lcl8oKTtcbiAgICB0aGlzLmVuc3VyZVdhdGNoRG9nVGltZXJfKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgdGhlcmUgaXMgd2F0Y2hkb2cgdGltZW91dCB3aGljaCBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0XG4gKiB0aGUgY29ubmVjdGlvbiBjb21wbGV0ZXMgaW4gdGltZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZW5zdXJlV2F0Y2hEb2dUaW1lcl8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLndhdGNoRG9nVGltZW91dFRpbWVfID0gRGF0ZS5ub3coKSArIHRoaXMudGltZW91dF87XG4gIHRoaXMuc3RhcnRXYXRjaERvZ1RpbWVyXyh0aGlzLnRpbWVvdXRfKTtcbn07XG5cblxuLyoqXG4gKiBTdGFydHMgdGhlIHdhdGNoZG9nIHRpbWVyIHdoaWNoIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlIGNvbm5lY3Rpb25cbiAqIGNvbXBsZXRlcyBpbiB0aW1lLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdC5cbiAqIEBwcml2YXRlXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5zdGFydFdhdGNoRG9nVGltZXJfID0gZnVuY3Rpb24odGltZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLndhdGNoRG9nVGltZXJJZF8gIT0gbnVsbCkge1xuICAgIC8vIGFzc2VydGlvblxuICAgIHRocm93IG5ldyBFcnJvcignV2F0Y2hEb2cgdGltZXIgbm90IG51bGwnKTtcbiAgfVxuICB0aGlzLndhdGNoRG9nVGltZXJJZF8gPVxuICAgICAgcmVxdWVzdFN0YXRzLnNldFRpbWVvdXQoZ29vZy5iaW5kKHRoaXMub25XYXRjaERvZ1RpbWVvdXRfLCB0aGlzKSwgdGltZSk7XG59O1xuXG5cbi8qKlxuICogQ2FuY2VscyB0aGUgd2F0Y2hkb2cgdGltZXIgaWYgaXQgaGFzIGJlZW4gc3RhcnRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuY2FuY2VsV2F0Y2hEb2dUaW1lcl8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy53YXRjaERvZ1RpbWVySWRfKSB7XG4gICAgZ29vZy5nbG9iYWwuY2xlYXJUaW1lb3V0KHRoaXMud2F0Y2hEb2dUaW1lcklkXyk7XG4gICAgdGhpcy53YXRjaERvZ1RpbWVySWRfID0gbnVsbDtcbiAgfVxufTtcblxuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSB3YXRjaGRvZyB0aW1lciBpcyB0cmlnZ2VyZWQuIEl0IGFsc28gaGFuZGxlcyBhIGNhc2Ugd2hlcmUgaXRcbiAqIGlzIGNhbGxlZCB0b28gZWFybHkgd2hpY2ggd2Ugc3VzcGVjdCBtYXkgYmUgaGFwcGVuaW5nIHNvbWV0aW1lc1xuICogKG5vdCBzdXJlIHdoeSlcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUub25XYXRjaERvZ1RpbWVvdXRfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy53YXRjaERvZ1RpbWVySWRfID0gbnVsbDtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIHRoaXMud2F0Y2hEb2dUaW1lb3V0VGltZV8sICdXYXRjaERvZyB0aW1lb3V0IHRpbWUgbWlzc2luZz8nKTtcbiAgaWYgKG5vdyAtIHRoaXMud2F0Y2hEb2dUaW1lb3V0VGltZV8gPj0gMCkge1xuICAgIHRoaXMuaGFuZGxlVGltZW91dF8oKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBnb3QgY2FsbGVkIHRvbyBlYXJseSBmb3Igc29tZSByZWFzb25cbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ud2FybmluZygnV2F0Y2hEb2cgdGltZXIgY2FsbGVkIHRvbyBlYXJseScpO1xuICAgIHRoaXMuc3RhcnRXYXRjaERvZ1RpbWVyXyh0aGlzLndhdGNoRG9nVGltZW91dFRpbWVfIC0gbm93KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGhhcyBhY3R1YWxseSB0aW1lZCBvdXQuIFdpbGwgY2xlYW51cCBhbmQgbm90aWZ5IHRoZVxuICogY2hhbm5lbCBvZiB0aGUgZmFpbHVyZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuaGFuZGxlVGltZW91dF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5zdWNjZXNzZnVsXykge1xuICAgIC8vIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gICAgdGhpcy5jaGFubmVsRGVidWdfLnNldmVyZShcbiAgICAgICAgJ1JlY2VpdmVkIHdhdGNoZG9nIHRpbWVvdXQgZXZlbiB0aG91Z2ggcmVxdWVzdCBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH1cblxuICB0aGlzLmNoYW5uZWxEZWJ1Z18udGltZW91dFJlc3BvbnNlKHRoaXMucmVxdWVzdFVyaV8pO1xuXG4gIC8vIElNRyBvciBTZW5kQmVhY29uIHJlcXVlc3RzIG5ldmVyIG5vdGljZSBpZiB0aGV5IHdlcmUgc3VjY2Vzc2Z1bCxcbiAgLy8gYW5kIGFsd2F5cyAndGltZSBvdXQnLiBUaGlzIGZhY3Qgc2F5cyBub3RoaW5nIGFib3V0IHJlYWNoYWJpbGl0eS5cbiAgaWYgKHRoaXMudHlwZV8gIT0gQ2hhbm5lbFJlcXVlc3QuVHlwZV8uQ0xPU0VfUkVRVUVTVCkge1xuICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlTZXJ2ZXJSZWFjaGFiaWxpdHlFdmVudChcbiAgICAgICAgcmVxdWVzdFN0YXRzLlNlcnZlclJlYWNoYWJpbGl0eS5SRVFVRVNUX0ZBSUxFRCk7XG4gICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5SRVFVRVNUX1RJTUVPVVQpO1xuICB9XG5cbiAgdGhpcy5jbGVhbnVwXygpO1xuXG4gIC8vIFNldCBlcnJvciBhbmQgZGlzcGF0Y2ggZmFpbHVyZS5cbiAgLy8gVGhpcyBpcyBjYWxsZWQgZm9yIENMT1NFX1JFUVVFU1QgdG9vIHRvIGVuc3VyZSBjaGFubmVsXy5vblJlcXVlc3RDb21wbGV0ZS5cbiAgdGhpcy5sYXN0RXJyb3JfID0gQ2hhbm5lbFJlcXVlc3QuRXJyb3IuVElNRU9VVDtcbiAgdGhpcy5kaXNwYXRjaEZhaWx1cmVfKCk7XG59O1xuXG5cbi8qKlxuICogTm90aWZpZXMgdGhlIGNoYW5uZWwgdGhhdCB0aGlzIHJlcXVlc3QgZmFpbGVkLlxuICogQHByaXZhdGVcbiAqL1xuQ2hhbm5lbFJlcXVlc3QucHJvdG90eXBlLmRpc3BhdGNoRmFpbHVyZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5jaGFubmVsXy5pc0Nsb3NlZCgpIHx8IHRoaXMuY2FuY2VsbGVkXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuY2hhbm5lbF8ub25SZXF1ZXN0Q29tcGxldGUodGhpcyk7XG59O1xuXG5cbi8qKlxuICogQ2xlYW5zIHVwIHRoZSBvYmplY3RzIHVzZWQgdG8gbWFrZSB0aGUgcmVxdWVzdC4gVGhpcyBmdW5jdGlvbiBpc1xuICogaWRlbXBvdGVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNhbmNlbFdhdGNoRG9nVGltZXJfKCk7XG5cbiAgZ29vZy5kaXNwb3NlKHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlXyk7XG4gIHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlXyA9IG51bGw7XG5cbiAgLy8gU3RvcCB0aGUgcG9sbGluZyB0aW1lciwgaWYgbmVjZXNzYXJ5LlxuICB0aGlzLnBvbGxpbmdUaW1lcl8uc3RvcCgpO1xuXG4gIC8vIFVuaG9vayBhbGwgZXZlbnQgaGFuZGxlcnMuXG4gIHRoaXMuZXZlbnRIYW5kbGVyXy5yZW1vdmVBbGwoKTtcblxuICBpZiAodGhpcy54bWxIdHRwXykge1xuICAgIC8vIGNsZWFyIG91dCB0aGlzLnhtbEh0dHBfIGJlZm9yZSBhYm9ydGluZyBzbyB3ZSBoYW5kbGUgZ2V0dGluZyByZWVudGVyZWRcbiAgICAvLyBpbnNpZGUgYWJvcnRcbiAgICBjb25zdCB4bWxodHRwID0gdGhpcy54bWxIdHRwXztcbiAgICB0aGlzLnhtbEh0dHBfID0gbnVsbDtcbiAgICB4bWxodHRwLmFib3J0KCk7XG4gICAgeG1saHR0cC5kaXNwb3NlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVxdWVzdCB3YXMgc3VjY2Vzc2Z1bC4gT25seSB2YWxpZCBhZnRlciB0aGUgaGFuZGxlclxuICogaXMgY2FsbGVkIHRvIGluZGljYXRlIGNvbXBsZXRpb24gb2YgdGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkZWQuXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5nZXRTdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuc3VjY2Vzc2Z1bF87XG59O1xuXG5cbi8qKlxuICogSWYgdGhlIHJlcXVlc3Qgd2FzIG5vdCBzdWNjZXNzZnVsLCByZXR1cm5zIHRoZSByZWFzb24uXG4gKlxuICogQHJldHVybiB7P0NoYW5uZWxSZXF1ZXN0LkVycm9yfSAgVGhlIGxhc3QgZXJyb3IuXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5nZXRMYXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5sYXN0RXJyb3JfO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0YXR1cyBjb2RlIG9mIHRoZSBsYXN0IHJlcXVlc3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzdGF0dXMgY29kZSBvZiB0aGUgbGFzdCByZXF1ZXN0LlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0TGFzdFN0YXR1c0NvZGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5sYXN0U3RhdHVzQ29kZV87XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Vzc2lvbiBpZCBmb3IgdGhpcyBjaGFubmVsLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFRoZSBzZXNzaW9uIElELlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0U2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuc2lkXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZXF1ZXN0IGlkIGZvciB0aGlzIHJlcXVlc3QuIEVhY2ggcmVxdWVzdCBoYXMgYSB1bmlxdWUgcmVxdWVzdFxuICogaWQgYW5kIHRoZSByZXF1ZXN0IElEcyBhcmUgYSBzZXF1ZW50aWFsIGluY3JlYXNpbmcgY291bnQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfG51bWJlcnx1bmRlZmluZWR9IFRoZSByZXF1ZXN0IElELlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0UmVxdWVzdElkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucmlkXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkYXRhIGZvciBhIHBvc3QsIGlmIHRoaXMgcmVxdWVzdCBpcyBhIHBvc3QuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIFBPU1QgZGF0YSBwcm92aWRlZCBieSB0aGUgcmVxdWVzdCBpbml0aWF0b3IuXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5nZXRQb3N0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnBvc3REYXRhXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBYaHJJbyByZXF1ZXN0IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHs/Z29vZy5uZXQuWGhySW99IEFueSBYaHJJbyByZXF1ZXN0IGNyZWF0ZWQgZm9yIHRoaXMgb2JqZWN0LlxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuZ2V0WGhyID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMueG1sSHR0cF87XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdGltZSB0aGF0IHRoZSByZXF1ZXN0IHN0YXJ0ZWQsIGlmIGl0IGhhcyBzdGFydGVkLlxuICpcbiAqIEByZXR1cm4gez9udW1iZXJ9IFRoZSB0aW1lIHRoZSByZXF1ZXN0IHN0YXJ0ZWQsIGFzIHJldHVybmVkIGJ5IERhdGUubm93KCkuXG4gKi9cbkNoYW5uZWxSZXF1ZXN0LnByb3RvdHlwZS5nZXRSZXF1ZXN0U3RhcnRUaW1lID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucmVxdWVzdFN0YXJ0VGltZV87XG59O1xuXG5cbi8qKlxuICogSGVscGVyIHRvIGNhbGwgdGhlIGNhbGxiYWNrJ3Mgb25SZXF1ZXN0RGF0YSwgd2hpY2ggY2F0Y2hlcyBhbnlcbiAqIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIFRoZSByZXF1ZXN0IGRhdGEuXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFubmVsUmVxdWVzdC5wcm90b3R5cGUuc2FmZU9uUmVxdWVzdERhdGFfID0gZnVuY3Rpb24oZGF0YSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRyeSB7XG4gICAgdGhpcy5jaGFubmVsXy5vblJlcXVlc3REYXRhKHRoaXMsIGRhdGEpO1xuICAgIGNvbnN0IHN0YXRzID0gcmVxdWVzdFN0YXRzLlNlcnZlclJlYWNoYWJpbGl0eTtcbiAgICByZXF1ZXN0U3RhdHMubm90aWZ5U2VydmVyUmVhY2hhYmlsaXR5RXZlbnQoc3RhdHMuQkFDS19DSEFOTkVMX0FDVElWSVRZKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIER1bXAgZGVidWcgaW5mbywgYnV0IGtlZXAgZ29pbmcgd2l0aG91dCBjbG9zaW5nIHRoZSBjaGFubmVsLlxuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kdW1wRXhjZXB0aW9uKGUsICdFcnJvciBpbiBodHRwcmVxdWVzdCBjYWxsYmFjaycpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29udmVuaWVuY2UgZmFjdG9yeSBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIFRoZSBjaGFubmVsIG9iamVjdCB0aGF0IG93bnMgdGhpcyByZXF1ZXN0LlxuICogQHBhcmFtIHtXZWJDaGFubmVsRGVidWd9IGNoYW5uZWxEZWJ1ZyBBIFdlYkNoYW5uZWxEZWJ1ZyB0byB1c2UgZm9yIGxvZ2dpbmcuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zZXNzaW9uSWQgIFRoZSBzZXNzaW9uIGlkIGZvciB0aGUgY2hhbm5lbC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcj19IG9wdF9yZXF1ZXN0SWQgIFRoZSByZXF1ZXN0IGlkIGZvciB0aGlzIHJlcXVlc3QuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9yZXRyeUlkICBUaGUgcmV0cnkgaWQgZm9yIHRoaXMgcmVxdWVzdC5cbiAqIEByZXR1cm4geyFDaGFubmVsUmVxdWVzdH0gVGhlIGNyZWF0ZWQgY2hhbm5lbCByZXF1ZXN0LlxuICovXG5DaGFubmVsUmVxdWVzdC5jcmVhdGVDaGFubmVsUmVxdWVzdCA9IGZ1bmN0aW9uKFxuICAgIGNoYW5uZWwsIGNoYW5uZWxEZWJ1Zywgb3B0X3Nlc3Npb25JZCwgb3B0X3JlcXVlc3RJZCwgb3B0X3JldHJ5SWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbmV3IENoYW5uZWxSZXF1ZXN0KFxuICAgICAgY2hhbm5lbCwgY2hhbm5lbERlYnVnLCBvcHRfc2Vzc2lvbklkLCBvcHRfcmVxdWVzdElkLCBvcHRfcmV0cnlJZCk7XG59O1xufSk7ICAvLyBnb29nLnNjb3BlXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBzaW5nbGUgbW9kdWxlIHRvIGRlZmluZSB1c2VyLWFnZW50IHNwZWNpZmljIGVudmlyb25tZW50XG4gKiBkZXRhaWxzLlxuICpcbiAqL1xuXG5nb29nLm1vZHVsZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLmVudmlyb25tZW50Jyk7XG5cbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxudmFyIHVzZXJBZ2VudCA9IGdvb2cucmVxdWlyZSgnZ29vZy51c2VyQWdlbnQnKTtcblxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHBvbGxpbmcgaW50ZXJ2YWwgaW4gbWlsbGlzIGZvciBFZGdlLlxuICpcbiAqIEN1cnJlbnRseSBvbiBlZGdlLCBuZXctY2h1bmsgZXZlbnRzIG1heSBiZSBub3QgYmUgZmlyZWQgKGF0IGFsbCkgaWYgYSBuZXdcbiAqIGNodW5rIGFycml2ZXMgd2l0aGluIDUwbXMgZm9sbG93aW5nIHRoZSBwcmV2aW91cyBjaHVuay4gVGhpcyBtYXkgYmUgZml4ZWRcbiAqIGluIGZ1dHVyZSwgd2hpY2ggcmVxdWlyZXMgY2hhbmdlcyB0byB0aGUgd2hhdHdnIHNwZWMgdG9vLlxuICpcbiAqIEBwcml2YXRlIEBjb25zdCB7bnVtYmVyfVxuICovXG52YXIgRURHRV9QT0xMSU5HX0lOVEVSVkFMXyA9IDEyNTtcblxuXG4vKipcbiAqIEhpc3Rvcnk6XG4gKlxuICogSUUxMSBpcyBzdGlsbCB1c2luZyBUcmlkZW50LCB0aGUgdHJhZGl0aW9uYWwgZW5naW5lIGZvciBJRS5cbiAqIEVkZ2UgaXMgdXNpbmcgRWRnZUhUTUwsIGEgZm9yayBvZiBUcmlkZW50LiBXZSBhcmUgc2VlaW5nIHRoZSBzYW1lIGlzc3VlXG4gKiBvbiBJRS0xMSAocmVwb3J0ZWQgaW4gMjAxNyksIHNvIHRyZWF0IElFIHRoZSBzYW1lIGFzIEVkZ2UgZm9yIG5vdy5cbiAqXG4gKiBXZSB1c2VkIHRvIGRvIHBvbGxpbmcgZm9yIE9wZXJhIChvbmx5KSB3aXRoIGFuIDI1MG1zIGludGVydmFsLCBiZWNhdXNlIE9wZXJhXG4gKiBvbmx5IGZpcmVzIHJlYWR5U3RhdGUgPT0gSU5URVJBQ1RJVkUgb25jZS4gT3BlcmEgc3dpdGNoZWQgdG8gV2ViS2l0IGluIDIwMTMsXG4gKiBhbmQgdGhlbiB0byBCbGluayAoY2hyb21lKS5cbiAqXG4gKiBUT0RPKHVzZXIpOiBjaGVjayB0aGUgcmF3IFVBIHN0cmluZyB0byBrZWVwIHBvbGxpbmcgZm9yIG9sZCwgbW9iaWxlIG9wZXJhc1xuICogdGhhdCBtYXkgc3RpbGwgYmUgYWZmZWN0ZWQuIEZvciBvbGQgT3BlcmEsIGRvdWJsZSB0aGUgcG9sbGluZyBpbnRlcnZhbFxuICogdG8gMjUwbXMuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwb2xsaW5nIGlzIHJlcXVpcmVkIHdpdGggWEhSLlxuICovXG5leHBvcnRzLmlzUG9sbGluZ1JlcXVpcmVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB1c2VyQWdlbnQuRURHRV9PUl9JRTtcbn07XG5cblxuLyoqXG4gKiBIb3cgb2Z0ZW4gdG8gcG9sbCAoaW4gTVMpIGZvciBjaGFuZ2VzIHRvIHJlc3BvbnNlVGV4dCBpbiBicm93c2VycyB0aGF0IGRvbid0XG4gKiBmaXJlIG9ucmVhZHlzdGF0ZWNoYW5nZSBkdXJpbmcgaW5jcmVtZW50YWwgbG9hZGluZyBvZiB0aGUgcmVzcG9uc2UgYm9keS5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ8dW5kZWZpbmVkfSBUaGUgcG9sbGluZyBpbnRlcnZhbCAoTVMpIGZvciB0aGUgY3VycmVudCBVLUE7XG4gKiBvciB1bmRlZmluZWQgaWYgcG9sbGluZyBpcyBub3Qgc3VwcG9zZWQgdG8gYmUgZW5hYmxlZC5cbiAqL1xuZXhwb3J0cy5nZXRQb2xsaW5nSW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHVzZXJBZ2VudC5FREdFX09SX0lFKSB7XG4gICAgcmV0dXJuIEVER0VfUE9MTElOR19JTlRFUlZBTF87XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBPcmlnaW4gdHJpYWwgdG9rZW4gZm9yIGdvb2dsZS5jb21cbiAqXG4gKiBodHRwczovL2RldmVsb3BlcnMuY2hyb21lLmNvbS9vcmlnaW50cmlhbHMvIy90cmlhbHNcbiAqXG4gKiBodHRwOi8vZ29vZ2xlY2hyb21lLmdpdGh1Yi5pby9PcmlnaW5UcmlhbHMvY2hlY2stdG9rZW4uaHRtbFxuICogT3JpZ2luOiBodHRwczovL2dvb2dsZS5jb206NDQzXG4gKiBNYXRjaGVzIFN1YmRvbWFpbnM/IFllc1xuICogTWF0Y2hlcyBUaGlyZC1wYXJ0eT8gWWVzXG4gKiBGZWF0dXJlOiBGZXRjaFVwbG9hZFN0cmVhbWluZ1xuICogVXAgdG8gQ2hyb21lIDk1IChlbmRzIHdpdGggdGhlIHJvbGxvdXQgb2YgbmV4dCBDaHJvbWUgcmVsZWFzZSksIG5vIGxhdGVyXG4gKiB0aGFuIE5vdiA5LCAyMDIxXG4gKlxuICogVG9rZW4gZm9yIGdvb2dsZWFwaXMuY29tIHdpbGwgYmUgcmVnaXN0ZXJlZCBhZnRlciBnb29nbGUuY29tJ3MgaXMgZGVwbG95ZWQuXG4gKlxuICovXG5jb25zdCBPVF9UT0tFTl9HT09HTEVfQ09NID1cbiAgICAnQTBlTmJsdFkxbmQ0TVA3WFRIWG5UeFdvZ0RMNm1XVGRnSUlLZktPVEpvVUhOYkZGTVpRQm9pSEhqSjlVSzlsZ1luZFdGYXhPV1I3bGQ4dVVqY1dtY3dJQUFBQi9leUp2Y21sbmFXNGlPaUpvZEhSd2N6b3ZMMmR2YjJkc1pTNWpiMjA2TkRReklpd2labVZoZEhWeVpTSTZJa1psZEdOb1ZYQnNiMkZrVTNSeVpXRnRhVzVuSWl3aVpYaHdhWEo1SWpveE5qTTJOVEF5TXprNUxDSnBjMU4xWW1SdmJXRnBiaUk2ZEhKMVpTd2lhWE5VYUdseVpGQmhjblI1SWpwMGNuVmxmUT09JztcblxuXG4vKipcbiAqIENyZWF0ZXMgUmVhZGFibGVTdHJlYW0gdG8gdXBsb2FkXG4gKiBAcmV0dXJuIHshUmVhZGFibGVTdHJlYW19IFJlYWRhYmxlU3RyZWFtIHRvIHVwbG9hZFxuICovXG5mdW5jdGlvbiBjcmVhdGVTdHJlYW0oKSB7XG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgZ29vZy5nbG9iYWwuVGV4dEVuY29kZXIoKTtcbiAgcmV0dXJuIG5ldyBnb29nLmdsb2JhbC5SZWFkYWJsZVN0cmVhbSh7XG4gICAgc3RhcnQ6IGNvbnRyb2xsZXIgPT4ge1xuICAgICAgZm9yIChjb25zdCBvYmogb2YgWyd0ZXN0XFxyXFxuJywgJ3Rlc3RcXHJcXG4nXSkge1xuICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUob2JqKSk7XG4gICAgICB9XG4gICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgdGhlIHVzZXIgYWdlbnQgaXMgY2hyb21lIGFuZCBpdHMgdmVyc2lvbiBpcyBoaWdoZXIgdGhhbiBNOTAuXG4gKiBUaGlzIGNvZGUgaXMgaGFyZC1jb2RlZCBmcm9tIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3NlciB0byBhdm9pZCBmaWxlIHNpemVcbiAqIGluY3JlYXNpbmcuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBhYm92ZSBpcyB0cnVlLlxuICovXG5mdW5jdGlvbiBpc0Nocm9tZU05ME9ySGlnaGVyKCkge1xuICBjb25zdCB1c2VyQWdlbnRTdHIgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBuYXZpZ2F0b3IgPSBnb29nLmdsb2JhbC5uYXZpZ2F0b3I7XG4gICAgaWYgKG5hdmlnYXRvcikge1xuICAgICAgY29uc3QgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIGlmICh1c2VyQWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJBZ2VudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KCk7XG5cbiAgY29uc3QgbWF0Y2hVc2VyQWdlbnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gdXNlckFnZW50U3RyLmluZGV4T2Yoc3RyKSAhPSAtMTtcbiAgfTtcblxuICBpZiAoIW1hdGNoVXNlckFnZW50KCdDaHJvbWUnKSB8fCBtYXRjaFVzZXJBZ2VudCgnRWRnJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IC9DaHJvbWVcXC8oXFxkKykvLmV4ZWModXNlckFnZW50U3RyKTtcbiAgY29uc3QgY2hyb21lVmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gIHJldHVybiBjaHJvbWVWZXJzaW9uID49IDkwO1xufVxuXG4vKipcbiAqIERldGVjdCB0aGUgVVJMIG9yaWdpbiBpcyAqLmdvb2dsZS5jb20uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB0YXJnZXQgVVJMLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYWJvdmUgaXMgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gaXNVcmxHb29nbGUodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL1xcL1xcLyhbXlxcL10rKVxcLy8uZXhlYyh1cmwpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG9yaWdpbiA9IG1hdGNoWzFdO1xuICByZXR1cm4gb3JpZ2luLmVuZHNXaXRoKCdnb29nbGUuY29tJyk7XG59XG5cbi8qKlxuICogVGhlIGZsYWcgdG8gcnVuIHRoZSBvcmlnaW4gdHJpYWxzIGNvZGUgb25seSBvbmNlLlxuICovXG5sZXQgaXNTdGFydE9yaWdpblRyaWFsc0NhbGxlZCA9IGZhbHNlO1xuXG4vKipcbiAqIEZvciBGZXRjaC91cGxvYWQgT1QsIG1ha2UgdGhyZWUgcmVxdWVzdHMgYWdhaW5zdCB0aGUgc2VydmVyIGVuZHBvaW50LlxuICogUE9TVCByZXF1ZXN0cyBjb250YWluIG9ubHkgZHVtbXkgcGF5bG9hZC5cbiAqXG4gKiBodHRwczovL2RldmVsb3BlcnMuY2hyb21lLmNvbS9vcmlnaW50cmlhbHMvIy92aWV3X3RyaWFsLzM1MjQwNjY3MDg0MTc0MTMxMjFcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIGNhbGxlZCBmcm9tIGJhY2tncm91bmQgZHVyaW5nIHRoZSBoYW5kc2hha2UuXG4gKiBFeGNlcHRpb25zIHdpbGwgYmUgbG9nZ2VkIGJ5IHRoZSBjYWxsZXIuXG4gKlxuICogTm8gc3RhdHMgb3IgbG9ncyBhcmUgY29sbGVjdGVkIG9uIHRoZSBjbGllbnQtc2lkZS4gVG8gYmUgZGlzYWJsZWQgb25jZSB0aGVcbiAqIE9UIGlzIGV4cGlyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIGJhc2UgVVJMIHBhdGggZm9yIHRoZSByZXF1ZXN0c1xuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gbG9nRXJyb3IgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gZXhjZXB0aW9ucyBhcmVcbiAqICAgICBjYXVnaHQuXG4gKi9cbmV4cG9ydHMuc3RhcnRPcmlnaW5UcmlhbHMgPSBmdW5jdGlvbihwYXRoLCBsb2dFcnJvcikge1xuICBpZiAoaXNTdGFydE9yaWdpblRyaWFsc0NhbGxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1N0YXJ0T3JpZ2luVHJpYWxzQ2FsbGVkID0gdHJ1ZTtcbiAgLy8gTkU6IG1heSBuZWVkIGNoZWNrIGlmIHBhdGggaGFzIGFscmVhZHkgY29udGFpbnMgcXVlcnkgcGFyYW1zP1xuXG4gIC8vIEFjY2VwdCBvbmx5IENocm9tZSBNOTAgb3IgbGF0ZXIgZHVlIHRvIHNlcnZpY2Ugd29ya2VyIHN1cHBvcnQuXG4gIGlmICghaXNDaHJvbWVNOTBPckhpZ2hlcigpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQWNjZXB0IG9ubHkgb25seSBnb29nbGUuY29tIGFuZCBzdWJkb2FtaW5zLlxuICBpZiAoIWlzVXJsR29vZ2xlKHBhdGgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFNpbmNlIDNQIE9UIGlzIG5vdCBzdXBwb3J0ZWQgeWV0LCB3ZSBzaG91bGQgY2hlY2sgdGhlIGN1cnJlbnQgcGFnZSBtYXRjaGVzXG4gIC8vIHRoZSBwYXRoIChhYnNvbHV0ZSBvbmU/KSB0byBkaXNhYmxlIHRoaXMgT1QgZm9yIGNyb3NzLW9yaWdpbiBjYWxsc1xuICBpZiAoIXdpbmRvdyB8fCAhd2luZG93LmRvY3VtZW50IHx8ICFpc1VybEdvb2dsZSh3aW5kb3cuZG9jdW1lbnQuVVJMKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVuYWJsZSBvcmlnaW4gdHJpYWwgYnkgaW5qZWN0aW5nIE9UIDxtZXRhPiB0YWdcbiAgY29uc3QgdG9rZW5FbGVtZW50ID1cbiAgICAgIC8qKiBAdHlwZSB7ISBIVE1MTWV0YUVsZW1lbnR9ICovIChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdtZXRhJykpO1xuICB0b2tlbkVsZW1lbnQuaHR0cEVxdWl2ID0gJ29yaWdpbi10cmlhbCc7XG4gIHRva2VuRWxlbWVudC5jb250ZW50ID0gT1RfVE9LRU5fR09PR0xFX0NPTTtcbiAgLy8gYXBwZW5kQ2hpbGQoKSBzeW5jaHJvbm91c2x5IGVuYWJsZXMgT1QuXG4gIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodG9rZW5FbGVtZW50KTtcblxuICAvLyBDaGVjayBpZiBmZXRjaCB1cGxvYWQgc3RyZWFtIGlzIGFjdHVhbGx5IGVuYWJsZWQuXG4gIC8vIEJ5IHRoZSBzcGVjLCBTdHJlYW1pbmcgcmVxdWVzdCBkb2Vzbid0IGhhcyB0aGUgQ29udGVudC1UeXBlIGhlYWRlcjpcbiAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtYm9keWluaXQtZXh0cmFjdFxuICAvLyBJZiBDaHJvbWUgZG9lc24ndCBzdXBwb3J0IFN0cmVhbWluZywgdGhlIGJvZHkgc3RyZWFtIGlzIGNvbnZlcnRlZCB0byBhXG4gIC8vIHN0cmluZyBcIltvYmplY3QgUmVhZGFibGVTdHJlYW1dXCIgZm9yIGZhbGxiYWNrIHRoZW4gaXQgaGFzIFwiQ29udGVudC1UeXBlOlxuICAvLyB0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIi5cbiAgY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtcyA9ICFuZXcgUmVxdWVzdCgnJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG4gIGlmICghc3VwcG9ydHNSZXF1ZXN0U3RyZWFtcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIDFzdCByZXE6ICBwYXRoP290PTFcbiAgLy8gbm9uLXN0cmVhbWluZyB1cGxvYWQgcmVxdWVzdFxuICBnb29nLmdsb2JhbC5mZXRjaChgJHtwYXRofT9vdD0xYCwge21ldGhvZDogJ1BPU1QnLCBib2R5OiAndGVzdFxcclxcbid9KVxuICAgICAgLmNhdGNoKGxvZ0Vycm9yKTtcblxuICAvLyAybmQgcmVxOiAgcGF0aD9vdD0yXG4gIC8vIGgyLW9ubHkgc3RyZWFtaW5nIHVwbG9hZCByZXF1ZXN0XG4gIGdvb2cuZ2xvYmFsXG4gICAgICAuZmV0Y2goYCR7cGF0aH0/b3Q9MmAsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGNyZWF0ZVN0cmVhbSgpLFxuICAgICAgICBhbGxvd0hUVFAxRm9yU3RyZWFtaW5nVXBsb2FkOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gobG9nRXJyb3IpO1xuXG4gIC8vIDNyZCByZXE6ICBwYXRoP290PTNcbiAgLy8gaDEtYWxsb3dlZCBzdHJlYW1pbmcgdXBsb2FkIHJlcXVlc3RcbiAgZ29vZy5nbG9iYWxcbiAgICAgIC5mZXRjaChgJHtwYXRofT9vdD0zYCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogY3JlYXRlU3RyZWFtKCksXG4gICAgICAgIGFsbG93SFRUUDFGb3JTdHJlYW1pbmdVcGxvYWQ6IHRydWUsXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGxvZ0Vycm9yKTtcblxuICAvLyBFeGFtcGxlIGNhbGxpbmcgYSBDaHJvbWUgQVBJOlxuICAvLyBnb29nLmdsb2JhbC5jaHJvbWUubG9hZFRpbWVzKCkud2FzRmV0Y2hlZFZpYVNwZHlcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQmFzZSBXZWJDaGFubmVsIGltcGxlbWVudGF0aW9uLlxuICovXG5cblxuZ29vZy5wcm92aWRlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2UnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLlVyaScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFycmF5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzeW5jLnJ1bicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmNvbGxlY3Rpb25zLm1hcHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5qc29uJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsUmVxdWVzdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ29ubmVjdGlvblN0YXRlJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5Gb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsRGVidWcnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmUnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmVWOCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuZW52aXJvbm1lbnQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLm5ldFV0aWxzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuRmV0Y2hYbWxIdHRwRmFjdG9yeScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5XZWJDaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LlhocklvJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LlhtbEh0dHBGYWN0b3J5Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LnJwYy5IdHRwQ29ycycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm9iamVjdCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cnVjdHMnKTtcblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcbmNvbnN0IFdlYkNoYW5uZWwgPSBnb29nLm5ldC5XZWJDaGFubmVsO1xuY29uc3QgQ2hhbm5lbFJlcXVlc3QgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3Q7XG5jb25zdCBDb25uZWN0aW9uU3RhdGUgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ29ubmVjdGlvblN0YXRlO1xuY29uc3QgRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbCA9XG4gICAgZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2w7XG5jb25zdCBXZWJDaGFubmVsRGVidWcgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbERlYnVnO1xuY29uc3QgV2lyZSA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlO1xuY29uc3QgV2lyZVY4ID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmVWODtcbmNvbnN0IGVudmlyb25tZW50ID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLmVudmlyb25tZW50O1xuY29uc3QgbmV0VXRpbHMgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwubmV0VXRpbHM7XG5jb25zdCByZXF1ZXN0U3RhdHMgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwucmVxdWVzdFN0YXRzO1xuXG5jb25zdCBodHRwQ29ycyA9IGdvb2cubW9kdWxlLmdldCgnZ29vZy5uZXQucnBjLkh0dHBDb3JzJyk7XG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gSWYgV2ViQ2hhbm5lbCBzaG91bGQgY29tcGlsZSB3aXRoIE9yaWdpbiBUcmlhbCBmZWF0dXJlcy5cbiAqL1xuY29uc3QgQUxMT1dfT1JJR0lOX1RSSUFMX0ZFQVRVUkVTID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5uZXQud2ViQ2hhbm5lbC5BTExPV19PUklHSU5fVFJJQUxfRkVBVFVSRVMnLCB0cnVlKTtcblxuLyoqXG4gKiBHZXRzIGFuIGludGVybmFsIGNoYW5uZWwgcGFyYW1ldGVyIGluIGEgdHlwZS1zYWZlIHdheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1OYW1lIHRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlciB0byBmZXRjaC5cbiAqIEBwYXJhbSB7IVR9IGRlZmF1bHRWYWx1ZSB0aGUgZGVmYXVsdCB2YWx1ZSB0byByZXR1cm5cbiAqIEBwYXJhbSB7IWdvb2cubmV0LldlYkNoYW5uZWwuT3B0aW9ucz19IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBmb3IgdGhlXG4gKiAgICAgICAgV2ViQ2hhbm5lbCBpbnN0YW5jZS5cbiAqIEByZXR1cm4ge1R9XG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiBnZXRJbnRlcm5hbENoYW5uZWxQYXJhbShwYXJhbU5hbWUsIGRlZmF1bHRWYWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuaW50ZXJuYWxDaGFubmVsUGFyYW1zKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtUfSAqLyAob3B0aW9ucy5pbnRlcm5hbENoYW5uZWxQYXJhbXNbcGFyYW1OYW1lXSkgfHxcbiAgICAgIGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBUaGlzIFdlYkNoYW5uZWwgaW1wbGVtZW50YXRpb24gaXMgYnJhbmNoZWQgb2ZmIGdvb2cubmV0LkJyb3dzZXJDaGFubmVsXG4gKiBmb3Igbm93LiBPbmdvaW5nIGNoYW5nZXMgdG8gZ29vZy5uZXQuQnJvd3NlckNoYW5uZWwgd2lsbCBiZSBiYWNrXG4gKiBwb3J0ZWQgdG8gdGhpcyBpbXBsZW1lbnRhdGlvbiBhcyBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHshZ29vZy5uZXQuV2ViQ2hhbm5lbC5PcHRpb25zPX0gb3B0X29wdGlvbnMgQ29uZmlndXJhdGlvbiBmb3IgdGhlXG4gKiAgICAgICAgV2ViQ2hhbm5lbCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2NsaWVudFZlcnNpb24gQW4gYXBwbGljYXRpb24tc3BlY2lmaWMgdmVyc2lvbiBudW1iZXJcbiAqICAgICAgICB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aGVuIGNvbm5lY3RlZC5cbiAqIEBwYXJhbSB7IUNvbm5lY3Rpb25TdGF0ZT19IG9wdF9jb25uIFByZXZpb3VzbHkgZGV0ZXJtaW5lZCBjb25uZWN0aW9uXG4gKiAgICAgICAgY29uZGl0aW9ucy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICogQGltcGxlbWVudHMge2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5DaGFubmVsfVxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2UgPSBmdW5jdGlvbihcbiAgICBvcHRfb3B0aW9ucywgb3B0X2NsaWVudFZlcnNpb24sIG9wdF9jb25uKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFRoZSBjbGllbnQgbGlicmFyeSB2ZXJzaW9uIChjYXBhYmlsaXRpZXMpLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jbGllbnRWZXJzaW9uXyA9IG9wdF9jbGllbnRWZXJzaW9uIHx8IDA7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXJ2ZXIgbGlicmFyeSB2ZXJzaW9uIChjYXBhYmlsaXRpZXMpLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5zZXJ2ZXJWZXJzaW9uXyA9IDA7XG5cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcXVldWVkIG1hcHMgdGhhdCBuZWVkIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAgICogQHByaXZhdGUgeyFBcnJheTxXaXJlLlF1ZXVlZE1hcD59XG4gICAqL1xuICB0aGlzLm91dGdvaW5nTWFwc18gPSBbXTtcblxuICAvKipcbiAgICogVGhlIGNoYW5uZWwgZGVidWcgdXNlZCBmb3IgbG9nZ2luZ1xuICAgKiBAcHJpdmF0ZSB7IVdlYkNoYW5uZWxEZWJ1Z31cbiAgICovXG4gIHRoaXMuY2hhbm5lbERlYnVnXyA9IG5ldyBXZWJDaGFubmVsRGVidWcoKTtcblxuICAvKipcbiAgICogQ29ubmVjdGl2aXR5IHN0YXRlLlxuICAgKiBAcHJpdmF0ZSB7IUNvbm5lY3Rpb25TdGF0ZX1cbiAgICovXG4gIHRoaXMuY29ublN0YXRlXyA9IG9wdF9jb25uIHx8IG5ldyBDb25uZWN0aW9uU3RhdGUoKTtcblxuICAvKipcbiAgICogRXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byBhbGwgdGhlIHJlcXVlc3RzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAgICogQHByaXZhdGUgez9PYmplY3R9XG4gICAqL1xuICB0aGlzLmV4dHJhSGVhZGVyc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBFeHRyYSBIVFRQIGhlYWRlcnMgdG8gYWRkIHRvIHRoZSBpbml0IHJlcXVlc3Qocykgc2VudCB0byB0aGUgc2VydmVyLlxuICAgKiBAcHJpdmF0ZSB7P09iamVjdH1cbiAgICovXG4gIHRoaXMuaW5pdEhlYWRlcnNfID0gbnVsbDtcblxuICAvKipcbiAgICogQHByaXZhdGUgez9zdHJpbmd9IFRoZSBVUkwgcGFyYW0gbmFtZSB0byBvdmVyd3JpdGUgY3VzdG9tIEhUVFAgaGVhZGVyc1xuICAgKiB0byBieXBhc3MgQ09SUyBwcmVmbGlnaHQuXG4gICAqL1xuICB0aGlzLmh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW1fID0gbnVsbDtcblxuICAvKipcbiAgICogRXh0cmEgcGFyYW1ldGVycyB0byBhZGQgdG8gYWxsIHRoZSByZXF1ZXN0cyBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAqIEBwcml2YXRlIHs/T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5leHRyYVBhcmFtc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBQYXJhbWV0ZXIgbmFtZSBmb3IgdGhlIGh0dHAgc2Vzc2lvbiBpZC5cbiAgICogQHByaXZhdGUgez9zdHJpbmd9XG4gICAqL1xuICB0aGlzLmh0dHBTZXNzaW9uSWRQYXJhbV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgaHR0cCBzZXNzaW9uIGlkLCB0byBiZSBzZW50IHdpdGggaHR0cFNlc3Npb25JZFBhcmFtXyB3aXRoIGVhY2hcbiAgICogcmVxdWVzdCBhZnRlciB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAqIEBwcml2YXRlIHs/c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5odHRwU2Vzc2lvbklkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBDaGFubmVsUmVxdWVzdCBvYmplY3QgZm9yIHRoZSBiYWNrY2hhbm5lbC5cbiAgICogQHByaXZhdGUgez9DaGFubmVsUmVxdWVzdH1cbiAgICovXG4gIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSByZWxhdGl2ZSBwYXRoIChpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFnZSBob3N0aW5nIHRoZSBicm93c2VyIGNoYW5uZWwpXG4gICAqIGZvciBtYWtpbmcgcmVxdWVzdHMgdG8gdGhlIHNlcnZlci5cbiAgICogQHByaXZhdGUgez9zdHJpbmd9XG4gICAqL1xuICB0aGlzLnBhdGhfID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIGFic29sdXRlIFVSSSBmb3IgdGhlIGZvcndhcmRjaGFubmVsIHJlcXVlc3QuXG4gICAqIEBwcml2YXRlIHs/Z29vZy5Vcml9XG4gICAqL1xuICB0aGlzLmZvcndhcmRDaGFubmVsVXJpXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBhYnNvbHV0ZSBVUkkgZm9yIHRoZSBiYWNrY2hhbm5lbCByZXF1ZXN0LlxuICAgKiBAcHJpdmF0ZSB7P2dvb2cuVXJpfVxuICAgKi9cbiAgdGhpcy5iYWNrQ2hhbm5lbFVyaV8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHN1YmRvbWFpbiBwcmVmaXggZm9yIHVzaW5nIGEgc3ViZG9tYWluIGluIElFIGZvciB0aGUgYmFja2NoYW5uZWxcbiAgICogcmVxdWVzdHMuXG4gICAqIEBwcml2YXRlIHs/c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5ob3N0UHJlZml4XyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgd2UgYWxsb3cgdGhlIHVzZSBvZiBhIHN1YmRvbWFpbiBpbiBJRSBmb3IgdGhlIGJhY2tjaGFubmVsIHJlcXVlc3RzLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuYWxsb3dIb3N0UHJlZml4XyA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFRoZSBuZXh0IGlkIHRvIHVzZSBmb3IgdGhlIFJJRCAocmVxdWVzdCBpZGVudGlmaWVyKSBwYXJhbWV0ZXIuIFRoaXNcbiAgICogaWRlbnRpZmllciB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBmb3J3YXJkIGNoYW5uZWwgcmVxdWVzdC5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMubmV4dFJpZF8gPSAwO1xuXG4gIC8qKlxuICAgKiBUaGUgaWQgdG8gdXNlIGZvciB0aGUgbmV4dCBvdXRnb2luZyBtYXAuIFRoaXMgaWRlbnRpZmllciB1bmlxdWVseVxuICAgKiBpZGVudGlmaWVzIGEgc2VudCBtYXAuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLm5leHRNYXBJZF8gPSAwO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGZhaWwgZm9yd2FyZC1jaGFubmVsIHJlcXVlc3RzIGFmdGVyIG9uZSB0cnkgb3IgYSBmZXcgdHJpZXMuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5mYWlsRmFzdF8gPSBnZXRJbnRlcm5hbENoYW5uZWxQYXJhbSgnZmFpbEZhc3QnLCBmYWxzZSwgb3B0X29wdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBUaGUgaGFuZGxlciB0aGF0IHJlY2VpdmUgY2FsbGJhY2tzIGZvciBzdGF0ZSBjaGFuZ2VzIGFuZCBkYXRhLlxuICAgKiBAcHJpdmF0ZSB7P2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZS5IYW5kbGVyfVxuICAgKi9cbiAgdGhpcy5oYW5kbGVyXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRpbWVyIGlkZW50aWZpZXIgZm9yIGFzeW5jaHJvbm91c2x5IG1ha2luZyBhIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0LlxuICAgKiBUaGlzIGlzIHNldCB0byB0cnVlIGlmIHRoZSBmdW5jIGlzIHNjaGVkdWxlZCB3aXRoIGFzeW5jLnJ1biwgd2hpY2hcbiAgICogaXMgZXF1aXZhbGVudCB0byBzZXRUaW1lb3V0KDApLlxuICAgKiBAcHJpdmF0ZSB7P251bWJlcnw/Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZm9yd2FyZENoYW5uZWxUaW1lcklkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRpbWVyIGlkZW50aWZpZXIgZm9yIGFzeW5jaHJvbm91c2x5IG1ha2luZyBhIGJhY2sgY2hhbm5lbCByZXF1ZXN0LlxuICAgKiBAcHJpdmF0ZSB7P251bWJlcn1cbiAgICovXG4gIHRoaXMuYmFja0NoYW5uZWxUaW1lcklkXyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRpbWVyIGlkZW50aWZpZXIgZm9yIHRoZSB0aW1lciB0aGF0IHdhaXRzIGZvciB1cyB0byByZXRyeSB0aGUgYmFja2NoYW5uZWxcbiAgICogaW4gdGhlIGNhc2Ugd2hlcmUgaXQgaXMgZGVhZCBhbmQgbm8gbG9uZ2VyIHJlY2VpdmluZyBkYXRhLlxuICAgKiBAcHJpdmF0ZSB7P251bWJlcn1cbiAgICovXG4gIHRoaXMuZGVhZEJhY2tDaGFubmVsVGltZXJJZF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjbGllbnQncyBuZXR3b3JrIGNvbmRpdGlvbnMgY2FuIHN1cHBvcnQgc3RyZWFtZWQgcmVzcG9uc2VzLlxuICAgKiBAcHJpdmF0ZSB7P2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmVuYWJsZVN0cmVhbWluZ18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHN0cmVhbWluZyBtb2RlIGlzIGFsbG93ZWQuIEluIGNlcnRhaW4gZGVidWdnaW5nIHNpdHVhdGlvbnMsIGl0J3NcbiAgICogdXNlZnVsIHRvIGRpc2FibGUgdGhpcy5cbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmFsbG93U3RyZWFtaW5nTW9kZV8gPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgYXJyYXkgaWRlbnRpZmllciBvZiB0aGUgbGFzdCBhcnJheSByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIgZm9yIHRoZVxuICAgKiBiYWNrY2hhbm5lbCByZXF1ZXN0LlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5sYXN0QXJyYXlJZF8gPSAtMTtcblxuICAvKipcbiAgICogVGhlIGFycmF5IGlkIG9mIHRoZSBsYXN0IGFycmF5IHNlbnQgYnkgdGhlIHNlcnZlciB0aGF0IHdlIGtub3cgYWJvdXQuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxhc3RQb3N0UmVzcG9uc2VBcnJheUlkXyA9IC0xO1xuXG4gIC8qKlxuICAgKiBUaGUgbGFzdCBzdGF0dXMgY29kZSByZWNlaXZlZCAodW50aWwgYFN0YXRlLkNMT1NFRGAgaXMgcmVhY2hlZCkuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmxhc3RTdGF0dXNDb2RlXyA9IC0xO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgdGltZXMgd2UgaGF2ZSByZXRyaWVkIHRoZSBjdXJyZW50IGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0LlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJldHJ5Q291bnRfID0gMDtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHRpbWVzIGluIGEgcm93IHRoYXQgd2UgaGF2ZSByZXRyaWVkIHRoZSBjdXJyZW50IGJhY2sgY2hhbm5lbFxuICAgKiByZXF1ZXN0IGFuZCByZWNlaXZlZCBubyBkYXRhLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5iYWNrQ2hhbm5lbFJldHJ5Q291bnRfID0gMDtcblxuICAvKipcbiAgICogVGhlIGF0dGVtcHQgaWQgZm9yIHRoZSBjdXJyZW50IGJhY2sgY2hhbm5lbCByZXF1ZXN0LiBTdGFydHMgYXQgMSBhbmRcbiAgICogaW5jcmVtZW50cyBmb3IgZWFjaCByZWNvbm5lY3QuIFRoZSBzZXJ2ZXIgdXNlcyB0aGlzIHRvIGxvZyBpZiBvdXJcbiAgICogY29ubmVjdGlvbiBpcyBmbGFreSBvciBub3QuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmJhY2tDaGFubmVsQXR0ZW1wdElkXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIHBhcnQgb2YgdGhlIHRpbWUgYmVmb3JlIGZpcmluZyBuZXh0IHJldHJ5IHJlcXVlc3QuIERlZmF1bHQgaXMgNVxuICAgKiBzZWNvbmRzLiBOb3RlIHRoYXQgYSByYW5kb20gZGVsYXkgaXMgYWRkZWQgKHNlZSB7QGxpbmsgcmV0cnlEZWxheVNlZWRNc199KVxuICAgKiBmb3IgYWxsIHJldHJpZXMsIGFuZCBsaW5lYXIgYmFja29mZiBpcyBhcHBsaWVkIHRvIHRoZSBzdW0gZm9yIHN1YnNlcXVlbnRcbiAgICogcmV0cmllcy5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMuYmFzZVJldHJ5RGVsYXlNc18gPVxuICAgICAgZ2V0SW50ZXJuYWxDaGFubmVsUGFyYW0oJ2Jhc2VSZXRyeURlbGF5TXMnLCA1ICogMTAwMCwgb3B0X29wdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBBIHJhbmRvbSB0aW1lIGJldHdlZW4gMCBhbmQgdGhpcyBudW1iZXIgb2YgTVMgaXMgYWRkZWQgdG8gdGhlXG4gICAqIHtAbGluayBiYXNlUmV0cnlEZWxheU1zX30uIERlZmF1bHQgaXMgMTAgc2Vjb25kcy5cbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHRoaXMucmV0cnlEZWxheVNlZWRNc18gPVxuICAgICAgZ2V0SW50ZXJuYWxDaGFubmVsUGFyYW0oJ3JldHJ5RGVsYXlTZWVkTXMnLCAxMCAqIDEwMDAsIG9wdF9vcHRpb25zKTtcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2YgYXR0ZW1wdHMgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyIGZvciBmb3J3YXJkIGNoYW5uZWxcbiAgICogcmVxdWVzdHMuIERlZmF1bHRzIHRvIDIuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmZvcndhcmRDaGFubmVsTWF4UmV0cmllc18gPVxuICAgICAgZ2V0SW50ZXJuYWxDaGFubmVsUGFyYW0oJ2ZvcndhcmRDaGFubmVsTWF4UmV0cmllcycsIDIsIG9wdF9vcHRpb25zKTtcblxuICAvKipcbiAgICogVGhlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciBhIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0LiBEZWZhdWx0cyB0byAyMFxuICAgKiBzZWNvbmRzLiBOb3RlIHRoYXQgcGFydCBvZiB0aGlzIHRpbWVvdXQgY2FuIGJlIHJhbmRvbWl6ZWQuXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFRpbWVvdXRNc18gPSBnZXRJbnRlcm5hbENoYW5uZWxQYXJhbShcbiAgICAgICdmb3J3YXJkQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXMnLCAyMCAqIDEwMDAsIG9wdF9vcHRpb25zKTtcblxuICAvKipcbiAgICogVGhlIGN1c3RvbSBmYWN0b3J5IHVzZWQgdG8gY3JlYXRlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gICAqIEBwcml2YXRlIHshZ29vZy5uZXQuWG1sSHR0cEZhY3RvcnkgfCB1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLnhtbEh0dHBGYWN0b3J5XyA9XG4gICAgICAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMueG1sSHR0cEZhY3RvcnkpIHx8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhpcyBjaGFubmVsIHVzZXMgV0hBVFdHIEZldGNoL3N0cmVhbXMuXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy51c2VzRmV0Y2hTdHJlYW1zXyA9XG4gICAgICAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMudXNlRmV0Y2hTdHJlYW1zKSB8fCBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciBhIGJhY2sgY2hhbm5lbCByZXF1ZXN0LiBEZWZhdWx0cyB0byB1c2luZ1xuICAgKiB0aGUgdGltZW91dCBjb25maWd1cmVkIGluIENoYW5uZWxSZXF1ZXN0ICg0NXMpLiBJZiBzZXJ2ZXItc2lkZVxuICAgKiBrZWVwYWxpdmVJbnRlcnZhbCBpcyBrbm93biB0byB0aGUgY2xpZW50LCBzZXQgdGhlIGJhY2tjaGFubmVsIHJlcXVlc3RcbiAgICogdGltZW91dCB0byAxLjUgKiBrZWVwYWxpdmVJbnRlcnZhbCAobXMpLlxuICAgKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfHVuZGVmaW5lZH1cbiAgICovXG4gIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0VGltZW91dE1zXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQSB0aHJvdHRsZSB0aW1lIGluIG1zIGZvciByZWFkeXN0YXRlY2hhbmdlIGV2ZW50cyBmb3IgdGhlIGJhY2tjaGFubmVsLlxuICAgKiBVc2VmdWwgZm9yIHRocm90dGxpbmcgd2hlbiByZWFkeSBzdGF0ZSBpcyBJTlRFUkFDVElWRSAocGFydGlhbCBkYXRhKS5cbiAgICpcbiAgICogVGhpcyB0aHJvdHRsZSBpcyB1c2VmdWwgaWYgdGhlIHNlcnZlciBzZW5kcyBsYXJnZSBkYXRhIGNodW5rcyBkb3duIHRoZVxuICAgKiBiYWNrY2hhbm5lbC4gIEl0IHByZXZlbnRzIGV4YW1pbmluZyBYSFIgcGFydGlhbCBkYXRhIG9uIGV2ZXJ5IHJlYWR5c3RhdGVcbiAgICogY2hhbmdlIGV2ZW50LiAgVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSBsYXJnZSBjaHVua3MgY2FuIHRyaWdnZXIgaHVuZHJlZHNcbiAgICogb2YgcmVhZHlzdGF0ZWNoYW5nZSBldmVudHMsIGVhY2ggb2Ygd2hpY2ggdGFrZXMgfjVtcyBvciBzbyB0byBoYW5kbGUsXG4gICAqIGluIHR1cm4gbWFraW5nIHRoZSBVSSB1bnJlc3BvbnNpdmUgZm9yIGEgc2lnbmlmaWNhbnQgcGVyaW9kLlxuICAgKlxuICAgKiBJZiBzZXQgdG8gemVybyBubyB0aHJvdHRsZSBpcyB1c2VkLlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5yZWFkeVN0YXRlQ2hhbmdlVGhyb3R0bGVNc18gPSAwO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGNyb3NzIG9yaWdpbiByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkIGZvciB0aGUgY2hhbm5lbC5cbiAgICpcbiAgICogU2VlIHtAbGluayBnb29nLm5ldC5YaHJJbyNzZXRXaXRoQ3JlZGVudGlhbHN9LlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuc3VwcG9ydHNDcm9zc0RvbWFpblhocnNfID1cbiAgICAgIChvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyKSB8fCBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc2Vzc2lvbiBpZC5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuc2lkXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBDaGFubmVsUmVxdWVzdCBwb29sIGZvciB0aGUgZm9yd2FyZCBjaGFubmVsLlxuICAgKiBAcHJpdmF0ZSB7IUZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2x9XG4gICAqL1xuICB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfID0gbmV3IEZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2woXG4gICAgICBvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5jb25jdXJyZW50UmVxdWVzdExpbWl0KTtcblxuICAvKipcbiAgICogVGhlIFY4IGNvZGVjLlxuICAgKiBAcHJpdmF0ZSB7IVdpcmVWOH1cbiAgICovXG4gIHRoaXMud2lyZUNvZGVjXyA9IG5ldyBXaXJlVjgoKTtcblxuICAvKipcbiAgICogV2hldGhlciB0byB0dXJuIG9uIHRoZSBmYXN0IGhhbmRzaGFrZSBiZWhhdmlvci5cbiAgICpcbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmZhc3RIYW5kc2hha2VfID0gKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLmZhc3RIYW5kc2hha2UpIHx8IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuY29kZSBpbml0TWVzc2FnZUhlYWRlcnMgaW4gdGhlIGJvZHkuXG4gICAqXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5lbmNvZGVJbml0TWVzc2FnZUhlYWRlcnNfID1cbiAgICAgIChvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5lbmNvZGVJbml0TWVzc2FnZUhlYWRlcnMpIHx8IGZhbHNlO1xuXG4gIGlmICh0aGlzLmZhc3RIYW5kc2hha2VfICYmIHRoaXMuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzXykge1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy53YXJuaW5nKFxuICAgICAgICAnSWdub3JlIGVuY29kZUluaXRNZXNzYWdlSGVhZGVycyBiZWNhdXNlIGZhc3RIYW5kc2hha2UgaXMgc2V0LicpO1xuICAgIHRoaXMuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzXyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2lnbmFsIHRvIHRoZSBzZXJ2ZXIgdG8gZW5hYmxlIGJsb2NraW5nIGhhbmRzaGFrZS5cbiAgICpcbiAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmJsb2NraW5nSGFuZHNoYWtlXyA9XG4gICAgICAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMuYmxvY2tpbmdIYW5kc2hha2UpIHx8IGZhbHNlO1xuXG5cbiAgaWYgKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLmRpc2FibGVSZWRhY3QpIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGlzYWJsZVJlZGFjdCgpO1xuICB9XG5cbiAgaWYgKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLmZvcmNlTG9uZ1BvbGxpbmcpIHtcbiAgICB0aGlzLmFsbG93U3RyZWFtaW5nTW9kZV8gPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRldGVjdCBidWZmZXJpbmcgcHJveGllcy5cbiAgICpcbiAgICogZmFzdEhhbmRzaGFrZSArIGRldGVjdEJ1ZmZlcmluZ1Byb3h5IGFyZSB5ZXQgdG8gYmUgaW1wbGVtZW50ZWQuXG4gICAqXG4gICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5kZXRlY3RCdWZmZXJpbmdQcm94eV8gPVxuICAgICAgKCF0aGlzLmZhc3RIYW5kc2hha2VfICYmIHRoaXMuYWxsb3dTdHJlYW1pbmdNb2RlXyAmJiBvcHRfb3B0aW9ucyAmJlxuICAgICAgIG9wdF9vcHRpb25zLmRldGVjdEJ1ZmZlcmluZ1Byb3h5KSB8fFxuICAgICAgZmFsc2U7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoZW4gYWxsIHRoZSBwZW5kaW5nIGNsaWVudC1zZW50IG1lc3NhZ2VzIGhhdmUgYmVlbiBmbHVzaGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oKXx1bmRlZmluZWR9XG4gICAqL1xuICB0aGlzLmZvcndhcmRDaGFubmVsRmx1c2hlZENhbGxiYWNrXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVE9ETyh1c2VyKTogbW92ZSBhbGwgYmFja2NoYW5uZWwgc3RhdGVzIHRvIGl0cyBvd24gY2xhc3Mgc2ltaWxhciB0b1xuICAgKiBmb3J3YXJkY2hhbm5lbHJlcXVlc3Rwb29sLmpzIGFuZCBsb2cgbW9yZSBzdGF0cy5cbiAgICpcbiAgICogVGhlIGVzdGltYXRlZCBoYW5kc2hha2UgUlRUIChtcykgYXMgbWVhc3VyZWQgZnJvbSB3aGVuIHRoZSBoYW5kc2hha2VcbiAgICogcmVxdWVzdCBpcyBzZW50IGFuZCB3aGVuIHRoZSBoYW5kc2hha2UgcmVzcG9uc2UgaGVhZGVycyBhcmUgcmVjZWl2ZWQuXG4gICAqIElmIHRoZSB2YWx1ZSBpcyAwLCB0aGUgUlRUIGlzIHVua25vd24uXG4gICAqXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmhhbmRzaGFrZVJ0dE1zXyA9IDA7XG5cbiAgLyoqXG4gICAqIElmIEJQIGRldGVjdGlvbiBpcyBkb25lIG9yIHN0aWxsIGluIHByb2dyZXNzLlxuICAgKiBTaG91bGQgb25seSBiZSBjaGVja2VkIHdoZW4gZGV0ZWN0QnVmZmVyaW5nUHJveHkgaXMgdHVybmVkIG9uLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuYnBEZXRlY3Rpb25Eb25lXyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZXIgZm9yIGRldGVjdGluZyBidWZmZXJpbmcgcHJveHkuIFRoaXMgbmVlZHMgYmUgcmVzZXQgd2l0aCBlYWNoXG4gICAqIGJhY2tjaGFubmVsIHJlcXVlc3QuIElmIHRoaXMgaXMgbm90IG51bGwsIGJwRGV0ZWN0aW9uRG9uZV8gPT0gZmFsc2UuXG4gICAqIEBwcml2YXRlIHs/bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5icERldGVjdGlvblRpbWVySWRfID0gbnVsbDtcblxuICAvKioqXG4gICAqIFdoZXRoZXIgdG8gYXR0ZW1wdCBDaHJvbWUgT3JpZ2luIFRyaWFscyBhcyBwYXJ0IG9mIHRoZSBoYW5kc2hha2UuXG4gICAqIEBwcml2YXRlIEBjb25zdCB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZW5hYmxlT3JpZ2luVHJpYWxzXyA9IEFMTE9XX09SSUdJTl9UUklBTF9GRUFUVVJFUyAmJlxuICAgICAgKCFvcHRfb3B0aW9ucyB8fCBvcHRfb3B0aW9ucy5lbmFibGVPcmlnaW5UcmlhbHMgIT09IGZhbHNlKTtcblxuICAvKipcbiAgICogVGhlIGFycmF5IG9mIG5vbi1hY2tlZCBtYXBzIGF0IHRoZSB0aW1lIG9mIGNoYW5uZWwgY2xvc2UuIFJlZmVyIHRvXG4gICAqIGBnZXROb25BY2tlZE1lc3NhZ2VzV2l0aENsb3NlZENoYW5uZWwoKWAgQVBJIGZvciBkZWZpbml0aW9ucyBvZiBub24tYWNrZWRcbiAgICogbWVzc2FnZXMuXG4gICAqXG4gICAqIEBwcml2YXRlIHs/QXJyYXk8IVdpcmUuUXVldWVkTWFwPn1cbiAgICovXG4gIHRoaXMubm9uQWNrZWRNYXBzQXRDaGFubmVsQ2xvc2VfID0gbnVsbDtcbn07XG5cbmNvbnN0IFdlYkNoYW5uZWxCYXNlID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlO1xuXG5cbi8qKlxuICogVGhlIGNoYW5uZWwgdmVyc2lvbiB0aGF0IHdlIG5lZ290aWF0ZWQgd2l0aCB0aGUgc2VydmVyIGZvciB0aGlzIHNlc3Npb24uXG4gKiBTdGFydHMgb3V0IGFzIHRoZSB2ZXJzaW9uIHdlIHJlcXVlc3QsIGFuZCB0aGVuIGlzIGNoYW5nZWQgdG8gdGhlIG5lZ290aWF0ZWRcbiAqIHZlcnNpb24gYWZ0ZXIgdGhlIGluaXRpYWwgb3Blbi5cbiAqIEBwcml2YXRlIHtudW1iZXJ9XG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jaGFubmVsVmVyc2lvbl8gPSBXaXJlLkxBVEVTVF9DSEFOTkVMX1ZFUlNJT047XG5cblxuLyoqXG4gKiBFbnVtIHR5cGUgZm9yIHRoZSBjaGFubmVsIHN0YXRlIG1hY2hpbmUuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5TdGF0ZSA9IHtcbiAgLyoqIFRoZSBjaGFubmVsIGlzIGNsb3NlZC4gKi9cbiAgQ0xPU0VEOiAwLFxuXG4gIC8qKiBUaGUgY2hhbm5lbCBoYXMgYmVlbiBpbml0aWFsaXplZCBidXQgaGFzbid0IHlldCBpbml0aWF0ZWQgYSBjb25uZWN0aW9uLiAqL1xuICBJTklUOiAxLFxuXG4gIC8qKiBUaGUgY2hhbm5lbCBpcyBpbiB0aGUgcHJvY2VzcyBvZiBvcGVuaW5nIGEgY29ubmVjdGlvbiB0byB0aGUgc2VydmVyLiAqL1xuICBPUEVOSU5HOiAyLFxuXG4gIC8qKiBUaGUgY2hhbm5lbCBpcyBvcGVuLiAqL1xuICBPUEVORUQ6IDNcbn07XG5cblxuLyoqXG4gKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgV2ViQ2hhbm5lbC5cbiAqIEBwcml2YXRlIHshV2ViQ2hhbm5lbEJhc2UuU3RhdGV9XG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zdGF0ZV8gPSBXZWJDaGFubmVsQmFzZS5TdGF0ZS5JTklUO1xuXG5cbi8qKlxuICogVGhlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciBhIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0LlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuV2ViQ2hhbm5lbEJhc2UuRk9SV0FSRF9DSEFOTkVMX1JFVFJZX1RJTUVPVVQgPSAyMCAqIDEwMDA7XG5cblxuLyoqXG4gKiBNYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgZm9yIGJhY2sgY2hhbm5lbFxuICogcmVxdWVzdHMuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5CQUNLX0NIQU5ORUxfTUFYX1JFVFJJRVMgPSAzO1xuXG5cbi8qKlxuICogQSBudW1iZXIgaW4gTVMgb2YgaG93IGxvbmcgd2UgZ3Vlc3MgdGhlIG1heG1pdW0gYW1vdW50IG9mIHRpbWUgYSByb3VuZCB0cmlwXG4gKiB0byB0aGUgc2VydmVyIHNob3VsZCB0YWtlLiBJbiB0aGUgZnV0dXJlIHRoaXMgY291bGQgYmUgc3Vic3RpdHV0ZWQgd2l0aCBhXG4gKiByZWFsIG1lYXN1cmVtZW50IG9mIHRoZSBSVFQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5SVFRfRVNUSU1BVEUgPSAzICogMTAwMDtcblxuXG4vKipcbiAqIFdoZW4gcmV0cnlpbmcgZm9yIGFuIGluYWN0aXZlIGNoYW5uZWwsIHdlIHdpbGwgbXVsdGlwbHkgdGhlIHRvdGFsIGRlbGF5IGJ5XG4gKiB0aGlzIG51bWJlci5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbldlYkNoYW5uZWxCYXNlLklOQUNUSVZFX0NIQU5ORUxfUkVUUllfRkFDVE9SID0gMjtcblxuXG4vKipcbiAqIEVudW0gdHlwZSBmb3IgaWRlbnRpZnlpbmcgYW4gZXJyb3IuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5FcnJvciA9IHtcbiAgLyoqIFZhbHVlIHRoYXQgaW5kaWNhdGVzIG5vIGVycm9yIGhhcyBvY2N1cnJlZC4gKi9cbiAgT0s6IDAsXG5cbiAgLyoqIEFuIGVycm9yIGR1ZSB0byBhIHJlcXVlc3QgZmFpbGluZy4gKi9cbiAgUkVRVUVTVF9GQUlMRUQ6IDIsXG5cbiAgLyoqIEFuIGVycm9yIGR1ZSB0byB0aGUgdXNlciBiZWluZyBsb2dnZWQgb3V0LiAqL1xuICBMT0dHRURfT1VUOiA0LFxuXG4gIC8qKiBBbiBlcnJvciBkdWUgdG8gc2VydmVyIHJlc3BvbnNlIHdoaWNoIGNvbnRhaW5zIG5vIGRhdGEuICovXG4gIE5PX0RBVEE6IDUsXG5cbiAgLyoqIEFuIGVycm9yIGR1ZSB0byBhIHNlcnZlciByZXNwb25zZSBpbmRpY2F0aW5nIGFuIHVua25vd24gc2Vzc2lvbiBpZCAqL1xuICBVTktOT1dOX1NFU1NJT05fSUQ6IDYsXG5cbiAgLyoqIEFuIGVycm9yIGR1ZSB0byBhIHNlcnZlciByZXNwb25zZSByZXF1ZXN0aW5nIHRvIHN0b3AgdGhlIGNoYW5uZWwuICovXG4gIFNUT1A6IDcsXG5cbiAgLyoqIEEgZ2VuZXJhbCBuZXR3b3JrIGVycm9yLiAqL1xuICBORVRXT1JLOiA4LFxuXG4gIC8qKiBBbiBlcnJvciBkdWUgdG8gYmFkIGRhdGEgYmVpbmcgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyLiAqL1xuICBCQURfREFUQTogMTAsXG5cbiAgLyoqIEFuIGVycm9yIGR1ZSB0byBhIHJlc3BvbnNlIHRoYXQgaXMgbm90IHBhcnNhYmxlLiAqL1xuICBCQURfUkVTUE9OU0U6IDExXG59O1xuXG5cbi8qKlxuICogSW50ZXJuYWwgZW51bSB0eXBlIGZvciB0aGUgdHdvIGNoYW5uZWwgdHlwZXMuXG4gKiBAZW51bSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UuQ2hhbm5lbFR5cGVfID0ge1xuICBGT1JXQVJEX0NIQU5ORUw6IDEsXG5cbiAgQkFDS19DSEFOTkVMOiAyXG59O1xuXG5cbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIG1hcHMgdGhhdCBjYW4gYmUgc2VudCBpbiBvbmUgUE9TVC4gU2hvdWxkIG1hdGNoXG4gKiBNQVhfTUFQU19QRVJfUkVRVUVTVCBvbiB0aGUgc2VydmVyIGNvZGUuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UuTUFYX01BUFNfUEVSX1JFUVVFU1RfID0gMTAwMDtcblxuXG4vKipcbiAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB1dGYtOCBjaGFycyB0aGF0IGNhbiBiZSBzZW50IGluIG9uZSBHRVQgdG8gZW5hYmxlIDAtUlRUXG4gKiBoYW5kc2hha2UuXG4gKlxuICogIEBjb25zdCBAcHJpdmF0ZSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5NQVhfQ0hBUlNfUEVSX0dFVF8gPSA0ICogMTAyNDtcblxuXG4vKipcbiAqIEEgZ3Vlc3MgYXQgYSBjdXRvZmYgYXQgd2hpY2ggdG8gbm8gbG9uZ2VyIGFzc3VtZSB0aGUgYmFja2NoYW5uZWwgaXMgZGVhZFxuICogd2hlbiB3ZSBhcmUgc2xvdyB0byByZWNlaXZlIGRhdGEuIE51bWJlciBpbiBieXRlcy5cbiAqXG4gKiBBc3N1bXB0aW9uOiBUaGUgd29yc3QgYmFuZHdpZHRoIHdlIHdvcmsgb24gaXMgNTAga2lsb2JpdHMvc2VjXG4gKiA1MGtiaXRzL3NlYyAqICgxIGJ5dGUgLyA4IGJpdHMpICogNiBzZWMgZGVhZCBiYWNrY2hhbm5lbCB0aW1lb3V0XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5XZWJDaGFubmVsQmFzZS5PVVRTVEFORElOR19EQVRBX0JBQ0tDSEFOTkVMX1JFVFJZX0NVVE9GRiA9IDM3NTAwO1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc2VydmVyIHZlcnNpb24gb3IgMCBpZiB1bmRlZmluZWRcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldFNlcnZlclZlcnNpb24gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5zZXJ2ZXJWZXJzaW9uXztcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHshRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbH0gVGhlIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0IHBvb2wuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRGb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbF87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IU9iamVjdH0gVGhlIGNvZGVjIG9iamVjdC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldFdpcmVDb2RlYyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLndpcmVDb2RlY187XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9nZ2VyLlxuICpcbiAqIEByZXR1cm4geyFXZWJDaGFubmVsRGVidWd9IFRoZSBjaGFubmVsIGRlYnVnIG9iamVjdC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldENoYW5uZWxEZWJ1ZyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmNoYW5uZWxEZWJ1Z187XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbG9nZ2VyLlxuICpcbiAqIEBwYXJhbSB7IVdlYkNoYW5uZWxEZWJ1Z30gY2hhbm5lbERlYnVnIFRoZSBjaGFubmVsIGRlYnVnIG9iamVjdC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnNldENoYW5uZWxEZWJ1ZyA9IGZ1bmN0aW9uKGNoYW5uZWxEZWJ1Zykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbERlYnVnXyA9IGNoYW5uZWxEZWJ1Zztcbn07XG5cblxuLyoqXG4gKiBTdGFydHMgdGhlIGNoYW5uZWwuIFRoaXMgaW5pdGlhdGVzIGNvbm5lY3Rpb25zIHRvIHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxQYXRoICBUaGUgcGF0aCBmb3IgdGhlIGNoYW5uZWwgY29ubmVjdGlvbi5cbiAqIEBwYXJhbSB7IU9iamVjdD19IG9wdF9leHRyYVBhcmFtcyBFeHRyYSBwYXJhbWV0ZXIga2V5cyBhbmQgdmFsdWVzIHRvIGFkZCB0b1xuICogICAgIHRoZSByZXF1ZXN0cy5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X29sZFNlc3Npb25JZCAgU2Vzc2lvbiBJRCBmcm9tIGEgcHJldmlvdXMgc2Vzc2lvbi5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X29sZEFycmF5SWQgIFRoZSBsYXN0IGFycmF5IElEIGZyb20gYSBwcmV2aW91cyBzZXNzaW9uLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uKFxuICAgIGNoYW5uZWxQYXRoLCBvcHRfZXh0cmFQYXJhbXMsIG9wdF9vbGRTZXNzaW9uSWQsIG9wdF9vbGRBcnJheUlkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdjb25uZWN0KCknKTtcblxuICB0aGlzLnN0YXJ0T3JpZ2luVHJpYWxzXyhjaGFubmVsUGF0aCk7XG5cbiAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5DT05ORUNUX0FUVEVNUFQpO1xuXG4gIHRoaXMucGF0aF8gPSBjaGFubmVsUGF0aDtcbiAgdGhpcy5leHRyYVBhcmFtc18gPSBvcHRfZXh0cmFQYXJhbXMgfHwge307XG5cbiAgLy8gQXR0YWNoIHBhcmFtZXRlcnMgYWJvdXQgdGhlIHByZXZpb3VzIHNlc3Npb24gaWYgcmVjb25uZWN0aW5nLlxuICBpZiAob3B0X29sZFNlc3Npb25JZCAmJiBvcHRfb2xkQXJyYXlJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5leHRyYVBhcmFtc19bJ09TSUQnXSA9IG9wdF9vbGRTZXNzaW9uSWQ7XG4gICAgdGhpcy5leHRyYVBhcmFtc19bJ09BSUQnXSA9IG9wdF9vbGRBcnJheUlkO1xuICB9XG5cbiAgdGhpcy5lbmFibGVTdHJlYW1pbmdfID0gdGhpcy5hbGxvd1N0cmVhbWluZ01vZGVfO1xuICB0aGlzLmNvbm5lY3RDaGFubmVsXygpO1xufTtcblxuXG4vKipcbiAqIERpc2Nvbm5lY3RzIGFuZCBjbG9zZXMgdGhlIGNoYW5uZWwuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdkaXNjb25uZWN0KCknKTtcblxuICB0aGlzLmNhbmNlbFJlcXVlc3RzXygpO1xuXG4gIGlmICh0aGlzLnN0YXRlXyA9PSBXZWJDaGFubmVsQmFzZS5TdGF0ZS5PUEVORUQpIHtcbiAgICBjb25zdCByaWQgPSB0aGlzLm5leHRSaWRfKys7XG4gICAgY29uc3QgdXJpID0gdGhpcy5mb3J3YXJkQ2hhbm5lbFVyaV8uY2xvbmUoKTtcbiAgICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ1NJRCcsIHRoaXMuc2lkXyk7XG4gICAgdXJpLnNldFBhcmFtZXRlclZhbHVlKCdSSUQnLCByaWQpO1xuICAgIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnVFlQRScsICd0ZXJtaW5hdGUnKTtcblxuICAgIHRoaXMuYWRkQWRkaXRpb25hbFBhcmFtc18odXJpKTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBDaGFubmVsUmVxdWVzdC5jcmVhdGVDaGFubmVsUmVxdWVzdChcbiAgICAgICAgdGhpcywgdGhpcy5jaGFubmVsRGVidWdfLCB0aGlzLnNpZF8sIHJpZCk7XG4gICAgcmVxdWVzdC5zZW5kQ2xvc2VSZXF1ZXN0KHVyaSk7XG4gIH1cblxuICB0aGlzLm9uQ2xvc2VfKCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Vzc2lvbiBpZCBvZiB0aGUgY2hhbm5lbC4gT25seSBhdmFpbGFibGUgYWZ0ZXIgdGhlXG4gKiBjaGFubmVsIGhhcyBiZWVuIG9wZW5lZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gU2Vzc2lvbiBJRC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldFNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnNpZF87XG59O1xuXG5cbi8qKlxuICogU3RhcnRzIHRoZSBjb25uZWN0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmNvbm5lY3RDaGFubmVsXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnY29ubmVjdENoYW5uZWxfKCknKTtcbiAgdGhpcy5lbnN1cmVJblN0YXRlXyhXZWJDaGFubmVsQmFzZS5TdGF0ZS5JTklULCBXZWJDaGFubmVsQmFzZS5TdGF0ZS5DTE9TRUQpO1xuICB0aGlzLmZvcndhcmRDaGFubmVsVXJpXyA9XG4gICAgICB0aGlzLmdldEZvcndhcmRDaGFubmVsVXJpKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodGhpcy5wYXRoXykpO1xuICB0aGlzLmVuc3VyZUZvcndhcmRDaGFubmVsXygpO1xufTtcblxuXG4vKipcbiAqIFN0YXJ0cyB0aGUgT3JpZ2luIFRyaWFscy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsUGF0aCAgVGhlIHBhdGggZm9yIHRoZSBjaGFubmVsIGNvbm5lY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc3RhcnRPcmlnaW5UcmlhbHNfID0gZnVuY3Rpb24oY2hhbm5lbFBhdGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghdGhpcy5lbmFibGVPcmlnaW5UcmlhbHNfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oJ09yaWdpbiBUcmlhbHMgZW5hYmxlZC4nKTtcbiAgZ29vZy5hc3luYy5ydW4oZ29vZy5iaW5kKHRoaXMucnVuT3JpZ2luVHJpYWxzXywgdGhpcywgY2hhbm5lbFBhdGgpKTtcbn07XG5cblxuLyoqXG4gKiBSdW5zIHRoZSBPcmlnaW4gVHJpYWxzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxQYXRoICBUaGUgcGF0aCBmb3IgdGhlIGNoYW5uZWwgY29ubmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5ydW5PcmlnaW5UcmlhbHNfID0gZnVuY3Rpb24oY2hhbm5lbFBhdGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRyeSB7XG4gICAgLy8gU2luY2Ugc3RhcnRPcmlnaW5UcmlhbHMgbWlnaHQgdGhyb3cgZXhjZXB0aW9ucyBhc3luY2hyb25vdXNseSwgd2Ugc2hvdWxkXG4gICAgLy8gY2FwdHVyZSBpdCBpbiBwcm9taXNlLWNhdGNoLlxuICAgIGVudmlyb25tZW50LnN0YXJ0T3JpZ2luVHJpYWxzKGNoYW5uZWxQYXRoLCBlID0+IHtcbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kdW1wRXhjZXB0aW9uKFxuICAgICAgICAgIC8qKiBAdHlwZSB7P0Vycm9yfSAqLyAoZSksICdFcnJvciBpbiBydW5uaW5nIG9yaWdpbiB0cmlhbHMnKTtcbiAgICB9KTtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uaW5mbygnT3JpZ2luIFRyaWFscyBpbnZva2VkOiAnICsgY2hhbm5lbFBhdGgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLmR1bXBFeGNlcHRpb24oZSwgJ0Vycm9yIGluIHJ1bm5pbmcgb3JpZ2luIHRyaWFscycpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2FuY2VscyBiYWNrY2hhbm5lbCByZXF1ZXN0LlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmNhbmNlbEJhY2tDaGFubmVsUmVxdWVzdF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfKSB7XG4gICAgdGhpcy5jbGVhckJwRGV0ZWN0aW9uVGltZXJfKCk7XG4gICAgdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfLmNhbmNlbCgpO1xuICAgIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyA9IG51bGw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIGFsbCBvdXRzdGFuZGluZyByZXF1ZXN0cy5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jYW5jZWxSZXF1ZXN0c18gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNhbmNlbEJhY2tDaGFubmVsUmVxdWVzdF8oKTtcblxuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFRpbWVySWRfKSB7XG4gICAgZ29vZy5nbG9iYWwuY2xlYXJUaW1lb3V0KHRoaXMuYmFja0NoYW5uZWxUaW1lcklkXyk7XG4gICAgdGhpcy5iYWNrQ2hhbm5lbFRpbWVySWRfID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuY2xlYXJEZWFkQmFja2NoYW5uZWxUaW1lcl8oKTtcblxuICB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmNhbmNlbCgpO1xuXG4gIGlmICh0aGlzLmZvcndhcmRDaGFubmVsVGltZXJJZF8pIHtcbiAgICB0aGlzLmNsZWFyRm9yd2FyZENoYW5uZWxUaW1lcl8oKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZm9yd2FyZCBjaGFubmVsIHRpbWVyLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmNsZWFyRm9yd2FyZENoYW5uZWxUaW1lcl8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZW9mIHRoaXMuZm9yd2FyZENoYW5uZWxUaW1lcklkXyA9PT0gJ251bWJlcicpIHtcbiAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQodGhpcy5mb3J3YXJkQ2hhbm5lbFRpbWVySWRfKTtcbiAgfVxuXG4gIHRoaXMuZm9yd2FyZENoYW5uZWxUaW1lcklkXyA9IG51bGw7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byBhbGwgdGhlIHJlcXVlc3RzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBIVFRQIGhlYWRlcnMsIG9yIG51bGwuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRFeHRyYUhlYWRlcnMgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5leHRyYUhlYWRlcnNfO1xufTtcblxuXG4vKipcbiAqIFNldHMgZXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byBhbGwgdGhlIHJlcXVlc3RzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXh0cmFIZWFkZXJzIFRoZSBIVFRQIGhlYWRlcnMsIG9yIG51bGwuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRFeHRyYUhlYWRlcnMgPSBmdW5jdGlvbihleHRyYUhlYWRlcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmV4dHJhSGVhZGVyc18gPSBleHRyYUhlYWRlcnM7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byB0aGUgaW5pdCByZXF1ZXN0c1xuICogc2VudCB0byB0aGUgc2VydmVyLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIEhUVFAgaGVhZGVycywgb3IgbnVsbC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldEluaXRIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaW5pdEhlYWRlcnNfO1xufTtcblxuXG4vKipcbiAqIFNldHMgZXh0cmEgSFRUUCBoZWFkZXJzIHRvIGFkZCB0byB0aGUgaW5pdCByZXF1ZXN0cyBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluaXRIZWFkZXJzIFRoZSBIVFRQIGhlYWRlcnMsIG9yIG51bGwuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRJbml0SGVhZGVycyA9IGZ1bmN0aW9uKGluaXRIZWFkZXJzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5pbml0SGVhZGVyc18gPSBpbml0SGVhZGVycztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBVUkwgcGFyYW0gbmFtZSB0byBvdmVyd3JpdGUgY3VzdG9tIEhUVFAgaGVhZGVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSBUaGUgVVJMIHBhcmFtIG5hbWUuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRIdHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtID0gZnVuY3Rpb24oXG4gICAgaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbV8gPSBodHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2V0SHR0cFNlc3Npb25JZFBhcmFtID0gZnVuY3Rpb24oaHR0cFNlc3Npb25JZFBhcmFtKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5odHRwU2Vzc2lvbklkUGFyYW1fID0gaHR0cFNlc3Npb25JZFBhcmFtO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZ2V0SHR0cFNlc3Npb25JZFBhcmFtID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaHR0cFNlc3Npb25JZFBhcmFtXztcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnNldEh0dHBTZXNzaW9uSWQgPSBmdW5jdGlvbihodHRwU2Vzc2lvbklkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5odHRwU2Vzc2lvbklkXyA9IGh0dHBTZXNzaW9uSWQ7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRIdHRwU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaHR0cFNlc3Npb25JZF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgdGhyb3R0bGUgZm9yIGhhbmRsaW5nIG9ucmVhZHlzdGF0ZWNoYW5nZSBldmVudHMgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aHJvdHRsZSBUaGUgdGhyb3R0bGUgaW4gbXMuICBBIHZhbHVlIG9mIHplcm8gaW5kaWNhdGVzXG4gKiAgICAgbm8gdGhyb3R0bGUuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRSZWFkeVN0YXRlQ2hhbmdlVGhyb3R0bGUgPSBmdW5jdGlvbih0aHJvdHRsZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlTXNfID0gdGhyb3R0bGU7XG59O1xuXG5cbi8qKlxuICogU2V0cyB3aGV0aGVyIGNyb3NzIG9yaWdpbiByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkIGZvciB0aGUgY2hhbm5lbC5cbiAqXG4gKiBTZXR0aW5nIHRoaXMgYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiByZXF1ZXN0cyB0byBzZWNvbmRhcnkgZG9tYWlucyBhbmRcbiAqIHNlbmRzIFhIUnMgd2l0aCB0aGUgQ09SUyB3aXRoQ3JlZGVudGlhbHMgYml0IHNldCB0byB0cnVlLlxuICpcbiAqIEluIG9yZGVyIGZvciBjcm9zcy1vcmlnaW4gcmVxdWVzdHMgdG8gd29yaywgdGhlIHNlcnZlciB3aWxsIGFsc28gbmVlZCB0byBzZXRcbiAqIENPUlMgcmVzcG9uc2UgaGVhZGVycyBhcyBwZXI6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUVFBfYWNjZXNzX2NvbnRyb2xcbiAqXG4gKiBTZWUge0BsaW5rIGdvb2cubmV0LlhocklvI3NldFdpdGhDcmVkZW50aWFsc30uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN1cHBvcnRDcm9zc0RvbWFpbiBXaGV0aGVyIGNyb3NzIGRvbWFpbiBYSFJzIGFyZSBzdXBwb3J0ZWQuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRTdXBwb3J0c0Nyb3NzRG9tYWluWGhycyA9IGZ1bmN0aW9uKFxuICAgIHN1cHBvcnRDcm9zc0RvbWFpbikge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuc3VwcG9ydHNDcm9zc0RvbWFpblhocnNfID0gc3VwcG9ydENyb3NzRG9tYWluO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhbmRsZXIgdXNlZCBmb3IgY2hhbm5lbCBjYWxsYmFjayBldmVudHMuXG4gKlxuICogQHJldHVybiB7V2ViQ2hhbm5lbEJhc2UuSGFuZGxlcn0gVGhlIGhhbmRsZXIuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcl87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgaGFuZGxlciB1c2VkIGZvciBjaGFubmVsIGNhbGxiYWNrIGV2ZW50cy5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2UuSGFuZGxlcn0gaGFuZGxlciBUaGUgaGFuZGxlciB0byBzZXQuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRIYW5kbGVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuaGFuZGxlcl8gPSBoYW5kbGVyO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgY2hhbm5lbCBhbGxvd3MgdGhlIHVzZSBvZiBhIHN1YmRvbWFpbi4gVGhlcmUgbWF5IGJlXG4gKiBjYXNlcyB3aGVyZSB0aGlzIGlzbid0IGFsbG93ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgaG9zdCBwcmVmaXggaXMgYWxsb3dlZC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldEFsbG93SG9zdFByZWZpeCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmFsbG93SG9zdFByZWZpeF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB3aGV0aGVyIHRoZSBjaGFubmVsIGFsbG93cyB0aGUgdXNlIG9mIGEgc3ViZG9tYWluLiBUaGVyZSBtYXkgYmUgY2FzZXNcbiAqIHdoZXJlIHRoaXMgaXNuJ3QgYWxsb3dlZCwgZm9yIGV4YW1wbGUsIGxvZ2dpbmcgaW4gd2l0aCB0cm91dGJvYXJkIHdoZXJlXG4gKiB1c2luZyBhIHN1YmRvbWFpbiBjYXVzZXMgQXBhY2hlIHRvIGZvcmNlIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZSB0d2ljZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dIb3N0UHJlZml4IFdoZXRoZXIgYSBob3N0IHByZWZpeCBpcyBhbGxvd2VkLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2V0QWxsb3dIb3N0UHJlZml4ID0gZnVuY3Rpb24oYWxsb3dIb3N0UHJlZml4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5hbGxvd0hvc3RQcmVmaXhfID0gYWxsb3dIb3N0UHJlZml4O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgY2hhbm5lbCBpcyBidWZmZXJlZCBvciBub3QuICBUaGlzIG1heSBiZVxuICogcXVlcmllZCBpbiB0aGUgV2ViQ2hhbm5lbEJhc2Uub2tUb01ha2VSZXF1ZXN0KCkgY2FsbGJhY2suXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY2hhbm5lbCBpcyBidWZmZXJlZC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmlzQnVmZmVyZWQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gIXRoaXMuZW5hYmxlU3RyZWFtaW5nXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgc3RyZWFtaW5nIG1vZGUgaXMgYWxsb3dlZC4gSW4gY2VydGFpbiBkZWJ1Z2dpbmcgc2l0dWF0aW9ucyxcbiAqIGl0J3MgdXNlZnVsIGZvciB0aGUgYXBwbGljYXRpb24gdG8gaGF2ZSBhIHdheSB0byBkaXNhYmxlIHN0cmVhbWluZyBtb2RlIGZvciBhXG4gKiB1c2VyLlxuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHN0cmVhbWluZyBtb2RlIGlzIGFsbG93ZWQuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRBbGxvd1N0cmVhbWluZ01vZGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5hbGxvd1N0cmVhbWluZ01vZGVfO1xufTtcblxuXG4vKipcbiAqIFNldHMgd2hldGhlciBzdHJlYW1pbmcgbW9kZSBpcyBhbGxvd2VkLiBJbiBjZXJ0YWluIGRlYnVnZ2luZyBzaXR1YXRpb25zLCBpdCdzXG4gKiB1c2VmdWwgZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBoYXZlIGEgd2F5IHRvIGRpc2FibGUgc3RyZWFtaW5nIG1vZGUgZm9yIGFcbiAqIHVzZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsbG93U3RyZWFtaW5nTW9kZSAgV2hldGhlciBzdHJlYW1pbmcgbW9kZSBpcyBhbGxvd2VkLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2V0QWxsb3dTdHJlYW1pbmdNb2RlID0gZnVuY3Rpb24oYWxsb3dTdHJlYW1pbmdNb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5hbGxvd1N0cmVhbWluZ01vZGVfID0gYWxsb3dTdHJlYW1pbmdNb2RlO1xufTtcblxuXG4vKipcbiAqIFNlbmRzIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLiBUaGUgZm9ybWF0IG9mIHRoZSByZXF1ZXN0IGlzIGEgTWFwIGRhdGFcbiAqIHN0cnVjdHVyZSBvZiBrZXkvdmFsdWUgcGFpcnMuIFRoZXNlIG1hcHMgYXJlIHRoZW4gZW5jb2RlZCBpbiBhIGZvcm1hdFxuICogc3VpdGFibGUgZm9yIHRoZSB3aXJlIGFuZCB0aGVuIHJlY29uc3RpdHV0ZWQgYXMgYSBNYXAgZGF0YSBzdHJ1Y3R1cmUgdGhhdFxuICogdGhlIHNlcnZlciBjYW4gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7IU9iamVjdHwhZ29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2V9IG1hcCBUaGUgbWFwIHRvIHNlbmQuXG4gKiBAcGFyYW0geyFPYmplY3Q9fSBvcHRfY29udGV4dCBUaGUgY29udGV4dCBhc3NvY2lhdGVkIHdpdGggdGhlIG1hcC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnNlbmRNYXAgPSBmdW5jdGlvbihtYXAsIG9wdF9jb250ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIHRoaXMuc3RhdGVfICE9IFdlYkNoYW5uZWxCYXNlLlN0YXRlLkNMT1NFRCxcbiAgICAgICdJbnZhbGlkIG9wZXJhdGlvbjogc2VuZGluZyBtYXAgd2hlbiBzdGF0ZSBpcyBjbG9zZWQnKTtcblxuICAvLyBXZSBjYW4gb25seSBzZW5kIDEwMDAgbWFwcyBwZXIgUE9TVCwgYnV0IHR5cGljYWxseSB3ZSBzaG91bGQgbmV2ZXIgaGF2ZVxuICAvLyB0aGF0IG11Y2ggdG8gc2VuZCwgc28gd2FybiBpZiB3ZSBleGNlZWQgdGhhdCAod2Ugc3RpbGwgc2VuZCBhbGwgdGhlIG1hcHMpLlxuICBpZiAodGhpcy5vdXRnb2luZ01hcHNfLmxlbmd0aCA9PSBXZWJDaGFubmVsQmFzZS5NQVhfTUFQU19QRVJfUkVRVUVTVF8pIHtcbiAgICAvLyBzZXZlcmUoKSBpcyB0ZW1wb3Jhcnkgc28gdGhhdCB3ZSBnZXQgdGhlc2UgdXBsb2FkZWQgYW5kIGNhbiBmaWd1cmUgb3V0XG4gICAgLy8gd2hhdCdzIGNhdXNpbmcgdGhlbS4gQWZ0ZXJ3YXJkcyBjYW4gY2hhbmdlIHRvIHdhcm5pbmcoKS5cbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uc2V2ZXJlKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuICdBbHJlYWR5IGhhdmUgJyArIFdlYkNoYW5uZWxCYXNlLk1BWF9NQVBTX1BFUl9SRVFVRVNUXyArXG4gICAgICAgICAgJyBxdWV1ZWQgbWFwcyB1cG9uIHF1ZXVlaW5nICcgKyBnb29nLmpzb24uc2VyaWFsaXplKG1hcCk7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLm91dGdvaW5nTWFwc18ucHVzaChcbiAgICAgIG5ldyBXaXJlLlF1ZXVlZE1hcCh0aGlzLm5leHRNYXBJZF8rKywgbWFwLCBvcHRfY29udGV4dCkpO1xuXG4gIC8vIE1lc3NhZ2VzIG5lZWQgYmUgYnVmZmVyZWQgZHVyaW5nIE9QRU5JTkcgdG8gYXZvaWQgc2VydmVyLXNpZGUgcmFjZVxuICBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuT1BFTkVEKSB7XG4gICAgdGhpcy5lbnN1cmVGb3J3YXJkQ2hhbm5lbF8oKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFdoZW4gc2V0IHRvIHRydWUsIHRoaXMgY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGZvcndhcmQgY2hhbm5lbCBzbyBpdFxuICogd2lsbCBub3QgcmV0cnkgcmVxdWVzdHM7IGl0IHdpbGwgZmFpbCBhZnRlciBvbmUgbmV0d29yayBmYWlsdXJlLCBhbmQgaWZcbiAqIHRoZXJlIHdhcyBhbHJlYWR5IG9uZSBuZXR3b3JrIGZhaWx1cmUsIHRoZSByZXF1ZXN0IHdpbGwgZmFpbCBpbW1lZGlhdGVseS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZmFpbEZhc3QgIFdoZXRoZXIgb3Igbm90IHRvIGZhaWwgZmFzdC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnNldEZhaWxGYXN0ID0gZnVuY3Rpb24oZmFpbEZhc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmZhaWxGYXN0XyA9IGZhaWxGYXN0O1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18uaW5mbygnc2V0RmFpbEZhc3Q6ICcgKyBmYWlsRmFzdCk7XG4gIGlmICgodGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5oYXNQZW5kaW5nUmVxdWVzdCgpIHx8XG4gICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFRpbWVySWRfKSAmJlxuICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJldHJ5Q291bnRfID4gdGhpcy5nZXRGb3J3YXJkQ2hhbm5lbE1heFJldHJpZXMoKSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5pbmZvKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuICdSZXRyeSBjb3VudCAnICsgc2VsZi5mb3J3YXJkQ2hhbm5lbFJldHJ5Q291bnRfICtcbiAgICAgICAgICAnID4gbmV3IG1heFJldHJpZXMgJyArIHNlbGYuZ2V0Rm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzKCkgK1xuICAgICAgICAgICcuIEZhaWwgaW1tZWRpYXRlbHkhJztcbiAgICB9KTtcblxuICAgIGlmICghdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5mb3JjZUNvbXBsZXRlKFxuICAgICAgICAgICAgZ29vZy5iaW5kKHRoaXMub25SZXF1ZXN0Q29tcGxldGUsIHRoaXMpKSkge1xuICAgICAgLy8gaS5lLiwgdGhpcy5mb3J3YXJkQ2hhbm5lbFRpbWVySWRfXG4gICAgICB0aGlzLmNsZWFyRm9yd2FyZENoYW5uZWxUaW1lcl8oKTtcbiAgICAgIC8vIFRoZSBlcnJvciBjb2RlIGZyb20gdGhlIGxhc3QgZmFpbGVkIHJlcXVlc3QgaXMgZ29uZSwgc28ganVzdCB1c2UgYVxuICAgICAgLy8gZ2VuZXJpYyBvbmUuXG4gICAgICB0aGlzLnNpZ25hbEVycm9yXyhXZWJDaGFubmVsQmFzZS5FcnJvci5SRVFVRVNUX0ZBSUxFRCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWF4IG51bWJlciBvZiBmb3J3YXJkLWNoYW5uZWwgcmV0cmllcywgd2hpY2ggd2lsbCBiZSAwXG4gKiBpbiBmYWlsLWZhc3QgbW9kZS5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldEZvcndhcmRDaGFubmVsTWF4UmV0cmllcyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmZhaWxGYXN0XyA/IDAgOiB0aGlzLmZvcndhcmRDaGFubmVsTWF4UmV0cmllc187XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgYXR0ZW1wdHMgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyIGZvciBmb3J3YXJkXG4gKiBjaGFubmVsIHJlcXVlc3RzLlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgVGhlIG1heGltdW0gbnVtYmVyIG9mIGF0dGVtcHRzLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2V0Rm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzID0gZnVuY3Rpb24ocmV0cmllcykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZm9yd2FyZENoYW5uZWxNYXhSZXRyaWVzXyA9IHJldHJpZXM7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgdGltZW91dCBmb3IgYSBmb3J3YXJkIGNoYW5uZWwgcmVxdWVzdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0TXMgVGhlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2V0Rm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dCA9IGZ1bmN0aW9uKHRpbWVvdXRNcykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zXyA9IHRpbWVvdXRNcztcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXggbnVtYmVyIG9mIGJhY2stY2hhbm5lbCByZXRyaWVzLCB3aGljaCBpcyBhIGNvbnN0YW50LlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZ2V0QmFja0NoYW5uZWxNYXhSZXRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gQmFjay1jaGFubmVsIHJldHJpZXMgaXMgYSBjb25zdGFudC5cbiAgcmV0dXJuIFdlYkNoYW5uZWxCYXNlLkJBQ0tfQ0hBTk5FTF9NQVhfUkVUUklFUztcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmlzQ2xvc2VkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuc3RhdGVfID09IFdlYkNoYW5uZWxCYXNlLlN0YXRlLkNMT1NFRDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGFubmVsIHN0YXRlLlxuICogQHJldHVybiB7V2ViQ2hhbm5lbEJhc2UuU3RhdGV9IFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjaGFubmVsLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5zdGF0ZV87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbGFzdCBzdGF0dXMgY29kZSByZWNlaXZlZCAodW50aWwgYFN0YXRlLkNMT1NFRGAgaXNcbiAqIHJlYWNoZWQpLlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZ2V0TGFzdFN0YXR1c0NvZGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5sYXN0U3RhdHVzQ29kZV87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbGFzdCBhcnJheSBpZCByZWNlaXZlZC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldExhc3RBcnJheUlkID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMubGFzdEFycmF5SWRfO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGVyZSBhcmUgb3V0c3RhbmRpbmcgcmVxdWVzdHMgc2VydmljaW5nIHRoZSBjaGFubmVsLlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGVyZSBhcmUgb3V0c3RhbmRpbmcgcmVxdWVzdHMuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5oYXNPdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuZ2V0T3V0c3RhbmRpbmdSZXF1ZXN0c18oKSAhPSAwO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBvdXRzdGFuZGluZyByZXF1ZXN0cy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBvdXRzdGFuZGluZyByZXF1ZXN0cyB0byB0aGUgc2VydmVyLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldE91dHN0YW5kaW5nUmVxdWVzdHNfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgbGV0IGNvdW50ID0gMDtcbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0Xykge1xuICAgIGNvdW50Kys7XG4gIH1cbiAgY291bnQgKz0gdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5nZXRSZXF1ZXN0Q291bnQoKTtcbiAgcmV0dXJuIGNvdW50O1xufTtcblxuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0IGlzIHNjaGVkdWxlZC5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5lbnN1cmVGb3J3YXJkQ2hhbm5lbF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5pc0Z1bGwoKSkge1xuICAgIC8vIGVub3VnaCBjb25uZWN0aW9uIGluIHByb2Nlc3MgLSBubyBuZWVkIHRvIHN0YXJ0IGEgbmV3IHJlcXVlc3RcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5mb3J3YXJkQ2hhbm5lbFRpbWVySWRfKSB7XG4gICAgLy8gbm8gbmVlZCB0byBzdGFydCBhIG5ldyByZXF1ZXN0IC0gb25lIGlzIGFscmVhZHkgc2NoZWR1bGVkXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVXNlIGFzeW5jLnJ1biBpbnN0ZWFkIG9mIHNldFRpbWVvdXQoMCkgdG8gYXZvaWQgdGhlIDFzIG1lc3NhZ2UgZGVsYXlcbiAgLy8gZnJvbSBjaHJvbWUvZmlyZWZveCBiYWNrZ3JvdW5kIHRhYnNcbiAgdGhpcy5mb3J3YXJkQ2hhbm5lbFRpbWVySWRfID0gdHJ1ZTtcbiAgZ29vZy5hc3luYy5ydW4odGhpcy5vblN0YXJ0Rm9yd2FyZENoYW5uZWxUaW1lcl8sIHRoaXMpO1xuXG4gIHRoaXMuZm9yd2FyZENoYW5uZWxSZXRyeUNvdW50XyA9IDA7XG59O1xuXG5cbi8qKlxuICogU2NoZWR1bGVzIGEgZm9yd2FyZC1jaGFubmVsIHJldHJ5IGZvciB0aGUgc3BlY2lmaWVkIHJlcXVlc3QsIHVubGVzcyB0aGUgbWF4XG4gKiByZXRyaWVzIGhhcyBiZWVuIHJlYWNoZWQuXG4gKiBAcGFyYW0geyFDaGFubmVsUmVxdWVzdH0gcmVxdWVzdCBUaGUgZmFpbGVkIHJlcXVlc3QgdG8gcmV0cnkuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmZiBhIHJldHJ5IHdhcyBzY2hlZHVsZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUubWF5YmVSZXRyeUZvcndhcmRDaGFubmVsXyA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5nZXRSZXF1ZXN0Q291bnQoKSA+PVxuICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5nZXRNYXhTaXplKCkgLVxuICAgICAgICAgICh0aGlzLmZvcndhcmRDaGFubmVsVGltZXJJZF8gPyAxIDogMCkpIHtcbiAgICAvLyBTaG91bGQgYmUgaW1wb3NzaWJsZSB0byBiZSBjYWxsZWQgaW4gdGhpcyBzdGF0ZS5cbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uc2V2ZXJlKCdVbmV4cGVjdGVkIHJldHJ5IHJlcXVlc3QgaXMgc2NoZWR1bGVkLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcndhcmRDaGFubmVsVGltZXJJZF8pIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoXG4gICAgICAgICdVc2UgdGhlIHJldHJ5IHJlcXVlc3QgdGhhdCBpcyBhbHJlYWR5IHNjaGVkdWxlZC4nKTtcbiAgICB0aGlzLm91dGdvaW5nTWFwc18gPVxuICAgICAgICByZXF1ZXN0LmdldFBlbmRpbmdNZXNzYWdlcygpLmNvbmNhdCh0aGlzLm91dGdvaW5nTWFwc18pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gTm8gcmV0cnkgZm9yIG9wZW5fKCkgYW5kIGZhaWwtZmFzdFxuICBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuSU5JVCB8fFxuICAgICAgdGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuT1BFTklORyB8fFxuICAgICAgKHRoaXMuZm9yd2FyZENoYW5uZWxSZXRyeUNvdW50XyA+PSB0aGlzLmdldEZvcndhcmRDaGFubmVsTWF4UmV0cmllcygpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnR29pbmcgdG8gcmV0cnkgUE9TVCcpO1xuXG4gIHRoaXMuZm9yd2FyZENoYW5uZWxUaW1lcklkXyA9IHJlcXVlc3RTdGF0cy5zZXRUaW1lb3V0KFxuICAgICAgZ29vZy5iaW5kKHRoaXMub25TdGFydEZvcndhcmRDaGFubmVsVGltZXJfLCB0aGlzLCByZXF1ZXN0KSxcbiAgICAgIHRoaXMuZ2V0UmV0cnlUaW1lXyh0aGlzLmZvcndhcmRDaGFubmVsUmV0cnlDb3VudF8pKTtcbiAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJldHJ5Q291bnRfKys7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIFRpbWVyIGNhbGxiYWNrIGZvciBlbnN1cmVGb3J3YXJkQ2hhbm5lbFxuICogQHBhcmFtIHtDaGFubmVsUmVxdWVzdD19IG9wdF9yZXRyeVJlcXVlc3QgQSBmYWlsZWQgcmVxdWVzdFxuICogdG8gcmV0cnkuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25TdGFydEZvcndhcmRDaGFubmVsVGltZXJfID0gZnVuY3Rpb24oXG4gICAgb3B0X3JldHJ5UmVxdWVzdCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIG51bGwgaXMgcG9zc2libGUgaWYgc2NoZWR1bGVkIHdpdGggYXN5bmMucnVuXG4gIGlmICh0aGlzLmZvcndhcmRDaGFubmVsVGltZXJJZF8pIHtcbiAgICB0aGlzLmZvcndhcmRDaGFubmVsVGltZXJJZF8gPSBudWxsO1xuICAgIHRoaXMuc3RhcnRGb3J3YXJkQ2hhbm5lbF8ob3B0X3JldHJ5UmVxdWVzdCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBCZWdpbnMgYSBuZXcgZm9yd2FyZCBjaGFubmVsIG9wZXJhdGlvbiB0byB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtDaGFubmVsUmVxdWVzdD19IG9wdF9yZXRyeVJlcXVlc3QgQSBmYWlsZWQgcmVxdWVzdCB0byByZXRyeS5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zdGFydEZvcndhcmRDaGFubmVsXyA9IGZ1bmN0aW9uKG9wdF9yZXRyeVJlcXVlc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoJ3N0YXJ0Rm9yd2FyZENoYW5uZWxfJyk7XG4gIGlmICghdGhpcy5va1RvTWFrZVJlcXVlc3RfKCkpIHtcbiAgICByZXR1cm47ICAvLyBjaGFubmVsIGlzIGNhbmNlbGxlZFxuICB9IGVsc2UgaWYgKHRoaXMuc3RhdGVfID09IFdlYkNoYW5uZWxCYXNlLlN0YXRlLklOSVQpIHtcbiAgICBpZiAob3B0X3JldHJ5UmVxdWVzdCkge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLnNldmVyZSgnTm90IHN1cHBvc2VkIHRvIHJldHJ5IHRoZSBvcGVuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub3Blbl8oKTtcbiAgICB0aGlzLnN0YXRlXyA9IFdlYkNoYW5uZWxCYXNlLlN0YXRlLk9QRU5JTkc7XG4gIH0gZWxzZSBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuT1BFTkVEKSB7XG4gICAgaWYgKG9wdF9yZXRyeVJlcXVlc3QpIHtcbiAgICAgIHRoaXMubWFrZUZvcndhcmRDaGFubmVsUmVxdWVzdF8ob3B0X3JldHJ5UmVxdWVzdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKFxuICAgICAgICAgICdzdGFydEZvcndhcmRDaGFubmVsXyByZXR1cm5lZDogJyArXG4gICAgICAgICAgJ25vdGhpbmcgdG8gc2VuZCcpO1xuICAgICAgLy8gbm8gbmVlZCB0byBzdGFydCBhIG5ldyBmb3J3YXJkIGNoYW5uZWwgcmVxdWVzdFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmlzRnVsbCgpKSB7XG4gICAgICAvLyBTaG91bGQgYmUgaW1wb3NzaWJsZSB0byBiZSBjYWxsZWQgaW4gdGhpcyBzdGF0ZS5cbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy5zZXZlcmUoXG4gICAgICAgICAgJ3N0YXJ0Rm9yd2FyZENoYW5uZWxfIHJldHVybmVkOiAnICtcbiAgICAgICAgICAnY29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tYWtlRm9yd2FyZENoYW5uZWxSZXF1ZXN0XygpO1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1Zygnc3RhcnRGb3J3YXJkQ2hhbm5lbF8gZmluaXNoZWQsIHNlbnQgcmVxdWVzdCcpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRXN0YWJsaXNoZXMgYSBuZXcgY2hhbm5lbCBzZXNzaW9uIHdpdGggdGhlIHNlcnZlci5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5vcGVuXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1Zygnb3Blbl8oKScpO1xuICB0aGlzLm5leHRSaWRfID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwKTtcblxuICBjb25zdCByaWQgPSB0aGlzLm5leHRSaWRfKys7XG4gIGNvbnN0IHJlcXVlc3QgPVxuICAgICAgQ2hhbm5lbFJlcXVlc3QuY3JlYXRlQ2hhbm5lbFJlcXVlc3QodGhpcywgdGhpcy5jaGFubmVsRGVidWdfLCAnJywgcmlkKTtcblxuICAvLyBtaXggdGhlIGluaXQgaGVhZGVyc1xuICBsZXQgZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnNfO1xuICBpZiAodGhpcy5pbml0SGVhZGVyc18pIHtcbiAgICBpZiAoZXh0cmFIZWFkZXJzKSB7XG4gICAgICBleHRyYUhlYWRlcnMgPSBnb29nLm9iamVjdC5jbG9uZShleHRyYUhlYWRlcnMpO1xuICAgICAgZ29vZy5vYmplY3QuZXh0ZW5kKGV4dHJhSGVhZGVycywgdGhpcy5pbml0SGVhZGVyc18pO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHRyYUhlYWRlcnMgPSB0aGlzLmluaXRIZWFkZXJzXztcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtXyA9PT0gbnVsbCAmJlxuICAgICAgIXRoaXMuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzXykge1xuICAgIHJlcXVlc3Quc2V0RXh0cmFIZWFkZXJzKGV4dHJhSGVhZGVycyk7XG4gICAgZXh0cmFIZWFkZXJzID0gbnVsbDtcbiAgfVxuXG4gIGxldCByZXF1ZXN0VGV4dCA9IHRoaXMuZGVxdWV1ZU91dGdvaW5nTWFwc18oXG4gICAgICByZXF1ZXN0LFxuICAgICAgdGhpcy5mYXN0SGFuZHNoYWtlXyA/IHRoaXMuZ2V0TWF4TnVtTWVzc2FnZXNGb3JGYXN0SGFuZHNoYWtlXygpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWJDaGFubmVsQmFzZS5NQVhfTUFQU19QRVJfUkVRVUVTVF8pO1xuXG4gIGNvbnN0IHVyaSA9IHRoaXMuZm9yd2FyZENoYW5uZWxVcmlfLmNsb25lKCk7XG4gIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnUklEJywgcmlkKTtcblxuICBpZiAodGhpcy5jbGllbnRWZXJzaW9uXyA+IDApIHtcbiAgICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ0NWRVInLCB0aGlzLmNsaWVudFZlcnNpb25fKTtcbiAgfVxuXG4gIC8vIGh0dHAtc2Vzc2lvbi1pZCB0byBiZSBnZW5lcmF0ZWQgYXMgdGhlIHJlc3BvbnNlXG4gIGlmICh0aGlzLmdldEh0dHBTZXNzaW9uSWRQYXJhbSgpKSB7XG4gICAgdXJpLnNldFBhcmFtZXRlclZhbHVlKFxuICAgICAgICBXZWJDaGFubmVsLlhfSFRUUF9TRVNTSU9OX0lELCB0aGlzLmdldEh0dHBTZXNzaW9uSWRQYXJhbSgpKTtcbiAgfVxuXG4gIHRoaXMuYWRkQWRkaXRpb25hbFBhcmFtc18odXJpKTtcblxuICBpZiAoZXh0cmFIZWFkZXJzKSB7XG4gICAgaWYgKHRoaXMuZW5jb2RlSW5pdE1lc3NhZ2VIZWFkZXJzXykge1xuICAgICAgbGV0IGVuY29kZWRIZWFkZXJzID1cbiAgICAgICAgICBodHRwQ29ycy5nZW5lcmF0ZUVuY29kZWRIdHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtKGV4dHJhSGVhZGVycyk7XG4gICAgICByZXF1ZXN0VGV4dCA9ICdoZWFkZXJzPScgKyBlbmNvZGVkSGVhZGVycyArICcmJyArIHJlcXVlc3RUZXh0O1xuICAgIH0gZWxzZSBpZiAodGhpcy5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtXykge1xuICAgICAgaHR0cENvcnMuc2V0SHR0cEhlYWRlcnNXaXRoT3ZlcndyaXRlUGFyYW0oXG4gICAgICAgICAgdXJpLCB0aGlzLmh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW1fLCBleHRyYUhlYWRlcnMpO1xuICAgIH0gIC8vIGVsc2UgLSBzaG91bGQgbm90IGhhcHBlblxuICB9XG5cbiAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5hZGRSZXF1ZXN0KHJlcXVlc3QpO1xuXG4gIGlmICh0aGlzLmJsb2NraW5nSGFuZHNoYWtlXykge1xuICAgIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnVFlQRScsICdpbml0Jyk7ICAvLyBkZWZhdWx0IHRvIGJsb2NraW5nIGluIGZ1dHVyZVxuICB9XG5cbiAgLy8gQ2hlY2sgdGhlIG9wdGlvbiBhbmQgdXNlIEdFVCB0byBlbmFibGUgUVVJQyAwLVJUVFxuICBpZiAodGhpcy5mYXN0SGFuZHNoYWtlXykge1xuICAgIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnJHJlcScsIHJlcXVlc3RUZXh0KTtcblxuICAgIC8vIGVuYWJsZSBoYW5kc2hha2UgdXBncmFkZVxuICAgIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnU0lEJywgJ251bGwnKTtcbiAgICByZXF1ZXN0LnNldERlY29kZUluaXRpYWxSZXNwb25zZSgpO1xuXG4gICAgcmVxdWVzdC54bWxIdHRwUG9zdCh1cmksIG51bGwsIHRydWUpOyAgLy8gU2VuZCBhcyBhIEdFVFxuICB9IGVsc2Uge1xuICAgIHJlcXVlc3QueG1sSHR0cFBvc3QodXJpLCByZXF1ZXN0VGV4dCwgdHJ1ZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgcmF3IEpTT04gbWVzc2FnZXMgdG8gYmUgZW5jb2RlZFxuICogd2l0aCB0aGUgZmFzdC1oYW5kc2hha2UgKEdFVCkgcmVxdWVzdCwgaW5jbHVkaW5nIHplcm8uIElmIG1lc3NhZ2VzIGFyZSBub3RcbiAqIGVuY29kZWQgYXMgcmF3IEpTT04gZGF0YSwgcmV0dXJuIFdlYkNoYW5uZWxCYXNlLk1BWF9NQVBTX1BFUl9SRVFVRVNUX1xuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldE1heE51bU1lc3NhZ2VzRm9yRmFzdEhhbmRzaGFrZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBsZXQgdG90YWwgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMub3V0Z29pbmdNYXBzX1tpXTtcbiAgICBjb25zdCBzaXplID0gbWFwLmdldFJhd0RhdGFTaXplKCk7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRvdGFsICs9IHNpemU7XG5cbiAgICBpZiAodG90YWwgPiBXZWJDaGFubmVsQmFzZS5NQVhfQ0hBUlNfUEVSX0dFVF8pIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIGlmICh0b3RhbCA9PT0gV2ViQ2hhbm5lbEJhc2UuTUFYX0NIQVJTX1BFUl9HRVRfIHx8XG4gICAgICAgIGkgPT09IHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gaSArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFdlYkNoYW5uZWxCYXNlLk1BWF9NQVBTX1BFUl9SRVFVRVNUXztcbn07XG5cblxuXG4vKipcbiAqIE1ha2VzIGEgZm9yd2FyZCBjaGFubmVsIHJlcXVlc3QgdXNpbmcgWE1MSFRUUC5cbiAqIEBwYXJhbSB7IUNoYW5uZWxSZXF1ZXN0PX0gb3B0X3JldHJ5UmVxdWVzdCBBIGZhaWxlZCByZXF1ZXN0IHRvIHJldHJ5LlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm1ha2VGb3J3YXJkQ2hhbm5lbFJlcXVlc3RfID0gZnVuY3Rpb24oXG4gICAgb3B0X3JldHJ5UmVxdWVzdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCByaWQ7XG4gIGlmIChvcHRfcmV0cnlSZXF1ZXN0KSB7XG4gICAgcmlkID0gb3B0X3JldHJ5UmVxdWVzdC5nZXRSZXF1ZXN0SWQoKTsgIC8vIFJldXNlIHRoZSBzYW1lIFJJRCBmb3IgYSByZXRyeVxuICB9IGVsc2Uge1xuICAgIHJpZCA9IHRoaXMubmV4dFJpZF8rKztcbiAgfVxuXG4gIGNvbnN0IHVyaSA9IHRoaXMuZm9yd2FyZENoYW5uZWxVcmlfLmNsb25lKCk7XG4gIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnU0lEJywgdGhpcy5zaWRfKTtcbiAgdXJpLnNldFBhcmFtZXRlclZhbHVlKCdSSUQnLCByaWQpO1xuICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ0FJRCcsIHRoaXMubGFzdEFycmF5SWRfKTtcblxuICB0aGlzLmFkZEFkZGl0aW9uYWxQYXJhbXNfKHVyaSk7XG5cbiAgaWYgKHRoaXMuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbV8gJiYgdGhpcy5leHRyYUhlYWRlcnNfKSB7XG4gICAgaHR0cENvcnMuc2V0SHR0cEhlYWRlcnNXaXRoT3ZlcndyaXRlUGFyYW0oXG4gICAgICAgIHVyaSwgdGhpcy5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtXywgdGhpcy5leHRyYUhlYWRlcnNfKTtcbiAgfVxuXG4gIGNvbnN0IHJlcXVlc3QgPSBDaGFubmVsUmVxdWVzdC5jcmVhdGVDaGFubmVsUmVxdWVzdChcbiAgICAgIHRoaXMsIHRoaXMuY2hhbm5lbERlYnVnXywgdGhpcy5zaWRfLCByaWQsXG4gICAgICB0aGlzLmZvcndhcmRDaGFubmVsUmV0cnlDb3VudF8gKyAxKTtcblxuICBpZiAodGhpcy5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtXyA9PT0gbnVsbCkge1xuICAgIHJlcXVlc3Quc2V0RXh0cmFIZWFkZXJzKHRoaXMuZXh0cmFIZWFkZXJzXyk7XG4gIH1cblxuICBsZXQgcmVxdWVzdFRleHQ7XG4gIGlmIChvcHRfcmV0cnlSZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXF1ZXVlUGVuZGluZ01hcHNfKG9wdF9yZXRyeVJlcXVlc3QpO1xuICB9XG4gIHJlcXVlc3RUZXh0ID1cbiAgICAgIHRoaXMuZGVxdWV1ZU91dGdvaW5nTWFwc18ocmVxdWVzdCwgV2ViQ2hhbm5lbEJhc2UuTUFYX01BUFNfUEVSX1JFUVVFU1RfKTtcblxuICAvLyBSYW5kb21pemUgZnJvbSA1MCUtMTAwJSBvZiB0aGUgZm9yd2FyZCBjaGFubmVsIHRpbWVvdXQgdG8gYXZvaWRcbiAgLy8gYSBiaWcgaGl0IGlmIHNlcnZlcnMgaGFwcGVuIHRvIGRpZSBhdCBvbmNlLlxuICByZXF1ZXN0LnNldFRpbWVvdXQoXG4gICAgICBNYXRoLnJvdW5kKHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0VGltZW91dE1zXyAqIDAuNTApICtcbiAgICAgIE1hdGgucm91bmQodGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfICogMC41MCAqIE1hdGgucmFuZG9tKCkpKTtcbiAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5hZGRSZXF1ZXN0KHJlcXVlc3QpO1xuICByZXF1ZXN0LnhtbEh0dHBQb3N0KHVyaSwgcmVxdWVzdFRleHQsIHRydWUpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYWRkaXRpb25hbCBxdWVyeSBwYXJhbWV0ZXJzIGZyb20gYGV4dHJhUGFyYW1zX2AgYW5kIGBoYW5kbGVyX2AgdG8gdGhlXG4gKiBnaXZlbiBVUkkuXG4gKiBAcGFyYW0geyFnb29nLlVyaX0gdXJpIFRoZSBVUkkgdG8gYWRkIHRoZSBwYXJhbWV0ZXJzIHRvLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmFkZEFkZGl0aW9uYWxQYXJhbXNfID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuZXh0cmFQYXJhbXNfKSB7XG4gICAgZ29vZy5vYmplY3QuZm9yRWFjaCh0aGlzLmV4dHJhUGFyYW1zXywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdXJpLnNldFBhcmFtZXRlclZhbHVlKGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRoaXMuaGFuZGxlcl8pIHtcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLmhhbmRsZXJfLmdldEFkZGl0aW9uYWxQYXJhbXModGhpcyk7XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgZ29vZy5zdHJ1Y3RzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgdXJpLnNldFBhcmFtZXRlclZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVxdWVzdCB0ZXh0IGZyb20gdGhlIG91dGdvaW5nIG1hcHMgYW5kIHJlc2V0cyBpdC5cbiAqIEBwYXJhbSB7IUNoYW5uZWxSZXF1ZXN0fSByZXF1ZXN0IFRoZSBuZXcgcmVxdWVzdCBmb3Igc2VuZGluZyB0aGUgbWVzc2FnZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4TnVtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0byBiZSBlbmNvZGVkXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHJlcXVlc3QgdGV4dCBjcmVhdGVkIGZyb20gYWxsIHRoZSBjdXJyZW50bHlcbiAqICAgICAgICAgICAgICAgICAgcXVldWVkIG91dGdvaW5nIG1hcHMuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZGVxdWV1ZU91dGdvaW5nTWFwc18gPSBmdW5jdGlvbihyZXF1ZXN0LCBtYXhOdW0pIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBjb3VudCA9IE1hdGgubWluKHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGgsIG1heE51bSk7XG5cbiAgY29uc3QgYmFkTWFwSGFuZGxlciA9IHRoaXMuaGFuZGxlcl8gP1xuICAgICAgZ29vZy5iaW5kKHRoaXMuaGFuZGxlcl8uYmFkTWFwRXJyb3IsIHRoaXMuaGFuZGxlcl8sIHRoaXMpIDpcbiAgICAgIG51bGw7XG4gIGNvbnN0IHJlc3VsdCA9IHRoaXMud2lyZUNvZGVjXy5lbmNvZGVNZXNzYWdlUXVldWUoXG4gICAgICB0aGlzLm91dGdvaW5nTWFwc18sIGNvdW50LCBiYWRNYXBIYW5kbGVyKTtcblxuICByZXF1ZXN0LnNldFBlbmRpbmdNZXNzYWdlcyh0aGlzLm91dGdvaW5nTWFwc18uc3BsaWNlKDAsIGNvdW50KSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSZXF1ZXVlcyB1bmFja25vd2xlZGdlZCBzZW50IGFycmF5cyBmb3IgcmV0cmFuc21pc3Npb24gaW4gdGhlIG5leHQgZm9yd2FyZFxuICogY2hhbm5lbCByZXF1ZXN0LlxuICogQHBhcmFtIHshQ2hhbm5lbFJlcXVlc3R9IHJldHJ5UmVxdWVzdCBBIGZhaWxlZCByZXF1ZXN0IHRvIHJldHJ5LlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLnJlcXVldWVQZW5kaW5nTWFwc18gPSBmdW5jdGlvbihyZXRyeVJlcXVlc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLm91dGdvaW5nTWFwc18gPVxuICAgICAgcmV0cnlSZXF1ZXN0LmdldFBlbmRpbmdNZXNzYWdlcygpLmNvbmNhdCh0aGlzLm91dGdvaW5nTWFwc18pO1xufTtcblxuXG4vKipcbiAqIEVuc3VyZXMgdGhlcmUgaXMgYSBiYWNrY2hhbm5lbCByZXF1ZXN0IGZvciByZWNlaXZpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZW5zdXJlQmFja0NoYW5uZWxfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0Xykge1xuICAgIC8vIGFscmVhZHkgaGF2ZSBvbmVcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFRpbWVySWRfKSB7XG4gICAgLy8gbm8gbmVlZCB0byBzdGFydCBhIG5ldyByZXF1ZXN0IC0gb25lIGlzIGFscmVhZHkgc2NoZWR1bGVkXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5iYWNrQ2hhbm5lbEF0dGVtcHRJZF8gPSAxO1xuXG4gIC8vIFVzZSBhc3luYy5ydW4gaW5zdGVhZCBvZiBzZXRUaW1lb3V0KDApIHRvIGF2b2lkIHRoZSAxcyBtZXNzYWdlIGRlbGF5XG4gIC8vIGZyb20gY2hyb21lL2ZpcmVmb3ggYmFja2dyb3VuZCB0YWJzXG4gIC8vIGJhY2tDaGFubmVsVGltZXJJZF8gc3RheXMgdW5zZXQsIGFzIHdpdGggc2V0VGltZW91dCgwKVxuICBnb29nLmFzeW5jLnJ1bih0aGlzLm9uU3RhcnRCYWNrQ2hhbm5lbFRpbWVyXywgdGhpcyk7XG5cbiAgdGhpcy5iYWNrQ2hhbm5lbFJldHJ5Q291bnRfID0gMDtcbn07XG5cblxuLyoqXG4gKiBTY2hlZHVsZXMgYSBiYWNrLWNoYW5uZWwgcmV0cnksIHVubGVzcyB0aGUgbWF4IHJldHJpZXMgaGFzIGJlZW4gcmVhY2hlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWZmIGEgcmV0cnkgd2FzIHNjaGVkdWxlZC5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5tYXliZVJldHJ5QmFja0NoYW5uZWxfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyB8fCB0aGlzLmJhY2tDaGFubmVsVGltZXJJZF8pIHtcbiAgICAvLyBTaG91bGQgYmUgaW1wb3NzaWJsZSB0byBiZSBjYWxsZWQgaW4gdGhpcyBzdGF0ZS5cbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uc2V2ZXJlKCdSZXF1ZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFJldHJ5Q291bnRfID49IHRoaXMuZ2V0QmFja0NoYW5uZWxNYXhSZXRyaWVzKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoJ0dvaW5nIHRvIHJldHJ5IEdFVCcpO1xuXG4gIHRoaXMuYmFja0NoYW5uZWxBdHRlbXB0SWRfKys7XG4gIHRoaXMuYmFja0NoYW5uZWxUaW1lcklkXyA9IHJlcXVlc3RTdGF0cy5zZXRUaW1lb3V0KFxuICAgICAgZ29vZy5iaW5kKHRoaXMub25TdGFydEJhY2tDaGFubmVsVGltZXJfLCB0aGlzKSxcbiAgICAgIHRoaXMuZ2V0UmV0cnlUaW1lXyh0aGlzLmJhY2tDaGFubmVsUmV0cnlDb3VudF8pKTtcbiAgdGhpcy5iYWNrQ2hhbm5lbFJldHJ5Q291bnRfKys7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIFRpbWVyIGNhbGxiYWNrIGZvciBlbnN1cmVCYWNrQ2hhbm5lbF8uXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25TdGFydEJhY2tDaGFubmVsVGltZXJfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5iYWNrQ2hhbm5lbFRpbWVySWRfID0gbnVsbDtcbiAgdGhpcy5zdGFydEJhY2tDaGFubmVsXygpO1xuXG4gIGlmICghdGhpcy5kZXRlY3RCdWZmZXJpbmdQcm94eV8pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5icERldGVjdGlvbkRvbmVfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyA9PSBudWxsIHx8IHRoaXMuaGFuZHNoYWtlUnR0TXNfIDw9IDApIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ud2FybmluZyhcbiAgICAgICAgJ1NraXAgYnBEZXRlY3Rpb25UaW1lcklkXyAnICsgdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfICsgJyAnICtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VSdHRNc18pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoaXMgZ29lcyB3aXRoIGVhY2ggbmV3IHJlcXVlc3QgdW50aWwgYnBEZXRlY3Rpb25Eb25lX1xuICBjb25zdCBicERldGVjdGlvblRpbWVvdXQgPSAyICogdGhpcy5oYW5kc2hha2VSdHRNc187XG4gIHRoaXMuY2hhbm5lbERlYnVnXy5pbmZvKCdCUCBkZXRlY3Rpb24gdGltZXIgZW5hYmxlZDogJyArIGJwRGV0ZWN0aW9uVGltZW91dCk7XG5cbiAgdGhpcy5icERldGVjdGlvblRpbWVySWRfID0gcmVxdWVzdFN0YXRzLnNldFRpbWVvdXQoXG4gICAgICBnb29nLmJpbmQodGhpcy5vbkJwRGV0ZWN0aW9uVGltZXJfLCB0aGlzKSwgYnBEZXRlY3Rpb25UaW1lb3V0KTtcbn07XG5cblxuLyoqXG4gKiBUaW1lciBjYWxsYmFjayBmb3IgYnBEZXRlY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25CcERldGVjdGlvblRpbWVyXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5icERldGVjdGlvblRpbWVySWRfKSB7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLndhcm5pbmcoJ0ludmFsaWQgb3BlcmF0aW9uLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYnBEZXRlY3Rpb25UaW1lcklkXyA9IG51bGw7XG4gIHRoaXMuY2hhbm5lbERlYnVnXy5pbmZvKCdCUCBkZXRlY3Rpb24gdGltZW91dCByZWFjaGVkLicpO1xuXG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICB0aGlzLmJhY2tDaGFubmVsUmVxdWVzdF8gIT0gbnVsbCxcbiAgICAgICdJbnZhbGlkIHN0YXRlOiBubyBiYWNrY2hhbm5lbCByZXF1ZXN0Jyk7XG5cbiAgLy8gV2Ugd2FpdCBmb3IgZXh0cmEgcmVzcG9uc2UgcGF5bG9hZCBpbiBhZGRpdGlvbiB0byBqdXN0IGhlYWRlcnMgdG9cbiAgLy8gY2FuY2VsIHRoZSB0aW1lci5cbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0Xy5nZXRYaHIoKSAhPSBudWxsKSB7XG4gICAgY29uc3QgcmVzcG9uc2VEYXRhID0gdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfLmdldFhocigpLmdldFJlc3BvbnNlVGV4dCgpO1xuICAgIGlmIChyZXNwb25zZURhdGEpIHtcbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy53YXJuaW5nKFxuICAgICAgICAgICdUaW1lciBzaG91bGQgaGF2ZSBiZWVuIGNhbmNlbGxlZCA6ICcgKyByZXNwb25zZURhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuYWJsZSBsb25nLXBvbGxpbmdcbiAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oXG4gICAgICAnQnVmZmVyaW5nIHByb3h5IGRldGVjdGVkIGFuZCBzd2l0Y2ggdG8gbG9uZy1wb2xsaW5nIScpO1xuICB0aGlzLmVuYWJsZVN0cmVhbWluZ18gPSBmYWxzZTtcblxuICB0aGlzLmJwRGV0ZWN0aW9uRG9uZV8gPSB0cnVlO1xuICByZXF1ZXN0U3RhdHMubm90aWZ5U3RhdEV2ZW50KHJlcXVlc3RTdGF0cy5TdGF0LlBST1hZKTtcblxuICAvLyBDYW5jZWwgdGhlIHJlcXVlc3QgYW5kIHN0YXJ0IGEgbmV3IG9uZSBpbW1lZGlhdGVseVxuICB0aGlzLmNhbmNlbEJhY2tDaGFubmVsUmVxdWVzdF8oKTtcbiAgdGhpcy5zdGFydEJhY2tDaGFubmVsXygpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgdGltZXIgZm9yIEJQIGRldGVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jbGVhckJwRGV0ZWN0aW9uVGltZXJfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuYnBEZXRlY3Rpb25UaW1lcklkXyAhPSBudWxsKSB7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdDYW5jZWwgdGhlIEJQIGRldGVjdGlvbiB0aW1lci4nKTtcbiAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQodGhpcy5icERldGVjdGlvblRpbWVySWRfKTtcbiAgICB0aGlzLmJwRGV0ZWN0aW9uVGltZXJJZF8gPSBudWxsO1xuICB9XG59O1xuXG5cbi8qKlxuICogQmVnaW5zIGEgbmV3IGJhY2sgY2hhbm5lbCBvcGVyYXRpb24gdG8gdGhlIHNlcnZlci5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zdGFydEJhY2tDaGFubmVsXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5va1RvTWFrZVJlcXVlc3RfKCkpIHtcbiAgICAvLyBjaGFubmVsIGlzIGNhbmNlbGxlZFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnQ3JlYXRpbmcgbmV3IEh0dHBSZXF1ZXN0Jyk7XG4gIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyA9IENoYW5uZWxSZXF1ZXN0LmNyZWF0ZUNoYW5uZWxSZXF1ZXN0KFxuICAgICAgdGhpcywgdGhpcy5jaGFubmVsRGVidWdfLCB0aGlzLnNpZF8sICdycGMnLCB0aGlzLmJhY2tDaGFubmVsQXR0ZW1wdElkXyk7XG5cbiAgaWYgKHRoaXMuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbV8gPT09IG51bGwpIHtcbiAgICB0aGlzLmJhY2tDaGFubmVsUmVxdWVzdF8uc2V0RXh0cmFIZWFkZXJzKHRoaXMuZXh0cmFIZWFkZXJzXyk7XG4gIH1cblxuICB0aGlzLmJhY2tDaGFubmVsUmVxdWVzdF8uc2V0UmVhZHlTdGF0ZUNoYW5nZVRocm90dGxlKFxuICAgICAgdGhpcy5yZWFkeVN0YXRlQ2hhbmdlVGhyb3R0bGVNc18pO1xuICBjb25zdCB1cmkgPSB0aGlzLmJhY2tDaGFubmVsVXJpXy5jbG9uZSgpO1xuICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ1JJRCcsICdycGMnKTtcbiAgdXJpLnNldFBhcmFtZXRlclZhbHVlKCdTSUQnLCB0aGlzLnNpZF8pO1xuICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ0NJJywgdGhpcy5lbmFibGVTdHJlYW1pbmdfID8gJzAnIDogJzEnKTtcbiAgdXJpLnNldFBhcmFtZXRlclZhbHVlKCdBSUQnLCB0aGlzLmxhc3RBcnJheUlkXyk7XG4gIHVyaS5zZXRQYXJhbWV0ZXJWYWx1ZSgnVFlQRScsICd4bWxodHRwJyk7XG5cbiAgdGhpcy5hZGRBZGRpdGlvbmFsUGFyYW1zXyh1cmkpO1xuXG4gIGlmICh0aGlzLmh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW1fICYmIHRoaXMuZXh0cmFIZWFkZXJzXykge1xuICAgIGh0dHBDb3JzLnNldEh0dHBIZWFkZXJzV2l0aE92ZXJ3cml0ZVBhcmFtKFxuICAgICAgICB1cmksIHRoaXMuaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbV8sIHRoaXMuZXh0cmFIZWFkZXJzXyk7XG4gIH1cblxuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfKSB7XG4gICAgdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfLnNldFRpbWVvdXQodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RUaW1lb3V0TXNfKTtcbiAgfVxuXG4gIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0Xy54bWxIdHRwR2V0KFxuICAgICAgdXJpLCB0cnVlIC8qIGRlY29kZUNodW5rcyAqLywgdGhpcy5ob3N0UHJlZml4Xyk7XG5cbiAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdOZXcgUmVxdWVzdCBjcmVhdGVkJyk7XG59O1xuXG5cbi8qKlxuICogR2l2ZXMgdGhlIGhhbmRsZXIgYSBjaGFuY2UgdG8gcmV0dXJuIGFuIGVycm9yIGNvZGUgYW5kIHN0b3AgY2hhbm5lbFxuICogZXhlY3V0aW9uLiBBIGhhbmRsZXIgbWlnaHQgd2FudCB0byBkbyB0aGlzIHRvIGNoZWNrIHRoYXQgdGhlIHVzZXIgaXMgc3RpbGxcbiAqIGxvZ2dlZCBpbiwgZm9yIGV4YW1wbGUuXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybiB7Ym9vbGVhbn0gSWYgaXQncyBPSyB0byBtYWtlIGEgcmVxdWVzdC5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm9rVG9NYWtlUmVxdWVzdF8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5oYW5kbGVyXykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaGFuZGxlcl8ub2tUb01ha2VSZXF1ZXN0KHRoaXMpO1xuICAgIGlmIChyZXN1bHQgIT0gV2ViQ2hhbm5lbEJhc2UuRXJyb3IuT0spIHtcbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZyhcbiAgICAgICAgICAnSGFuZGxlciByZXR1cm5lZCBlcnJvciBjb2RlIGZyb20gb2tUb01ha2VSZXF1ZXN0Jyk7XG4gICAgICB0aGlzLnNpZ25hbEVycm9yXyhyZXN1bHQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm9uRmlyc3RCeXRlUmVjZWl2ZWQgPSBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZVRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfID09IHJlcXVlc3QgJiYgdGhpcy5kZXRlY3RCdWZmZXJpbmdQcm94eV8pIHtcbiAgICBpZiAoIXRoaXMuYnBEZXRlY3Rpb25Eb25lXykge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oXG4gICAgICAgICAgJ0dyZWF0LCBubyBidWZmZXJpbmcgcHJveHkgZGV0ZWN0ZWQuIEJ5dGVzIHJlY2VpdmVkOiAnICtcbiAgICAgICAgICByZXNwb25zZVRleHQubGVuZ3RoKTtcbiAgICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICAgICAgdGhpcy5icERldGVjdGlvblRpbWVySWRfLCAnVGltZXIgc2hvdWxkIG5vdCBoYXZlIGJlZW4gY2FuY2VsbGVkLicpO1xuICAgICAgdGhpcy5jbGVhckJwRGV0ZWN0aW9uVGltZXJfKCk7XG4gICAgICB0aGlzLmJwRGV0ZWN0aW9uRG9uZV8gPSB0cnVlO1xuICAgICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5OT1BST1hZKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm9uUmVxdWVzdERhdGEgPSBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZVRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuQ0xPU0VEIHx8XG4gICAgICAodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfICE9IHJlcXVlc3QgJiZcbiAgICAgICAhdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5oYXNSZXF1ZXN0KHJlcXVlc3QpKSkge1xuICAgIC8vIGVpdGhlciBDTE9TRUQgb3IgYSByZXF1ZXN0IHdlIGRvbid0IGtub3cgYWJvdXQgKHBlcmhhcHMgYW4gb2xkIHJlcXVlc3QpXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZmlyc3QgdG8gY2hlY2sgaWYgcmVxdWVzdCBoYXMgYmVlbiB1cGdyYWRlZCB0byBiYWNrY2hhbm5lbFxuICBpZiAoIXJlcXVlc3QuaXNJbml0aWFsUmVzcG9uc2VEZWNvZGVkKCkgJiZcbiAgICAgIHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbF8uaGFzUmVxdWVzdChyZXF1ZXN0KSAmJlxuICAgICAgdGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuT1BFTkVEKSB7XG4gICAgbGV0IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IHRoaXMud2lyZUNvZGVjXy5kZWNvZGVNZXNzYWdlKHJlc3BvbnNlVGV4dCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHJlc3BvbnNlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2UpICYmIHJlc3BvbnNlLmxlbmd0aCA9PSAzKSB7XG4gICAgICB0aGlzLmhhbmRsZVBvc3RSZXNwb25zZV8oLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIChyZXNwb25zZSksIHJlcXVlc3QpO1xuICAgICAgdGhpcy5vbkZvcndhcmRDaGFubmVsRmx1c2hlZF8oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdCYWQgUE9TVCByZXNwb25zZSBkYXRhIHJldHVybmVkJyk7XG4gICAgICB0aGlzLnNpZ25hbEVycm9yXyhXZWJDaGFubmVsQmFzZS5FcnJvci5CQURfUkVTUE9OU0UpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocmVxdWVzdC5pc0luaXRpYWxSZXNwb25zZURlY29kZWQoKSB8fFxuICAgICAgICB0aGlzLmJhY2tDaGFubmVsUmVxdWVzdF8gPT0gcmVxdWVzdCkge1xuICAgICAgdGhpcy5jbGVhckRlYWRCYWNrY2hhbm5lbFRpbWVyXygpO1xuICAgIH1cblxuICAgIGlmICghZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZShyZXNwb25zZVRleHQpKSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLndpcmVDb2RlY18uZGVjb2RlTWVzc2FnZShyZXNwb25zZVRleHQpO1xuICAgICAgdGhpcy5vbklucHV0XygvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gKHJlc3BvbnNlKSwgcmVxdWVzdCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHdlIG5lZWQgY2FsbCB0aGUgZmx1c2ggY2FsbGJhY2suXG4gKlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm9uRm9yd2FyZENoYW5uZWxGbHVzaGVkXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmdldFJlcXVlc3RDb3VudCgpIDw9IDEpIHtcbiAgICBpZiAodGhpcy5mb3J3YXJkQ2hhbm5lbEZsdXNoZWRDYWxsYmFja18pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuZm9yd2FyZENoYW5uZWxGbHVzaGVkQ2FsbGJhY2tfKCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZHVtcEV4Y2VwdGlvbihcbiAgICAgICAgICAgIGV4LCAnRXhjZXB0aW9uIGZyb20gZm9yd2FyZENoYW5uZWxGbHVzaGVkQ2FsbGJhY2tfICcpO1xuICAgICAgfVxuICAgICAgLy8gcmVzZXRcbiAgICAgIHRoaXMuZm9yd2FyZENoYW5uZWxGbHVzaGVkQ2FsbGJhY2tfID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEhhbmRsZXMgYSBQT1NUIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcmVzcG9uc2VWYWx1ZXMgVGhlIGtleSB2YWx1ZSBwYWlycyBpblxuICogICAgIHRoZSBQT1NUIHJlc3BvbnNlLlxuICogQHBhcmFtIHshQ2hhbm5lbFJlcXVlc3R9IGZvcndhcmRSZXEgVGhlIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0IHRoYXRcbiAqIHRyaWdnZXJzIHRoaXMgZnVuY3Rpb24gY2FsbC5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5oYW5kbGVQb3N0UmVzcG9uc2VfID0gZnVuY3Rpb24oXG4gICAgcmVzcG9uc2VWYWx1ZXMsIGZvcndhcmRSZXEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUaGUgZmlyc3QgcmVzcG9uc2UgdmFsdWUgaXMgc2V0IHRvIDAgaWYgc2VydmVyIGlzIG1pc3NpbmcgYmFja2NoYW5uZWwuXG4gIGlmIChyZXNwb25zZVZhbHVlc1swXSA9PSAwKSB7XG4gICAgdGhpcy5oYW5kbGVCYWNrY2hhbm5lbE1pc3NpbmdfKGZvcndhcmRSZXEpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3RQb3N0UmVzcG9uc2VBcnJheUlkXyA9IHJlc3BvbnNlVmFsdWVzWzFdO1xuICBjb25zdCBvdXRzdGFuZGluZ0FycmF5cyA9IHRoaXMubGFzdFBvc3RSZXNwb25zZUFycmF5SWRfIC0gdGhpcy5sYXN0QXJyYXlJZF87XG4gIGlmICgwIDwgb3V0c3RhbmRpbmdBcnJheXMpIHtcbiAgICBjb25zdCBudW1PdXRzdGFuZGluZ0JhY2tjaGFubmVsQnl0ZXMgPSByZXNwb25zZVZhbHVlc1syXTtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoXG4gICAgICAgIG51bU91dHN0YW5kaW5nQmFja2NoYW5uZWxCeXRlcyArICcgYnl0ZXMgKGluICcgKyBvdXRzdGFuZGluZ0FycmF5cyArXG4gICAgICAgICcgYXJyYXlzKSBhcmUgb3V0c3RhbmRpbmcgb24gdGhlIEJhY2tDaGFubmVsJyk7XG4gICAgaWYgKCF0aGlzLnNob3VsZFJldHJ5QmFja0NoYW5uZWxfKG51bU91dHN0YW5kaW5nQmFja2NoYW5uZWxCeXRlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRlYWRCYWNrQ2hhbm5lbFRpbWVySWRfKSB7XG4gICAgICAvLyBXZSBleHBlY3QgdG8gcmVjZWl2ZSBkYXRhIHdpdGhpbiAyIFJUVHMgb3Igd2UgcmV0cnkgdGhlIGJhY2tjaGFubmVsLlxuICAgICAgdGhpcy5kZWFkQmFja0NoYW5uZWxUaW1lcklkXyA9IHJlcXVlc3RTdGF0cy5zZXRUaW1lb3V0KFxuICAgICAgICAgIGdvb2cuYmluZCh0aGlzLm9uQmFja0NoYW5uZWxEZWFkXywgdGhpcyksXG4gICAgICAgICAgMiAqIFdlYkNoYW5uZWxCYXNlLlJUVF9FU1RJTUFURSk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogSGFuZGxlcyBhIFBPU1QgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIHRlbGxpbmcgdXMgdGhhdCBpdCBoYXMgZGV0ZWN0ZWQgdGhhdFxuICogd2UgaGF2ZSBubyBoYW5naW5nIEdFVCBjb25uZWN0aW9uLlxuICogQHBhcmFtIHshQ2hhbm5lbFJlcXVlc3R9IGZvcndhcmRSZXEgVGhlIGZvcndhcmQgY2hhbm5lbCByZXF1ZXN0IHRoYXRcbiAqIHRyaWdnZXJzIHRoaXMgZnVuY3Rpb24gY2FsbC5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5oYW5kbGVCYWNrY2hhbm5lbE1pc3NpbmdfID0gZnVuY3Rpb24oZm9yd2FyZFJlcSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIEFzIGxvbmcgYXMgdGhlIGJhY2sgY2hhbm5lbCB3YXMgc3RhcnRlZCBiZWZvcmUgdGhlIFBPU1Qgd2FzIHNlbnQsXG4gIC8vIHdlIHNob3VsZCByZXRyeSB0aGUgYmFja2NoYW5uZWwuIFdlIGdpdmUgYSBzbGlnaHQgYnVmZmVyIG9mIFJUVF9FU1RJTUFURVxuICAvLyBzbyBhcyBub3QgdG8gZXhjZXNzaXZlbHkgcmV0cnkgdGhlIGJhY2tjaGFubmVsXG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnU2VydmVyIGNsYWltcyBvdXIgYmFja2NoYW5uZWwgaXMgbWlzc2luZy4nKTtcbiAgaWYgKHRoaXMuYmFja0NoYW5uZWxUaW1lcklkXykge1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnQnV0IHdlIGFyZSBjdXJyZW50bHkgc3RhcnRpbmcgdGhlIHJlcXVlc3QuJyk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF0aGlzLmJhY2tDaGFubmVsUmVxdWVzdF8pIHtcbiAgICB0aGlzLmNoYW5uZWxEZWJ1Z18ud2FybmluZygnV2UgZG8gbm90IGhhdmUgYSBCYWNrQ2hhbm5lbCBlc3RhYmxpc2hlZCcpO1xuICB9IGVsc2UgaWYgKFxuICAgICAgdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfLmdldFJlcXVlc3RTdGFydFRpbWUoKSArXG4gICAgICAgICAgV2ViQ2hhbm5lbEJhc2UuUlRUX0VTVElNQVRFIDxcbiAgICAgIGZvcndhcmRSZXEuZ2V0UmVxdWVzdFN0YXJ0VGltZSgpKSB7XG4gICAgdGhpcy5jbGVhckRlYWRCYWNrY2hhbm5lbFRpbWVyXygpO1xuICAgIHRoaXMuY2FuY2VsQmFja0NoYW5uZWxSZXF1ZXN0XygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLm1heWJlUmV0cnlCYWNrQ2hhbm5lbF8oKTtcbiAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5CQUNLQ0hBTk5FTF9NSVNTSU5HKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgd2Ugc2hvdWxkIHN0YXJ0IHRoZSBwcm9jZXNzIG9mIHJldHJ5aW5nIGEgcG9zc2libHlcbiAqIGRlYWQgYmFja2NoYW5uZWwuXG4gKiBAcGFyYW0ge251bWJlcn0gb3V0c3RhbmRpbmdCeXRlcyBUaGUgbnVtYmVyIG9mIGJ5dGVzIGZvciB3aGljaCB0aGUgc2VydmVyIGhhc1xuICogICAgIG5vdCB5ZXQgcmVjZWl2ZWQgYWNrbm93bGVkZ2VtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0byBzdGFydCB0aGUgYmFja2NoYW5uZWwgcmV0cnkgdGltZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2hvdWxkUmV0cnlCYWNrQ2hhbm5lbF8gPSBmdW5jdGlvbihvdXRzdGFuZGluZ0J5dGVzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gTm90IHRvbyBtYW55IG91dHN0YW5kaW5nIGJ5dGVzLCBub3QgYnVmZmVyZWQgYW5kIG5vdCBhZnRlciBhIHJldHJ5LlxuICByZXR1cm4gb3V0c3RhbmRpbmdCeXRlcyA8XG4gICAgICBXZWJDaGFubmVsQmFzZS5PVVRTVEFORElOR19EQVRBX0JBQ0tDSEFOTkVMX1JFVFJZX0NVVE9GRiAmJlxuICAgICAgIXRoaXMuaXNCdWZmZXJlZCgpICYmIHRoaXMuYmFja0NoYW5uZWxSZXRyeUNvdW50XyA9PSAwO1xufTtcblxuXG4vKipcbiAqIERlY2lkZXMgd2hpY2ggaG9zdCBwcmVmaXggc2hvdWxkIGJlIHVzZWQsIGlmIGFueS4gIElmIHRoZXJlIGlzIGEgaGFuZGxlcixcbiAqIGFsbG93cyB0aGUgaGFuZGxlciB0byB2YWxpZGF0ZSBhIGhvc3QgcHJlZml4IHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXIsIGFuZFxuICogb3B0aW9uYWxseSBvdmVycmlkZSBpdC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gc2VydmVySG9zdFByZWZpeCBUaGUgaG9zdCBwcmVmaXggcHJvdmlkZWQgYnkgdGhlIHNlcnZlci5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBob3N0IHByZWZpeCB0byBhY3R1YWxseSB1c2UsIGlmIGFueS4gV2lsbCByZXR1cm4gbnVsbFxuICogICAgIGlmIHRoZSB1c2Ugb2YgaG9zdCBwcmVmaXhlcyB3YXMgZGlzYWJsZWQgdmlhIHNldEFsbG93SG9zdFByZWZpeCgpLlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jb3JyZWN0SG9zdFByZWZpeCA9IGZ1bmN0aW9uKHNlcnZlckhvc3RQcmVmaXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5hbGxvd0hvc3RQcmVmaXhfKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcl8pIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXJfLmNvcnJlY3RIb3N0UHJlZml4KHNlcnZlckhvc3RQcmVmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gc2VydmVySG9zdFByZWZpeDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSB0aW1lciB0aGF0IGluZGljYXRlcyB0aGF0IG91ciBiYWNrY2hhbm5lbCBpcyBubyBsb25nZXIgYWJsZSB0b1xuICogc3VjY2Vzc2Z1bGx5IHJlY2VpdmUgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25CYWNrQ2hhbm5lbERlYWRfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuZGVhZEJhY2tDaGFubmVsVGltZXJJZF8gIT0gbnVsbCkge1xuICAgIHRoaXMuZGVhZEJhY2tDaGFubmVsVGltZXJJZF8gPSBudWxsO1xuICAgIHRoaXMuY2FuY2VsQmFja0NoYW5uZWxSZXF1ZXN0XygpO1xuICAgIHRoaXMubWF5YmVSZXRyeUJhY2tDaGFubmVsXygpO1xuICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlTdGF0RXZlbnQocmVxdWVzdFN0YXRzLlN0YXQuQkFDS0NIQU5ORUxfREVBRCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIHRpbWVyIHRoYXQgaW5kaWNhdGVzIHRoYXQgb3VyIGJhY2tjaGFubmVsIGlzIG5vIGxvbmdlciBhYmxlIHRvXG4gKiBzdWNjZXNzZnVsbHkgcmVjZWl2ZSBkYXRhIGZyb20gdGhlIHNlcnZlci5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jbGVhckRlYWRCYWNrY2hhbm5lbFRpbWVyXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLmRlYWRCYWNrQ2hhbm5lbFRpbWVySWRfICE9IG51bGwpIHtcbiAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQodGhpcy5kZWFkQmFja0NoYW5uZWxUaW1lcklkXyk7XG4gICAgdGhpcy5kZWFkQmFja0NoYW5uZWxUaW1lcklkXyA9IG51bGw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBlcnJvci9zdGF0dXMgY29tYmluYXRpb24gaXMgZmF0YWwgb3Igbm90LlxuICogT24gZmF0YWwgZXJyb3JzIHdlIGltbWVkaWF0ZWx5IGNsb3NlIHRoZSBzZXNzaW9uIHJhdGhlciB0aGFuIHJldHJ5aW5nIHRoZVxuICogZmFpbGVkIHJlcXVlc3QuXG4gKiBAcGFyYW0gez9DaGFubmVsUmVxdWVzdC5FcnJvcn0gZXJyb3IgVGhlIGVycm9yIGNvZGUgZm9yIHRoZVxuICogZmFpbGVkIHJlcXVlc3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSBUaGUgbGFzdCBIVFRQIHN0YXR1cyBjb2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGVycm9yIGlzIGZhdGFsLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UuaXNGYXRhbEVycm9yXyA9IGZ1bmN0aW9uKGVycm9yLCBzdGF0dXNDb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGVycm9yID09IENoYW5uZWxSZXF1ZXN0LkVycm9yLlVOS05PV05fU0VTU0lPTl9JRCB8fFxuICAgICAgKGVycm9yID09IENoYW5uZWxSZXF1ZXN0LkVycm9yLlNUQVRVUyAmJiBzdGF0dXNDb2RlID4gMCk7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5vblJlcXVlc3RDb21wbGV0ZSA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoJ1JlcXVlc3QgY29tcGxldGUnKTtcbiAgbGV0IHR5cGU7XG4gIGxldCBwZW5kaW5nTWVzc2FnZXMgPSBudWxsO1xuICBpZiAodGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfID09IHJlcXVlc3QpIHtcbiAgICB0aGlzLmNsZWFyRGVhZEJhY2tjaGFubmVsVGltZXJfKCk7XG4gICAgdGhpcy5jbGVhckJwRGV0ZWN0aW9uVGltZXJfKCk7XG4gICAgdGhpcy5iYWNrQ2hhbm5lbFJlcXVlc3RfID0gbnVsbDtcbiAgICB0eXBlID0gV2ViQ2hhbm5lbEJhc2UuQ2hhbm5lbFR5cGVfLkJBQ0tfQ0hBTk5FTDtcbiAgfSBlbHNlIGlmICh0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmhhc1JlcXVlc3QocmVxdWVzdCkpIHtcbiAgICBwZW5kaW5nTWVzc2FnZXMgPSByZXF1ZXN0LmdldFBlbmRpbmdNZXNzYWdlcygpO1xuICAgIHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbF8ucmVtb3ZlUmVxdWVzdChyZXF1ZXN0KTtcbiAgICB0eXBlID0gV2ViQ2hhbm5lbEJhc2UuQ2hhbm5lbFR5cGVfLkZPUldBUkRfQ0hBTk5FTDtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXR1cm4gaWYgaXQgd2FzIGFuIG9sZCByZXF1ZXN0IGZyb20gYSBwcmV2aW91cyBzZXNzaW9uXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuc3RhdGVfID09IFdlYkNoYW5uZWxCYXNlLlN0YXRlLkNMT1NFRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMubGFzdFN0YXR1c0NvZGVfID0gcmVxdWVzdC5nZXRMYXN0U3RhdHVzQ29kZSgpO1xuXG4gIGlmIChyZXF1ZXN0LmdldFN1Y2Nlc3MoKSkge1xuICAgIGlmICh0eXBlID09IFdlYkNoYW5uZWxCYXNlLkNoYW5uZWxUeXBlXy5GT1JXQVJEX0NIQU5ORUwpIHtcbiAgICAgIGNvbnN0IHNpemUgPSByZXF1ZXN0LmdldFBvc3REYXRhKCkgPyByZXF1ZXN0LmdldFBvc3REYXRhKCkubGVuZ3RoIDogMDtcbiAgICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlUaW1pbmdFdmVudChcbiAgICAgICAgICBzaXplLCBEYXRlLm5vdygpIC0gcmVxdWVzdC5nZXRSZXF1ZXN0U3RhcnRUaW1lKCksXG4gICAgICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJldHJ5Q291bnRfKTtcbiAgICAgIHRoaXMuZW5zdXJlRm9yd2FyZENoYW5uZWxfKCk7XG4gICAgICB0aGlzLm9uU3VjY2Vzc18ocmVxdWVzdCk7XG4gICAgfSBlbHNlIHsgIC8vIGkuZS4sIGJhY2stY2hhbm5lbFxuICAgICAgdGhpcy5lbnN1cmVCYWNrQ2hhbm5lbF8oKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIEVsc2UgdW5zdWNjZXNzZnVsLiBGYWxsIHRocm91Z2guXG5cbiAgY29uc3QgbGFzdEVycm9yID0gcmVxdWVzdC5nZXRMYXN0RXJyb3IoKTtcbiAgaWYgKCFXZWJDaGFubmVsQmFzZS5pc0ZhdGFsRXJyb3JfKGxhc3RFcnJvciwgdGhpcy5sYXN0U3RhdHVzQ29kZV8pKSB7XG4gICAgLy8gTWF5YmUgcmV0cnkuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuICdNYXliZSByZXRyeWluZywgbGFzdCBlcnJvcjogJyArXG4gICAgICAgICAgQ2hhbm5lbFJlcXVlc3QuZXJyb3JTdHJpbmdGcm9tQ29kZShsYXN0RXJyb3IsIHNlbGYubGFzdFN0YXR1c0NvZGVfKTtcbiAgICB9KTtcbiAgICBpZiAodHlwZSA9PSBXZWJDaGFubmVsQmFzZS5DaGFubmVsVHlwZV8uRk9SV0FSRF9DSEFOTkVMKSB7XG4gICAgICBpZiAodGhpcy5tYXliZVJldHJ5Rm9yd2FyZENoYW5uZWxfKHJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gV2ViQ2hhbm5lbEJhc2UuQ2hhbm5lbFR5cGVfLkJBQ0tfQ0hBTk5FTCkge1xuICAgICAgaWYgKHRoaXMubWF5YmVSZXRyeUJhY2tDaGFubmVsXygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRWxzZSBleGNlZWRlZCBtYXggcmV0cmllcy4gRmFsbCB0aHJvdWdoLlxuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnRXhjZWVkZWQgbWF4IG51bWJlciBvZiByZXRyaWVzJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRWxzZSBmYXRhbCBlcnJvci4gRmFsbCB0aHJvdWdoIGFuZCBtYXJrIHRoZSBwZW5kaW5nIG1hcHMgYXMgZmFpbGVkLlxuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnTm90IHJldHJ5aW5nIGR1ZSB0byBlcnJvciB0eXBlJyk7XG4gIH1cblxuXG4gIC8vIEFib3J0IHRoZSBjaGFubmVsIG5vd1xuXG4gIC8vIFJlY29yZCBwZW5kaW5nIG1lc3NhZ2VzIGZyb20gdGhlIGZhaWxlZCByZXF1ZXN0XG4gIGlmIChwZW5kaW5nTWVzc2FnZXMgJiYgcGVuZGluZ01lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmFkZFBlbmRpbmdNZXNzYWdlcyhwZW5kaW5nTWVzc2FnZXMpO1xuICB9XG5cbiAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdFcnJvcjogSFRUUCByZXF1ZXN0IGZhaWxlZCcpO1xuICBzd2l0Y2ggKGxhc3RFcnJvcikge1xuICAgIGNhc2UgQ2hhbm5lbFJlcXVlc3QuRXJyb3IuTk9fREFUQTpcbiAgICAgIHRoaXMuc2lnbmFsRXJyb3JfKFdlYkNoYW5uZWxCYXNlLkVycm9yLk5PX0RBVEEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDaGFubmVsUmVxdWVzdC5FcnJvci5CQURfREFUQTpcbiAgICAgIHRoaXMuc2lnbmFsRXJyb3JfKFdlYkNoYW5uZWxCYXNlLkVycm9yLkJBRF9EQVRBKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ2hhbm5lbFJlcXVlc3QuRXJyb3IuVU5LTk9XTl9TRVNTSU9OX0lEOlxuICAgICAgdGhpcy5zaWduYWxFcnJvcl8oV2ViQ2hhbm5lbEJhc2UuRXJyb3IuVU5LTk9XTl9TRVNTSU9OX0lEKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLnNpZ25hbEVycm9yXyhXZWJDaGFubmVsQmFzZS5FcnJvci5SRVFVRVNUX0ZBSUxFRCk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXRyeUNvdW50IE51bWJlciBvZiByZXRyaWVzIHNvIGZhci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGltZSBpbiBtcyBiZWZvcmUgZmlyaW5nIG5leHQgcmV0cnkgcmVxdWVzdC5cbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRSZXRyeVRpbWVfID0gZnVuY3Rpb24ocmV0cnlDb3VudCkge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCByZXRyeVRpbWUgPSB0aGlzLmJhc2VSZXRyeURlbGF5TXNfICtcbiAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMucmV0cnlEZWxheVNlZWRNc18pO1xuICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnSW5hY3RpdmUgY2hhbm5lbCcpO1xuICAgIHJldHJ5VGltZSA9IHJldHJ5VGltZSAqIFdlYkNoYW5uZWxCYXNlLklOQUNUSVZFX0NIQU5ORUxfUkVUUllfRkFDVE9SO1xuICB9XG4gIC8vIEJhY2tvZmYgZm9yIHN1YnNlcXVlbnQgcmV0cmllc1xuICByZXRyeVRpbWUgKj0gcmV0cnlDb3VudDtcbiAgcmV0dXJuIHJldHJ5VGltZTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmFzZURlbGF5TXMgVGhlIGJhc2UgcGFydCBvZiB0aGUgcmV0cnkgZGVsYXksIGluIG1zLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5U2VlZE1zIEEgcmFuZG9tIGRlbGF5IGJldHdlZW4gMCBhbmQgdGhpcyBpcyBhZGRlZCB0b1xuICogICAgIHRoZSBiYXNlIHBhcnQuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRSZXRyeURlbGF5ID0gZnVuY3Rpb24oYmFzZURlbGF5TXMsIGRlbGF5U2VlZE1zKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5iYXNlUmV0cnlEZWxheU1zXyA9IGJhc2VEZWxheU1zO1xuICB0aGlzLnJldHJ5RGVsYXlTZWVkTXNfID0gZGVsYXlTZWVkTXM7XG59O1xuXG5cbi8qKlxuICogQXBwbHkgYW55IGhhbmRzaGFrZSBjb250cm9sIGhlYWRlcnMuXG4gKiBAcGFyYW0geyFDaGFubmVsUmVxdWVzdH0gcmVxdWVzdCBUaGUgdW5kZXJseWluZyByZXF1ZXN0IG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmFwcGx5Q29udHJvbEhlYWRlcnNfID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHhociA9IHJlcXVlc3QuZ2V0WGhyKCk7XG4gIGlmICh4aHIpIHtcbiAgICBjb25zdCBjbGllbnRQcm90b2NvbCA9XG4gICAgICAgIHhoci5nZXRTdHJlYW1pbmdSZXNwb25zZUhlYWRlcihXZWJDaGFubmVsLlhfQ0xJRU5UX1dJUkVfUFJPVE9DT0wpO1xuICAgIGlmIChjbGllbnRQcm90b2NvbCkge1xuICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5hcHBseUNsaWVudFByb3RvY29sKGNsaWVudFByb3RvY29sKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRIdHRwU2Vzc2lvbklkUGFyYW0oKSkge1xuICAgICAgY29uc3QgaHR0cFNlc3Npb25JZEhlYWRlciA9XG4gICAgICAgICAgeGhyLmdldFN0cmVhbWluZ1Jlc3BvbnNlSGVhZGVyKFdlYkNoYW5uZWwuWF9IVFRQX1NFU1NJT05fSUQpO1xuICAgICAgaWYgKGh0dHBTZXNzaW9uSWRIZWFkZXIpIHtcbiAgICAgICAgdGhpcy5zZXRIdHRwU2Vzc2lvbklkKGh0dHBTZXNzaW9uSWRIZWFkZXIpO1xuICAgICAgICAvLyB1cGRhdGUgdGhlIGNhY2hlZCB1cmlcbiAgICAgICAgY29uc3QgaHR0cFNlc3Npb25JZFBhcmFtID0gdGhpcy5nZXRIdHRwU2Vzc2lvbklkUGFyYW0oKTtcblxuICAgICAgICB0aGlzLmZvcndhcmRDaGFubmVsVXJpXy5zZXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaHR0cFNlc3Npb25JZFBhcmFtKSwgIC8vIG5ldmVyIG51bGxcbiAgICAgICAgICAgIGh0dHBTZXNzaW9uSWRIZWFkZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGFubmVsRGVidWdfLndhcm5pbmcoXG4gICAgICAgICAgICAnTWlzc2luZyBYX0hUVFBfU0VTU0lPTl9JRCBpbiB0aGUgaGFuZHNoYWtlIHJlc3BvbnNlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUHJvY2Vzc2VzIHRoZSBkYXRhIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKiBAcGFyYW0geyFBcnJheTwhQXJyYXk8Pz4+fSByZXNwQXJyYXkgVGhlIHJlc3BvbnNlIGFycmF5IHJldHVybmVkXG4gKiAgICAgYnkgdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7IUNoYW5uZWxSZXF1ZXN0fSByZXF1ZXN0IFRoZSB1bmRlcmx5aW5nIHJlcXVlc3Qgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25JbnB1dF8gPSBmdW5jdGlvbihyZXNwQXJyYXksIHJlcXVlc3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBiYXRjaCA9XG4gICAgICB0aGlzLmhhbmRsZXJfICYmIHRoaXMuaGFuZGxlcl8uY2hhbm5lbEhhbmRsZU11bHRpcGxlQXJyYXlzID8gW10gOiBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3BBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGxldCBuZXh0QXJyYXkgPSByZXNwQXJyYXlbaV07XG4gICAgdGhpcy5sYXN0QXJyYXlJZF8gPSBuZXh0QXJyYXlbMF07XG4gICAgbmV4dEFycmF5ID0gbmV4dEFycmF5WzFdO1xuICAgIGlmICh0aGlzLnN0YXRlXyA9PSBXZWJDaGFubmVsQmFzZS5TdGF0ZS5PUEVOSU5HKSB7XG4gICAgICBpZiAobmV4dEFycmF5WzBdID09ICdjJykge1xuICAgICAgICB0aGlzLnNpZF8gPSBuZXh0QXJyYXlbMV07XG4gICAgICAgIHRoaXMuaG9zdFByZWZpeF8gPSB0aGlzLmNvcnJlY3RIb3N0UHJlZml4KG5leHRBcnJheVsyXSk7XG5cbiAgICAgICAgY29uc3QgbmVnb3RpYXRlZFZlcnNpb24gPSBuZXh0QXJyYXlbM107XG4gICAgICAgIGlmIChuZWdvdGlhdGVkVmVyc2lvbiAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5jaGFubmVsVmVyc2lvbl8gPSBuZWdvdGlhdGVkVmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uaW5mbygnVkVSPScgKyB0aGlzLmNoYW5uZWxWZXJzaW9uXyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZWdvdGlhdGVkU2VydmVyVmVyc2lvbiA9IG5leHRBcnJheVs0XTtcbiAgICAgICAgaWYgKG5lZ290aWF0ZWRTZXJ2ZXJWZXJzaW9uICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNlcnZlclZlcnNpb25fID0gbmVnb3RpYXRlZFNlcnZlclZlcnNpb247XG4gICAgICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oJ1NWRVI9JyArIHRoaXMuc2VydmVyVmVyc2lvbl8pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ1ZFUj0yMlxuICAgICAgICBjb25zdCBzZXJ2ZXJLZWVwYWxpdmVNcyA9IG5leHRBcnJheVs1XTtcbiAgICAgICAgaWYgKHNlcnZlcktlZXBhbGl2ZU1zICE9IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBzZXJ2ZXJLZWVwYWxpdmVNcyA9PT0gJ251bWJlcicgJiYgc2VydmVyS2VlcGFsaXZlTXMgPiAwKSB7XG4gICAgICAgICAgY29uc3QgdGltZW91dCA9IDEuNSAqIHNlcnZlcktlZXBhbGl2ZU1zO1xuICAgICAgICAgIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0VGltZW91dE1zXyA9IHRpbWVvdXQ7XG4gICAgICAgICAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oJ2JhY2tDaGFubmVsUmVxdWVzdFRpbWVvdXRNc189JyArIHRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBseUNvbnRyb2xIZWFkZXJzXyhyZXF1ZXN0KTtcblxuICAgICAgICB0aGlzLnN0YXRlXyA9IFdlYkNoYW5uZWxCYXNlLlN0YXRlLk9QRU5FRDtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlcl8pIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZXJfLmNoYW5uZWxPcGVuZWQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZXRlY3RCdWZmZXJpbmdQcm94eV8pIHtcbiAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJ0dE1zXyA9IERhdGUubm93KCkgLSByZXF1ZXN0LmdldFJlcXVlc3RTdGFydFRpbWUoKTtcbiAgICAgICAgICB0aGlzLmNoYW5uZWxEZWJ1Z18uaW5mbyhcbiAgICAgICAgICAgICAgJ0hhbmRzaGFrZSBSVFQ6ICcgKyB0aGlzLmhhbmRzaGFrZVJ0dE1zXyArICdtcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGFydEJhY2tjaGFubmVsQWZ0ZXJIYW5kc2hha2VfKHJlcXVlc3QpO1xuXG4gICAgICAgIGlmICh0aGlzLm91dGdvaW5nTWFwc18ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZW5zdXJlRm9yd2FyZENoYW5uZWxfKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV4dEFycmF5WzBdID09ICdzdG9wJyB8fCBuZXh0QXJyYXlbMF0gPT0gJ2Nsb3NlJykge1xuICAgICAgICAvLyB0cmVhdCBjbG9zZSBhbHNvIGFzIGFuIGFib3J0XG4gICAgICAgIHRoaXMuc2lnbmFsRXJyb3JfKFdlYkNoYW5uZWxCYXNlLkVycm9yLlNUT1ApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuT1BFTkVEKSB7XG4gICAgICBpZiAobmV4dEFycmF5WzBdID09ICdzdG9wJyB8fCBuZXh0QXJyYXlbMF0gPT0gJ2Nsb3NlJykge1xuICAgICAgICBpZiAoYmF0Y2ggJiYgIShiYXRjaC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVyXy5jaGFubmVsSGFuZGxlTXVsdGlwbGVBcnJheXModGhpcywgYmF0Y2gpO1xuICAgICAgICAgIGJhdGNoLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRBcnJheVswXSA9PSAnc3RvcCcpIHtcbiAgICAgICAgICB0aGlzLnNpZ25hbEVycm9yXyhXZWJDaGFubmVsQmFzZS5FcnJvci5TVE9QKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0QXJyYXlbMF0gPT0gJ25vb3AnKSB7XG4gICAgICAgIC8vIGlnbm9yZSAtIG5vb3AgdG8ga2VlcCBjb25uZWN0aW9uIGhhcHB5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYmF0Y2gpIHtcbiAgICAgICAgICBiYXRjaC5wdXNoKG5leHRBcnJheSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5oYW5kbGVyXykge1xuICAgICAgICAgIHRoaXMuaGFuZGxlcl8uY2hhbm5lbEhhbmRsZUFycmF5KHRoaXMsIG5leHRBcnJheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgdXNlZnVsIGRhdGEgb24gdGhlIGJhY2stY2hhbm5lbCwgc28gY2xlYXIgaXRzIHJldHJ5XG4gICAgICAvLyBjb3VudC4gV2UgZG8gdGhpcyBiZWNhdXNlIGJhY2stY2hhbm5lbHMgYnkgZGVzaWduIGRvIG5vdCBjb21wbGV0ZVxuICAgICAgLy8gcXVpY2tseSwgc28gb24gYSBmbGFreSBjb25uZWN0aW9uIHdlIGNvdWxkIGhhdmUgbWFueSBmYWlsIHRvIGNvbXBsZXRlXG4gICAgICAvLyBmdWxseSBidXQgc3RpbGwgZGVsaXZlciBhIGxvdCBvZiBkYXRhIGJlZm9yZSB0aGV5IGZhaWwuIFdlIGRvbid0IHdhbnRcbiAgICAgIC8vIHRvIGNvdW50IHN1Y2ggZmFpbHVyZXMgdG93YXJkcyB0aGUgcmV0cnkgbGltaXQsIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudFxuICAgICAgLy8gdG8gZ2l2ZSB1cCBvbiBhIHNlc3Npb24gaWYgd2UgY2FuIHN0aWxsIHJlY2VpdmUgZGF0YS5cbiAgICAgIHRoaXMuYmFja0NoYW5uZWxSZXRyeUNvdW50XyA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChiYXRjaCAmJiAhKGJhdGNoLmxlbmd0aCA9PT0gMCkpIHtcbiAgICB0aGlzLmhhbmRsZXJfLmNoYW5uZWxIYW5kbGVNdWx0aXBsZUFycmF5cyh0aGlzLCBiYXRjaCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdGFydHMgdGhlIGJhY2tjaGFubmVsIGFmdGVyIHRoZSBoYW5kc2hha2UuXG4gKlxuICogQHBhcmFtIHshQ2hhbm5lbFJlcXVlc3R9IHJlcXVlc3QgVGhlIHVuZGVybHlpbmcgcmVxdWVzdCBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zdGFydEJhY2tjaGFubmVsQWZ0ZXJIYW5kc2hha2VfID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuYmFja0NoYW5uZWxVcmlfID0gdGhpcy5nZXRCYWNrQ2hhbm5lbFVyaShcbiAgICAgIHRoaXMuaG9zdFByZWZpeF8sIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodGhpcy5wYXRoXykpO1xuXG4gIGlmIChyZXF1ZXN0LmlzSW5pdGlhbFJlc3BvbnNlRGVjb2RlZCgpKSB7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdVcGdyYWRlIHRoZSBoYW5kc2hha2UgcmVxdWVzdCB0byBhIGJhY2tjaGFubmVsLicpO1xuICAgIHRoaXMuZm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbF8ucmVtb3ZlUmVxdWVzdChyZXF1ZXN0KTtcbiAgICByZXF1ZXN0LnJlc2V0VGltZW91dCh0aGlzLmJhY2tDaGFubmVsUmVxdWVzdFRpbWVvdXRNc18pO1xuICAgIHRoaXMuYmFja0NoYW5uZWxSZXF1ZXN0XyA9IHJlcXVlc3Q7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lbnN1cmVCYWNrQ2hhbm5lbF8oKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEhlbHBlciB0byBlbnN1cmUgdGhlIGNoYW5uZWwgaXMgaW4gdGhlIGV4cGVjdGVkIHN0YXRlLlxuICogQHBhcmFtIHsuLi5udW1iZXJ9IHZhcl9hcmdzIFRoZSBjaGFubmVsIG11c3QgYmUgaW4gb25lIG9mIHRoZSBpbmRpY2F0ZWRcbiAqICAgICBzdGF0ZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZW5zdXJlSW5TdGF0ZV8gPSBmdW5jdGlvbih2YXJfYXJncykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoXG4gICAgICBnb29nLmFycmF5LmNvbnRhaW5zKGFyZ3VtZW50cywgdGhpcy5zdGF0ZV8pLFxuICAgICAgJ1VuZXhwZWN0ZWQgY2hhbm5lbCBzdGF0ZTogJXMnLCB0aGlzLnN0YXRlXyk7XG59O1xuXG5cbi8qKlxuICogU2lnbmFscyBhbiBlcnJvciBoYXMgb2NjdXJyZWQuXG4gKiBAcGFyYW0ge1dlYkNoYW5uZWxCYXNlLkVycm9yfSBlcnJvciBUaGUgZXJyb3IgY29kZSBmb3IgdGhlIGZhaWx1cmUuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2lnbmFsRXJyb3JfID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18uaW5mbygnRXJyb3IgY29kZSAnICsgZXJyb3IpO1xuICBpZiAoZXJyb3IgPT0gV2ViQ2hhbm5lbEJhc2UuRXJyb3IuUkVRVUVTVF9GQUlMRUQpIHtcbiAgICAvLyBDcmVhdGUgYSBzZXBhcmF0ZSBJbnRlcm5ldCBjb25uZWN0aW9uIHRvIGNoZWNrXG4gICAgLy8gaWYgaXQncyBhIHNlcnZlciBlcnJvciBvciB1c2VyJ3MgbmV0d29yayBlcnJvci5cbiAgICBsZXQgaW1hZ2VVcmkgPSBudWxsO1xuICAgIGlmICh0aGlzLmhhbmRsZXJfKSB7XG4gICAgICBpbWFnZVVyaSA9IHRoaXMuaGFuZGxlcl8uZ2V0TmV0d29ya1Rlc3RJbWFnZVVyaSh0aGlzKTtcbiAgICB9XG4gICAgbmV0VXRpbHMudGVzdE5ldHdvcmsoZ29vZy5iaW5kKHRoaXMudGVzdE5ldHdvcmtDYWxsYmFja18sIHRoaXMpLCBpbWFnZVVyaSk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5FUlJPUl9PVEhFUik7XG4gIH1cbiAgdGhpcy5vbkVycm9yXyhlcnJvcik7XG59O1xuXG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIG5ldFV0aWxzLnRlc3ROZXR3b3JrIGR1cmluZyBlcnJvciBoYW5kbGluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbmV0d29ya1VwIFdoZXRoZXIgdGhlIG5ldHdvcmsgaXMgdXAuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUudGVzdE5ldHdvcmtDYWxsYmFja18gPSBmdW5jdGlvbihuZXR3b3JrVXApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAobmV0d29ya1VwKSB7XG4gICAgdGhpcy5jaGFubmVsRGVidWdfLmluZm8oJ1N1Y2Nlc3NmdWxseSBwaW5nZWQgZ29vZ2xlLmNvbScpO1xuICAgIHJlcXVlc3RTdGF0cy5ub3RpZnlTdGF0RXZlbnQocmVxdWVzdFN0YXRzLlN0YXQuRVJST1JfT1RIRVIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2hhbm5lbERlYnVnXy5pbmZvKCdGYWlsZWQgdG8gcGluZyBnb29nbGUuY29tJyk7XG4gICAgcmVxdWVzdFN0YXRzLm5vdGlmeVN0YXRFdmVudChyZXF1ZXN0U3RhdHMuU3RhdC5FUlJPUl9ORVRXT1JLKTtcbiAgICAvLyBEbyBub3QgY2FsbCBvbkVycm9yXyBhZ2FpbiB0byBlbGltaW5hdGUgZHVwbGljYXRlZCBFcnJvciBldmVudHMuXG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBtZXNzYWdlcyBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IHNlbnQgZnJvbSB0aGUgcXVldWUuXG4gKiBAcGFyYW0geyFDaGFubmVsUmVxdWVzdH0gcmVxdWVzdCBUaGUgcmVxdWVzdCBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5vblN1Y2Nlc3NfID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLmhhbmRsZXJfKSB7XG4gICAgdGhpcy5oYW5kbGVyXy5jaGFubmVsU3VjY2Vzcyh0aGlzLCByZXF1ZXN0KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENhbGxlZCB3aGVuIHdlJ3ZlIGRldGVybWluZWQgdGhlIGZpbmFsIGVycm9yIGZvciBhIGNoYW5uZWwuIEl0IGNsb3NlcyB0aGVcbiAqIG5vdGlmaWVycyB0aGUgaGFuZGxlciBvZiB0aGUgZXJyb3IgYW5kIGNsb3NlcyB0aGUgY2hhbm5lbC5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2UuRXJyb3J9IGVycm9yICBUaGUgZXJyb3IgY29kZSBmb3IgdGhlIGZhaWx1cmUuXG4gKiBAcHJpdmF0ZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUub25FcnJvcl8gPSBmdW5jdGlvbihlcnJvcikge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZygnSHR0cENoYW5uZWw6IGVycm9yIC0gJyArIGVycm9yKTtcbiAgdGhpcy5zdGF0ZV8gPSBXZWJDaGFubmVsQmFzZS5TdGF0ZS5DTE9TRUQ7XG4gIGlmICh0aGlzLmhhbmRsZXJfKSB7XG4gICAgdGhpcy5oYW5kbGVyXy5jaGFubmVsRXJyb3IodGhpcywgZXJyb3IpO1xuICB9XG4gIHRoaXMub25DbG9zZV8oKTtcbiAgdGhpcy5jYW5jZWxSZXF1ZXN0c18oKTtcbn07XG5cblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGUgY2hhbm5lbCBoYXMgYmVlbiBjbG9zZWQuIEl0IG5vdGlmaWVycyB0aGUgaGFuZGxlciBvZiB0aGVcbiAqIGV2ZW50LCBhbmQgcmVwb3J0cyBhbnkgcGVuZGluZyBvciB1bmRlbGl2ZXJlZCBtYXBzLlxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLm9uQ2xvc2VfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5zdGF0ZV8gPSBXZWJDaGFubmVsQmFzZS5TdGF0ZS5DTE9TRUQ7XG4gIHRoaXMubm9uQWNrZWRNYXBzQXRDaGFubmVsQ2xvc2VfID0gW107XG4gIGlmICh0aGlzLmhhbmRsZXJfKSB7XG4gICAgY29uc3QgcGVuZGluZ01lc3NhZ2VzID1cbiAgICAgICAgdGhpcy5mb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sXy5nZXRQZW5kaW5nTWVzc2FnZXMoKTtcblxuICAgIGlmIChwZW5kaW5nTWVzc2FnZXMubGVuZ3RoID09IDAgJiYgdGhpcy5vdXRnb2luZ01hcHNfLmxlbmd0aCA9PSAwKSB7XG4gICAgICB0aGlzLmhhbmRsZXJfLmNoYW5uZWxDbG9zZWQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbm5lbERlYnVnXy5kZWJ1ZyhcbiAgICAgICAgICAoKSA9PiAnTnVtYmVyIG9mIHVuZGVsaXZlcmVkIG1hcHMnICtcbiAgICAgICAgICAgICAgJywgcGVuZGluZzogJyArIHBlbmRpbmdNZXNzYWdlcy5sZW5ndGggK1xuICAgICAgICAgICAgICAnLCBvdXRnb2luZzogJyArIHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGgpO1xuXG4gICAgICBnb29nLmFycmF5LmV4dGVuZCh0aGlzLm5vbkFja2VkTWFwc0F0Q2hhbm5lbENsb3NlXywgcGVuZGluZ01lc3NhZ2VzKTtcbiAgICAgIGdvb2cuYXJyYXkuZXh0ZW5kKHRoaXMubm9uQWNrZWRNYXBzQXRDaGFubmVsQ2xvc2VfLCB0aGlzLm91dGdvaW5nTWFwc18pO1xuXG4gICAgICB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmNsZWFyUGVuZGluZ01lc3NhZ2VzKCk7XG5cbiAgICAgIGNvbnN0IGNvcHlPZlVuZGVsaXZlcmVkTWFwcyA9IGdvb2cuYXJyYXkuY2xvbmUodGhpcy5vdXRnb2luZ01hcHNfKTtcbiAgICAgIHRoaXMub3V0Z29pbmdNYXBzXy5sZW5ndGggPSAwO1xuXG4gICAgICB0aGlzLmhhbmRsZXJfLmNoYW5uZWxDbG9zZWQodGhpcywgcGVuZGluZ01lc3NhZ2VzLCBjb3B5T2ZVbmRlbGl2ZXJlZE1hcHMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcmV0dXJuIHshQXJyYXk8IVdpcmUuUXVldWVkTWFwPn0gUmV0dXJucyB0aGUgbGlzdCBvZiBub24tYWNrZWQgbWFwcywgYm90aFxuICogZHVyaW5nIGFuIGFjdGl2ZSBjaGFubmVsIG9yIGFmdGVyIHRoZSBjaGFubmVsIGlzIGNsb3NlZC4gUmVmZXIgdG8gdGhlXG4gKiBgZ2V0Tm9uQWNrZWRNZXNzYWdlcygpYCBBUEkgZm9yIGRlZmluaXRpb25zIG9mIG5vbi1hY2tlZCBtZXNzYWdlcy5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldE5vbkFja2VkTWFwcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zdGF0ZV8gPT0gV2ViQ2hhbm5lbEJhc2UuU3RhdGUuQ0xPU0VEKSB7XG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgICAgdGhpcy5ub25BY2tlZE1hcHNBdENoYW5uZWxDbG9zZV8gIT0gbnVsbCxcbiAgICAgICAgJ25vbkFja2VkTWFwc0F0Q2hhbm5lbENsb3NlXyBpcyBub3Qgc2V0IGFmdGVyIGNoYW5uZWwgY2xvc2UuJyk7XG4gICAgcmV0dXJuIHRoaXMubm9uQWNrZWRNYXBzQXRDaGFubmVsQ2xvc2VfO1xuICB9XG5cbiAgLy8gVGhlIHVuZGVybHlpbmcgbWVzc2FnZSBvYmplY3RzIGFyZSBub3QgY2xvbmVkIGFuZCB0aHVzIGV4cG9zZXMgYSBtdXRhYmlsaXR5XG4gIC8vIHJpc2ssIGJ1dCBpcyBjaG9zZW4gdG8gbWFrZSBzdHJpY3QgZXF1YWxpdHkgKGkuZS4gPT09KSBjaGVja3MgcG9zc2libGUgZm9yXG4gIC8vIGNhbGxlcnMuXG4gIGxldCB1bkFja2VkTWFwcyA9IFtdO1xuICBnb29nLmFycmF5LmV4dGVuZChcbiAgICAgIHVuQWNrZWRNYXBzLCB0aGlzLmZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2xfLmdldFBlbmRpbmdNZXNzYWdlcygpKTtcbiAgZ29vZy5hcnJheS5leHRlbmQodW5BY2tlZE1hcHMsIHRoaXMub3V0Z29pbmdNYXBzXyk7XG5cbiAgcmV0dXJuIHVuQWNrZWRNYXBzO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuZ2V0Rm9yd2FyZENoYW5uZWxVcmkgPSBmdW5jdGlvbihwYXRoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgdXJpID0gdGhpcy5jcmVhdGVEYXRhVXJpKG51bGwsIHBhdGgpO1xuICB0aGlzLmNoYW5uZWxEZWJ1Z18uZGVidWcoJ0dldEZvcndhcmRDaGFubmVsVXJpOiAnICsgdXJpKTtcbiAgcmV0dXJuIHVyaTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmdldENvbm5lY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmNvbm5TdGF0ZV87XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5nZXRCYWNrQ2hhbm5lbFVyaSA9IGZ1bmN0aW9uKGhvc3RQcmVmaXgsIHBhdGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCB1cmkgPSB0aGlzLmNyZWF0ZURhdGFVcmkoXG4gICAgICB0aGlzLnNob3VsZFVzZVNlY29uZGFyeURvbWFpbnMoKSA/IGhvc3RQcmVmaXggOiBudWxsLCBwYXRoKTtcbiAgdGhpcy5jaGFubmVsRGVidWdfLmRlYnVnKCdHZXRCYWNrQ2hhbm5lbFVyaTogJyArIHVyaSk7XG4gIHJldHVybiB1cmk7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5jcmVhdGVEYXRhVXJpID0gZnVuY3Rpb24oXG4gICAgaG9zdFByZWZpeCwgcGF0aCwgb3B0X292ZXJyaWRlUG9ydCkge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCB1cmkgPSBnb29nLlVyaS5wYXJzZShwYXRoKTtcbiAgY29uc3QgdXJpQWJzb2x1dGUgPSAodXJpLmdldERvbWFpbigpICE9ICcnKTtcbiAgaWYgKHVyaUFic29sdXRlKSB7XG4gICAgaWYgKGhvc3RQcmVmaXgpIHtcbiAgICAgIHVyaS5zZXREb21haW4oaG9zdFByZWZpeCArICcuJyArIHVyaS5nZXREb21haW4oKSk7XG4gICAgfVxuXG4gICAgdXJpLnNldFBvcnQob3B0X292ZXJyaWRlUG9ydCB8fCB1cmkuZ2V0UG9ydCgpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsb2NhdGlvblBhZ2UgPSBnb29nLmdsb2JhbC5sb2NhdGlvbjtcbiAgICBsZXQgaG9zdE5hbWU7XG4gICAgaWYgKGhvc3RQcmVmaXgpIHtcbiAgICAgIGhvc3ROYW1lID0gaG9zdFByZWZpeCArICcuJyArIGxvY2F0aW9uUGFnZS5ob3N0bmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9zdE5hbWUgPSBsb2NhdGlvblBhZ2UuaG9zdG5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgcG9ydCA9IG9wdF9vdmVycmlkZVBvcnQgfHwgK2xvY2F0aW9uUGFnZS5wb3J0O1xuXG4gICAgdXJpID0gZ29vZy5VcmkuY3JlYXRlKGxvY2F0aW9uUGFnZS5wcm90b2NvbCwgbnVsbCwgaG9zdE5hbWUsIHBvcnQsIHBhdGgpO1xuICB9XG5cbiAgY29uc3QgcGFyYW0gPSB0aGlzLmdldEh0dHBTZXNzaW9uSWRQYXJhbSgpO1xuICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0SHR0cFNlc3Npb25JZCgpO1xuICBpZiAocGFyYW0gJiYgdmFsdWUpIHtcbiAgICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUocGFyYW0sIHZhbHVlKTtcbiAgfVxuXG4gIC8vIEFkZCB0aGUgcHJvdG9jb2wgdmVyc2lvbiB0byB0aGUgVVJJLlxuICB1cmkuc2V0UGFyYW1ldGVyVmFsdWUoJ1ZFUicsIHRoaXMuY2hhbm5lbFZlcnNpb25fKTtcblxuICB0aGlzLmFkZEFkZGl0aW9uYWxQYXJhbXNfKHVyaSk7XG5cbiAgcmV0dXJuIHVyaTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKiBAcGFyYW0gez9zdHJpbmd9IGhvc3RQcmVmaXggVGhlIGhvc3QgcHJlZml4LCBpZiB3ZSBuZWVkIGFuIFhocklvIG9iamVjdFxuICogICAgIGNhcGFibGUgb2YgY2FsbGluZyBhIHNlY29uZGFyeSBkb21haW4uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBpc1N0cmVhbWluZyBXaGV0aGVyIG9yIG5vdCBmZXRjaC9zdHJlYW1zIGFyZSBlbmFibGVkIGZvclxuICogICAgIHRoZSB1bmRlcmx5aW5nIEhUVFAgcmVxdWVzdC5cbiAqIEByZXR1cm4geyFnb29nLm5ldC5YaHJJb30gQSBuZXcgWGhySW8gb2JqZWN0LlxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuY3JlYXRlWGhySW8gPSBmdW5jdGlvbihob3N0UHJlZml4LCBpc1N0cmVhbWluZykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChob3N0UHJlZml4ICYmICF0aGlzLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJzXykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBjcmVhdGUgc2Vjb25kYXJ5IGRvbWFpbiBjYXBhYmxlIFhocklvIG9iamVjdC4nKTtcbiAgfVxuICBsZXQgeGhyO1xuICBpZiAoaXNTdHJlYW1pbmcgJiYgdGhpcy51c2VzRmV0Y2hTdHJlYW1zXyAmJiAhdGhpcy54bWxIdHRwRmFjdG9yeV8pIHtcbiAgICB4aHIgPSBuZXcgZ29vZy5uZXQuWGhySW8oXG4gICAgICAgIG5ldyBnb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5KHtzdHJlYW1CaW5hcnlDaHVua3M6IHRydWV9KSk7XG4gIH0gZWxzZSB7XG4gICAgeGhyID0gbmV3IGdvb2cubmV0LlhocklvKHRoaXMueG1sSHR0cEZhY3RvcnlfKTtcbiAgfVxuICB4aHIuc2V0V2l0aENyZWRlbnRpYWxzKHRoaXMuc3VwcG9ydHNDcm9zc0RvbWFpblhocnNfKTtcbiAgcmV0dXJuIHhocjtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2UucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEhdGhpcy5oYW5kbGVyXyAmJiB0aGlzLmhhbmRsZXJfLmlzQWN0aXZlKHRoaXMpO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZS5wcm90b3R5cGUuc2hvdWxkVXNlU2Vjb25kYXJ5RG9tYWlucyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJzXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIChvdmVyd3JpdGVzKSB0aGUgZm9yd2FyZCBjaGFubmVsIGZsdXNoIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQuXG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS5zZXRGb3J3YXJkQ2hhbm5lbEZsdXNoQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZm9yd2FyZENoYW5uZWxGbHVzaGVkQ2FsbGJhY2tfID0gY2FsbGJhY2s7XG59O1xuXG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIGNoYW5uZWwgaGFuZGxlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKi9cbldlYkNoYW5uZWxCYXNlLkhhbmRsZXIgPSBmdW5jdGlvbigpIHt9O1xuXG5cbi8qKlxuICogQ2FsbGJhY2sgaGFuZGxlciBmb3Igd2hlbiBhIGJhdGNoIG9mIHJlc3BvbnNlIGFycmF5cyBpcyByZWNlaXZlZCBmcm9tIHRoZVxuICogc2VydmVyLiBXaGVuIG51bGwsIGJhdGNoZWQgZGlzcGF0Y2hpbmcgaXMgZGlzYWJsZWQuXG4gKiBAdHlwZSB7P2Z1bmN0aW9uKCFXZWJDaGFubmVsQmFzZSwgIUFycmF5PCFBcnJheTw/Pj4pfVxuICovXG5XZWJDaGFubmVsQmFzZS5IYW5kbGVyLnByb3RvdHlwZS5jaGFubmVsSGFuZGxlTXVsdGlwbGVBcnJheXMgPSBudWxsO1xuXG5cbi8qKlxuICogV2hldGhlciBpdCdzIG9rYXkgdG8gbWFrZSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci4gQSBoYW5kbGVyIGNhbiByZXR1cm5cbiAqIGZhbHNlIGlmIHRoZSBjaGFubmVsIHNob3VsZCBmYWlsLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHVzZXIgaGFzIGxvZ2dlZCBvdXQsXG4gKiB0aGUgaGFuZGxlciBtYXkgd2FudCBhbGwgcmVxdWVzdHMgdG8gZmFpbCBpbW1lZGlhdGVseS5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKiBAcmV0dXJuIHtXZWJDaGFubmVsQmFzZS5FcnJvcn0gQW4gZXJyb3IgY29kZS4gVGhlIGNvZGUgc2hvdWxkXG4gKiByZXR1cm4gV2ViQ2hhbm5lbEJhc2UuRXJyb3IuT0sgdG8gaW5kaWNhdGUgaXQncyBva2F5LiBBbnkgb3RoZXJcbiAqIGVycm9yIGNvZGUgd2lsbCBjYXVzZSBhIGZhaWx1cmUuXG4gKi9cbldlYkNoYW5uZWxCYXNlLkhhbmRsZXIucHJvdG90eXBlLm9rVG9NYWtlUmVxdWVzdCA9IGZ1bmN0aW9uKGNoYW5uZWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gV2ViQ2hhbm5lbEJhc2UuRXJyb3IuT0s7XG59O1xuXG5cbi8qKlxuICogSW5kaWNhdGVzIHRoZSBXZWJDaGFubmVsIGhhcyBzdWNjZXNzZnVsbHkgbmVnb3RpYXRlZCB3aXRoIHRoZSBzZXJ2ZXJcbiAqIGFuZCBjYW4gbm93IHNlbmQgYW5kIHJlY2VpdmUgZGF0YS5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKi9cbldlYkNoYW5uZWxCYXNlLkhhbmRsZXIucHJvdG90eXBlLmNoYW5uZWxPcGVuZWQgPSBmdW5jdGlvbihjaGFubmVsKSB7fTtcblxuXG4vKipcbiAqIE5ldyBpbnB1dCBpcyBhdmFpbGFibGUgZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBwcm9jZXNzLlxuICpcbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKiBAcGFyYW0ge0FycmF5PD8+fSBhcnJheSBUaGUgZGF0YSBhcnJheS5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UuSGFuZGxlci5wcm90b3R5cGUuY2hhbm5lbEhhbmRsZUFycmF5ID0gZnVuY3Rpb24oXG4gICAgY2hhbm5lbCwgYXJyYXkpIHt9O1xuXG5cbi8qKlxuICogSW5kaWNhdGVzIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBzZW50IG9uIHRoZSBjaGFubmVsLlxuICpcbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKiBAcGFyYW0geyFDaGFubmVsUmVxdWVzdH0gcmVxdWVzdCBUaGUgcmVxdWVzdCBvYmplY3QgdGhhdCBjb250YWluc1xuICogICAgIHRoZSBwZW5kaW5nIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBkZWxpdmVyZWQgdG8gdGhlIHNlcnZlci5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UuSGFuZGxlci5wcm90b3R5cGUuY2hhbm5lbFN1Y2Nlc3MgPSBmdW5jdGlvbihjaGFubmVsLCByZXF1ZXN0KSB7fTtcblxuXG4vKipcbiAqIEluZGljYXRlcyBhbiBlcnJvciBvY2N1cnJlZCBvbiB0aGUgV2ViQ2hhbm5lbC5cbiAqXG4gKiBAcGFyYW0ge1dlYkNoYW5uZWxCYXNlfSBjaGFubmVsIFRoZSBjaGFubmVsLlxuICogQHBhcmFtIHtXZWJDaGFubmVsQmFzZS5FcnJvcn0gZXJyb3IgVGhlIGVycm9yIGNvZGUuXG4gKi9cbldlYkNoYW5uZWxCYXNlLkhhbmRsZXIucHJvdG90eXBlLmNoYW5uZWxFcnJvciA9IGZ1bmN0aW9uKGNoYW5uZWwsIGVycm9yKSB7fTtcblxuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgV2ViQ2hhbm5lbCBpcyBjbG9zZWQuIEFsc28gbm90aWZpZXMgYWJvdXQgd2hpY2ggbWFwcyxcbiAqIGlmIGFueSwgdGhhdCBtYXkgbm90IGhhdmUgYmVlbiBkZWxpdmVyZWQgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKiBAcGFyYW0ge0FycmF5PFdpcmUuUXVldWVkTWFwPj19IG9wdF9wZW5kaW5nTWFwcyBUaGVcbiAqICAgICBhcnJheSBvZiBwZW5kaW5nIG1hcHMsIHdoaWNoIG1heSBvciBtYXkgbm90IGhhdmUgYmVlbiBkZWxpdmVyZWQgdG8gdGhlXG4gKiAgICAgc2VydmVyLlxuICogQHBhcmFtIHtBcnJheTxXaXJlLlF1ZXVlZE1hcD49fSBvcHRfdW5kZWxpdmVyZWRNYXBzXG4gKiAgICAgVGhlIGFycmF5IG9mIHVuZGVsaXZlcmVkIG1hcHMsIHdoaWNoIGhhdmUgZGVmaW5pdGVseSBub3QgYmVlbiBkZWxpdmVyZWRcbiAqICAgICB0byB0aGUgc2VydmVyLlxuICovXG5XZWJDaGFubmVsQmFzZS5IYW5kbGVyLnByb3RvdHlwZS5jaGFubmVsQ2xvc2VkID0gZnVuY3Rpb24oXG4gICAgY2hhbm5lbCwgb3B0X3BlbmRpbmdNYXBzLCBvcHRfdW5kZWxpdmVyZWRNYXBzKSB7fTtcblxuXG4vKipcbiAqIEdldHMgYW55IHBhcmFtZXRlcnMgdGhhdCBzaG91bGQgYmUgYWRkZWQgYXQgdGhlIHRpbWUgYW5vdGhlciBjb25uZWN0aW9uIGlzXG4gKiBtYWRlIHRvIHRoZSBzZXJ2ZXIuXG4gKiBAcGFyYW0ge1dlYkNoYW5uZWxCYXNlfSBjaGFubmVsIFRoZSBjaGFubmVsLlxuICogQHJldHVybiB7IU9iamVjdH0gRXh0cmEgcGFyYW1ldGVyIGtleXMgYW5kIHZhbHVlcyB0byBhZGQgdG8gdGhlIHJlcXVlc3RzLlxuICovXG5XZWJDaGFubmVsQmFzZS5IYW5kbGVyLnByb3RvdHlwZS5nZXRBZGRpdGlvbmFsUGFyYW1zID0gZnVuY3Rpb24oY2hhbm5lbCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB7fTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBVUkkgb2YgYW4gaW1hZ2UgdGhhdCBjYW4gYmUgdXNlZCB0byB0ZXN0IG5ldHdvcmsgY29ubmVjdGl2aXR5LlxuICogQHBhcmFtIHtXZWJDaGFubmVsQmFzZX0gY2hhbm5lbCBUaGUgY2hhbm5lbC5cbiAqIEByZXR1cm4ge2dvb2cuVXJpP30gQSBjdXN0b20gVVJJIHRvIGxvYWQgZm9yIHRoZSBuZXR3b3JrIHRlc3QuXG4gKi9cbldlYkNoYW5uZWxCYXNlLkhhbmRsZXIucHJvdG90eXBlLmdldE5ldHdvcmtUZXN0SW1hZ2VVcmkgPSBmdW5jdGlvbihjaGFubmVsKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbi8qKlxuICogR2V0cyB3aGV0aGVyIHRoaXMgY2hhbm5lbCBpcyBjdXJyZW50bHkgYWN0aXZlLiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZVxuICogbGVuZ3RoIG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgcmV0cnlpbmcuXG4gKiBAcGFyYW0ge1dlYkNoYW5uZWxCYXNlfSBjaGFubmVsIFRoZSBjaGFubmVsLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY2hhbm5lbCBpcyBjdXJyZW50bHkgYWN0aXZlLlxuICovXG5XZWJDaGFubmVsQmFzZS5IYW5kbGVyLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKGNoYW5uZWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBjaGFubmVsIHVzZXMgV0hBVFdHIEZldGNoL3N0cmVhbXMuXG4gKiBAb3ZlcnJpZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbldlYkNoYW5uZWxCYXNlLnByb3RvdHlwZS51c2VzRmV0Y2hTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMudXNlc0ZldGNoU3RyZWFtc187XG59O1xuXG5cbi8qKlxuICogQ2FsbGVkIGJ5IHRoZSBjaGFubmVsIGlmIGVudW1lcmF0aW9uIG9mIHRoZSBtYXAgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSB7V2ViQ2hhbm5lbEJhc2V9IGNoYW5uZWwgVGhlIGNoYW5uZWwuXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdGhhdCBjYW4ndCBiZSBlbnVtZXJhdGVkLlxuICovXG5XZWJDaGFubmVsQmFzZS5IYW5kbGVyLnByb3RvdHlwZS5iYWRNYXBFcnJvciA9IGZ1bmN0aW9uKGNoYW5uZWwsIG1hcCkge307XG5cblxuLyoqXG4gKiBBbGxvd3MgdGhlIGhhbmRsZXIgdG8gb3ZlcnJpZGUgYSBob3N0IHByZWZpeCBwcm92aWRlZCBieSB0aGUgc2VydmVyLiBXaWxsXG4gKiBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGNoYW5uZWwgaGFzIHJlY2VpdmVkIHN1Y2ggYSBwcmVmaXggYW5kIGlzIGNvbnNpZGVyaW5nXG4gKiBpdHMgdXNlLlxuICogQHBhcmFtIHs/c3RyaW5nfSBzZXJ2ZXJIb3N0UHJlZml4IFRoZSBob3N0IHByZWZpeCBwcm92aWRlZCBieSB0aGUgc2VydmVyLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGhvc3QgcHJlZml4IHRoZSBjbGllbnQgc2hvdWxkIHVzZS5cbiAqL1xuV2ViQ2hhbm5lbEJhc2UuSGFuZGxlci5wcm90b3R5cGUuY29ycmVjdEhvc3RQcmVmaXggPSBmdW5jdGlvbihcbiAgICBzZXJ2ZXJIb3N0UHJlZml4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHNlcnZlckhvc3RQcmVmaXg7XG59O1xufSk7ICAvLyBnb29nLnNjb3BlXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2xhc3MgZm9yIHBhcnNpbmcgYW5kIGZvcm1hdHRpbmcgVVJJcy5cbiAqXG4gKiBUaGlzIHBhY2thZ2UgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgdGhlIENsb3N1cmUgVVJMIHBhY2thZ2UgKGdvb2cudXJsKVxuICogd2hlbiBtYW5pcHVsYXRpbmcgVVJJcyBmb3IgdXNlIGJ5IGEgYnJvd3Nlci4gVGhpcyBwYWNrYWdlIHVzZXMgcmVndWxhclxuICogZXhwcmVzc2lvbnMgdG8gcGFyc2UgYSBwb3RlbnRpYWwgVVJJIHdoaWNoIGNhbiBmYWxsIG91dCBvZiBzeW5jIHdpdGggaG93IGFcbiAqIGJyb3dzZXIgd2lsbCBhY3R1YWxseSBpbnRlcnByZXQgdGhlIFVSSS4gU2VlXG4gKiBgZ29vZy51cmkudXRpbHMuc2V0VXJsUGFja2FnZVN1cHBvcnRMb2dnaW5nSGFuZGxlcmAgZm9yIG9uZSB3YXkgdG8gaWRlbnRpZnlcbiAqIFVSSXMgdGhhdCBzaG91bGQgaW5zdGVhZCBiZSBwYXJzZWQgdXNpbmcgdGhlIFVSTCBwYWNrYWdlLlxuICpcbiAqIFVzZSBnb29nLlVyaShzdHJpbmcpIHRvIHBhcnNlIGEgVVJJIHN0cmluZy4gIFVzZSBnb29nLlVyaS5jcmVhdGUoLi4uKSB0b1xuICogY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBnb29nLlVyaSBvYmplY3QgZnJvbSBVcmkgcGFydHMuXG4gKlxuICogZS5nOiA8Y29kZT52YXIgbXlVcmkgPSBuZXcgZ29vZy5Vcmkod2luZG93LmxvY2F0aW9uKTs8L2NvZGU+XG4gKlxuICogSW1wbGVtZW50cyBSRkMgMzk4NiBmb3IgcGFyc2luZy9mb3JtYXR0aW5nIFVSSXMuXG4gKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dFxuICpcbiAqIFNvbWUgY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSB0byB0aGUgaW50ZXJmYWNlIChtb3JlIGxpa2UgLk5FVHMpLCB0aG91Z2ggdGhlXG4gKiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBpcyBub3cgb2YgdW4tZW5jb2RlZCBwYXJ0cywgdGhpcyB3aWxsIGNoYW5nZSB0aGVcbiAqIGJlaGF2aW9yIHNsaWdodGx5LlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5VcmknKTtcbmdvb2cucHJvdmlkZSgnZ29vZy5VcmkuUXVlcnlEYXRhJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hcnJheScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5jb2xsZWN0aW9ucy5tYXBzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuc3RydWN0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVyaS51dGlscycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnVyaS51dGlscy5TdGFuZGFyZFF1ZXJ5UGFyYW0nKTtcblxuXG5cbi8qKlxuICogVGhpcyBjbGFzcyBjb250YWlucyBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciB0aGUgcGFydHMgb2YgdGhlIFVSSS5cbiAqIFRoZSA8Y29kZT5nZXRYeXo8L2NvZGU+Lzxjb2RlPnNldFh5ejwvY29kZT4gbWV0aG9kcyByZXR1cm4gdGhlIGRlY29kZWQgcGFydFxuICogLS0gc288Y29kZT5nb29nLlVyaS5wYXJzZSgnL2ZvbyUyMGJhcicpLmdldFBhdGgoKTwvY29kZT4gd2lsbCByZXR1cm4gdGhlXG4gKiBkZWNvZGVkIHBhdGgsIDxjb2RlPi9mb28gYmFyPC9jb2RlPi5cbiAqXG4gKiBSZXNlcnZlZCBjaGFyYWN0ZXJzIChzZWUgUkZDIDM5ODYgc2VjdGlvbiAyLjIpIGNhbiBiZSBwcmVzZW50IGluXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZm9ybSBpbiBzY2hlbWUsIGRvbWFpbiwgYW5kIHBhdGggVVJJIGNvbXBvbmVudHMgYW5kXG4gKiB3aWxsIG5vdCBiZSBhdXRvLWRlY29kZWQuIEZvciBleGFtcGxlOlxuICogPGNvZGU+Z29vZy5VcmkucGFyc2UoJ3JlbCU2MXRpdmUvcGF0aCUyZnRvL3Jlc291cmNlJykuZ2V0UGF0aCgpPC9jb2RlPiB3aWxsXG4gKiByZXR1cm4gPGNvZGU+cmVsYXRpdmUvcGF0aCUyZnRvL3Jlc291cmNlPC9jb2RlPi5cbiAqXG4gKiBUaGUgY29uc3RydWN0b3IgYWNjZXB0cyBhbiBvcHRpb25hbCB1bnBhcnNlZCwgcmF3IFVSSSBzdHJpbmcuICBUaGUgcGFyc2VyXG4gKiBpcyByZWxheGVkLCBzbyBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCBhcmVuJ3QgZXNjYXBlZCBidXQgZG9uJ3QgY2F1c2VcbiAqIGFtYmlndWl0aWVzIHdpbGwgbm90IGNhdXNlIHBhcnNlIGZhaWx1cmVzLlxuICpcbiAqIEFsbCBzZXR0ZXJzIHJldHVybiA8Y29kZT50aGlzPC9jb2RlPiBhbmQgc28gbWF5IGJlIGNoYWluZWQsIGEgbGFcbiAqIDxjb2RlPmdvb2cuVXJpLnBhcnNlKCcvZm9vJykuc2V0RnJhZ21lbnQoJ3BhcnQnKS50b1N0cmluZygpPC9jb2RlPi5cbiAqXG4gKiBAcGFyYW0geyo9fSBvcHRfdXJpIE9wdGlvbmFsIHN0cmluZyBVUkkgdG8gcGFyc2VcbiAqICAgICAgICAodXNlIGdvb2cuVXJpLmNyZWF0ZSgpIHRvIGNyZWF0ZSBhIFVSSSBmcm9tIHBhcnRzKSwgb3IgaWZcbiAqICAgICAgICBhIGdvb2cuVXJpIGlzIHBhc3NlZCwgYSBjbG9uZSBpcyBjcmVhdGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lnbm9yZUNhc2UgSWYgdHJ1ZSwgI2dldFBhcmFtZXRlclZhbHVlIHdpbGwgaWdub3JlXG4gKiB0aGUgY2FzZSBvZiB0aGUgcGFyYW1ldGVyIG5hbWUuXG4gKlxuICogQHRocm93cyBVUklFcnJvciBJZiBvcHRfdXJpIGlzIHByb3ZpZGVkIGFuZCBVUkkgaXMgbWFsZm9ybWVkICh0aGF0IGlzLFxuICogICAgIGlmIGRlY29kZVVSSUNvbXBvbmVudCBmYWlscyBvbiBhbnkgb2YgdGhlIFVSSSBjb21wb25lbnRzKS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICovXG5nb29nLlVyaSA9IGZ1bmN0aW9uKG9wdF91cmksIG9wdF9pZ25vcmVDYXNlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFNjaGVtZSBzdWNoIGFzIFwiaHR0cFwiLlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5zY2hlbWVfID0gJyc7XG5cbiAgLyoqXG4gICAqIFVzZXIgY3JlZGVudGlhbHMgaW4gdGhlIGZvcm0gXCJ1c2VybmFtZTpwYXNzd29yZFwiLlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy51c2VySW5mb18gPSAnJztcblxuICAvKipcbiAgICogRG9tYWluIHBhcnQsIGUuZy4gXCJ3d3cuZ29vZ2xlLmNvbVwiLlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5kb21haW5fID0gJyc7XG5cbiAgLyoqXG4gICAqIFBvcnQsIGUuZy4gODA4MC5cbiAgICogQHByaXZhdGUgez9udW1iZXJ9XG4gICAqL1xuICB0aGlzLnBvcnRfID0gbnVsbDtcblxuICAvKipcbiAgICogUGF0aCwgZS5nLiBcIi90ZXN0cy9pbWcucG5nXCIuXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnBhdGhfID0gJyc7XG5cbiAgLyoqXG4gICAqIFRoZSBmcmFnbWVudCB3aXRob3V0IHRoZSAjLlxuICAgKiBAcHJpdmF0ZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5mcmFnbWVudF8gPSAnJztcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhpcyBVcmkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgUmVhZCBPbmx5LlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaXNSZWFkT25seV8gPSBmYWxzZTtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gaWdub3JlIGNhc2Ugd2hlbiBjb21wYXJpbmcgcXVlcnkgcGFyYW1zLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaWdub3JlQ2FzZV8gPSBmYWxzZTtcblxuICAvKipcbiAgICogT2JqZWN0IHJlcHJlc2VudGluZyBxdWVyeSBkYXRhLlxuICAgKiBAcHJpdmF0ZSB7IWdvb2cuVXJpLlF1ZXJ5RGF0YX1cbiAgICovXG4gIHRoaXMucXVlcnlEYXRhXztcblxuICAvLyBQYXJzZSBpbiB0aGUgdXJpIHN0cmluZ1xuICB2YXIgbTtcbiAgaWYgKG9wdF91cmkgaW5zdGFuY2VvZiBnb29nLlVyaSkge1xuICAgIHRoaXMuaWdub3JlQ2FzZV8gPSAob3B0X2lnbm9yZUNhc2UgIT09IHVuZGVmaW5lZCkgPyBvcHRfaWdub3JlQ2FzZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF91cmkuZ2V0SWdub3JlQ2FzZSgpO1xuICAgIHRoaXMuc2V0U2NoZW1lKG9wdF91cmkuZ2V0U2NoZW1lKCkpO1xuICAgIHRoaXMuc2V0VXNlckluZm8ob3B0X3VyaS5nZXRVc2VySW5mbygpKTtcbiAgICB0aGlzLnNldERvbWFpbihvcHRfdXJpLmdldERvbWFpbigpKTtcbiAgICB0aGlzLnNldFBvcnQob3B0X3VyaS5nZXRQb3J0KCkpO1xuICAgIHRoaXMuc2V0UGF0aChvcHRfdXJpLmdldFBhdGgoKSk7XG4gICAgdGhpcy5zZXRRdWVyeURhdGEob3B0X3VyaS5nZXRRdWVyeURhdGEoKS5jbG9uZSgpKTtcbiAgICB0aGlzLnNldEZyYWdtZW50KG9wdF91cmkuZ2V0RnJhZ21lbnQoKSk7XG4gIH0gZWxzZSBpZiAob3B0X3VyaSAmJiAobSA9IGdvb2cudXJpLnV0aWxzLnNwbGl0KFN0cmluZyhvcHRfdXJpKSkpKSB7XG4gICAgdGhpcy5pZ25vcmVDYXNlXyA9ICEhb3B0X2lnbm9yZUNhc2U7XG5cbiAgICAvLyBTZXQgdGhlIHBhcnRzIC0tIGRlY29kaW5nIGFzIHdlIGRvIHNvLlxuICAgIC8vIENPTVBBVElCSUxJVFkgTk9URSAtIEluIElFLCB1bm1hdGNoZWQgZmllbGRzIG1heSBiZSBlbXB0eSBzdHJpbmdzLFxuICAgIC8vIHdoZXJlYXMgaW4gb3RoZXIgYnJvd3NlcnMgdGhleSB3aWxsIGJlIHVuZGVmaW5lZC5cbiAgICB0aGlzLnNldFNjaGVtZShtW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlNDSEVNRV0gfHwgJycsIHRydWUpO1xuICAgIHRoaXMuc2V0VXNlckluZm8obVtnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5VU0VSX0lORk9dIHx8ICcnLCB0cnVlKTtcbiAgICB0aGlzLnNldERvbWFpbihtW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkRPTUFJTl0gfHwgJycsIHRydWUpO1xuICAgIHRoaXMuc2V0UG9ydChtW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBPUlRdKTtcbiAgICB0aGlzLnNldFBhdGgobVtnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5QQVRIXSB8fCAnJywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRRdWVyeURhdGEobVtnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5RVUVSWV9EQVRBXSB8fCAnJywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRGcmFnbWVudChtW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkZSQUdNRU5UXSB8fCAnJywgdHJ1ZSk7XG5cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlnbm9yZUNhc2VfID0gISFvcHRfaWdub3JlQ2FzZTtcbiAgICB0aGlzLnF1ZXJ5RGF0YV8gPSBuZXcgZ29vZy5VcmkuUXVlcnlEYXRhKG51bGwsIHRoaXMuaWdub3JlQ2FzZV8pO1xuICB9XG59O1xuXG5cbi8qKlxuICogUGFyYW1ldGVyIG5hbWUgYWRkZWQgdG8gc3RvcCBjYWNoaW5nLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZ29vZy5VcmkuUkFORE9NX1BBUkFNID0gZ29vZy51cmkudXRpbHMuU3RhbmRhcmRRdWVyeVBhcmFtLlJBTkRPTTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyBmb3JtIG9mIHRoZSB1cmwuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG91dCA9IFtdO1xuXG4gIHZhciBzY2hlbWUgPSB0aGlzLmdldFNjaGVtZSgpO1xuICBpZiAoc2NoZW1lKSB7XG4gICAgb3V0LnB1c2goXG4gICAgICAgIGdvb2cuVXJpLmVuY29kZVNwZWNpYWxDaGFyc18oXG4gICAgICAgICAgICBzY2hlbWUsIGdvb2cuVXJpLnJlRGlzYWxsb3dlZEluU2NoZW1lT3JVc2VySW5mb18sIHRydWUpLFxuICAgICAgICAnOicpO1xuICB9XG5cbiAgdmFyIGRvbWFpbiA9IHRoaXMuZ2V0RG9tYWluKCk7XG4gIGlmIChkb21haW4gfHwgc2NoZW1lID09ICdmaWxlJykge1xuICAgIG91dC5wdXNoKCcvLycpO1xuXG4gICAgdmFyIHVzZXJJbmZvID0gdGhpcy5nZXRVc2VySW5mbygpO1xuICAgIGlmICh1c2VySW5mbykge1xuICAgICAgb3V0LnB1c2goXG4gICAgICAgICAgZ29vZy5VcmkuZW5jb2RlU3BlY2lhbENoYXJzXyhcbiAgICAgICAgICAgICAgdXNlckluZm8sIGdvb2cuVXJpLnJlRGlzYWxsb3dlZEluU2NoZW1lT3JVc2VySW5mb18sIHRydWUpLFxuICAgICAgICAgICdAJyk7XG4gICAgfVxuXG4gICAgb3V0LnB1c2goZ29vZy5VcmkucmVtb3ZlRG91YmxlRW5jb2RpbmdfKGdvb2cuc3RyaW5nLnVybEVuY29kZShkb21haW4pKSk7XG5cbiAgICB2YXIgcG9ydCA9IHRoaXMuZ2V0UG9ydCgpO1xuICAgIGlmIChwb3J0ICE9IG51bGwpIHtcbiAgICAgIG91dC5wdXNoKCc6JywgU3RyaW5nKHBvcnQpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xuICBpZiAocGF0aCkge1xuICAgIGlmICh0aGlzLmhhc0RvbWFpbigpICYmIHBhdGguY2hhckF0KDApICE9ICcvJykge1xuICAgICAgb3V0LnB1c2goJy8nKTtcbiAgICB9XG4gICAgb3V0LnB1c2goZ29vZy5VcmkuZW5jb2RlU3BlY2lhbENoYXJzXyhcbiAgICAgICAgcGF0aCxcbiAgICAgICAgcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gZ29vZy5VcmkucmVEaXNhbGxvd2VkSW5BYnNvbHV0ZVBhdGhfIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZy5VcmkucmVEaXNhbGxvd2VkSW5SZWxhdGl2ZVBhdGhfLFxuICAgICAgICB0cnVlKSk7XG4gIH1cblxuICB2YXIgcXVlcnkgPSB0aGlzLmdldEVuY29kZWRRdWVyeSgpO1xuICBpZiAocXVlcnkpIHtcbiAgICBvdXQucHVzaCgnPycsIHF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTtcbiAgaWYgKGZyYWdtZW50KSB7XG4gICAgb3V0LnB1c2goXG4gICAgICAgICcjJyxcbiAgICAgICAgZ29vZy5VcmkuZW5jb2RlU3BlY2lhbENoYXJzXyhcbiAgICAgICAgICAgIGZyYWdtZW50LCBnb29nLlVyaS5yZURpc2FsbG93ZWRJbkZyYWdtZW50XykpO1xuICB9XG4gIHJldHVybiBvdXQuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGdpdmVuIHJlbGF0aXZlIFVSSSAoYSBnb29nLlVyaSBvYmplY3QpLCB1c2luZyB0aGUgVVJJXG4gKiByZXByZXNlbnRlZCBieSB0aGlzIGluc3RhbmNlIGFzIHRoZSBiYXNlIFVSSS5cbiAqXG4gKiBUaGVyZSBhcmUgc2V2ZXJhbCBraW5kcyBvZiByZWxhdGl2ZSBVUklzOjxicj5cbiAqIDEuIGZvbyAtIHJlcGxhY2VzIHRoZSBsYXN0IHBhcnQgb2YgdGhlIHBhdGgsIHRoZSB3aG9sZSBxdWVyeSBhbmQgZnJhZ21lbnQ8YnI+XG4gKiAyLiAvZm9vIC0gcmVwbGFjZXMgdGhlIHBhdGgsIHRoZSBxdWVyeSBhbmQgZnJhZ21lbnQ8YnI+XG4gKiAzLiAvL2ZvbyAtIHJlcGxhY2VzIGV2ZXJ5dGhpbmcgZnJvbSB0aGUgZG9tYWluIG9uLiAgZm9vIGlzIGEgZG9tYWluIG5hbWU8YnI+XG4gKiA0LiA/Zm9vIC0gcmVwbGFjZSB0aGUgcXVlcnkgYW5kIGZyYWdtZW50PGJyPlxuICogNS4gI2ZvbyAtIHJlcGxhY2UgdGhlIGZyYWdtZW50IG9ubHlcbiAqXG4gKiBBZGRpdGlvbmFsbHksIGlmIHJlbGF0aXZlIFVSSSBoYXMgYSBub24tZW1wdHkgcGF0aCwgYWxsIFwiLi5cIiBhbmQgXCIuXCJcbiAqIHNlZ21lbnRzIHdpbGwgYmUgcmVzb2x2ZWQsIGFzIGRlc2NyaWJlZCBpbiBSRkMgMzk4Ni5cbiAqXG4gKiBAcGFyYW0geyFnb29nLlVyaX0gcmVsYXRpdmVVcmkgVGhlIHJlbGF0aXZlIFVSSSB0byByZXNvbHZlLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBUaGUgcmVzb2x2ZWQgVVJJLlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlVXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGFic29sdXRlVXJpID0gdGhpcy5jbG9uZSgpO1xuXG4gIC8vIHdlIHNhdGlzZnkgdGhlc2UgY29uZGl0aW9ucyBieSBsb29raW5nIGZvciB0aGUgZmlyc3QgcGFydCBvZiByZWxhdGl2ZVVyaVxuICAvLyB0aGF0IGlzIG5vdCBibGFuayBhbmQgYXBwbHlpbmcgZGVmYXVsdHMgdG8gdGhlIHJlc3RcblxuICB2YXIgb3ZlcnJpZGRlbiA9IHJlbGF0aXZlVXJpLmhhc1NjaGVtZSgpO1xuXG4gIGlmIChvdmVycmlkZGVuKSB7XG4gICAgYWJzb2x1dGVVcmkuc2V0U2NoZW1lKHJlbGF0aXZlVXJpLmdldFNjaGVtZSgpKTtcbiAgfSBlbHNlIHtcbiAgICBvdmVycmlkZGVuID0gcmVsYXRpdmVVcmkuaGFzVXNlckluZm8oKTtcbiAgfVxuXG4gIGlmIChvdmVycmlkZGVuKSB7XG4gICAgYWJzb2x1dGVVcmkuc2V0VXNlckluZm8ocmVsYXRpdmVVcmkuZ2V0VXNlckluZm8oKSk7XG4gIH0gZWxzZSB7XG4gICAgb3ZlcnJpZGRlbiA9IHJlbGF0aXZlVXJpLmhhc0RvbWFpbigpO1xuICB9XG5cbiAgaWYgKG92ZXJyaWRkZW4pIHtcbiAgICBhYnNvbHV0ZVVyaS5zZXREb21haW4ocmVsYXRpdmVVcmkuZ2V0RG9tYWluKCkpO1xuICB9IGVsc2Uge1xuICAgIG92ZXJyaWRkZW4gPSByZWxhdGl2ZVVyaS5oYXNQb3J0KCk7XG4gIH1cblxuICB2YXIgcGF0aCA9IHJlbGF0aXZlVXJpLmdldFBhdGgoKTtcbiAgaWYgKG92ZXJyaWRkZW4pIHtcbiAgICBhYnNvbHV0ZVVyaS5zZXRQb3J0KHJlbGF0aXZlVXJpLmdldFBvcnQoKSk7XG4gIH0gZWxzZSB7XG4gICAgb3ZlcnJpZGRlbiA9IHJlbGF0aXZlVXJpLmhhc1BhdGgoKTtcbiAgICBpZiAob3ZlcnJpZGRlbikge1xuICAgICAgLy8gcmVzb2x2ZSBwYXRoIHByb3Blcmx5XG4gICAgICBpZiAocGF0aC5jaGFyQXQoMCkgIT0gJy8nKSB7XG4gICAgICAgIC8vIHBhdGggaXMgcmVsYXRpdmVcbiAgICAgICAgaWYgKHRoaXMuaGFzRG9tYWluKCkgJiYgIXRoaXMuaGFzUGF0aCgpKSB7XG4gICAgICAgICAgLy8gUkZDIDM5ODYsIHNlY3Rpb24gNS4yLjMsIGNhc2UgMVxuICAgICAgICAgIHBhdGggPSAnLycgKyBwYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJGQyAzOTg2LCBzZWN0aW9uIDUuMi4zLCBjYXNlIDJcbiAgICAgICAgICB2YXIgbGFzdFNsYXNoSW5kZXggPSBhYnNvbHV0ZVVyaS5nZXRQYXRoKCkubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgIHBhdGggPSBhYnNvbHV0ZVVyaS5nZXRQYXRoKCkuc3Vic3RyKDAsIGxhc3RTbGFzaEluZGV4ICsgMSkgKyBwYXRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGF0aCA9IGdvb2cuVXJpLnJlbW92ZURvdFNlZ21lbnRzKHBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvdmVycmlkZGVuKSB7XG4gICAgYWJzb2x1dGVVcmkuc2V0UGF0aChwYXRoKTtcbiAgfSBlbHNlIHtcbiAgICBvdmVycmlkZGVuID0gcmVsYXRpdmVVcmkuaGFzUXVlcnkoKTtcbiAgfVxuXG4gIGlmIChvdmVycmlkZGVuKSB7XG4gICAgYWJzb2x1dGVVcmkuc2V0UXVlcnlEYXRhKHJlbGF0aXZlVXJpLmdldFF1ZXJ5RGF0YSgpLmNsb25lKCkpO1xuICB9IGVsc2Uge1xuICAgIG92ZXJyaWRkZW4gPSByZWxhdGl2ZVVyaS5oYXNGcmFnbWVudCgpO1xuICB9XG5cbiAgaWYgKG92ZXJyaWRkZW4pIHtcbiAgICBhYnNvbHV0ZVVyaS5zZXRGcmFnbWVudChyZWxhdGl2ZVVyaS5nZXRGcmFnbWVudCgpKTtcbiAgfVxuXG4gIHJldHVybiBhYnNvbHV0ZVVyaTtcbn07XG5cblxuLyoqXG4gKiBDbG9uZXMgdGhlIFVSSSBpbnN0YW5jZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaX0gTmV3IGluc3RhbmNlIG9mIHRoZSBVUkkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbmV3IGdvb2cuVXJpKHRoaXMpO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGVuY29kZWQgc2NoZW1lL3Byb3RvY29sIGZvciB0aGUgVVJJLlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuZ2V0U2NoZW1lID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuc2NoZW1lXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBzY2hlbWUvcHJvdG9jb2wuXG4gKiBAdGhyb3dzIFVSSUVycm9yIElmIG9wdF9kZWNvZGUgaXMgdHJ1ZSBhbmQgbmV3U2NoZW1lIGlzIG1hbGZvcm1lZCAodGhhdCBpcyxcbiAqICAgICBpZiBkZWNvZGVVUklDb21wb25lbnQgZmFpbHMpLlxuICogQHBhcmFtIHtzdHJpbmd9IG5ld1NjaGVtZSBOZXcgc2NoZW1lIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2RlY29kZSBPcHRpb25hbCBwYXJhbSBmb3Igd2hldGhlciB0byBkZWNvZGUgbmV3IHZhbHVlLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBSZWZlcmVuY2UgdG8gdGhpcyBVUkkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuc2V0U2NoZW1lID0gZnVuY3Rpb24obmV3U2NoZW1lLCBvcHRfZGVjb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5lbmZvcmNlUmVhZE9ubHkoKTtcbiAgdGhpcy5zY2hlbWVfID1cbiAgICAgIG9wdF9kZWNvZGUgPyBnb29nLlVyaS5kZWNvZGVPckVtcHR5XyhuZXdTY2hlbWUsIHRydWUpIDogbmV3U2NoZW1lO1xuXG4gIC8vIHJlbW92ZSBhbiA6IGF0IHRoZSBlbmQgb2YgdGhlIHNjaGVtZSBzbyBzb21lYm9keSBjYW4gcGFzcyBpblxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2xcbiAgaWYgKHRoaXMuc2NoZW1lXykge1xuICAgIHRoaXMuc2NoZW1lXyA9IHRoaXMuc2NoZW1lXy5yZXBsYWNlKC86JC8sICcnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzY2hlbWUgaGFzIGJlZW4gc2V0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuaGFzU2NoZW1lID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEhdGhpcy5zY2hlbWVfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRlY29kZWQgdXNlciBpbmZvLlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuZ2V0VXNlckluZm8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy51c2VySW5mb187XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgdXNlckluZm8uXG4gKiBAdGhyb3dzIFVSSUVycm9yIElmIG9wdF9kZWNvZGUgaXMgdHJ1ZSBhbmQgbmV3VXNlckluZm8gaXMgbWFsZm9ybWVkICh0aGF0IGlzLFxuICogICAgIGlmIGRlY29kZVVSSUNvbXBvbmVudCBmYWlscykuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3VXNlckluZm8gTmV3IHVzZXJJbmZvIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2RlY29kZSBPcHRpb25hbCBwYXJhbSBmb3Igd2hldGhlciB0byBkZWNvZGUgbmV3IHZhbHVlLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBSZWZlcmVuY2UgdG8gdGhpcyBVUkkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuc2V0VXNlckluZm8gPSBmdW5jdGlvbihuZXdVc2VySW5mbywgb3B0X2RlY29kZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5mb3JjZVJlYWRPbmx5KCk7XG4gIHRoaXMudXNlckluZm9fID1cbiAgICAgIG9wdF9kZWNvZGUgPyBnb29nLlVyaS5kZWNvZGVPckVtcHR5XyhuZXdVc2VySW5mbykgOiBuZXdVc2VySW5mbztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBpbmZvIGhhcyBiZWVuIHNldC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmhhc1VzZXJJbmZvID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEhdGhpcy51c2VySW5mb187XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGVjb2RlZCBkb21haW4uXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5nZXREb21haW4gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5kb21haW5fO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIGRvbWFpbi5cbiAqIEB0aHJvd3MgVVJJRXJyb3IgSWYgb3B0X2RlY29kZSBpcyB0cnVlIGFuZCBuZXdEb21haW4gaXMgbWFsZm9ybWVkICh0aGF0IGlzLFxuICogICAgIGlmIGRlY29kZVVSSUNvbXBvbmVudCBmYWlscykuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3RG9tYWluIE5ldyBkb21haW4gdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZGVjb2RlIE9wdGlvbmFsIHBhcmFtIGZvciB3aGV0aGVyIHRvIGRlY29kZSBuZXcgdmFsdWUuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVSSSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5zZXREb21haW4gPSBmdW5jdGlvbihuZXdEb21haW4sIG9wdF9kZWNvZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuZm9yY2VSZWFkT25seSgpO1xuICB0aGlzLmRvbWFpbl8gPVxuICAgICAgb3B0X2RlY29kZSA/IGdvb2cuVXJpLmRlY29kZU9yRW1wdHlfKG5ld0RvbWFpbiwgdHJ1ZSkgOiBuZXdEb21haW47XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGRvbWFpbiBoYXMgYmVlbiBzZXQuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5oYXNEb21haW4gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gISF0aGlzLmRvbWFpbl87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7P251bWJlcn0gVGhlIHBvcnQgbnVtYmVyLlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuZ2V0UG9ydCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnBvcnRfO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHBvcnQgbnVtYmVyLlxuICogQHBhcmFtIHsqfSBuZXdQb3J0IFBvcnQgbnVtYmVyLiBXaWxsIGJlIGV4cGxpY2l0bHkgY2FzdGVkIHRvIGEgbnVtYmVyLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBSZWZlcmVuY2UgdG8gdGhpcyBVUkkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuc2V0UG9ydCA9IGZ1bmN0aW9uKG5ld1BvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuZm9yY2VSZWFkT25seSgpO1xuXG4gIGlmIChuZXdQb3J0KSB7XG4gICAgbmV3UG9ydCA9IE51bWJlcihuZXdQb3J0KTtcbiAgICBpZiAoaXNOYU4obmV3UG9ydCkgfHwgbmV3UG9ydCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIHBvcnQgbnVtYmVyICcgKyBuZXdQb3J0KTtcbiAgICB9XG4gICAgdGhpcy5wb3J0XyA9IG5ld1BvcnQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wb3J0XyA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwb3J0IGhhcyBiZWVuIHNldC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmhhc1BvcnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5wb3J0XyAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRlY29kZWQgcGF0aC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5wYXRoXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBwYXRoLlxuICogQHRocm93cyBVUklFcnJvciBJZiBvcHRfZGVjb2RlIGlzIHRydWUgYW5kIG5ld1BhdGggaXMgbWFsZm9ybWVkICh0aGF0IGlzLFxuICogICAgIGlmIGRlY29kZVVSSUNvbXBvbmVudCBmYWlscykuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3UGF0aCBOZXcgcGF0aCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kZWNvZGUgT3B0aW9uYWwgcGFyYW0gZm9yIHdoZXRoZXIgdG8gZGVjb2RlIG5ldyB2YWx1ZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaX0gUmVmZXJlbmNlIHRvIHRoaXMgVVJJIG9iamVjdC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbihuZXdQYXRoLCBvcHRfZGVjb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5lbmZvcmNlUmVhZE9ubHkoKTtcbiAgdGhpcy5wYXRoXyA9IG9wdF9kZWNvZGUgPyBnb29nLlVyaS5kZWNvZGVPckVtcHR5XyhuZXdQYXRoLCB0cnVlKSA6IG5ld1BhdGg7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhdGggaGFzIGJlZW4gc2V0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuaGFzUGF0aCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAhIXRoaXMucGF0aF87XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcXVlcnkgc3RyaW5nIGhhcyBiZWVuIHNldC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmhhc1F1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMucXVlcnlEYXRhXy50b1N0cmluZygpICE9PSAnJztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBxdWVyeSBkYXRhLlxuICogQHBhcmFtIHtnb29nLlVyaS5RdWVyeURhdGF8c3RyaW5nfHVuZGVmaW5lZH0gcXVlcnlEYXRhIFF1ZXJ5RGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZGVjb2RlIE9wdGlvbmFsIHBhcmFtIGZvciB3aGV0aGVyIHRvIGRlY29kZSBuZXcgdmFsdWUuXG4gKiAgICAgQXBwbGllcyBvbmx5IGlmIHF1ZXJ5RGF0YSBpcyBhIHN0cmluZy5cbiAqIEByZXR1cm4geyFnb29nLlVyaX0gUmVmZXJlbmNlIHRvIHRoaXMgVVJJIG9iamVjdC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLnNldFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uKHF1ZXJ5RGF0YSwgb3B0X2RlY29kZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5mb3JjZVJlYWRPbmx5KCk7XG5cbiAgaWYgKHF1ZXJ5RGF0YSBpbnN0YW5jZW9mIGdvb2cuVXJpLlF1ZXJ5RGF0YSkge1xuICAgIHRoaXMucXVlcnlEYXRhXyA9IHF1ZXJ5RGF0YTtcbiAgICB0aGlzLnF1ZXJ5RGF0YV8uc2V0SWdub3JlQ2FzZSh0aGlzLmlnbm9yZUNhc2VfKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW9wdF9kZWNvZGUpIHtcbiAgICAgIC8vIFF1ZXJ5RGF0YSBhY2NlcHRzIGVuY29kZWQgcXVlcnkgc3RyaW5nLCBzbyBlbmNvZGUgaXQgaWZcbiAgICAgIC8vIG9wdF9kZWNvZGUgZmxhZyBpcyBub3QgdHJ1ZS5cbiAgICAgIHF1ZXJ5RGF0YSA9IGdvb2cuVXJpLmVuY29kZVNwZWNpYWxDaGFyc18oXG4gICAgICAgICAgcXVlcnlEYXRhLCBnb29nLlVyaS5yZURpc2FsbG93ZWRJblF1ZXJ5Xyk7XG4gICAgfVxuICAgIHRoaXMucXVlcnlEYXRhXyA9IG5ldyBnb29nLlVyaS5RdWVyeURhdGEocXVlcnlEYXRhLCB0aGlzLmlnbm9yZUNhc2VfKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIFVSSSBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdRdWVyeSBOZXcgcXVlcnkgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZGVjb2RlIE9wdGlvbmFsIHBhcmFtIGZvciB3aGV0aGVyIHRvIGRlY29kZSBuZXcgdmFsdWUuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVSSSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5zZXRRdWVyeSA9IGZ1bmN0aW9uKG5ld1F1ZXJ5LCBvcHRfZGVjb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuc2V0UXVlcnlEYXRhKG5ld1F1ZXJ5LCBvcHRfZGVjb2RlKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBlbmNvZGVkIFVSSSBxdWVyeSwgbm90IGluY2x1ZGluZyB0aGUgPy5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmdldEVuY29kZWRRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnF1ZXJ5RGF0YV8udG9TdHJpbmcoKTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkZWNvZGVkIFVSSSBxdWVyeSwgbm90IGluY2x1ZGluZyB0aGUgPy5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmdldERlY29kZWRRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnF1ZXJ5RGF0YV8udG9EZWNvZGVkU3RyaW5nKCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcXVlcnkgZGF0YS5cbiAqIEByZXR1cm4geyFnb29nLlVyaS5RdWVyeURhdGF9IFF1ZXJ5RGF0YSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5nZXRRdWVyeURhdGEgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5xdWVyeURhdGFfO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGVuY29kZWQgVVJJIHF1ZXJ5LCBub3QgaW5jbHVkaW5nIHRoZSA/LlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgbWV0aG9kLCB1bmxpa2Ugb3RoZXIgZ2V0dGVyIG1ldGhvZHMsIHJldHVybnMgZW5jb2RlZFxuICogdmFsdWUsIGluc3RlYWQgb2YgZGVjb2RlZCBvbmUuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5nZXRRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmdldEVuY29kZWRRdWVyeSgpO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBxdWVyeSBwYXJhbWV0ZXJzLCBjbGVhcmluZyBwcmV2aW91cyB2YWx1ZXMgZm9yXG4gKiB0aGF0IGtleS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBwYXJhbWV0ZXIgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLiBWYWx1ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGVuY29kZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVSSSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXJWYWx1ZSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuZm9yY2VSZWFkT25seSgpO1xuICB0aGlzLnF1ZXJ5RGF0YV8uc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5hbWVkIHF1ZXJ5IHBhcmFtZXRlcnMsIGNsZWFyaW5nIHByZXZpb3VzIHZhbHVlcyBmb3JcbiAqIHRoYXQga2V5LiAgTm90IG5ldyB2YWx1ZXMgd2lsbCBjdXJyZW50bHkgYmUgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGUgcXVlcnlcbiAqIHN0cmluZy5cbiAqXG4gKiBTbywgPGNvZGU+Z29vZy5VcmkucGFyc2UoJ2Zvbz9hPWImYz1kJmU9ZicpLnNldFBhcmFtZXRlclZhbHVlcygnYycsIFsnbmV3J10pXG4gKiA8L2NvZGU+IHlpZWxkcyA8dHQ+Zm9vP2E9YiZlPWYmYz1uZXc8L3R0Pi48L3A+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWVzIFRoZSBuZXcgdmFsdWVzLiBJZiB2YWx1ZXMgaXMgYSBzaW5nbGVcbiAqICAgICBzdHJpbmcgdGhlbiBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgdGhlIHNvbGUgdmFsdWUuIFZhbHVlcyBkbyBub3QgbmVlZCB0b1xuICogICAgIGJlIGVuY29kZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVSSSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXJWYWx1ZXMgPSBmdW5jdGlvbihrZXksIHZhbHVlcykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5mb3JjZVJlYWRPbmx5KCk7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICB2YWx1ZXMgPSBbU3RyaW5nKHZhbHVlcyldO1xuICB9XG5cbiAgdGhpcy5xdWVyeURhdGFfLnNldFZhbHVlcyhrZXksIHZhbHVlcyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWU8Yj5zPC9iPiBmb3IgYSBnaXZlbiBjZ2kgcGFyYW1ldGVyIGFzIGEgbGlzdCBvZiBkZWNvZGVkXG4gKiBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIHBhcmFtZXRlciB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm4geyFBcnJheTw/Pn0gVGhlIHZhbHVlcyBmb3IgYSBnaXZlbiBjZ2kgcGFyYW1ldGVyIGFzIGEgbGlzdCBvZlxuICogICAgIGRlY29kZWQgcXVlcnkgcGFyYW1ldGVyIHZhbHVlcy5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmdldFBhcmFtZXRlclZhbHVlcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5xdWVyeURhdGFfLmdldFZhbHVlcyhuYW1lKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBmb3IgYSBnaXZlbiBjZ2kgcGFyYW1ldGVyIG9yIHVuZGVmaW5lZCBpZiB0aGUgZ2l2ZW5cbiAqIHBhcmFtZXRlciBuYW1lIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSBVbmVzY2FwZWQgcGFyYW1ldGVyIG5hbWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSBUaGUgZmlyc3QgdmFsdWUgZm9yIGEgZ2l2ZW4gY2dpIHBhcmFtZXRlciBvclxuICogICAgIHVuZGVmaW5lZCBpZiB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUgZG9lcyBub3QgYXBwZWFyIGluIHRoZSBxdWVyeVxuICogICAgIHN0cmluZy5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmdldFBhcmFtZXRlclZhbHVlID0gZnVuY3Rpb24ocGFyYW1OYW1lKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH0gKi8gKHRoaXMucXVlcnlEYXRhXy5nZXQocGFyYW1OYW1lKSk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJJIGZyYWdtZW50LCBub3QgaW5jbHVkaW5nIHRoZSAjLlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuZ2V0RnJhZ21lbnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5mcmFnbWVudF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgVVJJIGZyYWdtZW50LlxuICogQHRocm93cyBVUklFcnJvciBJZiBvcHRfZGVjb2RlIGlzIHRydWUgYW5kIG5ld0ZyYWdtZW50IGlzIG1hbGZvcm1lZCAodGhhdCBpcyxcbiAqICAgICBpZiBkZWNvZGVVUklDb21wb25lbnQgZmFpbHMpLlxuICogQHBhcmFtIHtzdHJpbmd9IG5ld0ZyYWdtZW50IE5ldyBmcmFnbWVudCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kZWNvZGUgT3B0aW9uYWwgcGFyYW0gZm9yIHdoZXRoZXIgdG8gZGVjb2RlIG5ldyB2YWx1ZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaX0gUmVmZXJlbmNlIHRvIHRoaXMgVVJJIG9iamVjdC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLnNldEZyYWdtZW50ID0gZnVuY3Rpb24obmV3RnJhZ21lbnQsIG9wdF9kZWNvZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuZm9yY2VSZWFkT25seSgpO1xuICB0aGlzLmZyYWdtZW50XyA9XG4gICAgICBvcHRfZGVjb2RlID8gZ29vZy5VcmkuZGVjb2RlT3JFbXB0eV8obmV3RnJhZ21lbnQpIDogbmV3RnJhZ21lbnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIFVSSSBoYXMgYSBmcmFnbWVudCBzZXQuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5oYXNGcmFnbWVudCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAhIXRoaXMuZnJhZ21lbnRfO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGhhcyB0aGUgc2FtZSBkb21haW4gYXMgdGhhdCBvZiB1cmkyLlxuICogQHBhcmFtIHshZ29vZy5Vcml9IHVyaTIgVGhlIFVSSSBvYmplY3QgdG8gY29tcGFyZSB0by5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgc2FtZSBkb21haW47IGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmhhc1NhbWVEb21haW5BcyA9IGZ1bmN0aW9uKHVyaTIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gKCghdGhpcy5oYXNEb21haW4oKSAmJiAhdXJpMi5oYXNEb21haW4oKSkgfHxcbiAgICAgICAgICB0aGlzLmdldERvbWFpbigpID09IHVyaTIuZ2V0RG9tYWluKCkpICYmXG4gICAgICAoKCF0aGlzLmhhc1BvcnQoKSAmJiAhdXJpMi5oYXNQb3J0KCkpIHx8XG4gICAgICAgdGhpcy5nZXRQb3J0KCkgPT0gdXJpMi5nZXRQb3J0KCkpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYSByYW5kb20gcGFyYW1ldGVyIHRvIHRoZSBVcmkuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVyaSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5tYWtlVW5pcXVlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5lbmZvcmNlUmVhZE9ubHkoKTtcbiAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZShnb29nLlVyaS5SQU5ET01fUEFSQU0sIGdvb2cuc3RyaW5nLmdldFJhbmRvbVN0cmluZygpKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBuYW1lZCBxdWVyeSBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaX0gUmVmZXJlbmNlIHRvIHRoaXMgVVJJIG9iamVjdC5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLnJlbW92ZVBhcmFtZXRlciA9IGZ1bmN0aW9uKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5mb3JjZVJlYWRPbmx5KCk7XG4gIHRoaXMucXVlcnlEYXRhXy5yZW1vdmUoa2V5KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogU2V0cyB3aGV0aGVyIFVyaSBpcyByZWFkIG9ubHkuIElmIHRoaXMgZ29vZy5VcmkgaXMgcmVhZC1vbmx5LFxuICogZW5mb3JjZVJlYWRPbmx5XyB3aWxsIGJlIGNhbGxlZCBhdCB0aGUgc3RhcnQgb2YgYW55IGZ1bmN0aW9uIHRoYXQgbWF5IG1vZGlmeVxuICogdGhpcyBVcmkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmVhZE9ubHkgd2hldGhlciB0aGlzIGdvb2cuVXJpIHNob3VsZCBiZSByZWFkIG9ubHkuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlZmVyZW5jZSB0byB0aGlzIFVyaSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5zZXRSZWFkT25seSA9IGZ1bmN0aW9uKGlzUmVhZE9ubHkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmlzUmVhZE9ubHlfID0gaXNSZWFkT25seTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgVVJJIGlzIHJlYWQgb25seS5cbiAqL1xuZ29vZy5VcmkucHJvdG90eXBlLmlzUmVhZE9ubHkgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5pc1JlYWRPbmx5Xztcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhpcyBVcmkgaGFzIGJlZW4gbWFya2VkIGFzIHJlYWQgb25seSwgYW5kIGlmIHNvLCB0aHJvd3MgYW4gZXJyb3IuXG4gKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgd2hlbmV2ZXIgYW55IG1vZGlmeWluZyBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5lbmZvcmNlUmVhZE9ubHkgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5pc1JlYWRPbmx5Xykge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJpZWQgdG8gbW9kaWZ5IGEgcmVhZC1vbmx5IFVyaScpO1xuICB9XG59O1xuXG5cbi8qKlxuICogU2V0cyB3aGV0aGVyIHRvIGlnbm9yZSBjYXNlLlxuICogTk9URTogSWYgdGhlcmUgYXJlIGFscmVhZHkga2V5L3ZhbHVlIHBhaXJzIGluIHRoZSBRdWVyeURhdGEsIGFuZFxuICogaWdub3JlQ2FzZV8gaXMgc2V0IHRvIGZhbHNlLCB0aGUga2V5cyB3aWxsIGFsbCBiZSBsb3dlci1jYXNlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlQ2FzZSB3aGV0aGVyIHRoaXMgZ29vZy5Vcmkgc2hvdWxkIGlnbm9yZSBjYXNlLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBSZWZlcmVuY2UgdG8gdGhpcyBVcmkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5wcm90b3R5cGUuc2V0SWdub3JlQ2FzZSA9IGZ1bmN0aW9uKGlnbm9yZUNhc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmlnbm9yZUNhc2VfID0gaWdub3JlQ2FzZTtcbiAgaWYgKHRoaXMucXVlcnlEYXRhXykge1xuICAgIHRoaXMucXVlcnlEYXRhXy5zZXRJZ25vcmVDYXNlKGlnbm9yZUNhc2UpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdG8gaWdub3JlIGNhc2UuXG4gKi9cbmdvb2cuVXJpLnByb3RvdHlwZS5nZXRJZ25vcmVDYXNlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuaWdub3JlQ2FzZV87XG59O1xuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTdGF0aWMgbWVtYmVyc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSB1cmkgZnJvbSB0aGUgc3RyaW5nIGZvcm0uICBCYXNpY2FsbHkgYW4gYWxpYXMgb2YgbmV3IGdvb2cuVXJpKCkuXG4gKiBJZiBhIFVyaSBvYmplY3QgaXMgcGFzc2VkIHRvIHBhcnNlIHRoZW4gaXQgd2lsbCByZXR1cm4gYSBjbG9uZSBvZiB0aGUgb2JqZWN0LlxuICpcbiAqIEB0aHJvd3MgVVJJRXJyb3IgSWYgcGFyc2luZyB0aGUgVVJJIGlzIG1hbGZvcm1lZC4gVGhlIHBhc3NlZCBVUkkgY29tcG9uZW50c1xuICogICAgIHNob3VsZCBhbGwgYmUgcGFyc2VhYmxlIGJ5IGRlY29kZVVSSUNvbXBvbmVudC5cbiAqIEBwYXJhbSB7Kn0gdXJpIFJhdyBVUkkgc3RyaW5nIG9yIGluc3RhbmNlIG9mIFVyaVxuICogICAgIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pZ25vcmVDYXNlIFdoZXRoZXIgdG8gaWdub3JlIHRoZSBjYXNlIG9mIHBhcmFtZXRlclxuICogbmFtZXMgaW4gI2dldFBhcmFtZXRlclZhbHVlLlxuICogQHJldHVybiB7IWdvb2cuVXJpfSBUaGUgbmV3IFVSSSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLnBhcnNlID0gZnVuY3Rpb24odXJpLCBvcHRfaWdub3JlQ2FzZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB1cmkgaW5zdGFuY2VvZiBnb29nLlVyaSA/IHVyaS5jbG9uZSgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGdvb2cuVXJpKHVyaSwgb3B0X2lnbm9yZUNhc2UpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZ29vZy5Vcmkgb2JqZWN0IGZyb20gdW5lbmNvZGVkIHBhcnRzLlxuICpcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9zY2hlbWUgU2NoZW1lL3Byb3RvY29sIG9yIGZ1bGwgVVJJIHRvIHBhcnNlLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X3VzZXJJbmZvIHVzZXJuYW1lOnBhc3N3b3JkLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X2RvbWFpbiB3d3cuZ29vZ2xlLmNvbS5cbiAqIEBwYXJhbSB7P251bWJlcj19IG9wdF9wb3J0IDk4MzAuXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBvcHRfcGF0aCAvc29tZS9wYXRoL3RvL2EvZmlsZS5odG1sLlxuICogQHBhcmFtIHtzdHJpbmd8Z29vZy5VcmkuUXVlcnlEYXRhPX0gb3B0X3F1ZXJ5IGE9MSZiPTIuXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBvcHRfZnJhZ21lbnQgVGhlIGZyYWdtZW50IHdpdGhvdXQgdGhlICMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaWdub3JlQ2FzZSBXaGV0aGVyIHRvIGlnbm9yZSBwYXJhbWV0ZXIgbmFtZSBjYXNlIGluXG4gKiAgICAgI2dldFBhcmFtZXRlclZhbHVlLlxuICpcbiAqIEByZXR1cm4geyFnb29nLlVyaX0gVGhlIG5ldyBVUkkgb2JqZWN0LlxuICovXG5nb29nLlVyaS5jcmVhdGUgPSBmdW5jdGlvbihcbiAgICBvcHRfc2NoZW1lLCBvcHRfdXNlckluZm8sIG9wdF9kb21haW4sIG9wdF9wb3J0LCBvcHRfcGF0aCwgb3B0X3F1ZXJ5LFxuICAgIG9wdF9mcmFnbWVudCwgb3B0X2lnbm9yZUNhc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdXJpID0gbmV3IGdvb2cuVXJpKG51bGwsIG9wdF9pZ25vcmVDYXNlKTtcblxuICAvLyBPbmx5IHNldCB0aGUgcGFydHMgaWYgdGhleSBhcmUgZGVmaW5lZCBhbmQgbm90IGVtcHR5IHN0cmluZ3MuXG4gIG9wdF9zY2hlbWUgJiYgdXJpLnNldFNjaGVtZShvcHRfc2NoZW1lKTtcbiAgb3B0X3VzZXJJbmZvICYmIHVyaS5zZXRVc2VySW5mbyhvcHRfdXNlckluZm8pO1xuICBvcHRfZG9tYWluICYmIHVyaS5zZXREb21haW4ob3B0X2RvbWFpbik7XG4gIG9wdF9wb3J0ICYmIHVyaS5zZXRQb3J0KG9wdF9wb3J0KTtcbiAgb3B0X3BhdGggJiYgdXJpLnNldFBhdGgob3B0X3BhdGgpO1xuICBvcHRfcXVlcnkgJiYgdXJpLnNldFF1ZXJ5RGF0YShvcHRfcXVlcnkpO1xuICBvcHRfZnJhZ21lbnQgJiYgdXJpLnNldEZyYWdtZW50KG9wdF9mcmFnbWVudCk7XG5cbiAgcmV0dXJuIHVyaTtcbn07XG5cblxuLyoqXG4gKiBSZXNvbHZlcyBhIHJlbGF0aXZlIFVyaSBhZ2FpbnN0IGEgYmFzZSBVcmksIGFjY2VwdGluZyBib3RoIHN0cmluZ3MgYW5kXG4gKiBVcmkgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IGJhc2UgQmFzZSBVcmkuXG4gKiBAcGFyYW0geyp9IHJlbCBSZWxhdGl2ZSBVcmkuXG4gKiBAcmV0dXJuIHshZ29vZy5Vcml9IFJlc29sdmVkIHVyaS5cbiAqL1xuZ29vZy5VcmkucmVzb2x2ZSA9IGZ1bmN0aW9uKGJhc2UsIHJlbCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghKGJhc2UgaW5zdGFuY2VvZiBnb29nLlVyaSkpIHtcbiAgICBiYXNlID0gZ29vZy5VcmkucGFyc2UoYmFzZSk7XG4gIH1cblxuICBpZiAoIShyZWwgaW5zdGFuY2VvZiBnb29nLlVyaSkpIHtcbiAgICByZWwgPSBnb29nLlVyaS5wYXJzZShyZWwpO1xuICB9XG5cbiAgcmV0dXJuIGJhc2UucmVzb2x2ZShyZWwpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgZG90IHNlZ21lbnRzIGluIGdpdmVuIHBhdGggY29tcG9uZW50LCBhcyBkZXNjcmliZWQgaW5cbiAqIFJGQyAzOTg2LCBzZWN0aW9uIDUuMi40LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIEEgbm9uLWVtcHR5IHBhdGggY29tcG9uZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBQYXRoIGNvbXBvbmVudCB3aXRoIHJlbW92ZWQgZG90IHNlZ21lbnRzLlxuICovXG5nb29nLlVyaS5yZW1vdmVEb3RTZWdtZW50cyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAocGF0aCA9PSAnLi4nIHx8IHBhdGggPT0gJy4nKSB7XG4gICAgcmV0dXJuICcnO1xuXG4gIH0gZWxzZSBpZiAoXG4gICAgICAhZ29vZy5zdHJpbmcuY29udGFpbnMocGF0aCwgJy4vJykgJiYgIWdvb2cuc3RyaW5nLmNvbnRhaW5zKHBhdGgsICcvLicpKSB7XG4gICAgLy8gVGhpcyBvcHRpbWl6YXRpb24gZGV0ZWN0cyB1cmlzIHdoaWNoIGRvIG5vdCBjb250YWluIGRvdC1zZWdtZW50cyxcbiAgICAvLyBhbmQgYXMgYSBjb25zZXF1ZW5jZSBkbyBub3QgcmVxdWlyZSBhbnkgcHJvY2Vzc2luZy5cbiAgICByZXR1cm4gcGF0aDtcblxuICB9IGVsc2Uge1xuICAgIHZhciBsZWFkaW5nU2xhc2ggPSBnb29nLnN0cmluZy5zdGFydHNXaXRoKHBhdGgsICcvJyk7XG4gICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpO1xuICAgIHZhciBvdXQgPSBbXTtcblxuICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHNlZ21lbnRzLmxlbmd0aDspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbcG9zKytdO1xuXG4gICAgICBpZiAoc2VnbWVudCA9PSAnLicpIHtcbiAgICAgICAgaWYgKGxlYWRpbmdTbGFzaCAmJiBwb3MgPT0gc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgb3V0LnB1c2goJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlZ21lbnQgPT0gJy4uJykge1xuICAgICAgICBpZiAob3V0Lmxlbmd0aCA+IDEgfHwgb3V0Lmxlbmd0aCA9PSAxICYmIG91dFswXSAhPSAnJykge1xuICAgICAgICAgIG91dC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVhZGluZ1NsYXNoICYmIHBvcyA9PSBzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBvdXQucHVzaCgnJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dC5wdXNoKHNlZ21lbnQpO1xuICAgICAgICBsZWFkaW5nU2xhc2ggPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbignLycpO1xuICB9XG59O1xuXG5cbi8qKlxuICogRGVjb2RlcyBhIHZhbHVlIG9yIHJldHVybnMgdGhlIGVtcHR5IHN0cmluZyBpZiBpdCBpc24ndCBkZWZpbmVkIG9yIGVtcHR5LlxuICogQHRocm93cyBVUklFcnJvciBJZiBkZWNvZGVVUklDb21wb25lbnQgZmFpbHMgdG8gZGVjb2RlIHZhbC5cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gdmFsIFZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9wcmVzZXJ2ZVJlc2VydmVkIElmIHRydWUsIHJlc3RyaWN0ZWQgY2hhcmFjdGVycyB3aWxsXG4gKiAgICAgbm90IGJlIGRlY29kZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IERlY29kZWQgdmFsdWUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5kZWNvZGVPckVtcHR5XyA9IGZ1bmN0aW9uKHZhbCwgb3B0X3ByZXNlcnZlUmVzZXJ2ZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBEb24ndCB1c2UgVXJsRGVjb2RlKCkgaGVyZSBiZWNhdXNlIHZhbCBpcyBub3QgYSBxdWVyeSBwYXJhbWV0ZXIuXG4gIGlmICghdmFsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gZGVjb2RlVVJJIGhhcyB0aGUgc2FtZSBvdXRwdXQgZm9yICclMmYnIGFuZCAnJTI1MmYnLiBXZSBkb3VibGUgZW5jb2RlICUyNVxuICAvLyBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRoZSAyIGlucHV0cy4gVGhpcyBpcyBsYXRlciB1bmRvbmUgYnlcbiAgLy8gcmVtb3ZlRG91YmxlRW5jb2RpbmdfLlxuICByZXR1cm4gb3B0X3ByZXNlcnZlUmVzZXJ2ZWQgPyBkZWNvZGVVUkkodmFsLnJlcGxhY2UoLyUyNS9nLCAnJTI1MjUnKSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcbn07XG5cblxuLyoqXG4gKiBJZiB1bmVzY2FwZWRQYXJ0IGlzIG5vbiBudWxsLCB0aGVuIGVzY2FwZXMgYW55IGNoYXJhY3RlcnMgaW4gaXQgdGhhdCBhcmVuJ3RcbiAqIHZhbGlkIGNoYXJhY3RlcnMgaW4gYSB1cmwgYW5kIGFsc28gZXNjYXBlcyBhbnkgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXRcbiAqIGFwcGVhciBpbiBleHRyYS5cbiAqXG4gKiBAcGFyYW0geyp9IHVuZXNjYXBlZFBhcnQgVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gZXh0cmEgQSBjaGFyYWN0ZXIgc2V0IG9mIGNoYXJhY3RlcnMgaW4gW1xcMDEtXFwxNzddLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3JlbW92ZURvdWJsZUVuY29kaW5nIElmIHRydWUsIHJlbW92ZSBkb3VibGUgcGVyY2VudFxuICogICAgIGVuY29kaW5nLlxuICogQHJldHVybiB7P3N0cmluZ30gbnVsbCBpZmYgdW5lc2NhcGVkUGFydCA9PSBudWxsLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5VcmkuZW5jb2RlU3BlY2lhbENoYXJzXyA9IGZ1bmN0aW9uKFxuICAgIHVuZXNjYXBlZFBhcnQsIGV4dHJhLCBvcHRfcmVtb3ZlRG91YmxlRW5jb2RpbmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZW9mIHVuZXNjYXBlZFBhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGVuY29kZWQgPSBlbmNvZGVVUkkodW5lc2NhcGVkUGFydCkucmVwbGFjZShleHRyYSwgZ29vZy5VcmkuZW5jb2RlQ2hhcl8pO1xuICAgIGlmIChvcHRfcmVtb3ZlRG91YmxlRW5jb2RpbmcpIHtcbiAgICAgIC8vIGVuY29kZVVSSSBkb3VibGUtZXNjYXBlcyAlWFggc2VxdWVuY2VzIHVzZWQgdG8gcmVwcmVzZW50IHJlc3RyaWN0ZWRcbiAgICAgIC8vIGNoYXJhY3RlcnMgaW4gc29tZSBVUkkgY29tcG9uZW50cywgcmVtb3ZlIHRoZSBkb3VibGUgZXNjYXBpbmcgaGVyZS5cbiAgICAgIGVuY29kZWQgPSBnb29nLlVyaS5yZW1vdmVEb3VibGVFbmNvZGluZ18oZW5jb2RlZCk7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgY2hhcmFjdGVyIGluIFtcXDAxLVxcMTc3XSB0byBpdHMgdW5pY29kZSBjaGFyYWN0ZXIgZXF1aXZhbGVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaCBPbmUgY2hhcmFjdGVyIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gRW5jb2RlZCBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5lbmNvZGVDaGFyXyA9IGZ1bmN0aW9uKGNoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG4gPSBjaC5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gJyUnICsgKChuID4+IDQpICYgMHhmKS50b1N0cmluZygxNikgKyAobiAmIDB4ZikudG9TdHJpbmcoMTYpO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgZG91YmxlIHBlcmNlbnQtZW5jb2RpbmcgZnJvbSBhIHN0cmluZy5cbiAqIEBwYXJhbSAge3N0cmluZ30gZG91YmxlRW5jb2RlZFN0cmluZyBTdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIHdpdGggZG91YmxlIGVuY29kaW5nIHJlbW92ZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5yZW1vdmVEb3VibGVFbmNvZGluZ18gPSBmdW5jdGlvbihkb3VibGVFbmNvZGVkU3RyaW5nKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGRvdWJsZUVuY29kZWRTdHJpbmcucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLCAnJSQxJyk7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBjaGFyYWN0ZXJzIHRoYXQgYXJlIGRpc2FsbG93ZWQgaW4gdGhlIHNjaGVtZSBvclxuICogdXNlckluZm8gcGFydCBvZiB0aGUgVVJJLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVXJpLnJlRGlzYWxsb3dlZEluU2NoZW1lT3JVc2VySW5mb18gPSAvWyNcXC9cXD9AXS9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBjaGFyYWN0ZXJzIHRoYXQgYXJlIGRpc2FsbG93ZWQgaW4gYSByZWxhdGl2ZSBwYXRoLlxuICogQ29sb24gaXMgaW5jbHVkZWQgZHVlIHRvIFJGQyAzOTg2IDMuMy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5yZURpc2FsbG93ZWRJblJlbGF0aXZlUGF0aF8gPSAvW1xcI1xcPzpdL2c7XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIGNoYXJhY3RlcnMgdGhhdCBhcmUgZGlzYWxsb3dlZCBpbiBhbiBhYnNvbHV0ZSBwYXRoLlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVXJpLnJlRGlzYWxsb3dlZEluQWJzb2x1dGVQYXRoXyA9IC9bXFwjXFw/XS9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBjaGFyYWN0ZXJzIHRoYXQgYXJlIGRpc2FsbG93ZWQgaW4gdGhlIHF1ZXJ5LlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVXJpLnJlRGlzYWxsb3dlZEluUXVlcnlfID0gL1tcXCNcXD9AXS9nO1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBjaGFyYWN0ZXJzIHRoYXQgYXJlIGRpc2FsbG93ZWQgaW4gdGhlIGZyYWdtZW50LlxuICogQHR5cGUge1JlZ0V4cH1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuVXJpLnJlRGlzYWxsb3dlZEluRnJhZ21lbnRfID0gLyMvZztcblxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHR3byBVUklzIGhhdmUgdGhlIHNhbWUgZG9tYWluLlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaTFTdHJpbmcgRmlyc3QgVVJJIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkyU3RyaW5nIFNlY29uZCBVUkkgc3RyaW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgdHdvIFVSSXMgaGF2ZSB0aGUgc2FtZSBkb21haW47IGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZ29vZy5VcmkuaGF2ZVNhbWVEb21haW4gPSBmdW5jdGlvbih1cmkxU3RyaW5nLCB1cmkyU3RyaW5nKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gRGlmZmVycyBmcm9tIGdvb2cudXJpLnV0aWxzLmhhdmVTYW1lRG9tYWluLCBzaW5jZSB0aGlzIGlnbm9yZXMgc2NoZW1lLlxuICAvLyBUT0RPKGdib3llcik6IEhhdmUgdGhpcyBqdXN0IGNhbGwgZ29vZy51cmkudXRpbC5oYXZlU2FtZURvbWFpbi5cbiAgdmFyIHBpZWNlczEgPSBnb29nLnVyaS51dGlscy5zcGxpdCh1cmkxU3RyaW5nKTtcbiAgdmFyIHBpZWNlczIgPSBnb29nLnVyaS51dGlscy5zcGxpdCh1cmkyU3RyaW5nKTtcbiAgcmV0dXJuIHBpZWNlczFbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguRE9NQUlOXSA9PVxuICAgICAgcGllY2VzMltnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5ET01BSU5dICYmXG4gICAgICBwaWVjZXMxW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBPUlRdID09XG4gICAgICBwaWVjZXMyW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBPUlRdO1xufTtcblxuXG5cbi8qKlxuICogQ2xhc3MgdXNlZCB0byByZXByZXNlbnQgVVJJIHF1ZXJ5IHBhcmFtZXRlcnMuICBJdCBpcyBlc3NlbnRpYWxseSBhIGhhc2ggb2ZcbiAqIG5hbWUtdmFsdWUgcGFpcnMsIHRob3VnaCBhIG5hbWUgY2FuIGJlIHByZXNlbnQgbW9yZSB0aGFuIG9uY2UuXG4gKlxuICogSGFzIHRoZSBzYW1lIGludGVyZmFjZSBhcyB0aGUgY29sbGVjdGlvbnMgaW4gZ29vZy5zdHJ1Y3RzLlxuICpcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9xdWVyeSBPcHRpb25hbCBlbmNvZGVkIHF1ZXJ5IHN0cmluZyB0byBwYXJzZSBpbnRvXG4gKiAgICAgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pZ25vcmVDYXNlIElmIHRydWUsIGlnbm9yZSB0aGUgY2FzZSBvZiB0aGUgcGFyYW1ldGVyXG4gKiAgICAgbmFtZSBpbiAjZ2V0LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKiBAZmluYWxcbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhID0gZnVuY3Rpb24ob3B0X3F1ZXJ5LCBvcHRfaWdub3JlQ2FzZSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBUaGUgbWFwIGNvbnRhaW5pbmcgbmFtZS92YWx1ZSBvciBuYW1lL2FycmF5LW9mLXZhbHVlcyBwYWlycy5cbiAgICogTWF5IGJlIG51bGwgaWYgaXQgcmVxdWlyZXMgcGFyc2luZyBmcm9tIHRoZSBxdWVyeSBzdHJpbmcuXG4gICAqXG4gICAqIFdlIG5lZWQgdG8gdXNlIGEgTWFwIGJlY2F1c2Ugd2UgY2Fubm90IGd1YXJhbnRlZSB0aGF0IHRoZSBrZXkgbmFtZXMgd2lsbFxuICAgKiBub3QgYmUgcHJvYmxlbWF0aWMgZm9yIElFLlxuICAgKlxuICAgKiBAcHJpdmF0ZSB7P01hcDxzdHJpbmcsICFBcnJheTwqPj59XG4gICAqL1xuICB0aGlzLmtleU1hcF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHBhcmFtcywgb3IgbnVsbCBpZiBpdCByZXF1aXJlcyBjb21wdXRpbmcuXG4gICAqIEBwcml2YXRlIHs/bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5jb3VudF8gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBFbmNvZGVkIHF1ZXJ5IHN0cmluZywgb3IgbnVsbCBpZiBpdCByZXF1aXJlcyBjb21wdXRpbmcgZnJvbSB0aGUga2V5IG1hcC5cbiAgICogQHByaXZhdGUgez9zdHJpbmd9XG4gICAqL1xuICB0aGlzLmVuY29kZWRRdWVyeV8gPSBvcHRfcXVlcnkgfHwgbnVsbDtcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgaWdub3JlIHRoZSBjYXNlIG9mIHRoZSBwYXJhbWV0ZXIgbmFtZSBpbiAjZ2V0LlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaWdub3JlQ2FzZV8gPSAhIW9wdF9pZ25vcmVDYXNlO1xufTtcblxuXG4vKipcbiAqIElmIHRoZSB1bmRlcmx5aW5nIGtleSBtYXAgaXMgbm90IHlldCBpbml0aWFsaXplZCwgaXQgcGFyc2VzIHRoZVxuICogcXVlcnkgc3RyaW5nIGFuZCBmaWxscyB0aGUgbWFwIHdpdGggcGFyc2VkIGRhdGEuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5rZXlNYXBfKSB7XG4gICAgdGhpcy5rZXlNYXBfID0gLyoqIEB0eXBlIHshTWFwPHN0cmluZywgIUFycmF5PCo+Pn0gKi8gKG5ldyBNYXAoKSk7XG4gICAgdGhpcy5jb3VudF8gPSAwO1xuICAgIGlmICh0aGlzLmVuY29kZWRRdWVyeV8pIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGdvb2cudXJpLnV0aWxzLnBhcnNlUXVlcnlEYXRhKHRoaXMuZW5jb2RlZFF1ZXJ5XywgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICBzZWxmLmFkZChnb29nLnN0cmluZy51cmxEZWNvZGUobmFtZSksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcXVlcnkgZGF0YSBpbnN0YW5jZSBmcm9tIGEgbWFwIG9mIG5hbWVzIGFuZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHshZ29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2U8c3RyaW5nLCA/PnwhT2JqZWN0fSBtYXAgTWFwIG9mIHN0cmluZ1xuICogICAgIHBhcmFtZXRlciBuYW1lcyB0byBwYXJhbWV0ZXIgdmFsdWUuIElmIHBhcmFtZXRlciB2YWx1ZSBpcyBhbiBhcnJheSwgaXQgaXNcbiAqICAgICB0cmVhdGVkIGFzIGlmIHRoZSBrZXkgbWFwcyB0byBlYWNoIGluZGl2aWR1YWwgdmFsdWUgaW4gdGhlXG4gKiAgICAgYXJyYXkuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaWdub3JlQ2FzZSBJZiB0cnVlLCBpZ25vcmUgdGhlIGNhc2Ugb2YgdGhlIHBhcmFtZXRlclxuICogICAgIG5hbWUgaW4gI2dldC5cbiAqIEByZXR1cm4geyFnb29nLlVyaS5RdWVyeURhdGF9IFRoZSBwb3B1bGF0ZWQgcXVlcnkgZGF0YSBpbnN0YW5jZS5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLmNyZWF0ZUZyb21NYXAgPSBmdW5jdGlvbihtYXAsIG9wdF9pZ25vcmVDYXNlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGtleXMgPSBnb29nLnN0cnVjdHMuZ2V0S2V5cyhtYXApO1xuICBpZiAodHlwZW9mIGtleXMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleXMgYXJlIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5RGF0YSA9IG5ldyBnb29nLlVyaS5RdWVyeURhdGEobnVsbCwgb3B0X2lnbm9yZUNhc2UpO1xuICB2YXIgdmFsdWVzID0gZ29vZy5zdHJ1Y3RzLmdldFZhbHVlcyhtYXApO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcXVlcnlEYXRhLmFkZChrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVlcnlEYXRhLnNldFZhbHVlcyhrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHF1ZXJ5RGF0YTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1ZXJ5IGRhdGEgaW5zdGFuY2UgZnJvbSBwYXJhbGxlbCBhcnJheXMgb2YgcGFyYW1ldGVyIG5hbWVzXG4gKiBhbmQgdmFsdWVzLiBBbGxvd3MgZm9yIGR1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXMuIFRocm93cyBhbiBlcnJvciBpZiB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGFycmF5cyBkaWZmZXIuXG4gKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0ga2V5cyBQYXJhbWV0ZXIgbmFtZXMuXG4gKiBAcGFyYW0geyFBcnJheTw/Pn0gdmFsdWVzIFBhcmFtZXRlciB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaWdub3JlQ2FzZSBJZiB0cnVlLCBpZ25vcmUgdGhlIGNhc2Ugb2YgdGhlIHBhcmFtZXRlclxuICogICAgIG5hbWUgaW4gI2dldC5cbiAqIEByZXR1cm4geyFnb29nLlVyaS5RdWVyeURhdGF9IFRoZSBwb3B1bGF0ZWQgcXVlcnkgZGF0YSBpbnN0YW5jZS5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLmNyZWF0ZUZyb21LZXlzVmFsdWVzID0gZnVuY3Rpb24oXG4gICAga2V5cywgdmFsdWVzLCBvcHRfaWdub3JlQ2FzZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChrZXlzLmxlbmd0aCAhPSB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNtYXRjaGVkIGxlbmd0aHMgZm9yIGtleXMvdmFsdWVzJyk7XG4gIH1cbiAgdmFyIHF1ZXJ5RGF0YSA9IG5ldyBnb29nLlVyaS5RdWVyeURhdGEobnVsbCwgb3B0X2lnbm9yZUNhc2UpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBxdWVyeURhdGEuYWRkKGtleXNbaV0sIHZhbHVlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIHF1ZXJ5RGF0YTtcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHs/bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMuXG4gKi9cbmdvb2cuVXJpLlF1ZXJ5RGF0YS5wcm90b3R5cGUuZ2V0Q291bnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICByZXR1cm4gdGhpcy5jb3VudF87XG59O1xuXG5cbi8qKlxuICogQWRkcyBhIGtleSB2YWx1ZSBwYWlyLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBOYW1lLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaS5RdWVyeURhdGF9IEluc3RhbmNlIG9mIHRoaXMgb2JqZWN0LlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICB0aGlzLmludmFsaWRhdGVDYWNoZV8oKTtcblxuICBrZXkgPSB0aGlzLmdldEtleU5hbWVfKGtleSk7XG4gIHZhciB2YWx1ZXMgPSB0aGlzLmtleU1hcF8uZ2V0KGtleSk7XG4gIGlmICghdmFsdWVzKSB7XG4gICAgdGhpcy5rZXlNYXBfLnNldChrZXksICh2YWx1ZXMgPSBbXSkpO1xuICB9XG4gIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgdGhpcy5jb3VudF8gPSBnb29nLmFzc2VydHMuYXNzZXJ0TnVtYmVyKHRoaXMuY291bnRfKSArIDE7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIHRoZSBwYXJhbXMgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBOYW1lLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbnkgcGFyYW1ldGVyIHdhcyByZW1vdmVkLlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5zdXJlS2V5TWFwSW5pdGlhbGl6ZWRfKCk7XG5cbiAga2V5ID0gdGhpcy5nZXRLZXlOYW1lXyhrZXkpO1xuICBpZiAodGhpcy5rZXlNYXBfLmhhcyhrZXkpKSB7XG4gICAgdGhpcy5pbnZhbGlkYXRlQ2FjaGVfKCk7XG5cbiAgICAvLyBEZWNyZW1lbnQgcGFyYW1ldGVyIGNvdW50LlxuICAgIHRoaXMuY291bnRfID1cbiAgICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydE51bWJlcih0aGlzLmNvdW50XykgLSB0aGlzLmtleU1hcF8uZ2V0KGtleSkubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLmtleU1hcF8uZGVsZXRlKGtleSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgcGFyYW1ldGVycy5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuaW52YWxpZGF0ZUNhY2hlXygpO1xuICB0aGlzLmtleU1hcF8gPSBudWxsO1xuICB0aGlzLmNvdW50XyA9IDA7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB3ZSBoYXZlIGFueSBwYXJhbWV0ZXJzLlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICByZXR1cm4gdGhpcy5jb3VudF8gPT0gMDtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZXJlIGlzIGEgcGFyYW1ldGVyIHdpdGggdGhlIGdpdmVuIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHBhcmFtZXRlciBuYW1lIHRvIGNoZWNrIGZvci5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgaXMgYSBwYXJhbWV0ZXIgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5jb250YWluc0tleSA9IGZ1bmN0aW9uKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5zdXJlS2V5TWFwSW5pdGlhbGl6ZWRfKCk7XG4gIGtleSA9IHRoaXMuZ2V0S2V5TmFtZV8oa2V5KTtcbiAgcmV0dXJuIHRoaXMua2V5TWFwXy5oYXMoa2V5KTtcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZXJlIGlzIGEgcGFyYW1ldGVyIHdpdGggdGhlIGdpdmVuIHZhbHVlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgZm9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGVyZSBpcyBhIHBhcmFtZXRlciB3aXRoIHRoZSBnaXZlbiB2YWx1ZS5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5jb250YWluc1ZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBOT1RFKGFydik6IFRoaXMgc29sdXRpb24gZ29lcyB0aHJvdWdoIGFsbCB0aGUgcGFyYW1zIGV2ZW4gaWYgaXQgd2FzIHRoZVxuICAvLyBmaXJzdCBwYXJhbS4gV2UgY2FuIGdldCBhcm91bmQgdGhpcyBieSBub3QgcmV1c2luZyBjb2RlIG9yIGJ5IHN3aXRjaGluZyB0b1xuICAvLyBpdGVyYXRvcnMuXG4gIHZhciB2YWxzID0gdGhpcy5nZXRWYWx1ZXMoKTtcbiAgcmV0dXJuIGdvb2cuYXJyYXkuY29udGFpbnModmFscywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBvbiBldmVyeSBrZXktdmFsdWUgcGFpciBpbiB0aGUgbWFwLCBpbmNsdWRpbmcgZHVwbGljYXRlIGtleXMuXG4gKiBUaGlzIHdvbid0IG1haW50YWluIG9yaWdpbmFsIG9yZGVyIHdoZW4gZHVwbGljYXRlIGtleXMgYXJlIGludGVyc3BlcnNlZCAobGlrZVxuICogZ2V0S2V5cygpIC8gZ2V0VmFsdWVzKCkpLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCA/LCBzdHJpbmcsICFnb29nLlVyaS5RdWVyeURhdGEpfSBmXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X3Njb3BlIFRoZSB2YWx1ZSBvZiBcInRoaXNcIiBpbnNpZGUgZi5cbiAqIEB0ZW1wbGF0ZSBTQ09QRVxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihmLCBvcHRfc2NvcGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICB0aGlzLmtleU1hcF8uZm9yRWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgZi5jYWxsKG9wdF9zY29wZSwgdmFsdWUsIGtleSwgdGhpcyk7XG4gICAgfSwgdGhpcyk7XG4gIH0sIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYWxsIHRoZSBrZXlzIG9mIHRoZSBwYXJhbWV0ZXJzLiBJZiBhIGtleSBpcyB1c2VkIG11bHRpcGxlIHRpbWVzXG4gKiBpdCB3aWxsIGJlIGluY2x1ZGVkIG11bHRpcGxlIHRpbWVzIGluIHRoZSByZXR1cm5lZCBhcnJheVxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IEFsbCB0aGUga2V5cyBvZiB0aGUgcGFyYW1ldGVycy5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5nZXRLZXlzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5lbnN1cmVLZXlNYXBJbml0aWFsaXplZF8oKTtcbiAgLy8gV2UgbmVlZCB0byBnZXQgdGhlIHZhbHVlcyB0byBrbm93IGhvdyBtYW55IGtleXMgdG8gYWRkLlxuICBjb25zdCB2YWxzID0gQXJyYXkuZnJvbSh0aGlzLmtleU1hcF8udmFsdWVzKCkpO1xuICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleU1hcF8ua2V5cygpKTtcbiAgY29uc3QgcnYgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsID0gdmFsc1tpXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbC5sZW5ndGg7IGorKykge1xuICAgICAgcnYucHVzaChrZXlzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ2O1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYWxsIHRoZSB2YWx1ZXMgb2YgdGhlIHBhcmFtZXRlcnMgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4gSWYgdGhlIHF1ZXJ5XG4gKiBkYXRhIGhhcyBubyBzdWNoIGtleSB0aGlzIHdpbGwgcmV0dXJuIGFuIGVtcHR5IGFycmF5LiBJZiBubyBrZXkgaXMgZ2l2ZW5cbiAqIGFsbCB2YWx1ZXMgd2lsIGJlIHJldHVybmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfa2V5IFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgdG8gZ2V0IHRoZSB2YWx1ZXMgZm9yLlxuICogQHJldHVybiB7IUFycmF5PD8+fSBBbGwgdGhlIHZhbHVlcyBvZiB0aGUgcGFyYW1ldGVycyB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uKG9wdF9rZXkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICBsZXQgcnYgPSBbXTtcbiAgaWYgKHR5cGVvZiBvcHRfa2V5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0aGlzLmNvbnRhaW5zS2V5KG9wdF9rZXkpKSB7XG4gICAgICBydiA9IHJ2LmNvbmNhdCh0aGlzLmtleU1hcF8uZ2V0KHRoaXMuZ2V0S2V5TmFtZV8ob3B0X2tleSkpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gUmV0dXJuIGFsbCB2YWx1ZXMuXG4gICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLmtleU1hcF8udmFsdWVzKCkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBydiA9IHJ2LmNvbmNhdCh2YWx1ZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogU2V0cyBhIGtleSB2YWx1ZSBwYWlyIGFuZCByZW1vdmVzIGFsbCBvdGhlciBrZXlzIHdpdGggdGhlIHNhbWUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBOYW1lLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZS5cbiAqIEByZXR1cm4geyFnb29nLlVyaS5RdWVyeURhdGF9IEluc3RhbmNlIG9mIHRoaXMgb2JqZWN0LlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICB0aGlzLmludmFsaWRhdGVDYWNoZV8oKTtcblxuICAvLyBUT0RPKGNocmlzaGVucnkpOiBUaGlzIGNvdWxkIGJlIGJldHRlciB3cml0dGVuIGFzXG4gIC8vIHRoaXMucmVtb3ZlKGtleSksIHRoaXMuYWRkKGtleSwgdmFsdWUpLCBidXQgdGhhdCB3b3VsZCByZW9yZGVyXG4gIC8vIHRoZSBrZXkgKHNpbmNlIHRoZSBrZXkgaXMgZmlyc3QgcmVtb3ZlZCBhbmQgdGhlbiBhZGRlZCBhdCB0aGVcbiAgLy8gZW5kKSBhbmQgd2Ugd291bGQgaGF2ZSB0byBmaXggdW5pdCB0ZXN0cyB0aGF0IGRlcGVuZCBvbiBrZXlcbiAgLy8gb3JkZXJpbmcuXG4gIGtleSA9IHRoaXMuZ2V0S2V5TmFtZV8oa2V5KTtcbiAgaWYgKHRoaXMuY29udGFpbnNLZXkoa2V5KSkge1xuICAgIHRoaXMuY291bnRfID1cbiAgICAgICAgZ29vZy5hc3NlcnRzLmFzc2VydE51bWJlcih0aGlzLmNvdW50XykgLSB0aGlzLmtleU1hcF8uZ2V0KGtleSkubGVuZ3RoO1xuICB9XG4gIHRoaXMua2V5TWFwXy5zZXQoa2V5LCBbdmFsdWVdKTtcbiAgdGhpcy5jb3VudF8gPSBnb29nLmFzc2VydHMuYXNzZXJ0TnVtYmVyKHRoaXMuY291bnRfKSArIDE7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUga2V5LiBJZiB0aGUgcXVlcnkgZGF0YSBoYXMgbm9cbiAqIHN1Y2gga2V5IHRoaXMgd2lsbCByZXR1cm4gdW5kZWZpbmVkIG9yIHRoZSBvcHRpb25hbCBkZWZhdWx0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIHRvIGdldCB0aGUgdmFsdWUgZm9yLlxuICogQHBhcmFtIHsqPX0gb3B0X2RlZmF1bHQgVGhlIGRlZmF1bHQgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSBxdWVyeSBkYXRhXG4gKiAgICAgaGFzIG5vIHN1Y2gga2V5LlxuICogQHJldHVybiB7Kn0gVGhlIGZpcnN0IHN0cmluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSwgb3Igb3B0X2RlZmF1bHRcbiAqICAgICBpZiB0aGVyZSdzIG5vIHZhbHVlLlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgb3B0X2RlZmF1bHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBvcHRfZGVmYXVsdDtcbiAgfVxuICB2YXIgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoa2V5KTtcbiAgcmV0dXJuIHZhbHVlcy5sZW5ndGggPiAwID8gU3RyaW5nKHZhbHVlc1swXSkgOiBvcHRfZGVmYXVsdDtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZXMgZm9yIGEga2V5LiBJZiB0aGUga2V5IGFscmVhZHkgZXhpc3RzLCB0aGlzIHdpbGxcbiAqIG92ZXJyaWRlIGFsbCBvZiB0aGUgZXhpc3RpbmcgdmFsdWVzIHRoYXQgY29ycmVzcG9uZCB0byB0aGUga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIHNldCB2YWx1ZXMgZm9yLlxuICogQHBhcmFtIHshQXJyYXk8Pz59IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHNldC5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5zZXRWYWx1ZXMgPSBmdW5jdGlvbihrZXksIHZhbHVlcykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVtb3ZlKGtleSk7XG5cbiAgaWYgKHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5pbnZhbGlkYXRlQ2FjaGVfKCk7XG4gICAgdGhpcy5rZXlNYXBfLnNldCh0aGlzLmdldEtleU5hbWVfKGtleSksIGdvb2cuYXJyYXkuY2xvbmUodmFsdWVzKSk7XG4gICAgdGhpcy5jb3VudF8gPSBnb29nLmFzc2VydHMuYXNzZXJ0TnVtYmVyKHRoaXMuY291bnRfKSArIHZhbHVlcy5sZW5ndGg7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEVuY29kZWQgcXVlcnkgc3RyaW5nLlxuICogQG92ZXJyaWRlXG4gKi9cbmdvb2cuVXJpLlF1ZXJ5RGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5lbmNvZGVkUXVlcnlfKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlZFF1ZXJ5XztcbiAgfVxuXG4gIGlmICghdGhpcy5rZXlNYXBfKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3Qgc2IgPSBbXTtcblxuICAvLyBJbiB0aGUgcGFzdCwgd2UgdXNlIHRoaXMuZ2V0S2V5cygpIGFuZCB0aGlzLmdldFZhbHMoKSwgYnV0IHRoYXRcbiAgLy8gZ2VuZXJhdGVzIGEgbG90IG9mIGFsbG9jYXRpb25zIGFzIGNvbXBhcmVkIHRvIHNpbXBseSBpdGVyYXRpbmdcbiAgLy8gb3ZlciB0aGUga2V5cy5cbiAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20odGhpcy5rZXlNYXBfLmtleXMoKSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgY29uc3QgZW5jb2RlZEtleSA9IGdvb2cuc3RyaW5nLnVybEVuY29kZShrZXkpO1xuICAgIGNvbnN0IHZhbCA9IHRoaXMuZ2V0VmFsdWVzKGtleSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWwubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBwYXJhbSA9IGVuY29kZWRLZXk7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBudWxsIGFuZCB1bmRlZmluZWQgYXJlIGVuY29kZWQgaW50byB0aGUgdXJsIGFzXG4gICAgICAvLyBsaXRlcmFsIHN0cmluZ3MuXG4gICAgICBpZiAodmFsW2pdICE9PSAnJykge1xuICAgICAgICBwYXJhbSArPSAnPScgKyBnb29nLnN0cmluZy51cmxFbmNvZGUodmFsW2pdKTtcbiAgICAgIH1cbiAgICAgIHNiLnB1c2gocGFyYW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLmVuY29kZWRRdWVyeV8gPSBzYi5qb2luKCcmJyk7XG59O1xuXG5cbi8qKlxuICogQHRocm93cyBVUklFcnJvciBJZiBVUkkgaXMgbWFsZm9ybWVkICh0aGF0IGlzLCBpZiBkZWNvZGVVUklDb21wb25lbnQgZmFpbHMgb25cbiAqICAgICBhbnkgb2YgdGhlIFVSSSBjb21wb25lbnRzKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gRGVjb2RlZCBxdWVyeSBzdHJpbmcuXG4gKi9cbmdvb2cuVXJpLlF1ZXJ5RGF0YS5wcm90b3R5cGUudG9EZWNvZGVkU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cuVXJpLmRlY29kZU9yRW1wdHlfKHRoaXMudG9TdHJpbmcoKSk7XG59O1xuXG5cbi8qKlxuICogSW52YWxpZGF0ZSB0aGUgY2FjaGUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLmludmFsaWRhdGVDYWNoZV8gPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmVuY29kZWRRdWVyeV8gPSBudWxsO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleXMgdGhhdCBhcmUgbm90IGluIHRoZSBwcm92aWRlZCBsaXN0LiAoTW9kaWZpZXMgdGhpcyBvYmplY3QuKVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBrZXlzIFRoZSBkZXNpcmVkIGtleXMuXG4gKiBAcmV0dXJuIHshZ29vZy5VcmkuUXVlcnlEYXRhfSBhIHJlZmVyZW5jZSB0byB0aGlzIG9iamVjdC5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5maWx0ZXJLZXlzID0gZnVuY3Rpb24oa2V5cykge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuZW5zdXJlS2V5TWFwSW5pdGlhbGl6ZWRfKCk7XG4gIHRoaXMua2V5TWFwXy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKCFnb29nLmFycmF5LmNvbnRhaW5zKGtleXMsIGtleSkpIHtcbiAgICAgIHRoaXMucmVtb3ZlKGtleSk7XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogQ2xvbmUgdGhlIHF1ZXJ5IGRhdGEgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHshZ29vZy5VcmkuUXVlcnlEYXRhfSBOZXcgaW5zdGFuY2Ugb2YgdGhlIFF1ZXJ5RGF0YSBvYmplY3QuXG4gKi9cbmdvb2cuVXJpLlF1ZXJ5RGF0YS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgcnYgPSBuZXcgZ29vZy5VcmkuUXVlcnlEYXRhKCk7XG4gIHJ2LmVuY29kZWRRdWVyeV8gPSB0aGlzLmVuY29kZWRRdWVyeV87XG4gIGlmICh0aGlzLmtleU1hcF8pIHtcbiAgICBydi5rZXlNYXBfID0gLyoqIEB0eXBlIHshTWFwPHN0cmluZywgIUFycmF5PCo+Pn0gKi8gKG5ldyBNYXAodGhpcy5rZXlNYXBfKSk7XG4gICAgcnYuY291bnRfID0gdGhpcy5jb3VudF87XG4gIH1cbiAgcmV0dXJuIHJ2O1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGtleSBuYW1lIGZyb20gYSBKYXZhU2NyaXB0IG9iamVjdC4gQ29udmVydHNcbiAqIHRoZSBvYmplY3QgdG8gYSBzdHJpbmcsIGFuZCB0byBsb3dlciBjYXNlIGlmIG5lY2Vzc2FyeS5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IGFyZyBUaGUgb2JqZWN0IHRvIGdldCBhIGtleSBuYW1lIGZyb20uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHZhbGlkIGtleSBuYW1lIHdoaWNoIGNhbiBiZSBsb29rZWQgdXAgaW4gI2tleU1hcF8uXG4gKi9cbmdvb2cuVXJpLlF1ZXJ5RGF0YS5wcm90b3R5cGUuZ2V0S2V5TmFtZV8gPSBmdW5jdGlvbihhcmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIga2V5TmFtZSA9IFN0cmluZyhhcmcpO1xuICBpZiAodGhpcy5pZ25vcmVDYXNlXykge1xuICAgIGtleU5hbWUgPSBrZXlOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIGtleU5hbWU7XG59O1xuXG5cbi8qKlxuICogSWdub3JlIGNhc2UgaW4gcGFyYW1ldGVyIG5hbWVzLlxuICogTk9URTogSWYgdGhlcmUgYXJlIGFscmVhZHkga2V5L3ZhbHVlIHBhaXJzIGluIHRoZSBRdWVyeURhdGEsIGFuZFxuICogaWdub3JlQ2FzZV8gaXMgc2V0IHRvIGZhbHNlLCB0aGUga2V5cyB3aWxsIGFsbCBiZSBsb3dlci1jYXNlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlQ2FzZSB3aGV0aGVyIHRoaXMgZ29vZy5Vcmkgc2hvdWxkIGlnbm9yZSBjYXNlLlxuICovXG5nb29nLlVyaS5RdWVyeURhdGEucHJvdG90eXBlLnNldElnbm9yZUNhc2UgPSBmdW5jdGlvbihpZ25vcmVDYXNlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHJlc2V0S2V5cyA9IGlnbm9yZUNhc2UgJiYgIXRoaXMuaWdub3JlQ2FzZV87XG4gIGlmIChyZXNldEtleXMpIHtcbiAgICB0aGlzLmVuc3VyZUtleU1hcEluaXRpYWxpemVkXygpO1xuICAgIHRoaXMuaW52YWxpZGF0ZUNhY2hlXygpO1xuICAgIHRoaXMua2V5TWFwXy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBsb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChrZXkgIT0gbG93ZXJDYXNlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGtleSk7XG4gICAgICAgIHRoaXMuc2V0VmFsdWVzKGxvd2VyQ2FzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9XG4gIHRoaXMuaWdub3JlQ2FzZV8gPSBpZ25vcmVDYXNlO1xufTtcblxuXG4vKipcbiAqIEV4dGVuZHMgYSBxdWVyeSBkYXRhIG9iamVjdCB3aXRoIGFub3RoZXIgcXVlcnkgZGF0YSBvciBtYXAgbGlrZSBvYmplY3QuIFRoaXNcbiAqIG9wZXJhdGVzICdpbi1wbGFjZScsIGl0IGRvZXMgbm90IGNyZWF0ZSBhIG5ldyBRdWVyeURhdGEgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Li4uKD9nb29nLlVyaS5RdWVyeURhdGF8P2dvb2cuY29sbGVjdGlvbnMubWFwcy5NYXBMaWtlPD8sXG4gKiAgICAgPz58P09iamVjdCl9IHZhcl9hcmdzIFRoZSBvYmplY3QgZnJvbSB3aGljaCBrZXkgdmFsdWUgcGFpcnMgd2lsbCBiZVxuICogICAgIGNvcGllZC4gTm90ZTogZG9lcyBub3QgYWNjZXB0IG51bGwuXG4gKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9IFVzZSBkZXByZWNhdGVkIGdvb2cuc3RydWN0cy5mb3JFYWNoIHRvIGFsbG93IGRpZmZlcmVudFxuICogdHlwZXMgb2YgcGFyYW1ldGVycy5cbiAqL1xuZ29vZy5VcmkuUXVlcnlEYXRhLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICAndXNlIHN0cmljdCc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRhdGEgPSBhcmd1bWVudHNbaV07XG4gICAgZ29vZy5zdHJ1Y3RzLmZvckVhY2goZGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdGhpcy5hZGQoa2V5LCB2YWx1ZSk7XG4gICAgfSwgdGhpcyk7XG4gIH1cbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0aWVzIGZvciBzdHJpbmcgbWFuaXB1bGF0aW9uLlxuICovXG5cblxuLyoqXG4gKiBOYW1lc3BhY2UgZm9yIHN0cmluZyB1dGlsaXRpZXNcbiAqL1xuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZycpO1xuZ29vZy5wcm92aWRlKCdnb29nLnN0cmluZy5Vbmljb2RlJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5kb20uc2FmZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmh0bWwudW5jaGVja2VkY29udmVyc2lvbnMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuQ29uc3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcuaW50ZXJuYWwnKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IEVuYWJsZXMgSFRNTCBlc2NhcGluZyBvZiBsb3dlcmNhc2UgbGV0dGVyIFwiZVwiIHdoaWNoIGhlbHBzXG4gKiB3aXRoIGRldGVjdGlvbiBvZiBkb3VibGUtZXNjYXBpbmcgYXMgdGhpcyBsZXR0ZXIgaXMgZnJlcXVlbnRseSB1c2VkLlxuICovXG5nb29nLnN0cmluZy5ERVRFQ1RfRE9VQkxFX0VTQ0FQSU5HID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORycsIGZhbHNlKTtcblxuXG4vKipcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdG8gZm9yY2Ugbm9uLWRvbSBodG1sIHVuZXNjYXBpbmcuXG4gKi9cbmdvb2cuc3RyaW5nLkZPUkNFX05PTl9ET01fSFRNTF9VTkVTQ0FQSU5HID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5zdHJpbmcuRk9SQ0VfTk9OX0RPTV9IVE1MX1VORVNDQVBJTkcnLCBmYWxzZSk7XG5cblxuLyoqXG4gKiBDb21tb24gVW5pY29kZSBzdHJpbmcgY2hhcmFjdGVycy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmdvb2cuc3RyaW5nLlVuaWNvZGUgPSB7XG4gIE5CU1A6ICdcXHhhMCdcbn07XG5cblxuLyoqXG4gKiBGYXN0IHByZWZpeC1jaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgc3RhcnQgb2YgYHN0cmAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBzdHJgIGJlZ2lucyB3aXRoIGBwcmVmaXhgLlxuICovXG5nb29nLnN0cmluZy5zdGFydHNXaXRoID0gZ29vZy5zdHJpbmcuaW50ZXJuYWwuc3RhcnRzV2l0aDtcblxuXG4vKipcbiAqIEZhc3Qgc3VmZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gc3VmZml4IEEgc3RyaW5nIHRvIGxvb2sgZm9yIGF0IHRoZSBlbmQgb2YgYHN0cmAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBzdHJgIGVuZHMgd2l0aCBgc3VmZml4YC5cbiAqL1xuZ29vZy5zdHJpbmcuZW5kc1dpdGggPSBnb29nLnN0cmluZy5pbnRlcm5hbC5lbmRzV2l0aDtcblxuXG4vKipcbiAqIENhc2UtaW5zZW5zaXRpdmUgcHJlZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4ICBBIHN0cmluZyB0byBsb29rIGZvciBhdCB0aGUgZW5kIG9mIGBzdHJgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgc3RyYCBiZWdpbnMgd2l0aCBgcHJlZml4YCAoaWdub3JpbmdcbiAqICAgICBjYXNlKS5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aCA9XG4gICAgZ29vZy5zdHJpbmcuaW50ZXJuYWwuY2FzZUluc2Vuc2l0aXZlU3RhcnRzV2l0aDtcblxuXG4vKipcbiAqIENhc2UtaW5zZW5zaXRpdmUgc3VmZml4LWNoZWNrZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gc3VmZml4IEEgc3RyaW5nIHRvIGxvb2sgZm9yIGF0IHRoZSBlbmQgb2YgYHN0cmAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBzdHJgIGVuZHMgd2l0aCBgc3VmZml4YCAoaWdub3JpbmdcbiAqICAgICBjYXNlKS5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlRW5kc1dpdGggPVxuICAgIGdvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUVuZHNXaXRoO1xuXG5cbi8qKlxuICogQ2FzZS1pbnNlbnNpdGl2ZSBlcXVhbGl0eSBjaGVja2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjEgRmlyc3Qgc3RyaW5nIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjIgU2Vjb25kIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHN0cjFgIGFuZCBgc3RyMmAgYXJlIHRoZSBzYW1lIHN0cmluZyxcbiAqICAgICBpZ25vcmluZyBjYXNlLlxuICovXG5nb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVFcXVhbHMgPSBnb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVFcXVhbHM7XG5cblxuLyoqXG4gKiBEb2VzIHNpbXBsZSBweXRob24tc3R5bGUgc3RyaW5nIHN1YnN0aXR1dGlvbi5cbiAqIHN1YnMoXCJmb28lcyBob3Qlc1wiLCBcImJhclwiLCBcImRvZ1wiKSBiZWNvbWVzIFwiZm9vYmFyIGhvdGRvZ1wiLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIFRoZSBpdGVtcyB0byBzdWJzdGl0dXRlIGludG8gdGhlIHBhdHRlcm4uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiBgc3RyYCBpbiB3aGljaCBlYWNoIG9jY3VycmVuY2Ugb2ZcbiAqICAgICB7QGNvZGUgJXN9IGhhcyBiZWVuIHJlcGxhY2VkIGFuIGFyZ3VtZW50IGZyb20gYHZhcl9hcmdzYC5cbiAqL1xuZ29vZy5zdHJpbmcuc3VicyA9IGZ1bmN0aW9uKHN0ciwgdmFyX2FyZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBzcGxpdFBhcnRzID0gc3RyLnNwbGl0KCclcycpO1xuICBsZXQgcmV0dXJuU3RyaW5nID0gJyc7XG5cbiAgY29uc3Qgc3Vic0FyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHdoaWxlIChzdWJzQXJndW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICAgLy8gUmVwbGFjZSB1cCB0byB0aGUgbGFzdCBzcGxpdCBwYXJ0LiBXZSBhcmUgaW5zZXJ0aW5nIGluIHRoZVxuICAgICAgICAgLy8gcG9zaXRpb25zIGJldHdlZW4gc3BsaXQgcGFydHMuXG4gICAgICAgICBzcGxpdFBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm5TdHJpbmcgKz0gc3BsaXRQYXJ0cy5zaGlmdCgpICsgc3Vic0FyZ3VtZW50cy5zaGlmdCgpO1xuICB9XG5cbiAgcmV0dXJuIHJldHVyblN0cmluZyArIHNwbGl0UGFydHMuam9pbignJXMnKTsgIC8vIEpvaW4gdW51c2VkICclcydcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBtdWx0aXBsZSB3aGl0ZXNwYWNlIGNoYXJzIChzcGFjZXMsIG5vbi1icmVha2luZy1zcGFjZXMsIG5ldyBsaW5lc1xuICogYW5kIHRhYnMpIHRvIGEgc2luZ2xlIHNwYWNlLCBhbmQgc3RyaXBzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIElucHV0IHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGggY29sbGFwc2VkIHdoaXRlc3BhY2UuXG4gKi9cbmdvb2cuc3RyaW5nLmNvbGxhcHNlV2hpdGVzcGFjZSA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFNpbmNlIElFIGRvZXNuJ3QgaW5jbHVkZSBub24tYnJlYWtpbmctc3BhY2UgKDB4YTApIGluIHRoZWlyIFxccyBjaGFyYWN0ZXJcbiAgLy8gY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLCB3ZSBleHBsaWNpdGx5XG4gIC8vIGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFxzXFx4YTBdKy9nLCAnICcpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgZW1wdHkgb3IgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYHN0cmAgaXMgZW1wdHkgb3Igd2hpdGVzcGFjZSBvbmx5LlxuICovXG5nb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlID0gZ29vZy5zdHJpbmcuaW50ZXJuYWwuaXNFbXB0eU9yV2hpdGVzcGFjZTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYHN0cmAgaXMgZW1wdHkuXG4gKi9cbmdvb2cuc3RyaW5nLmlzRW1wdHlTdHJpbmcgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gc3RyLmxlbmd0aCA9PSAwO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYHN0cmAgaXMgZW1wdHkgb3Igd2hpdGVzcGFjZSBvbmx5LlxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UgaW5zdGVhZC5cbiAqL1xuZ29vZy5zdHJpbmcuaXNFbXB0eSA9IGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2U7XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgbnVsbCwgdW5kZWZpbmVkLCBlbXB0eSBvciBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLlxuICogQHBhcmFtIHsqfSBzdHIgVGhlIHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYHN0cmAgaXMgbnVsbCwgdW5kZWZpbmVkLCBlbXB0eSwgb3JcbiAqICAgICB3aGl0ZXNwYWNlIG9ubHkuXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZShnb29nLnN0cmluZy5tYWtlU2FmZShzdHIpKVxuICogICAgIGluc3RlYWQuXG4gKi9cbmdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2VTYWZlID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcubWFrZVNhZmUoc3RyKSk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIGlzIG51bGwsIHVuZGVmaW5lZCwgZW1wdHkgb3IgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlcy5cbiAqXG4gKiBAcGFyYW0geyp9IHN0ciBUaGUgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBgc3RyYCBpcyBudWxsLCB1bmRlZmluZWQsIGVtcHR5LCBvclxuICogICAgIHdoaXRlc3BhY2Ugb25seS5cbiAqIEBkZXByZWNhdGVkIFVzZSBnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlIGluc3RlYWQuXG4gKi9cbmdvb2cuc3RyaW5nLmlzRW1wdHlTYWZlID0gZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZVNhZmU7XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgYWxsIGJyZWFraW5nIHdoaXRlc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzdHJpbmcgaXMgYWxsIGJyZWFraW5nIHdoaXRlc3BhY2UuXG4gKi9cbmdvb2cuc3RyaW5nLmlzQnJlYWtpbmdXaGl0ZXNwYWNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEvW15cXHRcXG5cXHIgXS8udGVzdChzdHIpO1xufTtcblxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBjb250YWlucyBhbGwgbGV0dGVycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgc3RyYCBjb25zaXN0cyBlbnRpcmVseSBvZiBsZXR0ZXJzLlxuICovXG5nb29nLnN0cmluZy5pc0FscGhhID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEvW15hLXpBLVpdLy50ZXN0KHN0cik7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVycy5cbiAqIEBwYXJhbSB7Kn0gc3RyIHN0cmluZyB0byBjaGVjay4gSWYgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlXG4gKiAgICAgY2FzdGVkIHRvIG9uZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHN0cmAgaXMgbnVtZXJpYy5cbiAqL1xuZ29vZy5zdHJpbmcuaXNOdW1lcmljID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICEvW14wLTldLy50ZXN0KHN0cik7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVycyBvciBsZXR0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBzdHJgIGlzIGFscGhhbnVtZXJpYy5cbiAqL1xuZ29vZy5zdHJpbmcuaXNBbHBoYU51bWVyaWMgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gIS9bXmEtekEtWjAtOV0vLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBjaGFyYWN0ZXIgaXMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2ggQ2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgY2hgIGlzIGEgc3BhY2UuXG4gKi9cbmdvb2cuc3RyaW5nLmlzU3BhY2UgPSBmdW5jdGlvbihjaCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBjaCA9PSAnICc7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2hhcmFjdGVyIGlzIGEgdmFsaWQgdW5pY29kZSBjaGFyYWN0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2ggQ2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgY2hgIGlzIGEgdmFsaWQgdW5pY29kZSBjaGFyYWN0ZXIuXG4gKi9cbmdvb2cuc3RyaW5nLmlzVW5pY29kZUNoYXIgPSBmdW5jdGlvbihjaCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBjaC5sZW5ndGggPT0gMSAmJiBjaCA+PSAnICcgJiYgY2ggPD0gJ34nIHx8XG4gICAgICBjaCA+PSAnXFx1MDA4MCcgJiYgY2ggPD0gJ1xcdUZGRkQnO1xufTtcblxuXG4vKipcbiAqIFRha2VzIGEgc3RyaW5nIGFuZCByZXBsYWNlcyBuZXdsaW5lcyB3aXRoIGEgc3BhY2UuIE11bHRpcGxlIGxpbmVzIGFyZVxuICogcmVwbGFjZWQgd2l0aCBhIHNpbmdsZSBzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBmcm9tIHdoaWNoIHRvIHN0cmlwIG5ld2xpbmVzLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2YgYHN0cmAgc3RyaXBwZWQgb2YgbmV3bGluZXMuXG4gKi9cbmdvb2cuc3RyaW5nLnN0cmlwTmV3bGluZXMgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhcXHJcXG58XFxyfFxcbikrL2csICcgJyk7XG59O1xuXG5cbi8qKlxuICogUmVwbGFjZXMgV2luZG93cyBhbmQgTWFjIG5ldyBsaW5lcyB3aXRoIHVuaXggc3R5bGU6IFxcciBvciBcXHJcXG4gd2l0aCBcXG4uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gaW4gd2hpY2ggdG8gY2Fub25pY2FsaXplIG5ld2xpbmVzLlxuICogQHJldHVybiB7c3RyaW5nfSBgc3RyYCBBIGNvcHkgb2Yge0Bjb2RlfSB3aXRoIGNhbm9uaWNhbGl6ZWQgbmV3bGluZXMuXG4gKi9cbmdvb2cuc3RyaW5nLmNhbm9uaWNhbGl6ZU5ld2xpbmVzID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXFxyXFxufFxccnxcXG4pL2csICdcXG4nKTtcbn07XG5cblxuLyoqXG4gKiBOb3JtYWxpemVzIHdoaXRlc3BhY2UgaW4gYSBzdHJpbmcsIHJlcGxhY2luZyBhbGwgd2hpdGVzcGFjZSBjaGFycyB3aXRoXG4gKiBhIHNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIGluIHdoaWNoIHRvIG5vcm1hbGl6ZSB3aGl0ZXNwYWNlLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2YgYHN0cmAgd2l0aCBhbGwgd2hpdGVzcGFjZSBub3JtYWxpemVkLlxuICovXG5nb29nLnN0cmluZy5ub3JtYWxpemVXaGl0ZXNwYWNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHhhMHxcXHMvZywgJyAnKTtcbn07XG5cblxuLyoqXG4gKiBOb3JtYWxpemVzIHNwYWNlcyBpbiBhIHN0cmluZywgcmVwbGFjaW5nIGFsbCBjb25zZWN1dGl2ZSBzcGFjZXMgYW5kIHRhYnNcbiAqIHdpdGggYSBzaW5nbGUgc3BhY2UuIFJlcGxhY2VzIG5vbi1icmVha2luZyBzcGFjZSB3aXRoIGEgc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gd2hpY2ggdG8gbm9ybWFsaXplIHNwYWNlcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGggYWxsIGNvbnNlY3V0aXZlIHNwYWNlcyBhbmQgdGFic1xuICogICAgcmVwbGFjZWQgd2l0aCBhIHNpbmdsZSBzcGFjZS5cbiAqL1xuZ29vZy5zdHJpbmcubm9ybWFsaXplU3BhY2VzID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHhhMHxbIFxcdF0rL2csICcgJyk7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgYnJlYWtpbmcgc3BhY2VzIGZyb20gdGhlIGxlZnQgYW5kIHJpZ2h0IG9mIHRoZSBzdHJpbmcgYW5kXG4gKiBjb2xsYXBzZXMgdGhlIHNlcXVlbmNlcyBvZiBicmVha2luZyBzcGFjZXMgaW4gdGhlIG1pZGRsZSBpbnRvIHNpbmdsZSBzcGFjZXMuXG4gKiBUaGUgb3JpZ2luYWwgYW5kIHRoZSByZXN1bHQgc3RyaW5ncyByZW5kZXIgdGhlIHNhbWUgd2F5IGluIEhUTUwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGluIHdoaWNoIHRvIGNvbGxhcHNlIHNwYWNlcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29weSBvZiB0aGUgc3RyaW5nIHdpdGggbm9ybWFsaXplZCBicmVha2luZyBzcGFjZXMuXG4gKi9cbmdvb2cuc3RyaW5nLmNvbGxhcHNlQnJlYWtpbmdTcGFjZXMgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHRcXHJcXG4gXSsvZywgJyAnKVxuICAgICAgLnJlcGxhY2UoL15bXFx0XFxyXFxuIF0rfFtcXHRcXHJcXG4gXSskL2csICcnKTtcbn07XG5cblxuLyoqXG4gKiBUcmltcyB3aGl0ZSBzcGFjZXMgdG8gdGhlIGxlZnQgYW5kIHJpZ2h0IG9mIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgdHJpbW1lZCBjb3B5IG9mIGBzdHJgLlxuICovXG5nb29nLnN0cmluZy50cmltID0gZ29vZy5zdHJpbmcuaW50ZXJuYWwudHJpbTtcblxuXG4vKipcbiAqIFRyaW1zIHdoaXRlc3BhY2VzIGF0IHRoZSBsZWZ0IGVuZCBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBsZWZ0IHRyaW0uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgdHJpbW1lZCBjb3B5IG9mIGBzdHJgLlxuICovXG5nb29nLnN0cmluZy50cmltTGVmdCA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFNpbmNlIElFIGRvZXNuJ3QgaW5jbHVkZSBub24tYnJlYWtpbmctc3BhY2UgKDB4YTApIGluIHRoZWlyIFxccyBjaGFyYWN0ZXJcbiAgLy8gY2xhc3MgKGFzIHJlcXVpcmVkIGJ5IHNlY3Rpb24gNy4yIG9mIHRoZSBFQ01BU2NyaXB0IHNwZWMpLCB3ZSBleHBsaWNpdGx5XG4gIC8vIGluY2x1ZGUgaXQgaW4gdGhlIHJlZ2V4cCB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eW1xcc1xceGEwXSsvLCAnJyk7XG59O1xuXG5cbi8qKlxuICogVHJpbXMgd2hpdGVzcGFjZXMgYXQgdGhlIHJpZ2h0IGVuZCBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byByaWdodCB0cmltLlxuICogQHJldHVybiB7c3RyaW5nfSBBIHRyaW1tZWQgY29weSBvZiBgc3RyYC5cbiAqL1xuZ29vZy5zdHJpbmcudHJpbVJpZ2h0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gU2luY2UgSUUgZG9lc24ndCBpbmNsdWRlIG5vbi1icmVha2luZy1zcGFjZSAoMHhhMCkgaW4gdGhlaXIgXFxzIGNoYXJhY3RlclxuICAvLyBjbGFzcyAoYXMgcmVxdWlyZWQgYnkgc2VjdGlvbiA3LjIgb2YgdGhlIEVDTUFTY3JpcHQgc3BlYyksIHdlIGV4cGxpY2l0bHlcbiAgLy8gaW5jbHVkZSBpdCBpbiB0aGUgcmVnZXhwIHRvIGVuZm9yY2UgY29uc2lzdGVudCBjcm9zcy1icm93c2VyIGJlaGF2aW9yLlxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHNcXHhhMF0rJC8sICcnKTtcbn07XG5cblxuLyoqXG4gKiBBIHN0cmluZyBjb21wYXJhdG9yIHRoYXQgaWdub3JlcyBjYXNlLlxuICogLTEgPSBzdHIxIGxlc3MgdGhhbiBzdHIyXG4gKiAgMCA9IHN0cjEgZXF1YWxzIHN0cjJcbiAqICAxID0gc3RyMSBncmVhdGVyIHRoYW4gc3RyMlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxIFRoZSBzdHJpbmcgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIyIFRoZSBzdHJpbmcgdG8gY29tcGFyZSBgc3RyMWAgdG8uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb21wYXJhdG9yIHJlc3VsdCwgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICovXG5nb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVDb21wYXJlID1cbiAgICBnb29nLnN0cmluZy5pbnRlcm5hbC5jYXNlSW5zZW5zaXRpdmVDb21wYXJlO1xuXG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHN0cmluZ3MgaW50ZXJwcmV0aW5nIHRoZWlyIG51bWVyaWMgc3Vic3RyaW5ncyBhcyBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIyIFNlY29uZCBzdHJpbmcuXG4gKiBAcGFyYW0geyFSZWdFeHB9IHRva2VuaXplclJlZ0V4cCBTcGxpdHMgYSBzdHJpbmcgaW50byBzdWJzdHJpbmdzIG9mXG4gKiAgICAgbm9uLW5lZ2F0aXZlIGludGVnZXJzLCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzIGFuZCBvcHRpb25hbGx5IGZyYWN0aW9uYWxcbiAqICAgICBudW1iZXJzIHN0YXJ0aW5nIHdpdGggYSBkZWNpbWFsIHBvaW50LlxuICogQHJldHVybiB7bnVtYmVyfSBOZWdhdGl2ZSBpZiBzdHIxIDwgc3RyMiwgMCBpcyBzdHIxID09IHN0cjIsIHBvc2l0aXZlIGlmXG4gKiAgICAgc3RyMSA+IHN0cjIuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5udW1iZXJBd2FyZUNvbXBhcmVfID0gZnVuY3Rpb24oc3RyMSwgc3RyMiwgdG9rZW5pemVyUmVnRXhwKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHN0cjEgPT0gc3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICghc3RyMSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoIXN0cjIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8vIFVzaW5nIG1hdGNoIHRvIHNwbGl0IHRoZSBlbnRpcmUgc3RyaW5nIGFoZWFkIG9mIHRpbWUgdHVybnMgb3V0IHRvIGJlIGZhc3RlclxuICAvLyBmb3IgbW9zdCBpbnB1dHMgdGhhbiB1c2luZyBSZWdFeHAuZXhlYyBvciBpdGVyYXRpbmcgb3ZlciBlYWNoIGNoYXJhY3Rlci5cbiAgY29uc3QgdG9rZW5zMSA9IHN0cjEudG9Mb3dlckNhc2UoKS5tYXRjaCh0b2tlbml6ZXJSZWdFeHApO1xuICBjb25zdCB0b2tlbnMyID0gc3RyMi50b0xvd2VyQ2FzZSgpLm1hdGNoKHRva2VuaXplclJlZ0V4cCk7XG5cbiAgY29uc3QgY291bnQgPSBNYXRoLm1pbih0b2tlbnMxLmxlbmd0aCwgdG9rZW5zMi5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IGEgPSB0b2tlbnMxW2ldO1xuICAgIGNvbnN0IGIgPSB0b2tlbnMyW2ldO1xuXG4gICAgLy8gQ29tcGFyZSBwYWlycyBvZiB0b2tlbnMsIHJldHVybmluZyBpZiBvbmUgdG9rZW4gc29ydHMgYmVmb3JlIHRoZSBvdGhlci5cbiAgICBpZiAoYSAhPSBiKSB7XG4gICAgICAvLyBPbmx5IGlmIGJvdGggdG9rZW5zIGFyZSBpbnRlZ2VycyBpcyBhIHNwZWNpYWwgY29tcGFyaXNvbiByZXF1aXJlZC5cbiAgICAgIC8vIERlY2ltYWwgbnVtYmVycyBhcmUgc29ydGVkIGFzIHN0cmluZ3MgKGUuZy4sICcuMDknIDwgJy4xJykuXG4gICAgICBjb25zdCBudW0xID0gcGFyc2VJbnQoYSwgMTApO1xuICAgICAgaWYgKCFpc05hTihudW0xKSkge1xuICAgICAgICBjb25zdCBudW0yID0gcGFyc2VJbnQoYiwgMTApO1xuICAgICAgICBpZiAoIWlzTmFOKG51bTIpICYmIG51bTEgLSBudW0yKSB7XG4gICAgICAgICAgcmV0dXJuIG51bTEgLSBudW0yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IDE7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgb25lIHN0cmluZyBpcyBhIHN1YnN0cmluZyBvZiB0aGUgb3RoZXIsIHRoZSBzaG9ydGVyIHN0cmluZyBzb3J0cyBmaXJzdC5cbiAgaWYgKHRva2VuczEubGVuZ3RoICE9IHRva2VuczIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRva2VuczEubGVuZ3RoIC0gdG9rZW5zMi5sZW5ndGg7XG4gIH1cblxuICAvLyBUaGUgdHdvIHN0cmluZ3MgbXVzdCBiZSBlcXVpdmFsZW50IGV4Y2VwdCBmb3IgY2FzZSAocGVyZmVjdCBlcXVhbGl0eSBpc1xuICAvLyB0ZXN0ZWQgYXQgdGhlIGhlYWQgb2YgdGhlIGZ1bmN0aW9uLikgUmV2ZXJ0IHRvIGRlZmF1bHQgQVNDSUkgc3RyaW5nXG4gIC8vIGNvbXBhcmlzb24gdG8gc3RhYmlsaXplIHRoZSBzb3J0LlxuICByZXR1cm4gc3RyMSA8IHN0cjIgPyAtMSA6IDE7XG59O1xuXG5cbi8qKlxuICogU3RyaW5nIGNvbXBhcmlzb24gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyIG51bWJlcnMgaW4gYVxuICogd2F5IGh1bWFucyBtaWdodCBleHBlY3QuIFVzaW5nIHRoaXMgZnVuY3Rpb24sIHRoZSBzdHJpbmcgJ0ZpbGUgMi5qcGcnIHNvcnRzXG4gKiBiZWZvcmUgJ0ZpbGUgMTAuanBnJywgYW5kICdWZXJzaW9uIDEuOScgYmVmb3JlICdWZXJzaW9uIDEuMTAnLiBUaGUgY29tcGFyaXNvblxuICogaXMgbW9zdGx5IGNhc2UtaW5zZW5zaXRpdmUsIHRob3VnaCBzdHJpbmdzIHRoYXQgYXJlIGlkZW50aWNhbCBleGNlcHQgZm9yIGNhc2VcbiAqIGFyZSBzb3J0ZWQgd2l0aCB0aGUgdXBwZXItY2FzZSBzdHJpbmdzIGJlZm9yZSBsb3dlci1jYXNlLlxuICpcbiAqIFRoaXMgY29tcGFyaXNvbiBmdW5jdGlvbiBpcyB1cCB0byA1MHggc2xvd2VyIHRoYW4gZWl0aGVyIHRoZSBkZWZhdWx0IG9yIHRoZVxuICogY2FzZS1pbnNlbnNpdGl2ZSBjb21wYXJlLiBJdCBzaG91bGQgbm90IGJlIHVzZWQgaW4gdGltZS1jcml0aWNhbCBjb2RlLCBidXRcbiAqIHNob3VsZCBiZSBmYXN0IGVub3VnaCB0byBzb3J0IHNldmVyYWwgaHVuZHJlZCBzaG9ydCBzdHJpbmdzIChsaWtlIGZpbGVuYW1lcylcbiAqIHdpdGggYSByZWFzb25hYmxlIGRlbGF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxIFRoZSBzdHJpbmcgdG8gY29tcGFyZSBpbiBhIG51bWVyaWNhbGx5IHNlbnNpdGl2ZSB3YXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMiBUaGUgc3RyaW5nIHRvIGNvbXBhcmUgYHN0cjFgIHRvLlxuICogQHJldHVybiB7bnVtYmVyfSBsZXNzIHRoYW4gMCBpZiBzdHIxIDwgc3RyMiwgMCBpZiBzdHIxID09IHN0cjIsIGdyZWF0ZXIgdGhhblxuICogICAgIDAgaWYgc3RyMSA+IHN0cjIuXG4gKi9cbmdvb2cuc3RyaW5nLmludEF3YXJlQ29tcGFyZSA9IGZ1bmN0aW9uKHN0cjEsIHN0cjIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy5zdHJpbmcubnVtYmVyQXdhcmVDb21wYXJlXyhzdHIxLCBzdHIyLCAvXFxkK3xcXEQrL2cpO1xufTtcblxuXG4vKipcbiAqIFN0cmluZyBjb21wYXJpc29uIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyBub24tbmVnYXRpdmUgaW50ZWdlciBhbmQgZnJhY3Rpb25hbFxuICogbnVtYmVycyBpbiBhIHdheSBodW1hbnMgbWlnaHQgZXhwZWN0LiBVc2luZyB0aGlzIGZ1bmN0aW9uLCB0aGUgc3RyaW5nXG4gKiAnRmlsZSAyLmpwZycgc29ydHMgYmVmb3JlICdGaWxlIDEwLmpwZycsIGFuZCAnMy4xNCcgYmVmb3JlICczLjInLiBFcXVpdmFsZW50XG4gKiB0byB7QGxpbmsgZ29vZy5zdHJpbmcuaW50QXdhcmVDb21wYXJlfSBhcGFydCBmcm9tIHRoZSB3YXkgaG93IGl0IGludGVycHJldHNcbiAqIGRvdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjEgVGhlIHN0cmluZyB0byBjb21wYXJlIGluIGEgbnVtZXJpY2FsbHkgc2Vuc2l0aXZlIHdheS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIyIFRoZSBzdHJpbmcgdG8gY29tcGFyZSBgc3RyMWAgdG8uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGxlc3MgdGhhbiAwIGlmIHN0cjEgPCBzdHIyLCAwIGlmIHN0cjEgPT0gc3RyMiwgZ3JlYXRlciB0aGFuXG4gKiAgICAgMCBpZiBzdHIxID4gc3RyMi5cbiAqL1xuZ29vZy5zdHJpbmcuZmxvYXRBd2FyZUNvbXBhcmUgPSBmdW5jdGlvbihzdHIxLCBzdHIyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cuc3RyaW5nLm51bWJlckF3YXJlQ29tcGFyZV8oc3RyMSwgc3RyMiwgL1xcZCt8XFwuXFxkK3xcXEQrL2cpO1xufTtcblxuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgZ29vZy5zdHJpbmcuZmxvYXRBd2FyZUNvbXBhcmV9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIxXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5nb29nLnN0cmluZy5udW1lcmF0ZUNvbXBhcmUgPSBnb29nLnN0cmluZy5mbG9hdEF3YXJlQ29tcGFyZTtcblxuXG4vKipcbiAqIFVSTC1lbmNvZGVzIGEgc3RyaW5nXG4gKiBAcGFyYW0geyp9IHN0ciBUaGUgc3RyaW5nIHRvIHVybC1lbmNvZGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVuY29kZWQgY29weSBvZiBgc3RyYCB0aGF0IGlzIHNhZmUgZm9yIHVybHMuXG4gKiAgICAgTm90ZSB0aGF0ICcjJywgJzonLCBhbmQgb3RoZXIgY2hhcmFjdGVycyB1c2VkIHRvIGRlbGltaXQgcG9ydGlvbnNcbiAqICAgICBvZiBVUkxzICp3aWxsKiBiZSBlbmNvZGVkLlxuICovXG5nb29nLnN0cmluZy51cmxFbmNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhzdHIpKTtcbn07XG5cblxuLyoqXG4gKiBVUkwtZGVjb2RlcyB0aGUgc3RyaW5nLiBXZSBuZWVkIHRvIHNwZWNpYWxseSBoYW5kbGUgJysncyBiZWNhdXNlXG4gKiB0aGUgamF2YXNjcmlwdCBsaWJyYXJ5IGRvZXNuJ3QgY29udmVydCB0aGVtIHRvIHNwYWNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB1cmwgZGVjb2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGVjb2RlZCBgc3RyYC5cbiAqL1xuZ29vZy5zdHJpbmcudXJsRGVjb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIucmVwbGFjZSgvXFwrL2csICcgJykpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIFxcbiB0byA8YnI+cyBvciA8YnIgLz5zLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIGluIHdoaWNoIHRvIGNvbnZlcnQgbmV3bGluZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfeG1sIFdoZXRoZXIgdG8gdXNlIFhNTCBjb21wYXRpYmxlIHRhZ3MuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiBgc3RyYCB3aXRoIGNvbnZlcnRlZCBuZXdsaW5lcy5cbiAqL1xuZ29vZy5zdHJpbmcubmV3TGluZVRvQnIgPSBnb29nLnN0cmluZy5pbnRlcm5hbC5uZXdMaW5lVG9CcjtcblxuXG4vKipcbiAqIEVzY2FwZXMgZG91YmxlIHF1b3RlICdcIicgYW5kIHNpbmdsZSBxdW90ZSAnXFwnJyBjaGFyYWN0ZXJzIGluIGFkZGl0aW9uIHRvXG4gKiAnJicsICc8JywgYW5kICc+JyBzbyB0aGF0IGEgc3RyaW5nIGNhbiBiZSBpbmNsdWRlZCBpbiBhbiBIVE1MIHRhZyBhdHRyaWJ1dGVcbiAqIHZhbHVlIHdpdGhpbiBkb3VibGUgb3Igc2luZ2xlIHF1b3Rlcy5cbiAqXG4gKiBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCA+IGRvZXNuJ3QgbmVlZCB0byBiZSBlc2NhcGVkIGZvciB0aGUgSFRNTCBvciBYTUwgdG9cbiAqIGJlIHZhbGlkLCBidXQgaXQgaGFzIGJlZW4gZGVjaWRlZCB0byBlc2NhcGUgaXQgZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXJcbiAqIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBXaXRoIGdvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcsIHRoaXMgZnVuY3Rpb24gZXNjYXBlcyBhbHNvIHRoZVxuICogbG93ZXJjYXNlIGxldHRlciBcImVcIi5cbiAqXG4gKiBOT1RFKHVzZXIpOlxuICogSHRtbEVzY2FwZSBpcyBvZnRlbiBjYWxsZWQgZHVyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGxhcmdlIGJsb2NrcyBvZiBIVE1MLlxuICogVXNpbmcgc3RhdGljcyBmb3IgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYW5kIHN0cmluZ3MgaXMgYW4gb3B0aW1pemF0aW9uXG4gKiB0aGF0IGNhbiBtb3JlIHRoYW4gaGFsZiB0aGUgYW1vdW50IG9mIHRpbWUgSUUgc3BlbmRzIGluIHRoaXMgZnVuY3Rpb24gZm9yXG4gKiBsYXJnZSBhcHBzLCBzaW5jZSBzdHJpbmdzIGFuZCByZWdleGVzIGJvdGggY29udHJpYnV0ZSB0byBHQyBhbGxvY2F0aW9ucy5cbiAqXG4gKiBUZXN0aW5nIGZvciB0aGUgcHJlc2VuY2Ugb2YgYSBjaGFyYWN0ZXIgYmVmb3JlIGVzY2FwaW5nIGluY3JlYXNlcyB0aGUgbnVtYmVyXG4gKiBvZiBmdW5jdGlvbiBjYWxscywgYnV0IGFjdHVhbGx5IHByb3ZpZGVzIGEgc3BlZWQgaW5jcmVhc2UgZm9yIHRoZSBhdmVyYWdlXG4gKiBjYXNlIC0tIHNpbmNlIHRoZSBhdmVyYWdlIGNhc2Ugb2Z0ZW4gZG9lc24ndCByZXF1aXJlIHRoZSBlc2NhcGluZyBvZiBhbGwgNFxuICogY2hhcmFjdGVycyBhbmQgaW5kZXhPZigpIGlzIG11Y2ggY2hlYXBlciB0aGFuIHJlcGxhY2UoKS5cbiAqIFRoZSB3b3JzdCBjYXNlIGRvZXMgc3VmZmVyIHNsaWdodGx5IGZyb20gdGhlIGFkZGl0aW9uYWwgY2FsbHMsIHRoZXJlZm9yZSB0aGVcbiAqIG9wdF9pc0xpa2VseVRvQ29udGFpbkh0bWxDaGFycyBvcHRpb24gaGFzIGJlZW4gaW5jbHVkZWQgZm9yIHNpdHVhdGlvbnNcbiAqIHdoZXJlIGFsbCA0IEhUTUwgZW50aXRpZXMgYXJlIHZlcnkgbGlrZWx5IHRvIGJlIHByZXNlbnQgYW5kIG5lZWQgZXNjYXBpbmcuXG4gKlxuICogU29tZSBiZW5jaG1hcmtzICh0aW1lcyB0ZW5kZWQgdG8gZmx1Y3R1YXRlICstMC4wNW1zKTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpcmVGb3ggICAgICAgICAgICAgICAgICAgICBJRTZcbiAqIChubyBjaGFycyAvIGF2ZXJhZ2UgKG1peCBvZiBjYXNlcykgLyBhbGwgNCBjaGFycylcbiAqIG5vIGNoZWNrcyAgICAgICAgICAgICAgICAgICAgIDAuMTMgLyAwLjIyIC8gMC4yMiAgICAgICAgIDAuMjMgLyAwLjUzIC8gMC44MFxuICogaW5kZXhPZiAgICAgICAgICAgICAgICAgICAgICAgMC4wOCAvIDAuMTcgLyAwLjI2ICAgICAgICAgMC4yMiAvIDAuNTQgLyAwLjg0XG4gKiBpbmRleE9mICsgcmUgdGVzdCAgICAgICAgICAgICAwLjA3IC8gMC4xNyAvIDAuMjggICAgICAgICAwLjE5IC8gMC41MCAvIDAuODVcbiAqXG4gKiBBbiBhZGRpdGlvbmFsIGFkdmFudGFnZSBvZiBjaGVja2luZyBpZiByZXBsYWNlIGFjdHVhbGx5IG5lZWRzIHRvIGJlIGNhbGxlZFxuICogaXMgYSByZWR1Y3Rpb24gaW4gdGhlIG51bWJlciBvZiBvYmplY3QgYWxsb2NhdGlvbnMsIHNvIGFzIHRoZSBzaXplIG9mIHRoZVxuICogYXBwbGljYXRpb24gZ3Jvd3MgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdmFyaW91cyBtZXRob2RzIHdvdWxkIGluY3JlYXNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGJlIGVzY2FwZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnMgRG9uJ3QgcGVyZm9ybSBhIGNoZWNrIHRvIHNlZVxuICogICAgIGlmIHRoZSBjaGFyYWN0ZXIgbmVlZHMgcmVwbGFjaW5nIC0gdXNlIHRoaXMgb3B0aW9uIGlmIHlvdSBleHBlY3QgZWFjaCBvZlxuICogICAgIHRoZSBjaGFyYWN0ZXJzIHRvIGFwcGVhciBvZnRlbi4gTGVhdmUgZmFsc2UgaWYgeW91IGV4cGVjdCBmZXcgaHRtbFxuICogICAgIGNoYXJhY3RlcnMgdG8gb2NjdXIgaW4geW91ciBzdHJpbmdzLCBzdWNoIGFzIGlmIHlvdSBhcmUgZXNjYXBpbmcgSFRNTC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBjb3B5IG9mIGBzdHJgLlxuICovXG5nb29nLnN0cmluZy5odG1sRXNjYXBlID0gZnVuY3Rpb24oc3RyLCBvcHRfaXNMaWtlbHlUb0NvbnRhaW5IdG1sQ2hhcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBzdHIgPSBnb29nLnN0cmluZy5pbnRlcm5hbC5odG1sRXNjYXBlKHN0ciwgb3B0X2lzTGlrZWx5VG9Db250YWluSHRtbENoYXJzKTtcbiAgaWYgKGdvb2cuc3RyaW5nLkRFVEVDVF9ET1VCTEVfRVNDQVBJTkcpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShnb29nLnN0cmluZy5FX1JFXywgJyYjMTAxOycpO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIGxvd2VyY2FzZSBsZXR0ZXIgXCJlXCIsIGZvciB1c2UgaW4gZXNjYXBpbmcuXG4gKiBAY29uc3QgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnN0cmluZy5FX1JFXyA9IC9lL2c7XG5cblxuLyoqXG4gKiBVbmVzY2FwZXMgYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiB1bmVzY2FwZWQgY29weSBvZiBgc3RyYC5cbiAqL1xuZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllcyA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChnb29nLnN0cmluZy5jb250YWlucyhzdHIsICcmJykpIHtcbiAgICAvLyBXZSBhcmUgY2FyZWZ1bCBub3QgdG8gdXNlIGEgRE9NIGlmIHdlIGRvIG5vdCBoYXZlIG9uZSBvciB3ZSBleHBsaWNpdGx5XG4gICAgLy8gcmVxdWVzdGVkIG5vbi1ET00gaHRtbCB1bmVzY2FwaW5nLlxuICAgIGlmICghZ29vZy5zdHJpbmcuRk9SQ0VfTk9OX0RPTV9IVE1MX1VORVNDQVBJTkcgJiZcbiAgICAgICAgJ2RvY3VtZW50JyBpbiBnb29nLmdsb2JhbCkge1xuICAgICAgcmV0dXJuIGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNVc2luZ0RvbV8oc3RyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbCBiYWNrIG9uIHB1cmUgWE1MIGVudGl0aWVzXG4gICAgICByZXR1cm4gZ29vZy5zdHJpbmcudW5lc2NhcGVQdXJlWG1sRW50aXRpZXNfKHN0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8qKlxuICogVW5lc2NhcGVzIGEgSFRNTCBzdHJpbmcgdXNpbmcgdGhlIHByb3ZpZGVkIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2N1bWVudCBBIGRvY3VtZW50IHRvIHVzZSBpbiBlc2NhcGluZyB0aGUgc3RyaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiB1bmVzY2FwZWQgY29weSBvZiBgc3RyYC5cbiAqL1xuZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1dpdGhEb2N1bWVudCA9IGZ1bmN0aW9uKHN0ciwgZG9jdW1lbnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZ29vZy5zdHJpbmcuY29udGFpbnMoc3RyLCAnJicpKSB7XG4gICAgcmV0dXJuIGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNVc2luZ0RvbV8oc3RyLCBkb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBVbmVzY2FwZXMgYW4gSFRNTCBzdHJpbmcgdXNpbmcgYSBET00gdG8gcmVzb2x2ZSBub24tWE1MLCBub24tbnVtZXJpY1xuICogZW50aXRpZXMuIFRoaXMgZnVuY3Rpb24gaXMgWFNTLXNhZmUgYW5kIHdoaXRlc3BhY2UtcHJlc2VydmluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gKiBAcGFyYW0ge0RvY3VtZW50PX0gb3B0X2RvY3VtZW50IEFuIG9wdGlvbmFsIGRvY3VtZW50IHRvIHVzZSBmb3IgY3JlYXRpbmdcbiAqICAgICBlbGVtZW50cy4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIHRoZW4gdGhlIGRlZmF1bHQgd2luZG93LmRvY3VtZW50XG4gKiAgICAgd2lsbCBiZSB1c2VkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdW5lc2NhcGVkIGBzdHJgIHN0cmluZy5cbiAqL1xuZ29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1VzaW5nRG9tXyA9IGZ1bmN0aW9uKHN0ciwgb3B0X2RvY3VtZW50KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbiAgY29uc3Qgc2VlbiA9IHsnJmFtcDsnOiAnJicsICcmbHQ7JzogJzwnLCAnJmd0Oyc6ICc+JywgJyZxdW90Oyc6ICdcIid9O1xuICAvKiogQHR5cGUgeyFFbGVtZW50fSAqL1xuICBsZXQgZGl2O1xuICBpZiAob3B0X2RvY3VtZW50KSB7XG4gICAgZGl2ID0gb3B0X2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB9IGVsc2Uge1xuICAgIGRpdiA9IGdvb2cuZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB9XG4gIC8vIE1hdGNoIGFzIG1hbnkgdmFsaWQgZW50aXR5IGNoYXJhY3RlcnMgYXMgcG9zc2libGUuIElmIHRoZSBhY3R1YWwgZW50aXR5XG4gIC8vIGhhcHBlbnMgdG8gYmUgc2hvcnRlciwgaXQgd2lsbCBzdGlsbCB3b3JrIGFzIGlubmVySFRNTCB3aWxsIHJldHVybiB0aGVcbiAgLy8gdHJhaWxpbmcgY2hhcmFjdGVycyB1bmNoYW5nZWQuIFNpbmNlIHRoZSBlbnRpdHkgY2hhcmFjdGVycyBkbyBub3QgaW5jbHVkZVxuICAvLyBvcGVuIGFuZ2xlIGJyYWNrZXQsIHRoZXJlIGlzIG5vIGNoYW5jZSBvZiBYU1MgZnJvbSB0aGUgaW5uZXJIVE1MIHVzZS5cbiAgLy8gU2luY2Ugbm8gd2hpdGVzcGFjZSBpcyBwYXNzZWQgdG8gaW5uZXJIVE1MLCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZC5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGdvb2cuc3RyaW5nLkhUTUxfRU5USVRZX1BBVFRFUk5fLCBmdW5jdGlvbihzLCBlbnRpdHkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gQ2hlY2sgZm9yIGNhY2hlZCBlbnRpdHkuXG4gICAgbGV0IHZhbHVlID0gc2VlbltzXTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgZm9yIG51bWVyaWMgZW50aXR5LlxuICAgIGlmIChlbnRpdHkuY2hhckF0KDApID09ICcjJykge1xuICAgICAgLy8gUHJlZml4IHdpdGggMCBzbyB0aGF0IGhleCBlbnRpdGllcyAoZS5nLiAmI3gxMCkgcGFyc2UgYXMgaGV4IG51bWJlcnMuXG4gICAgICBjb25zdCBuID0gTnVtYmVyKCcwJyArIGVudGl0eS5zdWJzdHIoMSkpO1xuICAgICAgaWYgKCFpc05hTihuKSkge1xuICAgICAgICB2YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUobik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZhbGwgYmFjayB0byBpbm5lckhUTUwgb3RoZXJ3aXNlLlxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIC8vIEFwcGVuZCBhIG5vbi1lbnRpdHkgY2hhcmFjdGVyIHRvIGF2b2lkIGEgYnVnIGluIFdlYmtpdCB0aGF0IHBhcnNlc1xuICAgICAgLy8gYW4gaW52YWxpZCBlbnRpdHkgYXQgdGhlIGVuZCBvZiBpbm5lckhUTUwgdGV4dCBhcyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAgZ29vZy5kb20uc2FmZS5zZXRJbm5lckh0bWwoXG4gICAgICAgICAgZGl2LFxuICAgICAgICAgIGdvb2cuaHRtbC51bmNoZWNrZWRjb252ZXJzaW9uc1xuICAgICAgICAgICAgICAuc2FmZUh0bWxGcm9tU3RyaW5nS25vd25Ub1NhdGlzZnlUeXBlQ29udHJhY3QoXG4gICAgICAgICAgICAgICAgICBnb29nLnN0cmluZy5Db25zdC5mcm9tKCdTaW5nbGUgSFRNTCBlbnRpdHkuJyksIHMgKyAnICcpKTtcbiAgICAgIC8vIFRoZW4gcmVtb3ZlIHRoZSB0cmFpbGluZyBjaGFyYWN0ZXIgZnJvbSB0aGUgcmVzdWx0LlxuICAgICAgdmFsdWUgPSBkaXYuZmlyc3RDaGlsZC5ub2RlVmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgICAvLyBDYWNoZSBhbmQgcmV0dXJuLlxuICAgIHJldHVybiBzZWVuW3NdID0gdmFsdWU7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIFVuZXNjYXBlcyBYTUwgZW50aXRpZXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiB1bmVzY2FwZWQgY29weSBvZiBgc3RyYC5cbiAqL1xuZ29vZy5zdHJpbmcudW5lc2NhcGVQdXJlWG1sRW50aXRpZXNfID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKFteO10rKTsvZywgZnVuY3Rpb24ocywgZW50aXR5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHN3aXRjaCAoZW50aXR5KSB7XG4gICAgICBjYXNlICdhbXAnOlxuICAgICAgICByZXR1cm4gJyYnO1xuICAgICAgY2FzZSAnbHQnOlxuICAgICAgICByZXR1cm4gJzwnO1xuICAgICAgY2FzZSAnZ3QnOlxuICAgICAgICByZXR1cm4gJz4nO1xuICAgICAgY2FzZSAncXVvdCc6XG4gICAgICAgIHJldHVybiAnXCInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT0gJyMnKSB7XG4gICAgICAgICAgLy8gUHJlZml4IHdpdGggMCBzbyB0aGF0IGhleCBlbnRpdGllcyAoZS5nLiAmI3gxMCkgcGFyc2UgYXMgaGV4LlxuICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIoJzAnICsgZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgaWYgKCFpc05hTihuKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZvciBpbnZhbGlkIGVudGl0aWVzIHdlIGp1c3QgcmV0dXJuIHRoZSBlbnRpdHlcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGFuIEhUTUwgZW50aXR5LlxuICogU2VlIGFsc28gSFRNTDU6IFRva2VuaXphdGlvbiAvIFRva2VuaXppbmcgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUgeyFSZWdFeHB9XG4gKi9cbmdvb2cuc3RyaW5nLkhUTUxfRU5USVRZX1BBVFRFUk5fID0gLyYoW147XFxzPCZdKyk7Py9nO1xuXG5cbi8qKlxuICogRG8gZXNjYXBpbmcgb2Ygd2hpdGVzcGFjZSB0byBwcmVzZXJ2ZSBzcGF0aWFsIGZvcm1hdHRpbmcuIFdlIHVzZSBjaGFyYWN0ZXJcbiAqIGVudGl0eSAjMTYwIHRvIG1ha2UgaXQgc2FmZXIgZm9yIHhtbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyBpbiB3aGljaCB0byBlc2NhcGUgd2hpdGVzcGFjZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF94bWwgV2hldGhlciB0byB1c2UgWE1MIGNvbXBhdGlibGUgdGFncy5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBjb3B5IG9mIGBzdHJgLlxuICovXG5nb29nLnN0cmluZy53aGl0ZXNwYWNlRXNjYXBlID0gZnVuY3Rpb24oc3RyLCBvcHRfeG1sKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gVGhpcyBkb2Vzbid0IHVzZSBnb29nLnN0cmluZy5wcmVzZXJ2ZVNwYWNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIHJldHVybiBnb29nLnN0cmluZy5uZXdMaW5lVG9CcihzdHIucmVwbGFjZSgvICAvZywgJyAmIzE2MDsnKSwgb3B0X3htbCk7XG59O1xuXG5cbi8qKlxuICogUHJlc2VydmUgc3BhY2VzIHRoYXQgd291bGQgYmUgb3RoZXJ3aXNlIGNvbGxhcHNlZCBpbiBIVE1MIGJ5IHJlcGxhY2luZyB0aGVtXG4gKiB3aXRoIG5vbi1icmVha2luZyBzcGFjZSBVbmljb2RlIGNoYXJhY3RlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gd2hpY2ggdG8gcHJlc2VydmUgd2hpdGVzcGFjZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGggcHJlc2VydmVkIHdoaXRlc3BhY2UuXG4gKi9cbmdvb2cuc3RyaW5nLnByZXNlcnZlU3BhY2VzID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXnxbXFxuIF0pIC9nLCAnJDEnICsgZ29vZy5zdHJpbmcuVW5pY29kZS5OQlNQKTtcbn07XG5cblxuLyoqXG4gKiBTdHJpcCBxdW90ZSBjaGFyYWN0ZXJzIGFyb3VuZCBhIHN0cmluZy4gIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgYSBzdHJpbmcgb2ZcbiAqIGNoYXJhY3RlcnMgdG8gdHJlYXQgYXMgcXVvdGVzLiAgVGhpcyBjYW4gYmUgYSBzaW5nbGUgY2hhcmFjdGVyIG9yIGEgc3RyaW5nIG9mXG4gKiBtdWx0aXBsZSBjaGFyYWN0ZXIgYW5kIGluIHRoYXQgY2FzZSBlYWNoIG9mIHRob3NlIGFyZSB0cmVhdGVkIGFzIHBvc3NpYmxlXG4gKiBxdW90ZSBjaGFyYWN0ZXJzLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiA8cHJlPlxuICogZ29vZy5zdHJpbmcuc3RyaXBRdW90ZXMoJ1wiYWJjXCInLCAnXCJgJykgLS0+ICdhYmMnXG4gKiBnb29nLnN0cmluZy5zdHJpcFF1b3RlcygnYGFiY2AnLCAnXCJgJykgLS0+ICdhYmMnXG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gc3RyaXAuXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVvdGVDaGFycyBUaGUgcXVvdGUgY2hhcmFjdGVycyB0byBzdHJpcC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGhvdXQgdGhlIHF1b3Rlcy5cbiAqL1xuZ29vZy5zdHJpbmcuc3RyaXBRdW90ZXMgPSBmdW5jdGlvbihzdHIsIHF1b3RlQ2hhcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBsZW5ndGggPSBxdW90ZUNoYXJzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHF1b3RlQ2hhciA9IGxlbmd0aCA9PSAxID8gcXVvdGVDaGFycyA6IHF1b3RlQ2hhcnMuY2hhckF0KGkpO1xuICAgIGlmIChzdHIuY2hhckF0KDApID09IHF1b3RlQ2hhciAmJiBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKSA9PSBxdW90ZUNoYXIpIHtcbiAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDEsIHN0ci5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBUcnVuY2F0ZXMgYSBzdHJpbmcgdG8gYSBjZXJ0YWluIGxlbmd0aCBhbmQgYWRkcyAnLi4uJyBpZiBuZWNlc3NhcnkuICBUaGVcbiAqIGxlbmd0aCBhbHNvIGFjY291bnRzIGZvciB0aGUgZWxsaXBzaXMsIHNvIGEgbWF4aW11bSBsZW5ndGggb2YgMTAgYW5kIGEgc3RyaW5nXG4gKiAnSGVsbG8gV29ybGQhJyBwcm9kdWNlcyAnSGVsbG8gVy4uLicuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gKiBAcGFyYW0ge251bWJlcn0gY2hhcnMgTWF4IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycyBXaGV0aGVyIHRvIHByb3RlY3QgZXNjYXBlZFxuICogICAgIGNoYXJhY3RlcnMgZnJvbSBiZWluZyBjdXQgb2ZmIGluIHRoZSBtaWRkbGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cnVuY2F0ZWQgYHN0cmAgc3RyaW5nLlxuICovXG5nb29nLnN0cmluZy50cnVuY2F0ZSA9IGZ1bmN0aW9uKHN0ciwgY2hhcnMsIG9wdF9wcm90ZWN0RXNjYXBlZENoYXJhY3RlcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAob3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycykge1xuICAgIHN0ciA9IGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoc3RyKTtcbiAgfVxuXG4gIGlmIChzdHIubGVuZ3RoID4gY2hhcnMpIHtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGNoYXJzIC0gMykgKyAnLi4uJztcbiAgfVxuXG4gIGlmIChvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzKSB7XG4gICAgc3RyID0gZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShzdHIpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBUcnVuY2F0ZSBhIHN0cmluZyBpbiB0aGUgbWlkZGxlLCBhZGRpbmcgXCIuLi5cIiBpZiBuZWNlc3NhcnksXG4gKiBhbmQgZmF2b3JpbmcgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHRydW5jYXRlIHRoZSBtaWRkbGUgb2YuXG4gKiBAcGFyYW0ge251bWJlcn0gY2hhcnMgTWF4IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycyBXaGV0aGVyIHRvIHByb3RlY3QgZXNjYXBlZFxuICogICAgIGNoYXJhY3RlcnMgZnJvbSBiZWluZyBjdXRvZmYgaW4gdGhlIG1pZGRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3RyYWlsaW5nQ2hhcnMgT3B0aW9uYWwgbnVtYmVyIG9mIHRyYWlsaW5nIGNoYXJhY3RlcnMgdG9cbiAqICAgICBsZWF2ZSBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIGluc3RlYWQgb2YgdHJ1bmNhdGluZyBhcyBjbG9zZSB0byB0aGVcbiAqICAgICBtaWRkbGUgYXMgcG9zc2libGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgdHJ1bmNhdGVkIGNvcHkgb2YgYHN0cmAuXG4gKi9cbmdvb2cuc3RyaW5nLnRydW5jYXRlTWlkZGxlID0gZnVuY3Rpb24oXG4gICAgc3RyLCBjaGFycywgb3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycywgb3B0X3RyYWlsaW5nQ2hhcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAob3B0X3Byb3RlY3RFc2NhcGVkQ2hhcmFjdGVycykge1xuICAgIHN0ciA9IGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoc3RyKTtcbiAgfVxuXG4gIGlmIChvcHRfdHJhaWxpbmdDaGFycyAmJiBzdHIubGVuZ3RoID4gY2hhcnMpIHtcbiAgICBpZiAob3B0X3RyYWlsaW5nQ2hhcnMgPiBjaGFycykge1xuICAgICAgb3B0X3RyYWlsaW5nQ2hhcnMgPSBjaGFycztcbiAgICB9XG4gICAgY29uc3QgZW5kUG9pbnQgPSBzdHIubGVuZ3RoIC0gb3B0X3RyYWlsaW5nQ2hhcnM7XG4gICAgY29uc3Qgc3RhcnRQb2ludCA9IGNoYXJzIC0gb3B0X3RyYWlsaW5nQ2hhcnM7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdGFydFBvaW50KSArICcuLi4nICsgc3RyLnN1YnN0cmluZyhlbmRQb2ludCk7XG4gIH0gZWxzZSBpZiAoc3RyLmxlbmd0aCA+IGNoYXJzKSB7XG4gICAgLy8gRmF2b3IgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nOlxuICAgIGxldCBoYWxmID0gTWF0aC5mbG9vcihjaGFycyAvIDIpO1xuICAgIGNvbnN0IGVuZFBvcyA9IHN0ci5sZW5ndGggLSBoYWxmO1xuICAgIGhhbGYgKz0gY2hhcnMgJSAyO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaGFsZikgKyAnLi4uJyArIHN0ci5zdWJzdHJpbmcoZW5kUG9zKTtcbiAgfVxuXG4gIGlmIChvcHRfcHJvdGVjdEVzY2FwZWRDaGFyYWN0ZXJzKSB7XG4gICAgc3RyID0gZ29vZy5zdHJpbmcuaHRtbEVzY2FwZShzdHIpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiBTcGVjaWFsIGNoYXJzIHRoYXQgbmVlZCB0byBiZSBlc2NhcGVkIGZvciBnb29nLnN0cmluZy5xdW90ZS5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzXyA9IHtcbiAgJ1xcMCc6ICdcXFxcMCcsXG4gICdcXGInOiAnXFxcXGInLFxuICAnXFxmJzogJ1xcXFxmJyxcbiAgJ1xcbic6ICdcXFxcbicsXG4gICdcXHInOiAnXFxcXHInLFxuICAnXFx0JzogJ1xcXFx0JyxcbiAgJ1xceDBCJzogJ1xcXFx4MEInLCAgLy8gJ1xcdicgaXMgbm90IHN1cHBvcnRlZCBpbiBKU2NyaXB0XG4gICdcIic6ICdcXFxcXCInLFxuICAnXFxcXCc6ICdcXFxcXFxcXCcsXG4gIC8vIFRvIHN1cHBvcnQgdGhlIHVzZSBjYXNlIG9mIGVtYmVkZGluZyBxdW90ZWQgc3RyaW5ncyBpbnNpZGUgb2Ygc2NyaXB0XG4gIC8vIHRhZ3MsIHdlIGhhdmUgdG8gbWFrZSBzdXJlIEhUTUwgY29tbWVudHMgYW5kIG9wZW5pbmcvY2xvc2luZyBzY3JpcHQgdGFncyBkb1xuICAvLyBub3QgYXBwZWFyIGluIHRoZSByZXN1bHRpbmcgc3RyaW5nLiBUaGUgc3BlY2lmaWMgc3RyaW5ncyB0aGF0IG11c3QgYmVcbiAgLy8gZXNjYXBlZCBhcmUgZG9jdW1lbnRlZCBhdDpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjcmVzdHJpY3Rpb25zLWZvci1jb250ZW50cy1vZi1zY3JpcHQtZWxlbWVudHNcbiAgJzwnOiAnXFxcXHUwMDNDJyAgLy8gTk9URTogSlNPTi5wYXJzZSBjcmFzaGVzIG9uICdcXFxceDNjJy5cbn07XG5cblxuLyoqXG4gKiBDaGFyYWN0ZXIgbWFwcGluZ3MgdXNlZCBpbnRlcm5hbGx5IGZvciBnb29nLnN0cmluZy5lc2NhcGVDaGFyLlxuICogQHByaXZhdGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5nb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlXyA9IHtcbiAgJ1xcJyc6ICdcXFxcXFwnJ1xufTtcblxuXG4vKipcbiAqIEVuY2xvc2VzIGEgc3RyaW5nIGluIGRvdWJsZSBxdW90ZXMgYW5kIGVzY2FwZXMgY2hhcmFjdGVycyBzbyB0aGF0IHRoZVxuICogc3RyaW5nIGlzIGEgdmFsaWQgSlMgc3RyaW5nLiBUaGUgcmVzdWx0aW5nIHN0cmluZyBpcyBzYWZlIHRvIGVtYmVkIGluXG4gKiBgPHNjcmlwdD5gIHRhZ3MgYXMgXCI8XCIgaXMgZXNjYXBlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBzdHJpbmcgdG8gcXVvdGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgY29weSBvZiBgc2Agc3Vycm91bmRlZCBieSBkb3VibGUgcXVvdGVzLlxuICovXG5nb29nLnN0cmluZy5xdW90ZSA9IGZ1bmN0aW9uKHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBzID0gU3RyaW5nKHMpO1xuICBjb25zdCBzYiA9IFsnXCInXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2ggPSBzLmNoYXJBdChpKTtcbiAgICBjb25zdCBjYyA9IGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgc2JbaSArIDFdID0gZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzX1tjaF0gfHxcbiAgICAgICAgKChjYyA+IDMxICYmIGNjIDwgMTI3KSA/IGNoIDogZ29vZy5zdHJpbmcuZXNjYXBlQ2hhcihjaCkpO1xuICB9XG4gIHNiLnB1c2goJ1wiJyk7XG4gIHJldHVybiBzYi5qb2luKCcnKTtcbn07XG5cblxuLyoqXG4gKiBUYWtlcyBhIHN0cmluZyBhbmQgcmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcgZm9yIHRoYXQgaW5wdXQgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBzdHJgLlxuICovXG5nb29nLnN0cmluZy5lc2NhcGVTdHJpbmcgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBzYiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHNiW2ldID0gZ29vZy5zdHJpbmcuZXNjYXBlQ2hhcihzdHIuY2hhckF0KGkpKTtcbiAgfVxuICByZXR1cm4gc2Iuam9pbignJyk7XG59O1xuXG5cbi8qKlxuICogVGFrZXMgYSBjaGFyYWN0ZXIgYW5kIHJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nIGZvciB0aGF0IGNoYXJhY3Rlci4gRm9yXG4gKiBleGFtcGxlIGVzY2FwZUNoYXIoU3RyaW5nLmZyb21DaGFyQ29kZSgxNSkpIC0+IFwiXFxcXHgwRVwiLlxuICogQHBhcmFtIHtzdHJpbmd9IGMgVGhlIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgY2AuXG4gKi9cbmdvb2cuc3RyaW5nLmVzY2FwZUNoYXIgPSBmdW5jdGlvbihjKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGMgaW4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV8pIHtcbiAgICByZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bY107XG4gIH1cblxuICBpZiAoYyBpbiBnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfKSB7XG4gICAgcmV0dXJuIGdvb2cuc3RyaW5nLmpzRXNjYXBlQ2FjaGVfW2NdID0gZ29vZy5zdHJpbmcuc3BlY2lhbEVzY2FwZUNoYXJzX1tjXTtcbiAgfVxuXG4gIGxldCBydiA9IGM7XG4gIGNvbnN0IGNjID0gYy5jaGFyQ29kZUF0KDApO1xuICBpZiAoY2MgPiAzMSAmJiBjYyA8IDEyNykge1xuICAgIHJ2ID0gYztcbiAgfSBlbHNlIHtcbiAgICAvLyB0YWIgaXMgOSBidXQgaGFuZGxlZCBhYm92ZVxuICAgIGlmIChjYyA8IDI1Nikge1xuICAgICAgcnYgPSAnXFxcXHgnO1xuICAgICAgaWYgKGNjIDwgMTYgfHwgY2MgPiAyNTYpIHtcbiAgICAgICAgcnYgKz0gJzAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBydiA9ICdcXFxcdSc7XG4gICAgICBpZiAoY2MgPCA0MDk2KSB7ICAvLyBcXHUxMDAwXG4gICAgICAgIHJ2ICs9ICcwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcnYgKz0gY2MudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIH1cblxuICByZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bY10gPSBydjtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgY29udGFpbnMgYSBzdWJzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlN0cmluZyBUaGUgc3Vic3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGBzdHJgIGNvbnRhaW5zIGBzdWJTdHJpbmdgLlxuICovXG5nb29nLnN0cmluZy5jb250YWlucyA9IGdvb2cuc3RyaW5nLmludGVybmFsLmNvbnRhaW5zO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGNvbnRhaW5zIGEgc3Vic3RyaW5nLCBpZ25vcmluZyBjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJTdHJpbmcgVGhlIHN1YnN0cmluZyB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBgc3RyYCBjb250YWlucyBgc3ViU3RyaW5nYC5cbiAqL1xuZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29udGFpbnMgPVxuICAgIGdvb2cuc3RyaW5nLmludGVybmFsLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zO1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgbm9uLW92ZXJsYXBwaW5nIG9jY3VycmVuY2VzIG9mIHNzIGluIHMuXG4gKiBJZiBlaXRoZXIgcyBvciBzcyBldmFsdXRlcyB0byBmYWxzZSwgdGhlbiByZXR1cm5zIHplcm8uXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgc3RyaW5nIHRvIGxvb2sgaW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3MgVGhlIHN0cmluZyB0byBsb29rIGZvci5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIG9jY3VycmVuY2VzIG9mIHNzIGluIHMuXG4gKi9cbmdvb2cuc3RyaW5nLmNvdW50T2YgPSBmdW5jdGlvbihzLCBzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBzICYmIHNzID8gcy5zcGxpdChzcykubGVuZ3RoIC0gMSA6IDA7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhIHN1YnN0cmluZyBvZiBhIHNwZWNpZmllZCBsZW5ndGggYXQgYSBzcGVjaWZpY1xuICogaW5kZXggaW4gYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgYmFzZSBzdHJpbmcgZnJvbSB3aGljaCB0byByZW1vdmUuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGF0IHdoaWNoIHRvIHJlbW92ZSB0aGUgc3Vic3RyaW5nLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0cmluZ0xlbmd0aCBUaGUgbGVuZ3RoIG9mIHRoZSBzdWJzdHJpbmcgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2YgYHNgIHdpdGggdGhlIHN1YnN0cmluZyByZW1vdmVkIG9yIHRoZSBmdWxsXG4gKiAgICAgc3RyaW5nIGlmIG5vdGhpbmcgaXMgcmVtb3ZlZCBvciB0aGUgaW5wdXQgaXMgaW52YWxpZC5cbiAqL1xuZ29vZy5zdHJpbmcucmVtb3ZlQXQgPSBmdW5jdGlvbihzLCBpbmRleCwgc3RyaW5nTGVuZ3RoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgbGV0IHJlc3VsdFN0ciA9IHM7XG4gIC8vIElmIHRoZSBpbmRleCBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIDAgdGhlbiByZW1vdmUgc3Vic3RyaW5nXG4gIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcy5sZW5ndGggJiYgc3RyaW5nTGVuZ3RoID4gMCkge1xuICAgIHJlc3VsdFN0ciA9IHMuc3Vic3RyKDAsIGluZGV4KSArXG4gICAgICAgIHMuc3Vic3RyKGluZGV4ICsgc3RyaW5nTGVuZ3RoLCBzLmxlbmd0aCAtIGluZGV4IC0gc3RyaW5nTGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0U3RyO1xufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBzdWJzdHJpbmcgZnJvbSBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIGJhc2Ugc3RyaW5nIGZyb20gd2hpY2ggdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YnN0ciBUaGUgc3RyaW5nIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzdHJgIHdpdGggYHN1YnN0cmAgcmVtb3ZlZCBvciB0aGVcbiAqICAgICBmdWxsIHN0cmluZyBpZiBub3RoaW5nIGlzIHJlbW92ZWQuXG4gKi9cbmdvb2cuc3RyaW5nLnJlbW92ZSA9IGZ1bmN0aW9uKHN0ciwgc3Vic3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHN1YnN0ciwgJycpO1xufTtcblxuXG4vKipcbiAqICBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBhIHN1YnN0cmluZyBmcm9tIGEgc3RyaW5nLlxuICogIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBiYXNlIHN0cmluZyBmcm9tIHdoaWNoIHRvIHJlbW92ZS5cbiAqICBAcGFyYW0ge3N0cmluZ30gc3MgVGhlIHN0cmluZyB0byByZW1vdmUuXG4gKiAgQHJldHVybiB7c3RyaW5nfSBBIGNvcHkgb2YgYHNgIHdpdGggYHNzYCByZW1vdmVkIG9yIHRoZSBmdWxsXG4gKiAgICAgIHN0cmluZyBpZiBub3RoaW5nIGlzIHJlbW92ZWQuXG4gKi9cbmdvb2cuc3RyaW5nLnJlbW92ZUFsbCA9IGZ1bmN0aW9uKHMsIHNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzcyksICdnJyk7XG4gIHJldHVybiBzLnJlcGxhY2UocmUsICcnKTtcbn07XG5cblxuLyoqXG4gKiAgUmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIGEgc3Vic3RyaW5nIG9mIGEgc3RyaW5nIHdpdGggYSBuZXcgc3Vic3RyaW5nLlxuICogIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBiYXNlIHN0cmluZyBmcm9tIHdoaWNoIHRvIHJlbW92ZS5cbiAqICBAcGFyYW0ge3N0cmluZ30gc3MgVGhlIHN0cmluZyB0byByZXBsYWNlLlxuICogIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgcmVwbGFjZW1lbnQgc3RyaW5nLlxuICogIEByZXR1cm4ge3N0cmluZ30gQSBjb3B5IG9mIGBzYCB3aXRoIGBzc2AgcmVwbGFjZWQgYnlcbiAqICAgICAgYHJlcGxhY2VtZW50YCBvciB0aGUgb3JpZ2luYWwgc3RyaW5nIGlmIG5vdGhpbmcgaXMgcmVwbGFjZWQuXG4gKi9cbmdvb2cuc3RyaW5nLnJlcGxhY2VBbGwgPSBmdW5jdGlvbihzLCBzcywgcmVwbGFjZW1lbnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHNzKSwgJ2cnKTtcbiAgcmV0dXJuIHMucmVwbGFjZShyZSwgcmVwbGFjZW1lbnQucmVwbGFjZSgvXFwkL2csICckJCQkJykpO1xufTtcblxuXG4vKipcbiAqIEVzY2FwZXMgY2hhcmFjdGVycyBpbiB0aGUgc3RyaW5nIHRoYXQgYXJlIG5vdCBzYWZlIHRvIHVzZSBpbiBhIFJlZ0V4cC5cbiAqIEBwYXJhbSB7Kn0gcyBUaGUgc3RyaW5nIHRvIGVzY2FwZS4gSWYgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlIGNhc3RlZFxuICogICAgIHRvIG9uZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWdFeHAgc2FmZSwgZXNjYXBlZCBjb3B5IG9mIGBzYC5cbiAqL1xuZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlID0gZnVuY3Rpb24ocykge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBTdHJpbmcocylcbiAgICAgIC5yZXBsYWNlKC8oWy0oKVxcW1xcXXt9Kz8qLiRcXF58LDojPCFcXFxcXSkvZywgJ1xcXFwkMScpXG4gICAgICAucmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcbn07XG5cblxuLyoqXG4gKiBSZXBlYXRzIGEgc3RyaW5nIG4gdGltZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbmluZyBgbGVuZ3RoYCByZXBldGl0aW9ucyBvZlxuICogICAgIGBzdHJpbmdgLlxuICovXG5nb29nLnN0cmluZy5yZXBlYXQgPSAoU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQpID8gZnVuY3Rpb24oc3RyaW5nLCBsZW5ndGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUaGUgbmF0aXZlIG1ldGhvZCBpcyBvdmVyIDEwMCB0aW1lcyBmYXN0ZXIgdGhhbiB0aGUgYWx0ZXJuYXRpdmUuXG4gIHJldHVybiBzdHJpbmcucmVwZWF0KGxlbmd0aCk7XG59IDogZnVuY3Rpb24oc3RyaW5nLCBsZW5ndGgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbmV3IEFycmF5KGxlbmd0aCArIDEpLmpvaW4oc3RyaW5nKTtcbn07XG5cblxuLyoqXG4gKiBQYWRzIG51bWJlciB0byBnaXZlbiBsZW5ndGggYW5kIG9wdGlvbmFsbHkgcm91bmRzIGl0IHRvIGEgZ2l2ZW4gcHJlY2lzaW9uLlxuICogRm9yIGV4YW1wbGU6XG4gKiA8cHJlPnBhZE51bWJlcigxLjI1LCAyLCAzKSAtPiAnMDEuMjUwJ1xuICogcGFkTnVtYmVyKDEuMjUsIDIpIC0+ICcwMS4yNSdcbiAqIHBhZE51bWJlcigxLjI1LCAyLCAxKSAtPiAnMDEuMydcbiAqIHBhZE51bWJlcigxLjI1LCAwKSAtPiAnMS4yNSc8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gcGFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgZGVzaXJlZCBsZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9wcmVjaXNpb24gVGhlIGRlc2lyZWQgcHJlY2lzaW9uLlxuICogQHJldHVybiB7c3RyaW5nfSBgbnVtYCBhcyBhIHN0cmluZyB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICovXG5nb29nLnN0cmluZy5wYWROdW1iZXIgPSBmdW5jdGlvbihudW0sIGxlbmd0aCwgb3B0X3ByZWNpc2lvbikge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKG51bSkpIHJldHVybiBTdHJpbmcobnVtKTtcbiAgbGV0IHMgPVxuICAgICAgKG9wdF9wcmVjaXNpb24gIT09IHVuZGVmaW5lZCkgPyBudW0udG9GaXhlZChvcHRfcHJlY2lzaW9uKSA6IFN0cmluZyhudW0pO1xuICBsZXQgaW5kZXggPSBzLmluZGV4T2YoJy4nKTtcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIGluZGV4ID0gcy5sZW5ndGg7XG4gIH1cbiAgY29uc3Qgc2lnbiA9IHNbMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICBpZiAoc2lnbikge1xuICAgIHMgPSBzLnN1YnN0cmluZygxKTtcbiAgfVxuICByZXR1cm4gc2lnbiArIGdvb2cuc3RyaW5nLnJlcGVhdCgnMCcsIE1hdGgubWF4KDAsIGxlbmd0aCAtIGluZGV4KSkgKyBzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIG9iamVjdCwgd2l0aFxuICogbnVsbCBhbmQgdW5kZWZpbmVkIGJlaW5nIHJldHVybmVkIGFzIHRoZSBlbXB0eSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHsqfSBvYmogVGhlIG9iamVjdCB0byBjb252ZXJ0LlxuICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYG9iamAuXG4gKi9cbmdvb2cuc3RyaW5nLm1ha2VTYWZlID0gZnVuY3Rpb24ob2JqKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIG9iaiA9PSBudWxsID8gJycgOiBTdHJpbmcob2JqKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyB3aXRoIGF0IGxlYXN0IDY0LWJpdHMgb2YgcmFuZG9tbmVzcy5cbiAqXG4gKiBEb2Vzbid0IHRydXN0IEphdmFTY3JpcHQncyByYW5kb20gZnVuY3Rpb24gZW50aXJlbHkuIFVzZXMgYSBjb21iaW5hdGlvbiBvZlxuICogcmFuZG9tIGFuZCBjdXJyZW50IHRpbWVzdGFtcCwgYW5kIHRoZW4gZW5jb2RlcyB0aGUgc3RyaW5nIGluIGJhc2UtMzYgdG9cbiAqIG1ha2UgaXQgc2hvcnRlci5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgcmFuZG9tIHN0cmluZywgZS5nLiBzbjFzN3ZiNGdjaWMuXG4gKi9cbmdvb2cuc3RyaW5nLmdldFJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IHggPSAyMTQ3NDgzNjQ4O1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogeCkudG9TdHJpbmcoMzYpICtcbiAgICAgIE1hdGguYWJzKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHgpIF4gZ29vZy5ub3coKSkudG9TdHJpbmcoMzYpO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIHR3byB2ZXJzaW9uIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2ZXJzaW9uMSBWZXJzaW9uIG9mIGZpcnN0IGl0ZW0uXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZlcnNpb24yIFZlcnNpb24gb2Ygc2Vjb25kIGl0ZW0uXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSAgMSBpZiBgdmVyc2lvbjFgIGlzIGhpZ2hlci5cbiAqICAgICAgICAgICAgICAgICAgIDAgaWYgYXJndW1lbnRzIGFyZSBlcXVhbC5cbiAqICAgICAgICAgICAgICAgICAgLTEgaWYgYHZlcnNpb24yYCBpcyBoaWdoZXIuXG4gKi9cbmdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyA9IGdvb2cuc3RyaW5nLmludGVybmFsLmNvbXBhcmVWZXJzaW9ucztcblxuXG4vKipcbiAqIFN0cmluZyBoYXNoIGZ1bmN0aW9uIHNpbWlsYXIgdG8gamF2YS5sYW5nLlN0cmluZy5oYXNoQ29kZSgpLlxuICogVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAqIHNbMF0gKiAzMSBeIChuIC0gMSkgKyBzWzFdICogMzEgXiAobiAtIDIpICsgLi4uICsgc1tuIC0gMV0sXG4gKiB3aGVyZSBzW2ldIGlzIHRoZSBpdGggY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgYW5kIG4gaXMgdGhlIGxlbmd0aCBvZlxuICogdGhlIHN0cmluZy4gV2UgbW9kIHRoZSByZXN1bHQgdG8gbWFrZSBpdCBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDJeMzJcbiAqIChleGNsdXNpdmUpLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gSGFzaCB2YWx1ZSBmb3IgYHN0cmAsIGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMl4zMlxuICogIChleGNsdXNpdmUpLiBUaGUgZW1wdHkgc3RyaW5nIHJldHVybnMgMC5cbiAqL1xuZ29vZy5zdHJpbmcuaGFzaENvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb3JtYWxpemUgdG8gNCBieXRlIHJhbmdlLCAwIC4uLiAyXjMyLlxuICAgIHJlc3VsdCA9ICgzMSAqIHJlc3VsdCArIHN0ci5jaGFyQ29kZUF0KGkpKSA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKipcbiAqIFRoZSBtb3N0IHJlY2VudCB1bmlxdWUgSUQuIHwwIGlzIGVxdWl2YWxlbnQgdG8gTWF0aC5mbG9vciBpbiB0aGlzIGNhc2UuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5zdHJpbmcudW5pcXVlU3RyaW5nQ291bnRlcl8gPSBNYXRoLnJhbmRvbSgpICogMHg4MDAwMDAwMCB8IDA7XG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYSBzdHJpbmcgd2hpY2ggaXMgdW5pcXVlIGluIHRoZSBjdXJyZW50IGRvY3VtZW50LlxuICogVGhpcyBpcyB1c2VmdWwsIGZvciBleGFtcGxlLCB0byBjcmVhdGUgdW5pcXVlIElEcyBmb3IgRE9NIGVsZW1lbnRzLlxuICogQHJldHVybiB7c3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqL1xuZ29vZy5zdHJpbmcuY3JlYXRlVW5pcXVlU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuICdnb29nXycgKyBnb29nLnN0cmluZy51bmlxdWVTdHJpbmdDb3VudGVyXysrO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBzdXBwbGllZCBzdHJpbmcgdG8gYSBudW1iZXIsIHdoaWNoIG1heSBiZSBJbmZpbml0eSBvciBOYU4uXG4gKiBUaGlzIGZ1bmN0aW9uIHN0cmlwcyB3aGl0ZXNwYWNlOiAodG9OdW1iZXIoJyAxMjMnKSA9PT0gMTIzKVxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIHNjaWVudGlmaWMgbm90YXRpb246ICh0b051bWJlcignMWUxJykgPT09IDEwKVxuICpcbiAqIFRoaXMgaXMgYmV0dGVyIHRoYW4gSmF2YVNjcmlwdCdzIGJ1aWx0LWluIGNvbnZlcnNpb25zIGJlY2F1c2UsIHNhZGx5OlxuICogICAgIChOdW1iZXIoJyAnKSA9PT0gMCkgYW5kIChwYXJzZUZsb2F0KCcxMjNhJykgPT09IDEyMylcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciB0aGUgc3VwcGxpZWQgc3RyaW5nIHJlcHJlc2VudHMsIG9yIE5hTi5cbiAqL1xuZ29vZy5zdHJpbmcudG9OdW1iZXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBudW0gPSBOdW1iZXIoc3RyKTtcbiAgaWYgKG51bSA9PSAwICYmIGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2Uoc3RyKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgcmV0dXJuIG51bTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIHN0cmluZyBpcyBsb3dlciBjYW1lbCBjYXNlIChlLmcuIFwiaXNGb29CYXJcIikuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgYXNzdW1lcyB0aGUgc3RyaW5nIGlzIGVudGlyZWx5IGxldHRlcnMuXG4gKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlI1ZhcmlhdGlvbnNfYW5kX3N5bm9ueW1zXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHN0cmluZyBpcyBsb3dlciBjYW1lbCBjYXNlLlxuICovXG5nb29nLnN0cmluZy5pc0xvd2VyQ2FtZWxDYXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIC9eW2Etel0rKFtBLVpdW2Etel0qKSokLy50ZXN0KHN0cik7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBzdHJpbmcgaXMgdXBwZXIgY2FtZWwgY2FzZSAoZS5nLiBcIkZvb0JhckJhelwiKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBhc3N1bWVzIHRoZSBzdHJpbmcgaXMgZW50aXJlbHkgbGV0dGVycy5cbiAqIEBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UjVmFyaWF0aW9uc19hbmRfc3lub255bXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgc3RyaW5nIGlzIHVwcGVyIGNhbWVsIGNhc2UuXG4gKi9cbmdvb2cuc3RyaW5nLmlzVXBwZXJDYW1lbENhc2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gL14oW0EtWl1bYS16XSopKyQvLnRlc3Qoc3RyKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBmcm9tIHNlbGVjdG9yLWNhc2UgdG8gY2FtZWxDYXNlIChlLmcuIGZyb21cbiAqIFwibXVsdGktcGFydC1zdHJpbmdcIiB0byBcIm11bHRpUGFydFN0cmluZ1wiKSwgdXNlZnVsIGZvciBjb252ZXJ0aW5nXG4gKiBDU1Mgc2VsZWN0b3JzIGFuZCBIVE1MIGRhdGFzZXQga2V5cyB0byB0aGVpciBlcXVpdmFsZW50IEpTIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gc2VsZWN0b3ItY2FzZSBmb3JtLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIGluIGNhbWVsQ2FzZSBmb3JtLlxuICovXG5nb29nLnN0cmluZy50b0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC9cXC0oW2Etel0pL2csIGZ1bmN0aW9uKGFsbCwgbWF0Y2gpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGZyb20gY2FtZWxDYXNlIHRvIHNlbGVjdG9yLWNhc2UgKGUuZy4gZnJvbVxuICogXCJtdWx0aVBhcnRTdHJpbmdcIiB0byBcIm11bHRpLXBhcnQtc3RyaW5nXCIpLCB1c2VmdWwgZm9yIGNvbnZlcnRpbmcgSlNcbiAqIHN0eWxlIGFuZCBkYXRhc2V0IHByb3BlcnRpZXMgdG8gZXF1aXZhbGVudCBDU1Mgc2VsZWN0b3JzIGFuZCBIVE1MIGtleXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgaW4gY2FtZWxDYXNlIGZvcm0uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgaW4gc2VsZWN0b3ItY2FzZSBmb3JtLlxuICovXG5nb29nLnN0cmluZy50b1NlbGVjdG9yQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGludG8gVGl0bGVDYXNlLiBGaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBpcyBhbHdheXNcbiAqIGNhcGl0YWxpemVkIGluIGFkZGl0aW9uIHRvIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZXZlcnkgc3Vic2VxdWVudCB3b3JkLlxuICogV29yZHMgYXJlIGRlbGltaXRlZCBieSBvbmUgb3IgbW9yZSB3aGl0ZXNwYWNlcyBieSBkZWZhdWx0LiBDdXN0b20gZGVsaW1pdGVyc1xuICogY2FuIG9wdGlvbmFsbHkgYmUgc3BlY2lmaWVkIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHQsIHdoaWNoIGRvZXNuJ3QgcHJlc2VydmVcbiAqIHdoaXRlc3BhY2UgZGVsaW1pdGVycyBhbmQgaW5zdGVhZCBtdXN0IGJlIGV4cGxpY2l0bHkgaW5jbHVkZWQgaWYgbmVlZGVkLlxuICpcbiAqIERlZmF1bHQgZGVsaW1pdGVyID0+IFwiIFwiOlxuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZVR3b1RocmVlJykgICAgPT4gJ09uZVR3b1RocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZSB0d28gdGhyZWUnKSAgPT4gJ09uZSBUd28gVGhyZWUnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnICBvbmUgICB0d28gICAnKSA9PiAnICBPbmUgICBUd28gICAnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnb25lX3R3b190aHJlZScpICA9PiAnT25lX3R3b190aHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUtdHdvLXRocmVlJykgID0+ICdPbmUtdHdvLXRocmVlJ1xuICpcbiAqIEN1c3RvbSBkZWxpbWl0ZXIgPT4gXCJfLS5cIjpcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmVUd29UaHJlZScsICdfLS4nKSAgICAgICA9PiAnT25lVHdvVGhyZWUnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnb25lIHR3byB0aHJlZScsICdfLS4nKSAgICAgPT4gJ09uZSB0d28gdGhyZWUnXG4gKiAgICBnb29nLnN0cmluZy50b1RpdGxlQ2FzZSgnICBvbmUgICB0d28gICAnLCAnXy0uJykgICAgPT4gJyAgb25lICAgdHdvICAgJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZV90d29fdGhyZWUnLCAnXy0uJykgICAgID0+ICdPbmVfVHdvX1RocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZS10d28tdGhyZWUnLCAnXy0uJykgICAgID0+ICdPbmUtVHdvLVRocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZS4uLnR3by4uLnRocmVlJywgJ18tLicpID0+ICdPbmUuLi5Ud28uLi5UaHJlZSdcbiAqICAgIGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlKCdvbmUuIHR3by4gdGhyZWUnLCAnXy0uJykgICA9PiAnT25lLiB0d28uIHRocmVlJ1xuICogICAgZ29vZy5zdHJpbmcudG9UaXRsZUNhc2UoJ29uZS10d28udGhyZWUnLCAnXy0uJykgICAgID0+ICdPbmUtVHdvLlRocmVlJ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHZhbHVlIGluIGNhbWVsQ2FzZSBmb3JtLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZGVsaW1pdGVycyBDdXN0b20gZGVsaW1pdGVyIGNoYXJhY3RlciBzZXQgdXNlZCB0b1xuICogICAgICBkaXN0aW5ndWlzaCB3b3JkcyBpbiB0aGUgc3RyaW5nIHZhbHVlLiBFYWNoIGNoYXJhY3RlciByZXByZXNlbnRzIGFcbiAqICAgICAgc2luZ2xlIGRlbGltaXRlci4gV2hlbiBwcm92aWRlZCwgZGVmYXVsdCB3aGl0ZXNwYWNlIGRlbGltaXRlciBpc1xuICogICAgICBvdmVycmlkZGVuIGFuZCBtdXN0IGJlIGV4cGxpY2l0bHkgaW5jbHVkZWQgaWYgbmVlZGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUgaW4gVGl0bGVDYXNlIGZvcm0uXG4gKi9cbmdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlID0gZnVuY3Rpb24oc3RyLCBvcHRfZGVsaW1pdGVycykge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCBkZWxpbWl0ZXJzID0gKHR5cGVvZiBvcHRfZGVsaW1pdGVycyA9PT0gJ3N0cmluZycpID9cbiAgICAgIGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShvcHRfZGVsaW1pdGVycykgOlxuICAgICAgJ1xcXFxzJztcblxuICAvLyBGb3IgSUU4LCB3ZSBuZWVkIHRvIHByZXZlbnQgdXNpbmcgYW4gZW1wdHkgY2hhcmFjdGVyIHNldC4gT3RoZXJ3aXNlLFxuICAvLyBpbmNvcnJlY3QgbWF0Y2hpbmcgd2lsbCBvY2N1ci5cbiAgZGVsaW1pdGVycyA9IGRlbGltaXRlcnMgPyAnfFsnICsgZGVsaW1pdGVycyArICddKycgOiAnJztcblxuICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKCcoXicgKyBkZWxpbWl0ZXJzICsgJykoW2Etel0pJywgJ2cnKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ2V4cCwgZnVuY3Rpb24oYWxsLCBwMSwgcDIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHAxICsgcDIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQ2FwaXRhbGl6ZXMgYSBzdHJpbmcsIGkuZS4gY29udmVydHMgdGhlIGZpcnN0IGxldHRlciB0byB1cHBlcmNhc2VcbiAqIGFuZCBhbGwgb3RoZXIgbGV0dGVycyB0byBsb3dlcmNhc2UsIGUuZy46XG4gKlxuICogZ29vZy5zdHJpbmcuY2FwaXRhbGl6ZSgnb25lJykgICAgID0+ICdPbmUnXG4gKiBnb29nLnN0cmluZy5jYXBpdGFsaXplKCdPTkUnKSAgICAgPT4gJ09uZSdcbiAqIGdvb2cuc3RyaW5nLmNhcGl0YWxpemUoJ29uZSB0d28nKSA9PiAnT25lIHR3bydcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0cmltIGluaXRpYWwgd2hpdGVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB2YWx1ZSB0byBjYXBpdGFsaXplLlxuICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgdmFsdWUgd2l0aCBmaXJzdCBsZXR0ZXIgaW4gdXBwZXJjYXNlLlxuICovXG5nb29nLnN0cmluZy5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIFN0cmluZyhzdHIuY2hhckF0KDApKS50b1VwcGVyQ2FzZSgpICtcbiAgICAgIFN0cmluZyhzdHIuc3Vic3RyKDEpKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGluIGRlY2ltYWwgb3IgaGV4aWRlY2ltYWwgKCcweEZGRkYnKSBmb3JtLlxuICpcbiAqIFRvIHBhcnNlIGEgcGFydGljdWxhciByYWRpeCwgcGxlYXNlIHVzZSBwYXJzZUludChzdHJpbmcsIHJhZGl4KSBkaXJlY3RseS4gU2VlXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9wYXJzZUludFxuICpcbiAqIFRoaXMgaXMgYSB3cmFwcGVyIGZvciB0aGUgYnVpbHQtaW4gcGFyc2VJbnQgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgcGFyc2VcbiAqIG51bWJlcnMgYXMgYmFzZSAxMCBvciBiYXNlIDE2LiAgU29tZSBKUyBpbXBsZW1lbnRhdGlvbnMgYXNzdW1lIHN0cmluZ3NcbiAqIHN0YXJ0aW5nIHdpdGggXCIwXCIgYXJlIGludGVuZGVkIHRvIGJlIG9jdGFsLiBFUzMgYWxsb3dlZCBidXQgZGlzY291cmFnZWRcbiAqIHRoaXMgYmVoYXZpb3IuIEVTNSBmb3JiaWRzIGl0LiAgVGhpcyBmdW5jdGlvbiBlbXVsYXRlcyB0aGUgRVM1IGJlaGF2aW9yLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgTW96aWxsYSBKUyBSZWZlcmVuY2U6IGh0dHA6Ly9nb28uZ2wvOFJpRmpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8bnVsbHx1bmRlZmluZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBwYXJzZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIsIHBhcnNlZC4gSWYgdGhlIHN0cmluZyBmYWlsZWQgdG8gcGFyc2UsIHRoaXNcbiAqICAgICB3aWxsIGJlIE5hTi5cbiAqL1xuZ29vZy5zdHJpbmcucGFyc2VJbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIEZvcmNlIGZpbml0ZSBudW1iZXJzIHRvIHN0cmluZ3MuXG4gIGlmIChpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIC8vIElmIHRoZSBzdHJpbmcgc3RhcnRzIHdpdGggJzB4JyBvciAnLTB4JywgcGFyc2UgYXMgaGV4LlxuICAgIHJldHVybiAvXlxccyotPzB4L2kudGVzdCh2YWx1ZSkgPyBwYXJzZUludCh2YWx1ZSwgMTYpIDogcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgfVxuXG4gIHJldHVybiBOYU47XG59O1xuXG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIG9uIGEgc2VwYXJhdG9yIGEgbGltaXRlZCBudW1iZXIgb2YgdGltZXMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBtb3JlIHNpbWlsYXIgdG8gUHl0aG9uIG9yIEphdmEsIHdoZXJlIHRoZSBsaW1pdFxuICogcGFyYW1ldGVyIHNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc3BsaXRzIHJhdGhlciB0aGFuIHRydW5jYXRpbmdcbiAqIHRoZSBudW1iZXIgb2YgcmVzdWx0cy5cbiAqXG4gKiBTZWUgaHR0cDovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvc3RkdHlwZXMuaHRtbCNzdHIuc3BsaXRcbiAqIFNlZSBKYXZhRG9jOiBodHRwOi8vZ29vLmdsL0YyQXNZXG4gKiBTZWUgTW96aWxsYSByZWZlcmVuY2U6IGh0dHA6Ly9nb28uZ2wvZFpkWnNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBzcGxpdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbGltaXQgdG8gdGhlIG51bWJlciBvZiBzcGxpdHMuIFRoZSByZXN1bHRpbmcgYXJyYXlcbiAqICAgICB3aWxsIGhhdmUgYSBtYXhpbXVtIGxlbmd0aCBvZiBsaW1pdCsxLiAgTmVnYXRpdmUgbnVtYmVycyBhcmUgdGhlIHNhbWVcbiAqICAgICBhcyB6ZXJvLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IFRoZSBzdHJpbmcsIHNwbGl0LlxuICovXG5nb29nLnN0cmluZy5zcGxpdExpbWl0ID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgcGFydHMgPSBzdHIuc3BsaXQoc2VwYXJhdG9yKTtcbiAgY29uc3QgcmV0dXJuVmFsID0gW107XG5cbiAgLy8gT25seSBjb250aW51ZSBkb2luZyB0aGlzIHdoaWxlIHdlIGhhdmVuJ3QgaGl0IHRoZSBsaW1pdCBhbmQgd2UgaGF2ZVxuICAvLyBwYXJ0cyBsZWZ0LlxuICB3aGlsZSAobGltaXQgPiAwICYmIHBhcnRzLmxlbmd0aCkge1xuICAgIHJldHVyblZhbC5wdXNoKHBhcnRzLnNoaWZ0KCkpO1xuICAgIGxpbWl0LS07XG4gIH1cblxuICAvLyBJZiB0aGVyZSBhcmUgcmVtYWluaW5nIHBhcnRzLCBhcHBlbmQgdGhlbSB0byB0aGUgZW5kLlxuICBpZiAocGFydHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuVmFsLnB1c2gocGFydHMuam9pbihzZXBhcmF0b3IpKTtcbiAgfVxuXG4gIHJldHVybiByZXR1cm5WYWw7XG59O1xuXG5cbi8qKlxuICogRmluZHMgdGhlIGNoYXJhY3RlcnMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBsYXN0IGluc3RhbmNlIG9mIGFueSBzZXBhcmF0b3JcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHNpbWlsYXIgdG8gZ29vZy5zdHJpbmcucGF0aC5iYXNlTmFtZSwgZXhjZXB0IGl0IGNhbiB0YWtlIGFcbiAqIGxpc3Qgb2YgY2hhcmFjdGVycyB0byBzcGxpdCB0aGUgc3RyaW5nIG9uLiBJdCB3aWxsIHJldHVybiB0aGUgcmlnaHRtb3N0XG4gKiBncm91cGluZyBvZiBjaGFyYWN0ZXJzIHRvIHRoZSByaWdodCBvZiBhbnkgc2VwYXJhdG9yIGFzIGEgbGVmdC10by1yaWdodFxuICogb3JpZW50ZWQgc3RyaW5nLlxuICpcbiAqIEBzZWUgZ29vZy5zdHJpbmcucGF0aC5iYXNlTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ3whQXJyYXk8c3RyaW5nPn0gc2VwYXJhdG9ycyBBIGxpc3Qgb2Ygc2VwYXJhdG9yIGNoYXJhY3RlcnNcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGxhc3QgcGFydCBvZiB0aGUgc3RyaW5nIHdpdGggcmVzcGVjdCB0byB0aGUgc2VwYXJhdG9yc1xuICovXG5nb29nLnN0cmluZy5sYXN0Q29tcG9uZW50ID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3JzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFzZXBhcmF0b3JzKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VwYXJhdG9ycyA9PSAnc3RyaW5nJykge1xuICAgIHNlcGFyYXRvcnMgPSBbc2VwYXJhdG9yc107XG4gIH1cblxuICBsZXQgbGFzdFNlcGFyYXRvckluZGV4ID0gLTE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VwYXJhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzZXBhcmF0b3JzW2ldID09ICcnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFNlcGFyYXRvckluZGV4ID0gc3RyLmxhc3RJbmRleE9mKHNlcGFyYXRvcnNbaV0pO1xuICAgIGlmIChjdXJyZW50U2VwYXJhdG9ySW5kZXggPiBsYXN0U2VwYXJhdG9ySW5kZXgpIHtcbiAgICAgIGxhc3RTZXBhcmF0b3JJbmRleCA9IGN1cnJlbnRTZXBhcmF0b3JJbmRleDtcbiAgICB9XG4gIH1cbiAgaWYgKGxhc3RTZXBhcmF0b3JJbmRleCA9PSAtMSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0ci5zbGljZShsYXN0U2VwYXJhdG9ySW5kZXggKyAxKTtcbn07XG5cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgTGV2ZW5zaHRlaW4gZWRpdCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlZGl0IGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBzdHJpbmdzLlxuICovXG5nb29nLnN0cmluZy5lZGl0RGlzdGFuY2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgdjAgPSBbXTtcbiAgY29uc3QgdjEgPSBbXTtcblxuICBpZiAoYSA9PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoIWEubGVuZ3RoIHx8ICFiLmxlbmd0aCkge1xuICAgIHJldHVybiBNYXRoLm1heChhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiLmxlbmd0aCArIDE7IGkrKykge1xuICAgIHYwW2ldID0gaTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHYxWzBdID0gaSArIDE7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGIubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IGNvc3QgPSBOdW1iZXIoYVtpXSAhPSBiW2pdKTtcbiAgICAgIC8vIENvc3QgZm9yIHRoZSBzdWJzdHJpbmcgaXMgdGhlIG1pbmltdW0gb2YgYWRkaW5nIG9uZSBjaGFyYWN0ZXIsIHJlbW92aW5nXG4gICAgICAvLyBvbmUgY2hhcmFjdGVyLCBvciBhIHN3YXAuXG4gICAgICB2MVtqICsgMV0gPSBNYXRoLm1pbih2MVtqXSArIDEsIHYwW2ogKyAxXSArIDEsIHYwW2pdICsgY29zdCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB2MC5sZW5ndGg7IGorKykge1xuICAgICAgdjBbal0gPSB2MVtqXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdjFbYi5sZW5ndGhdO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUaGUgZGlzcG9zZSBtZXRob2QgaXMgdXNlZCB0byBjbGVhbiB1cCByZWZlcmVuY2VzIGFuZFxuICogcmVzb3VyY2VzLlxuICovXG5cbmdvb2cubW9kdWxlKCdnb29nLmRpc3Bvc2UnKTtcbmdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UoKTtcblxuLyoqXG4gKiBDYWxscyBgZGlzcG9zZWAgb24gdGhlIGFyZ3VtZW50IGlmIGl0IHN1cHBvcnRzIGl0LiBJZiBvYmogaXMgbm90IGFuXG4gKiAgICAgb2JqZWN0IHdpdGggYSBkaXNwb3NlKCkgbWV0aG9kLCB0aGlzIGlzIGEgbm8tb3AuXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgb2JqZWN0IHRvIGRpc3Bvc2Ugb2YuXG4gKi9cbmZ1bmN0aW9uIGRpc3Bvc2Uob2JqKSB7XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iai5kaXNwb3NlID09ICdmdW5jdGlvbicpIHtcbiAgICBvYmouZGlzcG9zZSgpO1xuICB9XG59XG5leHBvcnRzID0gZGlzcG9zZTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDb2RlYyBmdW5jdGlvbnMgb2YgdGhlIHY4IHdpcmUgcHJvdG9jb2wuIEV2ZW50dWFsbHkgd2UnZCB3YW50XG4gKiB0byBzdXBwb3J0IHBsdWdnYWJsZSB3aXJlLWZvcm1hdCB0byBpbXByb3ZlIHdpcmUgZWZmaWNpZW5jeSBhbmQgdG8gZW5hYmxlXG4gKiBiaW5hcnkgZW5jb2RpbmcuIFN1Y2ggc3VwcG9ydCB3aWxsIHJlcXVpcmUgYW4gaW50ZXJmYWNlIGNsYXNzLCB3aGljaFxuICogd2lsbCBiZSBhZGRlZCBsYXRlci5cbiAqXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlVjgnKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLmFzc2VydHMnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5jb2xsZWN0aW9ucy5tYXBzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuanNvbicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmpzb24uTmF0aXZlSnNvblByb2Nlc3NvcicpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cnVjdHMnKTtcbmdvb2cucmVxdWlyZVR5cGUoJ2dvb2cuc3RyaW5nLlBhcnNlcicpO1xuXG5cblxuLyoqXG4gKiBUaGUgdjggY29kZWMgY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKi9cbmdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlVjggPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogUGFyc2VyIGZvciBhIHJlc3BvbnNlIHBheWxvYWQuIFRoZSBwYXJzZXIgc2hvdWxkIHJldHVybiBhbiBhcnJheS5cbiAgICogQHByaXZhdGUgeyFnb29nLnN0cmluZy5QYXJzZXJ9XG4gICAqL1xuICB0aGlzLnBhcnNlcl8gPSBuZXcgZ29vZy5qc29uLk5hdGl2ZUpzb25Qcm9jZXNzb3IoKTtcbn07XG5cblxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcbmNvbnN0IFdpcmVWOCA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlVjg7XG5jb25zdCBXaXJlID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmU7XG5cblxuLyoqXG4gKiBFbmNvZGVzIGEgc3RhbmRhbG9uZSBtZXNzYWdlIGludG8gdGhlIHdpcmUgZm9ybWF0LlxuICpcbiAqIE1heSB0aHJvdyBleGNlcHRpb24gaWYgdGhlIG1lc3NhZ2Ugb2JqZWN0IGNvbnRhaW5zIGFueSBpbnZhbGlkIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdHwhZ29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2V9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgZGF0YS5cbiAqICAgICBWOCBvbmx5IHN1cHBvcnQgSlMgb2JqZWN0cyAob3IgTWFwKS5cbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IGJ1ZmZlciBUaGUgdGV4dCBidWZmZXIgdG8gd3JpdGUgdGhlIG1lc3NhZ2UgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9wcmVmaXggVGhlIHByZWZpeCBmb3IgZWFjaCBmaWVsZCBvZiB0aGUgb2JqZWN0LlxuICovXG5XaXJlVjgucHJvdG90eXBlLmVuY29kZU1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlLCBidWZmZXIsIG9wdF9wcmVmaXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBwcmVmaXggPSBvcHRfcHJlZml4IHx8ICcnO1xuICB0cnkge1xuICAgIGdvb2cuc3RydWN0cy5mb3JFYWNoKG1lc3NhZ2UsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGxldCBlbmNvZGVkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmIChnb29nLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBlbmNvZGVkVmFsdWUgPSBnb29nLmpzb24uc2VyaWFsaXplKHZhbHVlKTtcbiAgICAgIH0gIC8vIGtlZXAgdGhlIGZhc3QtcGF0aCBmb3IgcHJpbWl0aXZlIHR5cGVzXG4gICAgICBidWZmZXIucHVzaChwcmVmaXggKyBrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoZW5jb2RlZFZhbHVlKSk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgLy8gV2Ugc2VuZCBhIG1hcCBoZXJlIGJlY2F1c2UgbG90cyBvZiB0aGUgcmV0cnkgbG9naWMgcmVsaWVzIG9uIG1hcCBJRHMsXG4gICAgLy8gc28gd2UgaGF2ZSB0byBzZW5kIHNvbWV0aGluZyAocG9zc2libHkgcmVkdW5kYW50KS5cbiAgICBidWZmZXIucHVzaChcbiAgICAgICAgcHJlZml4ICsgJ3R5cGUnICtcbiAgICAgICAgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCdfYmFkbWFwJykpO1xuICAgIHRocm93IGV4O1xuICB9XG59O1xuXG5cbi8qKlxuICogRW5jb2RlcyBhbGwgdGhlIGJ1ZmZlcmVkIG1lc3NhZ2VzIG9mIHRoZSBmb3J3YXJkIGNoYW5uZWwuXG4gKlxuICogQHBhcmFtIHshQXJyYXk8V2lyZS5RdWV1ZWRNYXA+fSBtZXNzYWdlUXVldWUgVGhlIG1lc3NhZ2UgZGF0YS5cbiAqICAgICBWOCBvbmx5IHN1cHBvcnQgSlMgb2JqZWN0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBUaGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHRvIGJlIGVuY29kZWQuXG4gKiBAcGFyYW0gez9mdW5jdGlvbighT2JqZWN0KX0gYmFkTWFwSGFuZGxlciBDYWxsYmFjayBmb3IgYmFkIG1lc3NhZ2VzLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZW5jb2RlZCBtZXNzYWdlc1xuICovXG5XaXJlVjgucHJvdG90eXBlLmVuY29kZU1lc3NhZ2VRdWV1ZSA9IGZ1bmN0aW9uKFxuICAgIG1lc3NhZ2VRdWV1ZSwgY291bnQsIGJhZE1hcEhhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBsZXQgb2Zmc2V0ID0gLTE7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3Qgc2IgPSBbJ2NvdW50PScgKyBjb3VudF07XG4gICAgLy8gVG8gc2F2ZSBhIGJpdCBvZiBiYW5kd2lkdGgsIHNwZWNpZnkgdGhlIGJhc2UgbWFwSWQgYW5kIHRoZSByZXN0IGFzXG4gICAgLy8gb2Zmc2V0cyBmcm9tIGl0LlxuICAgIGlmIChvZmZzZXQgPT0gLTEpIHtcbiAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gbWVzc2FnZVF1ZXVlWzBdLm1hcElkO1xuICAgICAgICBzYi5wdXNoKCdvZnM9JyArIG9mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzYi5wdXNoKCdvZnM9JyArIG9mZnNldCk7XG4gICAgfVxuICAgIGxldCBkb25lID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGxldCBtYXBJZCA9IG1lc3NhZ2VRdWV1ZVtpXS5tYXBJZDtcbiAgICAgIGNvbnN0IG1hcCA9IG1lc3NhZ2VRdWV1ZVtpXS5tYXA7XG4gICAgICBtYXBJZCAtPSBvZmZzZXQ7XG4gICAgICBpZiAobWFwSWQgPCAwKSB7XG4gICAgICAgIC8vIHJlZG8gdGhlIGVuY29kaW5nIGluIGNhc2Ugb2YgcmV0cnkvcmVvcmRlcmluZywgcGx1cyBleHRyYSBzcGFjZVxuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heCgwLCBtZXNzYWdlUXVldWVbaV0ubWFwSWQgLSAxMDApO1xuICAgICAgICBkb25lID0gZmFsc2U7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5lbmNvZGVNZXNzYWdlKG1hcCwgc2IsICdyZXEnICsgbWFwSWQgKyAnXycpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgaWYgKGJhZE1hcEhhbmRsZXIpIHtcbiAgICAgICAgICBiYWRNYXBIYW5kbGVyKG1hcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIHJldHVybiBzYi5qb2luKCcmJyk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogRGVjb2RlcyBhIHN0YW5kYWxvbmUgbWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSB3aXJlLiBNYXkgdGhyb3cgZXhjZXB0aW9uXG4gKiBpZiB0ZXh0IGlzIGlsbC1mb3JtYXR0ZWQuXG4gKlxuICogTXVzdCBiZSB2YWxpZCBKU09OIGFzIGl0IGlzIGluc2VjdXJlIHRvIHVzZSBldmFsKCkgdG8gZGVjb2RlIEpTIGxpdGVyYWxzO1xuICogYW5kIGV2YWwoKSBpcyBkaXNhbGxvd2VkIGluIENocm9tZSBhcHBzIHRvby5cbiAqXG4gKiBJbnZhbGlkIEpTIGxpdGVyYWxzIGluY2x1ZGUgbnVsbCBhcnJheSBlbGVtZW50cywgcXVvdGFzIGV0Yy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVRleHQgVGhlIHN0cmluZyBjb250ZW50IGFzIHJlY2VpdmVkIGZyb20gdGhlIHdpcmUuXG4gKiBAcmV0dXJuIHsqfSBUaGUgZGVjb2RlZCBtZXNzYWdlIG9iamVjdC5cbiAqL1xuV2lyZVY4LnByb3RvdHlwZS5kZWNvZGVNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZVRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCByZXNwb25zZSA9IHRoaXMucGFyc2VyXy5wYXJzZShtZXNzYWdlVGV4dCk7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoQXJyYXkuaXNBcnJheShyZXNwb25zZSkpOyAgLy8gdGhyb3cgZXhjZXB0aW9uXG4gIHJldHVybiByZXNwb25zZTtcbn07XG59KTsgIC8vIGdvb2cuc2NvcGVcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIHBvb2wgb2YgZm9yd2FyZCBjaGFubmVsIHJlcXVlc3RzIHRvIGVuYWJsZSByZWFsLXRpbWVcbiAqIG1lc3NhZ2luZyBmcm9tIHRoZSBjbGllbnQgdG8gc2VydmVyLlxuICpcbiAqL1xuXG5nb29nLm1vZHVsZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2wnKTtcblxuZ29vZy5tb2R1bGUuZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSgpO1xuXG5jb25zdCBDaGFubmVsUmVxdWVzdCA9IGdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkNoYW5uZWxSZXF1ZXN0Jyk7XG5jb25zdCBXaXJlID0gZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZScpO1xuY29uc3QgYXJyYXkgPSBnb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmNvbnN0IGdvb2dTdHJpbmcgPSBnb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIGFsbCBmb3J3YXJkIGNoYW5uZWwgcmVxdWVzdHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfbWF4UG9vbFNpemUgVGhlIG1heGltdW0gcG9vbCBzaXplLlxuICpcbiAqIEBzdHJ1Y3QgQGNvbnN0cnVjdG9yIEBmaW5hbFxuICovXG5jb25zdCBGb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sID0gZnVuY3Rpb24ob3B0X21heFBvb2xTaXplKSB7XG4gIC8qKlxuICAgKiBUaGUgbWF4IHBvb2wgc2l6ZSBhcyBjb25maWd1cmVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5tYXhQb29sU2l6ZUNvbmZpZ3VyZWRfID1cbiAgICAgIG9wdF9tYXhQb29sU2l6ZSB8fCBGb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sLk1BWF9QT09MX1NJWkVfO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBzaXplIGxpbWl0IG9mIHRoZSByZXF1ZXN0IHBvb2wuIFRoaXMgbGltaXQgaXMgbWVhbnQgdG8gYmVcbiAgICogcmVhZC1vbmx5IGFmdGVyIHRoZSBjaGFubmVsIGlzIGZ1bGx5IG9wZW5lZC5cbiAgICpcbiAgICogSWYgU1BEWSBvciBIVFRQMiBpcyBlbmFibGVkLCBzZXQgaXQgdG8gdGhlIG1heCBwb29sIHNpemUsIHdoaWNoIGlzIGFsc29cbiAgICogY29uZmlndXJhYmxlLlxuICAgKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgdGhpcy5tYXhTaXplXyA9IEZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2wuaXNTcGR5T3JIdHRwMkVuYWJsZWRfKCkgP1xuICAgICAgdGhpcy5tYXhQb29sU2l6ZUNvbmZpZ3VyZWRfIDpcbiAgICAgIDE7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgZm9yIGFsbCB0aGUgcGVuZGluZyByZXF1ZXN0IG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlIHs/U2V0PD9DaGFubmVsUmVxdWVzdD59XG4gICAqL1xuICB0aGlzLnJlcXVlc3RQb29sXyA9IG51bGw7XG5cbiAgaWYgKHRoaXMubWF4U2l6ZV8gPiAxKSB7XG4gICAgdGhpcy5yZXF1ZXN0UG9vbF8gPSBuZXcgU2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNpbmdsZSByZXF1ZXN0IG9iamVjdCB3aGVuIHRoZSBwb29sIHNpemUgaXMgbGltaXRlZCB0byBvbmUuXG4gICAqXG4gICAqIEBwcml2YXRlIHs/Q2hhbm5lbFJlcXVlc3R9XG4gICAqL1xuICB0aGlzLnJlcXVlc3RfID0gbnVsbDtcblxuICAvKipcbiAgICogU2F2ZWQgcGVuZGluZyBtZXNzYWdlcyB3aGVuIHRoZSBwb29sIGlzIGNhbmNlbGxlZC5cbiAgICpcbiAgICogQHByaXZhdGUgeyFBcnJheTxXaXJlLlF1ZXVlZE1hcD59XG4gICAqL1xuICB0aGlzLnBlbmRpbmdNZXNzYWdlc18gPSBbXTtcbn07XG5cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBzaXplIGxpbWl0IG9mIHRoZSByZXF1ZXN0IHBvb2wuXG4gKlxuICogQHByaXZhdGUge251bWJlcn1cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5NQVhfUE9PTF9TSVpFXyA9IDEwO1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBTUERZIG9yIEhUVFAyIGlzIGVuYWJsZWQuIFVzZXMgY2hyb21lLXNwZWNpZmljIEFQSXNcbiAqICAgICBhcyBhIGZhbGxiYWNrIGFuZCB3aWxsIGFsd2F5cyByZXR1cm4gZmFsc2UgZm9yIG90aGVyIGJyb3dzZXJzIHdoZXJlXG4gKiAgICAgUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nIGlzIG5vdCBhdmFpbGFibGUuXG4gKiBAcHJpdmF0ZVxuICovXG5Gb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sLmlzU3BkeU9ySHR0cDJFbmFibGVkXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoZ29vZy5nbG9iYWwuUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKSB7XG4gICAgY29uc3QgZW50cnlzID0gLyoqIEB0eXBlIHshQXJyYXk8IVBlcmZvcm1hbmNlTmF2aWdhdGlvblRpbWluZz59ICovIChcbiAgICAgICAgZ29vZy5nbG9iYWwucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSgnbmF2aWdhdGlvbicpKTtcbiAgICByZXR1cm4gZW50cnlzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgKGVudHJ5c1swXS5uZXh0SG9wUHJvdG9jb2wgPT0gJ2hxJyB8fFxuICAgICAgICAgZW50cnlzWzBdLm5leHRIb3BQcm90b2NvbCA9PSAnaDInKTtcbiAgfVxuICByZXR1cm4gISEoXG4gICAgICBnb29nLmdsb2JhbC5jaHJvbWUgJiYgZ29vZy5nbG9iYWwuY2hyb21lLmxvYWRUaW1lcyAmJlxuICAgICAgZ29vZy5nbG9iYWwuY2hyb21lLmxvYWRUaW1lcygpICYmXG4gICAgICBnb29nLmdsb2JhbC5jaHJvbWUubG9hZFRpbWVzKCkud2FzRmV0Y2hlZFZpYVNwZHkpO1xufTtcblxuXG4vKipcbiAqIE9uY2Ugd2Uga25vdyB0aGUgY2xpZW50IHByb3RvY29sIChmcm9tIHRoZSBoYW5kc2hha2UpLCBjaGVjayBpZiB3ZSBuZWVkXG4gKiBlbmFibGUgdGhlIHJlcXVlc3QgcG9vbCBhY2NvcmRpbmdseS4gVGhpcyBpcyBtb3JlIHJvYnVzdCB0aGFuIHVzaW5nXG4gKiBicm93c2VyLWludGVybmFsIEFQSXMgKHNwZWNpZmljIHRvIENocm9tZSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudFByb3RvY29sIFRoZSBjbGllbnQgcHJvdG9jb2xcbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuYXBwbHlDbGllbnRQcm90b2NvbCA9IGZ1bmN0aW9uKFxuICAgIGNsaWVudFByb3RvY29sKSB7XG4gIGlmICh0aGlzLnJlcXVlc3RQb29sXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChnb29nU3RyaW5nLmNvbnRhaW5zKGNsaWVudFByb3RvY29sLCAnc3BkeScpIHx8XG4gICAgICBnb29nU3RyaW5nLmNvbnRhaW5zKGNsaWVudFByb3RvY29sLCAncXVpYycpIHx8XG4gICAgICBnb29nU3RyaW5nLmNvbnRhaW5zKGNsaWVudFByb3RvY29sLCAnaDInKSkge1xuICAgIHRoaXMubWF4U2l6ZV8gPSB0aGlzLm1heFBvb2xTaXplQ29uZmlndXJlZF87XG4gICAgdGhpcy5yZXF1ZXN0UG9vbF8gPSBuZXcgU2V0KCk7XG4gICAgaWYgKHRoaXMucmVxdWVzdF8pIHtcbiAgICAgIHRoaXMuYWRkUmVxdWVzdCh0aGlzLnJlcXVlc3RfKTtcbiAgICAgIHRoaXMucmVxdWVzdF8gPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBvb2wgaXMgZnVsbC5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuaXNGdWxsID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlcXVlc3RfKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGhpcy5yZXF1ZXN0UG9vbF8pIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0UG9vbF8uc2l6ZSA+PSB0aGlzLm1heFNpemVfO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgc2l6ZSBsaW1pdC5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuZ2V0TWF4U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXhTaXplXztcbn07XG5cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0cyBpbiB0aGUgcG9vbC5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuZ2V0UmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlcXVlc3RfKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAodGhpcy5yZXF1ZXN0UG9vbF8pIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0UG9vbF8uc2l6ZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Q2hhbm5lbFJlcXVlc3R9IHJlcSBUaGUgY2hhbm5lbCByZXF1ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcmVxdWVzdCBpcyBhIGluY2x1ZGVkIGluc2lkZSB0aGUgcG9vbC5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuaGFzUmVxdWVzdCA9IGZ1bmN0aW9uKHJlcSkge1xuICBpZiAodGhpcy5yZXF1ZXN0Xykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RfID09IHJlcTtcbiAgfVxuXG4gIGlmICh0aGlzLnJlcXVlc3RQb29sXykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RQb29sXy5oYXMocmVxKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgbmV3IHJlcXVlc3QgdG8gdGhlIHBvb2wuXG4gKlxuICogQHBhcmFtIHshQ2hhbm5lbFJlcXVlc3R9IHJlcSBUaGUgbmV3IGNoYW5uZWwgcmVxdWVzdC5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuYWRkUmVxdWVzdCA9IGZ1bmN0aW9uKHJlcSkge1xuICBpZiAodGhpcy5yZXF1ZXN0UG9vbF8pIHtcbiAgICB0aGlzLnJlcXVlc3RQb29sXy5hZGQocmVxKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcXVlc3RfID0gcmVxO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZ2l2ZW4gcmVxdWVzdCBmcm9tIHRoZSBwb29sLlxuICpcbiAqIEBwYXJhbSB7Q2hhbm5lbFJlcXVlc3R9IHJlcSBUaGUgY2hhbm5lbCByZXF1ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHBvb2wuXG4gKi9cbkZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2wucHJvdG90eXBlLnJlbW92ZVJlcXVlc3QgPSBmdW5jdGlvbihyZXEpIHtcbiAgaWYgKHRoaXMucmVxdWVzdF8gJiYgdGhpcy5yZXF1ZXN0XyA9PSByZXEpIHtcbiAgICB0aGlzLnJlcXVlc3RfID0gbnVsbDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aGlzLnJlcXVlc3RQb29sXyAmJiB0aGlzLnJlcXVlc3RQb29sXy5oYXMocmVxKSkge1xuICAgIHRoaXMucmVxdWVzdFBvb2xfLmRlbGV0ZShyZXEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgcG9vbCBhbmQgY2FuY2VsIGFsbCB0aGUgcGVuZGluZyByZXF1ZXN0cy5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIC8vIHNhdmUgYW55IHBlbmRpbmcgbWVzc2FnZXNcbiAgdGhpcy5wZW5kaW5nTWVzc2FnZXNfID0gdGhpcy5nZXRQZW5kaW5nTWVzc2FnZXMoKTtcblxuICBpZiAodGhpcy5yZXF1ZXN0Xykge1xuICAgIHRoaXMucmVxdWVzdF8uY2FuY2VsKCk7XG4gICAgdGhpcy5yZXF1ZXN0XyA9IG51bGw7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMucmVxdWVzdFBvb2xfICYmIHRoaXMucmVxdWVzdFBvb2xfLnNpemUgIT09IDApIHtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLnJlcXVlc3RQb29sXy52YWx1ZXMoKSkge1xuICAgICAgdmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RQb29sXy5jbGVhcigpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGVyZSBhcmUgYW55IHBlbmRpbmcgcmVxdWVzdHMuXG4gKi9cbkZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2wucHJvdG90eXBlLmhhc1BlbmRpbmdSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy5yZXF1ZXN0XyAhPSBudWxsKSB8fFxuICAgICAgKHRoaXMucmVxdWVzdFBvb2xfICE9IG51bGwgJiYgdGhpcy5yZXF1ZXN0UG9vbF8uc2l6ZSAhPT0gMCk7XG59O1xuXG5cbi8qKlxuICogQHJldHVybiB7IUFycmF5PFdpcmUuUXVldWVkTWFwPn0gQWxsIHRoZSBwZW5kaW5nIG1lc3NhZ2VzIGZyb20gdGhlIHBvb2wsXG4gKiAgICAgYXMgYSBuZXcgYXJyYXkuXG4gKi9cbkZvcndhcmRDaGFubmVsUmVxdWVzdFBvb2wucHJvdG90eXBlLmdldFBlbmRpbmdNZXNzYWdlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZXF1ZXN0XyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ01lc3NhZ2VzXy5jb25jYXQodGhpcy5yZXF1ZXN0Xy5nZXRQZW5kaW5nTWVzc2FnZXMoKSk7XG4gIH1cblxuICBpZiAodGhpcy5yZXF1ZXN0UG9vbF8gIT0gbnVsbCAmJiB0aGlzLnJlcXVlc3RQb29sXy5zaXplICE9PSAwKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucGVuZGluZ01lc3NhZ2VzXztcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLnJlcXVlc3RQb29sXy52YWx1ZXMoKSkge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh2YWwuZ2V0UGVuZGluZ01lc3NhZ2VzKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5LmNsb25lKHRoaXMucGVuZGluZ01lc3NhZ2VzXyk7XG59O1xuXG5cbi8qKlxuICogUmVjb3JkcyBwZW5kaW5nIG1lc3NhZ2VzLCBlLmcuIHdoZW4gYSByZXF1ZXN0IHJlY2VpdmVzIGEgZmFpbGVkIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PFdpcmUuUXVldWVkTWFwPn0gbWVzc2FnZXMgUGVuZGluZyBtZXNzYWdlcy5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuYWRkUGVuZGluZ01lc3NhZ2VzID0gZnVuY3Rpb24obWVzc2FnZXMpIHtcbiAgdGhpcy5wZW5kaW5nTWVzc2FnZXNfID0gdGhpcy5wZW5kaW5nTWVzc2FnZXNfLmNvbmNhdChtZXNzYWdlcyk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIGFueSByZWNvcmRlZCBwZW5kaW5nIG1lc3NhZ2VzLlxuICovXG5Gb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sLnByb3RvdHlwZS5jbGVhclBlbmRpbmdNZXNzYWdlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBlbmRpbmdNZXNzYWdlc18ubGVuZ3RoID0gMDtcbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIGFsbCBwZW5kaW5nIHJlcXVlc3RzIGFuZCBmb3JjZSB0aGUgY29tcGxldGlvbiBvZiBjaGFubmVsIHJlcXVlc3RzLlxuICpcbiAqIE5lZWQgZ28gdGhyb3VnaCB0aGUgc3RhbmRhcmQgb25SZXF1ZXN0Q29tcGxldGUgbG9naWMgdG8gZXhwb3NlIHRoZSBtYXgtcmV0cnlcbiAqIGZhaWx1cmUgaW4gdGhlIHN0YW5kYXJkIHdheS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFDaGFubmVsUmVxdWVzdCl9IG9uQ29tcGxldGUgVGhlIGNvbXBsZXRpb24gY2FsbGJhY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGFueSByZXF1ZXN0IGhhcyBiZWVuIGZvcmNlZCB0byBjb21wbGV0ZS5cbiAqL1xuRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbC5wcm90b3R5cGUuZm9yY2VDb21wbGV0ZSA9IGZ1bmN0aW9uKG9uQ29tcGxldGUpIHtcbiAgaWYgKHRoaXMucmVxdWVzdF8gIT0gbnVsbCkge1xuICAgIHRoaXMucmVxdWVzdF8uY2FuY2VsKCk7XG4gICAgb25Db21wbGV0ZSh0aGlzLnJlcXVlc3RfKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aGlzLnJlcXVlc3RQb29sXyAmJiB0aGlzLnJlcXVlc3RQb29sXy5zaXplICE9PSAwKSB7XG4gICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5yZXF1ZXN0UG9vbF8udmFsdWVzKCkpIHtcbiAgICAgIHZhbC5jYW5jZWwoKTtcbiAgICAgIG9uQ29tcGxldGUodmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnRzID0gRm9yd2FyZENoYW5uZWxSZXF1ZXN0UG9vbDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBHZW5lcmljcyBtZXRob2QgZm9yIGNvbGxlY3Rpb24tbGlrZSBjbGFzc2VzIGFuZCBvYmplY3RzLlxuICpcbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aCBjb2xsZWN0aW9ucy4gSXQgc3VwcG9ydHMgdXNpbmdcbiAqIE1hcCwgU2V0LCBBcnJheSBhbmQgT2JqZWN0IGFuZCBvdGhlciBjbGFzc2VzIHRoYXQgaW1wbGVtZW50IGNvbGxlY3Rpb24tbGlrZVxuICogbWV0aG9kcy5cbiAqIEBzdXBwcmVzcyB7c3RyaWN0TWlzc2luZ1Byb3BlcnRpZXN9XG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuc3RydWN0cycpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXJyYXknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcblxuXG4vLyBXZSB0cmVhdCBhbiBvYmplY3QgYXMgYSBkaWN0aW9uYXJ5IGlmIGl0IGhhcyBnZXRLZXlzIG9yIGl0IGlzIGFuIG9iamVjdCB0aGF0XG4vLyBpc24ndCBhcnJheUxpa2UuXG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdmFsdWVzIGluIHRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IGNvbCBUaGUgY29sbGVjdGlvbi1saWtlIG9iamVjdC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiB2YWx1ZXMgaW4gdGhlIGNvbGxlY3Rpb24tbGlrZSBvYmplY3QuXG4gKi9cbmdvb2cuc3RydWN0cy5nZXRDb3VudCA9IGZ1bmN0aW9uKGNvbCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChjb2wuZ2V0Q291bnQgJiYgdHlwZW9mIGNvbC5nZXRDb3VudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbC5nZXRDb3VudCgpO1xuICB9XG4gIGlmIChnb29nLmlzQXJyYXlMaWtlKGNvbCkgfHwgdHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY29sLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gZ29vZy5vYmplY3QuZ2V0Q291bnQoY29sKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZXMgb2YgdGhlIGNvbGxlY3Rpb24tbGlrZSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybiB7IUFycmF5PD8+fSBUaGUgdmFsdWVzIGluIHRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICovXG5nb29nLnN0cnVjdHMuZ2V0VmFsdWVzID0gZnVuY3Rpb24oY29sKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGNvbC5nZXRWYWx1ZXMgJiYgdHlwZW9mIGNvbC5nZXRWYWx1ZXMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb2wuZ2V0VmFsdWVzKCk7XG4gIH1cbiAgLy8gRVM2IE1hcCBhbmQgU2V0IGJvdGggZGVmaW5lIGEgdmFsdWVzIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpdGVyYXRvci5cbiAgLy8gVGhlIHR5cGVvZiBjaGVjayBhbGxvd3MgdGhlIGNvbXBpbGVyIHRvIHJlbW92ZSB0aGUgTWFwIGFuZCBTZXQgcG9seWZpbGxzXG4gIC8vIGlmIHRoZXkgYXJlIG90aGVyd2lzZSB1bnVzZWQgdGhyb3VnaG91dCB0aGUgZW50aXJlIGJpbmFyeS5cbiAgaWYgKCh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJiBjb2wgaW5zdGFuY2VvZiBNYXApIHx8XG4gICAgICAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sIGluc3RhbmNlb2YgU2V0KSkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGNvbC52YWx1ZXMoKSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbC5zcGxpdCgnJyk7XG4gIH1cbiAgaWYgKGdvb2cuaXNBcnJheUxpa2UoY29sKSkge1xuICAgIHZhciBydiA9IFtdO1xuICAgIHZhciBsID0gY29sLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcnYucHVzaChjb2xbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG4gIH1cbiAgcmV0dXJuIGdvb2cub2JqZWN0LmdldFZhbHVlcyhjb2wpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGtleXMgb2YgdGhlIGNvbGxlY3Rpb24uIFNvbWUgY29sbGVjdGlvbnMgaGF2ZSBubyBub3Rpb24gb2ZcbiAqIGtleXMvaW5kZXhlcyBhbmQgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB1bmRlZmluZWQgaW4gdGhvc2UgY2FzZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybiB7IUFycmF5fHVuZGVmaW5lZH0gVGhlIGtleXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gKi9cbmdvb2cuc3RydWN0cy5nZXRLZXlzID0gZnVuY3Rpb24oY29sKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGNvbC5nZXRLZXlzICYmIHR5cGVvZiBjb2wuZ2V0S2V5cyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbC5nZXRLZXlzKCk7XG4gIH1cbiAgLy8gaWYgd2UgaGF2ZSBnZXRWYWx1ZXMgYnV0IG5vIGdldEtleXMgd2Uga25vdyB0aGlzIGlzIGEga2V5LWxlc3MgY29sbGVjdGlvblxuICBpZiAoY29sLmdldFZhbHVlcyAmJiB0eXBlb2YgY29sLmdldFZhbHVlcyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvLyBFUzYgTWFwIGFuZCBTZXQgYm90aCBkZWZpbmUgYSBrZXlzIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpdGVyYXRvci4gRm9yXG4gIC8vIFNldHMgdGhpcyBpdGVyYXRlcyBvdmVyIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgdmFsdWVzIGl0ZXJhdG9yLlxuICAvLyBUaGUgdHlwZW9mIGNoZWNrIGFsbG93cyB0aGUgY29tcGlsZXIgdG8gcmVtb3ZlIHRoZSBNYXAgYW5kIFNldCBwb2x5ZmlsbHNcbiAgLy8gaWYgdGhleSBhcmUgb3RoZXJ3aXNlIHVudXNlZCB0aHJvdWdob3V0IHRoZSBlbnRpcmUgYmluYXJ5LlxuICBpZiAodHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oY29sLmtleXMoKSk7XG4gIH1cbiAgLy8gVW5saWtlIHRoZSBuYXRpdmUgU2V0LCBnb29nLnN0cnVjdHMuU2V0IGRvZXMgbm90IGV4cG9zZSBrZXlzIGFzIHRoZSB2YWx1ZXMuXG4gIGlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBjb2wgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChnb29nLmlzQXJyYXlMaWtlKGNvbCkgfHwgdHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgcnYgPSBbXTtcbiAgICB2YXIgbCA9IGNvbC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJ2LnB1c2goaSk7XG4gICAgfVxuICAgIHJldHVybiBydjtcbiAgfVxuXG4gIHJldHVybiBnb29nLm9iamVjdC5nZXRLZXlzKGNvbCk7XG59O1xuXG5cbi8qKlxuICogV2hldGhlciB0aGUgY29sbGVjdGlvbiBjb250YWlucyB0aGUgZ2l2ZW4gdmFsdWUuIFRoaXMgaXMgTyhuKSBhbmQgdXNlc1xuICogZXF1YWxzICg9PSkgdG8gdGVzdCB0aGUgZXhpc3RlbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbCBUaGUgY29sbGVjdGlvbi1saWtlIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byBjaGVjayBmb3IuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXAgY29udGFpbnMgdGhlIHZhbHVlLlxuICovXG5nb29nLnN0cnVjdHMuY29udGFpbnMgPSBmdW5jdGlvbihjb2wsIHZhbCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChjb2wuY29udGFpbnMgJiYgdHlwZW9mIGNvbC5jb250YWlucyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbC5jb250YWlucyh2YWwpO1xuICB9XG4gIGlmIChjb2wuY29udGFpbnNWYWx1ZSAmJiB0eXBlb2YgY29sLmNvbnRhaW5zVmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb2wuY29udGFpbnNWYWx1ZSh2YWwpO1xuICB9XG4gIGlmIChnb29nLmlzQXJyYXlMaWtlKGNvbCkgfHwgdHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ29vZy5hcnJheS5jb250YWlucygvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gKGNvbCksIHZhbCk7XG4gIH1cbiAgcmV0dXJuIGdvb2cub2JqZWN0LmNvbnRhaW5zVmFsdWUoY29sLCB2YWwpO1xufTtcblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGNvbGxlY3Rpb24gaXMgZW1wdHkuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBlbXB0eS5cbiAqL1xuZ29vZy5zdHJ1Y3RzLmlzRW1wdHkgPSBmdW5jdGlvbihjb2wpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoY29sLmlzRW1wdHkgJiYgdHlwZW9mIGNvbC5pc0VtcHR5ID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29sLmlzRW1wdHkoKTtcbiAgfVxuXG4gIC8vIFdlIGRvIG5vdCB1c2UgZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZSBiZWNhdXNlIGhlcmUgd2UgdHJlYXQgdGhlXG4gIC8vIHN0cmluZyBhc1xuICAvLyBjb2xsZWN0aW9uIGFuZCBhcyBzdWNoIGV2ZW4gd2hpdGVzcGFjZSBtYXR0ZXJzXG5cbiAgaWYgKGdvb2cuaXNBcnJheUxpa2UoY29sKSB8fCB0eXBlb2YgY29sID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gKGNvbCkubGVuZ3RoID09PSAwO1xuICB9XG4gIHJldHVybiBnb29nLm9iamVjdC5pc0VtcHR5KGNvbCk7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgdGhlIGVsZW1lbnRzIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZ29vZy5zdHJ1Y3RzLmNsZWFyID0gZnVuY3Rpb24oY29sKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gTk9URShhcnYpOiBUaGlzIHNob3VsZCBub3QgY29udGFpbiBzdHJpbmdzIGJlY2F1c2Ugc3RyaW5ncyBhcmUgaW1tdXRhYmxlXG4gIGlmIChjb2wuY2xlYXIgJiYgdHlwZW9mIGNvbC5jbGVhciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29sLmNsZWFyKCk7XG4gIH0gZWxzZSBpZiAoZ29vZy5pc0FycmF5TGlrZShjb2wpKSB7XG4gICAgZ29vZy5hcnJheS5jbGVhcigvKiogQHR5cGUge0lBcnJheUxpa2U8Pz59ICovIChjb2wpKTtcbiAgfSBlbHNlIHtcbiAgICBnb29nLm9iamVjdC5jbGVhcihjb2wpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCB2YWx1ZSBpbiBhIGNvbGxlY3Rpb24uIFRoZSBmdW5jdGlvbiB0YWtlc1xuICogdGhyZWUgYXJndW1lbnRzOyB0aGUgdmFsdWUsIHRoZSBrZXkgYW5kIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7U30gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsPyw/LFMpOj99IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5IHZhbHVlLlxuICogICAgIFRoaXMgZnVuY3Rpb24gdGFrZXNcbiAqICAgICAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IG9yIHVuZGVmaW5lZCBpZiB0aGUgY29sbGVjdGlvbiBoYXMgbm9cbiAqICAgICBub3Rpb24gb2Yga2V5cywgYW5kIHRoZSBjb2xsZWN0aW9uKSBhbmQgdGhlIHJldHVybiB2YWx1ZSBpcyBpcnJlbGV2YW50LlxuICogQHBhcmFtIHtUPX0gb3B0X29iaiBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBgZmAuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHRlbXBsYXRlIFQsU1xuICogQGRlcHJlY2F0ZWQgVXNlIGEgbW9yZSBzcGVjaWZpYyBtZXRob2QsIGUuZy4gbmF0aXZlIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuICogICAgIG9yIGZvci1vZi5cbiAqL1xuZ29vZy5zdHJ1Y3RzLmZvckVhY2ggPSBmdW5jdGlvbihjb2wsIGYsIG9wdF9vYmopIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoY29sLmZvckVhY2ggJiYgdHlwZW9mIGNvbC5mb3JFYWNoID09ICdmdW5jdGlvbicpIHtcbiAgICBjb2wuZm9yRWFjaChmLCBvcHRfb2JqKTtcbiAgfSBlbHNlIGlmIChnb29nLmlzQXJyYXlMaWtlKGNvbCkgfHwgdHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyAoY29sKSwgZiwgb3B0X29iaik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGtleXMgPSBnb29nLnN0cnVjdHMuZ2V0S2V5cyhjb2wpO1xuICAgIHZhciB2YWx1ZXMgPSBnb29nLnN0cnVjdHMuZ2V0VmFsdWVzKGNvbCk7XG4gICAgdmFyIGwgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbHVlc1tpXSwga2V5cyAmJiBrZXlzW2ldLCBjb2wpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIENhbGxzIGEgZnVuY3Rpb24gZm9yIGV2ZXJ5IHZhbHVlIGluIHRoZSBjb2xsZWN0aW9uLiBXaGVuIGEgY2FsbCByZXR1cm5zIHRydWUsXG4gKiBhZGRzIHRoZSB2YWx1ZSB0byBhIG5ldyBjb2xsZWN0aW9uIChBcnJheSBpcyByZXR1cm5lZCBieSBkZWZhdWx0KS5cbiAqXG4gKiBAcGFyYW0ge1N9IGNvbCBUaGUgY29sbGVjdGlvbi1saWtlIG9iamVjdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULD8sPyxTKTpib29sZWFufSBmIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBldmVyeVxuICogICAgIHZhbHVlLiBUaGlzIGZ1bmN0aW9uIHRha2VzXG4gKiAgICAgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleSBvciB1bmRlZmluZWQgaWYgdGhlIGNvbGxlY3Rpb24gaGFzIG5vXG4gKiAgICAgbm90aW9uIG9mIGtleXMsIGFuZCB0aGUgY29sbGVjdGlvbikgYW5kIHNob3VsZCByZXR1cm4gYSBCb29sZWFuLiBJZiB0aGVcbiAqICAgICByZXR1cm4gdmFsdWUgaXMgdHJ1ZSB0aGUgdmFsdWUgaXMgYWRkZWQgdG8gdGhlIHJlc3VsdCBjb2xsZWN0aW9uLiBJZiBpdFxuICogICAgIGlzIGZhbHNlIHRoZSB2YWx1ZSBpcyBub3QgaW5jbHVkZWQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGBmYC5cbiAqIEByZXR1cm4geyFPYmplY3R8IUFycmF5PD8+fSBBIG5ldyBjb2xsZWN0aW9uIHdoZXJlIHRoZSBwYXNzZWQgdmFsdWVzIGFyZVxuICogICAgIHByZXNlbnQuIElmIGNvbCBpcyBhIGtleS1sZXNzIGNvbGxlY3Rpb24gYW4gYXJyYXkgaXMgcmV0dXJuZWQuICBJZiBjb2xcbiAqICAgICBoYXMga2V5cyBhbmQgdmFsdWVzIGEgcGxhaW4gb2xkIEpTIG9iamVjdCBpcyByZXR1cm5lZC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5zdHJ1Y3RzLmZpbHRlciA9IGZ1bmN0aW9uKGNvbCwgZiwgb3B0X29iaikge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgY29sLmZpbHRlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbC5maWx0ZXIoZiwgb3B0X29iaik7XG4gIH1cbiAgaWYgKGdvb2cuaXNBcnJheUxpa2UoY29sKSB8fCB0eXBlb2YgY29sID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyAoY29sKSwgZiwgb3B0X29iaik7XG4gIH1cblxuICB2YXIgcnY7XG4gIHZhciBrZXlzID0gZ29vZy5zdHJ1Y3RzLmdldEtleXMoY29sKTtcbiAgdmFyIHZhbHVlcyA9IGdvb2cuc3RydWN0cy5nZXRWYWx1ZXMoY29sKTtcbiAgdmFyIGwgPSB2YWx1ZXMubGVuZ3RoO1xuICBpZiAoa2V5cykge1xuICAgIHJ2ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbHVlc1tpXSwga2V5c1tpXSwgY29sKSkge1xuICAgICAgICBydltrZXlzW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2Ugc2hvdWxkIG5vdCB1c2UgQXJyYXkjZmlsdGVyIGhlcmUgc2luY2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHRoZSBpbmRleCBpcyB1bmRlZmluZWQgYXMgd2VsbCBhcyBtYWtlIHN1cmUgdGhhdCBjb2wgaXMgcGFzc2VkIHRvIHRoZVxuICAgIC8vIGZ1bmN0aW9uLlxuICAgIHJ2ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChmLmNhbGwob3B0X29iaiwgdmFsdWVzW2ldLCB1bmRlZmluZWQsIGNvbCkpIHtcbiAgICAgICAgcnYucHVzaCh2YWx1ZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZXZlcnkgdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24gYW5kIGFkZHMgdGhlIHJlc3VsdCBpbnRvIGFcbiAqIG5ldyBjb2xsZWN0aW9uIChkZWZhdWx0cyB0byBjcmVhdGluZyBhIG5ldyBBcnJheSkuXG4gKlxuICogQHBhcmFtIHtTfSBjb2wgVGhlIGNvbGxlY3Rpb24tbGlrZSBvYmplY3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCw/LD8sUyk6Vn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZXZlcnkgdmFsdWUuXG4gKiAgICAgVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IG9yIHVuZGVmaW5lZCBpZiB0aGVcbiAqICAgICBjb2xsZWN0aW9uIGhhcyBubyBub3Rpb24gb2Yga2V5cywgYW5kIHRoZSBjb2xsZWN0aW9uKSBhbmQgc2hvdWxkIHJldHVyblxuICogICAgIHNvbWV0aGluZy4gVGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGluIHRoZSBuZXcgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7VD19IG9wdF9vYmogIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGBmYC5cbiAqIEByZXR1cm4geyFPYmplY3Q8Vj58IUFycmF5PFY+fSBBIG5ldyBjb2xsZWN0aW9uIHdpdGggdGhlIG5ldyB2YWx1ZXMuICBJZlxuICogICAgIGNvbCBpcyBhIGtleS1sZXNzIGNvbGxlY3Rpb24gYW4gYXJyYXkgaXMgcmV0dXJuZWQuICBJZiBjb2wgaGFzIGtleXMgYW5kXG4gKiAgICAgdmFsdWVzIGEgcGxhaW4gb2xkIEpTIG9iamVjdCBpcyByZXR1cm5lZC5cbiAqIEB0ZW1wbGF0ZSBULFMsVlxuICovXG5nb29nLnN0cnVjdHMubWFwID0gZnVuY3Rpb24oY29sLCBmLCBvcHRfb2JqKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHR5cGVvZiBjb2wubWFwID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29sLm1hcChmLCBvcHRfb2JqKTtcbiAgfVxuICBpZiAoZ29vZy5pc0FycmF5TGlrZShjb2wpIHx8IHR5cGVvZiBjb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCgvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gKGNvbCksIGYsIG9wdF9vYmopO1xuICB9XG5cbiAgdmFyIHJ2O1xuICB2YXIga2V5cyA9IGdvb2cuc3RydWN0cy5nZXRLZXlzKGNvbCk7XG4gIHZhciB2YWx1ZXMgPSBnb29nLnN0cnVjdHMuZ2V0VmFsdWVzKGNvbCk7XG4gIHZhciBsID0gdmFsdWVzLmxlbmd0aDtcbiAgaWYgKGtleXMpIHtcbiAgICBydiA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBydltrZXlzW2ldXSA9IGYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgdmFsdWVzW2ldLCBrZXlzW2ldLCBjb2wpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBzaG91bGQgbm90IHVzZSBBcnJheSNtYXAgaGVyZSBzaW5jZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gdGhlIGluZGV4IGlzIHVuZGVmaW5lZCBhcyB3ZWxsIGFzIG1ha2Ugc3VyZSB0aGF0IGNvbCBpcyBwYXNzZWQgdG8gdGhlXG4gICAgLy8gZnVuY3Rpb24uXG4gICAgcnYgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcnZbaV0gPSBmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbHVlc1tpXSwgdW5kZWZpbmVkLCBjb2wpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcnY7XG59O1xuXG5cbi8qKlxuICogQ2FsbHMgZiBmb3IgZWFjaCB2YWx1ZSBpbiBhIGNvbGxlY3Rpb24uIElmIGFueSBjYWxsIHJldHVybnMgdHJ1ZSB0aGlzIHJldHVybnNcbiAqIHRydWUgKHdpdGhvdXQgY2hlY2tpbmcgdGhlIHJlc3QpLiBJZiBhbGwgcmV0dXJucyBmYWxzZSB0aGlzIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtTfSBjb2wgVGhlIGNvbGxlY3Rpb24tbGlrZSBvYmplY3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6VCw/LD8sUyk6Ym9vbGVhbn0gZiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZXZlcnlcbiAqICAgICB2YWx1ZS4gVGhpcyBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAodGhlIHZhbHVlLCB0aGUga2V5IG9yIHVuZGVmaW5lZFxuICogICAgIGlmIHRoZSBjb2xsZWN0aW9uIGhhcyBubyBub3Rpb24gb2Yga2V5cywgYW5kIHRoZSBjb2xsZWN0aW9uKSBhbmQgc2hvdWxkXG4gKiAgICAgcmV0dXJuIGEgYm9vbGVhbi5cbiAqIEBwYXJhbSB7VD19IG9wdF9vYmogIFRoZSBvYmplY3QgdG8gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgJ3RoaXMnXG4gKiAgICAgd2l0aGluIGBmYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW55IHZhbHVlIHBhc3NlcyB0aGUgdGVzdC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5zdHJ1Y3RzLnNvbWUgPSBmdW5jdGlvbihjb2wsIGYsIG9wdF9vYmopIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZW9mIGNvbC5zb21lID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29sLnNvbWUoZiwgb3B0X29iaik7XG4gIH1cbiAgaWYgKGdvb2cuaXNBcnJheUxpa2UoY29sKSB8fCB0eXBlb2YgY29sID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKFxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gKGNvbCksIGYsIG9wdF9vYmopO1xuICB9XG4gIHZhciBrZXlzID0gZ29vZy5zdHJ1Y3RzLmdldEtleXMoY29sKTtcbiAgdmFyIHZhbHVlcyA9IGdvb2cuc3RydWN0cy5nZXRWYWx1ZXMoY29sKTtcbiAgdmFyIGwgPSB2YWx1ZXMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChmLmNhbGwoLyoqIEB0eXBlIHs/fSAqLyAob3B0X29iaiksIHZhbHVlc1tpXSwga2V5cyAmJiBrZXlzW2ldLCBjb2wpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIENhbGxzIGYgZm9yIGVhY2ggdmFsdWUgaW4gYSBjb2xsZWN0aW9uLiBJZiBhbGwgY2FsbHMgcmV0dXJuIHRydWUgdGhpcyByZXR1cm5cbiAqIHRydWUgdGhpcyByZXR1cm5zIHRydWUuIElmIGFueSByZXR1cm5zIGZhbHNlIHRoaXMgcmV0dXJucyBmYWxzZSBhdCB0aGlzIHBvaW50XG4gKiAgYW5kIGRvZXMgbm90IGNvbnRpbnVlIHRvIGNoZWNrIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7U30gY29sIFRoZSBjb2xsZWN0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlQsPyw/LFMpOmJvb2xlYW59IGYgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGV2ZXJ5XG4gKiAgICAgdmFsdWUuIFRoaXMgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHRoZSB2YWx1ZSwgdGhlIGtleSBvclxuICogICAgIHVuZGVmaW5lZCBpZiB0aGUgY29sbGVjdGlvbiBoYXMgbm8gbm90aW9uIG9mIGtleXMsIGFuZCB0aGUgY29sbGVjdGlvbilcbiAqICAgICBhbmQgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gKiBAcGFyYW0ge1Q9fSBvcHRfb2JqICBUaGUgb2JqZWN0IHRvIGJlIHVzZWQgYXMgdGhlIHZhbHVlIG9mICd0aGlzJ1xuICogICAgIHdpdGhpbiBgZmAuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFsbCBrZXktdmFsdWUgcGFpcnMgcGFzcyB0aGUgdGVzdC5cbiAqIEB0ZW1wbGF0ZSBULFNcbiAqL1xuZ29vZy5zdHJ1Y3RzLmV2ZXJ5ID0gZnVuY3Rpb24oY29sLCBmLCBvcHRfb2JqKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHR5cGVvZiBjb2wuZXZlcnkgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb2wuZXZlcnkoZiwgb3B0X29iaik7XG4gIH1cbiAgaWYgKGdvb2cuaXNBcnJheUxpa2UoY29sKSB8fCB0eXBlb2YgY29sID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZXZlcnkuY2FsbChcbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIChjb2wpLCBmLCBvcHRfb2JqKTtcbiAgfVxuICB2YXIga2V5cyA9IGdvb2cuc3RydWN0cy5nZXRLZXlzKGNvbCk7XG4gIHZhciB2YWx1ZXMgPSBnb29nLnN0cnVjdHMuZ2V0VmFsdWVzKGNvbCk7XG4gIHZhciBsID0gdmFsdWVzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoIWYuY2FsbCgvKiogQHR5cGUgez99ICovIChvcHRfb2JqKSwgdmFsdWVzW2ldLCBrZXlzICYmIGtleXNbaV0sIGNvbCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNpbXBsZSB1dGlsaXRpZXMgZm9yIGRlYWxpbmcgd2l0aCBVUkkgc3RyaW5ncy5cbiAqXG4gKiBUaGlzIHBhY2thZ2UgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgdGhlIENsb3N1cmUgVVJMIHBhY2thZ2UgKGdvb2cudXJsKVxuICogd2hlbiBtYW5pcHVsYXRpbmcgVVJJcyBmb3IgdXNlIGJ5IGEgYnJvd3Nlci4gVGhpcyBwYWNrYWdlIHVzZXMgcmVndWxhclxuICogZXhwcmVzc2lvbnMgdG8gcGFyc2UgYSBwb3RlbnRpYWwgVVJJIHdoaWNoIGNhbiBmYWxsIG91dCBvZiBzeW5jIHdpdGggaG93IGFcbiAqIGJyb3dzZXIgd2lsbCBhY3R1YWxseSBpbnRlcnByZXQgdGhlIFVSSS4gU2VlXG4gKiBgZ29vZy51cmkudXRpbHMuc2V0VXJsUGFja2FnZVN1cHBvcnRMb2dnaW5nSGFuZGxlcmAgZm9yIG9uZSB3YXkgdG8gaWRlbnRpZnlcbiAqIFVSSXMgdGhhdCBzaG91bGQgaW5zdGVhZCBiZSBwYXJzZWQgdXNpbmcgdGhlIFVSTCBwYWNrYWdlLlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgYSBsaWdodHdlaWdodCBhbHRlcm5hdGl2ZSB0byBjb25zdHJ1Y3RpbmcgZ29vZy5VcmlcbiAqIG9iamVjdHMuICBXaGVyZWFzIGdvb2cuVXJpIGFkZHMgc2V2ZXJhbCBraWxvYnl0ZXMgdG8gdGhlIGJpbmFyeSByZWdhcmRsZXNzXG4gKiBvZiBob3cgbXVjaCBvZiBpdHMgZnVuY3Rpb25hbGl0eSB5b3UgdXNlLCB0aGlzIGlzIGRlc2lnbmVkIHRvIGJlIGEgc2V0IG9mXG4gKiBtb3N0bHktaW5kZXBlbmRlbnQgdXRpbGl0aWVzIHNvIHRoYXQgdGhlIGNvbXBpbGVyIGluY2x1ZGVzIG9ubHkgd2hhdCBpc1xuICogbmVjZXNzYXJ5IGZvciB0aGUgdGFzay4gIEVzdGltYXRlZCBzYXZpbmdzIG9mIHBvcnRpbmcgaXMgNWsgcHJlLWd6aXAgYW5kXG4gKiAxLjVrIHBvc3QtZ3ppcC4gIFRvIGVuc3VyZSB0aGUgc2F2aW5ncyByZW1haW4sIGZ1dHVyZSBkZXZlbG9wZXJzIHNob3VsZFxuICogYXZvaWQgYWRkaW5nIG5ldyBmdW5jdGlvbmFsaXR5IHRvIGV4aXN0aW5nIGZ1bmN0aW9ucywgYnV0IGluc3RlYWQgY3JlYXRlXG4gKiBuZXcgb25lcyBhbmQgZmFjdG9yIG91dCBzaGFyZWQgY29kZS5cbiAqXG4gKiBNYW55IG9mIHRoZXNlIHV0aWxpdGllcyBoYXZlIGxpbWl0ZWQgZnVuY3Rpb25hbGl0eSwgdGFpbG9yZWQgdG8gY29tbW9uXG4gKiBjYXNlcy4gIFRoZSBxdWVyeSBwYXJhbWV0ZXIgdXRpbGl0aWVzIGFzc3VtZSB0aGF0IHRoZSBwYXJhbWV0ZXIga2V5cyBhcmVcbiAqIGFscmVhZHkgZW5jb2RlZCwgc2luY2UgbW9zdCBrZXlzIGFyZSBjb21waWxlLXRpbWUgYWxwaGFudW1lcmljIHN0cmluZ3MuICBUaGVcbiAqIHF1ZXJ5IHBhcmFtZXRlciBtdXRhdGlvbiB1dGlsaXRpZXMgYWxzbyBkbyBub3QgdG9sZXJhdGUgZnJhZ21lbnQgaWRlbnRpZmllcnMuXG4gKlxuICogQnkgZGVzaWduLCB0aGVzZSBmdW5jdGlvbnMgY2FuIGJlIHNsb3dlciB0aGFuIGdvb2cuVXJpIGVxdWl2YWxlbnRzLlxuICogUmVwZWF0ZWQgY2FsbHMgdG8gc29tZSBvZiBmdW5jdGlvbnMgbWF5IGJlIHF1YWRyYXRpYyBpbiBiZWhhdmlvciBmb3IgSUUsXG4gKiBhbHRob3VnaCB0aGUgZWZmZWN0IGlzIHNvbWV3aGF0IGxpbWl0ZWQgZ2l2ZW4gdGhlIDJrYiBsaW1pdC5cbiAqXG4gKiBPbmUgYWR2YW50YWdlIG9mIHRoZSBsaW1pdGVkIGZ1bmN0aW9uYWxpdHkgaGVyZSBpcyB0aGF0IHRoaXMgYXBwcm9hY2ggaXNcbiAqIGxlc3Mgc2Vuc2l0aXZlIHRvIGRpZmZlcmVuY2VzIGluIFVSSSBlbmNvZGluZ3MgdGhhbiBnb29nLlVyaSwgc2luY2UgdGhlc2VcbiAqIGZ1bmN0aW9ucyBvcGVyYXRlIG9uIHN0cmluZ3MgZGlyZWN0bHksIHJhdGhlciB0aGFuIGRlY29kaW5nIHRoZW0gYW5kXG4gKiB0aGVuIHJlLWVuY29kaW5nLlxuICpcbiAqIFVzZXMgZmVhdHVyZXMgb2YgUkZDIDM5ODYgZm9yIHBhcnNpbmcvZm9ybWF0dGluZyBVUklzOlxuICogICBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dFxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy51cmkudXRpbHMnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXgnKTtcbmdvb2cucHJvdmlkZSgnZ29vZy51cmkudXRpbHMuUXVlcnlBcnJheScpO1xuZ29vZy5wcm92aWRlKCdnb29nLnVyaS51dGlscy5RdWVyeVZhbHVlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cudXJpLnV0aWxzLlN0YW5kYXJkUXVlcnlQYXJhbScpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuYXNzZXJ0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLnN0cmluZycpO1xuXG5cbi8qKlxuICogQ2hhcmFjdGVyIGNvZGVzIGlubGluZWQgdG8gYXZvaWQgb2JqZWN0IGFsbG9jYXRpb25zIGR1ZSB0byBjaGFyQ29kZS5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy5DaGFyQ29kZV8gPSB7XG4gIEFNUEVSU0FORDogMzgsXG4gIEVRVUFMOiA2MSxcbiAgSEFTSDogMzUsXG4gIFFVRVNUSU9OOiA2M1xufTtcblxuXG4vKipcbiAqIEJ1aWxkcyBhIFVSSSBzdHJpbmcgZnJvbSBhbHJlYWR5LWVuY29kZWQgcGFydHMuXG4gKlxuICogTm8gZW5jb2RpbmcgaXMgcGVyZm9ybWVkLiAgQW55IGNvbXBvbmVudCBtYXkgYmUgb21pdHRlZCBhcyBlaXRoZXIgbnVsbCBvclxuICogdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9zY2hlbWUgVGhlIHNjaGVtZSBzdWNoIGFzICdodHRwJy5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF91c2VySW5mbyBUaGUgdXNlciBuYW1lIGJlZm9yZSB0aGUgJ0AnLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X2RvbWFpbiBUaGUgZG9tYWluIHN1Y2ggYXMgJ3d3dy5nb29nbGUuY29tJywgYWxyZWFkeVxuICogICAgIFVSSS1lbmNvZGVkLlxuICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcnxudWxsKT19IG9wdF9wb3J0IFRoZSBwb3J0IG51bWJlci5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9wYXRoIFRoZSBwYXRoLCBhbHJlYWR5IFVSSS1lbmNvZGVkLiAgSWYgaXQgaXMgbm90XG4gKiAgICAgZW1wdHksIGl0IG11c3QgYmVnaW4gd2l0aCBhIHNsYXNoLlxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X3F1ZXJ5RGF0YSBUaGUgVVJJLWVuY29kZWQgcXVlcnkgZGF0YS5cbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9mcmFnbWVudCBUaGUgVVJJLWVuY29kZWQgZnJhZ21lbnQgaWRlbnRpZmllci5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZ1bGx5IGNvbWJpbmVkIFVSSS5cbiAqL1xuZ29vZy51cmkudXRpbHMuYnVpbGRGcm9tRW5jb2RlZFBhcnRzID0gZnVuY3Rpb24oXG4gICAgb3B0X3NjaGVtZSwgb3B0X3VzZXJJbmZvLCBvcHRfZG9tYWluLCBvcHRfcG9ydCwgb3B0X3BhdGgsIG9wdF9xdWVyeURhdGEsXG4gICAgb3B0X2ZyYWdtZW50KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG91dCA9ICcnO1xuXG4gIGlmIChvcHRfc2NoZW1lKSB7XG4gICAgb3V0ICs9IG9wdF9zY2hlbWUgKyAnOic7XG4gIH1cblxuICBpZiAob3B0X2RvbWFpbikge1xuICAgIG91dCArPSAnLy8nO1xuXG4gICAgaWYgKG9wdF91c2VySW5mbykge1xuICAgICAgb3V0ICs9IG9wdF91c2VySW5mbyArICdAJztcbiAgICB9XG5cbiAgICBvdXQgKz0gb3B0X2RvbWFpbjtcblxuICAgIGlmIChvcHRfcG9ydCkge1xuICAgICAgb3V0ICs9ICc6JyArIG9wdF9wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRfcGF0aCkge1xuICAgIG91dCArPSBvcHRfcGF0aDtcbiAgfVxuXG4gIGlmIChvcHRfcXVlcnlEYXRhKSB7XG4gICAgb3V0ICs9ICc/JyArIG9wdF9xdWVyeURhdGE7XG4gIH1cblxuICBpZiAob3B0X2ZyYWdtZW50KSB7XG4gICAgb3V0ICs9ICcjJyArIG9wdF9mcmFnbWVudDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5cbi8qKlxuICogQSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJyZWFraW5nIGEgVVJJIGludG8gaXRzIGNvbXBvbmVudCBwYXJ0cy5cbiAqXG4gKiB7QGxpbmsgaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHR9IHNheXMgaW4gQXBwZW5kaXggQlxuICogQXMgdGhlIFwiZmlyc3QtbWF0Y2gtd2luc1wiIGFsZ29yaXRobSBpcyBpZGVudGljYWwgdG8gdGhlIFwiZ3JlZWR5XCJcbiAqIGRpc2FtYmlndWF0aW9uIG1ldGhvZCB1c2VkIGJ5IFBPU0lYIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGl0IGlzIG5hdHVyYWwgYW5kXG4gKiBjb21tb25wbGFjZSB0byB1c2UgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIHBhcnNpbmcgdGhlIHBvdGVudGlhbCBmaXZlXG4gKiBjb21wb25lbnRzIG9mIGEgVVJJIHJlZmVyZW5jZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGxpbmUgaXMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgYnJlYWtpbmctZG93biBhXG4gKiB3ZWxsLWZvcm1lZCBVUkkgcmVmZXJlbmNlIGludG8gaXRzIGNvbXBvbmVudHMuXG4gKlxuICogPHByZT5cbiAqIF4oKFteOi8/I10rKTopPygvLyhbXi8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT9cbiAqICAxMiAgICAgICAgICAgIDMgIDQgICAgICAgICAgNSAgICAgICA2ICA3ICAgICAgICA4IDlcbiAqIDwvcHJlPlxuICpcbiAqIFRoZSBudW1iZXJzIGluIHRoZSBzZWNvbmQgbGluZSBhYm92ZSBhcmUgb25seSB0byBhc3Npc3QgcmVhZGFiaWxpdHk7IHRoZXlcbiAqIGluZGljYXRlIHRoZSByZWZlcmVuY2UgcG9pbnRzIGZvciBlYWNoIHN1YmV4cHJlc3Npb24gKGkuZS4sIGVhY2ggcGFpcmVkXG4gKiBwYXJlbnRoZXNpcykuIFdlIHJlZmVyIHRvIHRoZSB2YWx1ZSBtYXRjaGVkIGZvciBzdWJleHByZXNzaW9uIDxuPiBhcyAkPG4+LlxuICogRm9yIGV4YW1wbGUsIG1hdGNoaW5nIHRoZSBhYm92ZSBleHByZXNzaW9uIHRvXG4gKiA8cHJlPlxuICogICAgIGh0dHA6Ly93d3cuaWNzLnVjaS5lZHUvcHViL2lldGYvdXJpLyNSZWxhdGVkXG4gKiA8L3ByZT5cbiAqIHJlc3VsdHMgaW4gdGhlIGZvbGxvd2luZyBzdWJleHByZXNzaW9uIG1hdGNoZXM6XG4gKiA8cHJlPlxuICogICAgJDEgPSBodHRwOlxuICogICAgJDIgPSBodHRwXG4gKiAgICAkMyA9IC8vd3d3Lmljcy51Y2kuZWR1XG4gKiAgICAkNCA9IHd3dy5pY3MudWNpLmVkdVxuICogICAgJDUgPSAvcHViL2lldGYvdXJpL1xuICogICAgJDYgPSA8dW5kZWZpbmVkPlxuICogICAgJDcgPSA8dW5kZWZpbmVkPlxuICogICAgJDggPSAjUmVsYXRlZFxuICogICAgJDkgPSBSZWxhdGVkXG4gKiA8L3ByZT5cbiAqIHdoZXJlIDx1bmRlZmluZWQ+IGluZGljYXRlcyB0aGF0IHRoZSBjb21wb25lbnQgaXMgbm90IHByZXNlbnQsIGFzIGlzIHRoZVxuICogY2FzZSBmb3IgdGhlIHF1ZXJ5IGNvbXBvbmVudCBpbiB0aGUgYWJvdmUgZXhhbXBsZS4gVGhlcmVmb3JlLCB3ZSBjYW5cbiAqIGRldGVybWluZSB0aGUgdmFsdWUgb2YgdGhlIGZpdmUgY29tcG9uZW50cyBhc1xuICogPHByZT5cbiAqICAgIHNjaGVtZSAgICA9ICQyXG4gKiAgICBhdXRob3JpdHkgPSAkNFxuICogICAgcGF0aCAgICAgID0gJDVcbiAqICAgIHF1ZXJ5ICAgICA9ICQ3XG4gKiAgICBmcmFnbWVudCAgPSAkOVxuICogPC9wcmU+XG4gKlxuICogVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBoYXMgYmVlbiBtb2RpZmllZCBzbGlnaHRseSB0byBleHBvc2UgdGhlXG4gKiB1c2VySW5mbywgZG9tYWluLCBhbmQgcG9ydCBzZXBhcmF0ZWx5IGZyb20gdGhlIGF1dGhvcml0eS5cbiAqIFRoZSBtb2RpZmllZCB2ZXJzaW9uIHlpZWxkc1xuICogPHByZT5cbiAqICAgICQxID0gaHR0cCAgICAgICAgICAgICAgc2NoZW1lXG4gKiAgICAkMiA9IDx1bmRlZmluZWQ+ICAgICAgIHVzZXJJbmZvIC1cXFxuICogICAgJDMgPSB3d3cuaWNzLnVjaS5lZHUgICBkb21haW4gICAgIHwgYXV0aG9yaXR5XG4gKiAgICAkNCA9IDx1bmRlZmluZWQ+ICAgICAgIHBvcnQgICAgIC0vXG4gKiAgICAkNSA9IC9wdWIvaWV0Zi91cmkvICAgIHBhdGhcbiAqICAgICQ2ID0gPHVuZGVmaW5lZD4gICAgICAgcXVlcnkgd2l0aG91dCA/XG4gKiAgICAkNyA9IFJlbGF0ZWQgICAgICAgICAgIGZyYWdtZW50IHdpdGhvdXQgI1xuICogPC9wcmU+XG4gKlxuICogVE9ETyh1c2VyKTogc2VwYXJhdGUgb3V0IHRoZSBhdXRob3JpdHkgdGVybWluYXRpbmcgY2hhcmFjdGVycyBvbmNlIHRoaXNcbiAqIGZpbGUgaXMgbW92ZWQgdG8gRVM2LlxuICogQHR5cGUgeyFSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy5zcGxpdFJlXyA9IG5ldyBSZWdFeHAoXG4gICAgJ14nICsgIC8vIEFuY2hvciBhZ2FpbnN0IHRoZSBlbnRpcmUgc3RyaW5nLlxuICAgICcoPzonICtcbiAgICAnKFteOi8/Iy5dKyknICsgIC8vIHNjaGVtZSAtIGlnbm9yZSBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgICAgICAgIC8vIHVzZWQgYnkgb3RoZXIgVVJMIHBhcnRzIHN1Y2ggYXMgOixcbiAgICAgICAgICAgICAgICAgICAgIC8vID8sIC8sICMsIGFuZCAuXG4gICAgJzopPycgK1xuICAgICcoPzovLycgK1xuICAgICcoPzooW15cXFxcXFxcXC8/I10qKUApPycgKyAgLy8gdXNlckluZm9cbiAgICAnKFteXFxcXFxcXFwvPyNdKj8pJyArICAgICAgIC8vIGRvbWFpblxuICAgICcoPzo6KFswLTldKykpPycgKyAgICAgICAvLyBwb3J0XG4gICAgJyg/PVtcXFxcXFxcXC8/I118JCknICsgICAgICAvLyBhdXRob3JpdHktdGVybWluYXRpbmcgY2hhcmFjdGVyLlxuICAgICcpPycgK1xuICAgICcoW14/I10rKT8nICsgICAgICAgICAgLy8gcGF0aFxuICAgICcoPzpcXFxcPyhbXiNdKikpPycgKyAgICAvLyBxdWVyeVxuICAgICcoPzojKFtcXFxcc1xcXFxTXSopKT8nICsgIC8vIGZyYWdtZW50LiBDYW4ndCB1c2UgJy4qJyB3aXRoICdzJyBmbGFnIGFzIEZpcmVmb3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZmxhZywgYW5kIGNhbid0IHVzZSBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJldmVyeXRoaW5nIHNldFwiIChbXl0pIGFzIElFMTAgZG9lc24ndCBtYXRjaCBhbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYXJhY3RlcnMgd2l0aCBpdC5cbiAgICAnJCcpO1xuXG5cbi8qKlxuICogVGhlIGluZGV4IG9mIGVhY2ggVVJJIGNvbXBvbmVudCBpbiB0aGUgcmV0dXJuIHZhbHVlIG9mIGdvb2cudXJpLnV0aWxzLnNwbGl0LlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXggPSB7XG4gIFNDSEVNRTogMSxcbiAgVVNFUl9JTkZPOiAyLFxuICBET01BSU46IDMsXG4gIFBPUlQ6IDQsXG4gIFBBVEg6IDUsXG4gIFFVRVJZX0RBVEE6IDYsXG4gIEZSQUdNRU5UOiA3XG59O1xuXG4vKipcbiAqIEB0eXBlIHs/ZnVuY3Rpb24oc3RyaW5nKX1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXJpLnV0aWxzLnVybFBhY2thZ2VTdXBwb3J0TG9nZ2luZ0hhbmRsZXJfID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0gez9mdW5jdGlvbihzdHJpbmcpfSBoYW5kbGVyIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIFVSSVxuICogICAgIHdpdGggYSBwcm90b2NvbCB0aGF0IGlzIGJldHRlciBzdXBwb3J0ZWQgYnkgdGhlIENsb3N1cmUgVVJMIHBhY2thZ2UgaXNcbiAqICAgICBkZXRlY3RlZC5cbiAqL1xuZ29vZy51cmkudXRpbHMuc2V0VXJsUGFja2FnZVN1cHBvcnRMb2dnaW5nSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLnVyaS51dGlscy51cmxQYWNrYWdlU3VwcG9ydExvZ2dpbmdIYW5kbGVyXyA9IGhhbmRsZXI7XG59O1xuXG4vKipcbiAqIFNwbGl0cyBhIFVSSSBpbnRvIGl0cyBjb21wb25lbnQgcGFydHMuXG4gKlxuICogRWFjaCBjb21wb25lbnQgY2FuIGJlIGFjY2Vzc2VkIHZpYSB0aGUgY29tcG9uZW50IGluZGljZXM7IGZvciBleGFtcGxlOlxuICogPHByZT5cbiAqIGdvb2cudXJpLnV0aWxzLnNwbGl0KHNvbWVTdHIpW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlFVRVJZX0RBVEFdO1xuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHN0cmluZyB0byBleGFtaW5lLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZ3x1bmRlZmluZWQ+fSBFYWNoIGNvbXBvbmVudCBzdGlsbCBVUkktZW5jb2RlZC5cbiAqICAgICBFYWNoIGNvbXBvbmVudCB0aGF0IGlzIHByZXNlbnQgd2lsbCBjb250YWluIHRoZSBlbmNvZGVkIHZhbHVlLCB3aGVyZWFzXG4gKiAgICAgY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcHJlc2VudCB3aWxsIGJlIHVuZGVmaW5lZCBvciBlbXB0eSwgZGVwZW5kaW5nXG4gKiAgICAgb24gdGhlIGJyb3dzZXIncyByZWd1bGFyIGV4cHJlc3Npb24gaW1wbGVtZW50YXRpb24uICBOZXZlciBudWxsLCBzaW5jZVxuICogICAgIGFyYml0cmFyeSBzdHJpbmdzIG1heSBzdGlsbCBsb29rIGxpa2UgcGF0aCBuYW1lcy5cbiAqL1xuZ29vZy51cmkudXRpbHMuc3BsaXQgPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBTZWUgQHJldHVybiBjb21tZW50IC0tIG5ldmVyIG51bGwuXG4gIHZhciByZXN1bHQgPSAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmd8dW5kZWZpbmVkPn0gKi8gKFxuICAgICAgdXJpLm1hdGNoKGdvb2cudXJpLnV0aWxzLnNwbGl0UmVfKSk7XG4gIGlmIChnb29nLnVyaS51dGlscy51cmxQYWNrYWdlU3VwcG9ydExvZ2dpbmdIYW5kbGVyXyAmJlxuICAgICAgWydodHRwJywgJ2h0dHBzJywgJ3dzJywgJ3dzcycsXG4gICAgICAgJ2Z0cCddLmluZGV4T2YocmVzdWx0W2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlNDSEVNRV0pID49IDApIHtcbiAgICBnb29nLnVyaS51dGlscy51cmxQYWNrYWdlU3VwcG9ydExvZ2dpbmdIYW5kbGVyXyh1cmkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/c3RyaW5nfSB1cmkgQSBwb3NzaWJseSBudWxsIHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9wcmVzZXJ2ZVJlc2VydmVkIElmIHRydWUsIHBlcmNlbnQtZW5jb2Rpbmcgb2YgUkZDLTM5ODZcbiAqICAgICByZXNlcnZlZCBjaGFyYWN0ZXJzIHdpbGwgbm90IGJlIHJlbW92ZWQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RyaW5nIFVSSS1kZWNvZGVkLCBvciBudWxsIGlmIHVyaSBpcyBudWxsLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuZGVjb2RlSWZQb3NzaWJsZV8gPSBmdW5jdGlvbih1cmksIG9wdF9wcmVzZXJ2ZVJlc2VydmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF1cmkpIHtcbiAgICByZXR1cm4gdXJpO1xuICB9XG5cbiAgcmV0dXJuIG9wdF9wcmVzZXJ2ZVJlc2VydmVkID8gZGVjb2RlVVJJKHVyaSkgOiBkZWNvZGVVUklDb21wb25lbnQodXJpKTtcbn07XG5cblxuLyoqXG4gKiBHZXRzIGEgVVJJIGNvbXBvbmVudCBieSBpbmRleC5cbiAqXG4gKiBJdCBpcyBwcmVmZXJyZWQgdG8gdXNlIHRoZSBnZXRQYXRoRW5jb2RlZCgpIHZhcmlldHkgb2YgZnVuY3Rpb25zIGFoZWFkLFxuICogc2luY2UgdGhleSBhcmUgbW9yZSByZWFkYWJsZS5cbiAqXG4gKiBAcGFyYW0ge2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4fSBjb21wb25lbnRJbmRleCBUaGUgY29tcG9uZW50IGluZGV4LlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RpbGwtZW5jb2RlZCBjb21wb25lbnQsIG9yIG51bGwgaWYgdGhlIGNvbXBvbmVudFxuICogICAgIGlzIG5vdCBwcmVzZW50LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0Q29tcG9uZW50QnlJbmRleF8gPSBmdW5jdGlvbihjb21wb25lbnRJbmRleCwgdXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gQ29udmVydCB1bmRlZmluZWQsIG51bGwsIGFuZCBlbXB0eSBzdHJpbmcgaW50byBudWxsLlxuICByZXR1cm4gZ29vZy51cmkudXRpbHMuc3BsaXQodXJpKVtjb21wb25lbnRJbmRleF0gfHwgbnVsbDtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gZXhhbWluZS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBwcm90b2NvbCBvciBzY2hlbWUsIG9yIG51bGwgaWYgbm9uZS4gIERvZXMgbm90XG4gKiAgICAgaW5jbHVkZSB0cmFpbGluZyBjb2xvbnMgb3Igc2xhc2hlcy5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0U2NoZW1lID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmdldENvbXBvbmVudEJ5SW5kZXhfKFxuICAgICAgZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguU0NIRU1FLCB1cmkpO1xufTtcblxuXG4vKipcbiAqIEdldHMgdGhlIGVmZmVjdGl2ZSBzY2hlbWUgZm9yIHRoZSBVUkwuICBJZiB0aGUgVVJMIGlzIHJlbGF0aXZlIHRoZW4gdGhlXG4gKiBzY2hlbWUgaXMgZGVyaXZlZCBmcm9tIHRoZSBwYWdlJ3MgbG9jYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gZXhhbWluZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb3RvY29sIG9yIHNjaGVtZSwgYWx3YXlzIGxvd2VyIGNhc2UuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldEVmZmVjdGl2ZVNjaGVtZSA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBzY2hlbWUgPSBnb29nLnVyaS51dGlscy5nZXRTY2hlbWUodXJpKTtcbiAgaWYgKCFzY2hlbWUgJiYgZ29vZy5nbG9iYWwuc2VsZiAmJiBnb29nLmdsb2JhbC5zZWxmLmxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3RvY29sID0gZ29vZy5nbG9iYWwuc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgICBzY2hlbWUgPSBwcm90b2NvbC5zdWJzdHIoMCwgcHJvdG9jb2wubGVuZ3RoIC0gMSk7XG4gIH1cbiAgLy8gTk9URTogV2hlbiBjYWxsZWQgZnJvbSBhIHdlYiB3b3JrZXIgaW4gRmlyZWZveCAzLjUsIGxvY2F0aW9uIG1heSBiZSBudWxsLlxuICAvLyBBbGwgb3RoZXIgYnJvd3NlcnMgd2l0aCB3ZWIgd29ya2VycyBzdXBwb3J0IHNlbGYubG9jYXRpb24gZnJvbSB0aGUgd29ya2VyLlxuICByZXR1cm4gc2NoZW1lID8gc2NoZW1lLnRvTG93ZXJDYXNlKCkgOiAnJztcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gZXhhbWluZS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSB1c2VyIG5hbWUgc3RpbGwgZW5jb2RlZCwgb3IgbnVsbCBpZiBub25lLlxuICovXG5nb29nLnVyaS51dGlscy5nZXRVc2VySW5mb0VuY29kZWQgPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuZ2V0Q29tcG9uZW50QnlJbmRleF8oXG4gICAgICBnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5VU0VSX0lORk8sIHVyaSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZGVjb2RlZCB1c2VyIGluZm8sIG9yIG51bGwgaWYgbm9uZS5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0VXNlckluZm8gPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuZGVjb2RlSWZQb3NzaWJsZV8oXG4gICAgICBnb29nLnVyaS51dGlscy5nZXRVc2VySW5mb0VuY29kZWQodXJpKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZG9tYWluIG5hbWUgc3RpbGwgZW5jb2RlZCwgb3IgbnVsbCBpZiBub25lLlxuICovXG5nb29nLnVyaS51dGlscy5nZXREb21haW5FbmNvZGVkID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmdldENvbXBvbmVudEJ5SW5kZXhfKFxuICAgICAgZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguRE9NQUlOLCB1cmkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBleGFtaW5lLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGRlY29kZWQgZG9tYWluLCBvciBudWxsIGlmIG5vbmUuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldERvbWFpbiA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5kZWNvZGVJZlBvc3NpYmxlXyhcbiAgICAgIGdvb2cudXJpLnV0aWxzLmdldERvbWFpbkVuY29kZWQodXJpKSwgdHJ1ZSAvKiBvcHRfcHJlc2VydmVSZXNlcnZlZCAqLyk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcmV0dXJuIHs/bnVtYmVyfSBUaGUgcG9ydCBudW1iZXIsIG9yIG51bGwgaWYgbm9uZS5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0UG9ydCA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIENvZXJjZSB0byBhIG51bWJlci4gIElmIHRoZSByZXN1bHQgb2YgZ2V0Q29tcG9uZW50QnlJbmRleF8gaXMgbnVsbCBvclxuICAvLyBub24tbnVtZXJpYywgdGhlIG51bWJlciBjb2Vyc2lvbiB5aWVsZHMgTmFOLiAgVGhpcyB3aWxsIHRoZW4gcmV0dXJuXG4gIC8vIG51bGwgZm9yIGFsbCBub24tbnVtZXJpYyBjYXNlcyAodGhvdWdoIGFsc28gemVybywgd2hpY2ggaXNuJ3QgYSByZWxldmFudFxuICAvLyBwb3J0IG51bWJlcikuXG4gIHJldHVybiBOdW1iZXIoXG4gICAgICAgICAgICAgZ29vZy51cmkudXRpbHMuZ2V0Q29tcG9uZW50QnlJbmRleF8oXG4gICAgICAgICAgICAgICAgIGdvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBPUlQsIHVyaSkpIHx8XG4gICAgICBudWxsO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBleGFtaW5lLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHBhdGggc3RpbGwgZW5jb2RlZCwgb3IgbnVsbCBpZiBub25lLiBJbmNsdWRlcyB0aGVcbiAqICAgICBsZWFkaW5nIHNsYXNoLCBpZiBhbnkuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldFBhdGhFbmNvZGVkID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmdldENvbXBvbmVudEJ5SW5kZXhfKFxuICAgICAgZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUEFUSCwgdXJpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gZXhhbWluZS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBkZWNvZGVkIHBhdGgsIG9yIG51bGwgaWYgbm9uZS4gIEluY2x1ZGVzIHRoZSBsZWFkaW5nXG4gKiAgICAgc2xhc2gsIGlmIGFueS5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0UGF0aCA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5kZWNvZGVJZlBvc3NpYmxlXyhcbiAgICAgIGdvb2cudXJpLnV0aWxzLmdldFBhdGhFbmNvZGVkKHVyaSksIHRydWUgLyogb3B0X3ByZXNlcnZlUmVzZXJ2ZWQgKi8pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBleGFtaW5lLlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHF1ZXJ5IGRhdGEgc3RpbGwgZW5jb2RlZCwgb3IgbnVsbCBpZiBub25lLiAgRG9lcyBub3RcbiAqICAgICBpbmNsdWRlIHRoZSBxdWVzdGlvbiBtYXJrIGl0c2VsZi5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0UXVlcnlEYXRhID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmdldENvbXBvbmVudEJ5SW5kZXhfKFxuICAgICAgZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUVVFUllfREFUQSwgdXJpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gZXhhbWluZS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmcmFnbWVudCBpZGVudGlmaWVyLCBvciBudWxsIGlmIG5vbmUuICBEb2VzIG5vdFxuICogICAgIGluY2x1ZGUgdGhlIGhhc2ggbWFyayBpdHNlbGYuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldEZyYWdtZW50RW5jb2RlZCA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRoZSBoYXNoIG1hcmsgbWF5IG5vdCBhcHBlYXIgaW4gYW55IG90aGVyIHBhcnQgb2YgdGhlIFVSTC5cbiAgdmFyIGhhc2hJbmRleCA9IHVyaS5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPCAwID8gbnVsbCA6IHVyaS5zdWJzdHIoaGFzaEluZGV4ICsgMSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGZyYWdtZW50IFRoZSBlbmNvZGVkIGZyYWdtZW50IGlkZW50aWZpZXIsIG9yIG51bGwgaWYgbm9uZS5cbiAqICAgICBEb2VzIG5vdCBpbmNsdWRlIHRoZSBoYXNoIG1hcmsgaXRzZWxmLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJJIHdpdGggdGhlIGZyYWdtZW50IHNldC5cbiAqL1xuZ29vZy51cmkudXRpbHMuc2V0RnJhZ21lbnRFbmNvZGVkID0gZnVuY3Rpb24odXJpLCBmcmFnbWVudCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5yZW1vdmVGcmFnbWVudCh1cmkpICsgKGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJyk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZGVjb2RlZCBmcmFnbWVudCBpZGVudGlmaWVyLCBvciBudWxsIGlmIG5vbmUuICBEb2VzXG4gKiAgICAgbm90IGluY2x1ZGUgdGhlIGhhc2ggbWFyay5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0RnJhZ21lbnQgPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuZGVjb2RlSWZQb3NzaWJsZV8oXG4gICAgICBnb29nLnVyaS51dGlscy5nZXRGcmFnbWVudEVuY29kZWQodXJpKSk7XG59O1xuXG5cbi8qKlxuICogRXh0cmFjdHMgZXZlcnl0aGluZyB1cCB0byB0aGUgcG9ydCBvZiB0aGUgVVJJLlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHN0cmluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gRXZlcnl0aGluZyB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBwb3J0LlxuICovXG5nb29nLnVyaS51dGlscy5nZXRIb3N0ID0gZnVuY3Rpb24odXJpKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHBpZWNlcyA9IGdvb2cudXJpLnV0aWxzLnNwbGl0KHVyaSk7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5idWlsZEZyb21FbmNvZGVkUGFydHMoXG4gICAgICBwaWVjZXNbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguU0NIRU1FXSxcbiAgICAgIHBpZWNlc1tnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5VU0VSX0lORk9dLFxuICAgICAgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkRPTUFJTl0sXG4gICAgICBwaWVjZXNbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUE9SVF0pO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbiBmb3IgYSBnaXZlbiBVUkwuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgc3RyaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBFdmVyeXRoaW5nIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIHBvcnQuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldE9yaWdpbiA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBwaWVjZXMgPSBnb29nLnVyaS51dGlscy5zcGxpdCh1cmkpO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuYnVpbGRGcm9tRW5jb2RlZFBhcnRzKFxuICAgICAgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlNDSEVNRV0sIG51bGwgLyogb3B0X3VzZXJJbmZvICovLFxuICAgICAgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkRPTUFJTl0sXG4gICAgICBwaWVjZXNbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUE9SVF0pO1xufTtcblxuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBwYXRoIG9mIHRoZSBVUkwgYW5kIGV2ZXJ5dGhpbmcgYWZ0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgc3RyaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJJLCBzdGFydGluZyBhdCB0aGUgcGF0aCBhbmQgaW5jbHVkaW5nIHRoZSBxdWVyeVxuICogICAgIHBhcmFtZXRlcnMgYW5kIGZyYWdtZW50IGlkZW50aWZpZXIuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldFBhdGhBbmRBZnRlciA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBwaWVjZXMgPSBnb29nLnVyaS51dGlscy5zcGxpdCh1cmkpO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuYnVpbGRGcm9tRW5jb2RlZFBhcnRzKFxuICAgICAgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBBVEhdLFxuICAgICAgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlFVRVJZX0RBVEFdLFxuICAgICAgcGllY2VzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkZSQUdNRU5UXSk7XG59O1xuXG5cbi8qKlxuICogR2V0cyB0aGUgVVJJIHdpdGggdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgcmVtb3ZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBleGFtaW5lLlxuICogQHJldHVybiB7c3RyaW5nfSBFdmVyeXRoaW5nIHByZWNlZGluZyB0aGUgaGFzaCBtYXJrLlxuICovXG5nb29nLnVyaS51dGlscy5yZW1vdmVGcmFnbWVudCA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIFRoZSBoYXNoIG1hcmsgbWF5IG5vdCBhcHBlYXIgaW4gYW55IG90aGVyIHBhcnQgb2YgdGhlIFVSTC5cbiAgdmFyIGhhc2hJbmRleCA9IHVyaS5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPCAwID8gdXJpIDogdXJpLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xufTtcblxuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0d28gVVJJJ3MgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBkb21haW4sIHNjaGVtZSwgYW5kIHBvcnQuXG4gKlxuICogVW5saWtlIHRoZSB2ZXJzaW9uIGluIGdvb2cuVXJpLCB0aGlzIGNoZWNrcyBwcm90b2NvbCwgYW5kIHRoZXJlZm9yZSBpc1xuICogc3VpdGFibGUgZm9yIGNoZWNraW5nIGFnYWluc3QgdGhlIGJyb3dzZXIncyBzYW1lLW9yaWdpbiBwb2xpY3kuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaTEgVGhlIGZpcnN0IFVSSS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkyIFRoZSBzZWNvbmQgVVJJLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGV5IGhhdmUgdGhlIHNhbWUgc2NoZW1lLCBkb21haW4gYW5kIHBvcnQuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmhhdmVTYW1lRG9tYWluID0gZnVuY3Rpb24odXJpMSwgdXJpMikge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBwaWVjZXMxID0gZ29vZy51cmkudXRpbHMuc3BsaXQodXJpMSk7XG4gIHZhciBwaWVjZXMyID0gZ29vZy51cmkudXRpbHMuc3BsaXQodXJpMik7XG4gIHJldHVybiBwaWVjZXMxW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LkRPTUFJTl0gPT1cbiAgICAgIHBpZWNlczJbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguRE9NQUlOXSAmJlxuICAgICAgcGllY2VzMVtnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5TQ0hFTUVdID09XG4gICAgICBwaWVjZXMyW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlNDSEVNRV0gJiZcbiAgICAgIHBpZWNlczFbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUE9SVF0gPT1cbiAgICAgIHBpZWNlczJbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUE9SVF07XG59O1xuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZXJlIGFyZSBubyBmcmFnbWVudCBvciBxdWVyeSBpZGVudGlmaWVycywgb25seSBpbiB1bmNvbXBpbGVkXG4gKiBtb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIGV4YW1pbmUuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy5hc3NlcnROb0ZyYWdtZW50c09yUXVlcmllc18gPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KFxuICAgICAgdXJpLmluZGV4T2YoJyMnKSA8IDAgJiYgdXJpLmluZGV4T2YoJz8nKSA8IDAsXG4gICAgICAnZ29vZy51cmkudXRpbHM6IEZyYWdtZW50IG9yIHF1ZXJ5IGlkZW50aWZpZXJzIGFyZSBub3Qgc3VwcG9ydGVkOiBbJXNdJyxcbiAgICAgIHVyaSk7XG59O1xuXG5cbi8qKlxuICogU3VwcG9ydGVkIHF1ZXJ5IHBhcmFtZXRlciB2YWx1ZXMgYnkgdGhlIHBhcmFtZXRlciBzZXJpYWxpemluZyB1dGlsaXRpZXMuXG4gKlxuICogSWYgYSB2YWx1ZSBpcyBudWxsIG9yIHVuZGVmaW5lZCwgdGhlIGtleS12YWx1ZSBwYWlyIGlzIHNraXBwZWQsIGFzIGFuIGVhc3lcbiAqIHdheSB0byBvbWl0IHBhcmFtZXRlcnMgY29uZGl0aW9uYWxseS4gIE5vbi1hcnJheSBwYXJhbWV0ZXJzIGFyZSBjb252ZXJ0ZWRcbiAqIHRvIGEgc3RyaW5nIGFuZCBVUkkgZW5jb2RlZC4gIEFycmF5IHZhbHVlcyBhcmUgZXhwYW5kZWQgaW50byBtdWx0aXBsZVxuICogJmtleT12YWx1ZSBwYWlycywgd2l0aCBlYWNoIGVsZW1lbnQgc3RyaW5naXplZCBhbmQgVVJJLWVuY29kZWQuXG4gKlxuICogQHR5cGVkZWYgeyp9XG4gKi9cbmdvb2cudXJpLnV0aWxzLlF1ZXJ5VmFsdWU7XG5cblxuLyoqXG4gKiBBbiBhcnJheSByZXByZXNlbnRpbmcgYSBzZXQgb2YgcXVlcnkgcGFyYW1ldGVycyB3aXRoIGFsdGVybmF0aW5nIGtleXNcbiAqIGFuZCB2YWx1ZXMuXG4gKlxuICogS2V5cyBhcmUgYXNzdW1lZCB0byBiZSBVUkkgZW5jb2RlZCBhbHJlYWR5IGFuZCBsaXZlIGF0IGV2ZW4gaW5kaWNlcy4gIFNlZVxuICogZ29vZy51cmkudXRpbHMuUXVlcnlWYWx1ZSBmb3IgZGV0YWlscyBvbiBob3cgcGFyYW1ldGVyIHZhbHVlcyBhcmUgZW5jb2RlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICogPHByZT5cbiAqIHZhciBkYXRhID0gW1xuICogICAvLyBTaW1wbGUgcGFyYW06ID9uYW1lPUJvYkJhcmtlclxuICogICAnbmFtZScsICdCb2JCYXJrZXInLFxuICogICAvLyBDb25kaXRpb25hbCBwYXJhbSAtLSBtYXkgYmUgb21pdHRlZCBlbnRpcmVseS5cbiAqICAgJ3NwZWNpYWxEaWV0YXJ5TmVlZHMnLCBoYXNEaWV0YXJ5TmVlZHMoKSA/IGdldERpZXRhcnlOZWVkcygpIDogbnVsbCxcbiAqICAgLy8gTXVsdGktdmFsdWVkIHBhcmFtOiAmaG91c2U9TG9zQW5nZWxlcyZob3VzZT1OZXdZb3JrJmhvdXNlPW51bGxcbiAqICAgJ2hvdXNlJywgWydMb3NBbmdlbGVzJywgJ05ld1lvcmsnLCBudWxsXVxuICogXTtcbiAqIDwvcHJlPlxuICpcbiAqIEB0eXBlZGVmIHshQXJyYXk8c3RyaW5nfGdvb2cudXJpLnV0aWxzLlF1ZXJ5VmFsdWU+fVxuICovXG5nb29nLnVyaS51dGlscy5RdWVyeUFycmF5O1xuXG5cbi8qKlxuICogUGFyc2VzIGVuY29kZWQgcXVlcnkgcGFyYW1ldGVycyBhbmQgY2FsbHMgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGV2ZXJ5XG4gKiBwYXJhbWV0ZXIgZm91bmQgaW4gdGhlIHN0cmluZy5cbiAqXG4gKiBNaXNzaW5nIHZhbHVlIG9mIHBhcmFtZXRlciAoZS5nLiDigJzigKYma2V5JuKApuKAnSkgaXMgdHJlYXRlZCBhcyBpZiB0aGUgdmFsdWUgd2FzIGFuXG4gKiBlbXB0eSBzdHJpbmcuICBLZXlzIG1heSBiZSBlbXB0eSBzdHJpbmdzIChlLmcuIOKAnOKApiY9dmFsdWUm4oCm4oCdKSB3aGljaCBhbHNvIG1lYW5zXG4gKiB0aGF0IOKAnOKApiY9JuKApuKAnSBhbmQg4oCc4oCmJibigKbigJ0gd2lsbCByZXN1bHQgaW4gYW4gZW1wdHkga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RlZFF1ZXJ5IEVuY29kZWQgcXVlcnkgc3RyaW5nIGV4Y2x1ZGluZyBxdWVzdGlvbiBtYXJrIGF0XG4gKiAgICAgdGhlIGJlZ2lubmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcpfSBjYWxsYmFjayBGdW5jdGlvbiBjYWxsZWQgZm9yIGV2ZXJ5XG4gKiAgICAgcGFyYW1ldGVyIGZvdW5kIGluIHF1ZXJ5IHN0cmluZy4gIFRoZSBmaXJzdCBhcmd1bWVudCAobmFtZSkgd2lsbCBub3QgYmVcbiAqICAgICB1cmxkZWNvZGVkIChzbyB0aGUgZnVuY3Rpb24gaXMgY29uc2lzdGVudCB3aXRoIGJ1aWxkUXVlcnlEYXRhKSwgYnV0IHRoZVxuICogICAgIHNlY29uZCB3aWxsLiAgSWYgdGhlIHBhcmFtZXRlciBoYXMgbm8gdmFsdWUgKGkuZS4g4oCcPeKAnSB3YXMgbm90IHByZXNlbnQpXG4gKiAgICAgdGhlIHNlY29uZCBhcmd1bWVudCAodmFsdWUpIHdpbGwgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5nb29nLnVyaS51dGlscy5wYXJzZVF1ZXJ5RGF0YSA9IGZ1bmN0aW9uKGVuY29kZWRRdWVyeSwgY2FsbGJhY2spIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWVuY29kZWRRdWVyeSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcGFpcnMgPSBlbmNvZGVkUXVlcnkuc3BsaXQoJyYnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbmRleE9mRXF1YWxzID0gcGFpcnNbaV0uaW5kZXhPZignPScpO1xuICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgIGlmIChpbmRleE9mRXF1YWxzID49IDApIHtcbiAgICAgIG5hbWUgPSBwYWlyc1tpXS5zdWJzdHJpbmcoMCwgaW5kZXhPZkVxdWFscyk7XG4gICAgICB2YWx1ZSA9IHBhaXJzW2ldLnN1YnN0cmluZyhpbmRleE9mRXF1YWxzICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBwYWlyc1tpXTtcbiAgICB9XG4gICAgY2FsbGJhY2sobmFtZSwgdmFsdWUgPyBnb29nLnN0cmluZy51cmxEZWNvZGUodmFsdWUpIDogJycpO1xuICB9XG59O1xuXG5cbi8qKlxuICogU3BsaXQgdGhlIFVSSSBpbnRvIDMgcGFydHMgd2hlcmUgdGhlIFsxXSBpcyB0aGUgcXVlcnlEYXRhIHdpdGhvdXQgYSBsZWFkaW5nXG4gKiAnPycuIEZvciBleGFtcGxlLCB0aGUgVVJJIGh0dHA6Ly9mb28uY29tL2Jhcj9hPWIjYWJjIHJldHVybnNcbiAqIFsnaHR0cDovL2Zvby5jb20vYmFyJywnYT1iJywnI2FiYyddLlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIHBhcnNlLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IEFuIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHVyaSBvZiBsZW5ndGggMyB3aGVyZSB0aGVcbiAqICAgICBtaWRkbGUgdmFsdWUgaXMgdGhlIHF1ZXJ5RGF0YSB3aXRob3V0IGEgbGVhZGluZyAnPycuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy5zcGxpdFF1ZXJ5RGF0YV8gPSBmdW5jdGlvbih1cmkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBGaW5kIHRoZSBxdWVyeSBkYXRhIGFuZCBoYXNoLlxuICB2YXIgaGFzaEluZGV4ID0gdXJpLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA8IDApIHtcbiAgICBoYXNoSW5kZXggPSB1cmkubGVuZ3RoO1xuICB9XG4gIHZhciBxdWVzdGlvbkluZGV4ID0gdXJpLmluZGV4T2YoJz8nKTtcbiAgdmFyIHF1ZXJ5RGF0YTtcbiAgaWYgKHF1ZXN0aW9uSW5kZXggPCAwIHx8IHF1ZXN0aW9uSW5kZXggPiBoYXNoSW5kZXgpIHtcbiAgICBxdWVzdGlvbkluZGV4ID0gaGFzaEluZGV4O1xuICAgIHF1ZXJ5RGF0YSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5RGF0YSA9IHVyaS5zdWJzdHJpbmcocXVlc3Rpb25JbmRleCArIDEsIGhhc2hJbmRleCk7XG4gIH1cbiAgcmV0dXJuIFt1cmkuc3Vic3RyKDAsIHF1ZXN0aW9uSW5kZXgpLCBxdWVyeURhdGEsIHVyaS5zdWJzdHIoaGFzaEluZGV4KV07XG59O1xuXG5cbi8qKlxuICogSm9pbiBhbiBhcnJheSBjcmVhdGVkIGJ5IHNwbGl0UXVlcnlEYXRhXyBiYWNrIGludG8gYSBVUkkuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBwYXJ0cyBBIFVSSSBpbiB0aGUgZm9ybSBnZW5lcmF0ZWQgYnkgc3BsaXRRdWVyeURhdGFfLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgam9pbmVkIFVSSS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cudXJpLnV0aWxzLmpvaW5RdWVyeURhdGFfID0gZnVuY3Rpb24ocGFydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gcGFydHNbMF0gKyAocGFydHNbMV0gPyAnPycgKyBwYXJ0c1sxXSA6ICcnKSArIHBhcnRzWzJdO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeURhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdEYXRhXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy5hcHBlbmRRdWVyeURhdGFfID0gZnVuY3Rpb24ocXVlcnlEYXRhLCBuZXdEYXRhKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFuZXdEYXRhKSB7XG4gICAgcmV0dXJuIHF1ZXJ5RGF0YTtcbiAgfVxuICByZXR1cm4gcXVlcnlEYXRhID8gcXVlcnlEYXRhICsgJyYnICsgbmV3RGF0YSA6IG5ld0RhdGE7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaVxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5RGF0YVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuYXBwZW5kUXVlcnlEYXRhVG9VcmlfID0gZnVuY3Rpb24odXJpLCBxdWVyeURhdGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXF1ZXJ5RGF0YSkge1xuICAgIHJldHVybiB1cmk7XG4gIH1cbiAgdmFyIHBhcnRzID0gZ29vZy51cmkudXRpbHMuc3BsaXRRdWVyeURhdGFfKHVyaSk7XG4gIHBhcnRzWzFdID0gZ29vZy51cmkudXRpbHMuYXBwZW5kUXVlcnlEYXRhXyhwYXJ0c1sxXSwgcXVlcnlEYXRhKTtcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmpvaW5RdWVyeURhdGFfKHBhcnRzKTtcbn07XG5cblxuLyoqXG4gKiBBcHBlbmRzIGtleT12YWx1ZSBwYWlycyB0byBhbiBhcnJheSwgc3VwcG9ydGluZyBtdWx0aS12YWx1ZWQgb2JqZWN0cy5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgcHJlZml4LlxuICogQHBhcmFtIHtnb29nLnVyaS51dGlscy5RdWVyeVZhbHVlfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcGFpcnMgVGhlIGFycmF5IHRvIHdoaWNoIHRoZSAna2V5PXZhbHVlJyBzdHJpbmdzXG4gKiAgICAgc2hvdWxkIGJlIGFwcGVuZGVkLlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuYXBwZW5kS2V5VmFsdWVQYWlyc18gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBwYWlycykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnRTdHJpbmcoa2V5KTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gQ29udmluY2UgdGhlIGNvbXBpbGVyIGl0J3MgYW4gYXJyYXkuXG4gICAgZ29vZy5hc3NlcnRzLmFzc2VydEFycmF5KHZhbHVlKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAvLyBDb252ZXJ0IHRvIHN0cmluZyBleHBsaWNpdGx5LCB0byBzaG9ydCBjaXJjdWl0IHRoZSBudWxsIGFuZCBhcnJheVxuICAgICAgLy8gbG9naWMgaW4gdGhpcyBmdW5jdGlvbiAtLSB0aGlzIGVuc3VyZXMgdGhhdCBudWxsIGFuZCB1bmRlZmluZWQgZ2V0XG4gICAgICAvLyB3cml0dGVuIGFzIGxpdGVyYWwgJ251bGwnIGFuZCAndW5kZWZpbmVkJywgYW5kIGFycmF5cyBkb24ndCBnZXRcbiAgICAgIC8vIGV4cGFuZGVkIG91dCBidXQgaW5zdGVhZCBlbmNvZGVkIGluIHRoZSBkZWZhdWx0IHdheS5cbiAgICAgIGdvb2cudXJpLnV0aWxzLmFwcGVuZEtleVZhbHVlUGFpcnNfKGtleSwgU3RyaW5nKHZhbHVlW2pdKSwgcGFpcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgLy8gU2tpcCBhIHRvcC1sZXZlbCBudWxsIG9yIHVuZGVmaW5lZCBlbnRpcmVseS5cbiAgICBwYWlycy5wdXNoKFxuICAgICAgICBrZXkgK1xuICAgICAgICAvLyBDaGVjayBmb3IgZW1wdHkgc3RyaW5nLiBaZXJvIGdldHMgZW5jb2RlZCBpbnRvIHRoZSB1cmwgYXMgbGl0ZXJhbFxuICAgICAgICAvLyBzdHJpbmdzLiAgRm9yIGVtcHR5IHN0cmluZywgc2tpcCB0aGUgZXF1YWwgc2lnbiwgdG8gYmUgY29uc2lzdGVudFxuICAgICAgICAvLyB3aXRoIFVyaUJ1aWxkZXIuamF2YS5cbiAgICAgICAgKHZhbHVlID09PSAnJyA/ICcnIDogJz0nICsgZ29vZy5zdHJpbmcudXJsRW5jb2RlKHZhbHVlKSkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQnVpbGRzIGEgcXVlcnkgZGF0YSBzdHJpbmcgZnJvbSBhIHNlcXVlbmNlIG9mIGFsdGVybmF0aW5nIGtleXMgYW5kIHZhbHVlcy5cbiAqIEN1cnJlbnRseSBnZW5lcmF0ZXMgXCIma2V5JlwiIGZvciBlbXB0eSBhcmdzLlxuICpcbiAqIEBwYXJhbSB7IUlBcnJheUxpa2U8c3RyaW5nfGdvb2cudXJpLnV0aWxzLlF1ZXJ5VmFsdWU+fSBrZXlzQW5kVmFsdWVzXG4gKiAgICAgQWx0ZXJuYXRpbmcga2V5cyBhbmQgdmFsdWVzLiBTZWUgdGhlIFF1ZXJ5QXJyYXkgdHlwZWRlZi5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3N0YXJ0SW5kZXggQSBzdGFydCBvZmZzZXQgaW50byB0aGUgYXJhcnksIGRlZmF1bHRzIHRvIDAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHF1ZXJ5IHN0cmluZywgaW4gdGhlIGZvcm0gJ2E9MSZiPTInLlxuICovXG5nb29nLnVyaS51dGlscy5idWlsZFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uKGtleXNBbmRWYWx1ZXMsIG9wdF9zdGFydEluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChcbiAgICAgIE1hdGgubWF4KGtleXNBbmRWYWx1ZXMubGVuZ3RoIC0gKG9wdF9zdGFydEluZGV4IHx8IDApLCAwKSAlIDIgPT0gMCxcbiAgICAgICdnb29nLnVyaS51dGlsczogS2V5L3ZhbHVlIGxpc3RzIG11c3QgYmUgZXZlbiBpbiBsZW5ndGguJyk7XG5cbiAgdmFyIHBhcmFtcyA9IFtdO1xuICBmb3IgKHZhciBpID0gb3B0X3N0YXJ0SW5kZXggfHwgMDsgaSA8IGtleXNBbmRWYWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChrZXlzQW5kVmFsdWVzW2ldKTtcbiAgICBnb29nLnVyaS51dGlscy5hcHBlbmRLZXlWYWx1ZVBhaXJzXyhrZXksIGtleXNBbmRWYWx1ZXNbaSArIDFdLCBwYXJhbXMpO1xuICB9XG4gIHJldHVybiBwYXJhbXMuam9pbignJicpO1xufTtcblxuXG4vKipcbiAqIEJ1aWxkcyBhIHF1ZXJ5IGRhdGEgc3RyaW5nIGZyb20gYSBtYXAuXG4gKiBDdXJyZW50bHkgZ2VuZXJhdGVzIFwiJmtleSZcIiBmb3IgZW1wdHkgYXJncy5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBnb29nLnVyaS51dGlscy5RdWVyeVZhbHVlPn0gbWFwIEFuIG9iamVjdCB3aGVyZSBrZXlzXG4gKiAgICAgYXJlIFVSSS1lbmNvZGVkIHBhcmFtZXRlciBrZXlzLCBhbmQgdGhlIHZhbHVlcyBhcmUgYXJiaXRyYXJ5IHR5cGVzXG4gKiAgICAgb3IgYXJyYXlzLiBLZXlzIHdpdGggYSBudWxsIHZhbHVlIGFyZSBkcm9wcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZW5jb2RlZCBxdWVyeSBzdHJpbmcsIGluIHRoZSBmb3JtICdhPTEmYj0yJy5cbiAqL1xuZ29vZy51cmkudXRpbHMuYnVpbGRRdWVyeURhdGFGcm9tTWFwID0gZnVuY3Rpb24obWFwKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHBhcmFtcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgZ29vZy51cmkudXRpbHMuYXBwZW5kS2V5VmFsdWVQYWlyc18oa2V5LCBtYXBba2V5XSwgcGFyYW1zKTtcbiAgfVxuICByZXR1cm4gcGFyYW1zLmpvaW4oJyYnKTtcbn07XG5cblxuLyoqXG4gKiBBcHBlbmRzIFVSSSBwYXJhbWV0ZXJzIHRvIGFuIGV4aXN0aW5nIFVSSS5cbiAqXG4gKiBUaGUgdmFyaWFibGUgYXJndW1lbnRzIG1heSBjb250YWluIGFsdGVybmF0aW5nIGtleXMgYW5kIHZhbHVlcy4gIEtleXMgYXJlXG4gKiBhc3N1bWVkIHRvIGJlIGFscmVhZHkgVVJJIGVuY29kZWQuICBUaGUgdmFsdWVzIHNob3VsZCBub3QgYmUgVVJJLWVuY29kZWQsXG4gKiBhbmQgd2lsbCBpbnN0ZWFkIGJlIGVuY29kZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAqIDxwcmU+XG4gKiBhcHBlbmRQYXJhbXMoJ2h0dHA6Ly93d3cuZm9vLmNvbT9leGlzdGluZz10cnVlJyxcbiAqICAgICAna2V5MScsICd2YWx1ZTEnLFxuICogICAgICdrZXkyJywgJ3ZhbHVlP3dpbGxCZUVuY29kZWQnLFxuICogICAgICdrZXkzJywgWyd2YWx1ZUEnLCAndmFsdWVCJywgJ3ZhbHVlQyddLFxuICogICAgICdrZXk0JywgbnVsbCk7XG4gKiByZXN1bHQ6ICdodHRwOi8vd3d3LmZvby5jb20/ZXhpc3Rpbmc9dHJ1ZSYnICtcbiAqICAgICAna2V5MT12YWx1ZTEmJyArXG4gKiAgICAgJ2tleTI9dmFsdWUlM0Z3aWxsQmVFbmNvZGVkJicgK1xuICogICAgICdrZXkzPXZhbHVlQSZrZXkzPXZhbHVlQiZrZXkzPXZhbHVlQydcbiAqIDwvcHJlPlxuICpcbiAqIEEgc2luZ2xlIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBleGhpYml0IHF1YWRyYXRpYyBiZWhhdmlvciBpbiBJRSxcbiAqIHdoZXJlYXMgbXVsdGlwbGUgcmVwZWF0ZWQgY2FsbHMgbWF5LCBhbHRob3VnaCB0aGUgZWZmZWN0IGlzIGxpbWl0ZWQgYnlcbiAqIGZhY3QgdGhhdCBVUkwncyBnZW5lcmFsbHkgY2FuJ3QgZXhjZWVkIDJrYi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBvcmlnaW5hbCBVUkksIHdoaWNoIG1heSBhbHJlYWR5IGhhdmUgcXVlcnkgZGF0YS5cbiAqIEBwYXJhbSB7Li4uKGdvb2cudXJpLnV0aWxzLlF1ZXJ5QXJyYXl8Z29vZy51cmkudXRpbHMuUXVlcnlWYWx1ZSl9XG4gKiB2YXJfYXJnc1xuICogICAgIEFuIGFycmF5IG9yIGFyZ3VtZW50IGxpc3QgY29uZm9ybWluZyB0byBnb29nLnVyaS51dGlscy5RdWVyeUFycmF5LlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJJIHdpdGggYWxsIHF1ZXJ5IHBhcmFtZXRlcnMgYWRkZWQuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmFwcGVuZFBhcmFtcyA9IGZ1bmN0aW9uKHVyaSwgdmFyX2FyZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgcXVlcnlEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA9PSAyID9cbiAgICAgIGdvb2cudXJpLnV0aWxzLmJ1aWxkUXVlcnlEYXRhKGFyZ3VtZW50c1sxXSwgMCkgOlxuICAgICAgZ29vZy51cmkudXRpbHMuYnVpbGRRdWVyeURhdGEoYXJndW1lbnRzLCAxKTtcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmFwcGVuZFF1ZXJ5RGF0YVRvVXJpXyh1cmksIHF1ZXJ5RGF0YSk7XG59O1xuXG5cbi8qKlxuICogQXBwZW5kcyBxdWVyeSBwYXJhbWV0ZXJzIGZyb20gYSBtYXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgb3JpZ2luYWwgVVJJLCB3aGljaCBtYXkgYWxyZWFkeSBoYXZlIHF1ZXJ5IGRhdGEuXG4gKiBAcGFyYW0geyFPYmplY3Q8Z29vZy51cmkudXRpbHMuUXVlcnlWYWx1ZT59IG1hcCBBbiBvYmplY3Qgd2hlcmUga2V5cyBhcmVcbiAqICAgICBVUkktZW5jb2RlZCBwYXJhbWV0ZXIga2V5cywgYW5kIHRoZSB2YWx1ZXMgYXJlIGFyYml0cmFyeSB0eXBlcyBvciBhcnJheXMuXG4gKiAgICAgS2V5cyB3aXRoIGEgbnVsbCB2YWx1ZSBhcmUgZHJvcHBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5ldyBwYXJhbWV0ZXJzLlxuICovXG5nb29nLnVyaS51dGlscy5hcHBlbmRQYXJhbXNGcm9tTWFwID0gZnVuY3Rpb24odXJpLCBtYXApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgcXVlcnlEYXRhID0gZ29vZy51cmkudXRpbHMuYnVpbGRRdWVyeURhdGFGcm9tTWFwKG1hcCk7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5hcHBlbmRRdWVyeURhdGFUb1VyaV8odXJpLCBxdWVyeURhdGEpO1xufTtcblxuXG4vKipcbiAqIEFwcGVuZHMgYSBzaW5nbGUgVVJJIHBhcmFtZXRlci5cbiAqXG4gKiBSZXBlYXRlZCBjYWxscyB0byB0aGlzIGNhbiBleGhpYml0IHF1YWRyYXRpYyBiZWhhdmlvciBpbiBJRTYgZHVlIHRvIHRoZVxuICogd2F5IHN0cmluZyBhcHBlbmQgd29ya3MsIHRob3VnaCBpdCBzaG91bGQgYmUgbGltaXRlZCBnaXZlbiB0aGUgMmtiIGxpbWl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIG9yaWdpbmFsIFVSSSwgd2hpY2ggbWF5IGFscmVhZHkgaGF2ZSBxdWVyeSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5LCB3aGljaCBtdXN0IGFscmVhZHkgYmUgVVJJIGVuY29kZWQuXG4gKiBAcGFyYW0geyo9fSBvcHRfdmFsdWUgVGhlIHZhbHVlLCB3aGljaCB3aWxsIGJlIHN0cmluZ2l6ZWQgYW5kIGVuY29kZWRcbiAqICAgICAoYXNzdW1lZCBub3QgYWxyZWFkeSB0byBiZSBlbmNvZGVkKS4gIElmIG9taXR0ZWQsIHVuZGVmaW5lZCwgb3IgbnVsbCwgdGhlXG4gKiAgICAga2V5IHdpbGwgYmUgYWRkZWQgYXMgYSB2YWx1ZWxlc3MgcGFyYW1ldGVyLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJJIHdpdGggdGhlIHF1ZXJ5IHBhcmFtZXRlciBhZGRlZC5cbiAqL1xuZ29vZy51cmkudXRpbHMuYXBwZW5kUGFyYW0gPSBmdW5jdGlvbih1cmksIGtleSwgb3B0X3ZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHZhbHVlID0gKG9wdF92YWx1ZSAhPSBudWxsKSA/ICc9JyArIGdvb2cuc3RyaW5nLnVybEVuY29kZShvcHRfdmFsdWUpIDogJyc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5hcHBlbmRRdWVyeURhdGFUb1VyaV8odXJpLCBrZXkgKyB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogRmluZHMgdGhlIG5leHQgaW5zdGFuY2Ugb2YgYSBxdWVyeSBwYXJhbWV0ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gKlxuICogRG9lcyBub3QgaW5zdGFudGlhdGUgYW55IG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIHNlYXJjaC4gIE1heSBjb250YWluIGEgZnJhZ21lbnQgaWRlbnRpZmllclxuICogICAgIGlmIG9wdF9oYXNoSW5kZXggaXMgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SW5kZXggVGhlIGluZGV4IHRvIGJlZ2luIHNlYXJjaGluZyBmb3IgdGhlIGtleSBhdC4gIEFcbiAqICAgICBtYXRjaCBtYXkgYmUgZm91bmQgZXZlbiBpZiB0aGlzIGlzIG9uZSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGFtcGVyc2FuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlFbmNvZGVkIFRoZSBVUkktZW5jb2RlZCBrZXkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGFzaE9yRW5kSW5kZXggSW5kZXggdG8gc3RvcCBsb29raW5nIGF0LiAgSWYgYSBoYXNoXG4gKiAgICAgbWFyayBpcyBwcmVzZW50LCBpdCBzaG91bGQgYmUgaXRzIGluZGV4LCBvdGhlcndpc2UgaXQgc2hvdWxkIGJlIHRoZVxuICogICAgIGxlbmd0aCBvZiB0aGUgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUga2V5J3MgbmFtZSxcbiAqICAgICBpbW1lZGlhdGVseSBhZnRlciBlaXRoZXIgYSBxdWVzdGlvbiBtYXJrIG9yIGEgZG90LlxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuZmluZFBhcmFtXyA9IGZ1bmN0aW9uKFxuICAgIHVyaSwgc3RhcnRJbmRleCwga2V5RW5jb2RlZCwgaGFzaE9yRW5kSW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaW5kZXggPSBzdGFydEluZGV4O1xuICB2YXIga2V5TGVuZ3RoID0ga2V5RW5jb2RlZC5sZW5ndGg7XG5cbiAgLy8gU2VhcmNoIGZvciB0aGUga2V5IGl0c2VsZiBhbmQgcG9zdC1maWx0ZXIgZm9yIHN1cnJvbnVkaW5nIHB1bmN0dWF0aW9uLFxuICAvLyByYXRoZXIgdGhhbiBleHBlbnNpdmVseSBidWlsZGluZyBhIHJlZ2V4cC5cbiAgd2hpbGUgKChpbmRleCA9IHVyaS5pbmRleE9mKGtleUVuY29kZWQsIGluZGV4KSkgPj0gMCAmJlxuICAgICAgICAgaW5kZXggPCBoYXNoT3JFbmRJbmRleCkge1xuICAgIHZhciBwcmVjZWRpbmdDaGFyID0gdXJpLmNoYXJDb2RlQXQoaW5kZXggLSAxKTtcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJlY2VkaW5nIGNoYXJhY3RlciBpcyAnJicgb3IgJz8nLlxuICAgIGlmIChwcmVjZWRpbmdDaGFyID09IGdvb2cudXJpLnV0aWxzLkNoYXJDb2RlXy5BTVBFUlNBTkQgfHxcbiAgICAgICAgcHJlY2VkaW5nQ2hhciA9PSBnb29nLnVyaS51dGlscy5DaGFyQ29kZV8uUVVFU1RJT04pIHtcbiAgICAgIC8vIEVuc3VyZSB0aGUgZm9sbG93aW5nIGNoYXJhY3RlciBpcyAnJicsICc9JywgJyMnLCBvciBOYU5cbiAgICAgIC8vIChlbmQgb2Ygc3RyaW5nKS5cbiAgICAgIHZhciBmb2xsb3dpbmdDaGFyID0gdXJpLmNoYXJDb2RlQXQoaW5kZXggKyBrZXlMZW5ndGgpO1xuICAgICAgaWYgKCFmb2xsb3dpbmdDaGFyIHx8IGZvbGxvd2luZ0NoYXIgPT0gZ29vZy51cmkudXRpbHMuQ2hhckNvZGVfLkVRVUFMIHx8XG4gICAgICAgICAgZm9sbG93aW5nQ2hhciA9PSBnb29nLnVyaS51dGlscy5DaGFyQ29kZV8uQU1QRVJTQU5EIHx8XG4gICAgICAgICAgZm9sbG93aW5nQ2hhciA9PSBnb29nLnVyaS51dGlscy5DaGFyQ29kZV8uSEFTSCkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIGluZGV4ICs9IGtleUxlbmd0aCArIDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIGZvciBmaW5kaW5nIGEgaGFzaCBtYXJrIG9yIGVuZCBvZiBzdHJpbmcuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy51cmkudXRpbHMuaGFzaE9yRW5kUmVfID0gLyN8JC87XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBVUkkgY29udGFpbnMgYSBzcGVjaWZpYyBrZXkuXG4gKlxuICogUGVyZm9ybXMgbm8gb2JqZWN0IGluc3RhbnRpYXRpb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBwcm9jZXNzLiAgTWF5IGNvbnRhaW4gYSBmcmFnbWVudFxuICogICAgIGlkZW50aWZpZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5RW5jb2RlZCBUaGUgVVJJLWVuY29kZWQga2V5LiAgQ2FzZS1zZW5zaXRpdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBrZXkgaXMgcHJlc2VudC5cbiAqL1xuZ29vZy51cmkudXRpbHMuaGFzUGFyYW0gPSBmdW5jdGlvbih1cmksIGtleUVuY29kZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ29vZy51cmkudXRpbHMuZmluZFBhcmFtXyhcbiAgICAgICAgICAgICB1cmksIDAsIGtleUVuY29kZWQsIHVyaS5zZWFyY2goZ29vZy51cmkudXRpbHMuaGFzaE9yRW5kUmVfKSkgPj0gMDtcbn07XG5cblxuLyoqXG4gKiBHZXRzIHRoZSBmaXJzdCB2YWx1ZSBvZiBhIHF1ZXJ5IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBwcm9jZXNzLiAgTWF5IGNvbnRhaW4gYSBmcmFnbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlFbmNvZGVkIFRoZSBVUkktZW5jb2RlZCBrZXkuICBDYXNlLXNlbnNpdGl2ZS5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmaXJzdCB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyIChVUkktZGVjb2RlZCksIG9yIG51bGxcbiAqICAgICBpZiB0aGUgcGFyYW1ldGVyIGlzIG5vdCBmb3VuZC5cbiAqL1xuZ29vZy51cmkudXRpbHMuZ2V0UGFyYW1WYWx1ZSA9IGZ1bmN0aW9uKHVyaSwga2V5RW5jb2RlZCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBoYXNoT3JFbmRJbmRleCA9IHVyaS5zZWFyY2goZ29vZy51cmkudXRpbHMuaGFzaE9yRW5kUmVfKTtcbiAgdmFyIGZvdW5kSW5kZXggPVxuICAgICAgZ29vZy51cmkudXRpbHMuZmluZFBhcmFtXyh1cmksIDAsIGtleUVuY29kZWQsIGhhc2hPckVuZEluZGV4KTtcblxuICBpZiAoZm91bmRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSB1cmkuaW5kZXhPZignJicsIGZvdW5kSW5kZXgpO1xuICAgIGlmIChlbmRQb3NpdGlvbiA8IDAgfHwgZW5kUG9zaXRpb24gPiBoYXNoT3JFbmRJbmRleCkge1xuICAgICAgZW5kUG9zaXRpb24gPSBoYXNoT3JFbmRJbmRleDtcbiAgICB9XG4gICAgLy8gUHJvZ3Jlc3MgZm9ydGggdG8gdGhlIGVuZCBvZiB0aGUgXCJrZXk9XCIgb3IgXCJrZXkmXCIgc3Vic3RyaW5nLlxuICAgIGZvdW5kSW5kZXggKz0ga2V5RW5jb2RlZC5sZW5ndGggKyAxO1xuICAgIC8vIFVzZSBzdWJzdHIsIGJlY2F1c2UgaXQgKHVubGlrZSBzdWJzdHJpbmcpIHdpbGwgcmV0dXJuIGVtcHR5IHN0cmluZ1xuICAgIC8vIGlmIGZvdW5kSW5kZXggPiBlbmRQb3NpdGlvbi5cbiAgICByZXR1cm4gZ29vZy5zdHJpbmcudXJsRGVjb2RlKFxuICAgICAgICB1cmkuc3Vic3RyKGZvdW5kSW5kZXgsIGVuZFBvc2l0aW9uIC0gZm91bmRJbmRleCkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogR2V0cyBhbGwgdmFsdWVzIG9mIGEgcXVlcnkgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgVVJJIHRvIHByb2Nlc3MuICBNYXkgY29udGFpbiBhIGZyYWdtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleUVuY29kZWQgVGhlIFVSSS1lbmNvZGVkIGtleS4gIENhc2Utc2Vuc2l0aXZlLlxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IEFsbCBVUkktZGVjb2RlZCB2YWx1ZXMgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuICogICAgIElmIHRoZSBrZXkgaXMgbm90IGZvdW5kLCB0aGlzIHdpbGwgaGF2ZSBsZW5ndGggMCwgYnV0IG5ldmVyIGJlIG51bGwuXG4gKi9cbmdvb2cudXJpLnV0aWxzLmdldFBhcmFtVmFsdWVzID0gZnVuY3Rpb24odXJpLCBrZXlFbmNvZGVkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGhhc2hPckVuZEluZGV4ID0gdXJpLnNlYXJjaChnb29nLnVyaS51dGlscy5oYXNoT3JFbmRSZV8pO1xuICB2YXIgcG9zaXRpb24gPSAwO1xuICB2YXIgZm91bmRJbmRleDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgoZm91bmRJbmRleCA9IGdvb2cudXJpLnV0aWxzLmZpbmRQYXJhbV8oXG4gICAgICAgICAgICAgIHVyaSwgcG9zaXRpb24sIGtleUVuY29kZWQsIGhhc2hPckVuZEluZGV4KSkgPj0gMCkge1xuICAgIC8vIEZpbmQgd2hlcmUgdGhpcyBwYXJhbWV0ZXIgZW5kcywgZWl0aGVyIHRoZSAnJicgb3IgdGhlIGVuZCBvZiB0aGVcbiAgICAvLyBxdWVyeSBwYXJhbWV0ZXJzLlxuICAgIHBvc2l0aW9uID0gdXJpLmluZGV4T2YoJyYnLCBmb3VuZEluZGV4KTtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gaGFzaE9yRW5kSW5kZXgpIHtcbiAgICAgIHBvc2l0aW9uID0gaGFzaE9yRW5kSW5kZXg7XG4gICAgfVxuXG4gICAgLy8gUHJvZ3Jlc3MgZm9ydGggdG8gdGhlIGVuZCBvZiB0aGUgXCJrZXk9XCIgb3IgXCJrZXkmXCIgc3Vic3RyaW5nLlxuICAgIGZvdW5kSW5kZXggKz0ga2V5RW5jb2RlZC5sZW5ndGggKyAxO1xuICAgIC8vIFVzZSBzdWJzdHIsIGJlY2F1c2UgaXQgKHVubGlrZSBzdWJzdHJpbmcpIHdpbGwgcmV0dXJuIGVtcHR5IHN0cmluZ1xuICAgIC8vIGlmIGZvdW5kSW5kZXggPiBwb3NpdGlvbi5cbiAgICByZXN1bHQucHVzaChcbiAgICAgICAgZ29vZy5zdHJpbmcudXJsRGVjb2RlKHVyaS5zdWJzdHIoZm91bmRJbmRleCwgcG9zaXRpb24gLSBmb3VuZEluZGV4KSkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqXG4gKiBSZWdleHAgdG8gZmluZCB0cmFpbGluZyBxdWVzdGlvbiBtYXJrcyBhbmQgYW1wZXJzYW5kcy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLnVyaS51dGlscy50cmFpbGluZ1F1ZXJ5UHVuY3R1YXRpb25SZV8gPSAvWz8mXSgkfCMpLztcblxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGluc3RhbmNlcyBvZiBhIHF1ZXJ5IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVGhlIFVSSSB0byBwcm9jZXNzLiAgTXVzdCBub3QgY29udGFpbiBhIGZyYWdtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleUVuY29kZWQgVGhlIFVSSS1lbmNvZGVkIGtleS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVSSSB3aXRoIGFsbCBpbnN0YW5jZXMgb2YgdGhlIHBhcmFtZXRlciByZW1vdmVkLlxuICovXG5nb29nLnVyaS51dGlscy5yZW1vdmVQYXJhbSA9IGZ1bmN0aW9uKHVyaSwga2V5RW5jb2RlZCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBoYXNoT3JFbmRJbmRleCA9IHVyaS5zZWFyY2goZ29vZy51cmkudXRpbHMuaGFzaE9yRW5kUmVfKTtcbiAgdmFyIHBvc2l0aW9uID0gMDtcbiAgdmFyIGZvdW5kSW5kZXg7XG4gIHZhciBidWZmZXIgPSBbXTtcblxuICAvLyBMb29rIGZvciBhIHF1ZXJ5IHBhcmFtZXRlci5cbiAgd2hpbGUgKChmb3VuZEluZGV4ID0gZ29vZy51cmkudXRpbHMuZmluZFBhcmFtXyhcbiAgICAgICAgICAgICAgdXJpLCBwb3NpdGlvbiwga2V5RW5jb2RlZCwgaGFzaE9yRW5kSW5kZXgpKSA+PSAwKSB7XG4gICAgLy8gR2V0IHRoZSBwb3J0aW9uIG9mIHRoZSBxdWVyeSBzdHJpbmcgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCB0aGUgP1xuICAgIC8vIG9yICYgc3RhcnRpbmcgdGhlIHBhcmFtZXRlci5cbiAgICBidWZmZXIucHVzaCh1cmkuc3Vic3RyaW5nKHBvc2l0aW9uLCBmb3VuZEluZGV4KSk7XG4gICAgLy8gUHJvZ3Jlc3MgdG8gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICcmJy4gIElmIG5vdCBmb3VuZCwgZ28gdG8gdGhlIGVuZC5cbiAgICAvLyBBdm9pZCBpbmNsdWRpbmcgdGhlIGhhc2ggbWFyay5cbiAgICBwb3NpdGlvbiA9IE1hdGgubWluKFxuICAgICAgICAodXJpLmluZGV4T2YoJyYnLCBmb3VuZEluZGV4KSArIDEpIHx8IGhhc2hPckVuZEluZGV4LCBoYXNoT3JFbmRJbmRleCk7XG4gIH1cblxuICAvLyBBcHBlbmQgZXZlcnl0aGluZyB0aGF0IGlzIHJlbWFpbmluZy5cbiAgYnVmZmVyLnB1c2godXJpLnN1YnN0cihwb3NpdGlvbikpO1xuXG4gIC8vIEpvaW4gdGhlIGJ1ZmZlciwgYW5kIHJlbW92ZSB0cmFpbGluZyBwdW5jdHVhdGlvbiB0aGF0IHJlbWFpbnMuXG4gIHJldHVybiBidWZmZXIuam9pbignJykucmVwbGFjZShcbiAgICAgIGdvb2cudXJpLnV0aWxzLnRyYWlsaW5nUXVlcnlQdW5jdHVhdGlvblJlXywgJyQxJyk7XG59O1xuXG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIGV4aXN0aW5nIGRlZmluaXRpb25zIG9mIGEgcGFyYW1ldGVyIHdpdGggYSBzaW5nbGUgZGVmaW5pdGlvbi5cbiAqXG4gKiBSZXBlYXRlZCBjYWxscyB0byB0aGlzIGNhbiBleGhpYml0IHF1YWRyYXRpYyBiZWhhdmlvciBkdWUgdG8gdGhlIG5lZWQgdG9cbiAqIGZpbmQgZXhpc3RpbmcgaW5zdGFuY2VzIGFuZCByZWNvbnN0cnVjdCB0aGUgc3RyaW5nLCB0aG91Z2ggaXQgc2hvdWxkIGJlXG4gKiBsaW1pdGVkIGdpdmVuIHRoZSAya2IgbGltaXQuICBDb25zaWRlciB1c2luZyBhcHBlbmRQYXJhbXMgb3Igc2V0UGFyYW1zRnJvbU1hcFxuICogdG8gdXBkYXRlIG11bHRpcGxlIHBhcmFtZXRlcnMgaW4gYnVsay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBvcmlnaW5hbCBVUkksIHdoaWNoIG1heSBhbHJlYWR5IGhhdmUgcXVlcnkgZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlFbmNvZGVkIFRoZSBrZXksIHdoaWNoIG11c3QgYWxyZWFkeSBiZSBVUkkgZW5jb2RlZC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLCB3aGljaCB3aWxsIGJlIHN0cmluZ2l6ZWQgYW5kIGVuY29kZWQgKGFzc3VtZWRcbiAqICAgICBub3QgYWxyZWFkeSB0byBiZSBlbmNvZGVkKS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVSSSB3aXRoIHRoZSBxdWVyeSBwYXJhbWV0ZXIgYWRkZWQuXG4gKi9cbmdvb2cudXJpLnV0aWxzLnNldFBhcmFtID0gZnVuY3Rpb24odXJpLCBrZXlFbmNvZGVkLCB2YWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5hcHBlbmRQYXJhbShcbiAgICAgIGdvb2cudXJpLnV0aWxzLnJlbW92ZVBhcmFtKHVyaSwga2V5RW5jb2RlZCksIGtleUVuY29kZWQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBFZmZlY2llbnRseSBzZXQgb3IgcmVtb3ZlIG11bHRpcGxlIHF1ZXJ5IHBhcmFtZXRlcnMgaW4gYSBVUkkuIE9yZGVyIG9mXG4gKiB1bmNoYW5nZWQgcGFyYW1ldGVycyB3aWxsIG5vdCBiZSBtb2RpZmllZCwgYWxsIHVwZGF0ZWQgcGFyYW1ldGVycyB3aWxsIGJlXG4gKiBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBxdWVyeS4gUGFyYW1zIHdpdGggdmFsdWVzIG9mIG51bGwgb3IgdW5kZWZpbmVkIGFyZVxuICogcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGdvb2cudXJpLnV0aWxzLlF1ZXJ5VmFsdWU+fSBwYXJhbXMgQSBsaXN0IG9mXG4gKiAgICAgcGFyYW1ldGVycyB0byB1cGRhdGUuIElmIG51bGwgb3IgdW5kZWZpbmVkLCB0aGUgcGFyYW0gd2lsbCBiZSByZW1vdmVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiB1cGRhdGVkIFVSSSB3aGVyZSB0aGUgcXVlcnkgZGF0YSBoYXMgYmVlbiB1cGRhdGVkIHdpdGhcbiAqICAgICB0aGUgcGFyYW1zLlxuICovXG5nb29nLnVyaS51dGlscy5zZXRQYXJhbXNGcm9tTWFwID0gZnVuY3Rpb24odXJpLCBwYXJhbXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgcGFydHMgPSBnb29nLnVyaS51dGlscy5zcGxpdFF1ZXJ5RGF0YV8odXJpKTtcbiAgdmFyIHF1ZXJ5RGF0YSA9IHBhcnRzWzFdO1xuICB2YXIgYnVmZmVyID0gW107XG4gIGlmIChxdWVyeURhdGEpIHtcbiAgICBxdWVyeURhdGEuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIHZhciBpbmRleE9mRXF1YWxzID0gcGFpci5pbmRleE9mKCc9Jyk7XG4gICAgICB2YXIgbmFtZSA9IGluZGV4T2ZFcXVhbHMgPj0gMCA/IHBhaXIuc3Vic3RyKDAsIGluZGV4T2ZFcXVhbHMpIDogcGFpcjtcbiAgICAgIGlmICghcGFyYW1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGJ1ZmZlci5wdXNoKHBhaXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHBhcnRzWzFdID0gZ29vZy51cmkudXRpbHMuYXBwZW5kUXVlcnlEYXRhXyhcbiAgICAgIGJ1ZmZlci5qb2luKCcmJyksIGdvb2cudXJpLnV0aWxzLmJ1aWxkUXVlcnlEYXRhRnJvbU1hcChwYXJhbXMpKTtcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmpvaW5RdWVyeURhdGFfKHBhcnRzKTtcbn07XG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBVUkkgcGF0aCB1c2luZyBhIGdpdmVuIFVSSSBhbmQgYSBwYXRoIHdpdGggY2hlY2tzIHRvXG4gKiBwcmV2ZW50IGNvbnNlY3V0aXZlIFwiLy9cIi4gVGhlIGJhc2VVcmkgcGFzc2VkIGluIG11c3Qgbm90IGNvbnRhaW5cbiAqIHF1ZXJ5IG9yIGZyYWdtZW50IGlkZW50aWZpZXJzLiBUaGUgcGF0aCB0byBhcHBlbmQgbWF5IG5vdCBjb250YWluIHF1ZXJ5IG9yXG4gKiBmcmFnbWVudCBpZGVudGlmaWVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVyaSBVUkkgdG8gdXNlIGFzIHRoZSBiYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBhcHBlbmQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFVwZGF0ZWQgVVJJLlxuICovXG5nb29nLnVyaS51dGlscy5hcHBlbmRQYXRoID0gZnVuY3Rpb24oYmFzZVVyaSwgcGF0aCkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cudXJpLnV0aWxzLmFzc2VydE5vRnJhZ21lbnRzT3JRdWVyaWVzXyhiYXNlVXJpKTtcblxuICAvLyBSZW1vdmUgYW55IHRyYWlsaW5nICcvJ1xuICBpZiAoZ29vZy5zdHJpbmcuZW5kc1dpdGgoYmFzZVVyaSwgJy8nKSkge1xuICAgIGJhc2VVcmkgPSBiYXNlVXJpLnN1YnN0cigwLCBiYXNlVXJpLmxlbmd0aCAtIDEpO1xuICB9XG4gIC8vIFJlbW92ZSBhbnkgbGVhZGluZyAnLydcbiAgaWYgKGdvb2cuc3RyaW5nLnN0YXJ0c1dpdGgocGF0aCwgJy8nKSkge1xuICAgIHBhdGggPSBwYXRoLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gJycgKyBiYXNlVXJpICsgJy8nICsgcGF0aDtcbn07XG5cblxuLyoqXG4gKiBSZXBsYWNlcyB0aGUgcGF0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgVVJJIHRvIHVzZSBhcyB0aGUgYmFzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIE5ldyBwYXRoLlxuICogQHJldHVybiB7c3RyaW5nfSBVcGRhdGVkIFVSSS5cbiAqL1xuZ29vZy51cmkudXRpbHMuc2V0UGF0aCA9IGZ1bmN0aW9uKHVyaSwgcGF0aCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIEFkZCBhbnkgbWlzc2luZyAnLycuXG4gIGlmICghZ29vZy5zdHJpbmcuc3RhcnRzV2l0aChwYXRoLCAnLycpKSB7XG4gICAgcGF0aCA9ICcvJyArIHBhdGg7XG4gIH1cbiAgdmFyIHBhcnRzID0gZ29vZy51cmkudXRpbHMuc3BsaXQodXJpKTtcbiAgcmV0dXJuIGdvb2cudXJpLnV0aWxzLmJ1aWxkRnJvbUVuY29kZWRQYXJ0cyhcbiAgICAgIHBhcnRzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlNDSEVNRV0sXG4gICAgICBwYXJ0c1tnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5VU0VSX0lORk9dLFxuICAgICAgcGFydHNbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguRE9NQUlOXSxcbiAgICAgIHBhcnRzW2dvb2cudXJpLnV0aWxzLkNvbXBvbmVudEluZGV4LlBPUlRdLCBwYXRoLFxuICAgICAgcGFydHNbZ29vZy51cmkudXRpbHMuQ29tcG9uZW50SW5kZXguUVVFUllfREFUQV0sXG4gICAgICBwYXJ0c1tnb29nLnVyaS51dGlscy5Db21wb25lbnRJbmRleC5GUkFHTUVOVF0pO1xufTtcblxuXG4vKipcbiAqIFN0YW5kYXJkIHN1cHBvcnRlZCBxdWVyeSBwYXJhbWV0ZXJzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZ29vZy51cmkudXRpbHMuU3RhbmRhcmRRdWVyeVBhcmFtID0ge1xuXG4gIC8qKiBVbnVzZWQgcGFyYW1ldGVyIGZvciB1bmlxdWUtaWZ5aW5nLiAqL1xuICBSQU5ET006ICd6eCdcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB6eCBwYXJhbWV0ZXIgb2YgYSBVUkkgdG8gYSByYW5kb20gdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIEFueSBVUkkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoYXQgVVJJIHdpdGggdGhlIFwienhcIiBwYXJhbWV0ZXIgYWRkZWQgb3IgcmVwbGFjZWQgdG9cbiAqICAgICBjb250YWluIGEgcmFuZG9tIHN0cmluZy5cbiAqL1xuZ29vZy51cmkudXRpbHMubWFrZVVuaXF1ZSA9IGZ1bmN0aW9uKHVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLnVyaS51dGlscy5zZXRQYXJhbShcbiAgICAgIHVyaSwgZ29vZy51cmkudXRpbHMuU3RhbmRhcmRRdWVyeVBhcmFtLlJBTkRPTSxcbiAgICAgIGdvb2cuc3RyaW5nLmdldFJhbmRvbVN0cmluZygpKTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgSW50ZXJmYWNlIGFuZCBzaGFyZWQgZGF0YSBzdHJ1Y3R1cmVzIGZvciBpbXBsZW1lbnRpbmdcbiAqIGRpZmZlcmVudCB3aXJlIHByb3RvY29sIHZlcnNpb25zLlxuICovXG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlJyk7XG5nb29nLnByb3ZpZGUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlLlF1ZXVlZE1hcCcpO1xuXG5cblxuZ29vZy5yZXF1aXJlKCdnb29nLmNvbGxlY3Rpb25zLm1hcHMnKTtcblxuXG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBjbGFzcy5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldpcmUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge31cbn07XG5cblxuLyoqXG4gKiBUaGUgbGF0ZXN0IHByb3RvY29sIHZlcnNpb24gdGhhdCB0aGlzIGNsYXNzIHN1cHBvcnRzLiBXZSByZXF1ZXN0IHRoaXMgdmVyc2lvblxuICogZnJvbSB0aGUgc2VydmVyIHdoZW4gb3BlbmluZyB0aGUgY29ubmVjdGlvbi4gU2hvdWxkIG1hdGNoXG4gKiBMQVRFU1RfQ0hBTk5FTF9WRVJTSU9OIG9uIHRoZSBzZXJ2ZXIgY29kZS5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlLkxBVEVTVF9DSEFOTkVMX1ZFUlNJT04gPSA4O1xuXG5cbi8qKlxuICogVGhlIEpTT04gZmllbGQga2V5IGZvciB0aGUgcmF3IGRhdGEgd3JhcHBlciBvYmplY3QuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5SQVdfREFUQV9LRVkgPSAnX19kYXRhX18nO1xuXG5cblxuLyoqXG4gKiBTaW1wbGUgY29udGFpbmVyIGNsYXNzIGZvciBhIChtYXBJZCwgbWFwKSBwYWlyLlxuICovXG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5RdWV1ZWRNYXAgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFwSWQgVGhlIGlkIGZvciB0aGlzIG1hcC5cbiAgICogQHBhcmFtIHshT2JqZWN0fCFnb29nLmNvbGxlY3Rpb25zLm1hcHMuTWFwTGlrZX0gbWFwIFRoZSBtYXAgaXRzZWxmLlxuICAgKiBAcGFyYW0geyFPYmplY3Q9fSBvcHRfY29udGV4dCBUaGUgY29udGV4dCBhc3NvY2lhdGVkIHdpdGggdGhlIG1hcC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG1hcElkLCBtYXAsIG9wdF9jb250ZXh0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBmb3IgdGhpcyBtYXAuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm1hcElkID0gbWFwSWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFwIGl0c2VsZi5cbiAgICAgKiBAdHlwZSB7IU9iamVjdHwhZ29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2V9XG4gICAgICovXG4gICAgdGhpcy5tYXAgPSBtYXA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udGV4dCBmb3IgdGhlIG1hcC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuY29udGV4dCA9IG9wdF9jb250ZXh0IHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfHVuZGVmaW5lZH0gdGhlIHNpemUgb2YgdGhlIHJhdyBKU09OIG1lc3NhZ2Ugb3JcbiAgICogdW5kZWZpbmVkIGlmIHRoZSBtZXNzYWdlIGlzIG5vdCBlbmNvZGVkIGFzIGEgcmF3IEpTT04gbWVzc2FnZVxuICAgKi9cbiAgZ2V0UmF3RGF0YVNpemUoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmIChnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5SQVdfREFUQV9LRVkgaW4gdGhpcy5tYXApIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1hcFtnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZS5SQVdfREFUQV9LRVldO1xuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZGF0YS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERlZmluZXMgYSBjbGFzcyBmb3IgcGFyc2luZyBKU09OIHVzaW5nIHRoZSBicm93c2VyJ3MgYnVpbHQgaW5cbiAqIEpTT04gbGlicmFyeS5cbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cuanNvbi5OYXRpdmVKc29uUHJvY2Vzc29yJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuanNvbi5Qcm9jZXNzb3InKTtcblxuXG5cbi8qKlxuICogQSBjbGFzcyB0aGF0IHBhcnNlcyBhbmQgc3RyaW5naWZpZXMgSlNPTiB1c2luZyB0aGUgYnJvd3NlcidzIGJ1aWx0LWluIEpTT05cbiAqIGxpYnJhcnksIGlmIGl0IGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG5hdGl2ZSBKU09OIGFwaSBoYXMgc3VidGxlIGRpZmZlcmVuY2VzIGFjcm9zcyBicm93c2Vycywgc29cbiAqIHVzZSB0aGlzIGltcGxlbWVudGF0aW9uIHdpdGggY2FyZS4gIFNlZSBqc29uX3Rlc3QjYXNzZXJ0U2VyaWFsaXplXG4gKiBmb3IgZGV0YWlscyBvbiB0aGUgZGlmZmVyZW5jZXMgZnJvbSBnb29nLmpzb24uXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzaWduZmljYW50bHkgZmFzdGVyIHRoYW4gZ29vZy5qc29uLCBhdCBsZWFzdCBvblxuICogQ2hyb21lLiAgU2VlIGpzb25fcGVyZi5odG1sIGZvciBhIHBlcmYgdGVzdCBzaG93aW5nIHRoZSBkaWZmZXJlbmNlLlxuICpcbiAqIEBwYXJhbSB7P2dvb2cuanNvbi5SZXBsYWNlcj19IG9wdF9yZXBsYWNlciBBbiBvcHRpb25hbCByZXBsYWNlciB0byB1c2UgZHVyaW5nXG4gKiAgICAgc2VyaWFsaXphdGlvbi5cbiAqIEBwYXJhbSB7P2dvb2cuanNvbi5SZXZpdmVyPX0gb3B0X3Jldml2ZXIgQW4gb3B0aW9uYWwgcmV2aXZlciB0byB1c2UgZHVyaW5nXG4gKiAgICAgcGFyc2luZy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMge2dvb2cuanNvbi5Qcm9jZXNzb3J9XG4gKiBAZmluYWxcbiAqL1xuZ29vZy5qc29uLk5hdGl2ZUpzb25Qcm9jZXNzb3IgPSBmdW5jdGlvbihvcHRfcmVwbGFjZXIsIG9wdF9yZXZpdmVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5hc3NlcnRzLmFzc2VydChnb29nLmdsb2JhbFsnSlNPTiddICE9PSB1bmRlZmluZWQsICdKU09OIG5vdCBkZWZpbmVkJyk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtnb29nLmpzb24uUmVwbGFjZXJ8bnVsbHx1bmRlZmluZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnJlcGxhY2VyXyA9IG9wdF9yZXBsYWNlcjtcblxuICAvKipcbiAgICogQHR5cGUge2dvb2cuanNvbi5SZXZpdmVyfG51bGx8dW5kZWZpbmVkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZXZpdmVyXyA9IG9wdF9yZXZpdmVyO1xufTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLmpzb24uTmF0aXZlSnNvblByb2Nlc3Nvci5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cuZ2xvYmFsWydKU09OJ10uc3RyaW5naWZ5KG9iamVjdCwgdGhpcy5yZXBsYWNlcl8pO1xufTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLmpzb24uTmF0aXZlSnNvblByb2Nlc3Nvci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdvb2cuZ2xvYmFsWydKU09OJ10ucGFyc2UocywgdGhpcy5yZXZpdmVyXyk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdHkgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBuZXR3b3JraW5nLCBzdWNoIGFzXG4gKiB0ZXN0aW5nIG5ldHdvcmsgY29ubmVjdGl2aXR5LlxuICpcbiAqL1xuXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLm5ldFV0aWxzJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5VcmknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxEZWJ1ZycpO1xuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuY29uc3QgbmV0VXRpbHMgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwubmV0VXRpbHM7XG5jb25zdCBXZWJDaGFubmVsRGVidWcgPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbERlYnVnO1xuXG5cbi8qKlxuICogRGVmYXVsdCB0aW1lb3V0IHRvIGFsbG93IGZvciBVUkkgcGluZ3MuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5uZXRVdGlscy5ORVRXT1JLX1RJTUVPVVQgPSAxMDAwMDtcblxuXG4vKipcbiAqIFBpbmdzIHRoZSBuZXR3b3JrIHdpdGggYW4gaW1hZ2UgVVJJIHRvIGNoZWNrIGlmIGFuIGVycm9yIGlzIGEgc2VydmVyIGVycm9yXG4gKiBvciB1c2VyJ3MgbmV0d29yayBlcnJvci5cbiAqXG4gKiBUaGUgY2FsbGVyIG5lZWRzIHRvIGFkZCBhICdyYW5kJyBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlIHRoZSByZXNwb25zZSBpc1xuICogbm90IGZ1bGZpbGxlZCBieSBicm93c2VyIGNhY2hlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYm9vbGVhbil9IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjYWxsIGJhY2sgd2l0aCByZXN1bHRzLlxuICogQHBhcmFtIHtnb29nLlVyaT19IG9wdF9pbWFnZVVyaSBUaGUgVVJJIChvZiBhbiBpbWFnZSkgdG8gdXNlIGZvciB0aGUgbmV0d29ya1xuICogICAgIHRlc3QuXG4gKi9cbm5ldFV0aWxzLnRlc3ROZXR3b3JrID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9wdF9pbWFnZVVyaSkge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCB1cmkgPSBvcHRfaW1hZ2VVcmk7XG4gIGlmICghdXJpKSB7XG4gICAgLy8gZGVmYXVsdCBnb29nbGUuY29tIGltYWdlXG4gICAgdXJpID0gbmV3IGdvb2cuVXJpKCcvL3d3dy5nb29nbGUuY29tL2ltYWdlcy9jbGVhcmRvdC5naWYnKTtcblxuICAgIGlmICghKGdvb2cuZ2xvYmFsLmxvY2F0aW9uICYmIGdvb2cuZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sID09ICdodHRwJykpIHtcbiAgICAgIHVyaS5zZXRTY2hlbWUoJ2h0dHBzJyk7ICAvLyBlLmcuIGNocm9tZS1leHRlbnNpb25cbiAgICB9XG4gICAgdXJpLm1ha2VVbmlxdWUoKTtcbiAgfVxuXG4gIG5ldFV0aWxzLnRlc3RMb2FkSW1hZ2UodXJpLnRvU3RyaW5nKCksIG5ldFV0aWxzLk5FVFdPUktfVElNRU9VVCwgY2FsbGJhY2spO1xufTtcblxuXG4vKipcbiAqIFRlc3QgbG9hZGluZyB0aGUgZ2l2ZW4gaW1hZ2UsIHJldHJ5aW5nIGlmIG5lY2Vzc2FyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIHRvIHRoZSBpbWFnZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IE1pbGxpc2Vjb25kcyBiZWZvcmUgZ2l2aW5nIHVwLlxuICogQHBhcmFtIHtmdW5jdGlvbihib29sZWFuKX0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gY2FsbCB3aXRoIHJlc3VsdHMuXG4gKiBAcGFyYW0ge251bWJlcn0gcmV0cmllcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJldHJ5LlxuICogQHBhcmFtIHshV2ViQ2hhbm5lbERlYnVnfSBjaGFubmVsRGVidWcgVGhlIGRlYnVnIG9iamVjdFxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfcGF1c2VCZXR3ZWVuUmV0cmllc01TIE9wdGlvbmFsIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqICAgICBiZXR3ZWVuIHJldHJpZXMgLSBkZWZhdWx0cyB0byAwLlxuICovXG5uZXRVdGlscy50ZXN0TG9hZEltYWdlV2l0aFJldHJpZXMgPSBmdW5jdGlvbihcbiAgICB1cmwsIHRpbWVvdXQsIGNhbGxiYWNrLCByZXRyaWVzLCBjaGFubmVsRGVidWcsIG9wdF9wYXVzZUJldHdlZW5SZXRyaWVzTVMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjaGFubmVsRGVidWcuZGVidWcoJ1Rlc3RMb2FkSW1hZ2VXaXRoUmV0cmllczogJyArIG9wdF9wYXVzZUJldHdlZW5SZXRyaWVzTVMpO1xuICBpZiAocmV0cmllcyA9PSAwKSB7XG4gICAgLy8gbm8gbW9yZSByZXRyaWVzLCBnaXZlIHVwXG4gICAgY2FsbGJhY2soZmFsc2UpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHBhdXNlQmV0d2VlblJldHJpZXMgPSBvcHRfcGF1c2VCZXR3ZWVuUmV0cmllc01TIHx8IDA7XG4gIHJldHJpZXMtLTtcbiAgbmV0VXRpbHMudGVzdExvYWRJbWFnZSh1cmwsIHRpbWVvdXQsIGZ1bmN0aW9uKHN1Y2NlZWRlZCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAoc3VjY2VlZGVkKSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdHJ5IGFnYWluXG4gICAgICBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIG5ldFV0aWxzLnRlc3RMb2FkSW1hZ2VXaXRoUmV0cmllcyhcbiAgICAgICAgICAgIHVybCwgdGltZW91dCwgY2FsbGJhY2ssIHJldHJpZXMsIGNoYW5uZWxEZWJ1ZywgcGF1c2VCZXR3ZWVuUmV0cmllcyk7XG4gICAgICB9LCBwYXVzZUJldHdlZW5SZXRyaWVzKTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIFRlc3QgbG9hZGluZyB0aGUgZ2l2ZW4gaW1hZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byB0aGUgaW1hZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBNaWxsaXNlY29uZHMgYmVmb3JlIGdpdmluZyB1cC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYm9vbGVhbil9IGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGNhbGwgd2l0aCByZXN1bHRzLlxuICogQHN1cHByZXNzIHtzdHJpY3RNaXNzaW5nUHJvcGVydGllc30gUGFydCBvZiB0aGUgZ28vc3RyaWN0X3dhcm5pbmdzX21pZ3JhdGlvblxuICovXG5uZXRVdGlscy50ZXN0TG9hZEltYWdlID0gZnVuY3Rpb24odXJsLCB0aW1lb3V0LCBjYWxsYmFjaykge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IGNoYW5uZWxEZWJ1ZyA9IG5ldyBXZWJDaGFubmVsRGVidWcoKTtcbiAgY2hhbm5lbERlYnVnLmRlYnVnKCdUZXN0TG9hZEltYWdlOiBsb2FkaW5nICcgKyB1cmwpO1xuICBpZiAoZ29vZy5nbG9iYWwuSW1hZ2UpIHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gZ29vZy5wYXJ0aWFsKFxuICAgICAgICBuZXRVdGlscy5pbWFnZUNhbGxiYWNrXywgY2hhbm5lbERlYnVnLCBpbWcsICdUZXN0TG9hZEltYWdlOiBsb2FkZWQnLFxuICAgICAgICB0cnVlLCBjYWxsYmFjayk7XG4gICAgaW1nLm9uZXJyb3IgPSBnb29nLnBhcnRpYWwoXG4gICAgICAgIG5ldFV0aWxzLmltYWdlQ2FsbGJhY2tfLCBjaGFubmVsRGVidWcsIGltZywgJ1Rlc3RMb2FkSW1hZ2U6IGVycm9yJyxcbiAgICAgICAgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICBpbWcub25hYm9ydCA9IGdvb2cucGFydGlhbChcbiAgICAgICAgbmV0VXRpbHMuaW1hZ2VDYWxsYmFja18sIGNoYW5uZWxEZWJ1ZywgaW1nLCAnVGVzdExvYWRJbWFnZTogYWJvcnQnLFxuICAgICAgICBmYWxzZSwgY2FsbGJhY2spO1xuICAgIGltZy5vbnRpbWVvdXQgPSBnb29nLnBhcnRpYWwoXG4gICAgICAgIG5ldFV0aWxzLmltYWdlQ2FsbGJhY2tfLCBjaGFubmVsRGVidWcsIGltZywgJ1Rlc3RMb2FkSW1hZ2U6IHRpbWVvdXQnLFxuICAgICAgICBmYWxzZSwgY2FsbGJhY2spO1xuXG4gICAgZ29vZy5nbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGlmIChpbWcub250aW1lb3V0KSB7XG4gICAgICAgIGltZy5vbnRpbWVvdXQoKTtcbiAgICAgIH1cbiAgICB9LCB0aW1lb3V0KTtcbiAgICBpbWcuc3JjID0gdXJsO1xuICB9IGVsc2Uge1xuICAgIC8vIGxvZyBFUlJPUl9PVEhFUiBmcm9tIGVudmlyb25lbWVudHMgd2hlcmUgSW1hZ2UgaXMgbm90IHN1cHBvcnRlZFxuICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFdyYXAgdGhlIGltYWdlIGNhbGxiYWNrIHdpdGggZGVidWcgYW5kIGNsZWFudXAgbG9naWMuXG4gKiBAcGFyYW0geyFXZWJDaGFubmVsRGVidWd9IGNoYW5uZWxEZWJ1ZyBUaGUgV2ViQ2hhbm5lbERlYnVnIG9iamVjdC5cbiAqIEBwYXJhbSB7IUltYWdlfSBpbWcgVGhlIGltYWdlIGVsZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVidWdUZXh0IFRoZSBkZWJ1ZyB0ZXh0LlxuICogQHBhcmFtIHtib29sZWFufSByZXN1bHQgVGhlIHJlc3VsdCBvZiBpbWFnZSBsb2FkaW5nLlxuICogQHBhcmFtIHtmdW5jdGlvbihib29sZWFuKX0gY2FsbGJhY2sgVGhlIGltYWdlIGNhbGxiYWNrLlxuICogQHByaXZhdGVcbiAqL1xubmV0VXRpbHMuaW1hZ2VDYWxsYmFja18gPSBmdW5jdGlvbihcbiAgICBjaGFubmVsRGVidWcsIGltZywgZGVidWdUZXh0LCByZXN1bHQsIGNhbGxiYWNrKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdHJ5IHtcbiAgICBjaGFubmVsRGVidWcuZGVidWcoZGVidWdUZXh0KTtcbiAgICBuZXRVdGlscy5jbGVhckltYWdlQ2FsbGJhY2tzXyhpbWcpO1xuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjaGFubmVsRGVidWcuZHVtcEV4Y2VwdGlvbihlKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENsZWFycyBoYW5kbGVycyB0byBhdm9pZCBtZW1vcnkgbGVha3MuXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWcgVGhlIGltYWdlIHRvIGNsZWFyIGhhbmRsZXJzIGZyb20uXG4gKiBAcHJpdmF0ZVxuICogQHN1cHByZXNzIHtzdHJpY3RNaXNzaW5nUHJvcGVydGllc30gUGFydCBvZiB0aGUgZ28vc3RyaWN0X3dhcm5pbmdzX21pZ3JhdGlvblxuICovXG5uZXRVdGlscy5jbGVhckltYWdlQ2FsbGJhY2tzXyA9IGZ1bmN0aW9uKGltZykge1xuICAndXNlIHN0cmljdCc7XG4gIGltZy5vbmxvYWQgPSBudWxsO1xuICBpbWcub25lcnJvciA9IG51bGw7XG4gIGltZy5vbmFib3J0ID0gbnVsbDtcbiAgaW1nLm9udGltZW91dCA9IG51bGw7XG59O1xufSk7ICAvLyBnb29nLnNjb3BlXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5nb29nLnByb3ZpZGUoJ2dvb2cubmV0LkZldGNoWG1sSHR0cCcpO1xuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuZnVuY3Rpb25zJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubG9nJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0Llhockxpa2UnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuWG1sSHR0cEZhY3RvcnknKTtcblxuXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQHR5cGUgeyFXb3JrZXJHbG9iYWxTY29wZXx1bmRlZmluZWR9IFRoZSBTZXJ2aWNlIFdvcmtlciBnbG9iYWwgc2NvcGUuXG4gICAqL1xuICB0aGlzLndvcmtlcjtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSBXaGV0aGVyIHRvIHN0b3JlIHRoZSBGZXRjaFhtbEh0dHAgcmVzcG9uc2UgYXMgYW5cbiAgICogYXJyYXkgb2YgVWludDhBcnJheXMuICBJZiB0aGlzIGlzIHRydWUgdGhlbiB0aGUgJ3Jlc3BvbnNlVHlwZScgYXR0cmlidXRlXG4gICAqIG11c3QgYmUgZW1wdHkuXG4gICAqL1xuICB0aGlzLnN0cmVhbUJpbmFyeUNodW5rcztcbn07XG5cblxuXG4vKipcbiAqIEZhY3RvcnkgZm9yIGNyZWF0aW5nIFhociBvYmplY3RzIHRoYXQgdXNlcyB0aGUgbmF0aXZlIGZldGNoKCkgbWV0aG9kLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSVxuICogQHBhcmFtIHshZ29vZy5uZXQuRmV0Y2hYbWxIdHRwRmFjdG9yeU9wdGlvbnN9IG9wdHNcbiAqIEBleHRlbmRzIHtnb29nLm5ldC5YbWxIdHRwRmFjdG9yeX1cbiAqIEBzdHJ1Y3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5ID0gZnVuY3Rpb24ob3B0cykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubmV0LkZldGNoWG1sSHR0cEZhY3RvcnkuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InKTtcblxuICAvKiogQHByaXZhdGUgQGZpbmFsIHs/V29ya2VyR2xvYmFsU2NvcGV9ICovXG4gIHRoaXMud29ya2VyXyA9IG9wdHMud29ya2VyIHx8IG51bGw7XG5cbiAgLyoqIEBwcml2YXRlIEBmaW5hbCB7Ym9vbGVhbn0gKi9cbiAgdGhpcy5zdHJlYW1CaW5hcnlDaHVua3NfID0gb3B0cy5zdHJlYW1CaW5hcnlDaHVua3MgfHwgZmFsc2U7XG5cbiAgLyoqIEBwcml2YXRlIHshUmVxdWVzdENyZWRlbnRpYWxzfHVuZGVmaW5lZH0gKi9cbiAgdGhpcy5jcmVkZW50aWFsc01vZGVfID0gdW5kZWZpbmVkO1xuXG4gIC8qKiBAcHJpdmF0ZSB7IVJlcXVlc3RDYWNoZXx1bmRlZmluZWR9ICovXG4gIHRoaXMuY2FjaGVNb2RlXyA9IHVuZGVmaW5lZDtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cubmV0LkZldGNoWG1sSHR0cEZhY3RvcnksIGdvb2cubmV0LlhtbEh0dHBGYWN0b3J5KTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IGluc3RhbmNlID1cbiAgICAgIG5ldyBnb29nLm5ldC5GZXRjaFhtbEh0dHAodGhpcy53b3JrZXJfLCB0aGlzLnN0cmVhbUJpbmFyeUNodW5rc18pO1xuICBpZiAodGhpcy5jcmVkZW50aWFsc01vZGVfKSB7XG4gICAgaW5zdGFuY2Uuc2V0Q3JlZGVudGlhbHNNb2RlKHRoaXMuY3JlZGVudGlhbHNNb2RlXyk7XG4gIH1cbiAgaWYgKHRoaXMuY2FjaGVNb2RlXykge1xuICAgIGluc3RhbmNlLnNldENhY2hlTW9kZSh0aGlzLmNhY2hlTW9kZV8pO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuaW50ZXJuYWxHZXRPcHRpb25zID1cbiAgICBnb29nLmZ1bmN0aW9ucy5jb25zdGFudCh7fSk7XG5cblxuLyoqXG4gKiBAcGFyYW0geyFSZXF1ZXN0Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzTW9kZSBUaGUgY3JlZGVudGlhbHMgbW9kZSBvZiB0aGVcbiAqICAgICBTZXJ2aWNlIFdvcmtlciBmZXRjaC5cbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuc2V0Q3JlZGVudGlhbHNNb2RlID0gZnVuY3Rpb24oXG4gICAgY3JlZGVudGlhbHNNb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jcmVkZW50aWFsc01vZGVfID0gY3JlZGVudGlhbHNNb2RlO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IVJlcXVlc3RDYWNoZX0gY2FjaGVNb2RlIFRoZSBjYWNoZSBtb2RlIG9mIHRoZSBTZXJ2aWNlIFdvcmtlciBmZXRjaC5cbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwRmFjdG9yeS5wcm90b3R5cGUuc2V0Q2FjaGVNb2RlID0gZnVuY3Rpb24oY2FjaGVNb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jYWNoZU1vZGVfID0gY2FjaGVNb2RlO1xufTtcblxuXG5cbi8qKlxuICogRmV0Y2hYbWxIdHRwIG9iamVjdCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7P1dvcmtlckdsb2JhbFNjb3BlfSB3b3JrZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyZWFtQmluYXJ5Q2h1bmtzXG4gKiBAZXh0ZW5kcyB7Z29vZy5ldmVudHMuRXZlbnRUYXJnZXR9XG4gKiBAaW1wbGVtZW50cyB7Z29vZy5uZXQuWGhyTGlrZX1cbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHAgPSBmdW5jdGlvbih3b3JrZXIsIHN0cmVhbUJpbmFyeUNodW5rcykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubmV0LkZldGNoWG1sSHR0cC5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicpO1xuXG4gIC8qKiBAcHJpdmF0ZSBAZmluYWwgez9Xb3JrZXJHbG9iYWxTY29wZX0gKi9cbiAgdGhpcy53b3JrZXJfID0gd29ya2VyO1xuXG4gIC8qKiBAcHJpdmF0ZSBAZmluYWwge2Jvb2xlYW59ICovXG4gIHRoaXMuc3RyZWFtQmluYXJ5Q2h1bmtzXyA9IHN0cmVhbUJpbmFyeUNodW5rcztcblxuICAvKiogQHByaXZhdGUge1JlcXVlc3RDcmVkZW50aWFsc3x1bmRlZmluZWR9ICovXG4gIHRoaXMuY3JlZGVudGlhbHNNb2RlXyA9IHVuZGVmaW5lZDtcblxuICAvKiogQHByaXZhdGUge1JlcXVlc3RDYWNoZXx1bmRlZmluZWR9ICovXG4gIHRoaXMuY2FjaGVNb2RlXyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmVxdWVzdCBzdGF0ZS5cbiAgICogQHR5cGUge2dvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGV9XG4gICAqL1xuICB0aGlzLnJlYWR5U3RhdGUgPSBnb29nLm5ldC5GZXRjaFhtbEh0dHAuUmVxdWVzdFN0YXRlLlVOU0VOVDtcblxuICAvKipcbiAgICogSFRUUCBzdGF0dXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLnN0YXR1cyA9IDA7XG5cbiAgLyoqXG4gICAqIEhUVFAgc3RhdHVzIHN0cmluZy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICcnO1xuXG4gIC8qKlxuICAgKiBDb250ZW50IG9mIHRoZSByZXNwb25zZS5cbiAgICogQHR5cGUge3N0cmluZ3whQXJyYXlCdWZmZXJ8IUFycmF5PCFVaW50OEFycmF5Pn1cbiAgICovXG4gIHRoaXMucmVzcG9uc2UgPSAnJztcblxuICAvKipcbiAgICogQ29udGVudCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnJlc3BvbnNlVGV4dCA9ICcnO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgcmVzcG9uc2UuICBJZiB0aGlzIGlzIHNldCB0byAnYXJyYXlidWZmZXInIHRoZSByZXF1ZXN0IHdpbGxcbiAgICogYmUgZGlzY3JldGUsIHN0cmVhbWluZyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgdGV4dCBlbmNvZGVkIHJlcXVlc3RzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5yZXNwb25zZVR5cGUgPSAnJztcblxuICAvKipcbiAgICogRG9jdW1lbnQgcmVzcG9uc2UgZW50aXR5IGJvZHkuXG4gICAqIE5PVEU6IFRoaXMgaXMgYWx3YXlzIG51bGwgYW5kIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBjbGFzcy5cbiAgICogQGZpbmFsIHtudWxsfVxuICAgKi9cbiAgdGhpcy5yZXNwb25zZVhNTCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBjYWxsIHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMuXG4gICAqIEB0eXBlIHs/ZnVuY3Rpb24oKX1cbiAgICovXG4gIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuICAvKiogQHByaXZhdGUgeyFIZWFkZXJzfSAqL1xuICB0aGlzLnJlcXVlc3RIZWFkZXJzXyA9IG5ldyBIZWFkZXJzKCk7XG5cbiAgLyoqIEBwcml2YXRlIHs/SGVhZGVyc30gKi9cbiAgdGhpcy5yZXNwb25zZUhlYWRlcnNfID0gbnVsbDtcblxuICAvKipcbiAgICogUmVxdWVzdCBtZXRob2QgKEdFVCBvciBQT1NUKS5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMubWV0aG9kXyA9ICdHRVQnO1xuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IFVSTC5cbiAgICogQHByaXZhdGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMudXJsXyA9ICcnO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIGluIHByb2dyZXNzLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuaW5Qcm9ncmVzc18gPSBmYWxzZTtcblxuICAvKiogQHByaXZhdGUgQGZpbmFsIHs/Z29vZy5sb2cuTG9nZ2VyfSAqL1xuICB0aGlzLmxvZ2dlcl8gPSBnb29nLmxvZy5nZXRMb2dnZXIoJ2dvb2cubmV0LkZldGNoWG1sSHR0cCcpO1xuXG4gIC8qKiBAcHJpdmF0ZSB7P1Jlc3BvbnNlfSAqL1xuICB0aGlzLmZldGNoUmVzcG9uc2VfID0gbnVsbDtcblxuICAvKiogQHByaXZhdGUgeyFSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJ8bnVsbH0gKi9cbiAgdGhpcy5jdXJyZW50UmVhZGVyXyA9IG51bGw7XG5cbiAgLyoqIEBwcml2YXRlIHs/VGV4dERlY29kZXJ9ICovXG4gIHRoaXMudGV4dERlY29kZXJfID0gbnVsbDtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cubmV0LkZldGNoWG1sSHR0cCwgZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQpO1xuXG5cbi8qKlxuICogU3RhdGUgb2YgdGhlIHJlcXVlc3RzLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLlJlcXVlc3RTdGF0ZSA9IHtcbiAgVU5TRU5UOiAwLFxuICBPUEVORUQ6IDEsXG4gIEhFQURFUl9SRUNFSVZFRDogMixcbiAgTE9BRElORzogMyxcbiAgRE9ORTogNCxcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIG9wdF9hc3luYykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoISFvcHRfYXN5bmMsICdPbmx5IGFzeW5jIHJlcXVlc3RzIGFyZSBzdXBwb3J0ZWQuJyk7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgIT0gZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLlJlcXVlc3RTdGF0ZS5VTlNFTlQpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciByZW9wZW5pbmcgYSBjb25uZWN0aW9uJyk7XG4gIH1cblxuICB0aGlzLm1ldGhvZF8gPSBtZXRob2Q7XG4gIHRoaXMudXJsXyA9IHVybDtcblxuICB0aGlzLnJlYWR5U3RhdGUgPSBnb29nLm5ldC5GZXRjaFhtbEh0dHAuUmVxdWVzdFN0YXRlLk9QRU5FRDtcbiAgdGhpcy5kaXNwYXRjaENhbGxiYWNrXygpO1xufTtcblxuXG4vKiogQG92ZXJyaWRlICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHAucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgIT0gZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLlJlcXVlc3RTdGF0ZS5PUEVORUQpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCduZWVkIHRvIGNhbGwgb3BlbigpIGZpcnN0LiAnKTtcbiAgfVxuXG4gIHRoaXMuaW5Qcm9ncmVzc18gPSB0cnVlO1xuICBjb25zdCByZXF1ZXN0SW5pdCA9IHtcbiAgICBoZWFkZXJzOiB0aGlzLnJlcXVlc3RIZWFkZXJzXyxcbiAgICBtZXRob2Q6IHRoaXMubWV0aG9kXyxcbiAgICBjcmVkZW50aWFsczogdGhpcy5jcmVkZW50aWFsc01vZGVfLFxuICAgIGNhY2hlOiB0aGlzLmNhY2hlTW9kZV8sXG4gIH07XG4gIGlmIChvcHRfZGF0YSkge1xuICAgIHJlcXVlc3RJbml0Wydib2R5J10gPSBvcHRfZGF0YTtcbiAgfVxuXG4gICh0aGlzLndvcmtlcl8gfHwgZ29vZy5nbG9iYWwpXG4gICAgICAuZmV0Y2gobmV3IFJlcXVlc3QodGhpcy51cmxfLCAvKiogQHR5cGUgeyFSZXF1ZXN0SW5pdH0gKi8gKHJlcXVlc3RJbml0KSkpXG4gICAgICAudGhlbihcbiAgICAgICAgICB0aGlzLmhhbmRsZVJlc3BvbnNlXy5iaW5kKHRoaXMpLCB0aGlzLmhhbmRsZVNlbmRGYWlsdXJlXy5iaW5kKHRoaXMpKTtcbn07XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlVGV4dCA9ICcnO1xuICB0aGlzLnJlcXVlc3RIZWFkZXJzXyA9IG5ldyBIZWFkZXJzKCk7XG4gIHRoaXMuc3RhdHVzID0gMDtcblxuICBpZiAoISF0aGlzLmN1cnJlbnRSZWFkZXJfKSB7XG4gICAgdGhpcy5jdXJyZW50UmVhZGVyXy5jYW5jZWwoJ1JlcXVlc3Qgd2FzIGFib3J0ZWQuJylcbiAgICAgICAgLmNhdGNoKFxuICAgICAgICAgICAgZSA9PiBnb29nLmxvZy53YXJuaW5nKFxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyXywgJ0ZldGNoIHJlYWRlciBjYW5jZWxsYXRpb24gZXJyb3IuJywgZSkpO1xuICB9XG5cbiAgaWYgKCgodGhpcy5yZWFkeVN0YXRlID49IGdvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGUuT1BFTkVEKSAmJlxuICAgICAgIHRoaXMuaW5Qcm9ncmVzc18pICYmXG4gICAgICAodGhpcy5yZWFkeVN0YXRlICE9IGdvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGUuRE9ORSkpIHtcbiAgICB0aGlzLmluUHJvZ3Jlc3NfID0gZmFsc2U7XG4gICAgdGhpcy5yZXF1ZXN0RG9uZV8oKTtcbiAgfVxuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IGdvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGUuVU5TRU5UO1xufTtcblxuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGZldGNoIHJlc3BvbnNlLlxuICogQHBhcmFtIHshUmVzcG9uc2V9IHJlc3BvbnNlXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHAucHJvdG90eXBlLmhhbmRsZVJlc3BvbnNlXyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLmluUHJvZ3Jlc3NfKSB7XG4gICAgLy8gVGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGlnbm9yZS5cbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmZldGNoUmVzcG9uc2VfID0gcmVzcG9uc2U7XG5cbiAgaWYgKCF0aGlzLnJlc3BvbnNlSGVhZGVyc18pIHtcbiAgICB0aGlzLnN0YXR1cyA9IHRoaXMuZmV0Y2hSZXNwb25zZV8uc3RhdHVzO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9IHRoaXMuZmV0Y2hSZXNwb25zZV8uc3RhdHVzVGV4dDtcbiAgICB0aGlzLnJlc3BvbnNlSGVhZGVyc18gPSByZXNwb25zZS5oZWFkZXJzO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IGdvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGUuSEVBREVSX1JFQ0VJVkVEO1xuICAgIHRoaXMuZGlzcGF0Y2hDYWxsYmFja18oKTtcbiAgfVxuICAvLyBBIGNhbGxiYWNrIG1heSBhYm9ydCB0aGUgcmVxdWVzdC5cbiAgaWYgKCF0aGlzLmluUHJvZ3Jlc3NfKSB7XG4gICAgLy8gVGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGlnbm9yZS5cbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJlYWR5U3RhdGUgPSBnb29nLm5ldC5GZXRjaFhtbEh0dHAuUmVxdWVzdFN0YXRlLkxPQURJTkc7XG4gIHRoaXMuZGlzcGF0Y2hDYWxsYmFja18oKTtcbiAgLy8gQSBjYWxsYmFjayBtYXkgYWJvcnQgdGhlIHJlcXVlc3QuXG4gIGlmICghdGhpcy5pblByb2dyZXNzXykge1xuICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkLCBpZ25vcmUuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMucmVzcG9uc2VUeXBlID09PSAnYXJyYXlidWZmZXInKSB7XG4gICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKFxuICAgICAgICB0aGlzLmhhbmRsZVJlc3BvbnNlQXJyYXlCdWZmZXJfLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuaGFuZGxlU2VuZEZhaWx1cmVfLmJpbmQodGhpcykpO1xuICB9IGVsc2UgaWYgKFxuICAgICAgdHlwZW9mIChnb29nLmdsb2JhbC5SZWFkYWJsZVN0cmVhbSkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAnYm9keScgaW4gcmVzcG9uc2UpIHtcbiAgICB0aGlzLmN1cnJlbnRSZWFkZXJfID1cbiAgICAgICAgLyoqIEB0eXBlIHshUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyfSAqLyAocmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKSk7XG4gICAgaWYgKHRoaXMuc3RyZWFtQmluYXJ5Q2h1bmtzXykge1xuICAgICAgaWYgKHRoaXMucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdyZXNwb25zZVR5cGUgbXVzdCBiZSBlbXB0eSBmb3IgXCJzdHJlYW1CaW5hcnlDaHVua3NcIiBtb2RlIHJlc3BvbnNlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVzcG9uc2UgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXNwb25zZSA9IHRoaXMucmVzcG9uc2VUZXh0ID0gJyc7XG4gICAgICB0aGlzLnRleHREZWNvZGVyXyA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgIH1cbiAgICB0aGlzLnJlYWRJbnB1dEZyb21GZXRjaF8oKTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS50ZXh0KCkudGhlbihcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNwb25zZVRleHRfLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuaGFuZGxlU2VuZEZhaWx1cmVfLmJpbmQodGhpcykpO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVhZHMgdGhlIG5leHQgY2h1bmsgb2YgZGF0YSBmcm9tIHRoZSBmZXRjaCByZXNwb25zZS5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUucmVhZElucHV0RnJvbUZldGNoXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY3VycmVudFJlYWRlcl8ucmVhZCgpXG4gICAgICAudGhlbih0aGlzLmhhbmRsZURhdGFGcm9tU3RyZWFtXy5iaW5kKHRoaXMpKVxuICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlU2VuZEZhaWx1cmVfLmJpbmQodGhpcykpO1xufTtcblxuXG4vKipcbiAqIEhhbmRsZXMgYSBjaHVuayBvZiBkYXRhIGZyb20gdGhlIGZldGNoIHJlc3BvbnNlIHN0cmVhbSByZWFkZXIuXG4gKiBAcGFyYW0geyFJSXRlcmFibGVSZXN1bHR9IHJlc3VsdFxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5oYW5kbGVEYXRhRnJvbVN0cmVhbV8gPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXRoaXMuaW5Qcm9ncmVzc18pIHtcbiAgICAvLyBUaGUgcmVxdWVzdCB3YXMgYWJvcnRlZCwgaWdub3JlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLnN0cmVhbUJpbmFyeUNodW5rc18gJiYgcmVzdWx0LnZhbHVlKSB7XG4gICAgLy8gV2hlbiBzdHJlYW1CaW5hcnlDaHVua3NfIGlzIGVuYWJsZWQsIFwicmVzcG9uc2VcIiBpcyBhbiBhcnJheVxuICAgIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAodGhpcy5yZXNwb25zZSlcbiAgICAgICAgLnB1c2goLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlc3VsdC52YWx1ZSkpO1xuICB9IGVsc2UgaWYgKCF0aGlzLnN0cmVhbUJpbmFyeUNodW5rc18pIHtcbiAgICBjb25zdCBkYXRhUGFja2V0ID0gcmVzdWx0LnZhbHVlID9cbiAgICAgICAgLyoqIEB0eXBlIHshVWludDhBcnJheX0gKi8gKHJlc3VsdC52YWx1ZSkgOlxuICAgICAgICBuZXcgVWludDhBcnJheSgwKTtcbiAgICBjb25zdCBuZXdUZXh0ID1cbiAgICAgICAgdGhpcy50ZXh0RGVjb2Rlcl8uZGVjb2RlKGRhdGFQYWNrZXQsIHtzdHJlYW06ICFyZXN1bHQuZG9uZX0pO1xuICAgIGlmIChuZXdUZXh0KSB7XG4gICAgICB0aGlzLnJlc3BvbnNlVGV4dCArPSBuZXdUZXh0O1xuICAgICAgdGhpcy5yZXNwb25zZSA9IHRoaXMucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfVxuICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICB0aGlzLnJlcXVlc3REb25lXygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGlzcGF0Y2hDYWxsYmFja18oKTtcbiAgfVxuXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLlJlcXVlc3RTdGF0ZS5MT0FESU5HKSB7XG4gICAgdGhpcy5yZWFkSW5wdXRGcm9tRmV0Y2hfKCk7XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgcmVzcG9uc2UgdGV4dC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVRleHRcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuaGFuZGxlUmVzcG9uc2VUZXh0XyA9IGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICghdGhpcy5pblByb2dyZXNzXykge1xuICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkLCBpZ25vcmUuXG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlVGV4dCA9IHJlc3BvbnNlVGV4dDtcbiAgdGhpcy5yZXF1ZXN0RG9uZV8oKTtcbn07XG5cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSByZXNwb25zZSB0ZXh0LlxuICogQHBhcmFtIHshQXJyYXlCdWZmZXJ9IHJlc3BvbnNlQXJyYXlCdWZmZXJcbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuaGFuZGxlUmVzcG9uc2VBcnJheUJ1ZmZlcl8gPSBmdW5jdGlvbihcbiAgICByZXNwb25zZUFycmF5QnVmZmVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLmluUHJvZ3Jlc3NfKSB7XG4gICAgLy8gVGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGlnbm9yZS5cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlQXJyYXlCdWZmZXI7XG4gIHRoaXMucmVxdWVzdERvbmVfKCk7XG59O1xuXG5cbi8qKlxuICogSGFuZGxlcyB0aGUgc2VuZCBmYWlsdXJlLlxuICogQHBhcmFtIHsqfSBlcnJvclxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5oYW5kbGVTZW5kRmFpbHVyZV8gPSBmdW5jdGlvbihlcnJvcikge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IGUgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBFcnJvcihlcnJvcik7XG4gIGdvb2cubG9nLndhcm5pbmcodGhpcy5sb2dnZXJfLCAnRmFpbGVkIHRvIGZldGNoIHVybCAnICsgdGhpcy51cmxfLCBlKTtcbiAgaWYgKCF0aGlzLmluUHJvZ3Jlc3NfKSB7XG4gICAgLy8gVGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGlnbm9yZS5cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZXF1ZXN0RG9uZV8oKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSByZXF1ZXN0IHN0YXRlIHRvIERPTkUgYW5kIHBlcmZvcm1zIGNsZWFudXAuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHAucHJvdG90eXBlLnJlcXVlc3REb25lXyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMucmVhZHlTdGF0ZSA9IGdvb2cubmV0LkZldGNoWG1sSHR0cC5SZXF1ZXN0U3RhdGUuRE9ORTtcblxuICB0aGlzLmZldGNoUmVzcG9uc2VfID0gbnVsbDtcbiAgdGhpcy5jdXJyZW50UmVhZGVyXyA9IG51bGw7XG4gIHRoaXMudGV4dERlY29kZXJfID0gbnVsbDtcblxuICB0aGlzLmRpc3BhdGNoQ2FsbGJhY2tfKCk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuc2V0UmVxdWVzdEhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlciwgdmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLnJlcXVlc3RIZWFkZXJzXy5hcHBlbmQoaGVhZGVyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbihoZWFkZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUT0RPKHVzZXIpOiBUaGlzIG1ldGhvZCBzaG91bGQgcmV0dXJuIG51bGwgd2hlbiB0aGUgaGVhZGVycyBhcmUgbm90XG4gIC8vIHByZXNlbnQgb3IgdGhlIHNwZWNpZmllZCBoZWFkZXIgaXMgbWlzc2luZy4gVGhlIGV4dGVybnMgbmVlZCB0byBiZSBmaXhlZC5cbiAgaWYgKCF0aGlzLnJlc3BvbnNlSGVhZGVyc18pIHtcbiAgICBnb29nLmxvZy53YXJuaW5nKFxuICAgICAgICB0aGlzLmxvZ2dlcl8sXG4gICAgICAgICdBdHRlbXB0aW5nIHRvIGdldCByZXNwb25zZSBoZWFkZXIgYnV0IG5vIGhlYWRlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkICcgK1xuICAgICAgICAgICAgJ2ZvciB1cmw6ICcgKyB0aGlzLnVybF8pO1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gdGhpcy5yZXNwb25zZUhlYWRlcnNfLmdldChoZWFkZXIudG9Mb3dlckNhc2UoKSkgfHwgJyc7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCF0aGlzLnJlc3BvbnNlSGVhZGVyc18pIHtcbiAgICBnb29nLmxvZy53YXJuaW5nKFxuICAgICAgICB0aGlzLmxvZ2dlcl8sXG4gICAgICAgICdBdHRlbXB0aW5nIHRvIGdldCBhbGwgcmVzcG9uc2UgaGVhZGVycyBidXQgbm8gaGVhZGVycyBoYXZlIGJlZW4gJyArXG4gICAgICAgICAgICAncmVjZWl2ZWQgZm9yIHVybDogJyArIHRoaXMudXJsXyk7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGNvbnN0IGl0ZXIgPSB0aGlzLnJlc3BvbnNlSGVhZGVyc18uZW50cmllcygpO1xuICBsZXQgZW50cnkgPSBpdGVyLm5leHQoKTtcbiAgd2hpbGUgKCFlbnRyeS5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IGVudHJ5LnZhbHVlO1xuICAgIGxpbmVzLnB1c2gocGFpclswXSArICc6ICcgKyBwYWlyWzFdKTtcbiAgICBlbnRyeSA9IGl0ZXIubmV4dCgpO1xuICB9XG4gIHJldHVybiBsaW5lcy5qb2luKCdcXHJcXG4nKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFSZXF1ZXN0Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzTW9kZSBUaGUgY3JlZGVudGlhbHMgbW9kZSBvZiB0aGVcbiAqICAgICBTZXJ2aWNlIFdvcmtlciBmZXRjaC5cbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5zZXRDcmVkZW50aWFsc01vZGUgPSBmdW5jdGlvbihjcmVkZW50aWFsc01vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNyZWRlbnRpYWxzTW9kZV8gPSBjcmVkZW50aWFsc01vZGU7XG59O1xuXG4vKipcbiAqIEByZXR1cm4geyFSZXF1ZXN0Q3JlZGVudGlhbHN8dW5kZWZpbmVkfSBUaGUgY3JlZGVudGlhbHMgbW9kZSBvZiB0aGVcbiAqICAgICBTZXJ2aWNlIFdvcmtlciBmZXRjaC5cbiAqL1xuZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZS5nZXRDcmVkZW50aWFsc01vZGUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jcmVkZW50aWFsc01vZGVfO1xufTtcblxuLyoqXG4gKiBAcGFyYW0geyFSZXF1ZXN0Q2FjaGV9IGNhY2hlTW9kZSBUaGUgY2FjaGUgbW9kZSBvZiB0aGUgU2VydmljZSBXb3JrZXIgZmV0Y2guXG4gKi9cbmdvb2cubmV0LkZldGNoWG1sSHR0cC5wcm90b3R5cGUuc2V0Q2FjaGVNb2RlID0gZnVuY3Rpb24oY2FjaGVNb2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jYWNoZU1vZGVfID0gY2FjaGVNb2RlO1xufTtcblxuXG4vKipcbiAqIERpc3BhdGNoZXMgdGhlIGNhbGxiYWNrLCBpZiB0aGUgY2FsbGJhY2sgYXR0cmlidXRlIGlzIGRlZmluZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm5ldC5GZXRjaFhtbEh0dHAucHJvdG90eXBlLmRpc3BhdGNoQ2FsbGJhY2tfID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMub25yZWFkeXN0YXRlY2hhbmdlKSB7XG4gICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UuY2FsbCh0aGlzKTtcbiAgfVxufTtcblxuLy8gUG9seWZpbGwgWG1sSHR0cFJlcXVlc3QncyB3aXRoQ3JlZGVudGlhbHMgcHJvcGVydHkgZm9yIHNwZWNpZnlpbmcgd2hldGhlciB0b1xuLy8gaW5jbHVkZSBjcmVkZW50aWFscyBvbiBjcm9zcyBkb21haW4gcmVxdWVzdHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZ29vZy5uZXQuRmV0Y2hYbWxIdHRwLnByb3RvdHlwZSwgJ3dpdGhDcmVkZW50aWFscycsIHtcbiAgZ2V0OlxuICAgICAgLyoqXG4gICAgICAgKiBAdGhpcyB7Z29vZy5uZXQuRmV0Y2hYbWxIdHRwfVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0byBpbmNsdWRlIGNyZWRlbnRpYWxzIGluIGNyb3NzIGRvbWFpblxuICAgICAgICogICAgIHJlcXVlc3RzLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDcmVkZW50aWFsc01vZGUoKSA9PT0gJ2luY2x1ZGUnO1xuICAgICAgfSxcblxuICBzZXQ6XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgV2hldGhlciB0byBpbmNsdWRlIGNyZWRlbnRpYWxzIGluIGNyb3NzIGRvbWFpblxuICAgICAgICogICAgIHJlcXVlc3RzLlxuICAgICAgICogQHRoaXMge2dvb2cubmV0LkZldGNoWG1sSHR0cH1cbiAgICAgICAqKi9cbiAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgdGhpcy5zZXRDcmVkZW50aWFsc01vZGUodmFsdWUgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nKTtcbiAgICAgIH1cbn0pO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdGllcyBmb3IgY3JlYXRpbmcgZnVuY3Rpb25zLiBMb29zZWx5IGluc3BpcmVkIGJ5IHRoZXNlXG4gKiBqYXZhIGNsYXNzZXMgZnJvbSB0aGUgR3VhdmEgbGlicmFyeTpcbiAqIGNvbS5nb29nbGUuY29tbW9uLmJhc2UuRnVuY3Rpb25zXG4gKiBodHRwczovL2dvb2dsZS5naXRodWIuaW8vZ3VhdmEvcmVsZWFzZXMvc25hcHNob3QtanJlL2FwaS9kb2NzL2luZGV4Lmh0bWw/Y29tL2dvb2dsZS9jb21tb24vYmFzZS9GdW5jdGlvbnMuaHRtbFxuICpcbiAqIGNvbS5nb29nbGUuY29tbW9uLmJhc2UuUHJlZGljYXRlc1xuICogaHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL2d1YXZhL3JlbGVhc2VzL3NuYXBzaG90LWpyZS9hcGkvZG9jcy9pbmRleC5odG1sP2NvbS9nb29nbGUvY29tbW9uL2Jhc2UvUHJlZGljYXRlcy5odG1sXG4gKlxuICogTW9yZSBhYm91dCB0aGVzZSBjYW4gYmUgZm91bmQgYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvZ3VhdmEvd2lraS9GdW5jdGlvbmFsRXhwbGFpbmVkXG4gKi9cblxuXG5nb29nLnByb3ZpZGUoJ2dvb2cuZnVuY3Rpb25zJyk7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSB2YWx1ZS5cbiAqIEBwYXJhbSB7VH0gcmV0VmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybi5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6VH0gVGhlIG5ldyBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmNvbnN0YW50ID0gZnVuY3Rpb24ocmV0VmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiByZXRWYWx1ZTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJucyBmYWxzZS5cbiAqIEB0eXBlIHtmdW5jdGlvbiguLi4pOiBib29sZWFufVxuICovXG5nb29nLmZ1bmN0aW9ucy5GQUxTRSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJucyB0cnVlLlxuICogQHR5cGUge2Z1bmN0aW9uKC4uLik6IGJvb2xlYW59XG4gKi9cbmdvb2cuZnVuY3Rpb25zLlRSVUUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJucyBgbnVsbGAuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oLi4uKTogbnVsbH1cbiAqL1xuZ29vZy5mdW5jdGlvbnMuTlVMTCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBudWxsO1xufTtcblxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm5zIGB1bmRlZmluZWRgLlxuICogQHR5cGUge2Z1bmN0aW9uKC4uLik6IHVuZGVmaW5lZH1cbiAqL1xuZ29vZy5mdW5jdGlvbnMuVU5ERUZJTkVEID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEFsd2F5cyByZXR1cm5zIGB1bmRlZmluZWRgIChsb29zZWx5LXR5cGVkIHZlcnNpb24pLlxuICogQHR5cGUgeyFGdW5jdGlvbn1cbiAqL1xuZ29vZy5mdW5jdGlvbnMuRU1QVFkgPSAvKiogQHR5cGUgez99ICovIChnb29nLmZ1bmN0aW9ucy5VTkRFRklORUQpO1xuXG5cbi8qKlxuICogQSBzaW1wbGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB3aGF0ZXZlciBpcyBwYXNzZWRcbiAqIGludG8gaXQuXG4gKiBAcGFyYW0ge1Q9fSBvcHRfcmV0dXJuVmFsdWUgVGhlIHNpbmdsZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIE9wdGlvbmFsIHRyYWlsaW5nIGFyZ3VtZW50cy4gVGhlc2UgYXJlIGlnbm9yZWQuXG4gKiBAcmV0dXJuIHtUfSBUaGUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIGluLCBvciB1bmRlZmluZWQgaWYgbm90aGluZyB3YXMgcGFzc2VkLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5mdW5jdGlvbnMuaWRlbnRpdHkgPSBmdW5jdGlvbihvcHRfcmV0dXJuVmFsdWUsIHZhcl9hcmdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIG9wdF9yZXR1cm5WYWx1ZTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgdGhyb3dzIGFuIGVycm9yIHdpdGggdGhlIGdpdmVuIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gVGhlIGVycm9yLXRocm93aW5nIGZ1bmN0aW9uLlxuICovXG5nb29nLmZ1bmN0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB0aHJvd3MgdGhlIGdpdmVuIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gZXJyIEFuIG9iamVjdCB0byBiZSB0aHJvd24uXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IFRoZSBlcnJvci10aHJvd2luZyBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuZmFpbCA9IGZ1bmN0aW9uKGVycikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xufTtcblxuXG4vKipcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQga2VlcHMgb3B0X251bUFyZ3MgYXJndW1lbnRzIGFuZFxuICogc2lsZW50bHkgZGlzY2FyZHMgYWxsIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZiBUaGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9udW1BcmdzIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGtlZXAuIERlZmF1bHRzIHRvIDAuXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgdmVyc2lvbiBvZiBmIHRoYXQgb25seSBrZWVwcyB0aGUgZmlyc3Qgb3B0X251bUFyZ3NcbiAqICAgICBhcmd1bWVudHMuXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmxvY2sgPSBmdW5jdGlvbihmLCBvcHRfbnVtQXJncykge1xuICAndXNlIHN0cmljdCc7XG4gIG9wdF9udW1BcmdzID0gb3B0X251bUFyZ3MgfHwgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25zdCBzZWxmID0gLyoqIEB0eXBlIHsqfSAqLyAodGhpcyk7XG4gICAgcmV0dXJuIGYuYXBwbHkoc2VsZiwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBvcHRfbnVtQXJncykpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIG50aCBhcmd1bWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBwb3NpdGlvbiBvZiB0aGUgcmV0dXJuIGFyZ3VtZW50LlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMubnRoID0gZnVuY3Rpb24obikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIGFyZ3VtZW50c1tuXTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBMaWtlIGdvb2cucGFydGlhbCgpLCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFkZGVkIGFmdGVyIGFyZ3VtZW50cyB0byB0aGVcbiAqIHJldHVybmVkIGZ1bmN0aW9uLlxuICpcbiAqIFVzYWdlOlxuICogZnVuY3Rpb24gZihhcmcxLCBhcmcyLCBhcmczLCBhcmc0KSB7IC4uLiB9XG4gKiB2YXIgZyA9IGdvb2cuZnVuY3Rpb25zLnBhcnRpYWxSaWdodChmLCBhcmczLCBhcmc0KTtcbiAqIGcoYXJnMSwgYXJnMik7XG4gKlxuICogQHBhcmFtIHshRnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byBmblxuICogICAgIGF0IHRoZSBlbmQuXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgcGFydGlhbGx5LWFwcGxpZWQgZm9ybSBvZiB0aGUgZnVuY3Rpb24gZ29vZy5wYXJ0aWFsKClcbiAqICAgICB3YXMgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMucGFydGlhbFJpZ2h0ID0gZnVuY3Rpb24oZm4sIHZhcl9hcmdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgcmlnaHRBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBFdmVuIGluIHN0cmljdCBtb2RlLCBJRTEwLzExIGFuZCBFZGdlIChub24tQ2hyb21pdW0pIHVzZSBnbG9iYWwgY29udGV4dFxuICAgIC8vIHdoZW4gZnJlZS1jYWxsaW5nIGZ1bmN0aW9ucy4gVG8gY2F0Y2ggY2FzZXMgd2hlcmUgcGVvcGxlIHdlcmUgdXNpbmcgdGhpc1xuICAgIC8vIGVycm9uZW91c2x5LCB3ZSBleHBsaWNpdGx5IGNoYW5nZSB0aGUgY29udGV4dCB0byB1bmRlZmluZWQgdG8gbWF0Y2hcbiAgICAvLyBzdHJpY3QgbW9kZSBzcGVjaWZpY2F0aW9ucy5cbiAgICBsZXQgc2VsZiA9IC8qKiBAdHlwZSB7Kn0gKi8gKHRoaXMpO1xuICAgIGlmIChzZWxmID09PSBnb29nLmdsb2JhbCkge1xuICAgICAgc2VsZiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbmV3QXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgbmV3QXJncy5wdXNoLmFwcGx5KG5ld0FyZ3MsIHJpZ2h0QXJncyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIG5ld0FyZ3MpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiB0aGF0IHN3YWxsb3dzIGl0cyByZXR1cm4gdmFsdWVcbiAqIGFuZCByZXBsYWNlcyBpdCB3aXRoIGEgbmV3IG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGYgQSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7VH0gcmV0VmFsdWUgQSBuZXcgcmV0dXJuIHZhbHVlLlxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uPyk6VH0gQSBuZXcgZnVuY3Rpb24uXG4gKiBAdGVtcGxhdGUgVFxuICovXG5nb29nLmZ1bmN0aW9ucy53aXRoUmV0dXJuVmFsdWUgPSBmdW5jdGlvbihmLCByZXRWYWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnb29nLmZ1bmN0aW9ucy5zZXF1ZW5jZShmLCBnb29nLmZ1bmN0aW9ucy5jb25zdGFudChyZXRWYWx1ZSkpO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBpdHMgYXJndW1lbnQgZXF1YWxzIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogdmFyIGtleSA9IGdvb2cub2JqZWN0LmZpbmRLZXkob2JqLCBnb29nLmZ1bmN0aW9ucy5lcXVhbFRvKCduZWVkbGUnKSk7XG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZSB0by5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF91c2VMb29zZUNvbXBhcmlzb24gV2hldGhlciB0byB1c2UgYSBsb29zZSAoPT0pXG4gKiAgICAgY29tcGFyaXNvbiByYXRoZXIgdGhhbiBhIHN0cmljdCAoPT09KSBvbmUuIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKik6Ym9vbGVhbn0gVGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuZXF1YWxUbyA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfdXNlTG9vc2VDb21wYXJpc29uKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiBvcHRfdXNlTG9vc2VDb21wYXJpc29uID8gKHZhbHVlID09IG90aGVyKSA6ICh2YWx1ZSA9PT0gb3RoZXIpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGNvbXBvc2l0aW9uIG9mIHRoZSBmdW5jdGlvbnMgcGFzc2VkIGluLlxuICogRm9yIGV4YW1wbGUsIChnb29nLmZ1bmN0aW9ucy5jb21wb3NlKGYsIGcpKShhKSBpcyBlcXVpdmFsZW50IHRvIGYoZyhhKSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLj8pOlR9IGZuIFRoZSBmaW5hbCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IHZhcl9hcmdzIEEgbGlzdCBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi4/KTpUfSBUaGUgY29tcG9zaXRpb24gb2YgYWxsIGlucHV0cy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmNvbXBvc2UgPSBmdW5jdGlvbihmbiwgdmFyX2FyZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBjb25zdCBmdW5jdGlvbnMgPSBhcmd1bWVudHM7XG4gIGNvbnN0IGxlbmd0aCA9IGZ1bmN0aW9ucy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29uc3Qgc2VsZiA9IC8qKiBAdHlwZSB7Kn0gKi8gKHRoaXMpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gZnVuY3Rpb25zW2xlbmd0aCAtIDFdLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IGxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgICByZXN1bHQgPSBmdW5jdGlvbnNbaV0uY2FsbChzZWxmLCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSBmdW5jdGlvbnMgcGFzc2VkIGluIGluIHNlcXVlbmNlLCBhbmRcbiAqIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBsYXN0IGZ1bmN0aW9uLiBGb3IgZXhhbXBsZSxcbiAqIChnb29nLmZ1bmN0aW9ucy5zZXF1ZW5jZShmLCBnKSkoeCkgaXMgZXF1aXZhbGVudCB0byBmKHgpLGcoeCkuXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSB2YXJfYXJncyBBIGxpc3Qgb2YgZnVuY3Rpb25zLlxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgY2FsbHMgYWxsIGlucHV0cyBpbiBzZXF1ZW5jZS5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuc2VxdWVuY2UgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IGZ1bmN0aW9ucyA9IGFyZ3VtZW50cztcbiAgY29uc3QgbGVuZ3RoID0gZnVuY3Rpb25zLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25zdCBzZWxmID0gLyoqIEB0eXBlIHsqfSAqLyAodGhpcyk7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgPSBmdW5jdGlvbnNbaV0uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgZWFjaCBvZiBpdHMgY29tcG9uZW50cyBldmFsdWF0ZXNcbiAqIHRvIHRydWUuIFRoZSBjb21wb25lbnRzIGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIsIGFuZCB0aGUgZXZhbHVhdGlvbiB3aWxsIGJlXG4gKiBzaG9ydC1jaXJjdWl0ZWQgYXMgc29vbiBhcyBhIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UuXG4gKiBGb3IgZXhhbXBsZSwgKGdvb2cuZnVuY3Rpb25zLmFuZChmLCBnKSkoeCkgaXMgZXF1aXZhbGVudCB0byBmKHgpICYmIGcoeCkuXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSB2YXJfYXJncyBBIGxpc3Qgb2YgZnVuY3Rpb25zLlxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uPyk6Ym9vbGVhbn0gQSBmdW5jdGlvbiB0aGF0IEFORHMgaXRzIGNvbXBvbmVudFxuICogICAgICBmdW5jdGlvbnMuXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmFuZCA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgZnVuY3Rpb25zID0gYXJndW1lbnRzO1xuICBjb25zdCBsZW5ndGggPSBmdW5jdGlvbnMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGNvbnN0IHNlbGYgPSAvKiogQHR5cGUgeyp9ICovICh0aGlzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWZ1bmN0aW9uc1tpXS5hcHBseShzZWxmLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIGFueSBvZiBpdHMgY29tcG9uZW50cyBldmFsdWF0ZXNcbiAqIHRvIHRydWUuIFRoZSBjb21wb25lbnRzIGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIsIGFuZCB0aGUgZXZhbHVhdGlvbiB3aWxsIGJlXG4gKiBzaG9ydC1jaXJjdWl0ZWQgYXMgc29vbiBhcyBhIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZS5cbiAqIEZvciBleGFtcGxlLCAoZ29vZy5mdW5jdGlvbnMub3IoZiwgZykpKHgpIGlzIGVxdWl2YWxlbnQgdG8gZih4KSB8fCBnKHgpLlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gdmFyX2FyZ3MgQSBsaXN0IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLj8pOmJvb2xlYW59IEEgZnVuY3Rpb24gdGhhdCBPUnMgaXRzIGNvbXBvbmVudFxuICogICAgZnVuY3Rpb25zLlxuICovXG5nb29nLmZ1bmN0aW9ucy5vciA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgZnVuY3Rpb25zID0gYXJndW1lbnRzO1xuICBjb25zdCBsZW5ndGggPSBmdW5jdGlvbnMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGNvbnN0IHNlbGYgPSAvKiogQHR5cGUgeyp9ICovICh0aGlzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZnVuY3Rpb25zW2ldLmFwcGx5KHNlbGYsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBCb29sZWFuIG9wcG9zaXRlIG9mIGEgcHJvdmlkZWQgZnVuY3Rpb24uXG4gKiBGb3IgZXhhbXBsZSwgKGdvb2cuZnVuY3Rpb25zLm5vdChmKSkoeCkgaXMgZXF1aXZhbGVudCB0byAhZih4KS5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmIFRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLj8pOmJvb2xlYW59IEEgZnVuY3Rpb24gdGhhdCBkZWxlZ2F0ZXMgdG8gZiBhbmQgcmV0dXJuc1xuICogb3Bwb3NpdGUuXG4gKi9cbmdvb2cuZnVuY3Rpb25zLm5vdCA9IGZ1bmN0aW9uKGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGNvbnN0IHNlbGYgPSAvKiogQHR5cGUgeyp9ICovICh0aGlzKTtcbiAgICByZXR1cm4gIWYuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBHZW5lcmljIGZhY3RvcnkgZnVuY3Rpb24gdG8gY29uc3RydWN0IGFuIG9iamVjdCBnaXZlbiB0aGUgY29uc3RydWN0b3JcbiAqIGFuZCB0aGUgYXJndW1lbnRzLiBJbnRlbmRlZCB0byBiZSBib3VuZCB0byBjcmVhdGUgb2JqZWN0IGZhY3Rvcmllcy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIHZhciBmYWN0b3J5ID0gZ29vZy5wYXJ0aWFsKGdvb2cuZnVuY3Rpb25zLmNyZWF0ZSwgQ2xhc3MpO1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQsIC4uLil9IGNvbnN0cnVjdG9yIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIE9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgVGhlIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogQHJldHVybiB7VH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIGdpdmVuIGluIGBjb25zdHJ1Y3RvcmAuXG4gKiBAdGVtcGxhdGUgVFxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB3b3JrIHdpdGggRVM2IGNsYXNzIGNvbnN0cnVjdG9ycy4gVXNlXG4gKiAgICAgYXJyb3cgZnVuY3Rpb25zICsgc3ByZWFkIGFyZ3MgaW5zdGVhZC5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuY3JlYXRlID0gZnVuY3Rpb24oY29uc3RydWN0b3IsIHZhcl9hcmdzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZmluYWxcbiAgICovXG4gIGNvbnN0IHRlbXAgPSBmdW5jdGlvbigpIHt9O1xuICB0ZW1wLnByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAvLyBvYmogd2lsbCBoYXZlIGNvbnN0cnVjdG9yJ3MgcHJvdG90eXBlIGluIGl0cyBjaGFpbiBhbmRcbiAgLy8gJ29iaiBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yJyB3aWxsIGJlIHRydWUuXG4gIGNvbnN0IG9iaiA9IG5ldyB0ZW1wKCk7XG5cbiAgLy8gb2JqIGlzIGluaXRpYWxpemVkIGJ5IGNvbnN0cnVjdG9yLlxuICAvLyBhcmd1bWVudHMgaXMgb25seSBhcnJheS1saWtlIHNvIGxhY2tzIHNoaWZ0KCksIGJ1dCBjYW4gYmUgdXNlZCB3aXRoXG4gIC8vIHRoZSBBcnJheSBwcm90b3R5cGUgZnVuY3Rpb24uXG4gIGNvbnN0cnVjdG9yLmFwcGx5KG9iaiwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5cbi8qKlxuICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmV0dXJuIHZhbHVlIGNhY2hlIHNob3VsZCBiZSB1c2VkLlxuICogICAgVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvIGRpc2FibGUgY2FjaGVzIHdoZW4gdGVzdGluZy5cbiAqL1xuZ29vZy5mdW5jdGlvbnMuQ0FDSEVfUkVUVVJOX1ZBTFVFID1cbiAgICBnb29nLmRlZmluZSgnZ29vZy5mdW5jdGlvbnMuQ0FDSEVfUkVUVVJOX1ZBTFVFJywgdHJ1ZSk7XG5cblxuLyoqXG4gKiBHaXZlcyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBjYWNoZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIHBhcmFtZXRlcmxlc3NcbiAqIGZ1bmN0aW9uIHdoZW4gZmlyc3QgY2FsbGVkLlxuICpcbiAqIFdoZW4gY2FsbGVkIGZvciB0aGUgZmlyc3QgdGltZSwgdGhlIGdpdmVuIGZ1bmN0aW9uIGlzIGNhbGxlZCBhbmQgaXRzXG4gKiByZXR1cm4gdmFsdWUgaXMgY2FjaGVkICh0aHVzIHRoaXMgaXMgb25seSBhcHByb3ByaWF0ZSBmb3IgaWRlbXBvdGVudFxuICogZnVuY3Rpb25zKS4gIFN1YnNlcXVlbnQgY2FsbHMgd2lsbCByZXR1cm4gdGhlIGNhY2hlZCByZXR1cm4gdmFsdWUuIFRoaXNcbiAqIGFsbG93cyB0aGUgZXZhbHVhdGlvbiBvZiBleHBlbnNpdmUgZnVuY3Rpb25zIHRvIGJlIGRlbGF5ZWQgdW50aWwgZmlyc3QgdXNlZC5cbiAqXG4gKiBUbyBjYWNoZSB0aGUgcmV0dXJuIHZhbHVlcyBvZiBmdW5jdGlvbnMgd2l0aCBwYXJhbWV0ZXJzLCBzZWUgZ29vZy5tZW1vaXplLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpUfSBmbiBBIGZ1bmN0aW9uIHRvIGxhemlseSBldmFsdWF0ZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6VH0gQSB3cmFwcGVkIHZlcnNpb24gdGhlIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZ29vZy5mdW5jdGlvbnMuY2FjaGVSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uKGZuKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICBsZXQgdmFsdWU7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAoIWdvb2cuZnVuY3Rpb25zLkNBQ0hFX1JFVFVSTl9WQUxVRSkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuXG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIHZhbHVlID0gZm4oKTtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuXG4vKipcbiAqIFdyYXBzIGEgZnVuY3Rpb24gdG8gYWxsb3cgaXQgdG8gYmUgY2FsbGVkLCBhdCBtb3N0LCBvbmNlLiBBbGxcbiAqIGFkZGl0aW9uYWwgY2FsbHMgYXJlIG5vLW9wcy5cbiAqXG4gKiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uc1xuICogdGhhdCBzaG91bGQgYmUgY2FsbGVkLCBhdCBtb3N0LCBvbmNlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKToqfSBmIEZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOnVuZGVmaW5lZH0gV3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZ29vZy5mdW5jdGlvbnMub25jZSA9IGZ1bmN0aW9uKGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBmdW5jdGlvbiB0aGF0IHdlIG51bGwgb3V0IHdoZW4gd2UncmUgZG9uZSB3aXRoXG4gIC8vIGl0IC0tIHRoYXQgd2F5LCB0aGUgZnVuY3Rpb24gY2FuIGJlIEdDJ2Qgd2hlbiB3ZSdyZSBkb25lIHdpdGggaXQuXG4gIGxldCBpbm5lciA9IGY7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICBjb25zdCB0bXAgPSBpbm5lcjtcbiAgICAgIGlubmVyID0gbnVsbDtcbiAgICAgIHRtcCgpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHRvIGFsbG93IGl0IHRvIGJlIGNhbGxlZCwgYXQgbW9zdCwgb25jZSBwZXIgaW50ZXJ2YWxcbiAqIChzcGVjaWZpZWQgaW4gbWlsbGlzZWNvbmRzKS4gSWYgdGhlIHdyYXBwZXIgZnVuY3Rpb24gaXMgY2FsbGVkIE4gdGltZXMgd2l0aGluXG4gKiB0aGF0IGludGVydmFsLCBvbmx5IHRoZSBOdGggY2FsbCB3aWxsIGdvIHRocm91Z2guXG4gKlxuICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBiYXRjaGluZyB1cCByZXBlYXRlZCBhY3Rpb25zIHdoZXJlIHRoZVxuICogbGFzdCBhY3Rpb24gc2hvdWxkIHdpbi4gVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIGZvciByZWZyZXNoaW5nIGFuXG4gKiBhdXRvY29tcGxldGUgcG9wLXVwIGV2ZXJ5IHNvIG9mdGVuIHJhdGhlciB0aGFuIHVwZGF0aW5nIHdpdGggZXZlcnkga2V5c3Ryb2tlLFxuICogc2luY2UgdGhlIGZpbmFsIHRleHQgdHlwZWQgYnkgdGhlIHVzZXIgaXMgdGhlIG9uZSB0aGF0IHNob3VsZCBwcm9kdWNlIHRoZVxuICogZmluYWwgYXV0b2NvbXBsZXRlIHJlc3VsdHMuIEZvciBtb3JlIHN0YXRlZnVsIGRlYm91bmNpbmcgd2l0aCBzdXBwb3J0IGZvclxuICogcGF1c2luZywgcmVzdW1pbmcsIGFuZCBjYW5jZWxpbmcgZGVib3VuY2VkIGFjdGlvbnMsIHVzZVxuICogYGdvb2cuYXN5bmMuRGVib3VuY2VyYC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6U0NPUEUsIC4uLj8pfSBmIEZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgSW50ZXJ2YWwgb3ZlciB3aGljaCB0byBkZWJvdW5jZS4gVGhlIGZ1bmN0aW9uIHdpbGxcbiAqICAgICBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgZnVsbCBpbnRlcnZhbCBoYXMgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICogQHBhcmFtIHtTQ09QRT19IG9wdF9zY29wZSBPYmplY3QgaW4gd2hvc2Ugc2NvcGUgdG8gY2FsbCB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi4/KTogdW5kZWZpbmVkfSBXcmFwcGVkIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIFNDT1BFXG4gKi9cbmdvb2cuZnVuY3Rpb25zLmRlYm91bmNlID0gZnVuY3Rpb24oZiwgaW50ZXJ2YWwsIG9wdF9zY29wZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGxldCB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7ZnVuY3Rpb24oLi4uPyl9ICovIChmdW5jdGlvbih2YXJfYXJncykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBnb29nLmdsb2JhbC5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aW1lb3V0ID0gZ29vZy5nbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGYuYXBwbHkob3B0X3Njb3BlLCBhcmdzKTtcbiAgICB9LCBpbnRlcnZhbCk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIFdyYXBzIGEgZnVuY3Rpb24gdG8gYWxsb3cgaXQgdG8gYmUgY2FsbGVkLCBhdCBtb3N0LCBvbmNlIHBlciBpbnRlcnZhbFxuICogKHNwZWNpZmllZCBpbiBtaWxsaXNlY29uZHMpLiBJZiB0aGUgd3JhcHBlciBmdW5jdGlvbiBpcyBjYWxsZWQgTiB0aW1lcyBpblxuICogdGhhdCBpbnRlcnZhbCwgYm90aCB0aGUgMXN0IGFuZCB0aGUgTnRoIGNhbGxzIHdpbGwgZ28gdGhyb3VnaC5cbiAqXG4gKiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIGxpbWl0aW5nIHJlcGVhdGVkIHVzZXIgcmVxdWVzdHMgd2hlcmUgdGhlXG4gKiB0aGUgbGFzdCBhY3Rpb24gc2hvdWxkIHdpbiwgYnV0IHlvdSBhbHNvIGRvbid0IHdhbnQgdG8gd2FpdCB1bnRpbCB0aGUgZW5kIG9mXG4gKiB0aGUgaW50ZXJ2YWwgYmVmb3JlIHNlbmRpbmcgYSByZXF1ZXN0IG91dCwgYXMgaXQgbGVhZHMgdG8gYSBwZXJjZXB0aW9uIG9mXG4gKiBzbG93bmVzcyBmb3IgdGhlIHVzZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCAuLi4/KX0gZiBGdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEludGVydmFsIG92ZXIgd2hpY2ggdG8gdGhyb3R0bGUuIFRoZSBmdW5jdGlvbiBjYW5cbiAqICAgICBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBpbnRlcnZhbC5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uPyk6IHVuZGVmaW5lZH0gV3JhcHBlZCBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBTQ09QRVxuICovXG5nb29nLmZ1bmN0aW9ucy50aHJvdHRsZSA9IGZ1bmN0aW9uKGYsIGludGVydmFsLCBvcHRfc2NvcGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBsZXQgdGltZW91dCA9IDA7XG4gIGxldCBzaG91bGRGaXJlID0gZmFsc2U7XG4gIGxldCBzdG9yZWRBcmdzID0gW107XG5cbiAgY29uc3QgaGFuZGxlVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB0aW1lb3V0ID0gMDtcbiAgICBpZiAoc2hvdWxkRmlyZSkge1xuICAgICAgc2hvdWxkRmlyZSA9IGZhbHNlO1xuICAgICAgZmlyZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBmaXJlID0gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHRpbWVvdXQgPSBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIGludGVydmFsKTtcbiAgICBsZXQgYXJncyA9IHN0b3JlZEFyZ3M7XG4gICAgc3RvcmVkQXJncyA9IFtdOyAgLy8gQXZvaWQgYSBzcGFjZSBsZWFrIGJ5IGNsZWFyaW5nIHN0b3JlZCBhcmd1bWVudHMuXG4gICAgZi5hcHBseShvcHRfc2NvcGUsIGFyZ3MpO1xuICB9O1xuXG4gIHJldHVybiAvKiogQHR5cGUge2Z1bmN0aW9uKC4uLj8pfSAqLyAoZnVuY3Rpb24odmFyX2FyZ3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgc3RvcmVkQXJncyA9IGFyZ3VtZW50cztcbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIGZpcmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkRmlyZSA9IHRydWU7XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHRvIGFsbG93IGl0IHRvIGJlIGNhbGxlZCwgYXQgbW9zdCwgb25jZSBwZXIgaW50ZXJ2YWxcbiAqIChzcGVjaWZpZWQgaW4gbWlsbGlzZWNvbmRzKS4gSWYgdGhlIHdyYXBwZXIgZnVuY3Rpb24gaXMgY2FsbGVkIE4gdGltZXMgd2l0aGluXG4gKiB0aGF0IGludGVydmFsLCBvbmx5IHRoZSAxc3QgY2FsbCB3aWxsIGdvIHRocm91Z2guXG4gKlxuICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBsaW1pdGluZyByZXBlYXRlZCB1c2VyIHJlcXVlc3RzIHdoZXJlIHRoZVxuICogZmlyc3QgcmVxdWVzdCBpcyBndWFyYW50ZWVkIHRvIGhhdmUgYWxsIHRoZSBkYXRhIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhlXG4gKiBmaW5hbCBhY3Rpb24sIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byB3YWl0IHVudGlsIHRoZSBlbmQgb2YgdGhlIGludGVydmFsIGJlZm9yZVxuICogc2VuZGluZyB0aGUgcmVxdWVzdCBvdXQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFLCAuLi4/KX0gZiBGdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEludGVydmFsIG92ZXIgd2hpY2ggdG8gcmF0ZS1saW1pdC4gVGhlIGZ1bmN0aW9uIHdpbGxcbiAqICAgICBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBpbnRlcnZhbCwgYW5kIGlnbm9yZWQgZm9yIHRoZSByZW1haW5lciBvZiB0aGVcbiAqICAgICBpbnRlcnZhbC5cbiAqIEBwYXJhbSB7U0NPUEU9fSBvcHRfc2NvcGUgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uPyk6IHVuZGVmaW5lZH0gV3JhcHBlZCBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBTQ09QRVxuICovXG5nb29nLmZ1bmN0aW9ucy5yYXRlTGltaXQgPSBmdW5jdGlvbihmLCBpbnRlcnZhbCwgb3B0X3Njb3BlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgbGV0IHRpbWVvdXQgPSAwO1xuXG4gIGNvbnN0IGhhbmRsZVRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdGltZW91dCA9IDA7XG4gIH07XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7ZnVuY3Rpb24oLi4uPyl9ICovIChmdW5jdGlvbih2YXJfYXJncykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIHRpbWVvdXQgPSBnb29nLmdsb2JhbC5zZXRUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIGludGVydmFsKTtcbiAgICAgIGYuYXBwbHkob3B0X3Njb3BlLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uLlxuICovXG5nb29nLmZ1bmN0aW9ucy5pc0Z1bmN0aW9uID0gKHZhbCkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVdGlsaXR5IHRvIGF0dGVtcHQgbmF0aXZlIEpTT04gcHJvY2Vzc2luZywgZmFsbGluZyBiYWNrIHRvXG4gKiAgICAgZ29vZy5qc29uIGlmIG5vdCBhdmFpbGFibGUuXG4gKlxuICogICAgIFRoaXMgaXMgaW50ZW5kZWQgYXMgYSBkcm9wLWluIGZvciBjdXJyZW50IHVzZXJzIG9mIGdvb2cuanNvbiB3aG8gd2FudFxuICogICAgIHRvIHRha2UgYWR2YW50YWdlIG9mIG5hdGl2ZSBKU09OIGlmIHByZXNlbnQuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmpzb24uaHlicmlkJyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuanNvbicpO1xuXG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gc2VyaWFsaXplIHRoZSBKU09OIHN0cmluZyBuYXRpdmVseSwgZmFsbGluZyBiYWNrIHRvXG4gKiBgZ29vZy5qc29uLnNlcmlhbGl6ZWAgaWYgdW5zdWNjZXNzZnVsLlxuICogQHBhcmFtIHshT2JqZWN0fSBvYmogSmF2YVNjcmlwdCBvYmplY3QgdG8gc2VyaWFsaXplIHRvIEpTT04uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJlc3VsdGluZyBKU09OIHN0cmluZy5cbiAqL1xuZ29vZy5qc29uLmh5YnJpZC5zdHJpbmdpZnkgPSBnb29nLmpzb24uVVNFX05BVElWRV9KU09OID9cbiAgICBnb29nLmdsb2JhbFsnSlNPTiddWydzdHJpbmdpZnknXSA6XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICBpZiAoZ29vZy5nbG9iYWwuSlNPTikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnb29nLmdsb2JhbC5KU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gTmF0aXZlIHNlcmlhbGl6YXRpb24gZmFpbGVkLiAgRmFsbCB0aHJvdWdoIHRvIHJldHJ5IHdpdGhcbiAgICAgICAgICAvLyBnb29nLmpzb24uc2VyaWFsaXplLlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnb29nLmpzb24uc2VyaWFsaXplKG9iaik7XG4gICAgfTtcblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHBhcnNlIHRoZSBKU09OIHN0cmluZyBuYXRpdmVseSwgZmFsbGluZyBiYWNrIHRvXG4gKiB0aGUgc3VwcGxpZWQgYGZhbGxiYWNrUGFyc2VyYCBpZiB1bnN1Y2Nlc3NmdWwuXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvblN0cmluZyBKU09OIHN0cmluZyB0byBwYXJzZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKTpPYmplY3R9IGZhbGxiYWNrUGFyc2VyIEZhbGxiYWNrIEpTT04gcGFyc2VyIHVzZWRcbiAqICAgICBpZiBuYXRpdmVcbiAqIEByZXR1cm4gez9PYmplY3R9IFJlc3VsdGluZyBKU09OIG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cuanNvbi5oeWJyaWQucGFyc2VfID0gZnVuY3Rpb24oanNvblN0cmluZywgZmFsbGJhY2tQYXJzZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoZ29vZy5nbG9iYWwuSlNPTikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgb2JqID0gZ29vZy5nbG9iYWwuSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgIGdvb2cuYXNzZXJ0cy5hc3NlcnQodHlwZW9mIG9iaiA9PSAnb2JqZWN0Jyk7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHs/T2JqZWN0fSAqLyAob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBOYXRpdmUgcGFyc2UgZmFpbGVkLiAgRmFsbCB0aHJvdWdoIHRvIHJldHJ5IHdpdGggZ29vZy5qc29uLnBhcnNlLlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxsYmFja1BhcnNlcihqc29uU3RyaW5nKTtcbn07XG5cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBwYXJzZSB0aGUgSlNPTiBzdHJpbmcgbmF0aXZlbHksIGZhbGxpbmcgYmFjayB0b1xuICogYGdvb2cuanNvbi5wYXJzZWAgaWYgdW5zdWNjZXNzZnVsLlxuICogQHBhcmFtIHtzdHJpbmd9IGpzb25TdHJpbmcgSlNPTiBzdHJpbmcgdG8gcGFyc2UuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBSZXN1bHRpbmcgSlNPTiBvYmplY3QuXG4gKi9cbmdvb2cuanNvbi5oeWJyaWQucGFyc2UgPSBnb29nLmpzb24uVVNFX05BVElWRV9KU09OID9cbiAgICBnb29nLmdsb2JhbFsnSlNPTiddWydwYXJzZSddIDpcbiAgICBmdW5jdGlvbihqc29uU3RyaW5nKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gZ29vZy5qc29uLmh5YnJpZC5wYXJzZV8oanNvblN0cmluZywgZ29vZy5qc29uLnBhcnNlKTtcbiAgICB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnN0YW50cyBmb3IgSFRUUCBzdGF0dXMgY29kZXMuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLm5ldC5IdHRwU3RhdHVzJyk7XG5cblxuLyoqXG4gKiBIVFRQIFN0YXR1cyBDb2RlcyBkZWZpbmVkIGluIFJGQyAyNjE2LCBSRkMgNjU4NSwgUkZDIDQ5MTggYW5kIFJGQyA3NTM4LlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzEwLmh0bWxcbiAqIEBzZWUgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjU4NVxuICogQHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDkxOFxuICogQHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzUzOFxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZ29vZy5uZXQuSHR0cFN0YXR1cyA9IHtcbiAgLy8gSW5mb3JtYXRpb25hbCAxeHhcbiAgQ09OVElOVUU6IDEwMCxcbiAgU1dJVENISU5HX1BST1RPQ09MUzogMTAxLFxuXG4gIC8vIFN1Y2Nlc3NmdWwgMnh4XG4gIE9LOiAyMDAsXG4gIENSRUFURUQ6IDIwMSxcbiAgQUNDRVBURUQ6IDIwMixcbiAgTk9OX0FVVEhPUklUQVRJVkVfSU5GT1JNQVRJT046IDIwMyxcbiAgTk9fQ09OVEVOVDogMjA0LFxuICBSRVNFVF9DT05URU5UOiAyMDUsXG4gIFBBUlRJQUxfQ09OVEVOVDogMjA2LFxuICBNVUxUSV9TVEFUVVM6IDIwNyxcblxuICAvLyBSZWRpcmVjdGlvbiAzeHhcbiAgTVVMVElQTEVfQ0hPSUNFUzogMzAwLFxuICBNT1ZFRF9QRVJNQU5FTlRMWTogMzAxLFxuICBGT1VORDogMzAyLFxuICBTRUVfT1RIRVI6IDMwMyxcbiAgTk9UX01PRElGSUVEOiAzMDQsXG4gIFVTRV9QUk9YWTogMzA1LFxuICBURU1QT1JBUllfUkVESVJFQ1Q6IDMwNyxcbiAgUEVSTUFORU5UX1JFRElSRUNUOiAzMDgsXG5cbiAgLy8gQ2xpZW50IEVycm9yIDR4eFxuICBCQURfUkVRVUVTVDogNDAwLFxuICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgUEFZTUVOVF9SRVFVSVJFRDogNDAyLFxuICBGT1JCSURERU46IDQwMyxcbiAgTk9UX0ZPVU5EOiA0MDQsXG4gIE1FVEhPRF9OT1RfQUxMT1dFRDogNDA1LFxuICBOT1RfQUNDRVBUQUJMRTogNDA2LFxuICBQUk9YWV9BVVRIRU5USUNBVElPTl9SRVFVSVJFRDogNDA3LFxuICBSRVFVRVNUX1RJTUVPVVQ6IDQwOCxcbiAgQ09ORkxJQ1Q6IDQwOSxcbiAgR09ORTogNDEwLFxuICBMRU5HVEhfUkVRVUlSRUQ6IDQxMSxcbiAgUFJFQ09ORElUSU9OX0ZBSUxFRDogNDEyLFxuICBSRVFVRVNUX0VOVElUWV9UT09fTEFSR0U6IDQxMyxcbiAgUkVRVUVTVF9VUklfVE9PX0xPTkc6IDQxNCxcbiAgVU5TVVBQT1JURURfTUVESUFfVFlQRTogNDE1LFxuICBSRVFVRVNUX1JBTkdFX05PVF9TQVRJU0ZJQUJMRTogNDE2LFxuICBFWFBFQ1RBVElPTl9GQUlMRUQ6IDQxNyxcbiAgVU5QUk9DRVNTQUJMRV9FTlRJVFk6IDQyMixcbiAgTE9DS0VEOiA0MjMsXG4gIEZBSUxFRF9ERVBFTkRFTkNZOiA0MjQsXG4gIFBSRUNPTkRJVElPTl9SRVFVSVJFRDogNDI4LFxuICBUT09fTUFOWV9SRVFVRVNUUzogNDI5LFxuICBSRVFVRVNUX0hFQURFUl9GSUVMRFNfVE9PX0xBUkdFOiA0MzEsXG4gIENMSUVOVF9DTE9TRURfUkVRVUVTVDogNDk5LCAgLy8gTm9uc3RhbmRhcmQsIHVzZWQgYnkgR1JQQ1xuXG4gIC8vIFNlcnZlciBFcnJvciA1eHhcbiAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gIE5PVF9JTVBMRU1FTlRFRDogNTAxLFxuICBCQURfR0FURVdBWTogNTAyLFxuICBTRVJWSUNFX1VOQVZBSUxBQkxFOiA1MDMsXG4gIEdBVEVXQVlfVElNRU9VVDogNTA0LFxuICBIVFRQX1ZFUlNJT05fTk9UX1NVUFBPUlRFRDogNTA1LFxuICBJTlNVRkZJQ0lFTlRfU1RPUkFHRTogNTA3LFxuICBORVRXT1JLX0FVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEOiA1MTEsXG5cbiAgLypcbiAgICogSUUgcmV0dXJucyB0aGlzIGNvZGUgZm9yIDIwNCBkdWUgdG8gaXRzIHVzZSBvZiBVUkxNb24sIHdoaWNoIHJldHVybnMgdGhpc1xuICAgKiBjb2RlIGZvciAnT3BlcmF0aW9uIEFib3J0ZWQnLiBUaGUgc3RhdHVzIHRleHQgaXMgJ1Vua25vd24nLCB0aGUgcmVzcG9uc2VcbiAgICogaGVhZGVycyBhcmUgJycuIEtub3duIHRvIG9jY3VyIG9uIElFIDYgb24gWFAgdGhyb3VnaCBJRTkgb24gV2luNy5cbiAgICovXG4gIFFVSVJLX0lFX05PX0NPTlRFTlQ6IDEyMjMsXG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBzdGF0dXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgc3VjY2Vzc2Z1bC5cbiAqXG4gKiBTdWNjZXNzZnVsIGNvZGVzIGFyZSBPSyAoMjAwKSwgQ1JFQVRFRCAoMjAxKSwgQUNDRVBURUQgKDIwMiksXG4gKiBOTyBDT05URU5UICgyMDQpLCBQQVJUSUFMIENPTlRFTlQgKDIwNiksIE5PVCBNT0RJRklFRCAoMzA0KSxcbiAqIGFuZCBJRSdzIG5vIGNvbnRlbnQgY29kZSAoMTIyMykuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyBUaGUgc3RhdHVzIGNvZGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHN0YXR1cyBjb2RlIHNob3VsZCBiZSBjb25zaWRlcmVkIHN1Y2Nlc3NmdWwuXG4gKi9cbmdvb2cubmV0Lkh0dHBTdGF0dXMuaXNTdWNjZXNzID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICBjYXNlIGdvb2cubmV0Lkh0dHBTdGF0dXMuT0s6XG4gICAgY2FzZSBnb29nLm5ldC5IdHRwU3RhdHVzLkNSRUFURUQ6XG4gICAgY2FzZSBnb29nLm5ldC5IdHRwU3RhdHVzLkFDQ0VQVEVEOlxuICAgIGNhc2UgZ29vZy5uZXQuSHR0cFN0YXR1cy5OT19DT05URU5UOlxuICAgIGNhc2UgZ29vZy5uZXQuSHR0cFN0YXR1cy5QQVJUSUFMX0NPTlRFTlQ6XG4gICAgY2FzZSBnb29nLm5ldC5IdHRwU3RhdHVzLk5PVF9NT0RJRklFRDpcbiAgICBjYXNlIGdvb2cubmV0Lkh0dHBTdGF0dXMuUVVJUktfSUVfTk9fQ09OVEVOVDpcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBQcm92aWRlcyBDT1JTIHN1cHBvcnQgZm9yIEhUVFAgYmFzZWQgUlBDIHJlcXVlc3RzLlxuICpcbiAqIEFzIHBhcnQgb2YgbmV0LnJwYyBwYWNrYWdlLCBDT1JTIGZlYXR1cmVzIHByb3ZpZGVkIGJ5IHRoaXMgY2xhc3NcbiAqIGRlcGVuZCBvbiB0aGUgc2VydmVyIHN1cHBvcnQuIFBsZWFzZSBjaGVjayByZWxhdGVkIHNwZWNzIHRvIGRlY2lkZSBob3dcbiAqIHRvIGVuYWJsZSBhbnkgb2YgdGhlIGZlYXR1cmVzIHByb3ZpZGVkIGJ5IHRoaXMgY2xhc3MuXG4gKi9cblxuZ29vZy5tb2R1bGUoJ2dvb2cubmV0LnJwYy5IdHRwQ29ycycpO1xuXG5jb25zdCBHb29nVXJpID0gZ29vZy5yZXF1aXJlKCdnb29nLlVyaScpO1xuY29uc3QgZ29vZ09iamVjdCA9IGdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmNvbnN0IGdvb2dTdHJpbmcgPSBnb29nLnJlcXVpcmUoJ2dvb2cuc3RyaW5nJyk7XG5jb25zdCBnb29nVXJpVXRpbHMgPSBnb29nLnJlcXVpcmUoJ2dvb2cudXJpLnV0aWxzJyk7XG5cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBVUkwgcGFyYW1ldGVyIG5hbWUgdG8gb3ZlcndyaXRlIGh0dHAgaGVhZGVycyB3aXRoIGEgVVJMIHBhcmFtXG4gKiB0byBhdm9pZCBDT1JTIHByZWZsaWdodC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9mZXRjaC9pc3N1ZXMvMjEwI2lzc3VlLTEyOTUzMTc0MyBmb3IgdGhlIHNwZWMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5IVFRQX0hFQURFUlNfUEFSQU1fTkFNRSA9ICckaHR0cEhlYWRlcnMnO1xuXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgVVJMIHBhcmFtZXRlciBuYW1lIHRvIG92ZXJ3cml0ZSBodHRwIG1ldGhvZCB3aXRoIGEgVVJMIHBhcmFtXG4gKiB0byBhdm9pZCBDT1JTIHByZWZsaWdodC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9mZXRjaC9pc3N1ZXMvMjEwI2lzc3VlLTEyOTUzMTc0MyBmb3IgdGhlIHNwZWMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5IVFRQX01FVEhPRF9QQVJBTV9OQU1FID0gJyRodHRwTWV0aG9kJztcblxuXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgVVJMIHBhcmFtZXRlciB2YWx1ZSB3aXRoIGN1c3RvbSBoZWFkZXJzIGVuY29kZWQgYXNcbiAqIEhUVFAvMS4xIGhlYWRlcnMgYmxvY2suXG4gKlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gaGVhZGVycyBUaGUgY3VzdG9tIGhlYWRlcnMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVUkwgcGFyYW0gdG8gb3ZlcndyaXRlIGN1c3RvbSBIVFRQIGhlYWRlcnMuXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVIdHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtID0gZnVuY3Rpb24oaGVhZGVycykge1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGdvb2dPYmplY3QuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0ICs9IGtleTtcbiAgICByZXN1bHQgKz0gJzonO1xuICAgIHJlc3VsdCArPSB2YWx1ZTtcbiAgICByZXN1bHQgKz0gJ1xcclxcbic7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgVVJMLWVuY29kZWQgVVJMIHBhcmFtZXRlciB2YWx1ZSB3aXRoIGN1c3RvbSBoZWFkZXJzIGVuY29kZWQgYXNcbiAqIEhUVFAvMS4xIGhlYWRlcnMgYmxvY2suXG4gKlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gaGVhZGVycyBUaGUgY3VzdG9tIGhlYWRlcnMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVUkwgcGFyYW0gdG8gb3ZlcndyaXRlIGN1c3RvbSBIVFRQIGhlYWRlcnMuXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVFbmNvZGVkSHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSA9IGZ1bmN0aW9uKGhlYWRlcnMpIHtcbiAgcmV0dXJuIGdvb2dTdHJpbmcudXJsRW5jb2RlKFxuICAgICAgZXhwb3J0cy5nZW5lcmF0ZUh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW0oaGVhZGVycykpO1xufTtcblxuXG4vKipcbiAqIFNldHMgY3VzdG9tIEhUVFAgaGVhZGVycyB2aWEgYW4gb3ZlcndyaXRlIFVSTCBwYXJhbS5cbiAqXG4gKiBAcGFyYW0geyFHb29nVXJpfHN0cmluZ30gdXJsIFRoZSBVUkkgb2JqZWN0IG9yIGEgc3RyaW5nIHBhdGguXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsUGFyYW0gVGhlIFVSTCBwYXJhbSBuYW1lLlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gZXh0cmFIZWFkZXJzIFRoZSBIVFRQIGhlYWRlcnMuXG4gKiBAcmV0dXJuIHshR29vZ1VyaXxzdHJpbmd9IFRoZSBVUkkgb2JqZWN0IG9yIGEgc3RyaW5nIHBhdGggd2l0aCBoZWFkZXJzXG4gKiBlbmNvZGVkIGFzIGEgdXJsIHBhcmFtLlxuICovXG5leHBvcnRzLnNldEh0dHBIZWFkZXJzV2l0aE92ZXJ3cml0ZVBhcmFtID0gZnVuY3Rpb24oXG4gICAgdXJsLCB1cmxQYXJhbSwgZXh0cmFIZWFkZXJzKSB7XG4gIGlmIChnb29nT2JqZWN0LmlzRW1wdHkoZXh0cmFIZWFkZXJzKSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgY29uc3QgaHR0cEhlYWRlcnMgPSBleHBvcnRzLmdlbmVyYXRlSHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbShleHRyYUhlYWRlcnMpO1xuICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ29vZ1VyaVV0aWxzLmFwcGVuZFBhcmFtKFxuICAgICAgICB1cmwsIGdvb2dTdHJpbmcudXJsRW5jb2RlKHVybFBhcmFtKSwgaHR0cEhlYWRlcnMpO1xuICB9IGVsc2Uge1xuICAgIHVybC5zZXRQYXJhbWV0ZXJWYWx1ZSh1cmxQYXJhbSwgaHR0cEhlYWRlcnMpOyAgLy8gZHVwbGljYXRlIHJlbW92ZWQhXG4gICAgcmV0dXJuIHVybDtcbiAgfVxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUcmFuc3BvcnQgc3VwcG9ydCBmb3IgV2ViQ2hhbm5lbC5cbiAqXG4gKiBUaGUgPGNvZGU+V2ViQ2hhbm5lbFRyYW5zcG9ydDwvY29kZT4gaW1wbGVtZW50YXRpb24gc2VydmVzIGFzIHRoZSBmYWN0b3J5XG4gKiBmb3IgPGNvZGU+V2ViQ2hhbm5lbDwvY29kZT4sIHdoaWNoIG9mZmVycyBhbiBhYnN0cmFjdGlvbiBmb3JcbiAqIHBvaW50LXRvLXBvaW50IHNvY2tldC1saWtlIGNvbW11bmljYXRpb24gc2ltaWxhciB0byB3aGF0IEJyb3dzZXJDaGFubmVsXG4gKiBvciBIVE1MNSBXZWJTb2NrZXQgb2ZmZXJzLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydCcpO1xuXG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLm5ldC5XZWJDaGFubmVsJyk7XG5nb29nLnJlcXVpcmVUeXBlKCdnb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnMnKTtcblxuXG5cbi8qKlxuICogQSBXZWJDaGFubmVsVHJhbnNwb3J0IGluc3RhbmNlIHJlcHJlc2VudHMgYSBzaGFyZWQgY29udGV4dCBvZiBsb2dpY2FsXG4gKiBjb25uZWN0aXZpdHkgYmV0d2VlbiBhIGJyb3dzZXIgY2xpZW50IGFuZCBhIHJlbW90ZSBvcmlnaW4uXG4gKlxuICogT3ZlciBhIHNpbmdsZSBXZWJDaGFubmVsVHJhbnNwb3J0IGluc3RhbmNlLCBtdWx0aXBsZSBXZWJDaGFubmVscyBtYXkgYmVcbiAqIGNyZWF0ZWQgYWdhaW5zdCBkaWZmZXJlbnQgVVJMcywgd2hpY2ggbWF5IGFsbCBzaGFyZSB0aGUgc2FtZVxuICogdW5kZXJseWluZyBjb25uZWN0aXZpdHkgKGkuZS4gVENQIGNvbm5lY3Rpb24pIHdoZW5ldmVyIHBvc3NpYmxlLlxuICpcbiAqIFdoZW4gbXVsdGktZG9tYWlucyBhcmUgc3VwcG9ydGVkLCBzdWNoIGFzIENPUlMsIG11bHRpcGxlIG9yaWdpbnMgbWF5IGJlXG4gKiBzdXBwb3J0ZWQgb3ZlciBhIHNpbmdsZSBXZWJDaGFubmVsVHJhbnNwb3J0IGluc3RhbmNlIGF0IHRoZSBzYW1lIHRpbWUuXG4gKlxuICogU2hhcmluZyBiZXR3ZWVuIGRpZmZlcmVudCB3aW5kb3cgY29udGV4dHMgc3VjaCBhcyB0YWJzIGlzIG5vdCBhZGRyZXNzZWRcbiAqIGJ5IFdlYkNoYW5uZWxUcmFuc3BvcnQuIEFwcGxpY2F0aW9ucyBtYXkgY2hvb3NlIEhUTUw1IHNoYXJlZCB3b3JrZXJzXG4gKiBvciBvdGhlciB0ZWNobmlxdWVzIHRvIGFjY2VzcyB0aGUgc2FtZSB0cmFuc3BvcnQgaW5zdGFuY2VcbiAqIGFjcm9zcyBkaWZmZXJlbnQgd2luZG93IGNvbnRleHRzLlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydCA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBUaGUgY2xpZW50IHZlcnNpb24uIFRoaXMgaW50ZWdlciB2YWx1ZSB3aWxsIGJlIHBhc3NlZCB0byB0aGUgc2VydmVyXG4gKiB3aGVuIGEgY2hhbm5lbCBpcyBvcGVuZWQgdG8gaW5mb3JtIHRoZSBzZXJ2ZXIgdGhlIGNsaWVudCBcImNhcGFiaWxpdGllc1wiLlxuICpcbiAqIFdpcmUgcHJvdG9jb2wgdmVyc2lvbiBpcyBhIGRpZmZlcmVudCBjb25jZXB0IGFuZCBpcyBpbnRlcm5hbCB0byB0aGVcbiAqIHRyYW5zcG9ydCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmdvb2cubmV0LldlYkNoYW5uZWxUcmFuc3BvcnQuQ0xJRU5UX1ZFUlNJT04gPSAyMjtcblxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBXZWJDaGFubmVsIGluc3RhbmNlLlxuICpcbiAqIFRoZSBuZXcgV2ViQ2hhbm5lbCBpcyB0byBiZSBvcGVuZWQgYWdhaW5zdCB0aGUgc2VydmVyLXNpZGUgcmVzb3VyY2VcbiAqIGFzIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gVVJMLiBTZWUge0BsaW5rIGdvb2cubmV0LldlYkNoYW5uZWx9IGZvciBkZXRhaWxlZFxuICogc2VtYW50aWNzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBwYXRoIGZvciB0aGUgbmV3IFdlYkNoYW5uZWwgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyFnb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnM9fSBvcHRfb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGVcbiAqICAgICBuZXcgV2ViQ2hhbm5lbCBpbnN0YW5jZS4gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGlzIHJldXNhYmxlIGFmdGVyXG4gKiAgICAgdGhlIG5ldyBjaGFubmVsIGluc3RhbmNlIGlzIGNyZWF0ZWQuXG4gKiBAcmV0dXJuIHshZ29vZy5uZXQuV2ViQ2hhbm5lbH0gdGhlIG5ld2x5IGNyZWF0ZWQgV2ViQ2hhbm5lbCBpbnN0YW5jZS5cbiAqL1xuZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydC5wcm90b3R5cGUuY3JlYXRlV2ViQ2hhbm5lbCA9IGdvb2cuYWJzdHJhY3RNZXRob2Q7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgSW1wbGVtZW50YXRpb24gb2YgYSBXZWJDaGFubmVsIHRyYW5zcG9ydCB1c2luZyBXZWJDaGFubmVsQmFzZS5cbiAqXG4gKiBXaGVuIFdlYkNoYW5uZWxCYXNlIGlzIHVzZWQgYXMgdGhlIHVuZGVybHlpbmcgdHJhbnNwb3J0LCB0aGUgY2FwYWJpbGl0aWVzXG4gKiBvZiB0aGUgV2ViQ2hhbm5lbCBhcmUgbGltaXRlZCB0byB3aGF0J3Mgc3VwcG9ydGVkIGJ5IHRoZSBpbXBsZW1lbnRhdGlvbi5cbiAqIFBhcnRpY3VsYXJseSwgbXVsdGlwbGV4aW5nIGlzIG5vdCBwb3NzaWJsZSwgYW5kIG9ubHkgc3RyaW5ncyBhcmVcbiAqIHN1cHBvcnRlZCBhcyBtZXNzYWdlIHR5cGVzLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0Jyk7XG5cbmdvb2cucmVxdWlyZSgnZ29vZy5hc3NlcnRzJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cuY29sbGVjdGlvbnMubWFwcycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudFRhcmdldCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmpzb24nKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLkNoYW5uZWxSZXF1ZXN0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2lyZScpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxvZycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5XZWJDaGFubmVsJyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LldlYkNoYW5uZWxUcmFuc3BvcnQnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5vYmplY3QnKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5zdHJpbmcnKTtcblxuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIGdvb2cubmV0LldlYkNoYW5uZWxUcmFuc3BvcnR9IHdpdGhcbiAqIHtAbGluayBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2V9IGFzIHRoZSB1bmRlcmx5aW5nIGNoYW5uZWxcbiAqIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICogQGltcGxlbWVudHMge2dvb2cubmV0LldlYkNoYW5uZWxUcmFuc3BvcnR9XG4gKiBAZmluYWxcbiAqL1xuZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuQ2hhbm5lbFJlcXVlc3Quc3VwcG9ydHNYaHJTdHJlYW1pbmcoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW52aXJvbm1lbnRhbCBlcnJvcjogbm8gYXZhaWxhYmxlIHRyYW5zcG9ydC4nKTtcbiAgfVxufTtcblxuXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuY29uc3QgV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQgPVxuICAgIGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydDtcbmNvbnN0IFdlYkNoYW5uZWxCYXNlID0gZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlO1xuY29uc3QgV2lyZSA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XaXJlO1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5jcmVhdGVXZWJDaGFubmVsID0gZnVuY3Rpb24oXG4gICAgdXJsLCBvcHRfb3B0aW9ucykge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBuZXcgV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbCh1cmwsIG9wdF9vcHRpb25zKTtcbn07XG5cblxuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgZ29vZy5uZXQuV2ViQ2hhbm5lbH0gaW50ZXJmYWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBwYXRoIGZvciB0aGUgbmV3IFdlYkNoYW5uZWwgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyFnb29nLm5ldC5XZWJDaGFubmVsLk9wdGlvbnM9fSBvcHRfb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGVcbiAqICAgICBuZXcgV2ViQ2hhbm5lbCBpbnN0YW5jZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtnb29nLm5ldC5XZWJDaGFubmVsfVxuICogQGV4dGVuZHMge2dvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0fVxuICogQGZpbmFsXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwgPSBmdW5jdGlvbih1cmwsIG9wdF9vcHRpb25zKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicpO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7IVdlYkNoYW5uZWxCYXNlfSBUaGUgdW5kZXJseWluZyBjaGFubmVsIG9iamVjdC5cbiAgICovXG4gIHRoaXMuY2hhbm5lbF8gPSBuZXcgV2ViQ2hhbm5lbEJhc2UoXG4gICAgICBvcHRfb3B0aW9ucywgZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydC5DTElFTlRfVkVSU0lPTik7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIHRhcmdldCBzZXJ2ZXIgZW5kLXBvaW50LlxuICAgKi9cbiAgdGhpcy51cmxfID0gdXJsO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7Z29vZy5sb2cuTG9nZ2VyfSBUaGUgbG9nZ2VyIGZvciB0aGlzIGNsYXNzLlxuICAgKi9cbiAgdGhpcy5sb2dnZXJfID1cbiAgICAgIGdvb2cubG9nLmdldExvZ2dlcignZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0Jyk7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBFeHRyYSBVUkwgcGFyYW1ldGVyc1xuICAgKiB0byBiZSBhZGRlZCB0byBlYWNoIEhUVFAgcmVxdWVzdC5cbiAgICovXG4gIHRoaXMubWVzc2FnZVVybFBhcmFtc18gPVxuICAgICAgKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLm1lc3NhZ2VVcmxQYXJhbXMpIHx8IG51bGw7XG5cbiAgbGV0IG1lc3NhZ2VIZWFkZXJzID0gKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLm1lc3NhZ2VIZWFkZXJzKSB8fCBudWxsO1xuXG4gIC8vIGRlZmF1bHQgaXMgZmFsc2VcbiAgaWYgKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLmNsaWVudFByb3RvY29sSGVhZGVyUmVxdWlyZWQpIHtcbiAgICBpZiAobWVzc2FnZUhlYWRlcnMpIHtcbiAgICAgIGdvb2cub2JqZWN0LnNldChcbiAgICAgICAgICBtZXNzYWdlSGVhZGVycywgZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX0NMSUVOVF9QUk9UT0NPTCxcbiAgICAgICAgICBnb29nLm5ldC5XZWJDaGFubmVsLlhfQ0xJRU5UX1BST1RPQ09MX1dFQl9DSEFOTkVMKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZUhlYWRlcnMgPSBnb29nLm9iamVjdC5jcmVhdGUoXG4gICAgICAgICAgZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX0NMSUVOVF9QUk9UT0NPTCxcbiAgICAgICAgICBnb29nLm5ldC5XZWJDaGFubmVsLlhfQ0xJRU5UX1BST1RPQ09MX1dFQl9DSEFOTkVMKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmNoYW5uZWxfLnNldEV4dHJhSGVhZGVycyhtZXNzYWdlSGVhZGVycyk7XG5cbiAgbGV0IGluaXRIZWFkZXJzID0gKG9wdF9vcHRpb25zICYmIG9wdF9vcHRpb25zLmluaXRNZXNzYWdlSGVhZGVycykgfHwgbnVsbDtcblxuICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMubWVzc2FnZUNvbnRlbnRUeXBlKSB7XG4gICAgaWYgKGluaXRIZWFkZXJzKSB7XG4gICAgICBnb29nLm9iamVjdC5zZXQoXG4gICAgICAgICAgaW5pdEhlYWRlcnMsIGdvb2cubmV0LldlYkNoYW5uZWwuWF9XRUJDSEFOTkVMX0NPTlRFTlRfVFlQRSxcbiAgICAgICAgICBvcHRfb3B0aW9ucy5tZXNzYWdlQ29udGVudFR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0SGVhZGVycyA9IGdvb2cub2JqZWN0LmNyZWF0ZShcbiAgICAgICAgICBnb29nLm5ldC5XZWJDaGFubmVsLlhfV0VCQ0hBTk5FTF9DT05URU5UX1RZUEUsXG4gICAgICAgICAgb3B0X29wdGlvbnMubWVzc2FnZUNvbnRlbnRUeXBlKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMuY2xpZW50UHJvZmlsZSkge1xuICAgIGlmIChpbml0SGVhZGVycykge1xuICAgICAgZ29vZy5vYmplY3Quc2V0KFxuICAgICAgICAgIGluaXRIZWFkZXJzLCBnb29nLm5ldC5XZWJDaGFubmVsLlhfV0VCQ0hBTk5FTF9DTElFTlRfUFJPRklMRSxcbiAgICAgICAgICBvcHRfb3B0aW9ucy5jbGllbnRQcm9maWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdEhlYWRlcnMgPSBnb29nLm9iamVjdC5jcmVhdGUoXG4gICAgICAgICAgZ29vZy5uZXQuV2ViQ2hhbm5lbC5YX1dFQkNIQU5ORUxfQ0xJRU5UX1BST0ZJTEUsXG4gICAgICAgICAgb3B0X29wdGlvbnMuY2xpZW50UHJvZmlsZSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5jaGFubmVsXy5zZXRJbml0SGVhZGVycyhpbml0SGVhZGVycyk7XG5cbiAgY29uc3QgaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSA9XG4gICAgICBvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5odHRwSGVhZGVyc092ZXJ3cml0ZVBhcmFtO1xuICBpZiAoaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSAmJlxuICAgICAgIWdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UoaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSkpIHtcbiAgICB0aGlzLmNoYW5uZWxfLnNldEh0dHBIZWFkZXJzT3ZlcndyaXRlUGFyYW0oaHR0cEhlYWRlcnNPdmVyd3JpdGVQYXJhbSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGUge2Jvb2xlYW59IFdoZXRoZXIgdG8gZW5hYmxlIENPUlMuXG4gICAqL1xuICB0aGlzLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJfID1cbiAgICAgIChvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5zdXBwb3J0c0Nyb3NzRG9tYWluWGhyKSB8fCBmYWxzZTtcblxuICAvKipcbiAgICogQHByaXZhdGUge2Jvb2xlYW59IFdoZXRoZXIgdG8gc2VuZCByYXcgSnNvbiBhbmQgYnlwYXNzIHY4IHdpcmUgZm9ybWF0LlxuICAgKi9cbiAgdGhpcy5zZW5kUmF3SnNvbl8gPSAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMuc2VuZFJhd0pzb24pIHx8IGZhbHNlO1xuXG4gIC8vIE5vdGUgdGhhdCBodHRwU2Vzc2lvbklkUGFyYW0gd2lsbCBiZSBpZ25vcmVkIGlmIHRoZSBzYW1lIHBhcmFtZXRlciBuYW1lXG4gIC8vIGhhcyBhbHJlYWR5IGJlZW4gc3BlY2lmaWVkIHdpdGggbWVzc2FnZVVybFBhcmFtc1xuICBjb25zdCBodHRwU2Vzc2lvbklkUGFyYW0gPSBvcHRfb3B0aW9ucyAmJiBvcHRfb3B0aW9ucy5odHRwU2Vzc2lvbklkUGFyYW07XG4gIGlmIChodHRwU2Vzc2lvbklkUGFyYW0gJiZcbiAgICAgICFnb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlKGh0dHBTZXNzaW9uSWRQYXJhbSkpIHtcbiAgICB0aGlzLmNoYW5uZWxfLnNldEh0dHBTZXNzaW9uSWRQYXJhbShodHRwU2Vzc2lvbklkUGFyYW0pO1xuICAgIGlmIChnb29nLm9iamVjdC5jb250YWluc0tleSh0aGlzLm1lc3NhZ2VVcmxQYXJhbXNfLCBodHRwU2Vzc2lvbklkUGFyYW0pKSB7XG4gICAgICBnb29nLm9iamVjdC5yZW1vdmUodGhpcy5tZXNzYWdlVXJsUGFyYW1zXywgaHR0cFNlc3Npb25JZFBhcmFtKTtcbiAgICAgIGdvb2cubG9nLndhcm5pbmcoXG4gICAgICAgICAgdGhpcy5sb2dnZXJfLFxuICAgICAgICAgICdJZ25vcmUgaHR0cFNlc3Npb25JZFBhcmFtIGFsc28gc3BlY2lmaWVkIHdpdGggbWVzc2FnZVVybFBhcmFtczogJyArXG4gICAgICAgICAgICAgIGh0dHBTZXNzaW9uSWRQYXJhbSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjaGFubmVsIGhhbmRsZXIuXG4gICAqXG4gICAqIEBwcml2YXRlIHshV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyX31cbiAgICovXG4gIHRoaXMuY2hhbm5lbEhhbmRsZXJfID0gbmV3IFdlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwuSGFuZGxlcl8odGhpcyk7XG59O1xuZ29vZy5pbmhlcml0cyhXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLCBnb29nLmV2ZW50cy5FdmVudFRhcmdldCk7XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbF8uc2V0SGFuZGxlcih0aGlzLmNoYW5uZWxIYW5kbGVyXyk7XG4gIGlmICh0aGlzLnN1cHBvcnRzQ3Jvc3NEb21haW5YaHJfKSB7XG4gICAgdGhpcy5jaGFubmVsXy5zZXRTdXBwb3J0c0Nyb3NzRG9tYWluWGhycyh0cnVlKTtcbiAgfVxuICB0aGlzLmNoYW5uZWxfLmNvbm5lY3QodGhpcy51cmxfLCAodGhpcy5tZXNzYWdlVXJsUGFyYW1zXyB8fCB1bmRlZmluZWQpKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0aGlzLmNoYW5uZWxfLmRpc2Nvbm5lY3QoKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUuaGFsZkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdG8gYmUgaW1wbGVtZW50ZWRcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblxuLyoqXG4gKiBUaGUgV2ViQ2hhbm5lbEJhc2Ugb25seSBzdXBwb3J0cyBvYmplY3QgdHlwZXMuXG4gKlxuICogQHBhcmFtIHshZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRGF0YX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kLlxuICpcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbF8uc2VuZE1hcCh0aGlzLm1lc3NhZ2VUb01hcE9iamVjdF8obWVzc2FnZSkpO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIGEgbWVzc2FnZSB0byB0aGUgbWFwIHVzZWQgYnkgdGhlIHVuZGVybHlpbmcgY2hhbm5lbC5cbiAqXG4gKiBAcGFyYW0geyFnb29nLm5ldC5XZWJDaGFubmVsLk1lc3NhZ2VEYXRhfSBtZXNzYWdlXG4gKiBAcmV0dXJuIHshT2JqZWN0fCFnb29nLmNvbGxlY3Rpb25zLm1hcHMuTWFwTGlrZX1cbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUubWVzc2FnZVRvTWFwT2JqZWN0XyA9IGZ1bmN0aW9uKFxuICAgIG1lc3NhZ2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmFzc2VydHMuYXNzZXJ0KFxuICAgICAgZ29vZy5pc09iamVjdChtZXNzYWdlKSB8fCB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycsXG4gICAgICAnb25seSBvYmplY3QgdHlwZSBvciByYXcgc3RyaW5nIGlzIHN1cHBvcnRlZCcpO1xuXG4gIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCByYXdKc29uID0ge307XG4gICAgcmF3SnNvbltXaXJlLlJBV19EQVRBX0tFWV0gPSBtZXNzYWdlO1xuICAgIHJldHVybiByYXdKc29uO1xuICB9XG5cbiAgaWYgKHRoaXMuc2VuZFJhd0pzb25fKSB7XG4gICAgY29uc3QgcmF3SnNvbiA9IHt9O1xuICAgIHJhd0pzb25bV2lyZS5SQVdfREFUQV9LRVldID0gZ29vZy5qc29uLnNlcmlhbGl6ZShtZXNzYWdlKTtcbiAgICByZXR1cm4gcmF3SnNvbjtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlO1xufTtcblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBtYXAgdXNlZCBieSB0aGUgdW5kZXJseWluZyBjaGFubmVsIHRvIGEgbWVzc2FnZS5cbiAqXG4gKiBOT1RFOiBJbiB0aGUgY2FzZSBvZiB0aGUgbWVzc2FnZSBiZWluZyBKUyBPYmplY3Qgb3Igc3RyaW5nLCB0aGUgZXhhY3Qgc2FtZVxuICogb2JqZWN0IHBhc3NlZCBkdXJpbmcgYG1lc3NhZ2VUb01hcE9iamVjdF8oKWAgaXMgcmV0dXJuZWQuIEluIHRoZSBjYXNlIG9mIHJhd1xuICogSlNPTiwgYW4gZXF1YWwgKGJ1dCBub3QgdGhlIHNhbWUpIG9iamVjdCBpcyByZXR1cm5lZCAoZHVlIHRvIHNlcmlhbGl6YXRpb24pLlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdHwhZ29vZy5jb2xsZWN0aW9ucy5tYXBzLk1hcExpa2V9IG1hcFxuICogQHJldHVybiB7IWdvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZURhdGF9XG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwucHJvdG90eXBlLm1hcE9iamVjdFRvTWVzc2FnZV8gPSBmdW5jdGlvbihtYXApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoV2lyZS5SQVdfREFUQV9LRVkgaW4gbWFwKSB7XG4gICAgY29uc3QgcmF3TWVzc2FnZSA9IG1hcFtXaXJlLlJBV19EQVRBX0tFWV07XG5cbiAgICBpZiAodGhpcy5zZW5kUmF3SnNvbl8pIHtcbiAgICAgIHJldHVybiAvKiogQHR5cGUgeyFnb29nLm5ldC5XZWJDaGFubmVsLk1lc3NhZ2VEYXRhfSAqLyAoXG4gICAgICAgICAgZ29vZy5qc29uLnBhcnNlKHJhd01lc3NhZ2UpKTtcbiAgICB9IGVsc2UgeyAgLy8gc3RyaW5nIG1lc3NhZ2VcbiAgICAgIHJldHVybiByYXdNZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXA7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHRoaXMuY2hhbm5lbF8uc2V0SGFuZGxlcihudWxsKTtcbiAgZGVsZXRlIHRoaXMuY2hhbm5lbEhhbmRsZXJfO1xuICB0aGlzLmNoYW5uZWxfLmRpc2Nvbm5lY3QoKTtcbiAgZGVsZXRlIHRoaXMuY2hhbm5lbF87XG5cbiAgV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5iYXNlKHRoaXMsICdkaXNwb3NlSW50ZXJuYWwnKTtcbn07XG5cblxuXG4vKipcbiAqIFRoZSBtZXNzYWdlIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PD8+fCFPYmplY3R9IGFycmF5IFRoZSBkYXRhIGFycmF5IGZyb20gdGhlIHVuZGVybHlpbmcgY2hhbm5lbC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge2dvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZUV2ZW50fVxuICogQGZpbmFsXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwuTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLk1lc3NhZ2VFdmVudC5iYXNlKHRoaXMsICdjb25zdHJ1Y3RvcicpO1xuXG4gIC8vIHNpbmdsZS1tZXRhZGF0YSBvbmx5XG4gIGNvbnN0IG1ldGFkYXRhID0gYXJyYXlbJ19fc21fXyddO1xuICBpZiAobWV0YWRhdGEpIHtcbiAgICB0aGlzLm1ldGFkYXRhS2V5ID0gZ29vZy5vYmplY3QuZ2V0QW55S2V5KG1ldGFkYXRhKTtcbiAgICBpZiAodGhpcy5tZXRhZGF0YUtleSkge1xuICAgICAgdGhpcy5kYXRhID0gZ29vZy5vYmplY3QuZ2V0KG1ldGFkYXRhLCB0aGlzLm1ldGFkYXRhS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGE7ICAvLyBlbXB0eVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRhdGEgPSBhcnJheTtcbiAgfVxufTtcbmdvb2cuaW5oZXJpdHMoXG4gICAgV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5NZXNzYWdlRXZlbnQsXG4gICAgZ29vZy5uZXQuV2ViQ2hhbm5lbC5NZXNzYWdlRXZlbnQpO1xuXG5cblxuLyoqXG4gKiBUaGUgZXJyb3IgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtXZWJDaGFubmVsQmFzZS5FcnJvcn0gZXJyb3IgVGhlIGVycm9yIGNvZGUuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtnb29nLm5ldC5XZWJDaGFubmVsLkVycm9yRXZlbnR9XG4gKiBAZmluYWxcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5FcnJvckV2ZW50ID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLkVycm9yRXZlbnQuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InKTtcblxuICAvKipcbiAgICogSGlnaC1sZXZlbCBzdGF0dXMgY29kZS5cbiAgICovXG4gIHRoaXMuc3RhdHVzID0gZ29vZy5uZXQuV2ViQ2hhbm5lbC5FcnJvclN0YXR1cy5ORVRXT1JLX0VSUk9SO1xuXG4gIC8qKlxuICAgKiBAY29uc3Qge1dlYkNoYW5uZWxCYXNlLkVycm9yfSBJbnRlcm5hbCBlcnJvciBjb2RlLCBmb3IgZGVidWdnaW5nIHVzZSBvbmx5LlxuICAgKi9cbiAgdGhpcy5lcnJvckNvZGUgPSBlcnJvcjtcbn07XG5nb29nLmluaGVyaXRzKFxuICAgIFdlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwuRXJyb3JFdmVudCwgZ29vZy5uZXQuV2ViQ2hhbm5lbC5FcnJvckV2ZW50KTtcblxuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFdlYkNoYW5uZWxCYXNlLkhhbmRsZXJ9IGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0geyFXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsfSBjaGFubmVsIFRoZSBlbmNsb3NpbmcgV2ViQ2hhbm5lbC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtXZWJDaGFubmVsQmFzZS5IYW5kbGVyfVxuICogQHByaXZhdGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyXyA9IGZ1bmN0aW9uKGNoYW5uZWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLkhhbmRsZXJfLmJhc2UodGhpcywgJ2NvbnN0cnVjdG9yJyk7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHshV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2hhbm5lbF8gPSBjaGFubmVsO1xufTtcbmdvb2cuaW5oZXJpdHMoV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyXywgV2ViQ2hhbm5lbEJhc2UuSGFuZGxlcik7XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyXy5wcm90b3R5cGUuY2hhbm5lbE9wZW5lZCA9IGZ1bmN0aW9uKFxuICAgIGNoYW5uZWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnb29nLmxvZy5pbmZvKFxuICAgICAgdGhpcy5jaGFubmVsXy5sb2dnZXJfLCAnV2ViQ2hhbm5lbCBvcGVuZWQgb24gJyArIHRoaXMuY2hhbm5lbF8udXJsXyk7XG4gIHRoaXMuY2hhbm5lbF8uZGlzcGF0Y2hFdmVudChnb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZS5PUEVOKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyXy5wcm90b3R5cGUuY2hhbm5lbEhhbmRsZUFycmF5ID1cbiAgICBmdW5jdGlvbihjaGFubmVsLCBhcnJheSkge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cuYXNzZXJ0cy5hc3NlcnQoYXJyYXksICdhcnJheSBleHBlY3RlZCB0byBiZSBkZWZpbmVkJyk7XG4gIHRoaXMuY2hhbm5lbF8uZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLk1lc3NhZ2VFdmVudChhcnJheSkpO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLkhhbmRsZXJfLnByb3RvdHlwZS5jaGFubmVsRXJyb3IgPSBmdW5jdGlvbihcbiAgICBjaGFubmVsLCBlcnJvcikge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubG9nLmluZm8oXG4gICAgICB0aGlzLmNoYW5uZWxfLmxvZ2dlcl8sXG4gICAgICAnV2ViQ2hhbm5lbCBhYm9ydGVkIG9uICcgKyB0aGlzLmNoYW5uZWxfLnVybF8gK1xuICAgICAgICAgICcgZHVlIHRvIGNoYW5uZWwgZXJyb3I6ICcgKyBlcnJvcik7XG4gIHRoaXMuY2hhbm5lbF8uZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLkVycm9yRXZlbnQoZXJyb3IpKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5IYW5kbGVyXy5wcm90b3R5cGUuY2hhbm5lbENsb3NlZCA9IGZ1bmN0aW9uKFxuICAgIGNoYW5uZWwsIG9wdF9wZW5kaW5nTWFwcywgb3B0X3VuZGVsaXZlcmVkTWFwcykge1xuICAndXNlIHN0cmljdCc7XG4gIGdvb2cubG9nLmluZm8oXG4gICAgICB0aGlzLmNoYW5uZWxfLmxvZ2dlcl8sICdXZWJDaGFubmVsIGNsb3NlZCBvbiAnICsgdGhpcy5jaGFubmVsXy51cmxfKTtcbiAgdGhpcy5jaGFubmVsXy5kaXNwYXRjaEV2ZW50KGdvb2cubmV0LldlYkNoYW5uZWwuRXZlbnRUeXBlLkNMT1NFKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUuZ2V0UnVudGltZVByb3BlcnRpZXMgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbmV3IFdlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWxQcm9wZXJ0aWVzKHRoaXMsIHRoaXMuY2hhbm5lbF8pO1xufTtcblxuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBnb29nLm5ldC5XZWJDaGFubmVsLlJ1bnRpbWVQcm9wZXJ0aWVzfS5cbiAqXG4gKiBAcGFyYW0geyFXZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsfSB0cmFuc3BvcnRDaGFubmVsIFRoZSB0cmFuc3BvcnRcbiAqICAgICBjaGFubmVsIG9iamVjdC5cbiAqIEBwYXJhbSB7IVdlYkNoYW5uZWxCYXNlfSBjaGFubmVsIFRoZSB1bmRlcmx5aW5nIGNoYW5uZWwgb2JqZWN0LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGltcGxlbWVudHMge2dvb2cubmV0LldlYkNoYW5uZWwuUnVudGltZVByb3BlcnRpZXN9XG4gKiBAZmluYWxcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbFByb3BlcnRpZXMgPSBmdW5jdGlvbihcbiAgICB0cmFuc3BvcnRDaGFubmVsLCBjaGFubmVsKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyoqXG4gICAqIFRoZSB0cmFuc3BvcnQgY2hhbm5lbCBvYmplY3QuXG4gICAqXG4gICAqIEBwcml2YXRlIEBjb25zdCB7IVdlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWx9XG4gICAqL1xuICB0aGlzLnRyYW5zcG9ydENoYW5uZWxfID0gdHJhbnNwb3J0Q2hhbm5lbDtcblxuICAvKipcbiAgICogVGhlIHVuZGVybHlpbmcgY2hhbm5lbCBvYmplY3QuXG4gICAqXG4gICAqIEBwcml2YXRlIEBjb25zdCB7IVdlYkNoYW5uZWxCYXNlfVxuICAgKi9cbiAgdGhpcy5jaGFubmVsXyA9IGNoYW5uZWw7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWxQcm9wZXJ0aWVzLnByb3RvdHlwZS5nZXRDb25jdXJyZW50UmVxdWVzdExpbWl0ID1cbiAgICBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jaGFubmVsXy5nZXRGb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sKCkuZ2V0TWF4U2l6ZSgpO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsUHJvcGVydGllcy5wcm90b3R5cGUuaXNTcGR5RW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmdldENvbmN1cnJlbnRSZXF1ZXN0TGltaXQoKSA+IDE7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWxQcm9wZXJ0aWVzLnByb3RvdHlwZS5nZXRQZW5kaW5nUmVxdWVzdENvdW50ID1cbiAgICBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jaGFubmVsXy5nZXRGb3J3YXJkQ2hhbm5lbFJlcXVlc3RQb29sKCkuZ2V0UmVxdWVzdENvdW50KCk7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKiBAcmV0dXJuIHshQXJyYXk8IWdvb2cubmV0LldlYkNoYW5uZWwuTWVzc2FnZURhdGE+fVxuICovXG5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsUHJvcGVydGllcy5wcm90b3R5cGUuZ2V0Tm9uQWNrZWRNZXNzYWdlcyA9XG4gICAgZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuY2hhbm5lbF8uZ2V0Tm9uQWNrZWRNYXBzKCkubWFwKFxuICAgICAgcXVldWVkX21hcCA9PiB0aGlzLnRyYW5zcG9ydENoYW5uZWxfLm1hcE9iamVjdFRvTWVzc2FnZV8ocXVldWVkX21hcC5tYXApKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbFByb3BlcnRpZXMucHJvdG90eXBlLmdldEh0dHBTZXNzaW9uSWQgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmNoYW5uZWxfLmdldEh0dHBTZXNzaW9uSWQoKTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbFByb3BlcnRpZXMucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uKFxuICAgIGNhbGxiYWNrKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jaGFubmVsXy5zZXRGb3J3YXJkQ2hhbm5lbEZsdXNoQ2FsbGJhY2soY2FsbGJhY2spO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsUHJvcGVydGllcy5wcm90b3R5cGUubm90aWZ5Tm9uQWNrZWRNZXNzYWdlQ291bnQgPVxuICAgIGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbFByb3BlcnRpZXMucHJvdG90eXBlLm9uQ29tbWl0ID1cbiAgICBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWxQcm9wZXJ0aWVzLnByb3RvdHlwZS5hY2tDb21taXQgPVxuICAgIGdvb2cuYWJzdHJhY3RNZXRob2Q7XG5cblxuLyoqIEBvdmVycmlkZSAqL1xuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbFByb3BlcnRpZXMucHJvdG90eXBlLmdldExhc3RTdGF0dXNDb2RlID1cbiAgICBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jaGFubmVsXy5nZXRMYXN0U3RhdHVzQ29kZSgpO1xufTtcbn0pOyAgLy8gZ29vZy5zY29wZVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEFic3RyYWN0IGNyeXB0b2dyYXBoaWMgaGFzaCBpbnRlcmZhY2UuXG4gKlxuICogU2VlIGdvb2cuY3J5cHQuU2hhMSBhbmQgZ29vZy5jcnlwdC5NZDUgZm9yIHNhbXBsZSBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmNyeXB0Lkhhc2gnKTtcblxuXG5cbi8qKlxuICogQ3JlYXRlIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIGluc3RhbmNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICovXG5nb29nLmNyeXB0Lkhhc2ggPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKipcbiAgICogVGhlIGJsb2NrIHNpemUgZm9yIHRoZSBoYXNoZXIuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLmJsb2NrU2l6ZSA9IC0xO1xufTtcblxuXG4vKipcbiAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgYWNjdW11bGF0b3IuXG4gKi9cbmdvb2cuY3J5cHQuSGFzaC5wcm90b3R5cGUucmVzZXQgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogQWRkcyBhIGJ5dGUgYXJyYXkgKGFycmF5IHdpdGggdmFsdWVzIGluIFswLTI1NV0gcmFuZ2UpIG9yIGEgc3RyaW5nIChtdXN0XG4gKiBvbmx5IGNvbnRhaW4gOC1iaXQsIGkuZS4sIExhdGluMSBjaGFyYWN0ZXJzKSB0byB0aGUgaW50ZXJuYWwgYWNjdW11bGF0b3IuXG4gKlxuICogTWFueSBoYXNoIGZ1bmN0aW9ucyBvcGVyYXRlIG9uIGJsb2NrcyBvZiBkYXRhIGFuZCBpbXBsZW1lbnQgb3B0aW1pemF0aW9uc1xuICogd2hlbiBhIGZ1bGwgY2h1bmsgb2YgZGF0YSBpcyByZWFkaWx5IGF2YWlsYWJsZS4gSGVuY2UgaXQgaXMgb2Z0ZW4gcHJlZmVyYWJsZVxuICogdG8gcHJvdmlkZSBsYXJnZSBjaHVua3Mgb2YgZGF0YSAoYSBraWxvYnl0ZSBvciBtb3JlKSB0aGFuIHRvIHJlcGVhdGVkbHlcbiAqIGNhbGwgdGhlIHVwZGF0ZSBtZXRob2Qgd2l0aCBmZXcgdGVucyBvZiBieXRlcy4gSWYgdGhpcyBpcyBub3QgcG9zc2libGUsIG9yXG4gKiBub3QgZmVhc2libGUsIGl0IG1pZ2h0IGJlIGdvb2QgdG8gcHJvdmlkZSBkYXRhIGluIG11bHRpcGxpZXMgb2YgaGFzaCBibG9ja1xuICogc2l6ZSAob2Z0ZW4gNjQgYnl0ZXMpLiBQbGVhc2Ugc2VlIHRoZSBpbXBsZW1lbnRhdGlvbiBhbmQgcGVyZm9ybWFuY2UgdGVzdHNcbiAqIG9mIHlvdXIgZmF2b3VyaXRlIGhhc2guXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fFVpbnQ4QXJyYXl8c3RyaW5nfSBieXRlcyBEYXRhIHVzZWQgZm9yIHRoZSB1cGRhdGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9sZW5ndGggTnVtYmVyIG9mIGJ5dGVzIHRvIHVzZS5cbiAqL1xuZ29vZy5jcnlwdC5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBnb29nLmFic3RyYWN0TWV0aG9kO1xuXG5cbi8qKlxuICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IFRoZSBmaW5hbGl6ZWQgaGFzaCBjb21wdXRlZFxuICogICAgIGZyb20gdGhlIGludGVybmFsIGFjY3VtdWxhdG9yLlxuICovXG5nb29nLmNyeXB0Lkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGdvb2cuYWJzdHJhY3RNZXRob2Q7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgTUQ1IGNyeXB0b2dyYXBoaWMgaGFzaC5cbiAqIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEzMjEgd2l0aCBjb21tb25cbiAqIG9wdGltaXphdGlvbnMgYW5kIHR3ZWFrcyAoc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTUQ1KS5cbiAqXG4gKiBVc2FnZTpcbiAqICAgdmFyIG1kNSA9IG5ldyBnb29nLmNyeXB0Lk1kNSgpO1xuICogICBtZDUudXBkYXRlKGJ5dGVzKTtcbiAqICAgdmFyIGhhc2ggPSBtZDUuZGlnZXN0KCk7XG4gKlxuICogUGVyZm9ybWFuY2U6XG4gKiAgIENocm9tZSAyMyAgICAgICAgICAgICAgfjY4MCBNYml0L3NcbiAqICAgQ2hyb21lIDEzIChpbiBhIFZNKSAgICB+MjUwIE1iaXQvc1xuICogICBGaXJlZm94IDYuMCAoaW4gYSBWTSkgIH4xMDAgTWJpdC9zXG4gKiAgIElFOSAoaW4gYSBWTSkgICAgICAgICAgIH4yNyBNYml0L3NcbiAqICAgRmlyZWZveCAzLjYgICAgICAgICAgICAgfjE1IE1iaXQvc1xuICogICBJRTggKGluIGEgVk0pICAgICAgICAgICB+MTMgTWJpdC9zXG4gKi9cblxuZ29vZy5wcm92aWRlKCdnb29nLmNyeXB0Lk1kNScpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuY3J5cHQuSGFzaCcpO1xuXG5cblxuLyoqXG4gKiBNRDUgY3J5cHRvZ3JhcGhpYyBoYXNoIGNvbnN0cnVjdG9yLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7Z29vZy5jcnlwdC5IYXNofVxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmdvb2cuY3J5cHQuTWQ1ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ29vZy5jcnlwdC5NZDUuYmFzZSh0aGlzLCAnY29uc3RydWN0b3InKTtcblxuICB0aGlzLmJsb2NrU2l6ZSA9IDUxMiAvIDg7XG5cbiAgLyoqXG4gICAqIEhvbGRzIHRoZSBjdXJyZW50IHZhbHVlcyBvZiBhY2N1bXVsYXRlZCBBLUQgdmFyaWFibGVzIChNRCBidWZmZXIpLlxuICAgKiBAdHlwZSB7IUFycmF5PG51bWJlcj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmNoYWluXyA9IG5ldyBBcnJheSg0KTtcblxuICAvKipcbiAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgZGF0YSB1bnRpbCB0aGUgd2hvbGUgYmxvY2sgY2FuIGJlIHByb2Nlc3NlZC5cbiAgICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ibG9ja18gPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHlldC11bnByb2Nlc3NlZCBkYXRhIGFzIGNvbGxlY3RlZCBpbiB0aGUgYmxvY2suXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmJsb2NrTGVuZ3RoXyA9IDA7XG5cbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBsZW5ndGggb2YgdGhlIG1lc3NhZ2Ugc28gZmFyLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy50b3RhbExlbmd0aF8gPSAwO1xuXG4gIHRoaXMucmVzZXQoKTtcbn07XG5nb29nLmluaGVyaXRzKGdvb2cuY3J5cHQuTWQ1LCBnb29nLmNyeXB0Lkhhc2gpO1xuXG5cbi8qKlxuICogSW50ZWdlciByb3RhdGlvbiBjb25zdGFudHMgdXNlZCBieSB0aGUgYWJicmV2aWF0ZWQgaW1wbGVtZW50YXRpb24uXG4gKiBUaGV5IGFyZSBoYXJkY29kZWQgaW4gdGhlIHVucm9sbGVkIGltcGxlbWVudGF0aW9uLCBzbyBpdCBpcyBsZWZ0XG4gKiBoZXJlIGNvbW1lbnRlZCBvdXQuXG4gKiBAdHlwZSB7QXJyYXk8bnVtYmVyPn1cbiAqIEBwcml2YXRlXG4gKlxuZ29vZy5jcnlwdC5NZDUuU18gPSBbXG4gIDcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsXG4gIDUsIDksIDE0LCAyMCwgNSwgOSwgMTQsIDIwLCA1LCA5LCAxNCwgMjAsIDUsIDksIDE0LCAyMCxcbiAgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMyxcbiAgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMVxuXTtcbiAqL1xuXG4vKipcbiAqIFNpbmUgZnVuY3Rpb24gY29uc3RhbnRzIHVzZWQgYnkgdGhlIGFiYnJldmlhdGVkIGltcGxlbWVudGF0aW9uLlxuICogVGhleSBhcmUgaGFyZGNvZGVkIGluIHRoZSB1bnJvbGxlZCBpbXBsZW1lbnRhdGlvbiwgc28gaXQgaXMgbGVmdFxuICogaGVyZSBjb21tZW50ZWQgb3V0LlxuICogQHR5cGUge0FycmF5PG51bWJlcj59XG4gKiBAcHJpdmF0ZVxuICpcbmdvb2cuY3J5cHQuTWQ1LlRfID0gW1xuICAweGQ3NmFhNDc4LCAweGU4YzdiNzU2LCAweDI0MjA3MGRiLCAweGMxYmRjZWVlLFxuICAweGY1N2MwZmFmLCAweDQ3ODdjNjJhLCAweGE4MzA0NjEzLCAweGZkNDY5NTAxLFxuICAweDY5ODA5OGQ4LCAweDhiNDRmN2FmLCAweGZmZmY1YmIxLCAweDg5NWNkN2JlLFxuICAweDZiOTAxMTIyLCAweGZkOTg3MTkzLCAweGE2Nzk0MzhlLCAweDQ5YjQwODIxLFxuICAweGY2MWUyNTYyLCAweGMwNDBiMzQwLCAweDI2NWU1YTUxLCAweGU5YjZjN2FhLFxuICAweGQ2MmYxMDVkLCAweDAyNDQxNDUzLCAweGQ4YTFlNjgxLCAweGU3ZDNmYmM4LFxuICAweDIxZTFjZGU2LCAweGMzMzcwN2Q2LCAweGY0ZDUwZDg3LCAweDQ1NWExNGVkLFxuICAweGE5ZTNlOTA1LCAweGZjZWZhM2Y4LCAweDY3NmYwMmQ5LCAweDhkMmE0YzhhLFxuICAweGZmZmEzOTQyLCAweDg3NzFmNjgxLCAweDZkOWQ2MTIyLCAweGZkZTUzODBjLFxuICAweGE0YmVlYTQ0LCAweDRiZGVjZmE5LCAweGY2YmI0YjYwLCAweGJlYmZiYzcwLFxuICAweDI4OWI3ZWM2LCAweGVhYTEyN2ZhLCAweGQ0ZWYzMDg1LCAweDA0ODgxZDA1LFxuICAweGQ5ZDRkMDM5LCAweGU2ZGI5OWU1LCAweDFmYTI3Y2Y4LCAweGM0YWM1NjY1LFxuICAweGY0MjkyMjQ0LCAweDQzMmFmZjk3LCAweGFiOTQyM2E3LCAweGZjOTNhMDM5LFxuICAweDY1NWI1OWMzLCAweDhmMGNjYzkyLCAweGZmZWZmNDdkLCAweDg1ODQ1ZGQxLFxuICAweDZmYTg3ZTRmLCAweGZlMmNlNmUwLCAweGEzMDE0MzE0LCAweDRlMDgxMWExLFxuICAweGY3NTM3ZTgyLCAweGJkM2FmMjM1LCAweDJhZDdkMmJiLCAweGViODZkMzkxXG5dO1xuICovXG5cblxuLyoqIEBvdmVycmlkZSAqL1xuZ29vZy5jcnlwdC5NZDUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xuICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XG4gIHRoaXMuY2hhaW5fWzJdID0gMHg5OGJhZGNmZTtcbiAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xuXG4gIHRoaXMuYmxvY2tMZW5ndGhfID0gMDtcbiAgdGhpcy50b3RhbExlbmd0aF8gPSAwO1xufTtcblxuXG4vKipcbiAqIEludGVybmFsIGNvbXByZXNzIGhlbHBlciBmdW5jdGlvbi4gSXQgdGFrZXMgYSBibG9jayBvZiBkYXRhICg2NCBieXRlcylcbiAqIGFuZCB1cGRhdGVzIHRoZSBhY2N1bXVsYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxVaW50OEFycmF5fHN0cmluZ30gYnVmIFRoZSBibG9jayB0byBjb21wcmVzcy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X29mZnNldCBPZmZzZXQgb2YgdGhlIGJsb2NrIGluIHRoZSBidWZmZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLmNyeXB0Lk1kNS5wcm90b3R5cGUuY29tcHJlc3NfID0gZnVuY3Rpb24oYnVmLCBvcHRfb2Zmc2V0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFvcHRfb2Zmc2V0KSB7XG4gICAgb3B0X29mZnNldCA9IDA7XG4gIH1cblxuICAvLyBXZSBhbGxvY2F0ZSB0aGUgYXJyYXkgZXZlcnkgdGltZSwgYnV0IGl0J3MgY2hlYXAgaW4gcHJhY3RpY2UuXG4gIHZhciBYID0gbmV3IEFycmF5KDE2KTtcblxuICAvLyBHZXQgMTYgbGl0dGxlIGVuZGlhbiB3b3Jkcy4gSXQgaXMgbm90IHdvcnRoIHVucm9sbGluZyB0aGlzIGZvciBDaHJvbWUgMTEuXG4gIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgWFtpXSA9IChidWYuY2hhckNvZGVBdChvcHRfb2Zmc2V0KyspKSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQrKykgPDwgOCkgfFxuICAgICAgICAgIChidWYuY2hhckNvZGVBdChvcHRfb2Zmc2V0KyspIDw8IDE2KSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQrKykgPDwgMjQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIFhbaV0gPSAoYnVmW29wdF9vZmZzZXQrK10pIHwgKGJ1ZltvcHRfb2Zmc2V0KytdIDw8IDgpIHxcbiAgICAgICAgICAoYnVmW29wdF9vZmZzZXQrK10gPDwgMTYpIHwgKGJ1ZltvcHRfb2Zmc2V0KytdIDw8IDI0KTtcbiAgICB9XG4gIH1cblxuICB2YXIgQSA9IHRoaXMuY2hhaW5fWzBdO1xuICB2YXIgQiA9IHRoaXMuY2hhaW5fWzFdO1xuICB2YXIgQyA9IHRoaXMuY2hhaW5fWzJdO1xuICB2YXIgRCA9IHRoaXMuY2hhaW5fWzNdO1xuICB2YXIgc3VtID0gMDtcblxuICAvKlxuICAgKiBUaGlzIGlzIGFuIGFiYnJldmlhdGVkIGltcGxlbWVudGF0aW9uLCBpdCBpcyBsZWZ0IGhlcmUgY29tbWVudGVkIG91dCBmb3JcbiAgICogcmVmZXJlbmNlIHB1cnBvc2VzLiBTZWUgYmVsb3cgZm9yIGFuIHVucm9sbGVkIHZlcnNpb24gaW4gdXNlLlxuICAgKlxuICB2YXIgZiwgbiwgdG1wO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyArK2kpIHtcblxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIGYgPSAoRCBeIChCICYgKEMgXiBEKSkpO1xuICAgICAgbiA9IGk7XG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIGYgPSAoQyBeIChEICYgKEIgXiBDKSkpO1xuICAgICAgbiA9ICg1ICogaSArIDEpICUgMTY7XG4gICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcbiAgICAgIGYgPSAoQiBeIEMgXiBEKTtcbiAgICAgIG4gPSAoMyAqIGkgKyA1KSAlIDE2O1xuICAgIH0gZWxzZSB7XG4gICAgICBmID0gKEMgXiAoQiB8ICh+RCkpKTtcbiAgICAgIG4gPSAoNyAqIGkpICUgMTY7XG4gICAgfVxuXG4gICAgdG1wID0gRDtcbiAgICBEID0gQztcbiAgICBDID0gQjtcbiAgICBzdW0gPSAoQSArIGYgKyBnb29nLmNyeXB0Lk1kNS5UX1tpXSArIFhbbl0pICYgMHhmZmZmZmZmZjtcbiAgICBCICs9ICgoc3VtIDw8IGdvb2cuY3J5cHQuTWQ1LlNfW2ldKSAmIDB4ZmZmZmZmZmYpIHxcbiAgICAgICAgIChzdW0gPj4+ICgzMiAtIGdvb2cuY3J5cHQuTWQ1LlNfW2ldKSk7XG4gICAgQSA9IHRtcDtcbiAgfVxuICAgKi9cblxuICAvKlxuICAgKiBUaGlzIGlzIGFuIHVucm9sbGVkIE1ENSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggZ2l2ZXMgfjMwJSBzcGVlZHVwIGNvbXBhcmVkXG4gICAqIHRvIHRoZSBhYmJyZXZpYXRlZCBpbXBsZW1lbnRhdGlvbiBhYm92ZSwgYXMgbWVhc3VyZWQgb24gQ2hyb21lIDExLiBJdCBpc1xuICAgKiBpbXBvcnRhbnQgdG8ga2VlcCAzMi1iaXQgY3JvcHBpbmdzIHRvIG1pbmltdW0gYW5kIGlubGluZSB0aGUgaW50ZWdlclxuICAgKiByb3RhdGlvbi5cbiAgICovXG4gIHN1bSA9IChBICsgKEQgXiAoQiAmIChDIF4gRCkpKSArIFhbMF0gKyAweGQ3NmFhNDc4KSAmIDB4ZmZmZmZmZmY7XG4gIEEgPSBCICsgKCgoc3VtIDw8IDcpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyNSkpO1xuICBzdW0gPSAoRCArIChDIF4gKEEgJiAoQiBeIEMpKSkgKyBYWzFdICsgMHhlOGM3Yjc1NikgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCAxMikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDIwKSk7XG4gIHN1bSA9IChDICsgKEIgXiAoRCAmIChBIF4gQikpKSArIFhbMl0gKyAweDI0MjA3MGRiKSAmIDB4ZmZmZmZmZmY7XG4gIEMgPSBEICsgKCgoc3VtIDw8IDE3KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTUpKTtcbiAgc3VtID0gKEIgKyAoQSBeIChDICYgKEQgXiBBKSkpICsgWFszXSArIDB4YzFiZGNlZWUpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjIpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMCkpO1xuICBzdW0gPSAoQSArIChEIF4gKEIgJiAoQyBeIEQpKSkgKyBYWzRdICsgMHhmNTdjMGZhZikgJiAweGZmZmZmZmZmO1xuICBBID0gQiArICgoKHN1bSA8PCA3KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjUpKTtcbiAgc3VtID0gKEQgKyAoQyBeIChBICYgKEIgXiBDKSkpICsgWFs1XSArIDB4NDc4N2M2MmEpICYgMHhmZmZmZmZmZjtcbiAgRCA9IEEgKyAoKChzdW0gPDwgMTIpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyMCkpO1xuICBzdW0gPSAoQyArIChCIF4gKEQgJiAoQSBeIEIpKSkgKyBYWzZdICsgMHhhODMwNDYxMykgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNykgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE1KSk7XG4gIHN1bSA9IChCICsgKEEgXiAoQyAmIChEIF4gQSkpKSArIFhbN10gKyAweGZkNDY5NTAxKSAmIDB4ZmZmZmZmZmY7XG4gIEIgPSBDICsgKCgoc3VtIDw8IDIyKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTApKTtcbiAgc3VtID0gKEEgKyAoRCBeIChCICYgKEMgXiBEKSkpICsgWFs4XSArIDB4Njk4MDk4ZDgpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNykgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI1KSk7XG4gIHN1bSA9IChEICsgKEMgXiAoQSAmIChCIF4gQykpKSArIFhbOV0gKyAweDhiNDRmN2FmKSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDEyKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjApKTtcbiAgc3VtID0gKEMgKyAoQiBeIChEICYgKEEgXiBCKSkpICsgWFsxMF0gKyAweGZmZmY1YmIxKSAmIDB4ZmZmZmZmZmY7XG4gIEMgPSBEICsgKCgoc3VtIDw8IDE3KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTUpKTtcbiAgc3VtID0gKEIgKyAoQSBeIChDICYgKEQgXiBBKSkpICsgWFsxMV0gKyAweDg5NWNkN2JlKSAmIDB4ZmZmZmZmZmY7XG4gIEIgPSBDICsgKCgoc3VtIDw8IDIyKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTApKTtcbiAgc3VtID0gKEEgKyAoRCBeIChCICYgKEMgXiBEKSkpICsgWFsxMl0gKyAweDZiOTAxMTIyKSAmIDB4ZmZmZmZmZmY7XG4gIEEgPSBCICsgKCgoc3VtIDw8IDcpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyNSkpO1xuICBzdW0gPSAoRCArIChDIF4gKEEgJiAoQiBeIEMpKSkgKyBYWzEzXSArIDB4ZmQ5ODcxOTMpICYgMHhmZmZmZmZmZjtcbiAgRCA9IEEgKyAoKChzdW0gPDwgMTIpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyMCkpO1xuICBzdW0gPSAoQyArIChCIF4gKEQgJiAoQSBeIEIpKSkgKyBYWzE0XSArIDB4YTY3OTQzOGUpICYgMHhmZmZmZmZmZjtcbiAgQyA9IEQgKyAoKChzdW0gPDwgMTcpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxNSkpO1xuICBzdW0gPSAoQiArIChBIF4gKEMgJiAoRCBeIEEpKSkgKyBYWzE1XSArIDB4NDliNDA4MjEpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjIpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMCkpO1xuICBzdW0gPSAoQSArIChDIF4gKEQgJiAoQiBeIEMpKSkgKyBYWzFdICsgMHhmNjFlMjU2MikgJiAweGZmZmZmZmZmO1xuICBBID0gQiArICgoKHN1bSA8PCA1KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjcpKTtcbiAgc3VtID0gKEQgKyAoQiBeIChDICYgKEEgXiBCKSkpICsgWFs2XSArIDB4YzA0MGIzNDApICYgMHhmZmZmZmZmZjtcbiAgRCA9IEEgKyAoKChzdW0gPDwgOSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDIzKSk7XG4gIHN1bSA9IChDICsgKEEgXiAoQiAmIChEIF4gQSkpKSArIFhbMTFdICsgMHgyNjVlNWE1MSkgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNCkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE4KSk7XG4gIHN1bSA9IChCICsgKEQgXiAoQSAmIChDIF4gRCkpKSArIFhbMF0gKyAweGU5YjZjN2FhKSAmIDB4ZmZmZmZmZmY7XG4gIEIgPSBDICsgKCgoc3VtIDw8IDIwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTIpKTtcbiAgc3VtID0gKEEgKyAoQyBeIChEICYgKEIgXiBDKSkpICsgWFs1XSArIDB4ZDYyZjEwNWQpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI3KSk7XG4gIHN1bSA9IChEICsgKEIgXiAoQyAmIChBIF4gQikpKSArIFhbMTBdICsgMHgwMjQ0MTQ1MykgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCA5KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjMpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChCICYgKEQgXiBBKSkpICsgWFsxNV0gKyAweGQ4YTFlNjgxKSAmIDB4ZmZmZmZmZmY7XG4gIEMgPSBEICsgKCgoc3VtIDw8IDE0KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTgpKTtcbiAgc3VtID0gKEIgKyAoRCBeIChBICYgKEMgXiBEKSkpICsgWFs0XSArIDB4ZTdkM2ZiYzgpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjApICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMikpO1xuICBzdW0gPSAoQSArIChDIF4gKEQgJiAoQiBeIEMpKSkgKyBYWzldICsgMHgyMWUxY2RlNikgJiAweGZmZmZmZmZmO1xuICBBID0gQiArICgoKHN1bSA8PCA1KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjcpKTtcbiAgc3VtID0gKEQgKyAoQiBeIChDICYgKEEgXiBCKSkpICsgWFsxNF0gKyAweGMzMzcwN2Q2KSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDkpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyMykpO1xuICBzdW0gPSAoQyArIChBIF4gKEIgJiAoRCBeIEEpKSkgKyBYWzNdICsgMHhmNGQ1MGQ4NykgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNCkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE4KSk7XG4gIHN1bSA9IChCICsgKEQgXiAoQSAmIChDIF4gRCkpKSArIFhbOF0gKyAweDQ1NWExNGVkKSAmIDB4ZmZmZmZmZmY7XG4gIEIgPSBDICsgKCgoc3VtIDw8IDIwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTIpKTtcbiAgc3VtID0gKEEgKyAoQyBeIChEICYgKEIgXiBDKSkpICsgWFsxM10gKyAweGE5ZTNlOTA1KSAmIDB4ZmZmZmZmZmY7XG4gIEEgPSBCICsgKCgoc3VtIDw8IDUpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyNykpO1xuICBzdW0gPSAoRCArIChCIF4gKEMgJiAoQSBeIEIpKSkgKyBYWzJdICsgMHhmY2VmYTNmOCkgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCA5KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjMpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChCICYgKEQgXiBBKSkpICsgWFs3XSArIDB4Njc2ZjAyZDkpICYgMHhmZmZmZmZmZjtcbiAgQyA9IEQgKyAoKChzdW0gPDwgMTQpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxOCkpO1xuICBzdW0gPSAoQiArIChEIF4gKEEgJiAoQyBeIEQpKSkgKyBYWzEyXSArIDB4OGQyYTRjOGEpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjApICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMikpO1xuICBzdW0gPSAoQSArIChCIF4gQyBeIEQpICsgWFs1XSArIDB4ZmZmYTM5NDIpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNCkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI4KSk7XG4gIHN1bSA9IChEICsgKEEgXiBCIF4gQykgKyBYWzhdICsgMHg4NzcxZjY4MSkgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCAxMSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDIxKSk7XG4gIHN1bSA9IChDICsgKEQgXiBBIF4gQikgKyBYWzExXSArIDB4NmQ5ZDYxMjIpICYgMHhmZmZmZmZmZjtcbiAgQyA9IEQgKyAoKChzdW0gPDwgMTYpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxNikpO1xuICBzdW0gPSAoQiArIChDIF4gRCBeIEEpICsgWFsxNF0gKyAweGZkZTUzODBjKSAmIDB4ZmZmZmZmZmY7XG4gIEIgPSBDICsgKCgoc3VtIDw8IDIzKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gOSkpO1xuICBzdW0gPSAoQSArIChCIF4gQyBeIEQpICsgWFsxXSArIDB4YTRiZWVhNDQpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNCkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI4KSk7XG4gIHN1bSA9IChEICsgKEEgXiBCIF4gQykgKyBYWzRdICsgMHg0YmRlY2ZhOSkgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCAxMSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDIxKSk7XG4gIHN1bSA9IChDICsgKEQgXiBBIF4gQikgKyBYWzddICsgMHhmNmJiNGI2MCkgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE2KSk7XG4gIHN1bSA9IChCICsgKEMgXiBEIF4gQSkgKyBYWzEwXSArIDB4YmViZmJjNzApICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjMpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiA5KSk7XG4gIHN1bSA9IChBICsgKEIgXiBDIF4gRCkgKyBYWzEzXSArIDB4Mjg5YjdlYzYpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNCkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI4KSk7XG4gIHN1bSA9IChEICsgKEEgXiBCIF4gQykgKyBYWzBdICsgMHhlYWExMjdmYSkgJiAweGZmZmZmZmZmO1xuICBEID0gQSArICgoKHN1bSA8PCAxMSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDIxKSk7XG4gIHN1bSA9IChDICsgKEQgXiBBIF4gQikgKyBYWzNdICsgMHhkNGVmMzA4NSkgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE2KSk7XG4gIHN1bSA9IChCICsgKEMgXiBEIF4gQSkgKyBYWzZdICsgMHgwNDg4MWQwNSkgJiAweGZmZmZmZmZmO1xuICBCID0gQyArICgoKHN1bSA8PCAyMykgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDkpKTtcbiAgc3VtID0gKEEgKyAoQiBeIEMgXiBEKSArIFhbOV0gKyAweGQ5ZDRkMDM5KSAmIDB4ZmZmZmZmZmY7XG4gIEEgPSBCICsgKCgoc3VtIDw8IDQpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAyOCkpO1xuICBzdW0gPSAoRCArIChBIF4gQiBeIEMpICsgWFsxMl0gKyAweGU2ZGI5OWU1KSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDExKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjEpKTtcbiAgc3VtID0gKEMgKyAoRCBeIEEgXiBCKSArIFhbMTVdICsgMHgxZmEyN2NmOCkgJiAweGZmZmZmZmZmO1xuICBDID0gRCArICgoKHN1bSA8PCAxNikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDE2KSk7XG4gIHN1bSA9IChCICsgKEMgXiBEIF4gQSkgKyBYWzJdICsgMHhjNGFjNTY2NSkgJiAweGZmZmZmZmZmO1xuICBCID0gQyArICgoKHN1bSA8PCAyMykgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDkpKTtcbiAgc3VtID0gKEEgKyAoQyBeIChCIHwgKH5EKSkpICsgWFswXSArIDB4ZjQyOTIyNDQpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI2KSk7XG4gIHN1bSA9IChEICsgKEIgXiAoQSB8ICh+QykpKSArIFhbN10gKyAweDQzMmFmZjk3KSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDEwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjIpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChEIHwgKH5CKSkpICsgWFsxNF0gKyAweGFiOTQyM2E3KSAmIDB4ZmZmZmZmZmY7XG4gIEMgPSBEICsgKCgoc3VtIDw8IDE1KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTcpKTtcbiAgc3VtID0gKEIgKyAoRCBeIChDIHwgKH5BKSkpICsgWFs1XSArIDB4ZmM5M2EwMzkpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjEpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMSkpO1xuICBzdW0gPSAoQSArIChDIF4gKEIgfCAofkQpKSkgKyBYWzEyXSArIDB4NjU1YjU5YzMpICYgMHhmZmZmZmZmZjtcbiAgQSA9IEIgKyAoKChzdW0gPDwgNikgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDI2KSk7XG4gIHN1bSA9IChEICsgKEIgXiAoQSB8ICh+QykpKSArIFhbM10gKyAweDhmMGNjYzkyKSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDEwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjIpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChEIHwgKH5CKSkpICsgWFsxMF0gKyAweGZmZWZmNDdkKSAmIDB4ZmZmZmZmZmY7XG4gIEMgPSBEICsgKCgoc3VtIDw8IDE1KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMTcpKTtcbiAgc3VtID0gKEIgKyAoRCBeIChDIHwgKH5BKSkpICsgWFsxXSArIDB4ODU4NDVkZDEpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjEpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMSkpO1xuICBzdW0gPSAoQSArIChDIF4gKEIgfCAofkQpKSkgKyBYWzhdICsgMHg2ZmE4N2U0ZikgJiAweGZmZmZmZmZmO1xuICBBID0gQiArICgoKHN1bSA8PCA2KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjYpKTtcbiAgc3VtID0gKEQgKyAoQiBeIChBIHwgKH5DKSkpICsgWFsxNV0gKyAweGZlMmNlNmUwKSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDEwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjIpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChEIHwgKH5CKSkpICsgWFs2XSArIDB4YTMwMTQzMTQpICYgMHhmZmZmZmZmZjtcbiAgQyA9IEQgKyAoKChzdW0gPDwgMTUpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxNykpO1xuICBzdW0gPSAoQiArIChEIF4gKEMgfCAofkEpKSkgKyBYWzEzXSArIDB4NGUwODExYTEpICYgMHhmZmZmZmZmZjtcbiAgQiA9IEMgKyAoKChzdW0gPDwgMjEpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxMSkpO1xuICBzdW0gPSAoQSArIChDIF4gKEIgfCAofkQpKSkgKyBYWzRdICsgMHhmNzUzN2U4MikgJiAweGZmZmZmZmZmO1xuICBBID0gQiArICgoKHN1bSA8PCA2KSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjYpKTtcbiAgc3VtID0gKEQgKyAoQiBeIChBIHwgKH5DKSkpICsgWFsxMV0gKyAweGJkM2FmMjM1KSAmIDB4ZmZmZmZmZmY7XG4gIEQgPSBBICsgKCgoc3VtIDw8IDEwKSAmIDB4ZmZmZmZmZmYpIHwgKHN1bSA+Pj4gMjIpKTtcbiAgc3VtID0gKEMgKyAoQSBeIChEIHwgKH5CKSkpICsgWFsyXSArIDB4MmFkN2QyYmIpICYgMHhmZmZmZmZmZjtcbiAgQyA9IEQgKyAoKChzdW0gPDwgMTUpICYgMHhmZmZmZmZmZikgfCAoc3VtID4+PiAxNykpO1xuICBzdW0gPSAoQiArIChEIF4gKEMgfCAofkEpKSkgKyBYWzldICsgMHhlYjg2ZDM5MSkgJiAweGZmZmZmZmZmO1xuICBCID0gQyArICgoKHN1bSA8PCAyMSkgJiAweGZmZmZmZmZmKSB8IChzdW0gPj4+IDExKSk7XG5cbiAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBBKSAmIDB4ZmZmZmZmZmY7XG4gIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgQikgJiAweGZmZmZmZmZmO1xuICB0aGlzLmNoYWluX1syXSA9ICh0aGlzLmNoYWluX1syXSArIEMpICYgMHhmZmZmZmZmZjtcbiAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBEKSAmIDB4ZmZmZmZmZmY7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuY3J5cHQuTWQ1LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihieXRlcywgb3B0X2xlbmd0aCkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChvcHRfbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBvcHRfbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICB9XG4gIHZhciBsZW5ndGhNaW51c0Jsb2NrID0gb3B0X2xlbmd0aCAtIHRoaXMuYmxvY2tTaXplO1xuXG4gIC8vIENvcHkgc29tZSBvYmplY3QgcHJvcGVydGllcyB0byBsb2NhbCB2YXJpYWJsZXMgaW4gb3JkZXIgdG8gc2F2ZSBvbiBhY2Nlc3NcbiAgLy8gdGltZSBmcm9tIGluc2lkZSB0aGUgbG9vcCAofjEwJSBzcGVlZHVwIHdhcyBvYnNlcnZlZCBvbiBDaHJvbWUgMTEpLlxuICB2YXIgYmxvY2sgPSB0aGlzLmJsb2NrXztcbiAgdmFyIGJsb2NrTGVuZ3RoID0gdGhpcy5ibG9ja0xlbmd0aF87XG4gIHZhciBpID0gMDtcblxuICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxuICB3aGlsZSAoaSA8IG9wdF9sZW5ndGgpIHtcbiAgICAvLyBXaGVuIHdlIGhhdmUgbm8gZGF0YSBpbiB0aGUgYmxvY2sgdG8gdG9wIHVwLCB3ZSBjYW4gZGlyZWN0bHkgcHJvY2VzcyB0aGVcbiAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjMwJVxuICAgIC8vIHNwZWVkdXAgb24gQ2hyb21lIDE0IGFuZCB+NzAlIHNwZWVkdXAgb24gRmlyZWZveCA2LjAsIGJ1dCByZXF1aXJlcyB0aGF0XG4gICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxuICAgIGlmIChibG9ja0xlbmd0aCA9PSAwKSB7XG4gICAgICB3aGlsZSAoaSA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XG4gICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBpKTtcbiAgICAgICAgaSArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgICAgd2hpbGUgKGkgPCBvcHRfbGVuZ3RoKSB7XG4gICAgICAgIGJsb2NrW2Jsb2NrTGVuZ3RoKytdID0gYnl0ZXMuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBpZiAoYmxvY2tMZW5ndGggPT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICB0aGlzLmNvbXByZXNzXyhibG9jayk7XG4gICAgICAgICAgYmxvY2tMZW5ndGggPSAwO1xuICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoaSA8IG9wdF9sZW5ndGgpIHtcbiAgICAgICAgYmxvY2tbYmxvY2tMZW5ndGgrK10gPSBieXRlc1tpKytdO1xuICAgICAgICBpZiAoYmxvY2tMZW5ndGggPT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICB0aGlzLmNvbXByZXNzXyhibG9jayk7XG4gICAgICAgICAgYmxvY2tMZW5ndGggPSAwO1xuICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuYmxvY2tMZW5ndGhfID0gYmxvY2tMZW5ndGg7XG4gIHRoaXMudG90YWxMZW5ndGhfICs9IG9wdF9sZW5ndGg7XG59O1xuXG5cbi8qKiBAb3ZlcnJpZGUgKi9cbmdvb2cuY3J5cHQuTWQ1LnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBUaGlzIG11c3QgYWNjb21tb2RhdGUgYXQgbGVhc3QgMSBwYWRkaW5nIGJ5dGUgKDB4ODApLCA4IGJ5dGVzIG9mXG4gIC8vIHRvdGFsIGJpdGxlbmd0aCwgYW5kIG11c3QgZW5kIGF0IGEgNjQtYnl0ZSBib3VuZGFyeS5cbiAgdmFyIHBhZCA9IG5ldyBBcnJheShcbiAgICAgICh0aGlzLmJsb2NrTGVuZ3RoXyA8IDU2ID8gdGhpcy5ibG9ja1NpemUgOiB0aGlzLmJsb2NrU2l6ZSAqIDIpIC1cbiAgICAgIHRoaXMuYmxvY2tMZW5ndGhfKTtcblxuICAvLyBBZGQgcGFkZGluZzogMHg4MCAweDAwKlxuICBwYWRbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IHBhZC5sZW5ndGggLSA4OyArK2kpIHtcbiAgICBwYWRbaV0gPSAwO1xuICB9XG4gIC8vIEFkZCB0aGUgdG90YWwgbnVtYmVyIG9mIGJpdHMsIGxpdHRsZSBlbmRpYW4gNjQtYml0IGludGVnZXIuXG4gIHZhciB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsTGVuZ3RoXyAqIDg7XG4gIGZvciAodmFyIGkgPSBwYWQubGVuZ3RoIC0gODsgaSA8IHBhZC5sZW5ndGg7ICsraSkge1xuICAgIHBhZFtpXSA9IHRvdGFsQml0cyAmIDB4ZmY7XG4gICAgdG90YWxCaXRzIC89IDB4MTAwOyAgLy8gRG9uJ3QgdXNlIGJpdC1zaGlmdGluZyBoZXJlIVxuICB9XG4gIHRoaXMudXBkYXRlKHBhZCk7XG5cbiAgdmFyIGRpZ2VzdCA9IG5ldyBBcnJheSgxNik7XG4gIHZhciBuID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDMyOyBqICs9IDgpIHtcbiAgICAgIGRpZ2VzdFtuKytdID0gKHRoaXMuY2hhaW5fW2ldID4+PiBqKSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiBkaWdlc3Q7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERlZmluZXMgYW4gSW50ZWdlciBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIChwb3RlbnRpYWxseSlcbiAqIGluZmluaXRlIGxlbmd0aCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWVzLlxuICpcbiAqIEZvciB0aGUgc3BlY2lmaWMgY2FzZSBvZiA2NC1iaXQgaW50ZWdlcnMsIHVzZSBnb29nLm1hdGguTG9uZywgd2hpY2ggaXMgbW9yZVxuICogZWZmaWNpZW50LlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5tYXRoLkludGVnZXInKTtcblxuZ29vZy5yZXF1aXJlKCdnb29nLnJlZmxlY3QnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyIGFuIGFycmF5IGNvbnRhaW5pbmcgYml0cyBvZiB0aGVcbiAqIGludGVnZXIgaW4gMzItYml0IChzaWduZWQpIHBpZWNlcywgZ2l2ZW4gaW4gbGl0dGxlLWVuZGlhbiBvcmRlciAoaS5lLixcbiAqIGxvd2VzdC1vcmRlciBiaXRzIGluIHRoZSBmaXJzdCBwaWVjZSksIGFuZCB0aGUgc2lnbiBvZiAtMSBvciAwLlxuICpcbiAqIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBvdGhlciBjb252ZW5pZW50IHdheXMgb2YgY29uc3RydWN0aW5nXG4gKiBJbnRlZ2Vycy5cbiAqXG4gKiBUaGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZWdlciBpcyBhbiBhcnJheSBvZiAzMi1iaXQgc2lnbmVkXG4gKiBwaWVjZXMsIGFsb25nIHdpdGggYSBzaWduICgwIG9yIC0xKSB0aGF0IGluZGljYXRlcyB0aGUgY29udGVudHMgb2YgYWxsIHRoZVxuICogb3RoZXIgMzItYml0IHBpZWNlcyBvdXQgdG8gaW5maW5pdHkuICBXZSB1c2UgMzItYml0IHBpZWNlcyBiZWNhdXNlIHRoZXNlIGFyZVxuICogdGhlIHNpemUgb2YgaW50ZWdlcnMgb24gd2hpY2ggSmF2YVNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvclxuICogb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uIGFuZCBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNi1iaXRcbiAqIHBpZWNlcywgd2hpY2ggY2FuIGVhc2lseSBiZSBtdWx0aXBsaWVkIHdpdGhpbiBKYXZhU2NyaXB0J3MgZmxvYXRpbmctcG9pbnRcbiAqIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgb3ZlcmZsb3cgb3IgY2hhbmdlIGluIHNpZ24uXG4gKlxuICogQHN0cnVjdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGJpdHMgQXJyYXkgY29udGFpbmluZyB0aGUgYml0cyBvZiB0aGUgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpZ24gVGhlIHNpZ24gb2YgdGhlIG51bWJlcjogLTEgZm9yIG5lZ2F0aXZlIGFuZCAwIHBvc2l0aXZlLlxuICogQGZpbmFsXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyID0gZnVuY3Rpb24oYml0cywgc2lnbikge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zaWduXyA9IHNpZ247XG5cbiAgLy8gTm90ZTogdXNpbmcgYSBsb2NhbCB2YXJpYWJsZSB3aGlsZSBpbml0aWFsaXppbmcgdGhlIGFycmF5IGhlbHBzIHRoZVxuICAvLyBjb21waWxlciB1bmRlcnN0YW5kIHRoYXQgYXNzaWduaW5nIHRvIHRoZSBhcnJheSBpcyBsb2NhbCBzaWRlLWVmZmVjdCBhbmRcbiAgLy8gdGhhdCBlbmFibGVzIHRoZSBlbnRpcmUgY29uc3RydWN0b3IgdG8gYmUgc2VlbiBhcyBzaWRlLWVmZmVjdCBmcmVlLlxuICB2YXIgbG9jYWxCaXRzID0gW107XG5cbiAgLy8gQ29weSB0aGUgMzItYml0IHNpZ25lZCBpbnRlZ2VyIHZhbHVlcyBwYXNzZWQgaW4uICBXZSBwcnVuZSBvdXQgdGhvc2UgYXQgdGhlXG4gIC8vIHRvcCB0aGF0IGVxdWFsIHRoZSBzaWduIHNpbmNlIHRoZXkgYXJlIHJlZHVuZGFudC5cbiAgdmFyIHRvcCA9IHRydWU7XG5cbiAgZm9yICh2YXIgaSA9IGJpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgdmFsID0gYml0c1tpXSB8IDA7XG4gICAgaWYgKCF0b3AgfHwgdmFsICE9IHNpZ24pIHtcbiAgICAgIGxvY2FsQml0c1tpXSA9IHZhbDtcbiAgICAgIHRvcCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7IUFycmF5PG51bWJlcj59XG4gICAqIEBwcml2YXRlXG4gICAqIEBjb25zdFxuICAgKi9cbiAgdGhpcy5iaXRzXyA9IGxvY2FsQml0cztcbn07XG5cblxuLy8gTk9URTogQ29tbW9uIGNvbnN0YW50IHZhbHVlcyBaRVJPLCBPTkUsIE5FR19PTkUsIGV0Yy4gYXJlIGRlZmluZWQgYmVsb3cgdGhlXG4vLyBmcm9tKiBtZXRob2RzIG9uIHdoaWNoIHRoZXkgZGVwZW5kLlxuXG5cbi8qKlxuICogQSBjYWNoZSBvZiB0aGUgSW50ZWdlciByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgaW50ZWdlciB2YWx1ZXMuXG4gKiBAdHlwZSB7IU9iamVjdDxudW1iZXIsICFnb29nLm1hdGguSW50ZWdlcj59XG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm1hdGguSW50ZWdlci5JbnRDYWNoZV8gPSB7fTtcblxuXG4vKipcbiAqIFJldHVybnMgYW4gSW50ZWdlciByZXByZXNlbnRpbmcgdGhlIGdpdmVuICgzMi1iaXQpIGludGVnZXIgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgQSAzMi1iaXQgaW50ZWdlciB2YWx1ZS5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIGNvcnJlc3BvbmRpbmcgSW50ZWdlciB2YWx1ZS5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIuZnJvbUludCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKC0xMjggPD0gdmFsdWUgJiYgdmFsdWUgPCAxMjgpIHtcbiAgICByZXR1cm4gZ29vZy5yZWZsZWN0LmNhY2hlKFxuICAgICAgICBnb29nLm1hdGguSW50ZWdlci5JbnRDYWNoZV8sIHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgICAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlcihbdmFsIHwgMF0sIHZhbCA8IDAgPyAtMSA6IDApO1xuICAgICAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKFt2YWx1ZSB8IDBdLCB2YWx1ZSA8IDAgPyAtMSA6IDApO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYW4gSW50ZWdlciByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlXG4gKiBudW1iZXIuICBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGluIHF1ZXN0aW9uLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGUgY29ycmVzcG9uZGluZyBJbnRlZ2VyIHZhbHVlLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZ29vZy5tYXRoLkludGVnZXIuWkVSTztcbiAgfSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcbiAgICByZXR1cm4gZ29vZy5tYXRoLkludGVnZXIuZnJvbU51bWJlcigtdmFsdWUpLm5lZ2F0ZSgpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiaXRzID0gW107XG4gICAgdmFyIHBvdyA9IDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IHZhbHVlID49IHBvdzsgaSsrKSB7XG4gICAgICBiaXRzW2ldID0gKHZhbHVlIC8gcG93KSB8IDA7XG4gICAgICBwb3cgKj0gZ29vZy5tYXRoLkludGVnZXIuVFdPX1BXUl8zMl9EQkxfO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGJpdHMsIDApO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhIEludGVnZXIgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlXG4gKiBnaXZlbiBlbnRyaWVzLCBlYWNoIGlzIGFzc3VtZWQgdG8gYmUgMzIgc2lnbmVkIGJpdHMsIGdpdmVuIGluIGxpdHRsZS1lbmRpYW5cbiAqIG9yZGVyIChsb3dlc3Qgb3JkZXIgYml0cyBpbiB0aGUgbG93ZXN0IGluZGV4KSwgYW5kIHNpZ24tZXh0ZW5kaW5nIHRoZSBoaWdoZXN0XG4gKiBvcmRlciAzMi1iaXQgdmFsdWUuXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGJpdHMgVGhlIGJpdHMgb2YgdGhlIG51bWJlciwgaW4gMzItYml0IHNpZ25lZCBwaWVjZXMsXG4gKiAgICAgaW4gbGl0dGxlLWVuZGlhbiBvcmRlci5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIGNvcnJlc3BvbmRpbmcgSW50ZWdlciB2YWx1ZS5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIuZnJvbUJpdHMgPSBmdW5jdGlvbihiaXRzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGhpZ2ggPSBiaXRzW2JpdHMubGVuZ3RoIC0gMV07XG4gIHJldHVybiBuZXcgZ29vZy5tYXRoLkludGVnZXIoYml0cywgaGlnaCAmICgxIDw8IDMxKSA/IC0xIDogMCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBhbiBJbnRlZ2VyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlXG4gKiBnaXZlbiByYWRpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIEludGVnZXIuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9yYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgaXMgd3JpdHRlbi5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIGNvcnJlc3BvbmRpbmcgSW50ZWdlciB2YWx1ZS5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgb3B0X3JhZGl4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHN0ci5sZW5ndGggPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbnVtYmVyIGZvcm1hdCBlcnJvcjogZW1wdHkgc3RyaW5nJyk7XG4gIH1cblxuICB2YXIgcmFkaXggPSBvcHRfcmFkaXggfHwgMTA7XG4gIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncmFkaXggb3V0IG9mIHJhbmdlOiAnICsgcmFkaXgpO1xuICB9XG5cbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT0gJy0nKSB7XG4gICAgcmV0dXJuIGdvb2cubWF0aC5JbnRlZ2VyLmZyb21TdHJpbmcoc3RyLnN1YnN0cmluZygxKSwgcmFkaXgpLm5lZ2F0ZSgpO1xuICB9IGVsc2UgaWYgKHN0ci5pbmRleE9mKCctJykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbnVtYmVyIGZvcm1hdCBlcnJvcjogaW50ZXJpb3IgXCItXCIgY2hhcmFjdGVyJyk7XG4gIH1cblxuICAvLyBEbyBzZXZlcmFsICg4KSBkaWdpdHMgZWFjaCB0aW1lIHRocm91Z2ggdGhlIGxvb3AsIHNvIGFzIHRvXG4gIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxuICB2YXIgcmFkaXhUb1Bvd2VyID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbU51bWJlcihNYXRoLnBvdyhyYWRpeCwgOCkpO1xuXG4gIHZhciByZXN1bHQgPSBnb29nLm1hdGguSW50ZWdlci5aRVJPO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gOCkge1xuICAgIHZhciBzaXplID0gTWF0aC5taW4oOCwgc3RyLmxlbmd0aCAtIGkpO1xuICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XG4gICAgaWYgKHNpemUgPCA4KSB7XG4gICAgICB2YXIgcG93ZXIgPSBnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCBzaXplKSk7XG4gICAgICByZXN1bHQgPSByZXN1bHQubXVsdGlwbHkocG93ZXIpLmFkZChnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKHZhbHVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWx0aXBseShyYWRpeFRvUG93ZXIpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuICogQSBudW1iZXIgdXNlZCByZXBlYXRlZGx5IGluIGNhbGN1bGF0aW9ucy4gIFRoaXMgbXVzdCBhcHBlYXIgYmVmb3JlIHRoZSBmaXJzdFxuICogY2FsbCB0byB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93LlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLlRXT19QV1JfMzJfREJMXyA9ICgxIDw8IDE2KSAqICgxIDw8IDE2KTtcblxuXG4vKiogIEB0eXBlIHshZ29vZy5tYXRoLkludGVnZXJ9ICovXG5nb29nLm1hdGguSW50ZWdlci5aRVJPID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbUludCgwKTtcblxuLyoqICBAdHlwZSB7IWdvb2cubWF0aC5JbnRlZ2VyfSAqL1xuZ29vZy5tYXRoLkludGVnZXIuT05FID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbUludCgxKTtcblxuXG4vKipcbiAqIEBjb25zdFxuICogQHR5cGUgeyFnb29nLm1hdGguSW50ZWdlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLlRXT19QV1JfMjRfID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbUludCgxIDw8IDI0KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSwgYXNzdW1pbmcgaXQgaXMgYSAzMi1iaXQgaW50ZWdlci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNvcnJlc3BvbmRpbmcgaW50IHZhbHVlLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUudG9JbnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5iaXRzXy5sZW5ndGggPiAwID8gdGhpcy5iaXRzX1swXSA6IHRoaXMuc2lnbl87XG59O1xuXG5cbi8qKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjbG9zZXN0IGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIHRvIHRoaXMgdmFsdWUuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcbiAgICByZXR1cm4gLXRoaXMubmVnYXRlKCkudG9OdW1iZXIoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFsID0gMDtcbiAgICB2YXIgcG93ID0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYml0c18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbCArPSB0aGlzLmdldEJpdHNVbnNpZ25lZChpKSAqIHBvdztcbiAgICAgIHBvdyAqPSBnb29nLm1hdGguSW50ZWdlci5UV09fUFdSXzMyX0RCTF87XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9yYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgc2hvdWxkIGJlIHdyaXR0ZW4uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdmFsdWUuXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0X3JhZGl4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHJhZGl4ID0gb3B0X3JhZGl4IHx8IDEwO1xuICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4IG91dCBvZiByYW5nZTogJyArIHJhZGl4KTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgcmV0dXJuICcwJztcbiAgfSBlbHNlIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xuICAgIHJldHVybiAnLScgKyB0aGlzLm5lZ2F0ZSgpLnRvU3RyaW5nKHJhZGl4KTtcbiAgfVxuXG4gIC8vIERvIHNldmVyYWwgKDYpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cbiAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXG4gIHZhciByYWRpeFRvUG93ZXIgPSBnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCA2KSk7XG5cbiAgdmFyIHJlbSA9IHRoaXM7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcmVtRGl2ID0gcmVtLmRpdmlkZShyYWRpeFRvUG93ZXIpO1xuICAgIC8vIFRoZSByaWdodCBzaGlmdGluZyBmaXhlcyBuZWdhdGl2ZSB2YWx1ZXMgaW4gdGhlIGNhc2Ugd2hlblxuICAgIC8vIGludHZhbCA+PSAyXjMxOyBmb3IgbW9yZSBkZXRhaWxzIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L3B1bGwvNDk4XG4gICAgdmFyIGludHZhbCA9IHJlbS5zdWJ0cmFjdChyZW1EaXYubXVsdGlwbHkocmFkaXhUb1Bvd2VyKSkudG9JbnQoKSA+Pj4gMDtcbiAgICB2YXIgZGlnaXRzID0gaW50dmFsLnRvU3RyaW5nKHJhZGl4KTtcblxuICAgIHJlbSA9IHJlbURpdjtcbiAgICBpZiAocmVtLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gZGlnaXRzICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgZGlnaXRzID0gJzAnICsgZGlnaXRzO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXgtdGggMzItYml0IChzaWduZWQpIHBpZWNlIG9mIHRoZSBJbnRlZ2VyIGFjY29yZGluZyB0b1xuICogbGl0dGxlLWVuZGlhbiBvcmRlciAoaS5lLiwgaW5kZXggMCBjb250YWlucyB0aGUgc21hbGxlc3QgYml0cykuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGluIHF1ZXN0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVxdWVzdGVkIDMyLWJpdHMgYXMgYSBzaWduZWQgbnVtYmVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZ2V0Qml0cyA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiAwOyAgLy8gQWxsb3dpbmcgdGhpcyBzaW1wbGlmaWVzIGJpdCBzaGlmdGluZyBvcGVyYXRpb25zIGJlbG93Li4uXG4gIH0gZWxzZSBpZiAoaW5kZXggPCB0aGlzLmJpdHNfLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmJpdHNfW2luZGV4XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5zaWduXztcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGluZGV4LXRoIDMyLWJpdCBwaWVjZSBhcyBhbiB1bnNpZ25lZCBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IGluIHF1ZXN0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVxdWVzdGVkIDMyLWJpdHMgYXMgYW4gdW5zaWduZWQgbnVtYmVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZ2V0Qml0c1Vuc2lnbmVkID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdmFsID0gdGhpcy5nZXRCaXRzKGluZGV4KTtcbiAgcmV0dXJuIHZhbCA+PSAwID8gdmFsIDogZ29vZy5tYXRoLkludGVnZXIuVFdPX1BXUl8zMl9EQkxfICsgdmFsO1xufTtcblxuXG4vKiogQHJldHVybiB7bnVtYmVyfSBUaGUgc2lnbiBiaXQgb2YgdGhpcyBudW1iZXIsIC0xIG9yIDAuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZ2V0U2lnbiA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLnNpZ25fO1xufTtcblxuXG4vKiogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHZhbHVlIGlzIHplcm8uICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuc2lnbl8gIT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYml0c18ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5iaXRzX1tpXSAhPSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKiogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHZhbHVlIGlzIG5lZ2F0aXZlLiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmlzTmVnYXRpdmUgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5zaWduXyA9PSAtMTtcbn07XG5cblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyB2YWx1ZSBpcyBvZGQuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gKHRoaXMuYml0c18ubGVuZ3RoID09IDApICYmICh0aGlzLnNpZ25fID09IC0xKSB8fFxuICAgICAgKHRoaXMuYml0c18ubGVuZ3RoID4gMCkgJiYgKCh0aGlzLmJpdHNfWzBdICYgMSkgIT0gMCk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgSW50ZWdlciB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgSW50ZWdlciBlcXVhbHMgdGhlIG90aGVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5zaWduXyAhPSBvdGhlci5zaWduXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gTWF0aC5tYXgodGhpcy5iaXRzXy5sZW5ndGgsIG90aGVyLmJpdHNfLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAodGhpcy5nZXRCaXRzKGkpICE9IG90aGVyLmdldEJpdHMoaSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgSW50ZWdlciB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgSW50ZWdlciBkb2VzIG5vdCBlcXVhbCB0aGUgb3RoZXIuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAhdGhpcy5lcXVhbHMob3RoZXIpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkludGVnZXJ9IG90aGVyIEludGVnZXIgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIEludGVnZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSBvdGhlci5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmdyZWF0ZXJUaGFuID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA+IDA7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgSW50ZWdlciB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgSW50ZWdlciBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG90aGVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA+PSAwO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkludGVnZXJ9IG90aGVyIEludGVnZXIgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIEludGVnZXIgaXMgbGVzcyB0aGFuIHRoZSBvdGhlci5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmxlc3NUaGFuID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA8IDA7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgSW50ZWdlciB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgSW50ZWdlciBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG90aGVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUubGVzc1RoYW5PckVxdWFsID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA8PSAwO1xufTtcblxuXG4vKipcbiAqIENvbXBhcmVzIHRoaXMgSW50ZWdlciB3aXRoIHRoZSBnaXZlbiBvbmUuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5JbnRlZ2VyfSBvdGhlciBJbnRlZ2VyIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAqIEByZXR1cm4ge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyLCBhbmQgLTFcbiAqICAgICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXIuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZGlmZiA9IHRoaXMuc3VidHJhY3Qob3RoZXIpO1xuICBpZiAoZGlmZi5pc05lZ2F0aXZlKCkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoZGlmZi5pc1plcm8oKSkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiArMTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgYW4gaW50ZWdlciB3aXRoIG9ubHkgdGhlIGZpcnN0IG51bUJpdHMgYml0cyBvZiB0aGlzIHZhbHVlLCBzaWduXG4gKiBleHRlbmRlZCBmcm9tIHRoZSBmaW5hbCBiaXQuXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtQml0cyBUaGUgbnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggdG8gc2hpZnQuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkludGVnZXJ9IFRoZSBzaG9ydGVkIGludGVnZXIgdmFsdWUuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5zaG9ydGVuID0gZnVuY3Rpb24obnVtQml0cykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBhcnJfaW5kZXggPSAobnVtQml0cyAtIDEpID4+IDU7XG4gIHZhciBiaXRfaW5kZXggPSAobnVtQml0cyAtIDEpICUgMzI7XG4gIHZhciBiaXRzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyX2luZGV4OyBpKyspIHtcbiAgICBiaXRzW2ldID0gdGhpcy5nZXRCaXRzKGkpO1xuICB9XG4gIHZhciBzaWdCaXRzID0gYml0X2luZGV4ID09IDMxID8gMHhGRkZGRkZGRiA6ICgxIDw8IChiaXRfaW5kZXggKyAxKSkgLSAxO1xuICB2YXIgdmFsID0gdGhpcy5nZXRCaXRzKGFycl9pbmRleCkgJiBzaWdCaXRzO1xuICBpZiAodmFsICYgKDEgPDwgYml0X2luZGV4KSkge1xuICAgIHZhbCB8PSAweEZGRkZGRkZGIC0gc2lnQml0cztcbiAgICBiaXRzW2Fycl9pbmRleF0gPSB2YWw7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlcihiaXRzLCAtMSk7XG4gIH0gZWxzZSB7XG4gICAgYml0c1thcnJfaW5kZXhdID0gdmFsO1xuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLkludGVnZXIoYml0cywgMCk7XG4gIH1cbn07XG5cblxuLyoqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIG5lZ2F0aW9uIG9mIHRoaXMgdmFsdWUuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMubm90KCkuYWRkKGdvb2cubWF0aC5JbnRlZ2VyLk9ORSk7XG59O1xuXG5cbi8qKiBAcmV0dXJuIHshZ29vZy5tYXRoLkludGVnZXJ9IFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIHZhbHVlLiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0aGlzLmlzTmVnYXRpdmUoKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgZ2l2ZW4gSW50ZWdlci5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkludGVnZXJ9IG90aGVyIFRoZSBJbnRlZ2VyIHRvIGFkZCB0byB0aGlzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGUgSW50ZWdlciByZXN1bHQuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvdGhlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBsZW4gPSBNYXRoLm1heCh0aGlzLmJpdHNfLmxlbmd0aCwgb3RoZXIuYml0c18ubGVuZ3RoKTtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgY2FycnkgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgdmFyIGExID0gdGhpcy5nZXRCaXRzKGkpID4+PiAxNjtcbiAgICB2YXIgYTAgPSB0aGlzLmdldEJpdHMoaSkgJiAweEZGRkY7XG5cbiAgICB2YXIgYjEgPSBvdGhlci5nZXRCaXRzKGkpID4+PiAxNjtcbiAgICB2YXIgYjAgPSBvdGhlci5nZXRCaXRzKGkpICYgMHhGRkZGO1xuXG4gICAgdmFyIGMwID0gY2FycnkgKyBhMCArIGIwO1xuICAgIHZhciBjMSA9IChjMCA+Pj4gMTYpICsgYTEgKyBiMTtcbiAgICBjYXJyeSA9IGMxID4+PiAxNjtcbiAgICBjMCAmPSAweEZGRkY7XG4gICAgYzEgJj0gMHhGRkZGO1xuICAgIGFycltpXSA9IChjMSA8PCAxNikgfCBjMDtcbiAgfVxuICByZXR1cm4gZ29vZy5tYXRoLkludGVnZXIuZnJvbUJpdHMoYXJyKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBnaXZlbiBJbnRlZ2VyLlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgVGhlIEludGVnZXIgdG8gc3VidHJhY3QgZnJvbSB0aGlzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGUgSW50ZWdlciByZXN1bHQuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuYWRkKG90aGVyLm5lZ2F0ZSgpKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBnaXZlbiBJbnRlZ2VyLlxuICogQHBhcmFtIHtnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgVGhlIEludGVnZXIgdG8gbXVsdGlwbHkgYWdhaW5zdCB0aGlzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgb3RoZXIuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICByZXR1cm4gZ29vZy5tYXRoLkludGVnZXIuWkVSTztcbiAgfSBlbHNlIGlmIChvdGhlci5pc1plcm8oKSkge1xuICAgIHJldHVybiBnb29nLm1hdGguSW50ZWdlci5aRVJPO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XG4gICAgaWYgKG90aGVyLmlzTmVnYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKCkubXVsdGlwbHkob3RoZXIubmVnYXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5uZWdhdGUoKS5tdWx0aXBseShvdGhlcikubmVnYXRlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG90aGVyLmlzTmVnYXRpdmUoKSkge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG90aGVyLm5lZ2F0ZSgpKS5uZWdhdGUoKTtcbiAgfVxuXG4gIC8vIElmIGJvdGggbnVtYmVycyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxuICBpZiAodGhpcy5sZXNzVGhhbihnb29nLm1hdGguSW50ZWdlci5UV09fUFdSXzI0XykgJiZcbiAgICAgIG90aGVyLmxlc3NUaGFuKGdvb2cubWF0aC5JbnRlZ2VyLlRXT19QV1JfMjRfKSkge1xuICAgIHJldHVybiBnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKHRoaXMudG9OdW1iZXIoKSAqIG90aGVyLnRvTnVtYmVyKCkpO1xuICB9XG5cbiAgLy8gRmlsbCBpbiBhbiBhcnJheSBvZiAxNi1iaXQgcHJvZHVjdHMuXG4gIHZhciBsZW4gPSB0aGlzLmJpdHNfLmxlbmd0aCArIG90aGVyLmJpdHNfLmxlbmd0aDtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDIgKiBsZW47IGkrKykge1xuICAgIGFycltpXSA9IDA7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJpdHNfLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvdGhlci5iaXRzXy5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIGExID0gdGhpcy5nZXRCaXRzKGkpID4+PiAxNjtcbiAgICAgIHZhciBhMCA9IHRoaXMuZ2V0Qml0cyhpKSAmIDB4RkZGRjtcblxuICAgICAgdmFyIGIxID0gb3RoZXIuZ2V0Qml0cyhqKSA+Pj4gMTY7XG4gICAgICB2YXIgYjAgPSBvdGhlci5nZXRCaXRzKGopICYgMHhGRkZGO1xuXG4gICAgICBhcnJbMiAqIGkgKyAyICogal0gKz0gYTAgKiBiMDtcbiAgICAgIGdvb2cubWF0aC5JbnRlZ2VyLmNhcnJ5MTZfKGFyciwgMiAqIGkgKyAyICogaik7XG4gICAgICBhcnJbMiAqIGkgKyAyICogaiArIDFdICs9IGExICogYjA7XG4gICAgICBnb29nLm1hdGguSW50ZWdlci5jYXJyeTE2XyhhcnIsIDIgKiBpICsgMiAqIGogKyAxKTtcbiAgICAgIGFyclsyICogaSArIDIgKiBqICsgMV0gKz0gYTAgKiBiMTtcbiAgICAgIGdvb2cubWF0aC5JbnRlZ2VyLmNhcnJ5MTZfKGFyciwgMiAqIGkgKyAyICogaiArIDEpO1xuICAgICAgYXJyWzIgKiBpICsgMiAqIGogKyAyXSArPSBhMSAqIGIxO1xuICAgICAgZ29vZy5tYXRoLkludGVnZXIuY2FycnkxNl8oYXJyLCAyICogaSArIDIgKiBqICsgMik7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tYmluZSB0aGUgMTYtYml0IHZhbHVlcyBpbnRvIDMyLWJpdCB2YWx1ZXMuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnJbaV0gPSAoYXJyWzIgKiBpICsgMV0gPDwgMTYpIHwgYXJyWzIgKiBpXTtcbiAgfVxuICBmb3IgKHZhciBpID0gbGVuOyBpIDwgMiAqIGxlbjsgaSsrKSB7XG4gICAgYXJyW2ldID0gMDtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGFyciwgMCk7XG59O1xuXG5cbi8qKlxuICogQ2FycmllcyBhbnkgb3ZlcmZsb3cgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggaW50byBsYXRlciBlbnRyaWVzLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiaXRzIEFycmF5IG9mIDE2LWJpdCB2YWx1ZXMgaW4gbGl0dGxlLWVuZGlhbiBvcmRlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggaW4gcXVlc3Rpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5nb29nLm1hdGguSW50ZWdlci5jYXJyeTE2XyA9IGZ1bmN0aW9uKGJpdHMsIGluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgd2hpbGUgKChiaXRzW2luZGV4XSAmIDB4RkZGRikgIT0gYml0c1tpbmRleF0pIHtcbiAgICBiaXRzW2luZGV4ICsgMV0gKz0gYml0c1tpbmRleF0gPj4+IDE2O1xuICAgIGJpdHNbaW5kZXhdICY9IDB4RkZGRjtcbiAgICBpbmRleCsrO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBcInRoaXNcIiBJbnRlZ2VyIGRpdmlkZWQgYnkgdGhlIGdpdmVuIG9uZS4gQm90aCBcInRoaXNcIiBhbmQgdGhlIGdpdmVuXG4gKiBJbnRlZ2VyIE1VU1QgYmUgcG9zaXRpdmUuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgb25seSBuZWVkZWQgZm9yIHZlcnkgbGFyZ2UgbnVtYmVycyAoPjEwXjMwOCksXG4gKiBmb3Igd2hpY2ggdGhlIG9yaWdpbmFsIGRpdmlzaW9uIGFsZ29yaXRobSBnZXRzIGludG8gYW4gaW5maW5pdGVcbiAqIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9pc3N1ZXMvNTAwKS5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtIGhhcyBzb21lIHBvc3NpYmxlIHBlcmZvcm1hbmNlIGVuaGFuY2VtZW50cyAob3JcbiAqIGNvdWxkIGJlIHJld3JpdHRlbiBlbnRpcmVseSksIGl0J3MganVzdCBhbiBpbml0aWFsIHNvbHV0aW9uIGZvclxuICogdGhlIGlzc3VlIGxpbmtlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0geyFnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgVGhlIEludGVnZXIgdG8gZGl2aWRlIFwidGhpc1wiIGJ5LlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyLkRpdmlzaW9uUmVzdWx0fVxuICogQHByaXZhdGVcbiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLnNsb3dEaXZpZGVfID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgfHwgb3RoZXIuaXNOZWdhdGl2ZSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzbG93RGl2aWRlXyBvbmx5IHdvcmtzIHdpdGggcG9zaXRpdmUgaW50ZWdlcnMuJyk7XG4gIH1cblxuICB2YXIgdHdvUG93ZXIgPSBnb29nLm1hdGguSW50ZWdlci5PTkU7XG4gIHZhciBtdWx0aXBsZSA9IG90aGVyO1xuXG4gIC8vIEZpcnN0IHdlIGhhdmUgdG8gZmlndXJlIG91dCB3aGF0IHRoZSBoaWdoZXN0IGJpdCBvZiB0aGUgcmVzdWx0XG4gIC8vIGlzLCBzbyB3ZSBpbmNyZWFzZSBcInR3b1Bvd2VyXCIgYW5kIFwibXVsdGlwbGVcIiB1bnRpbCBcIm11bHRpcGxlXCJcbiAgLy8gZXhjZWVkcyBcInRoaXNcIi5cbiAgd2hpbGUgKG11bHRpcGxlLmxlc3NUaGFuT3JFcXVhbCh0aGlzKSkge1xuICAgIHR3b1Bvd2VyID0gdHdvUG93ZXIuc2hpZnRMZWZ0KDEpO1xuICAgIG11bHRpcGxlID0gbXVsdGlwbGUuc2hpZnRMZWZ0KDEpO1xuICB9XG5cbiAgLy8gUmV3aW5kIGJ5IG9uZSBwb3dlciBvZiB0d28sIGdpdmluZyB1cyB0aGUgaGlnaGVzdCBiaXQgb2YgdGhlXG4gIC8vIHJlc3VsdC5cbiAgdmFyIHJlcyA9IHR3b1Bvd2VyLnNoaWZ0UmlnaHQoMSk7XG4gIHZhciB0b3RhbCA9IG11bHRpcGxlLnNoaWZ0UmlnaHQoMSk7XG5cbiAgLy8gTm93IHdlIHN0YXJ0aW5nIGRlY3JlYXNpbmcgXCJtdWx0aXBsZVwiIGFuZCBcInR3b1Bvd2VyXCIgdG8gZmluZCB0aGVcbiAgLy8gcmVzdCBvZiB0aGUgYml0cyBvZiB0aGUgcmVzdWx0LlxuICB2YXIgdG90YWwyO1xuICBtdWx0aXBsZSA9IG11bHRpcGxlLnNoaWZ0UmlnaHQoMik7XG4gIHR3b1Bvd2VyID0gdHdvUG93ZXIuc2hpZnRSaWdodCgyKTtcbiAgd2hpbGUgKCFtdWx0aXBsZS5pc1plcm8oKSkge1xuICAgIC8vIHdoZW5ldmVyIHdlIGNhbiBhZGQgXCJtdWx0aXBsZVwiIHRvIHRoZSB0b3RhbCBhbmQgbm90IGV4Y2VlZFxuICAgIC8vIFwidGhpc1wiLCB0aGF0IG1lYW5zIHdlJ3ZlIGZvdW5kIGEgMSBiaXQuIEVsc2Ugd2UndmUgZm91bmQgYSAwXG4gICAgLy8gYW5kIGRvbid0IG5lZWQgdG8gYWRkIHRvIHRoZSByZXN1bHQuXG4gICAgdG90YWwyID0gdG90YWwuYWRkKG11bHRpcGxlKTtcbiAgICBpZiAodG90YWwyLmxlc3NUaGFuT3JFcXVhbCh0aGlzKSkge1xuICAgICAgcmVzID0gcmVzLmFkZCh0d29Qb3dlcik7XG4gICAgICB0b3RhbCA9IHRvdGFsMjtcbiAgICB9XG4gICAgbXVsdGlwbGUgPSBtdWx0aXBsZS5zaGlmdFJpZ2h0KDEpO1xuICAgIHR3b1Bvd2VyID0gdHdvUG93ZXIuc2hpZnRSaWdodCgxKTtcbiAgfVxuXG5cbiAgLy8gVE9ETyh1c2VyKTogQ2FsY3VsYXRlIHRoaXMgbW9yZSBlZmZpY2llbnRseSBkdXJpbmcgdGhlIGRpdmlzaW9uLlxuICAvLyBUaGlzIGlzIGtpbmQgb2YgYSB3YXN0ZSBzaW5jZSBpdCBpc24ndCBhbHdheXMgbmVlZGVkLCBidXQgaXQga2VlcHMgdGhlXG4gIC8vIEFQSSBzbW9vdGguIFNpbmNlIHRoaXMgaXMgYWxyZWFkeSBhIHNsb3cgcGF0aCBpdCBwcm9iYWJseSBpc24ndCBhIGJpZyBkZWFsLlxuICB2YXIgcmVtYWluZGVyID0gdGhpcy5zdWJ0cmFjdChyZXMubXVsdGlwbHkob3RoZXIpKTtcbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlci5EaXZpc2lvblJlc3VsdChyZXMsIHJlbWFpbmRlcik7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGlzIEludGVnZXIgZGl2aWRlZCBieSB0aGUgZ2l2ZW4gb25lLlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkludGVnZXJ9IG90aGVyIFRoZSBJbnRlZ2VyIHRvIGRpdmlkZSB0aGlzIGJ5LlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGlzIHZhbHVlIGRpdmlkZWQgYnkgdGhlIGdpdmVuIG9uZS5cbiAqL1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHRoaXMuZGl2aWRlQW5kUmVtYWluZGVyKG90aGVyKS5xdW90aWVudDtcbn07XG5cblxuLyoqXG4gKiBBIHN0cnVjdCBmb3IgaG9sZGluZyB0aGUgcXVvdGllbnQgYW5kIHJlbWFpbmRlciBvZiBhIGRpdmlzaW9uLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkludGVnZXJ9IHF1b3RpZW50XG4gKiBAcGFyYW0geyFnb29nLm1hdGguSW50ZWdlcn0gcmVtYWluZGVyXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLkRpdmlzaW9uUmVzdWx0ID0gZnVuY3Rpb24ocXVvdGllbnQsIHJlbWFpbmRlcikge1xuICAndXNlIHN0cmljdCc7XG4gIC8qKiBAY29uc3QgKi9cbiAgdGhpcy5xdW90aWVudCA9IHF1b3RpZW50O1xuXG4gIC8qKiBAY29uc3QgKi9cbiAgdGhpcy5yZW1haW5kZXIgPSByZW1haW5kZXI7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGlzIEludGVnZXIgZGl2aWRlZCBieSB0aGUgZ2l2ZW4gb25lLCBhcyB3ZWxsIGFzIHRoZSByZW1haW5kZXIgb2ZcbiAqIHRoYXQgZGl2aXNpb24uXG4gKlxuICogQHBhcmFtIHshZ29vZy5tYXRoLkludGVnZXJ9IG90aGVyIFRoZSBJbnRlZ2VyIHRvIGRpdmlkZSB0aGlzIGJ5LlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyLkRpdmlzaW9uUmVzdWx0fVxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAob3RoZXIuaXNaZXJvKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpdmlzaW9uIGJ5IHplcm8nKTtcbiAgfSBlbHNlIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlci5EaXZpc2lvblJlc3VsdChcbiAgICAgICAgZ29vZy5tYXRoLkludGVnZXIuWkVSTywgZ29vZy5tYXRoLkludGVnZXIuWkVSTyk7XG4gIH1cblxuICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcbiAgICAvLyBEbyB0aGUgZGl2aXNpb24gb24gdGhlIG5lZ2F0aXZlIG9mIHRoZSBudW1lcmF0b3IuLi5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5uZWdhdGUoKS5kaXZpZGVBbmRSZW1haW5kZXIob3RoZXIpO1xuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLkludGVnZXIuRGl2aXNpb25SZXN1bHQoXG4gICAgICAgIC8vIC4uLmFuZCBmbGlwIHRoZSBzaWduIGJhY2sgYWZ0ZXIuXG4gICAgICAgIHJlc3VsdC5xdW90aWVudC5uZWdhdGUoKSxcbiAgICAgICAgLy8gVGhlIHJlbWFpbmRlciBtdXN0IGFsd2F5cyBoYXZlIHRoZSBzYW1lIHNpZ24gYXMgdGhlIG51bWVyYXRvci5cbiAgICAgICAgcmVzdWx0LnJlbWFpbmRlci5uZWdhdGUoKSk7XG4gIH0gZWxzZSBpZiAob3RoZXIuaXNOZWdhdGl2ZSgpKSB7XG4gICAgLy8gRG8gdGhlIGRpdmlzaW9uIG9uIHRoZSBuZWdhdGl2ZSBvZiB0aGUgZGVub21pbmF0b3IuLi5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5kaXZpZGVBbmRSZW1haW5kZXIob3RoZXIubmVnYXRlKCkpO1xuICAgIHJldHVybiBuZXcgZ29vZy5tYXRoLkludGVnZXIuRGl2aXNpb25SZXN1bHQoXG4gICAgICAgIC8vIC4uLmFuZCBmbGlwIHRoZSBzaWduIGJhY2sgYWZ0ZXIuXG4gICAgICAgIHJlc3VsdC5xdW90aWVudC5uZWdhdGUoKSxcbiAgICAgICAgLy8gVGhlIHJlbWFpbmRlciBtdXN0IGFsd2F5cyBoYXZlIHRoZSBzYW1lIHNpZ24gYXMgdGhlIG51bWVyYXRvci5cbiAgICAgICAgcmVzdWx0LnJlbWFpbmRlcik7XG4gIH1cblxuICAvLyBIYXZlIHRvIGRlZ3JhZGUgdG8gc2xvd0RpdmlkZSBmb3IgVmVyeSBMYXJnZSBOdW1iZXJzLCBiZWNhdXNlXG4gIC8vIHRoZXkncmUgb3V0IG9mIHJhbmdlIGZvciB0aGUgZmxvYXRpbmctcG9pbnQgYXBwcm94aW1hdGlvblxuICAvLyB0ZWNobmlxdWUgdXNlZCBiZWxvdy5cbiAgaWYgKHRoaXMuYml0c18ubGVuZ3RoID4gMzApIHtcbiAgICByZXR1cm4gdGhpcy5zbG93RGl2aWRlXyhvdGhlcik7XG4gIH1cblxuICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxuICAvLyBmbG9hdGluZy1wb2ludCB0aGF0IGFwcHJveGltYXRlcyByZW1haW5kZXIgLyBvdGhlciAqZnJvbSBiZWxvdyosIGFkZCB0aGlzXG4gIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcbiAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxuICAvLyByZW1haW5kZXIgbmV2ZXIgYmVjb21lcyBuZWdhdGl2ZS5cbiAgdmFyIHJlcyA9IGdvb2cubWF0aC5JbnRlZ2VyLlpFUk87XG4gIHZhciByZW0gPSB0aGlzO1xuICB3aGlsZSAocmVtLmdyZWF0ZXJUaGFuT3JFcXVhbChvdGhlcikpIHtcbiAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXG4gICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXG4gICAgdmFyIGFwcHJveCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocmVtLnRvTnVtYmVyKCkgLyBvdGhlci50b051bWJlcigpKSk7XG5cbiAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXG4gICAgLy8gdGhlIHNtYWxsZXN0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0LCB3aGljaGV2ZXIgaXMgbGFyZ2VyLlxuICAgIHZhciBsb2cyID0gTWF0aC5jZWlsKE1hdGgubG9nKGFwcHJveCkgLyBNYXRoLkxOMik7XG4gICAgdmFyIGRlbHRhID0gKGxvZzIgPD0gNDgpID8gMSA6IE1hdGgucG93KDIsIGxvZzIgLSA0OCk7XG5cbiAgICAvLyBEZWNyZWFzZSB0aGUgYXBwcm94aW1hdGlvbiB1bnRpbCBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHJlbWFpbmRlci4gIE5vdGVcbiAgICAvLyB0aGF0IGlmIGl0IGlzIHRvbyBsYXJnZSwgdGhlIHByb2R1Y3Qgb3ZlcmZsb3dzIGFuZCBpcyBuZWdhdGl2ZS5cbiAgICB2YXIgYXBwcm94UmVzID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbU51bWJlcihhcHByb3gpO1xuICAgIHZhciBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsdGlwbHkob3RoZXIpO1xuICAgIHdoaWxlIChhcHByb3hSZW0uaXNOZWdhdGl2ZSgpIHx8IGFwcHJveFJlbS5ncmVhdGVyVGhhbihyZW0pKSB7XG4gICAgICBhcHByb3ggLT0gZGVsdGE7XG4gICAgICBhcHByb3hSZXMgPSBnb29nLm1hdGguSW50ZWdlci5mcm9tTnVtYmVyKGFwcHJveCk7XG4gICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsdGlwbHkob3RoZXIpO1xuICAgIH1cblxuICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxuICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxuICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpIHtcbiAgICAgIGFwcHJveFJlcyA9IGdvb2cubWF0aC5JbnRlZ2VyLk9ORTtcbiAgICB9XG5cbiAgICByZXMgPSByZXMuYWRkKGFwcHJveFJlcyk7XG4gICAgcmVtID0gcmVtLnN1YnRyYWN0KGFwcHJveFJlbSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlci5EaXZpc2lvblJlc3VsdChyZXMsIHJlbSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGlzIEludGVnZXIgbW9kdWxvIHRoZSBnaXZlbiBvbmUuXG4gKiBAcGFyYW0geyFnb29nLm1hdGguSW50ZWdlcn0gb3RoZXIgVGhlIEludGVnZXIgYnkgd2hpY2ggdG8gbW9kLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGlzIHZhbHVlIG1vZHVsbyB0aGUgZ2l2ZW4gb25lLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUubW9kdWxvID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gdGhpcy5kaXZpZGVBbmRSZW1haW5kZXIob3RoZXIpLnJlbWFpbmRlcjtcbn07XG5cblxuLyoqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIGJpdHdpc2UtTk9UIG9mIHRoaXMgdmFsdWUuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGxlbiA9IHRoaXMuYml0c18ubGVuZ3RoO1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnJbaV0gPSB+dGhpcy5iaXRzX1tpXTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGFyciwgfnRoaXMuc2lnbl8pO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UtQU5EIG9mIHRoaXMgSW50ZWdlciBhbmQgdGhlIGdpdmVuIG9uZS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkludGVnZXJ9IG90aGVyIFRoZSBJbnRlZ2VyIHRvIEFORCB3aXRoIHRoaXMuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkludGVnZXJ9IFRoZSBiaXR3aXNlLUFORCBvZiB0aGlzIGFuZCB0aGUgb3RoZXIuXG4gKi9cbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbihvdGhlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBsZW4gPSBNYXRoLm1heCh0aGlzLmJpdHNfLmxlbmd0aCwgb3RoZXIuYml0c18ubGVuZ3RoKTtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyW2ldID0gdGhpcy5nZXRCaXRzKGkpICYgb3RoZXIuZ2V0Qml0cyhpKTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGFyciwgdGhpcy5zaWduXyAmIG90aGVyLnNpZ25fKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlLU9SIG9mIHRoaXMgSW50ZWdlciBhbmQgdGhlIGdpdmVuIG9uZS5cbiAqIEBwYXJhbSB7Z29vZy5tYXRoLkludGVnZXJ9IG90aGVyIFRoZSBJbnRlZ2VyIHRvIE9SIHdpdGggdGhpcy5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhlIGJpdHdpc2UtT1Igb2YgdGhpcyBhbmQgdGhlIG90aGVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUub3IgPSBmdW5jdGlvbihvdGhlcikge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBsZW4gPSBNYXRoLm1heCh0aGlzLmJpdHNfLmxlbmd0aCwgb3RoZXIuYml0c18ubGVuZ3RoKTtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyW2ldID0gdGhpcy5nZXRCaXRzKGkpIHwgb3RoZXIuZ2V0Qml0cyhpKTtcbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGFyciwgdGhpcy5zaWduXyB8IG90aGVyLnNpZ25fKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlLVhPUiBvZiB0aGlzIEludGVnZXIgYW5kIHRoZSBnaXZlbiBvbmUuXG4gKiBAcGFyYW0ge2dvb2cubWF0aC5JbnRlZ2VyfSBvdGhlciBUaGUgSW50ZWdlciB0byBYT1Igd2l0aCB0aGlzLlxuICogQHJldHVybiB7IWdvb2cubWF0aC5JbnRlZ2VyfSBUaGUgYml0d2lzZS1YT1Igb2YgdGhpcyBhbmQgdGhlIG90aGVyLlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbGVuID0gTWF0aC5tYXgodGhpcy5iaXRzXy5sZW5ndGgsIG90aGVyLmJpdHNfLmxlbmd0aCk7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGFycltpXSA9IHRoaXMuZ2V0Qml0cyhpKSBeIG90aGVyLmdldEJpdHMoaSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlcihhcnIsIHRoaXMuc2lnbl8gXiBvdGhlci5zaWduXyk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGlzIHZhbHVlIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtQml0cyBUaGUgbnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggdG8gc2hpZnQuXG4gKiBAcmV0dXJuIHshZ29vZy5tYXRoLkludGVnZXJ9IFRoaXMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gZnVuY3Rpb24obnVtQml0cykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBhcnJfZGVsdGEgPSBudW1CaXRzID4+IDU7XG4gIHZhciBiaXRfZGVsdGEgPSBudW1CaXRzICUgMzI7XG4gIHZhciBsZW4gPSB0aGlzLmJpdHNfLmxlbmd0aCArIGFycl9kZWx0YSArIChiaXRfZGVsdGEgPiAwID8gMSA6IDApO1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYml0X2RlbHRhID4gMCkge1xuICAgICAgYXJyW2ldID0gKHRoaXMuZ2V0Qml0cyhpIC0gYXJyX2RlbHRhKSA8PCBiaXRfZGVsdGEpIHxcbiAgICAgICAgICAodGhpcy5nZXRCaXRzKGkgLSBhcnJfZGVsdGEgLSAxKSA+Pj4gKDMyIC0gYml0X2RlbHRhKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFycltpXSA9IHRoaXMuZ2V0Qml0cyhpIC0gYXJyX2RlbHRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBnb29nLm1hdGguSW50ZWdlcihhcnIsIHRoaXMuc2lnbl8pO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhpcyB2YWx1ZSB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1CaXRzIFRoZSBudW1iZXIgb2YgYml0cyBieSB3aGljaCB0byBzaGlmdC5cbiAqIEByZXR1cm4geyFnb29nLm1hdGguSW50ZWdlcn0gVGhpcyBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuICovXG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuc2hpZnRSaWdodCA9IGZ1bmN0aW9uKG51bUJpdHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgYXJyX2RlbHRhID0gbnVtQml0cyA+PiA1O1xuICB2YXIgYml0X2RlbHRhID0gbnVtQml0cyAlIDMyO1xuICB2YXIgbGVuID0gdGhpcy5iaXRzXy5sZW5ndGggLSBhcnJfZGVsdGE7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChiaXRfZGVsdGEgPiAwKSB7XG4gICAgICBhcnJbaV0gPSAodGhpcy5nZXRCaXRzKGkgKyBhcnJfZGVsdGEpID4+PiBiaXRfZGVsdGEpIHxcbiAgICAgICAgICAodGhpcy5nZXRCaXRzKGkgKyBhcnJfZGVsdGEgKyAxKSA8PCAoMzIgLSBiaXRfZGVsdGEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJyW2ldID0gdGhpcy5nZXRCaXRzKGkgKyBhcnJfZGVsdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IGdvb2cubWF0aC5JbnRlZ2VyKGFyciwgdGhpcy5zaWduXyk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBCcmluZyBpbiBjbG9zdXJlLWxpYnJhcnkgZGVwZW5kZW5jaWVzXG4gKi9cblxuZ29vZy5wcm92aWRlKCdmaXJlYmFzZS53ZWJjaGFubmVsLndyYXBwZXInKTtcblxuLy8gZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydFxuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5jcmVhdGVXZWJDaGFubmVsVHJhbnNwb3J0Jyk7XG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LkZldGNoWG1sSHR0cEZhY3RvcnknKTtcbmdvb2cucmVxdWlyZSgnZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLnJlcXVlc3RTdGF0cycpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQnKTtcblxuLyoqXG4gKiBOT1RFOiBUaGUgYGNyZWF0ZVdlYkNoYW5uZWxgIGZ1bmN0aW9uIHRha2VzIGFuIG9wdGlvbnMgb2JqZWN0IGFzIGEgc2Vjb25kIHBhcmFtXG4gKiB3aG9zZSBwcm9wZXJ0aWVzIGFyZSB0eXBpY2FsbHkgbWFuZ2xlZC4gV2Ugb3ZlcnJpZGUgdGhlc2UgaW4gZXh0ZXJucy9vdmVycmlkZXMuanNcbiAqIFdpdGhvdXQgdGhvc2UgZXh0ZXJucywgdGhpcyBkb2VzIG5vdCBmdW5jdGlvbiBwcm9wZXJseS5cbiAqL1xuZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LnByb3RvdHlwZVsnY3JlYXRlV2ViQ2hhbm5lbCddID1cbiAgZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5jcmVhdGVXZWJDaGFubmVsO1xuZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwucHJvdG90eXBlWydzZW5kJ10gPVxuICBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUuc2VuZDtcbmdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydC5DaGFubmVsLnByb3RvdHlwZVsnb3BlbiddID1cbiAgZ29vZy5sYWJzLm5ldC53ZWJDaGFubmVsLldlYkNoYW5uZWxCYXNlVHJhbnNwb3J0LkNoYW5uZWwucHJvdG90eXBlLm9wZW47XG5nb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGVbJ2Nsb3NlJ10gPVxuICBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwuV2ViQ2hhbm5lbEJhc2VUcmFuc3BvcnQuQ2hhbm5lbC5wcm90b3R5cGUuY2xvc2U7XG5cbi8vIGdvb2cubmV0LkVycm9yQ29kZVxuZ29vZy5yZXF1aXJlKCdnb29nLm5ldC5FcnJvckNvZGUnKTtcbmdvb2cubmV0LkVycm9yQ29kZVsnTk9fRVJST1InXSA9IGdvb2cubmV0LkVycm9yQ29kZS5OT19FUlJPUjtcbmdvb2cubmV0LkVycm9yQ29kZVsnVElNRU9VVCddID0gZ29vZy5uZXQuRXJyb3JDb2RlLlRJTUVPVVQ7XG5nb29nLm5ldC5FcnJvckNvZGVbJ0hUVFBfRVJST1InXSA9IGdvb2cubmV0LkVycm9yQ29kZS5IVFRQX0VSUk9SO1xuXG4vLyBnb29nLm5ldC5FcnJvclR5cGVcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuRXZlbnRUeXBlJyk7XG5nb29nLm5ldC5FdmVudFR5cGVbJ0NPTVBMRVRFJ10gPSBnb29nLm5ldC5FdmVudFR5cGUuQ09NUExFVEU7XG5cbi8vIGdvb2cubmV0LldlYkNoYW5uZWxcbmdvb2cucmVxdWlyZSgnZ29vZy5uZXQuV2ViQ2hhbm5lbCcpO1xuZ29vZy5yZXF1aXJlKCdnb29nLmV2ZW50cy5FdmVudFRhcmdldCcpO1xuZ29vZy5uZXQuV2ViQ2hhbm5lbFsnRXZlbnRUeXBlJ10gPSBnb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZTtcbmdvb2cubmV0LldlYkNoYW5uZWwuRXZlbnRUeXBlWydPUEVOJ10gPSBnb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZS5PUEVOO1xuZ29vZy5uZXQuV2ViQ2hhbm5lbC5FdmVudFR5cGVbJ0NMT1NFJ10gPSBnb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZS5DTE9TRTtcbmdvb2cubmV0LldlYkNoYW5uZWwuRXZlbnRUeXBlWydFUlJPUiddID0gZ29vZy5uZXQuV2ViQ2hhbm5lbC5FdmVudFR5cGUuRVJST1I7XG5nb29nLm5ldC5XZWJDaGFubmVsLkV2ZW50VHlwZVsnTUVTU0FHRSddID1cbiAgZ29vZy5uZXQuV2ViQ2hhbm5lbC5FdmVudFR5cGUuTUVTU0FHRTtcbmdvb2cuZXZlbnRzLkV2ZW50VGFyZ2V0LnByb3RvdHlwZVsnbGlzdGVuJ10gPVxuICBnb29nLmV2ZW50cy5FdmVudFRhcmdldC5wcm90b3R5cGUubGlzdGVuO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cubmV0LlhocklvJyk7XG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGVbJ2xpc3Rlbk9uY2UnXSA9IGdvb2cubmV0LlhocklvLnByb3RvdHlwZS5saXN0ZW5PbmNlO1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlWydnZXRMYXN0RXJyb3InXSA9XG4gIGdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRMYXN0RXJyb3I7XG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGVbJ2dldExhc3RFcnJvckNvZGUnXSA9XG4gIGdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRMYXN0RXJyb3JDb2RlO1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlWydnZXRTdGF0dXMnXSA9IGdvb2cubmV0LlhocklvLnByb3RvdHlwZS5nZXRTdGF0dXM7XG5nb29nLm5ldC5YaHJJby5wcm90b3R5cGVbJ2dldFJlc3BvbnNlSnNvbiddID1cbiAgZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlLmdldFJlc3BvbnNlSnNvbjtcbmdvb2cubmV0LlhocklvLnByb3RvdHlwZVsnZ2V0UmVzcG9uc2VUZXh0J10gPVxuICBnb29nLm5ldC5YaHJJby5wcm90b3R5cGUuZ2V0UmVzcG9uc2VUZXh0O1xuZ29vZy5uZXQuWGhySW8ucHJvdG90eXBlWydzZW5kJ10gPSBnb29nLm5ldC5YaHJJby5wcm90b3R5cGUuc2VuZDtcbmdvb2cubmV0LlhocklvLnByb3RvdHlwZVsnc2V0V2l0aENyZWRlbnRpYWxzJ10gPVxuICBnb29nLm5ldC5YaHJJby5wcm90b3R5cGUuc2V0V2l0aENyZWRlbnRpYWxzO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cuY3J5cHQuTWQ1Jyk7XG5nb29nLmNyeXB0Lk1kNS5wcm90b3R5cGVbJ2RpZ2VzdCddID0gZ29vZy5jcnlwdC5NZDUucHJvdG90eXBlLmRpZ2VzdDtcbmdvb2cuY3J5cHQuTWQ1LnByb3RvdHlwZVsncmVzZXQnXSA9IGdvb2cuY3J5cHQuTWQ1LnByb3RvdHlwZS5yZXNldDtcbmdvb2cuY3J5cHQuTWQ1LnByb3RvdHlwZVsndXBkYXRlJ10gPSBnb29nLmNyeXB0Lk1kNS5wcm90b3R5cGUudXBkYXRlO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cubWF0aC5JbnRlZ2VyJyk7XG5nb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGVbJ2FkZCddID0gZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmFkZDtcbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZVsnbXVsdGlwbHknXSA9IGdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseTtcbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZVsnbW9kdWxvJ10gPSBnb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUubW9kdWxvO1xuZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlWydjb21wYXJlJ10gPSBnb29nLm1hdGguSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZTtcbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZVsndG9OdW1iZXInXSA9IGdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS50b051bWJlcjtcbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZVsndG9TdHJpbmcnXSA9IGdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZztcbmdvb2cubWF0aC5JbnRlZ2VyLnByb3RvdHlwZVsnZ2V0Qml0cyddID0gZ29vZy5tYXRoLkludGVnZXIucHJvdG90eXBlLmdldEJpdHM7XG5nb29nLm1hdGguSW50ZWdlclsnZnJvbU51bWJlciddID0gZ29vZy5tYXRoLkludGVnZXIuZnJvbU51bWJlcjtcbmdvb2cubWF0aC5JbnRlZ2VyWydmcm9tU3RyaW5nJ10gPSBnb29nLm1hdGguSW50ZWdlci5mcm9tU3RyaW5nO1xuXG5tb2R1bGVbJ2V4cG9ydHMnXVsnY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCddID1cbiAgZ29vZy5uZXQuY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydDtcbm1vZHVsZVsnZXhwb3J0cyddWydnZXRTdGF0RXZlbnRUYXJnZXQnXSA9XG4gIGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHMuZ2V0U3RhdEV2ZW50VGFyZ2V0O1xubW9kdWxlWydleHBvcnRzJ11bJ0Vycm9yQ29kZSddID0gZ29vZy5uZXQuRXJyb3JDb2RlO1xubW9kdWxlWydleHBvcnRzJ11bJ0V2ZW50VHlwZSddID0gZ29vZy5uZXQuRXZlbnRUeXBlO1xubW9kdWxlWydleHBvcnRzJ11bJ0V2ZW50J10gPSBnb29nLmxhYnMubmV0LndlYkNoYW5uZWwucmVxdWVzdFN0YXRzLkV2ZW50O1xubW9kdWxlWydleHBvcnRzJ11bJ1N0YXQnXSA9IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5yZXF1ZXN0U3RhdHMuU3RhdDtcbm1vZHVsZVsnZXhwb3J0cyddWydGZXRjaFhtbEh0dHBGYWN0b3J5J10gPSBnb29nLm5ldC5GZXRjaFhtbEh0dHBGYWN0b3J5O1xubW9kdWxlWydleHBvcnRzJ11bJ1dlYkNoYW5uZWwnXSA9IGdvb2cubmV0LldlYkNoYW5uZWw7XG5tb2R1bGVbJ2V4cG9ydHMnXVsnWGhySW8nXSA9IGdvb2cubmV0LlhocklvO1xubW9kdWxlWydleHBvcnRzJ11bJ01kNSddID0gZ29vZy5jcnlwdC5NZDU7XG5tb2R1bGVbJ2V4cG9ydHMnXVsnSW50ZWdlciddID0gZ29vZy5tYXRoLkludGVnZXI7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGVmYXVsdCBmYWN0b3J5IGZvciA8Y29kZT5XZWJDaGFubmVsVHJhbnNwb3J0PC9jb2RlPiB0b1xuICogYXZvaWQgZXhwb3NpbmcgY29uY3JldGUgY2xhc3NlcyB0byBjbGllbnRzLlxuICovXG5cbmdvb2cucHJvdmlkZSgnZ29vZy5uZXQuY3JlYXRlV2ViQ2hhbm5lbFRyYW5zcG9ydCcpO1xuXG5nb29nLnJlcXVpcmUoJ2dvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydCcpO1xuZ29vZy5yZXF1aXJlVHlwZSgnZ29vZy5uZXQuV2ViQ2hhbm5lbFRyYW5zcG9ydCcpO1xuXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IFdlYkNoYW5uZWxUcmFuc3BvcnQgaW5zdGFuY2UgdXNpbmcgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24uXG4gKiBUaHJvd3MgYW4gZXJyb3IgbWVzc2FnZSBpZiBubyBkZWZhdWx0IHRyYW5zcG9ydCBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnRcbiAqIGVudmlyb25tZW50LlxuICpcbiAqIEByZXR1cm4geyFnb29nLm5ldC5XZWJDaGFubmVsVHJhbnNwb3J0fSB0aGUgbmV3bHkgY3JlYXRlZCB0cmFuc3BvcnQgaW5zdGFuY2UuXG4gKi9cbmdvb2cubmV0LmNyZWF0ZVdlYkNoYW5uZWxUcmFuc3BvcnQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gbmV3IGdvb2cubGFicy5uZXQud2ViQ2hhbm5lbC5XZWJDaGFubmVsQmFzZVRyYW5zcG9ydCgpO1xu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