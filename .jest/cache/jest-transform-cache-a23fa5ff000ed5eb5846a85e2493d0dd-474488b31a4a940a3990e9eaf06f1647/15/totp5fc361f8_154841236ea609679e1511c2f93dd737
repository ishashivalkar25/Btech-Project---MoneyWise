5322ce2d06ae1046b3c92c8f61e90cc2
'use strict';

var tslib = require('tslib');
var util = require('@firebase/util');
var app = require('@firebase/app');
var component = require('@firebase/component');
var fetchImpl = require('node-fetch');
var logger = require('@firebase/logger');
function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function get() {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
var fetchImpl__namespace = _interopNamespace(fetchImpl);

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FactorId = {
  PHONE: 'phone',
  TOTP: 'totp'
};
var ProviderId = {
  FACEBOOK: 'facebook.com',
  GITHUB: 'github.com',
  GOOGLE: 'google.com',
  PASSWORD: 'password',
  PHONE: 'phone',
  TWITTER: 'twitter.com'
};
var SignInMethod = {
  EMAIL_LINK: 'emailLink',
  EMAIL_PASSWORD: 'password',
  FACEBOOK: 'facebook.com',
  GITHUB: 'github.com',
  GOOGLE: 'google.com',
  PHONE: 'phone',
  TWITTER: 'twitter.com'
};
var OperationType = {
  LINK: 'link',
  REAUTHENTICATE: 'reauthenticate',
  SIGN_IN: 'signIn'
};
var ActionCodeOperation = {
  EMAIL_SIGNIN: 'EMAIL_SIGNIN',
  PASSWORD_RESET: 'PASSWORD_RESET',
  RECOVER_EMAIL: 'RECOVER_EMAIL',
  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _debugErrorMap() {
  var _a;
  return _a = {}, _a["admin-restricted-operation"] = 'This operation is restricted to administrators only.', _a["argument-error"] = '', _a["app-not-authorized"] = "This app, identified by the domain where it's hosted, is not " + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.', _a["app-not-installed"] = 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.', _a["captcha-check-failed"] = 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.', _a["code-expired"] = 'The SMS code has expired. Please re-send the verification code to try ' + 'again.', _a["cordova-not-ready"] = 'Cordova framework is not ready.', _a["cors-unsupported"] = 'This browser is not supported.', _a["credential-already-in-use"] = 'This credential is already associated with a different user account.', _a["custom-token-mismatch"] = 'The custom token corresponds to a different audience.', _a["requires-recent-login"] = 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.', _a["dependent-sdk-initialized-before-auth"] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.', _a["dynamic-link-not-activated"] = 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.', _a["email-change-needs-verification"] = 'Multi-factor users must always have a verified email.', _a["email-already-in-use"] = 'The email address is already in use by another account.', _a["emulator-config-failed"] = 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '"connectAuthEmulator()" sooner.', _a["expired-action-code"] = 'The action code has expired.', _a["cancelled-popup-request"] = 'This operation has been cancelled due to another conflicting popup being opened.', _a["internal-error"] = 'An internal AuthError has occurred.', _a["invalid-app-credential"] = 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.', _a["invalid-app-id"] = 'The mobile app identifier is not registed for the current project.', _a["invalid-user-token"] = "This user's credential isn't valid for this project. This can happen " + "if the user's token has been tampered with, or if the user isn't for " + 'the project associated with this API key.', _a["invalid-auth-event"] = 'An internal AuthError has occurred.', _a["invalid-verification-code"] = 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.', _a["invalid-continue-uri"] = 'The continue URL provided in the request is invalid.', _a["invalid-cordova-configuration"] = 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.', _a["invalid-custom-token"] = 'The custom token format is incorrect. Please check the documentation.', _a["invalid-dynamic-link-domain"] = 'The provided dynamic link domain is not configured or authorized for the current project.', _a["invalid-email"] = 'The email address is badly formatted.', _a["invalid-emulator-scheme"] = 'Emulator URL must start with a valid scheme (http:// or https://).', _a["invalid-api-key"] = 'Your API key is invalid, please check you have copied it correctly.', _a["invalid-cert-hash"] = 'The SHA-1 certificate hash provided is invalid.', _a["invalid-credential"] = 'The supplied auth credential is malformed or has expired.', _a["invalid-message-payload"] = 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.', _a["invalid-multi-factor-session"] = 'The request does not contain a valid proof of first factor successful sign-in.', _a["invalid-oauth-provider"] = 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.', _a["invalid-oauth-client-id"] = 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.', _a["unauthorized-domain"] = 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.', _a["invalid-action-code"] = 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.', _a["wrong-password"] = 'The password is invalid or the user does not have a password.', _a["invalid-persistence-type"] = 'The specified persistence type is invalid. It can only be local, session or none.', _a["invalid-phone-number"] = 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].', _a["invalid-provider-id"] = 'The specified provider ID is invalid.', _a["invalid-recipient-email"] = 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.', _a["invalid-sender"] = 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.', _a["invalid-verification-id"] = 'The verification ID used to create the phone auth credential is invalid.', _a["invalid-tenant-id"] = "The Auth instance's tenant ID is invalid.", _a["login-blocked"] = 'Login blocked by user-provided method: {$originalMessage}', _a["missing-android-pkg-name"] = 'An Android Package Name must be provided if the Android App is required to be installed.', _a["auth-domain-config-required"] = 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.', _a["missing-app-credential"] = 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.', _a["missing-verification-code"] = 'The phone auth credential was created with an empty SMS verification code.', _a["missing-continue-uri"] = 'A continue URL must be provided in the request.', _a["missing-iframe-start"] = 'An internal AuthError has occurred.', _a["missing-ios-bundle-id"] = 'An iOS Bundle ID must be provided if an App Store ID is provided.', _a["missing-or-invalid-nonce"] = 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.', _a["missing-password"] = 'A non-empty password must be provided', _a["missing-multi-factor-info"] = 'No second factor identifier is provided.', _a["missing-multi-factor-session"] = 'The request is missing proof of first factor successful sign-in.', _a["missing-phone-number"] = 'To send verification codes, provide a phone number for the recipient.', _a["missing-verification-id"] = 'The phone auth credential was created with an empty verification ID.', _a["app-deleted"] = 'This instance of FirebaseApp has been deleted.', _a["multi-factor-info-not-found"] = 'The user does not have a second factor matching the identifier provided.', _a["multi-factor-auth-required"] = 'Proof of ownership of a second factor is required to complete sign-in.', _a["account-exists-with-different-credential"] = 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.', _a["network-request-failed"] = 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.', _a["no-auth-event"] = 'An internal AuthError has occurred.', _a["no-such-provider"] = 'User was not linked to an account with the given provider.', _a["null-user"] = 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.', _a["operation-not-allowed"] = 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.', _a["operation-not-supported-in-this-environment"] = 'This operation is not supported in the environment this application is ' + 'running on. "location.protocol" must be http, https or chrome-extension' + ' and web storage must be enabled.', _a["popup-blocked"] = 'Unable to establish a connection with the popup. It may have been blocked by the browser.', _a["popup-closed-by-user"] = 'The popup has been closed by the user before finalizing the operation.', _a["provider-already-linked"] = 'User can only be linked to one identity for the given provider.', _a["quota-exceeded"] = "The project's quota for this operation has been exceeded.", _a["redirect-cancelled-by-user"] = 'The redirect operation has been cancelled by the user before finalizing.', _a["redirect-operation-pending"] = 'A redirect sign-in operation is already pending.', _a["rejected-credential"] = 'The request contains malformed or mismatching credentials.', _a["second-factor-already-in-use"] = 'The second factor is already enrolled on this account.', _a["maximum-second-factor-count-exceeded"] = 'The maximum allowed number of second factors on a user has been exceeded.', _a["tenant-id-mismatch"] = "The provided tenant ID does not match the Auth instance's tenant ID", _a["timeout"] = 'The operation has timed out.', _a["user-token-expired"] = "The user's credential is no longer valid. The user must sign in again.", _a["too-many-requests"] = 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.', _a["unauthorized-continue-uri"] = 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.', _a["unsupported-first-factor"] = 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.', _a["unsupported-persistence-type"] = 'The current environment does not support the specified persistence type.', _a["unsupported-tenant-operation"] = 'This operation is not supported in a multi-tenant context.', _a["unverified-email"] = 'The operation requires a verified email.', _a["user-cancelled"] = 'The user did not grant your application the permissions it requested.', _a["user-not-found"] = 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.', _a["user-disabled"] = 'The user account has been disabled by an administrator.', _a["user-mismatch"] = 'The supplied credentials do not correspond to the previously signed in user.', _a["user-signed-out"] = '', _a["weak-password"] = 'The password must be 6 characters long or more.', _a["web-storage-unsupported"] = 'This browser is not supported or 3rd party cookies and data may be disabled.', _a["already-initialized"] = 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.', _a["missing-recaptcha-token"] = 'The reCAPTCHA token is missing when sending request to the backend.', _a["invalid-recaptcha-token"] = 'The reCAPTCHA token is invalid when sending request to the backend.', _a["invalid-recaptcha-action"] = 'The reCAPTCHA action is invalid when sending request to the backend.', _a["recaptcha-not-enabled"] = 'reCAPTCHA Enterprise integration is not enabled for this project.', _a["missing-client-type"] = 'The reCAPTCHA client type is missing when sending request to the backend.', _a["missing-recaptcha-version"] = 'The reCAPTCHA version is missing when sending request to the backend.', _a["invalid-req-type"] = 'Invalid request parameters.', _a["invalid-recaptcha-version"] = 'The reCAPTCHA version is invalid when sending request to the backend.', _a;
}
function _prodErrorMap() {
  var _a;
  return _a = {}, _a["dependent-sdk-initialized-before-auth"] = 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.', _a;
}
var debugErrorMap = _debugErrorMap;
var prodErrorMap = _prodErrorMap;
var _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory('auth', 'Firebase', _prodErrorMap());
var AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
  ARGUMENT_ERROR: 'auth/argument-error',
  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
  APP_NOT_INSTALLED: 'auth/app-not-installed',
  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
  CODE_EXPIRED: 'auth/code-expired',
  CORDOVA_NOT_READY: 'auth/cordova-not-ready',
  CORS_UNSUPPORTED: 'auth/cors-unsupported',
  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
  EMAIL_EXISTS: 'auth/email-already-in-use',
  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
  EXPIRED_OOB_CODE: 'auth/expired-action-code',
  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
  INTERNAL_ERROR: 'auth/internal-error',
  INVALID_API_KEY: 'auth/invalid-api-key',
  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
  INVALID_APP_ID: 'auth/invalid-app-id',
  INVALID_AUTH: 'auth/invalid-user-token',
  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
  INVALID_CERT_HASH: 'auth/invalid-cert-hash',
  INVALID_CODE: 'auth/invalid-verification-code',
  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
  INVALID_EMAIL: 'auth/invalid-email',
  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
  INVALID_IDP_RESPONSE: 'auth/invalid-credential',
  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
  INVALID_OOB_CODE: 'auth/invalid-action-code',
  INVALID_ORIGIN: 'auth/unauthorized-domain',
  INVALID_PASSWORD: 'auth/wrong-password',
  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
  INVALID_SENDER: 'auth/invalid-sender',
  INVALID_SESSION_INFO: 'auth/invalid-verification-id',
  INVALID_TENANT_ID: 'auth/invalid-tenant-id',
  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
  MFA_REQUIRED: 'auth/multi-factor-auth-required',
  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
  MISSING_CODE: 'auth/missing-verification-code',
  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
  MISSING_IFRAME_START: 'auth/missing-iframe-start',
  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
  MISSING_SESSION_INFO: 'auth/missing-verification-id',
  MODULE_DESTROYED: 'auth/app-deleted',
  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
  NULL_USER: 'auth/null-user',
  NO_AUTH_EVENT: 'auth/no-auth-event',
  NO_SUCH_PROVIDER: 'auth/no-such-provider',
  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
  POPUP_BLOCKED: 'auth/popup-blocked',
  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
  QUOTA_EXCEEDED: 'auth/quota-exceeded',
  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
  REJECTED_CREDENTIAL: 'auth/rejected-credential',
  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
  TIMEOUT: 'auth/timeout',
  TOKEN_EXPIRED: 'auth/user-token-expired',
  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
  UNVERIFIED_EMAIL: 'auth/unverified-email',
  USER_CANCELLED: 'auth/user-cancelled',
  USER_DELETED: 'auth/user-not-found',
  USER_DISABLED: 'auth/user-disabled',
  USER_MISMATCH: 'auth/user-mismatch',
  USER_SIGNED_OUT: 'auth/user-signed-out',
  WEAK_PASSWORD: 'auth/weak-password',
  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
  ALREADY_INITIALIZED: 'auth/already-initialized',
  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',
  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',
  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',
  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',
  MISSING_CLIENT_TYPE: 'auth/missing-client-type',
  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',
  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',
  INVALID_REQ_TYPE: 'auth/invalid-req-type'
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var logClient = new logger.Logger('@firebase/auth');
function _logWarn(msg) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (logClient.logLevel <= logger.LogLevel.WARN) {
    logClient.warn.apply(logClient, tslib.__spreadArray(["Auth (".concat(app.SDK_VERSION, "): ").concat(msg)], args, false));
  }
}
function _logError(msg) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (logClient.logLevel <= logger.LogLevel.ERROR) {
    logClient.error.apply(logClient, tslib.__spreadArray(["Auth (".concat(app.SDK_VERSION, "): ").concat(msg)], args, false));
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _fail(authOrCode) {
  var rest = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    rest[_i - 1] = arguments[_i];
  }
  throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));
}
function _createError(authOrCode) {
  var rest = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    rest[_i - 1] = arguments[_i];
  }
  return createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));
}
function _errorWithCustomMessage(auth, code, message) {
  var _a;
  var errorMap = tslib.__assign(tslib.__assign({}, prodErrorMap()), (_a = {}, _a[code] = message, _a));
  var factory = new util.ErrorFactory('auth', 'Firebase', errorMap);
  return factory.create(code, {
    appName: auth.name
  });
}
function createErrorInternal(authOrCode) {
  var _a;
  var rest = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    rest[_i - 1] = arguments[_i];
  }
  if (typeof authOrCode !== 'string') {
    var code = rest[0];
    var fullParams = tslib.__spreadArray([], rest.slice(1), true);
    if (fullParams[0]) {
      fullParams[0].appName = authOrCode.name;
    }
    return (_a = authOrCode._errorFactory).create.apply(_a, tslib.__spreadArray([code], fullParams, false));
  }
  return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, tslib.__spreadArray([authOrCode], rest, false));
}
function _assert(assertion, authOrCode) {
  var rest = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    rest[_i - 2] = arguments[_i];
  }
  if (!assertion) {
    throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest, false));
  }
}
function debugFail(failure) {
  var message = "INTERNAL ASSERTION FAILED: " + failure;
  _logError(message);
  throw new Error(message);
}
function debugAssert(assertion, message) {
  if (!assertion) {
    debugFail(message);
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _getCurrentUrl() {
  var _a;
  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';
}
function _isHttpOrHttps() {
  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
function _getCurrentScheme() {
  var _a;
  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _isOnline() {
  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (_isHttpOrHttps() || util.isBrowserExtension() || 'connection' in navigator)) {
    return navigator.onLine;
  }
  return true;
}
function _getUserLanguage() {
  if (typeof navigator === 'undefined') {
    return null;
  }
  var navigatorLanguage = navigator;
  return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language || null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Delay = function () {
  function Delay(shortDelay, longDelay) {
    this.shortDelay = shortDelay;
    this.longDelay = longDelay;
    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
    this.isMobile = util.isMobileCordova() || util.isReactNative();
  }
  Delay.prototype.get = function () {
    if (!_isOnline()) {
      return Math.min(5000, this.shortDelay);
    }
    return this.isMobile ? this.longDelay : this.shortDelay;
  };
  return Delay;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _emulatorUrl(config, path) {
  debugAssert(config.emulator, 'Emulator should always be set here');
  var url = config.emulator.url;
  if (!path) {
    return url;
  }
  return "".concat(url).concat(path.startsWith('/') ? path.slice(1) : path);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FetchProvider = function () {
  function FetchProvider() {}
  FetchProvider.initialize = function (fetchImpl, headersImpl, responseImpl) {
    this.fetchImpl = fetchImpl;
    if (headersImpl) {
      this.headersImpl = headersImpl;
    }
    if (responseImpl) {
      this.responseImpl = responseImpl;
    }
  };
  FetchProvider.fetch = function () {
    if (this.fetchImpl) {
      return this.fetchImpl;
    }
    if (typeof self !== 'undefined' && 'fetch' in self) {
      return self.fetch;
    }
    debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  };
  FetchProvider.headers = function () {
    if (this.headersImpl) {
      return this.headersImpl;
    }
    if (typeof self !== 'undefined' && 'Headers' in self) {
      return self.Headers;
    }
    debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  };
  FetchProvider.response = function () {
    if (this.responseImpl) {
      return this.responseImpl;
    }
    if (typeof self !== 'undefined' && 'Response' in self) {
      return self.Response;
    }
    debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
  };
  return FetchProvider;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$1;
var SERVER_ERROR_MAP = (_a$1 = {}, _a$1["CREDENTIAL_MISMATCH"] = "custom-token-mismatch", _a$1["MISSING_CUSTOM_TOKEN"] = "internal-error", _a$1["INVALID_IDENTIFIER"] = "invalid-email", _a$1["MISSING_CONTINUE_URI"] = "internal-error", _a$1["INVALID_PASSWORD"] = "wrong-password", _a$1["MISSING_PASSWORD"] = "missing-password", _a$1["EMAIL_EXISTS"] = "email-already-in-use", _a$1["PASSWORD_LOGIN_DISABLED"] = "operation-not-allowed", _a$1["INVALID_IDP_RESPONSE"] = "invalid-credential", _a$1["INVALID_PENDING_TOKEN"] = "invalid-credential", _a$1["FEDERATED_USER_ID_ALREADY_LINKED"] = "credential-already-in-use", _a$1["MISSING_REQ_TYPE"] = "internal-error", _a$1["EMAIL_NOT_FOUND"] = "user-not-found", _a$1["RESET_PASSWORD_EXCEED_LIMIT"] = "too-many-requests", _a$1["EXPIRED_OOB_CODE"] = "expired-action-code", _a$1["INVALID_OOB_CODE"] = "invalid-action-code", _a$1["MISSING_OOB_CODE"] = "internal-error", _a$1["CREDENTIAL_TOO_OLD_LOGIN_AGAIN"] = "requires-recent-login", _a$1["INVALID_ID_TOKEN"] = "invalid-user-token", _a$1["TOKEN_EXPIRED"] = "user-token-expired", _a$1["USER_NOT_FOUND"] = "user-token-expired", _a$1["TOO_MANY_ATTEMPTS_TRY_LATER"] = "too-many-requests", _a$1["INVALID_CODE"] = "invalid-verification-code", _a$1["INVALID_SESSION_INFO"] = "invalid-verification-id", _a$1["INVALID_TEMPORARY_PROOF"] = "invalid-credential", _a$1["MISSING_SESSION_INFO"] = "missing-verification-id", _a$1["SESSION_EXPIRED"] = "code-expired", _a$1["MISSING_ANDROID_PACKAGE_NAME"] = "missing-android-pkg-name", _a$1["UNAUTHORIZED_DOMAIN"] = "unauthorized-continue-uri", _a$1["INVALID_OAUTH_CLIENT_ID"] = "invalid-oauth-client-id", _a$1["ADMIN_ONLY_OPERATION"] = "admin-restricted-operation", _a$1["INVALID_MFA_PENDING_CREDENTIAL"] = "invalid-multi-factor-session", _a$1["MFA_ENROLLMENT_NOT_FOUND"] = "multi-factor-info-not-found", _a$1["MISSING_MFA_ENROLLMENT_ID"] = "missing-multi-factor-info", _a$1["MISSING_MFA_PENDING_CREDENTIAL"] = "missing-multi-factor-session", _a$1["SECOND_FACTOR_EXISTS"] = "second-factor-already-in-use", _a$1["SECOND_FACTOR_LIMIT_EXCEEDED"] = "maximum-second-factor-count-exceeded", _a$1["BLOCKING_FUNCTION_ERROR_RESPONSE"] = "internal-error", _a$1["RECAPTCHA_NOT_ENABLED"] = "recaptcha-not-enabled", _a$1["MISSING_RECAPTCHA_TOKEN"] = "missing-recaptcha-token", _a$1["INVALID_RECAPTCHA_TOKEN"] = "invalid-recaptcha-token", _a$1["INVALID_RECAPTCHA_ACTION"] = "invalid-recaptcha-action", _a$1["MISSING_CLIENT_TYPE"] = "missing-client-type", _a$1["MISSING_RECAPTCHA_VERSION"] = "missing-recaptcha-version", _a$1["INVALID_RECAPTCHA_VERSION"] = "invalid-recaptcha-version", _a$1["INVALID_REQ_TYPE"] = "invalid-req-type", _a$1);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
  if (auth.tenantId && !request.tenantId) {
    return tslib.__assign(tslib.__assign({}, request), {
      tenantId: auth.tenantId
    });
  }
  return request;
}
function _performApiRequest(auth, method, path, request, customErrorMap) {
  if (customErrorMap === void 0) {
    customErrorMap = {};
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var _this = this;
    return tslib.__generator(this, function (_a) {
      return [2, _performFetchWithErrorHandling(auth, customErrorMap, function () {
        return tslib.__awaiter(_this, void 0, void 0, function () {
          var body, params, query, headers;
          return tslib.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                body = {};
                params = {};
                if (request) {
                  if (method === "GET") {
                    params = request;
                  } else {
                    body = {
                      body: JSON.stringify(request)
                    };
                  }
                }
                query = util.querystring(tslib.__assign({
                  key: auth.config.apiKey
                }, params)).slice(1);
                return [4, auth._getAdditionalHeaders()];
              case 1:
                headers = _a.sent();
                headers["Content-Type"] = 'application/json';
                if (auth.languageCode) {
                  headers["X-Firebase-Locale"] = auth.languageCode;
                }
                return [2, FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), tslib.__assign({
                  method: method,
                  headers: headers,
                  referrerPolicy: 'no-referrer'
                }, body))];
            }
          });
        });
      })];
    });
  });
}
function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var errorMap, networkTimeout, response, json, errorMessage, _a, serverErrorCode, serverErrorMessage, authError, e_1;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          auth._canInitEmulator = false;
          errorMap = tslib.__assign(tslib.__assign({}, SERVER_ERROR_MAP), customErrorMap);
          _b.label = 1;
        case 1:
          _b.trys.push([1, 4,, 5]);
          networkTimeout = new NetworkTimeout(auth);
          return [4, Promise.race([fetchFn(), networkTimeout.promise])];
        case 2:
          response = _b.sent();
          networkTimeout.clearNetworkTimeout();
          return [4, response.json()];
        case 3:
          json = _b.sent();
          if ('needConfirmation' in json) {
            throw _makeTaggedError(auth, "account-exists-with-different-credential", json);
          }
          if (response.ok && !('errorMessage' in json)) {
            return [2, json];
          } else {
            errorMessage = response.ok ? json.errorMessage : json.error.message;
            _a = errorMessage.split(' : '), serverErrorCode = _a[0], serverErrorMessage = _a[1];
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
              throw _makeTaggedError(auth, "credential-already-in-use", json);
            } else if (serverErrorCode === "EMAIL_EXISTS") {
              throw _makeTaggedError(auth, "email-already-in-use", json);
            } else if (serverErrorCode === "USER_DISABLED") {
              throw _makeTaggedError(auth, "user-disabled", json);
            }
            authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');
            if (serverErrorMessage) {
              throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
            } else {
              _fail(auth, authError);
            }
          }
          return [3, 5];
        case 4:
          e_1 = _b.sent();
          if (e_1 instanceof util.FirebaseError) {
            throw e_1;
          }
          _fail(auth, "network-request-failed", {
            'message': String(e_1)
          });
          return [3, 5];
        case 5:
          return [2];
      }
    });
  });
}
function _performSignInRequest(auth, method, path, request, customErrorMap) {
  if (customErrorMap === void 0) {
    customErrorMap = {};
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var serverResponse;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, _performApiRequest(auth, method, path, request, customErrorMap)];
        case 1:
          serverResponse = _a.sent();
          if ('mfaPendingCredential' in serverResponse) {
            _fail(auth, "multi-factor-auth-required", {
              _serverResponse: serverResponse
            });
          }
          return [2, serverResponse];
      }
    });
  });
}
function _getFinalTarget(auth, host, path, query) {
  var base = "".concat(host).concat(path, "?").concat(query);
  if (!auth.config.emulator) {
    return "".concat(auth.config.apiScheme, "://").concat(base);
  }
  return _emulatorUrl(auth.config, base);
}
var NetworkTimeout = function () {
  function NetworkTimeout(auth) {
    var _this = this;
    this.auth = auth;
    this.timer = null;
    this.promise = new Promise(function (_, reject) {
      _this.timer = setTimeout(function () {
        return reject(_createError(_this.auth, "network-request-failed"));
      }, DEFAULT_API_TIMEOUT_MS.get());
    });
  }
  NetworkTimeout.prototype.clearNetworkTimeout = function () {
    clearTimeout(this.timer);
  };
  return NetworkTimeout;
}();
function _makeTaggedError(auth, code, response) {
  var errorParams = {
    appName: auth.name
  };
  if (response.email) {
    errorParams.email = response.email;
  }
  if (response.phoneNumber) {
    errorParams.phoneNumber = response.phoneNumber;
  }
  var error = _createError(auth, code, errorParams);
  error.customData._tokenResponse = response;
  return error;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function deleteAccount(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:delete", request)];
    });
  });
}
function deleteLinkedAccounts(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
    });
  });
}
function getAccountInfo(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:lookup", request)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function utcTimestampToDateString(utcTimestamp) {
  if (!utcTimestamp) {
    return undefined;
  }
  try {
    var date = new Date(Number(utcTimestamp));
    if (!isNaN(date.getTime())) {
      return date.toUTCString();
    }
  } catch (e) {}
  return undefined;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getIdToken(user, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }
  return util.getModularInstance(user).getIdToken(forceRefresh);
}
function getIdTokenResult(user, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal, token, claims, firebase, signInProvider;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, userInternal.getIdToken(forceRefresh)];
        case 1:
          token = _a.sent();
          claims = _parseToken(token);
          _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error");
          firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
          signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
          return [2, {
            claims: claims,
            token: token,
            authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
            issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
            expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
            signInProvider: signInProvider || null,
            signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
          }];
      }
    });
  });
}
function secondsStringToMilliseconds(seconds) {
  return Number(seconds) * 1000;
}
function _parseToken(token) {
  var _a = token.split('.'),
    algorithm = _a[0],
    payload = _a[1],
    signature = _a[2];
  if (algorithm === undefined || payload === undefined || signature === undefined) {
    _logError('JWT malformed, contained fewer than 3 sections');
    return null;
  }
  try {
    var decoded = util.base64Decode(payload);
    if (!decoded) {
      _logError('Failed to decode base64 JWT payload');
      return null;
    }
    return JSON.parse(decoded);
  } catch (e) {
    _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());
    return null;
  }
}
function _tokenExpiresIn(token) {
  var parsedToken = _parseToken(token);
  _assert(parsedToken, "internal-error");
  _assert(typeof parsedToken.exp !== 'undefined', "internal-error");
  _assert(typeof parsedToken.iat !== 'undefined', "internal-error");
  return Number(parsedToken.exp) - Number(parsedToken.iat);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _logoutIfInvalidated(user, promise, bypassAuthState) {
  if (bypassAuthState === void 0) {
    bypassAuthState = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var e_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (bypassAuthState) {
            return [2, promise];
          }
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3,, 6]);
          return [4, promise];
        case 2:
          return [2, _a.sent()];
        case 3:
          e_1 = _a.sent();
          if (!(e_1 instanceof util.FirebaseError && isUserInvalidated(e_1))) return [3, 5];
          if (!(user.auth.currentUser === user)) return [3, 5];
          return [4, user.auth.signOut()];
        case 4:
          _a.sent();
          _a.label = 5;
        case 5:
          throw e_1;
        case 6:
          return [2];
      }
    });
  });
}
function isUserInvalidated(_a) {
  var code = _a.code;
  return code === "auth/".concat("user-disabled") || code === "auth/".concat("user-token-expired");
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ProactiveRefresh = function () {
  function ProactiveRefresh(user) {
    this.user = user;
    this.isRunning = false;
    this.timerId = null;
    this.errorBackoff = 30000;
  }
  ProactiveRefresh.prototype._start = function () {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    this.schedule();
  };
  ProactiveRefresh.prototype._stop = function () {
    if (!this.isRunning) {
      return;
    }
    this.isRunning = false;
    if (this.timerId !== null) {
      clearTimeout(this.timerId);
    }
  };
  ProactiveRefresh.prototype.getInterval = function (wasError) {
    var _a;
    if (wasError) {
      var interval = this.errorBackoff;
      this.errorBackoff = Math.min(this.errorBackoff * 2, 960000);
      return interval;
    } else {
      this.errorBackoff = 30000;
      var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
      var interval = expTime - Date.now() - 300000;
      return Math.max(0, interval);
    }
  };
  ProactiveRefresh.prototype.schedule = function (wasError) {
    var _this = this;
    if (wasError === void 0) {
      wasError = false;
    }
    if (!this.isRunning) {
      return;
    }
    var interval = this.getInterval(wasError);
    this.timerId = setTimeout(function () {
      return tslib.__awaiter(_this, void 0, void 0, function () {
        return tslib.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.iteration()];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    }, interval);
  };
  ProactiveRefresh.prototype.iteration = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var e_1;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2,, 3]);
            return [4, this.user.getIdToken(true)];
          case 1:
            _a.sent();
            return [3, 3];
          case 2:
            e_1 = _a.sent();
            if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === "auth/".concat("network-request-failed")) {
              this.schedule(true);
            }
            return [2];
          case 3:
            this.schedule();
            return [2];
        }
      });
    });
  };
  return ProactiveRefresh;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var UserMetadata = function () {
  function UserMetadata(createdAt, lastLoginAt) {
    this.createdAt = createdAt;
    this.lastLoginAt = lastLoginAt;
    this._initializeTime();
  }
  UserMetadata.prototype._initializeTime = function () {
    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
    this.creationTime = utcTimestampToDateString(this.createdAt);
  };
  UserMetadata.prototype._copy = function (metadata) {
    this.createdAt = metadata.createdAt;
    this.lastLoginAt = metadata.lastLoginAt;
    this._initializeTime();
  };
  UserMetadata.prototype.toJSON = function () {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  };
  return UserMetadata;
}();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _reloadWithoutSaving(user) {
  var _a;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          auth = user.auth;
          return [4, user.getIdToken()];
        case 1:
          idToken = _b.sent();
          return [4, _logoutIfInvalidated(user, getAccountInfo(auth, {
            idToken: idToken
          }))];
        case 2:
          response = _b.sent();
          _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error");
          coreAccount = response.users[0];
          user._notifyReloadListener(coreAccount);
          newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
          providerData = mergeProviderData(user.providerData, newProviderData);
          oldIsAnonymous = user.isAnonymous;
          newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
          isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
          updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData: providerData,
            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous: isAnonymous
          };
          Object.assign(user, updates);
          return [2];
      }
    });
  });
}
function reload(user) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, _reloadWithoutSaving(userInternal)];
        case 1:
          _a.sent();
          return [4, userInternal.auth._persistUserIfCurrent(userInternal)];
        case 2:
          _a.sent();
          userInternal.auth._notifyListenersIfCurrent(userInternal);
          return [2];
      }
    });
  });
}
function mergeProviderData(original, newData) {
  var deduped = original.filter(function (o) {
    return !newData.some(function (n) {
      return n.providerId === o.providerId;
    });
  });
  return tslib.__spreadArray(tslib.__spreadArray([], deduped, true), newData, true);
}
function extractProviderData(providers) {
  return providers.map(function (_a) {
    var providerId = _a.providerId,
      provider = tslib.__rest(_a, ["providerId"]);
    return {
      providerId: providerId,
      uid: provider.rawId || '',
      displayName: provider.displayName || null,
      email: provider.email || null,
      phoneNumber: provider.phoneNumber || null,
      photoURL: provider.photoUrl || null
    };
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function requestStsToken(auth, refreshToken) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var response;
    var _this = this;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, _performFetchWithErrorHandling(auth, {}, function () {
            return tslib.__awaiter(_this, void 0, void 0, function () {
              var body, _a, tokenApiHost, apiKey, url, headers;
              return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    body = util.querystring({
                      'grant_type': 'refresh_token',
                      'refresh_token': refreshToken
                    }).slice(1);
                    _a = auth.config, tokenApiHost = _a.tokenApiHost, apiKey = _a.apiKey;
                    url = _getFinalTarget(auth, tokenApiHost, "/v1/token", "key=".concat(apiKey));
                    return [4, auth._getAdditionalHeaders()];
                  case 1:
                    headers = _b.sent();
                    headers["Content-Type"] = 'application/x-www-form-urlencoded';
                    return [2, FetchProvider.fetch()(url, {
                      method: "POST",
                      headers: headers,
                      body: body
                    })];
                }
              });
            });
          })];
        case 1:
          response = _a.sent();
          return [2, {
            accessToken: response.access_token,
            expiresIn: response.expires_in,
            refreshToken: response.refresh_token
          }];
      }
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var StsTokenManager = function () {
  function StsTokenManager() {
    this.refreshToken = null;
    this.accessToken = null;
    this.expirationTime = null;
  }
  Object.defineProperty(StsTokenManager.prototype, "isExpired", {
    get: function get() {
      return !this.expirationTime || Date.now() > this.expirationTime - 30000;
    },
    enumerable: false,
    configurable: true
  });
  StsTokenManager.prototype.updateFromServerResponse = function (response) {
    _assert(response.idToken, "internal-error");
    _assert(typeof response.idToken !== 'undefined', "internal-error");
    _assert(typeof response.refreshToken !== 'undefined', "internal-error");
    var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
  };
  StsTokenManager.prototype.getToken = function (auth, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired");
            if (!forceRefresh && this.accessToken && !this.isExpired) {
              return [2, this.accessToken];
            }
            if (!this.refreshToken) return [3, 2];
            return [4, this.refresh(auth, this.refreshToken)];
          case 1:
            _a.sent();
            return [2, this.accessToken];
          case 2:
            return [2, null];
        }
      });
    });
  };
  StsTokenManager.prototype.clearRefreshToken = function () {
    this.refreshToken = null;
  };
  StsTokenManager.prototype.refresh = function (auth, oldToken) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _a, accessToken, refreshToken, expiresIn;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4, requestStsToken(auth, oldToken)];
          case 1:
            _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken, expiresIn = _a.expiresIn;
            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
            return [2];
        }
      });
    });
  };
  StsTokenManager.prototype.updateTokensAndExpiration = function (accessToken, refreshToken, expiresInSec) {
    this.refreshToken = refreshToken || null;
    this.accessToken = accessToken || null;
    this.expirationTime = Date.now() + expiresInSec * 1000;
  };
  StsTokenManager.fromJSON = function (appName, object) {
    var refreshToken = object.refreshToken,
      accessToken = object.accessToken,
      expirationTime = object.expirationTime;
    var manager = new StsTokenManager();
    if (refreshToken) {
      _assert(typeof refreshToken === 'string', "internal-error", {
        appName: appName
      });
      manager.refreshToken = refreshToken;
    }
    if (accessToken) {
      _assert(typeof accessToken === 'string', "internal-error", {
        appName: appName
      });
      manager.accessToken = accessToken;
    }
    if (expirationTime) {
      _assert(typeof expirationTime === 'number', "internal-error", {
        appName: appName
      });
      manager.expirationTime = expirationTime;
    }
    return manager;
  };
  StsTokenManager.prototype.toJSON = function () {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  };
  StsTokenManager.prototype._assign = function (stsTokenManager) {
    this.accessToken = stsTokenManager.accessToken;
    this.refreshToken = stsTokenManager.refreshToken;
    this.expirationTime = stsTokenManager.expirationTime;
  };
  StsTokenManager.prototype._clone = function () {
    return Object.assign(new StsTokenManager(), this.toJSON());
  };
  StsTokenManager.prototype._performRefresh = function () {
    return debugFail('not implemented');
  };
  return StsTokenManager;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function assertStringOrUndefined(assertion, appName) {
  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error", {
    appName: appName
  });
}
var UserImpl = function () {
  function UserImpl(_a) {
    var uid = _a.uid,
      auth = _a.auth,
      stsTokenManager = _a.stsTokenManager,
      opt = tslib.__rest(_a, ["uid", "auth", "stsTokenManager"]);
    this.providerId = "firebase";
    this.proactiveRefresh = new ProactiveRefresh(this);
    this.reloadUserInfo = null;
    this.reloadListener = null;
    this.uid = uid;
    this.auth = auth;
    this.stsTokenManager = stsTokenManager;
    this.accessToken = stsTokenManager.accessToken;
    this.displayName = opt.displayName || null;
    this.email = opt.email || null;
    this.emailVerified = opt.emailVerified || false;
    this.phoneNumber = opt.phoneNumber || null;
    this.photoURL = opt.photoURL || null;
    this.isAnonymous = opt.isAnonymous || false;
    this.tenantId = opt.tenantId || null;
    this.providerData = opt.providerData ? tslib.__spreadArray([], opt.providerData, true) : [];
    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
  }
  UserImpl.prototype.getIdToken = function (forceRefresh) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var accessToken;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh))];
          case 1:
            accessToken = _a.sent();
            _assert(accessToken, this.auth, "internal-error");
            if (!(this.accessToken !== accessToken)) return [3, 3];
            this.accessToken = accessToken;
            return [4, this.auth._persistUserIfCurrent(this)];
          case 2:
            _a.sent();
            this.auth._notifyListenersIfCurrent(this);
            _a.label = 3;
          case 3:
            return [2, accessToken];
        }
      });
    });
  };
  UserImpl.prototype.getIdTokenResult = function (forceRefresh) {
    return getIdTokenResult(this, forceRefresh);
  };
  UserImpl.prototype.reload = function () {
    return reload(this);
  };
  UserImpl.prototype._assign = function (user) {
    if (this === user) {
      return;
    }
    _assert(this.uid === user.uid, this.auth, "internal-error");
    this.displayName = user.displayName;
    this.photoURL = user.photoURL;
    this.email = user.email;
    this.emailVerified = user.emailVerified;
    this.phoneNumber = user.phoneNumber;
    this.isAnonymous = user.isAnonymous;
    this.tenantId = user.tenantId;
    this.providerData = user.providerData.map(function (userInfo) {
      return tslib.__assign({}, userInfo);
    });
    this.metadata._copy(user.metadata);
    this.stsTokenManager._assign(user.stsTokenManager);
  };
  UserImpl.prototype._clone = function (auth) {
    var newUser = new UserImpl(tslib.__assign(tslib.__assign({}, this), {
      auth: auth,
      stsTokenManager: this.stsTokenManager._clone()
    }));
    newUser.metadata._copy(this.metadata);
    return newUser;
  };
  UserImpl.prototype._onReload = function (callback) {
    _assert(!this.reloadListener, this.auth, "internal-error");
    this.reloadListener = callback;
    if (this.reloadUserInfo) {
      this._notifyReloadListener(this.reloadUserInfo);
      this.reloadUserInfo = null;
    }
  };
  UserImpl.prototype._notifyReloadListener = function (userInfo) {
    if (this.reloadListener) {
      this.reloadListener(userInfo);
    } else {
      this.reloadUserInfo = userInfo;
    }
  };
  UserImpl.prototype._startProactiveRefresh = function () {
    this.proactiveRefresh._start();
  };
  UserImpl.prototype._stopProactiveRefresh = function () {
    this.proactiveRefresh._stop();
  };
  UserImpl.prototype._updateTokensIfNecessary = function (response, reload) {
    if (reload === void 0) {
      reload = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var tokensRefreshed;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            tokensRefreshed = false;
            if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
              this.stsTokenManager.updateFromServerResponse(response);
              tokensRefreshed = true;
            }
            if (!reload) return [3, 2];
            return [4, _reloadWithoutSaving(this)];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            return [4, this.auth._persistUserIfCurrent(this)];
          case 3:
            _a.sent();
            if (tokensRefreshed) {
              this.auth._notifyListenersIfCurrent(this);
            }
            return [2];
        }
      });
    });
  };
  UserImpl.prototype.delete = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var idToken;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, this.getIdToken()];
          case 1:
            idToken = _a.sent();
            return [4, _logoutIfInvalidated(this, deleteAccount(this.auth, {
              idToken: idToken
            }))];
          case 2:
            _a.sent();
            this.stsTokenManager.clearRefreshToken();
            return [2, this.auth.signOut()];
        }
      });
    });
  };
  UserImpl.prototype.toJSON = function () {
    return tslib.__assign(tslib.__assign({
      uid: this.uid,
      email: this.email || undefined,
      emailVerified: this.emailVerified,
      displayName: this.displayName || undefined,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || undefined,
      phoneNumber: this.phoneNumber || undefined,
      tenantId: this.tenantId || undefined,
      providerData: this.providerData.map(function (userInfo) {
        return tslib.__assign({}, userInfo);
      }),
      stsTokenManager: this.stsTokenManager.toJSON(),
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  };
  Object.defineProperty(UserImpl.prototype, "refreshToken", {
    get: function get() {
      return this.stsTokenManager.refreshToken || '';
    },
    enumerable: false,
    configurable: true
  });
  UserImpl._fromJSON = function (auth, object) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
    var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
    var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
    var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
    var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
    var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
    var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
    var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
    var uid = object.uid,
      emailVerified = object.emailVerified,
      isAnonymous = object.isAnonymous,
      providerData = object.providerData,
      plainObjectTokenManager = object.stsTokenManager;
    _assert(uid && plainObjectTokenManager, auth, "internal-error");
    var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
    _assert(typeof uid === 'string', auth, "internal-error");
    assertStringOrUndefined(displayName, auth.name);
    assertStringOrUndefined(email, auth.name);
    _assert(typeof emailVerified === 'boolean', auth, "internal-error");
    _assert(typeof isAnonymous === 'boolean', auth, "internal-error");
    assertStringOrUndefined(phoneNumber, auth.name);
    assertStringOrUndefined(photoURL, auth.name);
    assertStringOrUndefined(tenantId, auth.name);
    assertStringOrUndefined(_redirectEventId, auth.name);
    assertStringOrUndefined(createdAt, auth.name);
    assertStringOrUndefined(lastLoginAt, auth.name);
    var user = new UserImpl({
      uid: uid,
      auth: auth,
      email: email,
      emailVerified: emailVerified,
      displayName: displayName,
      isAnonymous: isAnonymous,
      photoURL: photoURL,
      phoneNumber: phoneNumber,
      tenantId: tenantId,
      stsTokenManager: stsTokenManager,
      createdAt: createdAt,
      lastLoginAt: lastLoginAt
    });
    if (providerData && Array.isArray(providerData)) {
      user.providerData = providerData.map(function (userInfo) {
        return tslib.__assign({}, userInfo);
      });
    }
    if (_redirectEventId) {
      user._redirectEventId = _redirectEventId;
    }
    return user;
  };
  UserImpl._fromIdTokenResponse = function (auth, idTokenResponse, isAnonymous) {
    if (isAnonymous === void 0) {
      isAnonymous = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var stsTokenManager, user;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            stsTokenManager = new StsTokenManager();
            stsTokenManager.updateFromServerResponse(idTokenResponse);
            user = new UserImpl({
              uid: idTokenResponse.localId,
              auth: auth,
              stsTokenManager: stsTokenManager,
              isAnonymous: isAnonymous
            });
            return [4, _reloadWithoutSaving(user)];
          case 1:
            _a.sent();
            return [2, user];
        }
      });
    });
  };
  return UserImpl;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var instanceCache = new Map();
function _getInstance(cls) {
  debugAssert(cls instanceof Function, 'Expected a class definition');
  var instance = instanceCache.get(cls);
  if (instance) {
    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
    return instance;
  }
  instance = new cls();
  instanceCache.set(cls, instance);
  return instance;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var InMemoryPersistence = function () {
  function InMemoryPersistence() {
    this.type = "NONE";
    this.storage = {};
  }
  InMemoryPersistence.prototype._isAvailable = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        return [2, true];
      });
    });
  };
  InMemoryPersistence.prototype._set = function (key, value) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        this.storage[key] = value;
        return [2];
      });
    });
  };
  InMemoryPersistence.prototype._get = function (key) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var value;
      return tslib.__generator(this, function (_a) {
        value = this.storage[key];
        return [2, value === undefined ? null : value];
      });
    });
  };
  InMemoryPersistence.prototype._remove = function (key) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        delete this.storage[key];
        return [2];
      });
    });
  };
  InMemoryPersistence.prototype._addListener = function (_key, _listener) {
    return;
  };
  InMemoryPersistence.prototype._removeListener = function (_key, _listener) {
    return;
  };
  InMemoryPersistence.type = 'NONE';
  return InMemoryPersistence;
}();
var inMemoryPersistence = InMemoryPersistence;

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _persistenceKeyName(key, apiKey, appName) {
  return "".concat("firebase", ":").concat(key, ":").concat(apiKey, ":").concat(appName);
}
var PersistenceUserManager = function () {
  function PersistenceUserManager(persistence, auth, userKey) {
    this.persistence = persistence;
    this.auth = auth;
    this.userKey = userKey;
    var _a = this.auth,
      config = _a.config,
      name = _a.name;
    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
    this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name);
    this.boundEventHandler = auth._onStorageEvent.bind(auth);
    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  PersistenceUserManager.prototype.setCurrentUser = function (user) {
    return this.persistence._set(this.fullUserKey, user.toJSON());
  };
  PersistenceUserManager.prototype.getCurrentUser = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var blob;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, this.persistence._get(this.fullUserKey)];
          case 1:
            blob = _a.sent();
            return [2, blob ? UserImpl._fromJSON(this.auth, blob) : null];
        }
      });
    });
  };
  PersistenceUserManager.prototype.removeCurrentUser = function () {
    return this.persistence._remove(this.fullUserKey);
  };
  PersistenceUserManager.prototype.savePersistenceForRedirect = function () {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  };
  PersistenceUserManager.prototype.setPersistence = function (newPersistence) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var currentUser;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.persistence === newPersistence) {
              return [2];
            }
            return [4, this.getCurrentUser()];
          case 1:
            currentUser = _a.sent();
            return [4, this.removeCurrentUser()];
          case 2:
            _a.sent();
            this.persistence = newPersistence;
            if (currentUser) {
              return [2, this.setCurrentUser(currentUser)];
            }
            return [2];
        }
      });
    });
  };
  PersistenceUserManager.prototype.delete = function () {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  };
  PersistenceUserManager.create = function (auth, persistenceHierarchy, userKey) {
    if (userKey === void 0) {
      userKey = "authUser";
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var availablePersistences, selectedPersistence, key, userToMigrate, _i, persistenceHierarchy_1, persistence, blob, user, migrationHierarchy;
      var _this = this;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!persistenceHierarchy.length) {
              return [2, new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey)];
            }
            return [4, Promise.all(persistenceHierarchy.map(function (persistence) {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4, persistence._isAvailable()];
                    case 1:
                      if (_a.sent()) {
                        return [2, persistence];
                      }
                      return [2, undefined];
                  }
                });
              });
            }))];
          case 1:
            availablePersistences = _b.sent().filter(function (persistence) {
              return persistence;
            });
            selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
            key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
            userToMigrate = null;
            _i = 0, persistenceHierarchy_1 = persistenceHierarchy;
            _b.label = 2;
          case 2:
            if (!(_i < persistenceHierarchy_1.length)) return [3, 7];
            persistence = persistenceHierarchy_1[_i];
            _b.label = 3;
          case 3:
            _b.trys.push([3, 5,, 6]);
            return [4, persistence._get(key)];
          case 4:
            blob = _b.sent();
            if (blob) {
              user = UserImpl._fromJSON(auth, blob);
              if (persistence !== selectedPersistence) {
                userToMigrate = user;
              }
              selectedPersistence = persistence;
              return [3, 7];
            }
            return [3, 6];
          case 5:
            _b.sent();
            return [3, 6];
          case 6:
            _i++;
            return [3, 2];
          case 7:
            migrationHierarchy = availablePersistences.filter(function (p) {
              return p._shouldAllowMigration;
            });
            if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
              return [2, new PersistenceUserManager(selectedPersistence, auth, userKey)];
            }
            selectedPersistence = migrationHierarchy[0];
            if (!userToMigrate) return [3, 9];
            return [4, selectedPersistence._set(key, userToMigrate.toJSON())];
          case 8:
            _b.sent();
            _b.label = 9;
          case 9:
            return [4, Promise.all(persistenceHierarchy.map(function (persistence) {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                return tslib.__generator(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      if (!(persistence !== selectedPersistence)) return [3, 4];
                      _b.label = 1;
                    case 1:
                      _b.trys.push([1, 3,, 4]);
                      return [4, persistence._remove(key)];
                    case 2:
                      _b.sent();
                      return [3, 4];
                    case 3:
                      _b.sent();
                      return [3, 4];
                    case 4:
                      return [2];
                  }
                });
              });
            }))];
          case 10:
            _b.sent();
            return [2, new PersistenceUserManager(selectedPersistence, auth, userKey)];
        }
      });
    });
  };
  return PersistenceUserManager;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _getBrowserName(userAgent) {
  var ua = userAgent.toLowerCase();
  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
    return "Opera";
  } else if (_isIEMobile(ua)) {
    return "IEMobile";
  } else if (ua.includes('msie') || ua.includes('trident/')) {
    return "IE";
  } else if (ua.includes('edge/')) {
    return "Edge";
  } else if (_isFirefox(ua)) {
    return "Firefox";
  } else if (ua.includes('silk/')) {
    return "Silk";
  } else if (_isBlackBerry(ua)) {
    return "Blackberry";
  } else if (_isWebOS(ua)) {
    return "Webos";
  } else if (_isSafari(ua)) {
    return "Safari";
  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {
    return "Chrome";
  } else if (_isAndroid(ua)) {
    return "Android";
  } else {
    var re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
    var matches = userAgent.match(re);
    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
      return matches[1];
    }
  }
  return "Other";
}
function _isFirefox(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /firefox\//i.test(ua);
}
function _isSafari(userAgent) {
  if (userAgent === void 0) {
    userAgent = util.getUA();
  }
  var ua = userAgent.toLowerCase();
  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}
function _isChromeIOS(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /crios\//i.test(ua);
}
function _isIEMobile(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /iemobile/i.test(ua);
}
function _isAndroid(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /android/i.test(ua);
}
function _isBlackBerry(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /blackberry/i.test(ua);
}
function _isWebOS(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /webos/i.test(ua);
}
function _isIOS(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
}
function _isIOS7Or8(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}
function _isIE10() {
  return util.isIE() && document.documentMode === 10;
}
function _isMobileBrowser(ua) {
  if (ua === void 0) {
    ua = util.getUA();
  }
  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}
function _isIframe() {
  try {
    return !!(window && window !== window.top);
  } catch (e) {
    return false;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _getClientVersion(clientPlatform, frameworks) {
  if (frameworks === void 0) {
    frameworks = [];
  }
  var reportedPlatform;
  switch (clientPlatform) {
    case "Browser":
      reportedPlatform = _getBrowserName(util.getUA());
      break;
    case "Worker":
      reportedPlatform = "".concat(_getBrowserName(util.getUA()), "-").concat(clientPlatform);
      break;
    default:
      reportedPlatform = clientPlatform;
  }
  var reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web';
  return "".concat(reportedPlatform, "/").concat("JsCore", "/").concat(app.SDK_VERSION, "/").concat(reportedFrameworks);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getRecaptchaConfig(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "GET", "/v2/recaptchaConfig", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function isEnterprise(grecaptcha) {
  return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;
}
var RecaptchaConfig = function () {
  function RecaptchaConfig(response) {
    this.siteKey = '';
    this.emailPasswordEnabled = false;
    if (response.recaptchaKey === undefined) {
      throw new Error('recaptchaKey undefined');
    }
    this.siteKey = response.recaptchaKey.split('/')[3];
    this.emailPasswordEnabled = response.recaptchaEnforcementState.some(function (enforcementState) {
      return enforcementState.provider === 'EMAIL_PASSWORD_PROVIDER' && enforcementState.enforcementState !== 'OFF';
    });
  }
  return RecaptchaConfig;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getScriptParentElement() {
  var _a, _b;
  return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
function _loadJS(url) {
  return new Promise(function (resolve, reject) {
    var el = document.createElement('script');
    el.setAttribute('src', url);
    el.onload = resolve;
    el.onerror = function (e) {
      var error = _createError("internal-error");
      error.customData = e;
      reject(error);
    };
    el.type = 'text/javascript';
    el.charset = 'UTF-8';
    getScriptParentElement().appendChild(el);
  });
}
var RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js?render=';
var RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
var FAKE_TOKEN = 'NO_RECAPTCHA';
var RecaptchaEnterpriseVerifier = function () {
  function RecaptchaEnterpriseVerifier(authExtern) {
    this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
    this.auth = _castAuth(authExtern);
  }
  RecaptchaEnterpriseVerifier.prototype.verify = function (action, forceRefresh) {
    if (action === void 0) {
      action = 'verify';
    }
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      function retrieveSiteKey(auth) {
        return tslib.__awaiter(this, void 0, void 0, function () {
          var _this = this;
          return tslib.__generator(this, function (_a) {
            if (!forceRefresh) {
              if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {
                return [2, auth._agentRecaptchaConfig.siteKey];
              }
              if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {
                return [2, auth._tenantRecaptchaConfigs[auth.tenantId].siteKey];
              }
            }
            return [2, new Promise(function (resolve, reject) {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                  getRecaptchaConfig(auth, {
                    clientType: "CLIENT_TYPE_WEB",
                    version: "RECAPTCHA_ENTERPRISE"
                  }).then(function (response) {
                    if (response.recaptchaKey === undefined) {
                      reject(new Error('recaptcha Enterprise site key undefined'));
                    } else {
                      var config = new RecaptchaConfig(response);
                      if (auth.tenantId == null) {
                        auth._agentRecaptchaConfig = config;
                      } else {
                        auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                      }
                      return resolve(config.siteKey);
                    }
                  }).catch(function (error) {
                    reject(error);
                  });
                  return [2];
                });
              });
            })];
          });
        });
      }
      function retrieveRecaptchaToken(siteKey, resolve, reject) {
        var grecaptcha = window.grecaptcha;
        if (isEnterprise(grecaptcha)) {
          grecaptcha.enterprise.ready(function () {
            grecaptcha.enterprise.execute(siteKey, {
              action: action
            }).then(function (token) {
              resolve(token);
            }).catch(function () {
              resolve(FAKE_TOKEN);
            });
          });
        } else {
          reject(Error('No reCAPTCHA enterprise script loaded.'));
        }
      }
      var _this = this;
      return tslib.__generator(this, function (_a) {
        return [2, new Promise(function (resolve, reject) {
          retrieveSiteKey(_this.auth).then(function (siteKey) {
            if (!forceRefresh && isEnterprise(window.grecaptcha)) {
              retrieveRecaptchaToken(siteKey, resolve, reject);
            } else {
              if (typeof window === 'undefined') {
                reject(new Error('RecaptchaVerifier is only supported in browser'));
                return;
              }
              _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey).then(function () {
                retrieveRecaptchaToken(siteKey, resolve, reject);
              }).catch(function (error) {
                reject(error);
              });
            }
          }).catch(function (error) {
            reject(error);
          });
        })];
      });
    });
  };
  return RecaptchaEnterpriseVerifier;
}();
function injectRecaptchaFields(auth, request, action, captchaResp) {
  if (captchaResp === void 0) {
    captchaResp = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var verifier, captchaResponse, newRequest;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          verifier = new RecaptchaEnterpriseVerifier(auth);
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3,, 5]);
          return [4, verifier.verify(action)];
        case 2:
          captchaResponse = _a.sent();
          return [3, 5];
        case 3:
          _a.sent();
          return [4, verifier.verify(action, true)];
        case 4:
          captchaResponse = _a.sent();
          return [3, 5];
        case 5:
          newRequest = tslib.__assign({}, request);
          if (!captchaResp) {
            Object.assign(newRequest, {
              captchaResponse: captchaResponse
            });
          } else {
            Object.assign(newRequest, {
              'captchaResp': captchaResponse
            });
          }
          Object.assign(newRequest, {
            'clientType': "CLIENT_TYPE_WEB"
          });
          Object.assign(newRequest, {
            'recaptchaVersion': "RECAPTCHA_ENTERPRISE"
          });
          return [2, newRequest];
      }
    });
  });
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AuthMiddlewareQueue = function () {
  function AuthMiddlewareQueue(auth) {
    this.auth = auth;
    this.queue = [];
  }
  AuthMiddlewareQueue.prototype.pushCallback = function (callback, onAbort) {
    var _this = this;
    var wrappedCallback = function wrappedCallback(user) {
      return new Promise(function (resolve, reject) {
        try {
          var result = callback(user);
          resolve(result);
        } catch (e) {
          reject(e);
        }
      });
    };
    wrappedCallback.onAbort = onAbort;
    this.queue.push(wrappedCallback);
    var index = this.queue.length - 1;
    return function () {
      _this.queue[index] = function () {
        return Promise.resolve();
      };
    };
  };
  AuthMiddlewareQueue.prototype.runMiddleware = function (nextUser) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var onAbortStack, _i, _a, beforeStateCallback, e_1, _b, onAbortStack_1, onAbort;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            if (this.auth.currentUser === nextUser) {
              return [2];
            }
            onAbortStack = [];
            _c.label = 1;
          case 1:
            _c.trys.push([1, 6,, 7]);
            _i = 0, _a = this.queue;
            _c.label = 2;
          case 2:
            if (!(_i < _a.length)) return [3, 5];
            beforeStateCallback = _a[_i];
            return [4, beforeStateCallback(nextUser)];
          case 3:
            _c.sent();
            if (beforeStateCallback.onAbort) {
              onAbortStack.push(beforeStateCallback.onAbort);
            }
            _c.label = 4;
          case 4:
            _i++;
            return [3, 2];
          case 5:
            return [3, 7];
          case 6:
            e_1 = _c.sent();
            onAbortStack.reverse();
            for (_b = 0, onAbortStack_1 = onAbortStack; _b < onAbortStack_1.length; _b++) {
              onAbort = onAbortStack_1[_b];
              try {
                onAbort();
              } catch (_) {}
            }
            throw this.auth._errorFactory.create("login-blocked", {
              originalMessage: e_1 === null || e_1 === void 0 ? void 0 : e_1.message
            });
          case 7:
            return [2];
        }
      });
    });
  };
  return AuthMiddlewareQueue;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AuthImpl = function () {
  function AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config) {
    this.app = app;
    this.heartbeatServiceProvider = heartbeatServiceProvider;
    this.appCheckServiceProvider = appCheckServiceProvider;
    this.config = config;
    this.currentUser = null;
    this.emulatorConfig = null;
    this.operations = Promise.resolve();
    this.authStateSubscription = new Subscription(this);
    this.idTokenSubscription = new Subscription(this);
    this.beforeStateQueue = new AuthMiddlewareQueue(this);
    this.redirectUser = null;
    this.isProactiveRefreshEnabled = false;
    this._canInitEmulator = true;
    this._isInitialized = false;
    this._deleted = false;
    this._initializationPromise = null;
    this._popupRedirectResolver = null;
    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
    this._agentRecaptchaConfig = null;
    this._tenantRecaptchaConfigs = {};
    this.lastNotifiedUid = undefined;
    this.languageCode = null;
    this.tenantId = null;
    this.settings = {
      appVerificationDisabledForTesting: false
    };
    this.frameworks = [];
    this.name = app.name;
    this.clientVersion = config.sdkClientVersion;
  }
  AuthImpl.prototype._initializeWithPersistence = function (persistenceHierarchy, popupRedirectResolver) {
    var _this = this;
    if (popupRedirectResolver) {
      this._popupRedirectResolver = _getInstance(popupRedirectResolver);
    }
    this._initializationPromise = this.queue(function () {
      return tslib.__awaiter(_this, void 0, void 0, function () {
        var _a;
        var _b, _c;
        return tslib.__generator(this, function (_d) {
          switch (_d.label) {
            case 0:
              if (this._deleted) {
                return [2];
              }
              _a = this;
              return [4, PersistenceUserManager.create(this, persistenceHierarchy)];
            case 1:
              _a.persistenceManager = _d.sent();
              if (this._deleted) {
                return [2];
              }
              if (!((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively)) return [3, 5];
              _d.label = 2;
            case 2:
              _d.trys.push([2, 4,, 5]);
              return [4, this._popupRedirectResolver._initialize(this)];
            case 3:
              _d.sent();
              return [3, 5];
            case 4:
              _d.sent();
              return [3, 5];
            case 5:
              return [4, this.initializeCurrentUser(popupRedirectResolver)];
            case 6:
              _d.sent();
              this.lastNotifiedUid = ((_c = this.currentUser) === null || _c === void 0 ? void 0 : _c.uid) || null;
              if (this._deleted) {
                return [2];
              }
              this._isInitialized = true;
              return [2];
          }
        });
      });
    });
    return this._initializationPromise;
  };
  AuthImpl.prototype._onStorageEvent = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var user;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this._deleted) {
              return [2];
            }
            return [4, this.assertedPersistence.getCurrentUser()];
          case 1:
            user = _a.sent();
            if (!this.currentUser && !user) {
              return [2];
            }
            if (!(this.currentUser && user && this.currentUser.uid === user.uid)) return [3, 3];
            this._currentUser._assign(user);
            return [4, this.currentUser.getIdToken()];
          case 2:
            _a.sent();
            return [2];
          case 3:
            return [4, this._updateCurrentUser(user, true)];
          case 4:
            _a.sent();
            return [2];
        }
      });
    });
  };
  AuthImpl.prototype.initializeCurrentUser = function (popupRedirectResolver) {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var previouslyStoredUser, futureCurrentUser, needsTocheckMiddleware, redirectUserEventId, storedUserEventId, result, e_2;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4, this.assertedPersistence.getCurrentUser()];
          case 1:
            previouslyStoredUser = _b.sent();
            futureCurrentUser = previouslyStoredUser;
            needsTocheckMiddleware = false;
            if (!(popupRedirectResolver && this.config.authDomain)) return [3, 4];
            return [4, this.getOrInitRedirectPersistenceManager()];
          case 2:
            _b.sent();
            redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
            return [4, this.tryRedirectSignIn(popupRedirectResolver)];
          case 3:
            result = _b.sent();
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
              futureCurrentUser = result.user;
              needsTocheckMiddleware = true;
            }
            _b.label = 4;
          case 4:
            if (!futureCurrentUser) {
              return [2, this.directlySetCurrentUser(null)];
            }
            if (!!futureCurrentUser._redirectEventId) return [3, 9];
            if (!needsTocheckMiddleware) return [3, 8];
            _b.label = 5;
          case 5:
            _b.trys.push([5, 7,, 8]);
            return [4, this.beforeStateQueue.runMiddleware(futureCurrentUser)];
          case 6:
            _b.sent();
            return [3, 8];
          case 7:
            e_2 = _b.sent();
            futureCurrentUser = previouslyStoredUser;
            this._popupRedirectResolver._overrideRedirectResult(this, function () {
              return Promise.reject(e_2);
            });
            return [3, 8];
          case 8:
            if (futureCurrentUser) {
              return [2, this.reloadAndSetCurrentUserOrClear(futureCurrentUser)];
            } else {
              return [2, this.directlySetCurrentUser(null)];
            }
          case 9:
            _assert(this._popupRedirectResolver, this, "argument-error");
            return [4, this.getOrInitRedirectPersistenceManager()];
          case 10:
            _b.sent();
            if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
              return [2, this.directlySetCurrentUser(futureCurrentUser)];
            }
            return [2, this.reloadAndSetCurrentUserOrClear(futureCurrentUser)];
        }
      });
    });
  };
  AuthImpl.prototype.tryRedirectSignIn = function (redirectResolver) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var result;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            result = null;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3,, 5]);
            return [4, this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true)];
          case 2:
            result = _a.sent();
            return [3, 5];
          case 3:
            _a.sent();
            return [4, this._setRedirectUser(null)];
          case 4:
            _a.sent();
            return [3, 5];
          case 5:
            return [2, result];
        }
      });
    });
  };
  AuthImpl.prototype.reloadAndSetCurrentUserOrClear = function (user) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var e_4;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2,, 3]);
            return [4, _reloadWithoutSaving(user)];
          case 1:
            _a.sent();
            return [3, 3];
          case 2:
            e_4 = _a.sent();
            if ((e_4 === null || e_4 === void 0 ? void 0 : e_4.code) !== "auth/".concat("network-request-failed")) {
              return [2, this.directlySetCurrentUser(null)];
            }
            return [3, 3];
          case 3:
            return [2, this.directlySetCurrentUser(user)];
        }
      });
    });
  };
  AuthImpl.prototype.useDeviceLanguage = function () {
    this.languageCode = _getUserLanguage();
  };
  AuthImpl.prototype._delete = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        this._deleted = true;
        return [2];
      });
    });
  };
  AuthImpl.prototype.updateCurrentUser = function (userExtern) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var user;
      return tslib.__generator(this, function (_a) {
        user = userExtern ? util.getModularInstance(userExtern) : null;
        if (user) {
          _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token");
        }
        return [2, this._updateCurrentUser(user && user._clone(this))];
      });
    });
  };
  AuthImpl.prototype._updateCurrentUser = function (user, skipBeforeStateCallbacks) {
    if (skipBeforeStateCallbacks === void 0) {
      skipBeforeStateCallbacks = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _this = this;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this._deleted) {
              return [2];
            }
            if (user) {
              _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch");
            }
            if (!!skipBeforeStateCallbacks) return [3, 2];
            return [4, this.beforeStateQueue.runMiddleware(user)];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            return [2, this.queue(function () {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4, this.directlySetCurrentUser(user)];
                    case 1:
                      _a.sent();
                      this.notifyAuthListeners();
                      return [2];
                  }
                });
              });
            })];
        }
      });
    });
  };
  AuthImpl.prototype.signOut = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, this.beforeStateQueue.runMiddleware(null)];
          case 1:
            _a.sent();
            if (!(this.redirectPersistenceManager || this._popupRedirectResolver)) return [3, 3];
            return [4, this._setRedirectUser(null)];
          case 2:
            _a.sent();
            _a.label = 3;
          case 3:
            return [2, this._updateCurrentUser(null, true)];
        }
      });
    });
  };
  AuthImpl.prototype.setPersistence = function (persistence) {
    var _this = this;
    return this.queue(function () {
      return tslib.__awaiter(_this, void 0, void 0, function () {
        return tslib.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.assertedPersistence.setPersistence(_getInstance(persistence))];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    });
  };
  AuthImpl.prototype.initializeRecaptchaConfig = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var response, config, verifier;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, getRecaptchaConfig(this, {
              clientType: "CLIENT_TYPE_WEB",
              version: "RECAPTCHA_ENTERPRISE"
            })];
          case 1:
            response = _a.sent();
            config = new RecaptchaConfig(response);
            if (this.tenantId == null) {
              this._agentRecaptchaConfig = config;
            } else {
              this._tenantRecaptchaConfigs[this.tenantId] = config;
            }
            if (config.emailPasswordEnabled) {
              verifier = new RecaptchaEnterpriseVerifier(this);
              void verifier.verify();
            }
            return [2];
        }
      });
    });
  };
  AuthImpl.prototype._getRecaptchaConfig = function () {
    if (this.tenantId == null) {
      return this._agentRecaptchaConfig;
    } else {
      return this._tenantRecaptchaConfigs[this.tenantId];
    }
  };
  AuthImpl.prototype._getPersistence = function () {
    return this.assertedPersistence.persistence.type;
  };
  AuthImpl.prototype._updateErrorMap = function (errorMap) {
    this._errorFactory = new util.ErrorFactory('auth', 'Firebase', errorMap());
  };
  AuthImpl.prototype.onAuthStateChanged = function (nextOrObserver, error, completed) {
    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
  };
  AuthImpl.prototype.beforeAuthStateChanged = function (callback, onAbort) {
    return this.beforeStateQueue.pushCallback(callback, onAbort);
  };
  AuthImpl.prototype.onIdTokenChanged = function (nextOrObserver, error, completed) {
    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
  };
  AuthImpl.prototype.toJSON = function () {
    var _a;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
    };
  };
  AuthImpl.prototype._setRedirectUser = function (user, popupRedirectResolver) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var redirectManager;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, this.getOrInitRedirectPersistenceManager(popupRedirectResolver)];
          case 1:
            redirectManager = _a.sent();
            return [2, user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user)];
        }
      });
    });
  };
  AuthImpl.prototype.getOrInitRedirectPersistenceManager = function (popupRedirectResolver) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var resolver, _a, _b;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            if (!!this.redirectPersistenceManager) return [3, 3];
            resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(resolver, this, "argument-error");
            _a = this;
            return [4, PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser")];
          case 1:
            _a.redirectPersistenceManager = _c.sent();
            _b = this;
            return [4, this.redirectPersistenceManager.getCurrentUser()];
          case 2:
            _b.redirectUser = _c.sent();
            _c.label = 3;
          case 3:
            return [2, this.redirectPersistenceManager];
        }
      });
    });
  };
  AuthImpl.prototype._redirectUserForId = function (id) {
    var _a, _b;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _this = this;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            if (!this._isInitialized) return [3, 2];
            return [4, this.queue(function () {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                return tslib.__generator(this, function (_a) {
                  return [2];
                });
              });
            })];
          case 1:
            _c.sent();
            _c.label = 2;
          case 2:
            if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
              return [2, this._currentUser];
            }
            if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
              return [2, this.redirectUser];
            }
            return [2, null];
        }
      });
    });
  };
  AuthImpl.prototype._persistUserIfCurrent = function (user) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _this = this;
      return tslib.__generator(this, function (_a) {
        if (user === this.currentUser) {
          return [2, this.queue(function () {
            return tslib.__awaiter(_this, void 0, void 0, function () {
              return tslib.__generator(this, function (_a) {
                return [2, this.directlySetCurrentUser(user)];
              });
            });
          })];
        }
        return [2];
      });
    });
  };
  AuthImpl.prototype._notifyListenersIfCurrent = function (user) {
    if (user === this.currentUser) {
      this.notifyAuthListeners();
    }
  };
  AuthImpl.prototype._key = function () {
    return "".concat(this.config.authDomain, ":").concat(this.config.apiKey, ":").concat(this.name);
  };
  AuthImpl.prototype._startProactiveRefresh = function () {
    this.isProactiveRefreshEnabled = true;
    if (this.currentUser) {
      this._currentUser._startProactiveRefresh();
    }
  };
  AuthImpl.prototype._stopProactiveRefresh = function () {
    this.isProactiveRefreshEnabled = false;
    if (this.currentUser) {
      this._currentUser._stopProactiveRefresh();
    }
  };
  Object.defineProperty(AuthImpl.prototype, "_currentUser", {
    get: function get() {
      return this.currentUser;
    },
    enumerable: false,
    configurable: true
  });
  AuthImpl.prototype.notifyAuthListeners = function () {
    var _a, _b;
    if (!this._isInitialized) {
      return;
    }
    this.idTokenSubscription.next(this.currentUser);
    var currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
    if (this.lastNotifiedUid !== currentUid) {
      this.lastNotifiedUid = currentUid;
      this.authStateSubscription.next(this.currentUser);
    }
  };
  AuthImpl.prototype.registerStateListener = function (subscription, nextOrObserver, error, completed) {
    var _this = this;
    if (this._deleted) {
      return function () {};
    }
    var cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
    var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    _assert(promise, this, "internal-error");
    promise.then(function () {
      return cb(_this.currentUser);
    });
    if (typeof nextOrObserver === 'function') {
      return subscription.addObserver(nextOrObserver, error, completed);
    } else {
      return subscription.addObserver(nextOrObserver);
    }
  };
  AuthImpl.prototype.directlySetCurrentUser = function (user) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.currentUser && this.currentUser !== user) {
              this._currentUser._stopProactiveRefresh();
            }
            if (user && this.isProactiveRefreshEnabled) {
              user._startProactiveRefresh();
            }
            this.currentUser = user;
            if (!user) return [3, 2];
            return [4, this.assertedPersistence.setCurrentUser(user)];
          case 1:
            _a.sent();
            return [3, 4];
          case 2:
            return [4, this.assertedPersistence.removeCurrentUser()];
          case 3:
            _a.sent();
            _a.label = 4;
          case 4:
            return [2];
        }
      });
    });
  };
  AuthImpl.prototype.queue = function (action) {
    this.operations = this.operations.then(action, action);
    return this.operations;
  };
  Object.defineProperty(AuthImpl.prototype, "assertedPersistence", {
    get: function get() {
      _assert(this.persistenceManager, this, "internal-error");
      return this.persistenceManager;
    },
    enumerable: false,
    configurable: true
  });
  AuthImpl.prototype._logFramework = function (framework) {
    if (!framework || this.frameworks.includes(framework)) {
      return;
    }
    this.frameworks.push(framework);
    this.frameworks.sort();
    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
  };
  AuthImpl.prototype._getFrameworks = function () {
    return this.frameworks;
  };
  AuthImpl.prototype._getAdditionalHeaders = function () {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var headers, heartbeatsHeader, appCheckToken;
      var _b;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            headers = (_b = {}, _b["X-Client-Version"] = this.clientVersion, _b);
            if (this.app.options.appId) {
              headers["X-Firebase-gmpid"] = this.app.options.appId;
            }
            return [4, (_a = this.heartbeatServiceProvider.getImmediate({
              optional: true
            })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader()];
          case 1:
            heartbeatsHeader = _c.sent();
            if (heartbeatsHeader) {
              headers["X-Firebase-Client"] = heartbeatsHeader;
            }
            return [4, this._getAppCheckToken()];
          case 2:
            appCheckToken = _c.sent();
            if (appCheckToken) {
              headers["X-Firebase-AppCheck"] = appCheckToken;
            }
            return [2, headers];
        }
      });
    });
  };
  AuthImpl.prototype._getAppCheckToken = function () {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var appCheckTokenResult;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4, (_a = this.appCheckServiceProvider.getImmediate({
              optional: true
            })) === null || _a === void 0 ? void 0 : _a.getToken()];
          case 1:
            appCheckTokenResult = _b.sent();
            if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
              _logWarn("Error while retrieving App Check token: ".concat(appCheckTokenResult.error));
            }
            return [2, appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token];
        }
      });
    });
  };
  return AuthImpl;
}();
function _castAuth(auth) {
  return util.getModularInstance(auth);
}
var Subscription = function () {
  function Subscription(auth) {
    var _this = this;
    this.auth = auth;
    this.observer = null;
    this.addObserver = util.createSubscribe(function (observer) {
      return _this.observer = observer;
    });
  }
  Object.defineProperty(Subscription.prototype, "next", {
    get: function get() {
      _assert(this.observer, this.auth, "internal-error");
      return this.observer.next.bind(this.observer);
    },
    enumerable: false,
    configurable: true
  });
  return Subscription;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function initializeAuth(app$1, deps) {
  var provider = app._getProvider(app$1, 'auth');
  if (provider.isInitialized()) {
    var auth_1 = provider.getImmediate();
    var initialOptions = provider.getOptions();
    if (util.deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
      return auth_1;
    } else {
      _fail(auth_1, "already-initialized");
    }
  }
  var auth = provider.initialize({
    options: deps
  });
  return auth;
}
function _initializeAuthInstance(auth, deps) {
  var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
  var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
    auth._updateErrorMap(deps.errorMap);
  }
  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
function connectAuthEmulator(auth, url, options) {
  var authInternal = _castAuth(auth);
  _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed");
  _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme");
  var disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
  var protocol = extractProtocol(url);
  var _a = extractHostAndPort(url),
    host = _a.host,
    port = _a.port;
  var portStr = port === null ? '' : ":".concat(port);
  authInternal.config.emulator = {
    url: "".concat(protocol, "//").concat(host).concat(portStr, "/")
  };
  authInternal.settings.appVerificationDisabledForTesting = true;
  authInternal.emulatorConfig = Object.freeze({
    host: host,
    port: port,
    protocol: protocol.replace(':', ''),
    options: Object.freeze({
      disableWarnings: disableWarnings
    })
  });
  if (!disableWarnings) {
    emitEmulatorWarning();
  }
}
function extractProtocol(url) {
  var protocolEnd = url.indexOf(':');
  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
  var protocol = extractProtocol(url);
  var authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
  if (!authority) {
    return {
      host: '',
      port: null
    };
  }
  var hostAndPort = authority[2].split('@').pop() || '';
  var bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
  if (bracketedIPv6) {
    var host = bracketedIPv6[1];
    return {
      host: host,
      port: parsePort(hostAndPort.substr(host.length + 1))
    };
  } else {
    var _a = hostAndPort.split(':'),
      host = _a[0],
      port = _a[1];
    return {
      host: host,
      port: parsePort(port)
    };
  }
}
function parsePort(portStr) {
  if (!portStr) {
    return null;
  }
  var port = Number(portStr);
  if (isNaN(port)) {
    return null;
  }
  return port;
}
function emitEmulatorWarning() {
  function attachBanner() {
    var el = document.createElement('p');
    var sty = el.style;
    el.innerText = 'Running in emulator mode. Do not use with production credentials.';
    sty.position = 'fixed';
    sty.width = '100%';
    sty.backgroundColor = '#ffffff';
    sty.border = '.1em solid #000000';
    sty.color = '#b50000';
    sty.bottom = '0px';
    sty.left = '0px';
    sty.margin = '0px';
    sty.zIndex = '10000';
    sty.textAlign = 'center';
    el.classList.add('firebase-emulator-warning');
    document.body.appendChild(el);
  }
  if (typeof console !== 'undefined' && typeof console.info === 'function') {
    console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');
  }
  if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    if (document.readyState === 'loading') {
      window.addEventListener('DOMContentLoaded', attachBanner);
    } else {
      attachBanner();
    }
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AuthCredential = function () {
  function AuthCredential(providerId, signInMethod) {
    this.providerId = providerId;
    this.signInMethod = signInMethod;
  }
  AuthCredential.prototype.toJSON = function () {
    return debugFail('not implemented');
  };
  AuthCredential.prototype._getIdTokenResponse = function (_auth) {
    return debugFail('not implemented');
  };
  AuthCredential.prototype._linkToIdToken = function (_auth, _idToken) {
    return debugFail('not implemented');
  };
  AuthCredential.prototype._getReauthenticationResolver = function (_auth) {
    return debugFail('not implemented');
  };
  return AuthCredential;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function resetPassword(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:resetPassword", _addTidIfNecessary(auth, request))];
    });
  });
}
function updateEmailPassword(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
    });
  });
}
function applyActionCode$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithPassword(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPassword", _addTidIfNecessary(auth, request))];
    });
  });
}
function sendOobCode(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:sendOobCode", _addTidIfNecessary(auth, request))];
    });
  });
}
function sendEmailVerification$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, sendOobCode(auth, request)];
    });
  });
}
function sendPasswordResetEmail$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, sendOobCode(auth, request)];
    });
  });
}
function sendSignInLinkToEmail$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, sendOobCode(auth, request)];
    });
  });
}
function verifyAndChangeEmail(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, sendOobCode(auth, request)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithEmailLink$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request))];
    });
  });
}
function signInWithEmailLinkForLinking(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EmailAuthCredential = function (_super) {
  tslib.__extends(EmailAuthCredential, _super);
  function EmailAuthCredential(_email, _password, signInMethod, _tenantId) {
    if (_tenantId === void 0) {
      _tenantId = null;
    }
    var _this = _super.call(this, "password", signInMethod) || this;
    _this._email = _email;
    _this._password = _password;
    _this._tenantId = _tenantId;
    return _this;
  }
  EmailAuthCredential._fromEmailAndPassword = function (email, password) {
    return new EmailAuthCredential(email, password, "password");
  };
  EmailAuthCredential._fromEmailAndCode = function (email, oobCode, tenantId) {
    if (tenantId === void 0) {
      tenantId = null;
    }
    return new EmailAuthCredential(email, oobCode, "emailLink", tenantId);
  };
  EmailAuthCredential.prototype.toJSON = function () {
    return {
      email: this._email,
      password: this._password,
      signInMethod: this.signInMethod,
      tenantId: this._tenantId
    };
  };
  EmailAuthCredential.fromJSON = function (json) {
    var obj = typeof json === 'string' ? JSON.parse(json) : json;
    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
      if (obj.signInMethod === "password") {
        return this._fromEmailAndPassword(obj.email, obj.password);
      } else if (obj.signInMethod === "emailLink") {
        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
      }
    }
    return null;
  };
  EmailAuthCredential.prototype._getIdTokenResponse = function (auth) {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _b, request_1, requestWithRecaptcha;
      var _this = this;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = this.signInMethod;
            switch (_b) {
              case "password":
                return [3, 1];
              case "emailLink":
                return [3, 4];
            }
            return [3, 5];
          case 1:
            request_1 = {
              returnSecureToken: true,
              email: this._email,
              password: this._password,
              clientType: "CLIENT_TYPE_WEB"
            };
            if (!((_a = auth._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [3, 3];
            return [4, injectRecaptchaFields(auth, request_1, "signInWithPassword")];
          case 2:
            requestWithRecaptcha = _c.sent();
            return [2, signInWithPassword(auth, requestWithRecaptcha)];
          case 3:
            return [2, signInWithPassword(auth, request_1).catch(function (error) {
              return tslib.__awaiter(_this, void 0, void 0, function () {
                var requestWithRecaptcha;
                return tslib.__generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!(error.code === "auth/".concat("missing-recaptcha-token"))) return [3, 2];
                      console.log('Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');
                      return [4, injectRecaptchaFields(auth, request_1, "signInWithPassword")];
                    case 1:
                      requestWithRecaptcha = _a.sent();
                      return [2, signInWithPassword(auth, requestWithRecaptcha)];
                    case 2:
                      return [2, Promise.reject(error)];
                  }
                });
              });
            })];
          case 4:
            return [2, signInWithEmailLink$1(auth, {
              email: this._email,
              oobCode: this._password
            })];
          case 5:
            _fail(auth, "internal-error");
            _c.label = 6;
          case 6:
            return [2];
        }
      });
    });
  };
  EmailAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        switch (this.signInMethod) {
          case "password":
            return [2, updateEmailPassword(auth, {
              idToken: idToken,
              returnSecureToken: true,
              email: this._email,
              password: this._password
            })];
          case "emailLink":
            return [2, signInWithEmailLinkForLinking(auth, {
              idToken: idToken,
              email: this._email,
              oobCode: this._password
            })];
          default:
            _fail(auth, "internal-error");
        }
        return [2];
      });
    });
  };
  EmailAuthCredential.prototype._getReauthenticationResolver = function (auth) {
    return this._getIdTokenResponse(auth);
  };
  return EmailAuthCredential;
}(AuthCredential);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithIdp(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var IDP_REQUEST_URI$1 = 'http://localhost';
var OAuthCredential = function (_super) {
  tslib.__extends(OAuthCredential, _super);
  function OAuthCredential() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.pendingToken = null;
    return _this;
  }
  OAuthCredential._fromParams = function (params) {
    var cred = new OAuthCredential(params.providerId, params.signInMethod);
    if (params.idToken || params.accessToken) {
      if (params.idToken) {
        cred.idToken = params.idToken;
      }
      if (params.accessToken) {
        cred.accessToken = params.accessToken;
      }
      if (params.nonce && !params.pendingToken) {
        cred.nonce = params.nonce;
      }
      if (params.pendingToken) {
        cred.pendingToken = params.pendingToken;
      }
    } else if (params.oauthToken && params.oauthTokenSecret) {
      cred.accessToken = params.oauthToken;
      cred.secret = params.oauthTokenSecret;
    } else {
      _fail("argument-error");
    }
    return cred;
  };
  OAuthCredential.prototype.toJSON = function () {
    return {
      idToken: this.idToken,
      accessToken: this.accessToken,
      secret: this.secret,
      nonce: this.nonce,
      pendingToken: this.pendingToken,
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
  };
  OAuthCredential.fromJSON = function (json) {
    var obj = typeof json === 'string' ? JSON.parse(json) : json;
    var providerId = obj.providerId,
      signInMethod = obj.signInMethod,
      rest = tslib.__rest(obj, ["providerId", "signInMethod"]);
    if (!providerId || !signInMethod) {
      return null;
    }
    var cred = new OAuthCredential(providerId, signInMethod);
    cred.idToken = rest.idToken || undefined;
    cred.accessToken = rest.accessToken || undefined;
    cred.secret = rest.secret;
    cred.nonce = rest.nonce;
    cred.pendingToken = rest.pendingToken || null;
    return cred;
  };
  OAuthCredential.prototype._getIdTokenResponse = function (auth) {
    var request = this.buildRequest();
    return signInWithIdp(auth, request);
  };
  OAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
    var request = this.buildRequest();
    request.idToken = idToken;
    return signInWithIdp(auth, request);
  };
  OAuthCredential.prototype._getReauthenticationResolver = function (auth) {
    var request = this.buildRequest();
    request.autoCreate = false;
    return signInWithIdp(auth, request);
  };
  OAuthCredential.prototype.buildRequest = function () {
    var request = {
      requestUri: IDP_REQUEST_URI$1,
      returnSecureToken: true
    };
    if (this.pendingToken) {
      request.pendingToken = this.pendingToken;
    } else {
      var postBody = {};
      if (this.idToken) {
        postBody['id_token'] = this.idToken;
      }
      if (this.accessToken) {
        postBody['access_token'] = this.accessToken;
      }
      if (this.secret) {
        postBody['oauth_token_secret'] = this.secret;
      }
      postBody['providerId'] = this.providerId;
      if (this.nonce && !this.pendingToken) {
        postBody['nonce'] = this.nonce;
      }
      request.postBody = util.querystring(postBody);
    }
    return request;
  };
  return OAuthCredential;
}(AuthCredential);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
function signInWithPhoneNumber$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request))];
    });
  });
}
function linkWithPhoneNumber$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var response;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request))];
        case 1:
          response = _a.sent();
          if (response.temporaryProof) {
            throw _makeTaggedError(auth, "account-exists-with-different-credential", response);
          }
          return [2, response];
      }
    });
  });
}
var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (_a = {}, _a["USER_NOT_FOUND"] = "user-not-found", _a);
function verifyPhoneNumberForExisting(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var apiRequest;
    return tslib.__generator(this, function (_a) {
      apiRequest = tslib.__assign(tslib.__assign({}, request), {
        operation: 'REAUTH'
      });
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PhoneAuthCredential = function (_super) {
  tslib.__extends(PhoneAuthCredential, _super);
  function PhoneAuthCredential(params) {
    var _this = _super.call(this, "phone", "phone") || this;
    _this.params = params;
    return _this;
  }
  PhoneAuthCredential._fromVerification = function (verificationId, verificationCode) {
    return new PhoneAuthCredential({
      verificationId: verificationId,
      verificationCode: verificationCode
    });
  };
  PhoneAuthCredential._fromTokenResponse = function (phoneNumber, temporaryProof) {
    return new PhoneAuthCredential({
      phoneNumber: phoneNumber,
      temporaryProof: temporaryProof
    });
  };
  PhoneAuthCredential.prototype._getIdTokenResponse = function (auth) {
    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
  };
  PhoneAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
    return linkWithPhoneNumber$1(auth, tslib.__assign({
      idToken: idToken
    }, this._makeVerificationRequest()));
  };
  PhoneAuthCredential.prototype._getReauthenticationResolver = function (auth) {
    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
  };
  PhoneAuthCredential.prototype._makeVerificationRequest = function () {
    var _a = this.params,
      temporaryProof = _a.temporaryProof,
      phoneNumber = _a.phoneNumber,
      verificationId = _a.verificationId,
      verificationCode = _a.verificationCode;
    if (temporaryProof && phoneNumber) {
      return {
        temporaryProof: temporaryProof,
        phoneNumber: phoneNumber
      };
    }
    return {
      sessionInfo: verificationId,
      code: verificationCode
    };
  };
  PhoneAuthCredential.prototype.toJSON = function () {
    var obj = {
      providerId: this.providerId
    };
    if (this.params.phoneNumber) {
      obj.phoneNumber = this.params.phoneNumber;
    }
    if (this.params.temporaryProof) {
      obj.temporaryProof = this.params.temporaryProof;
    }
    if (this.params.verificationCode) {
      obj.verificationCode = this.params.verificationCode;
    }
    if (this.params.verificationId) {
      obj.verificationId = this.params.verificationId;
    }
    return obj;
  };
  PhoneAuthCredential.fromJSON = function (json) {
    if (typeof json === 'string') {
      json = JSON.parse(json);
    }
    var _a = json,
      verificationId = _a.verificationId,
      verificationCode = _a.verificationCode,
      phoneNumber = _a.phoneNumber,
      temporaryProof = _a.temporaryProof;
    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
      return null;
    }
    return new PhoneAuthCredential({
      verificationId: verificationId,
      verificationCode: verificationCode,
      phoneNumber: phoneNumber,
      temporaryProof: temporaryProof
    });
  };
  return PhoneAuthCredential;
}(AuthCredential);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function parseMode(mode) {
  switch (mode) {
    case 'recoverEmail':
      return "RECOVER_EMAIL";
    case 'resetPassword':
      return "PASSWORD_RESET";
    case 'signIn':
      return "EMAIL_SIGNIN";
    case 'verifyEmail':
      return "VERIFY_EMAIL";
    case 'verifyAndChangeEmail':
      return "VERIFY_AND_CHANGE_EMAIL";
    case 'revertSecondFactorAddition':
      return "REVERT_SECOND_FACTOR_ADDITION";
    default:
      return null;
  }
}
function parseDeepLink(url) {
  var link = util.querystringDecode(util.extractQuerystring(url))['link'];
  var doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))['deep_link_id'] : null;
  var iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))['deep_link_id'];
  var iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))['link'] : null;
  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
var ActionCodeURL = function () {
  function ActionCodeURL(actionLink) {
    var _a, _b, _c, _d, _e, _f;
    var searchParams = util.querystringDecode(util.extractQuerystring(actionLink));
    var apiKey = (_a = searchParams["apiKey"]) !== null && _a !== void 0 ? _a : null;
    var code = (_b = searchParams["oobCode"]) !== null && _b !== void 0 ? _b : null;
    var operation = parseMode((_c = searchParams["mode"]) !== null && _c !== void 0 ? _c : null);
    _assert(apiKey && code && operation, "argument-error");
    this.apiKey = apiKey;
    this.operation = operation;
    this.code = code;
    this.continueUrl = (_d = searchParams["continueUrl"]) !== null && _d !== void 0 ? _d : null;
    this.languageCode = (_e = searchParams["languageCode"]) !== null && _e !== void 0 ? _e : null;
    this.tenantId = (_f = searchParams["tenantId"]) !== null && _f !== void 0 ? _f : null;
  }
  ActionCodeURL.parseLink = function (link) {
    var actionLink = parseDeepLink(link);
    try {
      return new ActionCodeURL(actionLink);
    } catch (_a) {
      return null;
    }
  };
  return ActionCodeURL;
}();
function parseActionCodeURL(link) {
  return ActionCodeURL.parseLink(link);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EmailAuthProvider = function () {
  function EmailAuthProvider() {
    this.providerId = EmailAuthProvider.PROVIDER_ID;
  }
  EmailAuthProvider.credential = function (email, password) {
    return EmailAuthCredential._fromEmailAndPassword(email, password);
  };
  EmailAuthProvider.credentialWithLink = function (email, emailLink) {
    var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    _assert(actionCodeUrl, "argument-error");
    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
  };
  EmailAuthProvider.PROVIDER_ID = "password";
  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
  return EmailAuthProvider;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FederatedAuthProvider = function () {
  function FederatedAuthProvider(providerId) {
    this.providerId = providerId;
    this.defaultLanguageCode = null;
    this.customParameters = {};
  }
  FederatedAuthProvider.prototype.setDefaultLanguage = function (languageCode) {
    this.defaultLanguageCode = languageCode;
  };
  FederatedAuthProvider.prototype.setCustomParameters = function (customOAuthParameters) {
    this.customParameters = customOAuthParameters;
    return this;
  };
  FederatedAuthProvider.prototype.getCustomParameters = function () {
    return this.customParameters;
  };
  return FederatedAuthProvider;
}();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BaseOAuthProvider = function (_super) {
  tslib.__extends(BaseOAuthProvider, _super);
  function BaseOAuthProvider() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.scopes = [];
    return _this;
  }
  BaseOAuthProvider.prototype.addScope = function (scope) {
    if (!this.scopes.includes(scope)) {
      this.scopes.push(scope);
    }
    return this;
  };
  BaseOAuthProvider.prototype.getScopes = function () {
    return tslib.__spreadArray([], this.scopes, true);
  };
  return BaseOAuthProvider;
}(FederatedAuthProvider);
var OAuthProvider = function (_super) {
  tslib.__extends(OAuthProvider, _super);
  function OAuthProvider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  OAuthProvider.credentialFromJSON = function (json) {
    var obj = typeof json === 'string' ? JSON.parse(json) : json;
    _assert('providerId' in obj && 'signInMethod' in obj, "argument-error");
    return OAuthCredential._fromParams(obj);
  };
  OAuthProvider.prototype.credential = function (params) {
    return this._credential(tslib.__assign(tslib.__assign({}, params), {
      nonce: params.rawNonce
    }));
  };
  OAuthProvider.prototype._credential = function (params) {
    _assert(params.idToken || params.accessToken, "argument-error");
    return OAuthCredential._fromParams(tslib.__assign(tslib.__assign({}, params), {
      providerId: this.providerId,
      signInMethod: this.providerId
    }));
  };
  OAuthProvider.credentialFromResult = function (userCredential) {
    return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
  };
  OAuthProvider.credentialFromError = function (error) {
    return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
  };
  OAuthProvider.oauthCredentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse) {
      return null;
    }
    var _b = tokenResponse,
      oauthIdToken = _b.oauthIdToken,
      oauthAccessToken = _b.oauthAccessToken,
      oauthTokenSecret = _b.oauthTokenSecret,
      pendingToken = _b.pendingToken,
      nonce = _b.nonce,
      providerId = _b.providerId;
    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
      return null;
    }
    if (!providerId) {
      return null;
    }
    try {
      return new OAuthProvider(providerId)._credential({
        idToken: oauthIdToken,
        accessToken: oauthAccessToken,
        nonce: nonce,
        pendingToken: pendingToken
      });
    } catch (e) {
      return null;
    }
  };
  return OAuthProvider;
}(BaseOAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FacebookAuthProvider = function (_super) {
  tslib.__extends(FacebookAuthProvider, _super);
  function FacebookAuthProvider() {
    return _super.call(this, "facebook.com") || this;
  }
  FacebookAuthProvider.credential = function (accessToken) {
    return OAuthCredential._fromParams({
      providerId: FacebookAuthProvider.PROVIDER_ID,
      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
      accessToken: accessToken
    });
  };
  FacebookAuthProvider.credentialFromResult = function (userCredential) {
    return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
  };
  FacebookAuthProvider.credentialFromError = function (error) {
    return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
  };
  FacebookAuthProvider.credentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }
    if (!tokenResponse.oauthAccessToken) {
      return null;
    }
    try {
      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_b) {
      return null;
    }
  };
  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
  FacebookAuthProvider.PROVIDER_ID = "facebook.com";
  return FacebookAuthProvider;
}(BaseOAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var GoogleAuthProvider = function (_super) {
  tslib.__extends(GoogleAuthProvider, _super);
  function GoogleAuthProvider() {
    var _this = _super.call(this, "google.com") || this;
    _this.addScope('profile');
    return _this;
  }
  GoogleAuthProvider.credential = function (idToken, accessToken) {
    return OAuthCredential._fromParams({
      providerId: GoogleAuthProvider.PROVIDER_ID,
      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
      idToken: idToken,
      accessToken: accessToken
    });
  };
  GoogleAuthProvider.credentialFromResult = function (userCredential) {
    return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
  };
  GoogleAuthProvider.credentialFromError = function (error) {
    return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
  };
  GoogleAuthProvider.credentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse) {
      return null;
    }
    var _b = tokenResponse,
      oauthIdToken = _b.oauthIdToken,
      oauthAccessToken = _b.oauthAccessToken;
    if (!oauthIdToken && !oauthAccessToken) {
      return null;
    }
    try {
      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
    } catch (_c) {
      return null;
    }
  };
  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com";
  GoogleAuthProvider.PROVIDER_ID = "google.com";
  return GoogleAuthProvider;
}(BaseOAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var GithubAuthProvider = function (_super) {
  tslib.__extends(GithubAuthProvider, _super);
  function GithubAuthProvider() {
    return _super.call(this, "github.com") || this;
  }
  GithubAuthProvider.credential = function (accessToken) {
    return OAuthCredential._fromParams({
      providerId: GithubAuthProvider.PROVIDER_ID,
      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
      accessToken: accessToken
    });
  };
  GithubAuthProvider.credentialFromResult = function (userCredential) {
    return GithubAuthProvider.credentialFromTaggedObject(userCredential);
  };
  GithubAuthProvider.credentialFromError = function (error) {
    return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
  };
  GithubAuthProvider.credentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
      return null;
    }
    if (!tokenResponse.oauthAccessToken) {
      return null;
    }
    try {
      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
    } catch (_b) {
      return null;
    }
  };
  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com";
  GithubAuthProvider.PROVIDER_ID = "github.com";
  return GithubAuthProvider;
}(BaseOAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var IDP_REQUEST_URI = 'http://localhost';
var SAMLAuthCredential = function (_super) {
  tslib.__extends(SAMLAuthCredential, _super);
  function SAMLAuthCredential(providerId, pendingToken) {
    var _this = _super.call(this, providerId, providerId) || this;
    _this.pendingToken = pendingToken;
    return _this;
  }
  SAMLAuthCredential.prototype._getIdTokenResponse = function (auth) {
    var request = this.buildRequest();
    return signInWithIdp(auth, request);
  };
  SAMLAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
    var request = this.buildRequest();
    request.idToken = idToken;
    return signInWithIdp(auth, request);
  };
  SAMLAuthCredential.prototype._getReauthenticationResolver = function (auth) {
    var request = this.buildRequest();
    request.autoCreate = false;
    return signInWithIdp(auth, request);
  };
  SAMLAuthCredential.prototype.toJSON = function () {
    return {
      signInMethod: this.signInMethod,
      providerId: this.providerId,
      pendingToken: this.pendingToken
    };
  };
  SAMLAuthCredential.fromJSON = function (json) {
    var obj = typeof json === 'string' ? JSON.parse(json) : json;
    var providerId = obj.providerId,
      signInMethod = obj.signInMethod,
      pendingToken = obj.pendingToken;
    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {
      return null;
    }
    return new SAMLAuthCredential(providerId, pendingToken);
  };
  SAMLAuthCredential._create = function (providerId, pendingToken) {
    return new SAMLAuthCredential(providerId, pendingToken);
  };
  SAMLAuthCredential.prototype.buildRequest = function () {
    return {
      requestUri: IDP_REQUEST_URI,
      returnSecureToken: true,
      pendingToken: this.pendingToken
    };
  };
  return SAMLAuthCredential;
}(AuthCredential);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SAML_PROVIDER_PREFIX = 'saml.';
var SAMLAuthProvider = function (_super) {
  tslib.__extends(SAMLAuthProvider, _super);
  function SAMLAuthProvider(providerId) {
    _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error");
    return _super.call(this, providerId) || this;
  }
  SAMLAuthProvider.credentialFromResult = function (userCredential) {
    return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
  };
  SAMLAuthProvider.credentialFromError = function (error) {
    return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
  };
  SAMLAuthProvider.credentialFromJSON = function (json) {
    var credential = SAMLAuthCredential.fromJSON(json);
    _assert(credential, "argument-error");
    return credential;
  };
  SAMLAuthProvider.samlCredentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse) {
      return null;
    }
    var _b = tokenResponse,
      pendingToken = _b.pendingToken,
      providerId = _b.providerId;
    if (!pendingToken || !providerId) {
      return null;
    }
    try {
      return SAMLAuthCredential._create(providerId, pendingToken);
    } catch (e) {
      return null;
    }
  };
  return SAMLAuthProvider;
}(FederatedAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TwitterAuthProvider = function (_super) {
  tslib.__extends(TwitterAuthProvider, _super);
  function TwitterAuthProvider() {
    return _super.call(this, "twitter.com") || this;
  }
  TwitterAuthProvider.credential = function (token, secret) {
    return OAuthCredential._fromParams({
      providerId: TwitterAuthProvider.PROVIDER_ID,
      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
      oauthToken: token,
      oauthTokenSecret: secret
    });
  };
  TwitterAuthProvider.credentialFromResult = function (userCredential) {
    return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
  };
  TwitterAuthProvider.credentialFromError = function (error) {
    return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
  };
  TwitterAuthProvider.credentialFromTaggedObject = function (_a) {
    var tokenResponse = _a._tokenResponse;
    if (!tokenResponse) {
      return null;
    }
    var _b = tokenResponse,
      oauthAccessToken = _b.oauthAccessToken,
      oauthTokenSecret = _b.oauthTokenSecret;
    if (!oauthAccessToken || !oauthTokenSecret) {
      return null;
    }
    try {
      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
    } catch (_c) {
      return null;
    }
  };
  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com";
  TwitterAuthProvider.PROVIDER_ID = "twitter.com";
  return TwitterAuthProvider;
}(BaseOAuthProvider);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signUp(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signUp", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var UserCredentialImpl = function () {
  function UserCredentialImpl(params) {
    this.user = params.user;
    this.providerId = params.providerId;
    this._tokenResponse = params._tokenResponse;
    this.operationType = params.operationType;
  }
  UserCredentialImpl._fromIdTokenResponse = function (auth, operationType, idTokenResponse, isAnonymous) {
    if (isAnonymous === void 0) {
      isAnonymous = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var user, providerId, userCred;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)];
          case 1:
            user = _a.sent();
            providerId = providerIdForResponse(idTokenResponse);
            userCred = new UserCredentialImpl({
              user: user,
              providerId: providerId,
              _tokenResponse: idTokenResponse,
              operationType: operationType
            });
            return [2, userCred];
        }
      });
    });
  };
  UserCredentialImpl._forOperation = function (user, operationType, response) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var providerId;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, user._updateTokensIfNecessary(response, true)];
          case 1:
            _a.sent();
            providerId = providerIdForResponse(response);
            return [2, new UserCredentialImpl({
              user: user,
              providerId: providerId,
              _tokenResponse: response,
              operationType: operationType
            })];
        }
      });
    });
  };
  return UserCredentialImpl;
}();
function providerIdForResponse(response) {
  if (response.providerId) {
    return response.providerId;
  }
  if ('phoneNumber' in response) {
    return "phone";
  }
  return null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInAnonymously(auth) {
  var _a;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authInternal, response, userCredential;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          authInternal = _castAuth(auth);
          return [4, authInternal._initializationPromise];
        case 1:
          _b.sent();
          if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
            return [2, new UserCredentialImpl({
              user: authInternal.currentUser,
              providerId: null,
              operationType: "signIn"
            })];
          }
          return [4, signUp(authInternal, {
            returnSecureToken: true
          })];
        case 2:
          response = _b.sent();
          return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response, true)];
        case 3:
          userCredential = _b.sent();
          return [4, authInternal._updateCurrentUser(userCredential.user)];
        case 4:
          _b.sent();
          return [2, userCredential];
      }
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MultiFactorError = function (_super) {
  tslib.__extends(MultiFactorError, _super);
  function MultiFactorError(auth, error, operationType, user) {
    var _this = this;
    var _a;
    _this = _super.call(this, error.code, error.message) || this;
    _this.operationType = operationType;
    _this.user = user;
    Object.setPrototypeOf(_this, MultiFactorError.prototype);
    _this.customData = {
      appName: auth.name,
      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
      _serverResponse: error.customData._serverResponse,
      operationType: operationType
    };
    return _this;
  }
  MultiFactorError._fromErrorAndOperation = function (auth, error, operationType, user) {
    return new MultiFactorError(auth, error, operationType, user);
  };
  return MultiFactorError;
}(util.FirebaseError);
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
  var idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
  return idTokenProvider.catch(function (error) {
    if (error.code === "auth/".concat("multi-factor-auth-required")) {
      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
    }
    throw error;
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function providerDataAsNames(providerData) {
  return new Set(providerData.map(function (_a) {
    var providerId = _a.providerId;
    return providerId;
  }).filter(function (pid) {
    return !!pid;
  }));
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function unlink(user, providerId) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal, providerUserInfo, _a, _b, providersLeft;
    var _c;
    return tslib.__generator(this, function (_d) {
      switch (_d.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, _assertLinkedStatus(true, userInternal, providerId)];
        case 1:
          _d.sent();
          _a = deleteLinkedAccounts;
          _b = [userInternal.auth];
          _c = {};
          return [4, userInternal.getIdToken()];
        case 2:
          return [4, _a.apply(void 0, _b.concat([(_c.idToken = _d.sent(), _c.deleteProvider = [providerId], _c)]))];
        case 3:
          providerUserInfo = _d.sent().providerUserInfo;
          providersLeft = providerDataAsNames(providerUserInfo || []);
          userInternal.providerData = userInternal.providerData.filter(function (pd) {
            return providersLeft.has(pd.providerId);
          });
          if (!providersLeft.has("phone")) {
            userInternal.phoneNumber = null;
          }
          return [4, userInternal.auth._persistUserIfCurrent(userInternal)];
        case 4:
          _d.sent();
          return [2, userInternal];
      }
    });
  });
}
function _link(user, credential, bypassAuthState) {
  if (bypassAuthState === void 0) {
    bypassAuthState = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var response, _a, _b, _c, _d, _e;
    return tslib.__generator(this, function (_f) {
      switch (_f.label) {
        case 0:
          _a = _logoutIfInvalidated;
          _b = [user];
          _d = (_c = credential)._linkToIdToken;
          _e = [user.auth];
          return [4, user.getIdToken()];
        case 1:
          return [4, _a.apply(void 0, _b.concat([_d.apply(_c, _e.concat([_f.sent()])), bypassAuthState]))];
        case 2:
          response = _f.sent();
          return [2, UserCredentialImpl._forOperation(user, "link", response)];
      }
    });
  });
}
function _assertLinkedStatus(expected, user, provider) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var providerIds, code;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, _reloadWithoutSaving(user)];
        case 1:
          _a.sent();
          providerIds = providerDataAsNames(user.providerData);
          code = expected === false ? "provider-already-linked" : "no-such-provider";
          _assert(providerIds.has(provider) === expected, user.auth, code);
          return [2];
      }
    });
  });
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _reauthenticate(user, credential, bypassAuthState) {
  if (bypassAuthState === void 0) {
    bypassAuthState = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var auth, operationType, response, parsed, localId, e_1;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          auth = user.auth;
          operationType = "reauthenticate";
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3,, 4]);
          return [4, _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)];
        case 2:
          response = _a.sent();
          _assert(response.idToken, auth, "internal-error");
          parsed = _parseToken(response.idToken);
          _assert(parsed, auth, "internal-error");
          localId = parsed.sub;
          _assert(user.uid === localId, auth, "user-mismatch");
          return [2, UserCredentialImpl._forOperation(user, operationType, response)];
        case 3:
          e_1 = _a.sent();
          if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === "auth/".concat("user-not-found")) {
            _fail(auth, "user-mismatch");
          }
          throw e_1;
        case 4:
          return [2];
      }
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _signInWithCredential(auth, credential, bypassAuthState) {
  if (bypassAuthState === void 0) {
    bypassAuthState = false;
  }
  return tslib.__awaiter(this, void 0, void 0, function () {
    var operationType, response, userCredential;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          operationType = "signIn";
          return [4, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)];
        case 1:
          response = _a.sent();
          return [4, UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)];
        case 2:
          userCredential = _a.sent();
          if (!!bypassAuthState) return [3, 4];
          return [4, auth._updateCurrentUser(userCredential.user)];
        case 3:
          _a.sent();
          _a.label = 4;
        case 4:
          return [2, userCredential];
      }
    });
  });
}
function signInWithCredential(auth, credential) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _signInWithCredential(_castAuth(auth), credential)];
    });
  });
}
function linkWithCredential(user, credential) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, _assertLinkedStatus(false, userInternal, credential.providerId)];
        case 1:
          _a.sent();
          return [2, _link(userInternal, credential)];
      }
    });
  });
}
function reauthenticateWithCredential(user, credential) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _reauthenticate(util.getModularInstance(user), credential)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithCustomToken$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithCustomToken", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function signInWithCustomToken(auth, customToken) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authInternal, response, cred;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          authInternal = _castAuth(auth);
          return [4, signInWithCustomToken$1(authInternal, {
            token: customToken,
            returnSecureToken: true
          })];
        case 1:
          response = _a.sent();
          return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response)];
        case 2:
          cred = _a.sent();
          return [4, authInternal._updateCurrentUser(cred.user)];
        case 3:
          _a.sent();
          return [2, cred];
      }
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MultiFactorInfoImpl = function () {
  function MultiFactorInfoImpl(factorId, response) {
    this.factorId = factorId;
    this.uid = response.mfaEnrollmentId;
    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
    this.displayName = response.displayName;
  }
  MultiFactorInfoImpl._fromServerResponse = function (auth, enrollment) {
    if ('phoneInfo' in enrollment) {
      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
    } else if ('totpInfo' in enrollment) {
      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
    }
    return _fail(auth, "internal-error");
  };
  return MultiFactorInfoImpl;
}();
var PhoneMultiFactorInfoImpl = function (_super) {
  tslib.__extends(PhoneMultiFactorInfoImpl, _super);
  function PhoneMultiFactorInfoImpl(response) {
    var _this = _super.call(this, "phone", response) || this;
    _this.phoneNumber = response.phoneInfo;
    return _this;
  }
  PhoneMultiFactorInfoImpl._fromServerResponse = function (_auth, enrollment) {
    return new PhoneMultiFactorInfoImpl(enrollment);
  };
  return PhoneMultiFactorInfoImpl;
}(MultiFactorInfoImpl);
var TotpMultiFactorInfoImpl = function (_super) {
  tslib.__extends(TotpMultiFactorInfoImpl, _super);
  function TotpMultiFactorInfoImpl(response) {
    return _super.call(this, "totp", response) || this;
  }
  TotpMultiFactorInfoImpl._fromServerResponse = function (_auth, enrollment) {
    return new TotpMultiFactorInfoImpl(enrollment);
  };
  return TotpMultiFactorInfoImpl;
}(MultiFactorInfoImpl);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
  var _a;
  _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri");
  _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain");
  request.continueUrl = actionCodeSettings.url;
  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
  if (actionCodeSettings.iOS) {
    _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id");
    request.iOSBundleId = actionCodeSettings.iOS.bundleId;
  }
  if (actionCodeSettings.android) {
    _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name");
    request.androidInstallApp = actionCodeSettings.android.installApp;
    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
    request.androidPackageName = actionCodeSettings.android.packageName;
  }
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function sendPasswordResetEmail(auth, email, actionCodeSettings) {
  var _a;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authInternal, request, requestWithRecaptcha;
    var _this = this;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          authInternal = _castAuth(auth);
          request = {
            requestType: "PASSWORD_RESET",
            email: email,
            clientType: "CLIENT_TYPE_WEB"
          };
          if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [3, 3];
          return [4, injectRecaptchaFields(authInternal, request, "getOobCode", true)];
        case 1:
          requestWithRecaptcha = _b.sent();
          if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
          }
          return [4, sendPasswordResetEmail$1(authInternal, requestWithRecaptcha)];
        case 2:
          _b.sent();
          return [3, 5];
        case 3:
          if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
          }
          return [4, sendPasswordResetEmail$1(authInternal, request).catch(function (error) {
            return tslib.__awaiter(_this, void 0, void 0, function () {
              var requestWithRecaptcha;
              return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (!(error.code === "auth/".concat("missing-recaptcha-token"))) return [3, 3];
                    console.log('Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.');
                    return [4, injectRecaptchaFields(authInternal, request, "getOobCode", true)];
                  case 1:
                    requestWithRecaptcha = _a.sent();
                    if (actionCodeSettings) {
                      _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);
                    }
                    return [4, sendPasswordResetEmail$1(authInternal, requestWithRecaptcha)];
                  case 2:
                    _a.sent();
                    return [3, 4];
                  case 3:
                    return [2, Promise.reject(error)];
                  case 4:
                    return [2];
                }
              });
            });
          })];
        case 4:
          _b.sent();
          _b.label = 5;
        case 5:
          return [2];
      }
    });
  });
}
function confirmPasswordReset(auth, oobCode, newPassword) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, resetPassword(util.getModularInstance(auth), {
            oobCode: oobCode,
            newPassword: newPassword
          })];
        case 1:
          _a.sent();
          return [2];
      }
    });
  });
}
function applyActionCode(auth, oobCode) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, applyActionCode$1(util.getModularInstance(auth), {
            oobCode: oobCode
          })];
        case 1:
          _a.sent();
          return [2];
      }
    });
  });
}
function checkActionCode(auth, oobCode) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authModular, response, operation, multiFactorInfo;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          authModular = util.getModularInstance(auth);
          return [4, resetPassword(authModular, {
            oobCode: oobCode
          })];
        case 1:
          response = _a.sent();
          operation = response.requestType;
          _assert(operation, authModular, "internal-error");
          switch (operation) {
            case "EMAIL_SIGNIN":
              break;
            case "VERIFY_AND_CHANGE_EMAIL":
              _assert(response.newEmail, authModular, "internal-error");
              break;
            case "REVERT_SECOND_FACTOR_ADDITION":
              _assert(response.mfaInfo, authModular, "internal-error");
            default:
              _assert(response.email, authModular, "internal-error");
          }
          multiFactorInfo = null;
          if (response.mfaInfo) {
            multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
          }
          return [2, {
            data: {
              email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.newEmail : response.email) || null,
              previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.email : response.newEmail) || null,
              multiFactorInfo: multiFactorInfo
            },
            operation: operation
          }];
      }
    });
  });
}
function verifyPasswordResetCode(auth, code) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var data;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4, checkActionCode(util.getModularInstance(auth), code)];
        case 1:
          data = _a.sent().data;
          return [2, data.email];
      }
    });
  });
}
function createUserWithEmailAndPassword(auth, email, password) {
  var _a;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authInternal, request, signUpResponse, requestWithRecaptcha, response, userCredential;
    var _this = this;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          authInternal = _castAuth(auth);
          request = {
            returnSecureToken: true,
            email: email,
            password: password,
            clientType: "CLIENT_TYPE_WEB"
          };
          if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [3, 2];
          return [4, injectRecaptchaFields(authInternal, request, "signUpPassword")];
        case 1:
          requestWithRecaptcha = _b.sent();
          signUpResponse = signUp(authInternal, requestWithRecaptcha);
          return [3, 3];
        case 2:
          signUpResponse = signUp(authInternal, request).catch(function (error) {
            return tslib.__awaiter(_this, void 0, void 0, function () {
              var requestWithRecaptcha;
              return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (!(error.code === "auth/".concat("missing-recaptcha-token"))) return [3, 2];
                    console.log('Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.');
                    return [4, injectRecaptchaFields(authInternal, request, "signUpPassword")];
                  case 1:
                    requestWithRecaptcha = _a.sent();
                    return [2, signUp(authInternal, requestWithRecaptcha)];
                  case 2:
                    return [2, Promise.reject(error)];
                }
              });
            });
          });
          _b.label = 3;
        case 3:
          return [4, signUpResponse.catch(function (error) {
            return Promise.reject(error);
          })];
        case 4:
          response = _b.sent();
          return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response)];
        case 5:
          userCredential = _b.sent();
          return [4, authInternal._updateCurrentUser(userCredential.user)];
        case 6:
          _b.sent();
          return [2, userCredential];
      }
    });
  });
}
function signInWithEmailAndPassword(auth, email, password) {
  return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password));
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
  var _a;
  return tslib.__awaiter(this, void 0, void 0, function () {
    function setActionCodeSettings(request, actionCodeSettings) {
      _assert(actionCodeSettings.handleCodeInApp, authInternal, "argument-error");
      if (actionCodeSettings) {
        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
      }
    }
    var authInternal, request, requestWithRecaptcha;
    var _this = this;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          authInternal = _castAuth(auth);
          request = {
            requestType: "EMAIL_SIGNIN",
            email: email,
            clientType: "CLIENT_TYPE_WEB"
          };
          if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [3, 3];
          return [4, injectRecaptchaFields(authInternal, request, "getOobCode", true)];
        case 1:
          requestWithRecaptcha = _b.sent();
          setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
          return [4, sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha)];
        case 2:
          _b.sent();
          return [3, 5];
        case 3:
          setActionCodeSettings(request, actionCodeSettings);
          return [4, sendSignInLinkToEmail$1(authInternal, request).catch(function (error) {
            return tslib.__awaiter(_this, void 0, void 0, function () {
              var requestWithRecaptcha;
              return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (!(error.code === "auth/".concat("missing-recaptcha-token"))) return [3, 3];
                    console.log('Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');
                    return [4, injectRecaptchaFields(authInternal, request, "getOobCode", true)];
                  case 1:
                    requestWithRecaptcha = _a.sent();
                    setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);
                    return [4, sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha)];
                  case 2:
                    _a.sent();
                    return [3, 4];
                  case 3:
                    return [2, Promise.reject(error)];
                  case 4:
                    return [2];
                }
              });
            });
          })];
        case 4:
          _b.sent();
          _b.label = 5;
        case 5:
          return [2];
      }
    });
  });
}
function isSignInWithEmailLink(auth, emailLink) {
  var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN";
}
function signInWithEmailLink(auth, email, emailLink) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var authModular, credential;
    return tslib.__generator(this, function (_a) {
      authModular = util.getModularInstance(auth);
      credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
      _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch");
      return [2, signInWithCredential(authModular, credential)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createAuthUri(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:createAuthUri", _addTidIfNecessary(auth, request))];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function fetchSignInMethodsForEmail(auth, email) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var continueUri, request, signinMethods;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
          request = {
            identifier: email,
            continueUri: continueUri
          };
          return [4, createAuthUri(util.getModularInstance(auth), request)];
        case 1:
          signinMethods = _a.sent().signinMethods;
          return [2, signinMethods || []];
      }
    });
  });
}
function sendEmailVerification(user, actionCodeSettings) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal, idToken, request, email;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, user.getIdToken()];
        case 1:
          idToken = _a.sent();
          request = {
            requestType: "VERIFY_EMAIL",
            idToken: idToken
          };
          if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
          }
          return [4, sendEmailVerification$1(userInternal.auth, request)];
        case 2:
          email = _a.sent().email;
          if (!(email !== user.email)) return [3, 4];
          return [4, user.reload()];
        case 3:
          _a.sent();
          _a.label = 4;
        case 4:
          return [2];
      }
    });
  });
}
function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal, idToken, request, email;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          userInternal = util.getModularInstance(user);
          return [4, user.getIdToken()];
        case 1:
          idToken = _a.sent();
          request = {
            requestType: "VERIFY_AND_CHANGE_EMAIL",
            idToken: idToken,
            newEmail: newEmail
          };
          if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
          }
          return [4, verifyAndChangeEmail(userInternal.auth, request)];
        case 2:
          email = _a.sent().email;
          if (!(email !== user.email)) return [3, 4];
          return [4, user.reload()];
        case 3:
          _a.sent();
          _a.label = 4;
        case 4:
          return [2];
      }
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function updateProfile$1(auth, request) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
    });
  });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function updateProfile(user, _a) {
  var displayName = _a.displayName,
    photoUrl = _a.photoURL;
  return tslib.__awaiter(this, void 0, void 0, function () {
    var userInternal, idToken, profileRequest, response, passwordProvider;
    return tslib.__generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          if (displayName === undefined && photoUrl === undefined) {
            return [2];
          }
          userInternal = util.getModularInstance(user);
          return [4, userInternal.getIdToken()];
        case 1:
          idToken = _b.sent();
          profileRequest = {
            idToken: idToken,
            displayName: displayName,
            photoUrl: photoUrl,
            returnSecureToken: true
          };
          return [4, _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest))];
        case 2:
          response = _b.sent();
          userInternal.displayName = response.displayName || null;
          userInternal.photoURL = response.photoUrl || null;
          passwordProvider = userInternal.providerData.find(function (_a) {
            var providerId = _a.providerId;
            return providerId === "password";
          });
          if (passwordProvider) {
            passwordProvider.displayName = userInternal.displayName;
            passwordProvider.photoURL = userInternal.photoURL;
          }
          return [4, userInternal._updateTokensIfNecessary(response)];
        case 3:
          _b.sent();
          return [2];
      }
    });
  });
}
function updateEmail(user, newEmail) {
  return updateEmailOrPassword(util.getModularInstance(user), newEmail, null);
}
function updatePassword(user, newPassword) {
  return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);
}
function updateEmailOrPassword(user, email, password) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var auth, idToken, request, response;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          auth = user.auth;
          return [4, user.getIdToken()];
        case 1:
          idToken = _a.sent();
          request = {
            idToken: idToken,
            returnSecureToken: true
          };
          if (email) {
            request.email = email;
          }
          if (password) {
            request.password = password;
          }
          return [4, _logoutIfInvalidated(user, updateEmailPassword(auth, request))];
        case 2:
          response = _a.sent();
          return [4, user._updateTokensIfNecessary(response, true)];
        case 3:
          _a.sent();
          return [2];
      }
    });
  });
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function _fromIdTokenResponse(idTokenResponse) {
  var _a, _b;
  if (!idTokenResponse) {
    return null;
  }
  var providerId = idTokenResponse.providerId;
  var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
  var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse";
  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
    var signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
    if (signInProvider) {
      var filteredProviderId = signInProvider !== "anonymous" && signInProvider !== "custom" ? signInProvider : null;
      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
    }
  }
  if (!providerId) {
    return null;
  }
  switch (providerId) {
    case "facebook.com":
      return new FacebookAdditionalUserInfo(isNewUser, profile);
    case "github.com":
      return new GithubAdditionalUserInfo(isNewUser, profile);
    case "google.com":
      return new GoogleAdditionalUserInfo(isNewUser, profile);
    case "twitter.com":
      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
    case "custom":
    case "anonymous":
      return new GenericAdditionalUserInfo(isNewUser, null);
    default:
      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
  }
}
var GenericAdditionalUserInfo = function () {
  function GenericAdditionalUserInfo(isNewUser, providerId, profile) {
    if (profile === void 0) {
      profile = {};
    }
    this.isNewUser = isNewUser;
    this.providerId = providerId;
    this.profile = profile;
  }
  return GenericAdditionalUserInfo;
}();
var FederatedAdditionalUserInfoWithUsername = function (_super) {
  tslib.__extends(FederatedAdditionalUserInfoWithUsername, _super);
  function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {
    var _this = _super.call(this, isNewUser, providerId, profile) || this;
    _this.username = username;
    return _this;
  }
  return FederatedAdditionalUserInfoWithUsername;
}(GenericAdditionalUserInfo);
var FacebookAdditionalUserInfo = function (_super) {
  tslib.__extends(FacebookAdditionalUserInfo, _super);
  function FacebookAdditionalUserInfo(isNewUser, profile) {
    return _super.call(this, isNewUser, "facebook.com", profile) || this;
  }
  return FacebookAdditionalUserInfo;
}(GenericAdditionalUserInfo);
var GithubAdditionalUserInfo = function (_super) {
  tslib.__extends(GithubAdditionalUserInfo, _super);
  function GithubAdditionalUserInfo(isNewUser, profile) {
    return _super.call(this, isNewUser, "github.com", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null) || this;
  }
  return GithubAdditionalUserInfo;
}(FederatedAdditionalUserInfoWithUsername);
var GoogleAdditionalUserInfo = function (_super) {
  tslib.__extends(GoogleAdditionalUserInfo, _super);
  function GoogleAdditionalUserInfo(isNewUser, profile) {
    return _super.call(this, isNewUser, "google.com", profile) || this;
  }
  return GoogleAdditionalUserInfo;
}(GenericAdditionalUserInfo);
var TwitterAdditionalUserInfo = function (_super) {
  tslib.__extends(TwitterAdditionalUserInfo, _super);
  function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {
    return _super.call(this, isNewUser, "twitter.com", profile, screenName) || this;
  }
  return TwitterAdditionalUserInfo;
}(FederatedAdditionalUserInfoWithUsername);
function getAdditionalUserInfo(userCredential) {
  var _a = userCredential,
    user = _a.user,
    _tokenResponse = _a._tokenResponse;
  if (user.isAnonymous && !_tokenResponse) {
    return {
      providerId: null,
      isNewUser: false,
      profile: null
    };
  }
  return _fromIdTokenResponse(_tokenResponse);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function setPersistence(auth, persistence) {
  return util.getModularInstance(auth).setPersistence(persistence);
}
function initializeRecaptchaConfig(auth) {
  var authInternal = _castAuth(auth);
  return authInternal.initializeRecaptchaConfig();
}
function onIdTokenChanged(auth, nextOrObserver, error, completed) {
  return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
function beforeAuthStateChanged(auth, callback, onAbort) {
  return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);
}
function onAuthStateChanged(auth, nextOrObserver, error, completed) {
  return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
function useDeviceLanguage(auth) {
  util.getModularInstance(auth).useDeviceLanguage();
}
function updateCurrentUser(auth, user) {
  return util.getModularInstance(auth).updateCurrentUser(user);
}
function signOut(auth) {
  return util.getModularInstance(auth).signOut();
}
function deleteUser(user) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2, util.getModularInstance(user).delete()];
    });
  });
}
var MultiFactorSessionImpl = function () {
  function MultiFactorSessionImpl(type, credential, auth) {
    this.type = type;
    this.credential = credential;
    this.auth = auth;
  }
  MultiFactorSessionImpl._fromIdtoken = function (idToken, auth) {
    return new MultiFactorSessionImpl("enroll", idToken, auth);
  };
  MultiFactorSessionImpl._fromMfaPendingCredential = function (mfaPendingCredential) {
    return new MultiFactorSessionImpl("signin", mfaPendingCredential);
  };
  MultiFactorSessionImpl.prototype.toJSON = function () {
    var _a;
    var key = this.type === "enroll" ? 'idToken' : 'pendingCredential';
    return {
      multiFactorSession: (_a = {}, _a[key] = this.credential, _a)
    };
  };
  MultiFactorSessionImpl.fromJSON = function (obj) {
    var _a, _b;
    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
        return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
        return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
      }
    }
    return null;
  };
  return MultiFactorSessionImpl;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MultiFactorResolverImpl = function () {
  function MultiFactorResolverImpl(session, hints, signInResolver) {
    this.session = session;
    this.hints = hints;
    this.signInResolver = signInResolver;
  }
  MultiFactorResolverImpl._fromError = function (authExtern, error) {
    var _this = this;
    var auth = _castAuth(authExtern);
    var serverResponse = error.customData._serverResponse;
    var hints = (serverResponse.mfaInfo || []).map(function (enrollment) {
      return MultiFactorInfoImpl._fromServerResponse(auth, enrollment);
    });
    _assert(serverResponse.mfaPendingCredential, auth, "internal-error");
    var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
    return new MultiFactorResolverImpl(session, hints, function (assertion) {
      return tslib.__awaiter(_this, void 0, void 0, function () {
        var mfaResponse, idTokenResponse, _a, userCredential;
        return tslib.__generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, assertion._process(auth, session)];
            case 1:
              mfaResponse = _b.sent();
              delete serverResponse.mfaInfo;
              delete serverResponse.mfaPendingCredential;
              idTokenResponse = tslib.__assign(tslib.__assign({}, serverResponse), {
                idToken: mfaResponse.idToken,
                refreshToken: mfaResponse.refreshToken
              });
              _a = error.operationType;
              switch (_a) {
                case "signIn":
                  return [3, 2];
                case "reauthenticate":
                  return [3, 5];
              }
              return [3, 6];
            case 2:
              return [4, UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)];
            case 3:
              userCredential = _b.sent();
              return [4, auth._updateCurrentUser(userCredential.user)];
            case 4:
              _b.sent();
              return [2, userCredential];
            case 5:
              _assert(error.user, auth, "internal-error");
              return [2, UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)];
            case 6:
              _fail(auth, "internal-error");
              _b.label = 7;
            case 7:
              return [2];
          }
        });
      });
    });
  };
  MultiFactorResolverImpl.prototype.resolveSignIn = function (assertionExtern) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var assertion;
      return tslib.__generator(this, function (_a) {
        assertion = assertionExtern;
        return [2, this.signInResolver(assertion)];
      });
    });
  };
  return MultiFactorResolverImpl;
}();
function getMultiFactorResolver(auth, error) {
  var _a;
  var authModular = util.getModularInstance(auth);
  var errorInternal = error;
  _assert(error.customData.operationType, authModular, "argument-error");
  _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error");
  return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function startEnrollTotpMfa(auth, request) {
  return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth, request));
}
function finalizeEnrollTotpMfa(auth, request) {
  return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth, request));
}
function withdrawMfa(auth, request) {
  return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:withdraw", _addTidIfNecessary(auth, request));
}
var MultiFactorUserImpl = function () {
  function MultiFactorUserImpl(user) {
    var _this = this;
    this.user = user;
    this.enrolledFactors = [];
    user._onReload(function (userInfo) {
      if (userInfo.mfaInfo) {
        _this.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {
          return MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);
        });
      }
    });
  }
  MultiFactorUserImpl._fromUser = function (user) {
    return new MultiFactorUserImpl(user);
  };
  MultiFactorUserImpl.prototype.getSession = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var _a, _b;
      return tslib.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (_a = MultiFactorSessionImpl)._fromIdtoken;
            return [4, this.user.getIdToken()];
          case 1:
            return [2, _b.apply(_a, [_c.sent(), this.user.auth])];
        }
      });
    });
  };
  MultiFactorUserImpl.prototype.enroll = function (assertionExtern, displayName) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var assertion, session, finalizeMfaResponse;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            assertion = assertionExtern;
            return [4, this.getSession()];
          case 1:
            session = _a.sent();
            return [4, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName))];
          case 2:
            finalizeMfaResponse = _a.sent();
            return [4, this.user._updateTokensIfNecessary(finalizeMfaResponse)];
          case 3:
            _a.sent();
            return [2, this.user.reload()];
        }
      });
    });
  };
  MultiFactorUserImpl.prototype.unenroll = function (infoOrUid) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var mfaEnrollmentId, idToken, idTokenResponse, e_1;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
            return [4, this.user.getIdToken()];
          case 1:
            idToken = _a.sent();
            _a.label = 2;
          case 2:
            _a.trys.push([2, 6,, 7]);
            return [4, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
              idToken: idToken,
              mfaEnrollmentId: mfaEnrollmentId
            }))];
          case 3:
            idTokenResponse = _a.sent();
            this.enrolledFactors = this.enrolledFactors.filter(function (_a) {
              var uid = _a.uid;
              return uid !== mfaEnrollmentId;
            });
            return [4, this.user._updateTokensIfNecessary(idTokenResponse)];
          case 4:
            _a.sent();
            return [4, this.user.reload()];
          case 5:
            _a.sent();
            return [3, 7];
          case 6:
            e_1 = _a.sent();
            throw e_1;
          case 7:
            return [2];
        }
      });
    });
  };
  return MultiFactorUserImpl;
}();
var multiFactorUserCache = new WeakMap();
function multiFactor(user) {
  var userModular = util.getModularInstance(user);
  if (!multiFactorUserCache.has(userModular)) {
    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
  }
  return multiFactorUserCache.get(userModular);
}
var name = "@firebase/auth";
var version = "0.23.1";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AuthInterop = function () {
  function AuthInterop(auth) {
    this.auth = auth;
    this.internalListeners = new Map();
  }
  AuthInterop.prototype.getUid = function () {
    var _a;
    this.assertAuthConfigured();
    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
  };
  AuthInterop.prototype.getToken = function (forceRefresh) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var accessToken;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertAuthConfigured();
            return [4, this.auth._initializationPromise];
          case 1:
            _a.sent();
            if (!this.auth.currentUser) {
              return [2, null];
            }
            return [4, this.auth.currentUser.getIdToken(forceRefresh)];
          case 2:
            accessToken = _a.sent();
            return [2, {
              accessToken: accessToken
            }];
        }
      });
    });
  };
  AuthInterop.prototype.addAuthTokenListener = function (listener) {
    this.assertAuthConfigured();
    if (this.internalListeners.has(listener)) {
      return;
    }
    var unsubscribe = this.auth.onIdTokenChanged(function (user) {
      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(listener, unsubscribe);
    this.updateProactiveRefresh();
  };
  AuthInterop.prototype.removeAuthTokenListener = function (listener) {
    this.assertAuthConfigured();
    var unsubscribe = this.internalListeners.get(listener);
    if (!unsubscribe) {
      return;
    }
    this.internalListeners.delete(listener);
    unsubscribe();
    this.updateProactiveRefresh();
  };
  AuthInterop.prototype.assertAuthConfigured = function () {
    _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth");
  };
  AuthInterop.prototype.updateProactiveRefresh = function () {
    if (this.internalListeners.size > 0) {
      this.auth._startProactiveRefresh();
    } else {
      this.auth._stopProactiveRefresh();
    }
  };
  return AuthInterop;
}();

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getVersionForPlatform(clientPlatform) {
  switch (clientPlatform) {
    case "Node":
      return 'node';
    case "ReactNative":
      return 'rn';
    case "Worker":
      return 'webworker';
    case "Cordova":
      return 'cordova';
    default:
      return undefined;
  }
}
function registerAuth(clientPlatform) {
  app._registerComponent(new component.Component("auth", function (container, _a) {
    var deps = _a.options;
    var app = container.getProvider('app').getImmediate();
    var heartbeatServiceProvider = container.getProvider('heartbeat');
    var appCheckServiceProvider = container.getProvider('app-check-internal');
    var _b = app.options,
      apiKey = _b.apiKey,
      authDomain = _b.authDomain;
    _assert(apiKey && !apiKey.includes(':'), "invalid-api-key", {
      appName: app.name
    });
    _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), "argument-error", {
      appName: app.name
    });
    var config = {
      apiKey: apiKey,
      authDomain: authDomain,
      clientPlatform: clientPlatform,
      apiHost: "identitytoolkit.googleapis.com",
      tokenApiHost: "securetoken.googleapis.com",
      apiScheme: "https",
      sdkClientVersion: _getClientVersion(clientPlatform)
    };
    var authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
    _initializeAuthInstance(authInstance, deps);
    return authInstance;
  }, "PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {
    var authInternalProvider = container.getProvider("auth-internal");
    authInternalProvider.initialize();
  }));
  app._registerComponent(new component.Component("auth-internal", function (container) {
    var auth = _castAuth(container.getProvider("auth").getImmediate());
    return function (auth) {
      return new AuthInterop(auth);
    }(auth);
  }, "PRIVATE").setInstantiationMode("EXPLICIT"));
  app.registerVersion(name, version, getVersionForPlatform(clientPlatform));
  app.registerVersion(name, version, 'cjs5');
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
FetchProvider.initialize(fetchImpl__namespace.default, fetchImpl__namespace.Headers, fetchImpl__namespace.Response);
function getAuth(app$1) {
  if (app$1 === void 0) {
    app$1 = app.getApp();
  }
  var provider = app._getProvider(app$1, 'auth');
  if (provider.isInitialized()) {
    return provider.getImmediate();
  }
  var auth = initializeAuth(app$1);
  var authEmulatorHost = util.getDefaultEmulatorHost('auth');
  if (authEmulatorHost) {
    connectAuthEmulator(auth, "http://".concat(authEmulatorHost));
  }
  return auth;
}
registerAuth("Node");
var NOT_AVAILABLE_ERROR = _createError("operation-not-supported-in-this-environment");
function fail() {
  return tslib.__awaiter(this, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      throw NOT_AVAILABLE_ERROR;
    });
  });
}
var FailClass = function () {
  function FailClass() {
    throw NOT_AVAILABLE_ERROR;
  }
  return FailClass;
}();
var browserLocalPersistence = inMemoryPersistence;
var browserSessionPersistence = inMemoryPersistence;
var indexedDBLocalPersistence = inMemoryPersistence;
var browserPopupRedirectResolver = NOT_AVAILABLE_ERROR;
var PhoneAuthProvider = FailClass;
var signInWithPhoneNumber = fail;
var linkWithPhoneNumber = fail;
var reauthenticateWithPhoneNumber = fail;
var updatePhoneNumber = fail;
var signInWithPopup = fail;
var linkWithPopup = fail;
var reauthenticateWithPopup = fail;
var signInWithRedirect = fail;
var linkWithRedirect = fail;
var reauthenticateWithRedirect = fail;
var getRedirectResult = fail;
var RecaptchaVerifier = FailClass;
var PhoneMultiFactorGenerator = function () {
  function PhoneMultiFactorGenerator() {}
  PhoneMultiFactorGenerator.assertion = function () {
    throw NOT_AVAILABLE_ERROR;
  };
  return PhoneMultiFactorGenerator;
}();
AuthImpl.prototype.setPersistence = function () {
  return tslib.__awaiter(void 0, void 0, void 0, function () {
    return tslib.__generator(this, function (_a) {
      return [2];
    });
  });
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function finalizeSignInTotpMfa(auth, request) {
  return _performApiRequest(auth, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth, request));
}
var MultiFactorAssertionImpl = function () {
  function MultiFactorAssertionImpl(factorId) {
    this.factorId = factorId;
  }
  MultiFactorAssertionImpl.prototype._process = function (auth, session, displayName) {
    switch (session.type) {
      case "enroll":
        return this._finalizeEnroll(auth, session.credential, displayName);
      case "signin":
        return this._finalizeSignIn(auth, session.credential);
      default:
        return debugFail('unexpected MultiFactorSessionType');
    }
  };
  return MultiFactorAssertionImpl;
}();
var TotpMultiFactorGenerator = function () {
  function TotpMultiFactorGenerator() {}
  TotpMultiFactorGenerator.assertionForEnrollment = function (secret, oneTimePassword) {
    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
  };
  TotpMultiFactorGenerator.assertionForSignIn = function (enrollmentId, oneTimePassword) {
    return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
  };
  TotpMultiFactorGenerator.generateSecret = function (session) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var mfaSession, response;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            mfaSession = session;
            _assert(typeof mfaSession.auth !== 'undefined', "internal-error");
            return [4, startEnrollTotpMfa(mfaSession.auth, {
              idToken: mfaSession.credential,
              totpEnrollmentInfo: {}
            })];
          case 1:
            response = _a.sent();
            return [2, TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.auth)];
        }
      });
    });
  };
  TotpMultiFactorGenerator.FACTOR_ID = "totp";
  return TotpMultiFactorGenerator;
}();
var TotpMultiFactorAssertionImpl = function (_super) {
  tslib.__extends(TotpMultiFactorAssertionImpl, _super);
  function TotpMultiFactorAssertionImpl(otp, enrollmentId, secret) {
    var _this = _super.call(this, "totp") || this;
    _this.otp = otp;
    _this.enrollmentId = enrollmentId;
    _this.secret = secret;
    return _this;
  }
  TotpMultiFactorAssertionImpl._fromSecret = function (secret, otp) {
    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);
  };
  TotpMultiFactorAssertionImpl._fromEnrollmentId = function (enrollmentId, otp) {
    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);
  };
  TotpMultiFactorAssertionImpl.prototype._finalizeEnroll = function (auth, idToken, displayName) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        _assert(typeof this.secret !== 'undefined', auth, "argument-error");
        return [2, finalizeEnrollTotpMfa(auth, {
          idToken: idToken,
          displayName: displayName,
          totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        })];
      });
    });
  };
  TotpMultiFactorAssertionImpl.prototype._finalizeSignIn = function (auth, mfaPendingCredential) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var totpVerificationInfo;
      return tslib.__generator(this, function (_a) {
        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, "argument-error");
        totpVerificationInfo = {
          verificationCode: this.otp
        };
        return [2, finalizeSignInTotpMfa(auth, {
          mfaPendingCredential: mfaPendingCredential,
          mfaEnrollmentId: this.enrollmentId,
          totpVerificationInfo: totpVerificationInfo
        })];
      });
    });
  };
  return TotpMultiFactorAssertionImpl;
}(MultiFactorAssertionImpl);
var TotpSecret = function () {
  function TotpSecret(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {
    this.sessionInfo = sessionInfo;
    this.auth = auth;
    this.secretKey = secretKey;
    this.hashingAlgorithm = hashingAlgorithm;
    this.codeLength = codeLength;
    this.codeIntervalSeconds = codeIntervalSeconds;
    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
  }
  TotpSecret._fromStartTotpMfaEnrollmentResponse = function (response, auth) {
    return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);
  };
  TotpSecret.prototype._makeTotpVerificationInfo = function (otp) {
    return {
      sessionInfo: this.sessionInfo,
      verificationCode: otp
    };
  };
  TotpSecret.prototype.generateQrCodeUrl = function (accountName, issuer) {
    var _a;
    var useDefaults = false;
    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {
      useDefaults = true;
    }
    if (useDefaults) {
      if (_isEmptyString(accountName)) {
        accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';
      }
      if (_isEmptyString(issuer)) {
        issuer = this.auth.name;
      }
    }
    return "otpauth://totp/".concat(issuer, ":").concat(accountName, "?secret=").concat(this.secretKey, "&issuer=").concat(issuer, "&algorithm=").concat(this.hashingAlgorithm, "&digits=").concat(this.codeLength);
  };
  return TotpSecret;
}();
function _isEmptyString(input) {
  return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;
}
exports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;
exports.ActionCodeOperation = ActionCodeOperation;
exports.ActionCodeURL = ActionCodeURL;
exports.AuthCredential = AuthCredential;
exports.AuthImpl = AuthImpl;
exports.BaseOAuthProvider = BaseOAuthProvider;
exports.EmailAuthCredential = EmailAuthCredential;
exports.EmailAuthProvider = EmailAuthProvider;
exports.FacebookAuthProvider = FacebookAuthProvider;
exports.FactorId = FactorId;
exports.FederatedAuthProvider = FederatedAuthProvider;
exports.FetchProvider = FetchProvider;
exports.GithubAuthProvider = GithubAuthProvider;
exports.GoogleAuthProvider = GoogleAuthProvider;
exports.OAuthCredential = OAuthCredential;
exports.OAuthProvider = OAuthProvider;
exports.OperationType = OperationType;
exports.PhoneAuthCredential = PhoneAuthCredential;
exports.PhoneAuthProvider = PhoneAuthProvider;
exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;
exports.ProviderId = ProviderId;
exports.RecaptchaVerifier = RecaptchaVerifier;
exports.SAMLAuthCredential = SAMLAuthCredential;
exports.SAMLAuthProvider = SAMLAuthProvider;
exports.SignInMethod = SignInMethod;
exports.TotpMultiFactorGenerator = TotpMultiFactorGenerator;
exports.TotpSecret = TotpSecret;
exports.TwitterAuthProvider = TwitterAuthProvider;
exports.UserImpl = UserImpl;
exports._assert = _assert;
exports._castAuth = _castAuth;
exports._createError = _createError;
exports._emulatorUrl = _emulatorUrl;
exports._fail = _fail;
exports._getClientVersion = _getClientVersion;
exports._getInstance = _getInstance;
exports._isAndroid = _isAndroid;
exports._isIE10 = _isIE10;
exports._isIOS = _isIOS;
exports._isIOS7Or8 = _isIOS7Or8;
exports._isIframe = _isIframe;
exports._isMobileBrowser = _isMobileBrowser;
exports._isSafari = _isSafari;
exports._link = _link;
exports._performApiRequest = _performApiRequest;
exports._persistenceKeyName = _persistenceKeyName;
exports._reauthenticate = _reauthenticate;
exports._signInWithCredential = _signInWithCredential;
exports.applyActionCode = applyActionCode;
exports.beforeAuthStateChanged = beforeAuthStateChanged;
exports.browserLocalPersistence = browserLocalPersistence;
exports.browserPopupRedirectResolver = browserPopupRedirectResolver;
exports.browserSessionPersistence = browserSessionPersistence;
exports.checkActionCode = checkActionCode;
exports.confirmPasswordReset = confirmPasswordReset;
exports.connectAuthEmulator = connectAuthEmulator;
exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
exports.debugAssert = debugAssert;
exports.debugErrorMap = debugErrorMap;
exports.deleteUser = deleteUser;
exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
exports.getAdditionalUserInfo = getAdditionalUserInfo;
exports.getAuth = getAuth;
exports.getIdToken = getIdToken;
exports.getIdTokenResult = getIdTokenResult;
exports.getMultiFactorResolver = getMultiFactorResolver;
exports.getRedirectResult = getRedirectResult;
exports.inMemoryPersistence = inMemoryPersistence;
exports.indexedDBLocalPersistence = indexedDBLocalPersistence;
exports.initializeAuth = initializeAuth;
exports.initializeRecaptchaConfig = initializeRecaptchaConfig;
exports.isSignInWithEmailLink = isSignInWithEmailLink;
exports.linkWithCredential = linkWithCredential;
exports.linkWithPhoneNumber = linkWithPhoneNumber;
exports.linkWithPopup = linkWithPopup;
exports.linkWithRedirect = linkWithRedirect;
exports.multiFactor = multiFactor;
exports.onAuthStateChanged = onAuthStateChanged;
exports.onIdTokenChanged = onIdTokenChanged;
exports.parseActionCodeURL = parseActionCodeURL;
exports.prodErrorMap = prodErrorMap;
exports.reauthenticateWithCredential = reauthenticateWithCredential;
exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;
exports.reauthenticateWithPopup = reauthenticateWithPopup;
exports.reauthenticateWithRedirect = reauthenticateWithRedirect;
exports.reload = reload;
exports.sendEmailVerification = sendEmailVerification;
exports.sendPasswordResetEmail = sendPasswordResetEmail;
exports.sendSignInLinkToEmail = sendSignInLinkToEmail;
exports.setPersistence = setPersistence;
exports.signInAnonymously = signInAnonymously;
exports.signInWithCredential = signInWithCredential;
exports.signInWithCustomToken = signInWithCustomToken;
exports.signInWithEmailAndPassword = signInWithEmailAndPassword;
exports.signInWithEmailLink = signInWithEmailLink;
exports.signInWithIdp = signInWithIdp;
exports.signInWithPhoneNumber = signInWithPhoneNumber;
exports.signInWithPopup = signInWithPopup;
exports.signInWithRedirect = signInWithRedirect;
exports.signOut = signOut;
exports.unlink = unlink;
exports.updateCurrentUser = updateCurrentUser;
exports.updateEmail = updateEmail;
exports.updatePassword = updatePassword;
exports.updatePhoneNumber = updatePhoneNumber;
exports.updateProfile = updateProfile;
exports.useDeviceLanguage = useDeviceLanguage;
exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
exports.verifyPasswordResetCode = verifyPasswordResetCode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,