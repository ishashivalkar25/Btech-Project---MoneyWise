4ac455b5232332d02f34a5ab6ff258c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimation;
var _flattenStyle = _interopRequireDefault(require("./flattenStyle"));
function compareNumbers(a, b) {
  return a - b;
}
function notNull(value) {
  return value !== null;
}
function parsePosition(value) {
  if (value === 'from') {
    return 0;
  }
  if (value === 'to') {
    return 1;
  }
  var parsed = parseFloat(value, 10);
  if (Number.isNaN(parsed) || parsed < 0 || parsed > 1) {
    return null;
  }
  return parsed;
}
var cache = {};
function createAnimation(definition) {
  var cacheKey = JSON.stringify(definition);
  if (cache[cacheKey]) {
    return cache[cacheKey];
  }
  var positions = Object.keys(definition).map(parsePosition).filter(notNull);
  positions.sort(compareNumbers);
  if (positions.length < 2) {
    throw new Error('Animation definitions must have at least two values.');
  }
  var compiled = {};
  if (definition.easing) {
    compiled.easing = definition.easing;
  }
  if (definition.style) {
    compiled.style = definition.style;
  }
  var _loop = function _loop() {
    var position = positions[i];
    var keyframe = definition[position];
    if (!keyframe) {
      if (position === 0) {
        keyframe = definition.from;
      } else if (position === 1) {
        keyframe = definition.to;
      }
    }
    if (!keyframe) {
      throw new Error('Missing animation keyframe, this should not happen');
    }
    keyframe = (0, _flattenStyle.default)(keyframe);
    Object.keys(keyframe).forEach(function (key) {
      if (!(key in compiled)) {
        compiled[key] = {
          inputRange: [],
          outputRange: []
        };
      }
      compiled[key].inputRange.push(position);
      compiled[key].outputRange.push(keyframe[key]);
    });
  };
  for (var i = 0; i < positions.length; i += 1) {
    _loop();
  }
  cache[cacheKey] = compiled;
  return compiled;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxhdHRlblN0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJjb21wYXJlTnVtYmVycyIsImEiLCJiIiwibm90TnVsbCIsInZhbHVlIiwicGFyc2VQb3NpdGlvbiIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJpc05hTiIsImNhY2hlIiwiY3JlYXRlQW5pbWF0aW9uIiwiZGVmaW5pdGlvbiIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc2l0aW9ucyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJmaWx0ZXIiLCJzb3J0IiwibGVuZ3RoIiwiRXJyb3IiLCJjb21waWxlZCIsImVhc2luZyIsInN0eWxlIiwiX2xvb3AiLCJwb3NpdGlvbiIsImkiLCJrZXlmcmFtZSIsImZyb20iLCJ0byIsImZsYXR0ZW5TdHlsZSIsImZvckVhY2giLCJrZXkiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJwdXNoIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmbGF0dGVuU3R5bGUgZnJvbSAnLi9mbGF0dGVuU3R5bGUnO1xuXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gbm90TnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUG9zaXRpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSAnZnJvbScpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAodmFsdWUgPT09ICd0bycpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjb25zdCBwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4ocGFyc2VkKSB8fCBwYXJzZWQgPCAwIHx8IHBhcnNlZCA+IDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBbmltYXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBjYWNoZUtleSA9IEpTT04uc3RyaW5naWZ5KGRlZmluaXRpb24pO1xuICBpZiAoY2FjaGVbY2FjaGVLZXldKSB7XG4gICAgcmV0dXJuIGNhY2hlW2NhY2hlS2V5XTtcbiAgfVxuXG4gIGNvbnN0IHBvc2l0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmluaXRpb24pXG4gICAgLm1hcChwYXJzZVBvc2l0aW9uKVxuICAgIC5maWx0ZXIobm90TnVsbCk7XG4gIHBvc2l0aW9ucy5zb3J0KGNvbXBhcmVOdW1iZXJzKTtcblxuICBpZiAocG9zaXRpb25zLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuaW1hdGlvbiBkZWZpbml0aW9ucyBtdXN0IGhhdmUgYXQgbGVhc3QgdHdvIHZhbHVlcy4nKTtcbiAgfVxuXG4gIGNvbnN0IGNvbXBpbGVkID0ge307XG4gIGlmIChkZWZpbml0aW9uLmVhc2luZykge1xuICAgIGNvbXBpbGVkLmVhc2luZyA9IGRlZmluaXRpb24uZWFzaW5nO1xuICB9XG4gIGlmIChkZWZpbml0aW9uLnN0eWxlKSB7XG4gICAgY29tcGlsZWQuc3R5bGUgPSBkZWZpbml0aW9uLnN0eWxlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uc1tpXTtcbiAgICBsZXQga2V5ZnJhbWUgPSBkZWZpbml0aW9uW3Bvc2l0aW9uXTtcbiAgICBpZiAoIWtleWZyYW1lKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgICAga2V5ZnJhbWUgPSBkZWZpbml0aW9uLmZyb207XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAxKSB7XG4gICAgICAgIGtleWZyYW1lID0gZGVmaW5pdGlvbi50bztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFrZXlmcmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGFuaW1hdGlvbiBrZXlmcmFtZSwgdGhpcyBzaG91bGQgbm90IGhhcHBlbicpO1xuICAgIH1cblxuICAgIGtleWZyYW1lID0gZmxhdHRlblN0eWxlKGtleWZyYW1lKTtcbiAgICBPYmplY3Qua2V5cyhrZXlmcmFtZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCEoa2V5IGluIGNvbXBpbGVkKSkge1xuICAgICAgICBjb21waWxlZFtrZXldID0ge1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFtdLFxuICAgICAgICAgIG91dHB1dFJhbmdlOiBbXSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbXBpbGVkW2tleV0uaW5wdXRSYW5nZS5wdXNoKHBvc2l0aW9uKTtcbiAgICAgIGNvbXBpbGVkW2tleV0ub3V0cHV0UmFuZ2UucHVzaChrZXlmcmFtZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhY2hlW2NhY2hlS2V5XSA9IGNvbXBpbGVkO1xuXG4gIHJldHVybiBjb21waWxlZDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxTQUFTQyxjQUFjQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUM1QixPQUFPRCxDQUFDLEdBQUdDLENBQUM7QUFDZDtBQUVBLFNBQVNDLE9BQU9BLENBQUNDLEtBQUssRUFBRTtFQUN0QixPQUFPQSxLQUFLLEtBQUssSUFBSTtBQUN2QjtBQUVBLFNBQVNDLGFBQWFBLENBQUNELEtBQUssRUFBRTtFQUM1QixJQUFJQSxLQUFLLEtBQUssTUFBTSxFQUFFO0lBQ3BCLE9BQU8sQ0FBQztFQUNWO0VBQ0EsSUFBSUEsS0FBSyxLQUFLLElBQUksRUFBRTtJQUNsQixPQUFPLENBQUM7RUFDVjtFQUNBLElBQU1FLE1BQU0sR0FB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