46af0986bf2086275c9ce2144d4b14e1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    global.alert = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      queryByPlaceholderText = _render.queryByPlaceholderText,
      getByTestId = _render.getByTestId;
    var emailInput = queryByPlaceholderText('Email / Username');
    var passwordInput = queryByPlaceholderText('Password');
    expect(emailInput).toBeTruthy();
    expect(passwordInput).toBeTruthy();
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByTestId('LoginBtn');
    _reactNative.fireEvent.press(loginButton);
    yield function () {
      expect(navigationMock.replace).toHaveBeenCalledWith("Roo");
    };
    expect(global.alert).not.toHaveBeenCalled();
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText;
    var forgotPasswordButton = getByText('Forgot Password ?');
    _reactNative.fireEvent.press(forgotPasswordButton);
    yield function () {
      expect(navigationMock.navigate).toHaveBeenCalledWith("Sign Up");
    };
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsImdsb2JhbCIsImFsZXJ0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIm5hdmlnYXRpb24iLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXN0SWQiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwibG9naW5CdXR0b24iLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXIyIiwiZ2V0QnlUZXh0IiwiZm9yZ290UGFzc3dvcmRCdXR0b24iXSwic291cmNlcyI6WyJMb2dpbi10ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBMb2dpbiBmcm9tICcuLi9Db21wb25lbnRzL0xvZ2luJztcclxuXHJcbmRlc2NyaWJlKCdMb2dpbicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxvZ2luIHdpdGggdmFsaWQgY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XHJcbiAgICAgICAgICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBNb2NrIHRoZSBhbGVydCBmdW5jdGlvblxyXG4gICAgICAgIGdsb2JhbC5hbGVydCA9IGplc3QuZm4oKTtcclxuXHJcbiAgICAgICAgY29uc3QgeyBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICAgICAgICA8TG9naW4gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gRmlsbCBpbiB0aGUgbG9naW4gZm9ybSBmaWVsZHNcclxuICAgICAgICBjb25zdCBlbWFpbElucHV0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgnRW1haWwgLyBVc2VybmFtZScpO1xyXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KCdQYXNzd29yZCcpO1xyXG5cclxuICAgICAgICBleHBlY3QoZW1haWxJbnB1dCkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChwYXNzd29yZElucHV0KS50b0JlVHJ1dGh5KCk7XHJcblxyXG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGVtYWlsSW5wdXQsICd0ZXN0QGV4YW1wbGUuY29tJyk7XHJcbiAgICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGFzc3dvcmRJbnB1dCwgJ3Bhc3N3b3JkJyk7XHJcblxyXG5cclxuICAgICAgICAvLyBUcmlnZ2VyIHRoZSBsb2dpbiBhY3Rpb25cclxuICAgICAgICBjb25zdCBsb2dpbkJ1dHRvbiA9IGdldEJ5VGVzdElkKCdMb2dpbkJ0bicpO1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhsb2dpbkJ1dHRvbik7XHJcblxyXG4gICAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBuYXZpZ2F0aW9uIG1ldGhvZCBpcyBjYWxsZWRcclxuICAgICAgICBhd2FpdCAoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgbmF2aWdhdGlvbiBtZXRob2QgaXMgY2FsbGVkXHJcbiAgICAgICAgICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIlJvb1wiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIGFsZXJ0IGZ1bmN0aW9uIHdhcyBub3QgY2FsbGVkXHJcbiAgICAgICAgIGV4cGVjdChnbG9iYWwuYWxlcnQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBmb3Jnb3QgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XHJcbiAgICAgICAgICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz4pO1xyXG5cclxuICAgICAgICAvLyBUcmlnZ2VyIHRoZSBmb3Jnb3QgcGFzc3dvcmQgYWN0aW9uXHJcbiAgICAgICAgY29uc3QgZm9yZ290UGFzc3dvcmRCdXR0b24gPSBnZXRCeVRleHQoJ0ZvcmdvdCBQYXNzd29yZCA/Jyk7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGZvcmdvdFBhc3N3b3JkQnV0dG9uKTtcclxuXHJcbiAgICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIGRpYWxvZyBib3ggdmlzaWJpbGl0eSBzdGF0ZSBpcyB1cGRhdGVkXHJcbiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHlvdSBjYW4gYXNzZXJ0IHRoYXQgdGhlIGRpYWxvZyBib3ggYmVjb21lcyB2aXNpYmxlXHJcbiAgICAgICAgLy8gYnkgY2hlY2tpbmcgZm9yIGl0cyBleGlzdGVuY2Ugb3IgYSBzcGVjaWZpYyBVSSBlbGVtZW50IHdpdGhpbiBpdFxyXG4gICAgICAgIC8vIGV4cGVjdCguLi4pIGFzc2VydGlvbnMgZm9yIGRpYWxvZyBib3ggdmlzaWJpbGl0eVxyXG4gICAgICAgIGF3YWl0ICgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBuYXZpZ2F0aW9uIG1ldGhvZCBpcyBjYWxsZWRcclxuICAgICAgICAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIlNpZ24gVXBcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBtb3JlIHRlc3QgY2FzZXMgZm9yIG90aGVyIHVzZXIgaW50ZXJhY3Rpb25zIGFuZCBlZGdlIGNhc2VzXHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXdDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV4Q0ksUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0VBQ3BCQyxFQUFFLENBQUMsNENBQTRDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ3pELElBQU1DLGNBQWMsR0FBRztNQUNuQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCQyxRQUFRLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFHREUsTUFBTSxDQUFDQyxLQUFLLEdBQUdKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFFeEIsSUFBQUksT0FBQSxHQUFnRCxJQUFBQyxtQkFBTSxFQUNsRCxJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsTUFBQSxDQUFBSyxPQUFLO1FBQUNXLFVBQVUsRUFBRVY7TUFBZSxDQUFFLENBQ3hDLENBQUM7TUFGT1csc0JBQXNCLEdBQUFKLE9BQUEsQ0FBdEJJLHNCQUFzQjtNQUFFQyxXQUFXLEdBQUFMLE9BQUEsQ0FBWEssV0FBVztJQUszQyxJQUFNQyxVQUFVLEdBQUdGLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDO0lBQzdELElBQU1HLGFBQWEsR0FBR0gsc0JBQXNCLENBQUMsVUFBVSxDQUFDO0lBRXhESSxNQUFNLENBQUNGLFVBQVUsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUMvQkQsTUFBTSxDQUFDRCxhQUFhLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFFbENDLHNCQUFTLENBQUNDLFVBQVUsQ0FBQ0wsVUFBVSxFQUFFLGtCQUFrQixDQUFDO0lBQ3BESSxzQkFBUyxDQUFDQyxVQUFVLENBQUNKLGFBQWEsRUFBRSxVQUFVLENBQUM7SUFJL0MsSUFBTUssV0FBVyxHQUFHUCxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQzNDSyxzQkFBUyxDQUFDRyxLQUFLLENBQUNELFdBQVcsQ0FBQztJQUc1QixNQUFPLFlBQU07TUFFVEosTUFBTSxDQUFDZixjQUFjLENBQUNDLE9BQU8sQ0FBQyxDQUFDb0Isb0JBQW9CLENBQUMsS0FBSyxDQUFDO0lBQzlELENBQUM7SUFFQU4sTUFBTSxDQUFDVixNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDZ0IsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2hELENBQUMsRUFBQztFQUVGMUIsRUFBRSxDQUFDLCtCQUErQixNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUM1QyxJQUFNQyxjQUFjLEdBQUc7TUFDbkJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBQXFCLFFBQUEsR0FBc0IsSUFBQWhCLG1CQUFNLEVBQUMsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLE1BQUEsQ0FBQUssT0FBSztRQUFDVyxVQUFVLEVBQUVWO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBM0R5QixTQUFTLEdBQUFELFFBQUEsQ0FBVEMsU0FBUztJQUdqQixJQUFNQyxvQkFBb0IsR0FBR0QsU0FBUyxDQUFDLG1CQUFtQixDQUFDO0lBQzNEUixzQkFBUyxDQUFDRyxLQUFLLENBQUNNLG9CQUFvQixDQUFDO0lBTXJDLE1BQU8sWUFBTTtNQUVUWCxNQUFNLENBQUNmLGNBQWMsQ0FBQ0ksUUFBUSxDQUFDLENBQUNpQixvQkFBb0IsQ0FBQyxTQUFTLENBQUM7SUFDbkUsQ0FBQztFQUVMLENBQUMsRUFBQztBQUdOLENBQUMsQ0FBQyJ9