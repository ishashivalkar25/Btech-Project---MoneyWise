124c9325c8a800b12f5d369d992070b7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _TouchableWithoutFeedback = _interopRequireDefault(require("../../Components/Touchable/TouchableWithoutFeedback"));
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function LogBoxButton(props) {
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    pressed = _React$useState2[0],
    setPressed = _React$useState2[1];
  var backgroundColor = props.backgroundColor;
  if (!backgroundColor) {
    backgroundColor = {
      default: LogBoxStyle.getBackgroundColor(0.95),
      pressed: LogBoxStyle.getBackgroundColor(0.6)
    };
  }
  var content = (0, _jsxRuntime.jsx)(_View.default, {
    style: _StyleSheet.default.compose({
      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default
    }, props.style),
    children: props.children
  });
  return props.onPress == null ? content : (0, _jsxRuntime.jsx)(_TouchableWithoutFeedback.default, {
    hitSlop: props.hitSlop,
    onPress: props.onPress,
    onPressIn: function onPressIn() {
      return setPressed(true);
    },
    onPressOut: function onPressOut() {
      return setPressed(false);
    },
    children: content
  });
}
var _default = LogBoxButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfVmlldyIsIl9TdHlsZVNoZWV0IiwiTG9nQm94U3R5bGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiTG9nQm94QnV0dG9uIiwicHJvcHMiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJwcmVzc2VkIiwic2V0UHJlc3NlZCIsImJhY2tncm91bmRDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsImNvbnRlbnQiLCJqc3giLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJjb21wb3NlIiwiY2hpbGRyZW4iLCJvblByZXNzIiwiaGl0U2xvcCIsIm9uUHJlc3NJbiIsIm9uUHJlc3NPdXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJMb2dCb3hCdXR0b24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtFZGdlSW5zZXRzUHJvcH0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9FZGdlSW5zZXRzUHJvcFR5cGUnO1xuaW1wb3J0IHR5cGUge1ZpZXdTdHlsZVByb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuXG5pbXBvcnQgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayc7XG5pbXBvcnQgVmlldyBmcm9tICcuLi8uLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0ICogYXMgTG9nQm94U3R5bGUgZnJvbSAnLi9Mb2dCb3hTdHlsZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgYmFja2dyb3VuZENvbG9yOiAkUmVhZE9ubHk8e3xcbiAgICBkZWZhdWx0OiBzdHJpbmcsXG4gICAgcHJlc3NlZDogc3RyaW5nLFxuICB8fT4sXG4gIGNoaWxkcmVuPzogUmVhY3QuTm9kZSxcbiAgaGl0U2xvcD86ID9FZGdlSW5zZXRzUHJvcCxcbiAgb25QcmVzcz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG4gIHN0eWxlPzogVmlld1N0eWxlUHJvcCxcbnx9PjtcblxuZnVuY3Rpb24gTG9nQm94QnV0dG9uKHByb3BzOiBQcm9wcyk6IFJlYWN0Lk5vZGUge1xuICBjb25zdCBbcHJlc3NlZCwgc2V0UHJlc3NlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgbGV0IGJhY2tncm91bmRDb2xvciA9IHByb3BzLmJhY2tncm91bmRDb2xvcjtcbiAgaWYgKCFiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSB7XG4gICAgICBkZWZhdWx0OiBMb2dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMC45NSksXG4gICAgICBwcmVzc2VkOiBMb2dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMC42KSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgY29udGVudCA9IChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY29tcG9zZShcbiAgICAgICAge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJlc3NlZFxuICAgICAgICAgICAgPyBiYWNrZ3JvdW5kQ29sb3IucHJlc3NlZFxuICAgICAgICAgICAgOiBiYWNrZ3JvdW5kQ29sb3IuZGVmYXVsdCxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcHMuc3R5bGUsXG4gICAgICApfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1ZpZXc+XG4gICk7XG5cbiAgcmV0dXJuIHByb3BzLm9uUHJlc3MgPT0gbnVsbCA/IChcbiAgICBjb250ZW50XG4gICkgOiAoXG4gICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1xuICAgICAgaGl0U2xvcD17cHJvcHMuaGl0U2xvcH1cbiAgICAgIG9uUHJlc3M9e3Byb3BzLm9uUHJlc3N9XG4gICAgICBvblByZXNzSW49eygpID0+IHNldFByZXNzZWQodHJ1ZSl9XG4gICAgICBvblByZXNzT3V0PXsoKSA9PiBzZXRQcmVzc2VkKGZhbHNlKX0+XG4gICAgICB7Y29udGVudH1cbiAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nQm94QnV0dG9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7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