249e40b9765ee344badf11b3882e18a4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareUIRegistry = void 0;
var _threads = require("../threads");
var _worklet_1814162711565_init_data = {
  code: "function anonymous() {\n  const frameCallbackRegistry = {\n    frameCallbackRegistry: new Map(),\n    activeFrameCallbacks: new Set(),\n    previousFrameTimestamp: null,\n    nextCallId: 0,\n    runCallbacks: function (callId) {\n      var _this = this;\n      const loop = function (timestamp) {\n        if (callId !== _this.nextCallId) {\n          return;\n        }\n        if (_this.previousFrameTimestamp === null) {\n          _this.previousFrameTimestamp = timestamp;\n        }\n        const delta = timestamp - _this.previousFrameTimestamp;\n        _this.activeFrameCallbacks.forEach(function (callbackId) {\n          const callbackDetails = _this.frameCallbackRegistry.get(callbackId);\n          const {\n            startTime: startTime\n          } = callbackDetails;\n          if (startTime === null) {\n            callbackDetails.startTime = timestamp;\n            callbackDetails.callback({\n              timestamp: timestamp,\n              timeSincePreviousFrame: null,\n              timeSinceFirstFrame: 0\n            });\n          } else {\n            callbackDetails.callback({\n              timestamp: timestamp,\n              timeSincePreviousFrame: delta,\n              timeSinceFirstFrame: timestamp - startTime\n            });\n          }\n        });\n        if (_this.activeFrameCallbacks.size > 0) {\n          _this.previousFrameTimestamp = timestamp;\n          requestAnimationFrame(loop);\n        } else {\n          _this.previousFrameTimestamp = null;\n        }\n      };\n      if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {\n        requestAnimationFrame(loop);\n      }\n    },\n    registerFrameCallback: function (callback, callbackId) {\n      this.frameCallbackRegistry.set(callbackId, {\n        callback: callback,\n        startTime: null\n      });\n    },\n    unregisterFrameCallback: function (callbackId) {\n      this.manageStateFrameCallback(callbackId, false);\n      this.frameCallbackRegistry.delete(callbackId);\n    },\n    manageStateFrameCallback: function (callbackId, state) {\n      if (callbackId === -1) {\n        return;\n      }\n      if (state) {\n        this.activeFrameCallbacks.add(callbackId);\n        this.runCallbacks(this.nextCallId);\n      } else {\n        const callback = this.frameCallbackRegistry.get(callbackId);\n        callback.startTime = null;\n        this.activeFrameCallbacks.delete(callbackId);\n        if (this.activeFrameCallbacks.size === 0) {\n          this.nextCallId += 1;\n        }\n      }\n    }\n  };\n  global._frameCallbackRegistry = frameCallbackRegistry;\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\frameCallback\\FrameCallbackRegistryUI.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"frameCallbackRegistry\",\"Map\",\"activeFrameCallbacks\",\"Set\",\"previousFrameTimestamp\",\"nextCallId\",\"runCallbacks\",\"callId\",\"_this\",\"loop\",\"timestamp\",\"delta\",\"forEach\",\"callbackId\",\"callbackDetails\",\"get\",\"startTime\",\"callback\",\"timeSincePreviousFrame\",\"timeSinceFirstFrame\",\"size\",\"requestAnimationFrame\",\"registerFrameCallback\",\"set\",\"unregisterFrameCallback\",\"manageStateFrameCallback\",\"delete\",\"state\",\"add\",\"global\",\"_frameCallbackRegistry\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/frameCallback/FrameCallbackRegistryUI.js\"],\"mappings\":\"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\"}"
};
var prepareUIRegistry = (0, _threads.runOnUIImmediately)(function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f() {
    var frameCallbackRegistry = {
      frameCallbackRegistry: new Map(),
      activeFrameCallbacks: new Set(),
      previousFrameTimestamp: null,
      nextCallId: 0,
      runCallbacks: function runCallbacks(callId) {
        var _this = this;
        var loop = function loop(timestamp) {
          if (callId !== _this.nextCallId) {
            return;
          }
          if (_this.previousFrameTimestamp === null) {
            _this.previousFrameTimestamp = timestamp;
          }
          var delta = timestamp - _this.previousFrameTimestamp;
          _this.activeFrameCallbacks.forEach(function (callbackId) {
            var callbackDetails = _this.frameCallbackRegistry.get(callbackId);
            var startTime = callbackDetails.startTime;
            if (startTime === null) {
              callbackDetails.startTime = timestamp;
              callbackDetails.callback({
                timestamp: timestamp,
                timeSincePreviousFrame: null,
                timeSinceFirstFrame: 0
              });
            } else {
              callbackDetails.callback({
                timestamp: timestamp,
                timeSincePreviousFrame: delta,
                timeSinceFirstFrame: timestamp - startTime
              });
            }
          });
          if (_this.activeFrameCallbacks.size > 0) {
            _this.previousFrameTimestamp = timestamp;
            requestAnimationFrame(loop);
          } else {
            _this.previousFrameTimestamp = null;
          }
        };
        if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {
          requestAnimationFrame(loop);
        }
      },
      registerFrameCallback: function registerFrameCallback(callback, callbackId) {
        this.frameCallbackRegistry.set(callbackId, {
          callback: callback,
          startTime: null
        });
      },
      unregisterFrameCallback: function unregisterFrameCallback(callbackId) {
        this.manageStateFrameCallback(callbackId, false);
        this.frameCallbackRegistry.delete(callbackId);
      },
      manageStateFrameCallback: function manageStateFrameCallback(callbackId, state) {
        if (callbackId === -1) {
          return;
        }
        if (state) {
          this.activeFrameCallbacks.add(callbackId);
          this.runCallbacks(this.nextCallId);
        } else {
          var callback = this.frameCallbackRegistry.get(callbackId);
          callback.startTime = null;
          this.activeFrameCallbacks.delete(callbackId);
          if (this.activeFrameCallbacks.size === 0) {
            this.nextCallId += 1;
          }
        }
      }
    };
    global._frameCallbackRegistry = frameCallbackRegistry;
  };
  _f._closure = {};
  _f.__initData = _worklet_1814162711565_init_data;
  _f.__workletHash = 1814162711565;
  _f.__stackDetails = _e;
  _f.__version = "3.1.0";
  return _f;
}());
exports.prepareUIRegistry = prepareUIRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,