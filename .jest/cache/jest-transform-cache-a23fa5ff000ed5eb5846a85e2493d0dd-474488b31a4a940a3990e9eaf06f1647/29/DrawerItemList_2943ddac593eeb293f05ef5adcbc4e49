c4fb7f8f2015ed33af519e416efa1ab5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DrawerItemList;
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _DrawerItem = _interopRequireDefault(require("./DrawerItem"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function DrawerItemList(_ref) {
  var state = _ref.state,
    navigation = _ref.navigation,
    descriptors = _ref.descriptors;
  var buildLink = (0, _native.useLinkBuilder)();
  var focusedRoute = state.routes[state.index];
  var focusedDescriptor = descriptors[focusedRoute.key];
  var focusedOptions = focusedDescriptor.options;
  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,
    drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,
    drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,
    drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;
  return state.routes.map(function (route, i) {
    var focused = i === state.index;
    var onPress = function onPress() {
      var event = navigation.emit({
        type: 'drawerItemPress',
        target: route.key,
        canPreventDefault: true
      });
      if (!event.defaultPrevented) {
        navigation.dispatch(Object.assign({}, focused ? _native.DrawerActions.closeDrawer() : _native.CommonActions.navigate({
          name: route.name,
          merge: true
        }), {
          target: state.key
        }));
      }
    };
    var _descriptors$route$ke = descriptors[route.key].options,
      title = _descriptors$route$ke.title,
      drawerLabel = _descriptors$route$ke.drawerLabel,
      drawerIcon = _descriptors$route$ke.drawerIcon,
      drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,
      drawerItemStyle = _descriptors$route$ke.drawerItemStyle,
      drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;
    return React.createElement(_DrawerItem.default, {
      key: route.key,
      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,
      icon: drawerIcon,
      focused: focused,
      activeTintColor: drawerActiveTintColor,
      inactiveTintColor: drawerInactiveTintColor,
      activeBackgroundColor: drawerActiveBackgroundColor,
      inactiveBackgroundColor: drawerInactiveBackgroundColor,
      allowFontScaling: drawerAllowFontScaling,
      labelStyle: drawerLabelStyle,
      style: drawerItemStyle,
      to: buildLink(route.name, route.params),
      onPress: onPress
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbmF0aXZlIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRHJhd2VySXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiRHJhd2VySXRlbUxpc3QiLCJfcmVmIiwic3RhdGUiLCJuYXZpZ2F0aW9uIiwiZGVzY3JpcHRvcnMiLCJidWlsZExpbmsiLCJ1c2VMaW5rQnVpbGRlciIsImZvY3VzZWRSb3V0ZSIsInJvdXRlcyIsImluZGV4IiwiZm9jdXNlZERlc2NyaXB0b3IiLCJmb2N1c2VkT3B0aW9ucyIsIm9wdGlvbnMiLCJkcmF3ZXJBY3RpdmVUaW50Q29sb3IiLCJkcmF3ZXJJbmFjdGl2ZVRpbnRDb2xvciIsImRyYXdlckFjdGl2ZUJhY2tncm91bmRDb2xvciIsImRyYXdlckluYWN0aXZlQmFja2dyb3VuZENvbG9yIiwibWFwIiwicm91dGUiLCJpIiwiZm9jdXNlZCIsIm9uUHJlc3MiLCJldmVudCIsImVtaXQiLCJ0eXBlIiwidGFyZ2V0IiwiY2FuUHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiZGlzcGF0Y2giLCJhc3NpZ24iLCJEcmF3ZXJBY3Rpb25zIiwiY2xvc2VEcmF3ZXIiLCJDb21tb25BY3Rpb25zIiwibmF2aWdhdGUiLCJuYW1lIiwibWVyZ2UiLCJfZGVzY3JpcHRvcnMkcm91dGUka2UiLCJ0aXRsZSIsImRyYXdlckxhYmVsIiwiZHJhd2VySWNvbiIsImRyYXdlckxhYmVsU3R5bGUiLCJkcmF3ZXJJdGVtU3R5bGUiLCJkcmF3ZXJBbGxvd0ZvbnRTY2FsaW5nIiwiY3JlYXRlRWxlbWVudCIsImxhYmVsIiwidW5kZWZpbmVkIiwiaWNvbiIsImFjdGl2ZVRpbnRDb2xvciIsImluYWN0aXZlVGludENvbG9yIiwiYWN0aXZlQmFja2dyb3VuZENvbG9yIiwiaW5hY3RpdmVCYWNrZ3JvdW5kQ29sb3IiLCJhbGxvd0ZvbnRTY2FsaW5nIiwibGFiZWxTdHlsZSIsInN0eWxlIiwidG8iLCJwYXJhbXMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmlld3MvRHJhd2VySXRlbUxpc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFPQSxJQUFBQyxLQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFHQSxJQUFBRyxXQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBc0MsU0FBQUksdUJBQUFDLEdBQUE7RUFBQSxPQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBQUEsU0FBQUcseUJBQUFDLFdBQUE7RUFBQSxXQUFBQyxPQUFBO0VBQUEsSUFBQUMsaUJBQUEsT0FBQUQsT0FBQTtFQUFBLElBQUFFLGdCQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQTtJQUFBLE9BQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUE7RUFBQSxHQUFBRixXQUFBO0FBQUE7QUFBQSxTQUFBUCx3QkFBQUcsR0FBQSxFQUFBSSxXQUFBO0VBQUEsS0FBQUEsV0FBQSxJQUFBSixHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQTtJQUFBLE9BQUFELEdBQUE7RUFBQTtFQUFBLElBQUFBLEdBQUEsb0JBQUFBLEdB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