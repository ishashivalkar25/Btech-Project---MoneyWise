30928a928859b7f9498d3d535a2ca962
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextHandlerTag = getNextHandlerTag;
exports.registerHandler = registerHandler;
exports.registerOldGestureHandler = registerOldGestureHandler;
exports.unregisterHandler = unregisterHandler;
exports.findHandler = findHandler;
exports.findOldGestureHandler = findOldGestureHandler;
exports.findHandlerByTestID = findHandlerByTestID;
exports.handlerIDToTag = void 0;
var _utils = require("../utils");
var handlerIDToTag = {};
exports.handlerIDToTag = handlerIDToTag;
var gestures = new Map();
var oldHandlers = new Map();
var testIDs = new Map();
var handlerTag = 1;
function getNextHandlerTag() {
  return handlerTag++;
}
function registerHandler(handlerTag, handler, testID) {
  gestures.set(handlerTag, handler);
  if ((0, _utils.isJestEnv)() && testID) {
    testIDs.set(testID, handlerTag);
  }
}
function registerOldGestureHandler(handlerTag, handler) {
  oldHandlers.set(handlerTag, handler);
}
function unregisterHandler(handlerTag, testID) {
  gestures.delete(handlerTag);
  if ((0, _utils.isJestEnv)() && testID) {
    testIDs.delete(testID);
  }
}
function findHandler(handlerTag) {
  return gestures.get(handlerTag);
}
function findOldGestureHandler(handlerTag) {
  return oldHandlers.get(handlerTag);
}
function findHandlerByTestID(testID) {
  var handlerTag = testIDs.get(testID);
  if (handlerTag !== undefined) {
    var _findHandler;
    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;
  }
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiaGFuZGxlcklEVG9UYWciLCJnZXN0dXJlcyIsIk1hcCIsIm9sZEhhbmRsZXJzIiwidGVzdElEcyIsImhhbmRsZXJUYWciLCJnZXROZXh0SGFuZGxlclRhZyIsInJlZ2lzdGVySGFuZGxlciIsImhhbmRsZXIiLCJ0ZXN0SUQiLCJzZXQiLCJpc0plc3RFbnYiLCJyZWdpc3Rlck9sZEdlc3R1cmVIYW5kbGVyIiwidW5yZWdpc3RlckhhbmRsZXIiLCJkZWxldGUiLCJmaW5kSGFuZGxlciIsImdldCIsImZpbmRPbGRHZXN0dXJlSGFuZGxlciIsImZpbmRIYW5kbGVyQnlUZXN0SUQiLCJ1bmRlZmluZWQiLCJfZmluZEhhbmRsZXIiXSwic291cmNlcyI6WyJoYW5kbGVyc1JlZ2lzdHJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSmVzdEVudiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEdlc3R1cmVUeXBlIH0gZnJvbSAnLi9nZXN0dXJlcy9nZXN0dXJlJztcbmltcG9ydCB7IEdlc3R1cmVFdmVudCwgSGFuZGxlclN0YXRlQ2hhbmdlRXZlbnQgfSBmcm9tICcuL2dlc3R1cmVIYW5kbGVyQ29tbW9uJztcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXJJRFRvVGFnOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG5jb25zdCBnZXN0dXJlcyA9IG5ldyBNYXA8bnVtYmVyLCBHZXN0dXJlVHlwZT4oKTtcbmNvbnN0IG9sZEhhbmRsZXJzID0gbmV3IE1hcDxudW1iZXIsIEdlc3R1cmVIYW5kbGVyQ2FsbGJhY2tzPigpO1xuY29uc3QgdGVzdElEcyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbmxldCBoYW5kbGVyVGFnID0gMTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRIYW5kbGVyVGFnKCk6IG51bWJlciB7XG4gIHJldHVybiBoYW5kbGVyVGFnKys7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckhhbmRsZXIoXG4gIGhhbmRsZXJUYWc6IG51bWJlcixcbiAgaGFuZGxlcjogR2VzdHVyZVR5cGUsXG4gIHRlc3RJRD86IHN0cmluZ1xuKSB7XG4gIGdlc3R1cmVzLnNldChoYW5kbGVyVGFnLCBoYW5kbGVyKTtcbiAgaWYgKGlzSmVzdEVudigpICYmIHRlc3RJRCkge1xuICAgIHRlc3RJRHMuc2V0KHRlc3RJRCwgaGFuZGxlclRhZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIoXG4gIGhhbmRsZXJUYWc6IG51bWJlcixcbiAgaGFuZGxlcjogR2VzdHVyZUhhbmRsZXJDYWxsYmFja3Ncbikge1xuICBvbGRIYW5kbGVycy5zZXQoaGFuZGxlclRhZywgaGFuZGxlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVySGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIsIHRlc3RJRD86IHN0cmluZykge1xuICBnZXN0dXJlcy5kZWxldGUoaGFuZGxlclRhZyk7XG4gIGlmIChpc0plc3RFbnYoKSAmJiB0ZXN0SUQpIHtcbiAgICB0ZXN0SURzLmRlbGV0ZSh0ZXN0SUQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIpIHtcbiAgcmV0dXJuIGdlc3R1cmVzLmdldChoYW5kbGVyVGFnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRPbGRHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIpIHtcbiAgcmV0dXJuIG9sZEhhbmRsZXJzLmdldChoYW5kbGVyVGFnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRIYW5kbGVyQnlUZXN0SUQodGVzdElEOiBzdHJpbmcpIHtcbiAgY29uc3QgaGFuZGxlclRhZyA9IHRlc3RJRHMuZ2V0KHRlc3RJRCk7XG4gIGlmIChoYW5kbGVyVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmluZEhhbmRsZXIoaGFuZGxlclRhZykgPz8gbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXN0dXJlSGFuZGxlckNhbGxiYWNrcyB7XG4gIG9uR2VzdHVyZUV2ZW50OiAoZXZlbnQ6IEdlc3R1cmVFdmVudDxhbnk+KSA9PiB2b2lkO1xuICBvbkdlc3R1cmVTdGF0ZUNoYW5nZTogKGV2ZW50OiBIYW5kbGVyU3RhdGVDaGFuZ2VFdmVudDxhbnk+KSA9PiB2b2lkO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBSU8sSUFBTUMsY0FBc0MsR0FBRyxFQUEvQzs7QUFDUCxJQUFNQyxRQUFRLEdBQUcsSUFBSUMsR0FBSixFQUFqQjtBQUNBLElBQU1DLFdBQVcsR0FBRyxJQUFJRCxHQUFKLEVBQXBCO0FBQ0EsSUFBTUUsT0FBTyxHQUFHLElBQUlGLEdBQUosRUFBaEI7QUFFQSxJQUFJRyxVQUFVLEdBQUcsQ0FBakI7QUFFTyxTQUFTQyxpQkFBVEEsQ0FBQSxFQUFxQztFQUMxQyxPQUFPRCxVQUFVLEVBQWpCO0FBQ0Q7QUFFTSxTQUFTRSxlQUFUQSxDQUNMRixVQURLLEVBRUxHLE9BRkssRUFHTEMsTUFISyxFQUlMO0VBQ0FSLFFBQVEsQ0FBQ1MsR0FBVCxDQUFhTCxVQUFiLEVBQXlCRyxPQUF6QjtFQUNBLElBQUksSUFBQVYsTUFBQSxDQUFBYSxTQUFBLE9BQWVGLE1BQW5CLEVBQTJCO0lBQ3pCTCxPQUFPLENBQUNNLEdBQVIsQ0FBWUQsTUFBWixFQUFvQkosVUFBcEI7RUFDRDtBQUNGO0FBRU0sU0FBU08seUJBQVRBLENBQ0xQLFVBREssRUFFTEcsT0FGSyxFQUdMO0VBQ0FMLFdBQVcsQ0FBQ08sR0FBWixDQUFnQkwsVUFBaEIsRUFBNEJHLE9BQTVCO0FBQ0Q7QUFFTSxTQUFTSyxpQkFBVEEsQ0FBMkJSLFVBQTNCLEVBQStDSSxNQUEvQyxFQUFnRTtFQUNyRVIsUUFBUSxDQUFDYSxNQUFULENBQWdCVCxVQUFoQjtFQUNBLElBQUksSUFBQVAsTUFBQSxDQUFBYSxTQUFBLE9BQWVGLE1BQW5CLEVBQTJCO0lBQ3pCTCxPQUFPLENBQUNVLE1BQVIsQ0FBZUwsTUFBZjtFQUNEO0FBQ0Y7QUFFTSxTQUFTTSxXQUFUQSxDQUFxQlYsVUFBckIsRUFBeUM7RUFDOUMsT0FBT0osUUFBUSxDQUFDZSxHQUFULENBQWFYLFVBQWIsQ0FBUDtBQUNEO0FBRU0sU0FBU1kscUJBQVRBLENBQStCWixVQUEvQixFQUFtRDtFQUN4RCxPQUFPRixXQUFXLENBQUNhLEdBQVosQ0FBZ0JYLFVBQWhCLENBQVA7QUFDRDtBQUVNLFNBQVNhLG1CQUFUQSxDQUE2QlQsTUFBN0IsRUFBNkM7RUFDbEQsSUFBTUosVUFBVSxHQUFHRCxPQUFPLENBQUNZLEdBQVIsQ0FBWVAsTUFBWixDQUFuQjtFQUNBLElBQUlKLFVBQVUsS0FBS2MsU0FBbkIsRUFBOEI7SUFBQSxJQUFBQyxZQUFBO0lBQzVCLFFBQUFBLFlBQUEsR0FBT0wsV0FBVyxDQUFDVixVQUFELENBQWxCLGNBQUFlLFlBQUEsY0FBQUEsWUFBQSxHQUFrQyxJQUFsQztFQUNEO0VBQ0QsT0FBTyxJQUFQO0FBQ0QifQ==