440e5f06751d831c1654ae6177516311
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["disabled", "compact", "mode", "dark", "loading", "icon", "buttonColor", "textColor", "children", "accessibilityLabel", "accessibilityHint", "onPress", "onPressIn", "onPressOut", "onLongPress", "delayLongPress", "style", "theme", "uppercase", "contentStyle", "labelStyle", "testID", "accessible"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _theming = require("../../core/theming");
var _hasTouchHandler = _interopRequireDefault(require("../../utils/hasTouchHandler"));
var _ActivityIndicator = _interopRequireDefault(require("../ActivityIndicator"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
var _utils = require("./utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Button = function Button(_ref) {
  var _borderRadius;
  var _StyleSheet$flatten;
  var disabled = _ref.disabled,
    compact = _ref.compact,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'text' : _ref$mode,
    dark = _ref.dark,
    loading = _ref.loading,
    icon = _ref.icon,
    customButtonColor = _ref.buttonColor,
    customTextColor = _ref.textColor,
    children = _ref.children,
    accessibilityLabel = _ref.accessibilityLabel,
    accessibilityHint = _ref.accessibilityHint,
    onPress = _ref.onPress,
    onPressIn = _ref.onPressIn,
    onPressOut = _ref.onPressOut,
    onLongPress = _ref.onLongPress,
    delayLongPress = _ref.delayLongPress,
    style = _ref.style,
    themeOverrides = _ref.theme,
    uppercaseProp = _ref.uppercase,
    contentStyle = _ref.contentStyle,
    labelStyle = _ref.labelStyle,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'button' : _ref$testID,
    accessible = _ref.accessible,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isMode = React.useCallback(function (modeToCompare) {
    return mode === modeToCompare;
  }, [mode]);
  var roundness = theme.roundness,
    isV3 = theme.isV3,
    animation = theme.animation;
  var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
    onPress: onPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    onLongPress: onLongPress
  });
  var isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));
  var initialElevation = isV3 ? 1 : 2;
  var activeElevation = isV3 ? 2 : 8;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isElevationEntitled ? initialElevation : 0)),
    elevation = _React$useRef.current;
  React.useEffect(function () {
    elevation.setValue(isElevationEntitled ? initialElevation : 0);
  }, [isElevationEntitled, elevation, initialElevation]);
  var handlePressIn = function handlePressIn(e) {
    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    if (isV3 ? isMode('elevated') : isMode('contained')) {
      var scale = animation.scale;
      _reactNative.Animated.timing(elevation, {
        toValue: activeElevation,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    }
  };
  var handlePressOut = function handlePressOut(e) {
    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);
    if (isV3 ? isMode('elevated') : isMode('contained')) {
      var scale = animation.scale;
      _reactNative.Animated.timing(elevation, {
        toValue: initialElevation,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  };
  var borderRadius = (isV3 ? 5 : 1) * roundness;
  var iconSize = isV3 ? 18 : 16;
  var _ref2 = (0, _utils.getButtonColors)({
      customButtonColor: customButtonColor,
      customTextColor: customTextColor,
      theme: theme,
      mode: mode,
      disabled: disabled,
      dark: dark
    }),
    backgroundColor = _ref2.backgroundColor,
    borderColor = _ref2.borderColor,
    textColor = _ref2.textColor,
    borderWidth = _ref2.borderWidth;
  var rippleColor = (0, _color.default)(textColor).alpha(0.12).rgb().string();
  var buttonStyle = {
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    borderWidth: borderWidth,
    borderRadius: borderRadius
  };
  var touchableStyle = {
    borderRadius: style ? (_borderRadius = (_reactNative.StyleSheet.flatten(style) || {}).borderRadius) != null ? _borderRadius : borderRadius : borderRadius
  };
  var _ref3 = _reactNative.StyleSheet.flatten(labelStyle) || {},
    customLabelColor = _ref3.color,
    customLabelSize = _ref3.fontSize;
  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
  var textStyle = Object.assign({
    color: textColor
  }, font);
  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? [styles.iconReverse, isV3 && styles["md3IconReverse" + (compact ? 'Compact' : '')], isV3 && isMode('text') && styles["md3IconReverseTextMode" + (compact ? 'Compact' : '')]] : [styles.icon, isV3 && styles["md3Icon" + (compact ? 'Compact' : '')], isV3 && isMode('text') && styles["md3IconTextMode" + (compact ? 'Compact' : '')]];
  return React.createElement(_Surface.default, _extends({}, rest, {
    testID: testID + "-container",
    style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && {
      elevation: elevation
    }]
  }, isV3 && {
    elevation: elevation
  }), React.createElement(_TouchableRipple.default, {
    borderless: true,
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
    delayLongPress: delayLongPress,
    accessibilityLabel: accessibilityLabel,
    accessibilityHint: accessibilityHint,
    accessibilityRole: "button",
    accessibilityState: {
      disabled: disabled
    },
    accessible: accessible,
    disabled: disabled,
    rippleColor: rippleColor,
    style: touchableStyle,
    testID: testID,
    theme: theme
  }, React.createElement(_reactNative.View, {
    style: [styles.content, contentStyle]
  }, icon && loading !== true ? React.createElement(_reactNative.View, {
    style: iconStyle,
    testID: testID + "-icon-container"
  }, React.createElement(_Icon.default, {
    source: icon,
    size: customLabelSize != null ? customLabelSize : iconSize,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor
  })) : null, loading ? React.createElement(_ActivityIndicator.default, {
    size: customLabelSize != null ? customLabelSize : iconSize,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,
    style: iconStyle
  }) : null, React.createElement(_Text.default, {
    variant: "labelLarge",
    selectable: false,
    numberOfLines: 1,
    testID: testID + "-text",
    style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle]
  }, children))));
};
var styles = _reactNative.StyleSheet.create({
  button: {
    minWidth: 64,
    borderStyle: 'solid'
  },
  compact: {
    minWidth: 'auto'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    marginLeft: 12,
    marginRight: -4
  },
  iconReverse: {
    marginRight: 12,
    marginLeft: -4
  },
  md3Icon: {
    marginLeft: 16,
    marginRight: -16
  },
  md3IconCompact: {
    marginLeft: 8,
    marginRight: 0
  },
  md3IconReverse: {
    marginLeft: -16,
    marginRight: 16
  },
  md3IconReverseCompact: {
    marginLeft: 0,
    marginRight: 8
  },
  md3IconTextMode: {
    marginLeft: 12,
    marginRight: -8
  },
  md3IconTextModeCompact: {
    marginLeft: 6,
    marginRight: 0
  },
  md3IconReverseTextMode: {
    marginLeft: -8,
    marginRight: 12
  },
  md3IconReverseTextModeCompact: {
    marginLeft: 0,
    marginRight: 6
  },
  label: {
    textAlign: 'center',
    marginVertical: 9,
    marginHorizontal: 16
  },
  md2Label: {
    letterSpacing: 1
  },
  compactLabel: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  },
  md3Label: {
    marginVertical: 10,
    marginHorizontal: 24
  },
  md3LabelText: {
    marginHorizontal: 12
  },
  md3LabelTextAddons: {
    marginHorizontal: 16
  }
});
var _default = Button;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,