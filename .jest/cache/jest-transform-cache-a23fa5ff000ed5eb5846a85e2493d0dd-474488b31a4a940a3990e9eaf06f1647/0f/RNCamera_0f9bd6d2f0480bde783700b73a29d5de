bb1b79fe4bcfd0c8f0cad8f13a97b33e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Constants = void 0;
exports.hasTorch = hasTorch;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["style"],
  _excluded2 = ["children"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Rationale = _propTypes.default.shape({
  title: _propTypes.default.string.isRequired,
  message: _propTypes.default.string.isRequired,
  buttonPositive: _propTypes.default.string,
  buttonNegative: _propTypes.default.string,
  buttonNeutral: _propTypes.default.string
});
var requestPermissions = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (captureAudio, CameraManager, androidCameraPermissionOptions, androidRecordAudioPermissionOptions) {
    var hasCameraPermissions = false;
    var hasRecordAudioPermissions = false;
    if (_reactNative.Platform.OS === 'ios') {
      hasCameraPermissions = yield CameraManager.checkVideoAuthorizationStatus();
    } else if (_reactNative.Platform.OS === 'android') {
      var cameraPermissionResult = yield _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA, androidCameraPermissionOptions);
      if (typeof cameraPermissionResult === 'boolean') {
        hasCameraPermissions = cameraPermissionResult;
      } else {
        hasCameraPermissions = cameraPermissionResult === _reactNative.PermissionsAndroid.RESULTS.GRANTED;
      }
    } else if (_reactNative.Platform.OS === 'windows') {
      hasCameraPermissions = yield CameraManager.checkMediaCapturePermission();
    }
    if (captureAudio) {
      if (_reactNative.Platform.OS === 'ios') {
        hasRecordAudioPermissions = yield CameraManager.checkRecordAudioAuthorizationStatus();
      } else if (_reactNative.Platform.OS === 'android') {
        if (yield CameraManager.checkIfRecordAudioPermissionsAreDefined()) {
          var audioPermissionResult = yield _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO, androidRecordAudioPermissionOptions);
          if (typeof audioPermissionResult === 'boolean') {
            hasRecordAudioPermissions = audioPermissionResult;
          } else {
            hasRecordAudioPermissions = audioPermissionResult === _reactNative.PermissionsAndroid.RESULTS.GRANTED;
          }
        } else if (__DEV__) {
          console.warn("The 'captureAudio' property set on RNCamera instance but 'RECORD_AUDIO' permissions not defined in the applications 'AndroidManifest.xml'. " + "If you want to record audio you will have to add '<uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>' to your 'AndroidManifest.xml'. " + "Otherwise you should set the 'captureAudio' property on the component instance to 'false'.");
        }
      } else if (_reactNative.Platform.OS === 'windows') {
        hasRecordAudioPermissions = yield CameraManager.checkMediaCapturePermission();
      }
    }
    return {
      hasCameraPermissions: hasCameraPermissions,
      hasRecordAudioPermissions: hasRecordAudioPermissions
    };
  });
  return function requestPermissions(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
var styles = _reactNative.StyleSheet.create({
  authorizationContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  notAuthorizedText: {
    textAlign: 'center',
    fontSize: 16
  }
});
var CameraStatus = {
  READY: 'READY',
  PENDING_AUTHORIZATION: 'PENDING_AUTHORIZATION',
  NOT_AUTHORIZED: 'NOT_AUTHORIZED'
};
var RecordAudioPermissionStatusEnum = {
  AUTHORIZED: 'AUTHORIZED',
  PENDING_AUTHORIZATION: 'PENDING_AUTHORIZATION',
  NOT_AUTHORIZED: 'NOT_AUTHORIZED'
};
var CameraManager = _reactNative.NativeModules.RNCameraManager || _reactNative.NativeModules.RNCameraModule || {
  stubbed: true,
  Type: {
    back: 1
  },
  AutoFocus: {
    on: 1
  },
  FlashMode: {
    off: 1
  },
  WhiteBalance: {},
  BarCodeType: {},
  FaceDetection: {
    fast: 1,
    Mode: {},
    Landmarks: {
      none: 0
    },
    Classifications: {
      none: 0
    }
  },
  GoogleVisionBarcodeDetection: {
    BarcodeType: 0,
    BarcodeMode: 0
  }
};
var EventThrottleMs = 500;
var mapValues = function mapValues(input, mapper) {
  var result = {};
  Object.entries(input).map(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
      key = _ref3[0],
      value = _ref3[1];
    result[key] = mapper(value, key);
  });
  return result;
};
var Camera = function (_React$Component) {
  (0, _inherits2.default)(Camera, _React$Component);
  var _super = _createSuper(Camera);
  function Camera(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Camera);
    _this = _super.call(this, props);
    _this.getSupportedPreviewFpsRange = (0, _asyncToGenerator2.default)(function* () {
      if (_reactNative.Platform.OS === 'android') {
        return yield CameraManager.getSupportedPreviewFpsRange(_this._cameraHandle);
      } else {
        throw new Error('getSupportedPreviewFpsRange is not supported on iOS');
      }
    });
    _this.getAvailablePictureSizes = (0, _asyncToGenerator2.default)(function* () {
      return yield CameraManager.getAvailablePictureSizes(_this.props.ratio, _this._cameraHandle);
    });
    _this._onMountError = function (_ref6) {
      var nativeEvent = _ref6.nativeEvent;
      if (_this.props.onMountError) {
        _this.props.onMountError(nativeEvent);
      }
    };
    _this._onCameraReady = function () {
      if (_this.props.onCameraReady) {
        _this.props.onCameraReady();
      }
    };
    _this._onAudioInterrupted = function () {
      if (_this.props.onAudioInterrupted) {
        _this.props.onAudioInterrupted();
      }
    };
    _this._onTouch = function (_ref7) {
      var nativeEvent = _ref7.nativeEvent;
      if (_this.props.onTap && !nativeEvent.isDoubleTap) {
        _this.props.onTap(nativeEvent.touchOrigin);
      }
      if (_this.props.onDoubleTap && nativeEvent.isDoubleTap) {
        _this.props.onDoubleTap(nativeEvent.touchOrigin);
      }
    };
    _this._onAudioConnected = function () {
      if (_this.props.onAudioConnected) {
        _this.props.onAudioConnected();
      }
    };
    _this._onStatusChange = function () {
      if (_this.props.onStatusChange) {
        _this.props.onStatusChange({
          cameraStatus: _this.getStatus(),
          recordAudioPermissionStatus: _this.state.recordAudioPermissionStatus
        });
      }
    };
    _this._onPictureSaved = function (_ref8) {
      var nativeEvent = _ref8.nativeEvent;
      if (_this.props.onPictureSaved) {
        _this.props.onPictureSaved(nativeEvent);
      }
    };
    _this._onObjectDetected = function (callback) {
      return function (_ref9) {
        var nativeEvent = _ref9.nativeEvent;
        var type = nativeEvent.type;
        if (_this._lastEvents[type] && _this._lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this._lastEvents[type] && new Date() - _this._lastEventsTimes[type] < EventThrottleMs) {
          return;
        }
        if (callback) {
          callback(nativeEvent);
          _this._lastEventsTimes[type] = new Date();
          _this._lastEvents[type] = JSON.stringify(nativeEvent);
        }
      };
    };
    _this._onSubjectAreaChanged = function (e) {
      if (_this.props.onSubjectAreaChanged) {
        _this.props.onSubjectAreaChanged(e);
      }
    };
    _this._setReference = function (ref) {
      if (ref) {
        _this._cameraRef = ref;
        _this._cameraHandle = (0, _reactNative.findNodeHandle)(ref);
      } else {
        _this._cameraRef = null;
        _this._cameraHandle = null;
      }
    };
    _this.getStatus = function () {
      var _this$state = _this.state,
        isAuthorized = _this$state.isAuthorized,
        isAuthorizationChecked = _this$state.isAuthorizationChecked;
      if (isAuthorizationChecked === false) {
        return CameraStatus.PENDING_AUTHORIZATION;
      }
      return isAuthorized ? CameraStatus.READY : CameraStatus.NOT_AUTHORIZED;
    };
    _this.hasFaCC = function () {
      return typeof _this.props.children === 'function';
    };
    _this.renderChildren = function () {
      if (_this.hasFaCC()) {
        return _this.props.children({
          camera: (0, _assertThisInitialized2.default)(_this),
          status: _this.getStatus(),
          recordAudioPermissionStatus: _this.state.recordAudioPermissionStatus
        });
      }
      return _this.props.children;
    };
    _this._lastEvents = {};
    _this._lastEventsTimes = {};
    _this._isMounted = true;
    _this.state = {
      isAuthorized: false,
      isAuthorizationChecked: false,
      recordAudioPermissionStatus: RecordAudioPermissionStatusEnum.PENDING_AUTHORIZATION
    };
    return _this;
  }
  (0, _createClass2.default)(Camera, [{
    key: "takePictureAsync",
    value: function () {
      var _takePictureAsync = (0, _asyncToGenerator2.default)(function* (options) {
        if (!options) {
          options = {};
        }
        if (!options.quality) {
          options.quality = 1;
        }
        if (options.orientation) {
          if (typeof options.orientation !== 'number') {
            var _options = options,
              orientation = _options.orientation;
            options.orientation = CameraManager.Orientation[orientation];
            if (__DEV__) {
              if (typeof options.orientation !== 'number') {
                console.warn("Orientation '" + orientation + "' is invalid.");
              }
            }
          }
        }
        if (options.pauseAfterCapture === undefined) {
          options.pauseAfterCapture = false;
        }
        if (!this._cameraHandle) {
          throw 'Camera handle cannot be null';
        }
        return yield CameraManager.takePicture(options, this._cameraHandle);
      });
      function takePictureAsync(_x5) {
        return _takePictureAsync.apply(this, arguments);
      }
      return takePictureAsync;
    }()
  }, {
    key: "getSupportedRatiosAsync",
    value: function () {
      var _getSupportedRatiosAsync = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === 'android') {
          return yield CameraManager.getSupportedRatios(this._cameraHandle);
        } else {
          throw new Error('Ratio is not supported on iOS');
        }
      });
      function getSupportedRatiosAsync() {
        return _getSupportedRatiosAsync.apply(this, arguments);
      }
      return getSupportedRatiosAsync;
    }()
  }, {
    key: "getCameraIdsAsync",
    value: function () {
      var _getCameraIdsAsync = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === 'android') {
          return yield CameraManager.getCameraIds(this._cameraHandle);
        } else {
          return yield CameraManager.getCameraIds();
        }
      });
      function getCameraIdsAsync() {
        return _getCameraIdsAsync.apply(this, arguments);
      }
      return getCameraIdsAsync;
    }()
  }, {
    key: "recordAsync",
    value: function () {
      var _recordAsync = (0, _asyncToGenerator2.default)(function* (options) {
        if (!options || typeof options !== 'object') {
          options = {};
        } else if (typeof options.quality === 'string') {
          options.quality = Camera.Constants.VideoQuality[options.quality];
        }
        if (options.orientation) {
          if (typeof options.orientation !== 'number') {
            var _options2 = options,
              orientation = _options2.orientation;
            options.orientation = CameraManager.Orientation[orientation];
            if (__DEV__) {
              if (typeof options.orientation !== 'number') {
                console.warn("Orientation '" + orientation + "' is invalid.");
              }
            }
          }
        }
        if (__DEV__) {
          if (options.videoBitrate && typeof options.videoBitrate !== 'number') {
            console.warn('Video Bitrate should be a positive integer');
          }
        }
        var recordAudioPermissionStatus = this.state.recordAudioPermissionStatus;
        var captureAudio = this.props.captureAudio;
        if (!captureAudio || recordAudioPermissionStatus !== RecordAudioPermissionStatusEnum.AUTHORIZED) {
          options.mute = true;
        }
        if (__DEV__) {
          if ((!options.mute || captureAudio) && recordAudioPermissionStatus !== RecordAudioPermissionStatusEnum.AUTHORIZED) {
            console.warn('Recording with audio not possible. Permissions are missing.');
          }
        }
        return yield CameraManager.record(options, this._cameraHandle);
      });
      function recordAsync(_x6) {
        return _recordAsync.apply(this, arguments);
      }
      return recordAsync;
    }()
  }, {
    key: "stopRecording",
    value: function stopRecording() {
      CameraManager.stopRecording(this._cameraHandle);
    }
  }, {
    key: "pauseRecording",
    value: function pauseRecording() {
      CameraManager.pauseRecording(this._cameraHandle);
    }
  }, {
    key: "resumeRecording",
    value: function resumeRecording() {
      CameraManager.resumeRecording(this._cameraHandle);
    }
  }, {
    key: "pausePreview",
    value: function pausePreview() {
      CameraManager.pausePreview(this._cameraHandle);
    }
  }, {
    key: "isRecording",
    value: function isRecording() {
      return CameraManager.isRecording(this._cameraHandle);
    }
  }, {
    key: "resumePreview",
    value: function resumePreview() {
      CameraManager.resumePreview(this._cameraHandle);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "arePermissionsGranted",
    value: function () {
      var _arePermissionsGranted = (0, _asyncToGenerator2.default)(function* () {
        var _this$props = this.props,
          permissionDialogTitle = _this$props.permissionDialogTitle,
          permissionDialogMessage = _this$props.permissionDialogMessage,
          androidCameraPermissionOptions = _this$props.androidCameraPermissionOptions,
          androidRecordAudioPermissionOptions = _this$props.androidRecordAudioPermissionOptions;
        var cameraPermissions = androidCameraPermissionOptions;
        var audioPermissions = androidRecordAudioPermissionOptions;
        if (permissionDialogTitle || permissionDialogMessage) {
          console.warn('permissionDialogTitle and permissionDialogMessage are deprecated. Please use androidCameraPermissionOptions instead.');
          cameraPermissions = Object.assign({}, cameraPermissions, {
            title: permissionDialogTitle,
            message: permissionDialogMessage
          });
          audioPermissions = Object.assign({}, audioPermissions, {
            title: permissionDialogTitle,
            message: permissionDialogMessage
          });
        }
        var _yield$requestPermiss = yield requestPermissions(this.props.captureAudio, CameraManager, cameraPermissions, audioPermissions),
          hasCameraPermissions = _yield$requestPermiss.hasCameraPermissions,
          hasRecordAudioPermissions = _yield$requestPermiss.hasRecordAudioPermissions;
        var recordAudioPermissionStatus = hasRecordAudioPermissions ? RecordAudioPermissionStatusEnum.AUTHORIZED : RecordAudioPermissionStatusEnum.NOT_AUTHORIZED;
        return {
          hasCameraPermissions: hasCameraPermissions,
          recordAudioPermissionStatus: recordAudioPermissionStatus
        };
      });
      function arePermissionsGranted() {
        return _arePermissionsGranted.apply(this, arguments);
      }
      return arePermissionsGranted;
    }()
  }, {
    key: "refreshAuthorizationStatus",
    value: function () {
      var _refreshAuthorizationStatus = (0, _asyncToGenerator2.default)(function* () {
        var _yield$this$arePermis = yield this.arePermissionsGranted(),
          hasCameraPermissions = _yield$this$arePermis.hasCameraPermissions,
          recordAudioPermissionStatus = _yield$this$arePermis.recordAudioPermissionStatus;
        if (this._isMounted === false) {
          return;
        }
        this.setState({
          isAuthorized: hasCameraPermissions,
          isAuthorizationChecked: true,
          recordAudioPermissionStatus: recordAudioPermissionStatus
        });
      });
      function refreshAuthorizationStatus() {
        return _refreshAuthorizationStatus.apply(this, arguments);
      }
      return refreshAuthorizationStatus;
    }()
  }, {
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2.default)(function* () {
        var _yield$this$arePermis2 = yield this.arePermissionsGranted(),
          hasCameraPermissions = _yield$this$arePermis2.hasCameraPermissions,
          recordAudioPermissionStatus = _yield$this$arePermis2.recordAudioPermissionStatus;
        if (this._isMounted === false) {
          return;
        }
        this.setState({
          isAuthorized: hasCameraPermissions,
          isAuthorizationChecked: true,
          recordAudioPermissionStatus: recordAudioPermissionStatus
        }, this._onStatusChange);
      });
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$_convertNativeP = this._convertNativeProps(this.props),
        style = _this$_convertNativeP.style,
        nativeProps = (0, _objectWithoutProperties2.default)(_this$_convertNativeP, _excluded);
      if (this.state.isAuthorized || this.hasFaCC()) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: style,
          children: [(0, _jsxRuntime.jsx)(RNCamera, Object.assign({}, nativeProps, {
            style: _reactNative.StyleSheet.absoluteFill,
            ref: this._setReference,
            onMountError: this._onMountError,
            onCameraReady: this._onObjectDetected(this._onCameraReady),
            onAudioInterrupted: this._onAudioInterrupted,
            onAudioConnected: this._onAudioConnected,
            onGoogleVisionBarcodesDetected: this._onObjectDetected(this.props.onGoogleVisionBarcodesDetected),
            onBarCodeRead: this._onObjectDetected(this.props.onBarCodeRead),
            onTouch: this._onTouch,
            onFacesDetected: this._onObjectDetected(this.props.onFacesDetected),
            onTextRecognized: this._onObjectDetected(this.props.onTextRecognized),
            onPictureSaved: this._onPictureSaved,
            onSubjectAreaChanged: this._onSubjectAreaChanged
          })), this.renderChildren()]
        });
      } else if (!this.state.isAuthorizationChecked) {
        return this.props.pendingAuthorizationView;
      } else {
        return this.props.notAuthorizedView;
      }
    }
  }, {
    key: "_convertNativeProps",
    value: function _convertNativeProps(_ref10) {
      var children = _ref10.children,
        props = (0, _objectWithoutProperties2.default)(_ref10, _excluded2);
      var newProps = mapValues(props, this._convertProp);
      if (props.onBarCodeRead) {
        newProps.barCodeScannerEnabled = true;
      }
      if (props.onGoogleVisionBarcodesDetected) {
        newProps.googleVisionBarcodeDetectorEnabled = true;
      }
      if (props.onFacesDetected) {
        newProps.faceDetectorEnabled = true;
      }
      if (props.onTap || props.onDoubleTap) {
        newProps.touchDetectorEnabled = true;
      }
      if (props.onTextRecognized) {
        newProps.textRecognizerEnabled = true;
      }
      if (_reactNative.Platform.OS === 'ios') {
        delete newProps.ratio;
      }
      return newProps;
    }
  }, {
    key: "_convertProp",
    value: function _convertProp(value, key) {
      if (typeof value === 'string' && Camera.ConversionTables[key]) {
        return Camera.ConversionTables[key][value];
      }
      return value;
    }
  }], [{
    key: "checkIfVideoIsValid",
    value: function () {
      var _checkIfVideoIsValid = (0, _asyncToGenerator2.default)(function* (path) {
        if (_reactNative.Platform.OS === 'android') {
          return yield CameraManager.checkIfVideoIsValid(path);
        } else {
          return true;
        }
      });
      function checkIfVideoIsValid(_x7) {
        return _checkIfVideoIsValid.apply(this, arguments);
      }
      return checkIfVideoIsValid;
    }()
  }]);
  return Camera;
}(_react.default.Component);
exports.default = Camera;
Camera.Constants = {
  Type: CameraManager.Type,
  FlashMode: CameraManager.FlashMode,
  AutoFocus: CameraManager.AutoFocus,
  WhiteBalance: CameraManager.WhiteBalance,
  VideoQuality: CameraManager.VideoQuality,
  ImageType: CameraManager.ImageType,
  VideoCodec: CameraManager.VideoCodec,
  BarCodeType: CameraManager.BarCodeType,
  GoogleVisionBarcodeDetection: CameraManager.GoogleVisionBarcodeDetection,
  FaceDetection: CameraManager.FaceDetection,
  CameraStatus: CameraStatus,
  CaptureTarget: CameraManager.CaptureTarget,
  RecordAudioPermissionStatus: RecordAudioPermissionStatusEnum,
  VideoStabilization: CameraManager.VideoStabilization,
  Orientation: {
    auto: 'auto',
    landscapeLeft: 'landscapeLeft',
    landscapeRight: 'landscapeRight',
    portrait: 'portrait',
    portraitUpsideDown: 'portraitUpsideDown'
  }
};
Camera.ConversionTables = {
  type: CameraManager.Type,
  flashMode: CameraManager.FlashMode,
  exposure: CameraManager.Exposure,
  autoFocus: CameraManager.AutoFocus,
  whiteBalance: CameraManager.WhiteBalance,
  faceDetectionMode: (CameraManager.FaceDetection || {}).Mode,
  faceDetectionLandmarks: (CameraManager.FaceDetection || {}).Landmarks,
  faceDetectionClassifications: (CameraManager.FaceDetection || {}).Classifications,
  googleVisionBarcodeType: (CameraManager.GoogleVisionBarcodeDetection || {}).BarcodeType,
  googleVisionBarcodeMode: (CameraManager.GoogleVisionBarcodeDetection || {}).BarcodeMode,
  videoStabilizationMode: CameraManager.VideoStabilization || {}
};
Camera.propTypes = Object.assign({}, _reactNative.ViewPropTypes, {
  zoom: _propTypes.default.number,
  useNativeZoom: _propTypes.default.bool,
  maxZoom: _propTypes.default.number,
  ratio: _propTypes.default.string,
  focusDepth: _propTypes.default.number,
  onMountError: _propTypes.default.func,
  onCameraReady: _propTypes.default.func,
  onAudioInterrupted: _propTypes.default.func,
  onAudioConnected: _propTypes.default.func,
  onStatusChange: _propTypes.default.func,
  onBarCodeRead: _propTypes.default.func,
  onPictureTaken: _propTypes.default.func,
  onPictureSaved: _propTypes.default.func,
  onRecordingStart: _propTypes.default.func,
  onRecordingEnd: _propTypes.default.func,
  onTap: _propTypes.default.func,
  onDoubleTap: _propTypes.default.func,
  onGoogleVisionBarcodesDetected: _propTypes.default.func,
  onFacesDetected: _propTypes.default.func,
  onTextRecognized: _propTypes.default.func,
  onSubjectAreaChanged: _propTypes.default.func,
  trackingEnabled: _propTypes.default.bool,
  faceDetectionMode: _propTypes.default.number,
  faceDetectionLandmarks: _propTypes.default.number,
  faceDetectionClassifications: _propTypes.default.number,
  barCodeTypes: _propTypes.default.arrayOf(_propTypes.default.string),
  googleVisionBarcodeType: _propTypes.default.number,
  googleVisionBarcodeMode: _propTypes.default.number,
  type: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  cameraId: _propTypes.default.string,
  flashMode: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  exposure: _propTypes.default.number,
  whiteBalance: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape({
    temperature: _propTypes.default.number,
    tint: _propTypes.default.number,
    redGainOffset: _propTypes.default.number,
    greenGainOffset: _propTypes.default.number,
    blueGainOffset: _propTypes.default.number
  })]),
  autoFocus: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
  autoFocusPointOfInterest: _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }),
  permissionDialogTitle: _propTypes.default.string,
  permissionDialogMessage: _propTypes.default.string,
  androidCameraPermissionOptions: Rationale,
  androidRecordAudioPermissionOptions: Rationale,
  notAuthorizedView: _propTypes.default.element,
  pendingAuthorizationView: _propTypes.default.element,
  captureAudio: _propTypes.default.bool,
  keepAudioSession: _propTypes.default.bool,
  useCamera2Api: _propTypes.default.bool,
  playSoundOnCapture: _propTypes.default.bool,
  playSoundOnRecord: _propTypes.default.bool,
  videoStabilizationMode: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  pictureSize: _propTypes.default.string,
  mirrorVideo: _propTypes.default.bool,
  rectOfInterest: _propTypes.default.any,
  defaultVideoQuality: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
});
Camera.defaultProps = {
  zoom: 0,
  useNativeZoom: false,
  maxZoom: 0,
  ratio: '4:3',
  focusDepth: 0,
  type: CameraManager.Type.back,
  cameraId: '',
  autoFocus: CameraManager.AutoFocus.on,
  flashMode: CameraManager.FlashMode.off,
  exposure: -1,
  whiteBalance: CameraManager.WhiteBalance.auto,
  faceDetectionMode: (CameraManager.FaceDetection || {}).fast,
  barCodeTypes: Object.values(CameraManager.BarCodeType),
  googleVisionBarcodeType: ((CameraManager.GoogleVisionBarcodeDetection || {}).BarcodeType || {}).None,
  googleVisionBarcodeMode: ((CameraManager.GoogleVisionBarcodeDetection || {}).BarcodeMode || {}).NORMAL,
  faceDetectionLandmarks: ((CameraManager.FaceDetection || {}).Landmarks || {}).none,
  faceDetectionClassifications: ((CameraManager.FaceDetection || {}).Classifications || {}).none,
  permissionDialogTitle: '',
  permissionDialogMessage: '',
  androidCameraPermissionOptions: null,
  androidRecordAudioPermissionOptions: null,
  notAuthorizedView: (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.authorizationContainer,
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.notAuthorizedText,
      children: "Camera not authorized"
    })
  }),
  pendingAuthorizationView: (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.authorizationContainer,
    children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: "small"
    })
  }),
  captureAudio: true,
  keepAudioSession: false,
  useCamera2Api: false,
  playSoundOnCapture: false,
  playSoundOnRecord: false,
  pictureSize: 'None',
  videoStabilizationMode: 0,
  mirrorVideo: false
};
var Constants = Camera.Constants;
exports.Constants = Constants;
function hasTorch() {
  return CameraManager.hasTorch();
}
var RNCamera = (0, _reactNative.requireNativeComponent)('RNCamera', Camera, {
  nativeOnly: {
    accessibilityComponentType: true,
    accessibilityLabel: true,
    accessibilityLiveRegion: true,
    barCodeScannerEnabled: true,
    touchDetectorEnabled: true,
    googleVisionBarcodeDetectorEnabled: true,
    faceDetectorEnabled: true,
    textRecognizerEnabled: true,
    importantForAccessibility: true,
    onBarCodeRead: true,
    onGoogleVisionBarcodesDetected: true,
    onCameraReady: true,
    onAudioInterrupted: true,
    onAudioConnected: true,
    onPictureSaved: true,
    onFaceDetected: true,
    onTouch: true,
    onLayout: true,
    onMountError: true,
    onSubjectAreaChanged: true,
    renderToHardwareTextureAndroid: true,
    testID: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,