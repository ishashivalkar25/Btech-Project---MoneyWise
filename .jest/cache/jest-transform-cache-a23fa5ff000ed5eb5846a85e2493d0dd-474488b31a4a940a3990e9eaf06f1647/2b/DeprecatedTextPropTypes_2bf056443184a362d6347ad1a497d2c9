3e24ed69f92c070f43d4d501feca37d0
'use strict';

var DeprecatedColorPropType = require('./DeprecatedColorPropType');
var DeprecatedEdgeInsetsPropType = require('./DeprecatedEdgeInsetsPropType');
var DeprecatedStyleSheetPropType = require('./DeprecatedStyleSheetPropType');
var PropTypes = require('prop-types');
var DeprecatedTextStylePropTypes = require('./DeprecatedTextStylePropTypes');
var stylePropType = DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes);
var DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];
module.exports = {
  ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
  numberOfLines: PropTypes.number,
  textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
  onLayout: PropTypes.func,
  onPress: PropTypes.func,
  onLongPress: PropTypes.func,
  pressRetentionOffset: DeprecatedEdgeInsetsPropType,
  selectable: PropTypes.bool,
  selectionColor: DeprecatedColorPropType,
  suppressHighlighting: PropTypes.bool,
  style: stylePropType,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  allowFontScaling: PropTypes.bool,
  maxFontSizeMultiplier: PropTypes.number,
  accessible: PropTypes.bool,
  adjustsFontSizeToFit: PropTypes.bool,
  minimumFontScale: PropTypes.number,
  disabled: PropTypes.bool,
  dataDetectorType: PropTypes.oneOf(DataDetectorTypes)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,