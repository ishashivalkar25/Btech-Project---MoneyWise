73a07b0318a287fab566595fc03d7288
'use strict';

var invariant = require('invariant');
function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }
    var allKeys = Object.assign({}, props[propName], shapeTypes);
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }
    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
      rest[_key2 - 4] = arguments[_key2];
    }
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}
module.exports = deprecatedCreateStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImxvY2F0aW9uTmFtZSIsImFsbEtleXMiLCJPYmplY3QiLCJhc3NpZ24iLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdCIsIkFycmF5IiwiX2tleSIsImtleSIsImNoZWNrZXIiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5cyIsImVycm9yIiwiYXBwbHkiLCJjb25jYXQiLCJtZXNzYWdlIiwiY2hhaW5lZENoZWNrVHlwZSIsIl9sZW4yIiwiX2tleTIiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoXG4gICAgaXNSZXF1aXJlZCxcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uLFxuICAgIC4uLnJlc3RcbiAgKSB7XG4gICAgaWYgKCFwcm9wc1twcm9wTmFtZV0pIHtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgUmVxdWlyZWQgb2JqZWN0IFxcYCR7cHJvcE5hbWV9XFxgIHdhcyBub3Qgc3BlY2lmaWVkIGluIGAgK1xuICAgICAgICAgICAgYFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGNvbnN0IHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBjb25zdCBsb2NhdGlvbk5hbWUgPSBsb2NhdGlvbiB8fCAnKHVua25vd24pJztcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgSW52YWxpZCAke2xvY2F0aW9uTmFtZX0gXFxgJHtwcm9wTmFtZX1cXGAgb2YgdHlwZSBcXGAke3Byb3BUeXBlfVxcYCBgICtcbiAgICAgICAgICBgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYCwgZXhwZWN0ZWQgXFxgb2JqZWN0XFxgLmAsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGFsbCBrZXlzIGluIGNhc2Ugc29tZSBhcmUgcmVxdWlyZWQgYnV0IG1pc3NpbmcgZnJvbVxuICAgIC8vIHByb3BzLlxuICAgIGNvbnN0IGFsbEtleXMgPSB7Li4ucHJvcHNbcHJvcE5hbWVdLCAuLi5zaGFwZVR5cGVzfTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICBjb25zdCBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgSW52YWxpZCBwcm9wcy4ke3Byb3BOYW1lfSBrZXkgXFxgJHtrZXl9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYCArXG4gICAgICAgICAgICAnXFxuQmFkIG9iamVjdDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNoYWluZWRDaGVja1R5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgLi4ucmVzdCkge1xuICAgIHJldHVybiBjaGVja1R5cGUoZmFsc2UsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICB9XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGVkQ3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcjtcbiJdLCJtYXBwaW5ncyI6IkFBU0EsWUFBWTs7QUFFWixJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFFdEMsU0FBU0Msc0NBQXNDQSxDQUFDQyxVQUFVLEVBQUU7RUFDMUQsU0FBU0MsU0FBU0EsQ0FDaEJDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLGFBQWEsRUFDYkMsUUFBUSxFQUVSO0lBQ0EsSUFBSSxDQUFDSCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFO01BQ3BCLElBQUlGLFVBQVUsRUFBRTtRQUNkTCxTQUFTLENBQ1AsS0FBSyxFQUNMLHNCQUFxQk8sUUFBUSxzQ0FDdEJDLGFBQWEsUUFDdEIsQ0FBQztNQUNIO01BQ0E7SUFDRjtJQUNBLElBQU1FLFNBQVMsR0FBR0osS0FBSyxDQUFDQyxRQUFRLENBQUM7SUFDakMsSUFBTUksUUFBUSxHQUFHLE9BQU9ELFNBQVM7SUFDakMsSUFBTUUsWUFBWSxHQUFHSCxRQUFRLElBQUksV0FBVztJQUM1QyxJQUFJRSxRQUFRLEtBQUssUUFBUSxFQUFFO01BQ3pCWCxTQUFTLENBQ1AsS0FBSyxFQUNMLGFBQVdZLFlBQVksVUFBTUwsUUFBUSxtQkFBZ0JJLFFBQVEsNkJBQzFDSCxhQUFhLDJCQUNsQyxDQUFDO0lBQ0g7SUFHQSxJQUFNSyxPQUFPLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUFPVCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFLSixVQUFVLENBQUM7SUFBQyxTQUFBYSxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQXhCakRDLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtNQUFKRixJQUFJLENBQUFFLElBQUEsUUFBQUosU0FBQSxDQUFBSSxJQUFBO0lBQUE7SUF5QlAsS0FBSyxJQUFNQyxHQUFHLElBQUlULE9BQU8sRUFBRTtNQUN6QixJQUFNVSxPQUFPLEdBQUdwQixVQUFVLENBQUNtQixHQUFHLENBQUM7TUFDL0IsSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDWnZCLFNBQVMsQ0FDUCxLQUFLLEVBQ0wsbUJBQWlCTyxRQUFRLGNBQVVlLEdBQUcsdUJBQW9CZCxhQUFhLFVBQ3JFLGdCQUFnQixHQUNoQmdCLElBQUksQ0FBQ0MsU0FBUyxDQUFDbkIsS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQzNDLGdCQUFnQixHQUNoQmlCLElBQUksQ0FBQ0MsU0FBUyxDQUFDWCxNQUFNLENBQUNZLElBQUksQ0FBQ3ZCLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQ3RELENBQUM7TUFDSDtNQUNBLElBQU13QixLQUFLLEdBQUdKLE9BQU8sQ0FBQUssS0FBQSxVQUFDbEIsU0FBUyxFQUFFWSxHQUFHLEVBQUVkLGFBQWEsRUFBRUMsUUFBUSxFQUFBb0IsTUFBQSxDQUFLVixJQUFJLEVBQUM7TUFDdkUsSUFBSVEsS0FBSyxFQUFFO1FBQ1QzQixTQUFTLENBQ1AsS0FBSyxFQUNMMkIsS0FBSyxDQUFDRyxPQUFPLEdBQ1gsZ0JBQWdCLEdBQ2hCTixJQUFJLENBQUNDLFNBQVMsQ0FBQ25CLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FDOUMsQ0FBQztNQUNIO0lBQ0Y7RUFDRjtFQUNBLFNBQVN3QixnQkFBZ0JBLENBQUN6QixLQUFLLEVBQUVDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxRQUFRLEVBQVc7SUFBQSxTQUFBdUIsS0FBQSxHQUFBZixTQUFBLENBQUFDLE1BQUEsRUFBTkMsSUFBSSxPQUFBQyxLQUFBLENBQUFZLEtBQUEsT0FBQUEsS0FBQSxXQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO01BQUpkLElBQUksQ0FBQWMsS0FBQSxRQUFBaEIsU0FBQSxDQUFBZ0IsS0FBQTtJQUFBO0lBQ3pFLE9BQU83QixTQUFTLENBQUF3QixLQUFBLFVBQUMsS0FBSyxFQUFFdEIsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsUUFBUSxFQUFBb0IsTUFBQSxDQUFLVixJQUFJLEVBQUM7RUFDNUU7RUFDQVksZ0JBQWdCLENBQUMxQixVQUFVLEdBQUdELFNBQVMsQ0FBQzhCLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0VBQ3hELE9BQU9ILGdCQUFnQjtBQUN6QjtBQUVBSSxNQUFNLENBQUNDLE9BQU8sR0FBR2xDLHNDQUFzQyJ9