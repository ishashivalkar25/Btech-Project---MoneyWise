9a44e04e0f50d29956664986abdafe61
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _NativeActionSheetManager = _interopRequireDefault(require("./NativeActionSheetManager"));
var _excluded = ["tintColor", "cancelButtonTintColor", "destructiveButtonIndex"];
var processColor = require('../StyleSheet/processColor');
var invariant = require('invariant');
var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    var tintColor = options.tintColor,
      cancelButtonTintColor = options.cancelButtonTintColor,
      destructiveButtonIndex = options.destructiveButtonIndex,
      remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
    var destructiveButtonIndices = null;
    if (Array.isArray(destructiveButtonIndex)) {
      destructiveButtonIndices = destructiveButtonIndex;
    } else if (typeof destructiveButtonIndex === 'number') {
      destructiveButtonIndices = [destructiveButtonIndex];
    }
    var processedTintColor = processColor(tintColor);
    var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
    invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
    invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
    _NativeActionSheetManager.default.showActionSheetWithOptions(Object.assign({}, remainingOptions, {
      tintColor: processedTintColor,
      cancelButtonTintColor: processedCancelButtonTintColor,
      destructiveButtonIndices: destructiveButtonIndices
    }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    _NativeActionSheetManager.default.showShareActionSheetWithOptions(Object.assign({}, options, {
      tintColor: processColor(options.tintColor)
    }), failureCallback, successCallback);
  },
  dismissActionSheet: function dismissActionSheet() {
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
      _NativeActionSheetManager.default.dismissActionSheet();
    }
  }
};
module.exports = ActionSheetIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlQWN0aW9uU2hlZXRNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXhjbHVkZWQiLCJwcm9jZXNzQ29sb3IiLCJpbnZhcmlhbnQiLCJBY3Rpb25TaGVldElPUyIsInNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zIiwib3B0aW9ucyIsImNhbGxiYWNrIiwiUkNUQWN0aW9uU2hlZXRNYW5hZ2VyIiwidGludENvbG9yIiwiY2FuY2VsQnV0dG9uVGludENvbG9yIiwiZGVzdHJ1Y3RpdmVCdXR0b25JbmRleCIsInJlbWFpbmluZ09wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVmYXVsdCIsImRlc3RydWN0aXZlQnV0dG9uSW5kaWNlcyIsIkFycmF5IiwiaXNBcnJheSIsInByb2Nlc3NlZFRpbnRDb2xvciIsInByb2Nlc3NlZENhbmNlbEJ1dHRvblRpbnRDb2xvciIsIk9iamVjdCIsImFzc2lnbiIsInNob3dTaGFyZUFjdGlvblNoZWV0V2l0aE9wdGlvbnMiLCJmYWlsdXJlQ2FsbGJhY2siLCJzdWNjZXNzQ2FsbGJhY2siLCJkaXNtaXNzQWN0aW9uU2hlZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQWN0aW9uU2hlZXRJT1MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuXG5pbXBvcnQgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyIGZyb20gJy4vTmF0aXZlQWN0aW9uU2hlZXRNYW5hZ2VyJztcblxuY29uc3QgcHJvY2Vzc0NvbG9yID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIERpc3BsYXkgYWN0aW9uIHNoZWV0cyBhbmQgc2hhcmUgc2hlZXRzIG9uIGlPUy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hY3Rpb25zaGVldGlvc1xuICovXG5jb25zdCBBY3Rpb25TaGVldElPUyA9IHtcbiAgLyoqXG4gICAqIERpc3BsYXkgYW4gaU9TIGFjdGlvbiBzaGVldC5cbiAgICpcbiAgICogVGhlIGBvcHRpb25zYCBvYmplY3QgbXVzdCBjb250YWluIG9uZSBvciBtb3JlIG9mOlxuICAgKlxuICAgKiAtIGBvcHRpb25zYCAoYXJyYXkgb2Ygc3RyaW5ncykgLSBhIGxpc3Qgb2YgYnV0dG9uIHRpdGxlcyAocmVxdWlyZWQpXG4gICAqIC0gYGNhbmNlbEJ1dHRvbkluZGV4YCAoaW50KSAtIGluZGV4IG9mIGNhbmNlbCBidXR0b24gaW4gYG9wdGlvbnNgXG4gICAqIC0gYGRlc3RydWN0aXZlQnV0dG9uSW5kZXhgIChpbnQgb3IgYXJyYXkgb2YgaW50cykgLSBpbmRleCBvciBpbmRpY2VzIG9mIGRlc3RydWN0aXZlIGJ1dHRvbnMgaW4gYG9wdGlvbnNgXG4gICAqIC0gYHRpdGxlYCAoc3RyaW5nKSAtIGEgdGl0bGUgdG8gc2hvdyBhYm92ZSB0aGUgYWN0aW9uIHNoZWV0XG4gICAqIC0gYG1lc3NhZ2VgIChzdHJpbmcpIC0gYSBtZXNzYWdlIHRvIHNob3cgYmVsb3cgdGhlIHRpdGxlXG4gICAqIC0gYGRpc2FibGVkQnV0dG9uSW5kaWNlc2AgKGFycmF5IG9mIG51bWJlcnMpIC0gYSBsaXN0IG9mIGJ1dHRvbiBpbmRpY2VzIHdoaWNoIHNob3VsZCBiZSBkaXNhYmxlZFxuICAgKlxuICAgKiBUaGUgJ2NhbGxiYWNrJyBmdW5jdGlvbiB0YWtlcyBvbmUgcGFyYW1ldGVyLCB0aGUgemVyby1iYXNlZCBpbmRleFxuICAgKiBvZiB0aGUgc2VsZWN0ZWQgaXRlbS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYWN0aW9uc2hlZXRpb3Mjc2hvd2FjdGlvbnNoZWV0d2l0aG9wdGlvbnNcbiAgICovXG4gIHNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgIG9wdGlvbnM6IHt8XG4gICAgICArdGl0bGU/OiA/c3RyaW5nLFxuICAgICAgK21lc3NhZ2U/OiA/c3RyaW5nLFxuICAgICAgK29wdGlvbnM6IEFycmF5PHN0cmluZz4sXG4gICAgICArZGVzdHJ1Y3RpdmVCdXR0b25JbmRleD86ID9udW1iZXIgfCA/QXJyYXk8bnVtYmVyPixcbiAgICAgICtjYW5jZWxCdXR0b25JbmRleD86ID9udW1iZXIsXG4gICAgICArYW5jaG9yPzogP251bWJlcixcbiAgICAgICt0aW50Q29sb3I/OiBDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbiAgICAgICtjYW5jZWxCdXR0b25UaW50Q29sb3I/OiBDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbiAgICAgICt1c2VySW50ZXJmYWNlU3R5bGU/OiBzdHJpbmcsXG4gICAgICArZGlzYWJsZWRCdXR0b25JbmRpY2VzPzogQXJyYXk8bnVtYmVyPixcbiAgICB8fSxcbiAgICBjYWxsYmFjazogKGJ1dHRvbkluZGV4OiBudW1iZXIpID0+IHZvaWQsXG4gICkge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsLFxuICAgICAgJ09wdGlvbnMgbXVzdCBiZSBhIHZhbGlkIG9iamVjdCcsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLCAnTXVzdCBwcm92aWRlIGEgdmFsaWQgY2FsbGJhY2snKTtcbiAgICBpbnZhcmlhbnQoUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLCBcIkFjdGlvblNoZWV0TWFuYWdlciBkb2Vzbid0IGV4aXN0XCIpO1xuXG4gICAgY29uc3Qge1xuICAgICAgdGludENvbG9yLFxuICAgICAgY2FuY2VsQnV0dG9uVGludENvbG9yLFxuICAgICAgZGVzdHJ1Y3RpdmVCdXR0b25JbmRleCxcbiAgICAgIC4uLnJlbWFpbmluZ09wdGlvbnNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBsZXQgZGVzdHJ1Y3RpdmVCdXR0b25JbmRpY2VzID0gbnVsbDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlc3RydWN0aXZlQnV0dG9uSW5kZXgpKSB7XG4gICAgICBkZXN0cnVjdGl2ZUJ1dHRvbkluZGljZXMgPSBkZXN0cnVjdGl2ZUJ1dHRvbkluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3RydWN0aXZlQnV0dG9uSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICBkZXN0cnVjdGl2ZUJ1dHRvbkluZGljZXMgPSBbZGVzdHJ1Y3RpdmVCdXR0b25JbmRleF07XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc2VkVGludENvbG9yID0gcHJvY2Vzc0NvbG9yKHRpbnRDb2xvcik7XG4gICAgY29uc3QgcHJvY2Vzc2VkQ2FuY2VsQnV0dG9uVGludENvbG9yID0gcHJvY2Vzc0NvbG9yKGNhbmNlbEJ1dHRvblRpbnRDb2xvcik7XG4gICAgaW52YXJpYW50KFxuICAgICAgcHJvY2Vzc2VkVGludENvbG9yID09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NlZFRpbnRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAnVW5leHBlY3RlZCBjb2xvciBnaXZlbiBmb3IgQWN0aW9uU2hlZXRJT1Muc2hvd0FjdGlvblNoZWV0V2l0aE9wdGlvbnMgdGludENvbG9yJyxcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIHByb2Nlc3NlZENhbmNlbEJ1dHRvblRpbnRDb2xvciA9PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBwcm9jZXNzZWRDYW5jZWxCdXR0b25UaW50Q29sb3IgPT09ICdudW1iZXInLFxuICAgICAgJ1VuZXhwZWN0ZWQgY29sb3IgZ2l2ZW4gZm9yIEFjdGlvblNoZWV0SU9TLnNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zIGNhbmNlbEJ1dHRvblRpbnRDb2xvcicsXG4gICAgKTtcbiAgICBSQ1RBY3Rpb25TaGVldE1hbmFnZXIuc2hvd0FjdGlvblNoZWV0V2l0aE9wdGlvbnMoXG4gICAgICB7XG4gICAgICAgIC4uLnJlbWFpbmluZ09wdGlvbnMsXG4gICAgICAgIHRpbnRDb2xvcjogcHJvY2Vzc2VkVGludENvbG9yLFxuICAgICAgICBjYW5jZWxCdXR0b25UaW50Q29sb3I6IHByb2Nlc3NlZENhbmNlbEJ1dHRvblRpbnRDb2xvcixcbiAgICAgICAgZGVzdHJ1Y3RpdmVCdXR0b25JbmRpY2VzLFxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgdGhlIGlPUyBzaGFyZSBzaGVldC4gVGhlIGBvcHRpb25zYCBvYmplY3Qgc2hvdWxkIGNvbnRhaW5cbiAgICogb25lIG9yIGJvdGggb2YgYG1lc3NhZ2VgIGFuZCBgdXJsYCBhbmQgY2FuIGFkZGl0aW9uYWxseSBoYXZlXG4gICAqIGEgYHN1YmplY3RgIG9yIGBleGNsdWRlZEFjdGl2aXR5VHlwZXNgOlxuICAgKlxuICAgKiAtIGB1cmxgIChzdHJpbmcpIC0gYSBVUkwgdG8gc2hhcmVcbiAgICogLSBgbWVzc2FnZWAgKHN0cmluZykgLSBhIG1lc3NhZ2UgdG8gc2hhcmVcbiAgICogLSBgc3ViamVjdGAgKHN0cmluZykgLSBhIHN1YmplY3QgZm9yIHRoZSBtZXNzYWdlXG4gICAqIC0gYGV4Y2x1ZGVkQWN0aXZpdHlUeXBlc2AgKGFycmF5KSAtIHRoZSBhY3Rpdml0aWVzIHRvIGV4Y2x1ZGUgZnJvbVxuICAgKiAgIHRoZSBBY3Rpb25TaGVldFxuICAgKiAtIGB0aW50Q29sb3JgIChjb2xvcikgLSB0aW50IGNvbG9yIG9mIHRoZSBidXR0b25zXG4gICAqXG4gICAqIFRoZSAnZmFpbHVyZUNhbGxiYWNrJyBmdW5jdGlvbiB0YWtlcyBvbmUgcGFyYW1ldGVyLCBhbiBlcnJvciBvYmplY3QuXG4gICAqIFRoZSBvbmx5IHByb3BlcnR5IGRlZmluZWQgb24gdGhpcyBvYmplY3QgaXMgYW4gb3B0aW9uYWwgYHN0YWNrYCBwcm9wZXJ0eVxuICAgKiBvZiB0eXBlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBUaGUgJ3N1Y2Nlc3NDYWxsYmFjaycgZnVuY3Rpb24gdGFrZXMgdHdvIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqIC0gYSBib29sZWFuIHZhbHVlIHNpZ25pZnlpbmcgc3VjY2VzcyBvciBmYWlsdXJlXG4gICAqIC0gYSBzdHJpbmcgdGhhdCwgaW4gdGhlIGNhc2Ugb2Ygc3VjY2VzcywgaW5kaWNhdGVzIHRoZSBtZXRob2Qgb2Ygc2hhcmluZ1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hY3Rpb25zaGVldGlvcyNzaG93c2hhcmVhY3Rpb25zaGVldHdpdGhvcHRpb25zXG4gICAqL1xuICBzaG93U2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgIG9wdGlvbnM6IE9iamVjdCxcbiAgICBmYWlsdXJlQ2FsbGJhY2s6IEZ1bmN0aW9uLFxuICAgIHN1Y2Nlc3NDYWxsYmFjazogRnVuY3Rpb24sXG4gICkge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsLFxuICAgICAgJ09wdGlvbnMgbXVzdCBiZSBhIHZhbGlkIG9iamVjdCcsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgZmFpbHVyZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ011c3QgcHJvdmlkZSBhIHZhbGlkIGZhaWx1cmVDYWxsYmFjaycsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3VjY2Vzc0NhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ011c3QgcHJvdmlkZSBhIHZhbGlkIHN1Y2Nlc3NDYWxsYmFjaycsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLCBcIkFjdGlvblNoZWV0TWFuYWdlciBkb2Vzbid0IGV4aXN0XCIpO1xuICAgIFJDVEFjdGlvblNoZWV0TWFuYWdlci5zaG93U2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zKFxuICAgICAgey4uLm9wdGlvbnMsIHRpbnRDb2xvcjogcHJvY2Vzc0NvbG9yKG9wdGlvbnMudGludENvbG9yKX0sXG4gICAgICBmYWlsdXJlQ2FsbGJhY2ssXG4gICAgICBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgKTtcbiAgfSxcblxuICBkaXNtaXNzQWN0aW9uU2hlZXQ6ICgpID0+IHtcbiAgICBpbnZhcmlhbnQoUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLCBcIkFjdGlvblNoZWV0TWFuYWdlciBkb2Vzbid0IGV4aXN0XCIpO1xuICAgIGlmICh0eXBlb2YgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLmRpc21pc3NBY3Rpb25TaGVldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgUkNUQWN0aW9uU2hlZXRNYW5hZ2VyLmRpc21pc3NBY3Rpb25TaGVldCgpO1xuICAgIH1cbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aW9uU2hlZXRJT1M7XG4iXSwibWFwcGluZ3MiOiI7O0FBYUEsSUFBQUEseUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxJQUFBQyxTQUFBO0FBRS9ELElBQU1DLFlBQVksR0FBR0YsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0FBQzFELElBQU1HLFNBQVMsR0FBR0gs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