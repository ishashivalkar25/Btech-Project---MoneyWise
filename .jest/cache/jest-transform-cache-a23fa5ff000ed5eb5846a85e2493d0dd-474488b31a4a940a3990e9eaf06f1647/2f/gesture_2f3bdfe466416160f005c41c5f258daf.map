{"version":3,"names":["_handlersRegistry","require","_utils","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","_createClass2","default","_classCallCheck2","nextGestureId","BaseGesture","_Gesture","_inherits2","_super","_createSuper","_this","call","_defineProperty","_assertThisInitialized2","gestureId","handlerTag","isWorklet","handlers","key","value","addDependency","gesture","config","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","runOnJS","simultaneousWithExternalGesture","_len","arguments","length","gestures","_key","requireExternalGestureToFail","_len2","_key2","withTestId","id","testId","cancelsTouchesInView","initialize","getNextHandlerTag","Object","assign","current","toGestureArray","prepare","get","includes","isRemoteDebuggingEnabled","ContinousBaseGesture","_BaseGesture","_super2","apply","onUpdate","onChange","manualActivation"],"sources":["gesture.ts"],"sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // use Reanimated when runOnJS isn't set explicitly,\n    // and all defined callbacks are worklets,\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"],"mappings":"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"}