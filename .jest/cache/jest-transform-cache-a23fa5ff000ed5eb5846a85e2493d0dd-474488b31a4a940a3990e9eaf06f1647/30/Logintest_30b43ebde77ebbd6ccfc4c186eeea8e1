af6fab221ec966f45996da72ab37bbbb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    global.alert = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      queryByPlaceholderText = _render.queryByPlaceholderText,
      getByTestId = _render.getByTestId;
    var emailInput = queryByPlaceholderText('Email / Username');
    var passwordInput = queryByPlaceholderText('Password');
    expect(emailInput).toBeTruthy();
    expect(passwordInput).toBeTruthy();
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByTestId('LoginBtn');
    _reactNative.fireEvent.press(loginButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(navigationMock.replace).toHaveBeenCalledWith('Root');
      expect(global.alert).not.toHaveBeenCalled();
    });
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText;
    var forgotPasswordButton = getByText('Forgot Password ?');
    _reactNative.fireEvent.press(forgotPasswordButton);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsImdsb2JhbCIsImFsZXJ0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIm5hdmlnYXRpb24iLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXN0SWQiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwibG9naW5CdXR0b24iLCJwcmVzcyIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyMiIsImdldEJ5VGV4dCIsImZvcmdvdFBhc3N3b3JkQnV0dG9uIl0sInNvdXJjZXMiOlsiTG9naW4tdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vQ29tcG9uZW50cy9Mb2dpbic7XHJcblxyXG5kZXNjcmliZSgnTG9naW4nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsb2dpbiB3aXRoIHZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25Nb2NrID0ge1xyXG4gICAgICAgICAgICByZXBsYWNlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gTW9jayB0aGUgYWxlcnQgZnVuY3Rpb25cclxuICAgICAgICBnbG9iYWwuYWxlcnQgPSBqZXN0LmZuKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgcXVlcnlCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgICAgICAgPExvZ2luIG5hdmlnYXRpb249e25hdmlnYXRpb25Nb2NrfSAvPlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEZpbGwgaW4gdGhlIGxvZ2luIGZvcm0gZmllbGRzXHJcbiAgICAgICAgY29uc3QgZW1haWxJbnB1dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoJ0VtYWlsIC8gVXNlcm5hbWUnKTtcclxuICAgICAgICBjb25zdCBwYXNzd29yZElucHV0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgnUGFzc3dvcmQnKTtcclxuXHJcbiAgICAgICAgZXhwZWN0KGVtYWlsSW5wdXQpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3QocGFzc3dvcmRJbnB1dCkudG9CZVRydXRoeSgpO1xyXG5cclxuICAgICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCAndGVzdEBleGFtcGxlLmNvbScpO1xyXG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsICdwYXNzd29yZCcpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciB0aGUgbG9naW4gYWN0aW9uXHJcbiAgICAgICAgY29uc3QgbG9naW5CdXR0b24gPSBnZXRCeVRlc3RJZCgnTG9naW5CdG4nKTtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MobG9naW5CdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgbmF2aWdhdGlvbiBtZXRob2QgaXMgY2FsbGVkXHJcbiAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBuYXZpZ2F0aW9uIG1ldGhvZCBpcyBjYWxsZWRcclxuICAgICAgICAgICAgZXhwZWN0KG5hdmlnYXRpb25Nb2NrLnJlcGxhY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdSb290Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgYWxlcnQgZnVuY3Rpb24gd2FzIG5vdCBjYWxsZWRcclxuICAgICAgICAgICAgZXhwZWN0KGdsb2JhbC5hbGVydCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZvcmdvdCBwYXNzd29yZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPExvZ2luIG5hdmlnYXRpb249e25hdmlnYXRpb25Nb2NrfSAvPik7XHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIGZvcmdvdCBwYXNzd29yZCBhY3Rpb25cclxuICAgICAgICBjb25zdCBmb3Jnb3RQYXNzd29yZEJ1dHRvbiA9IGdldEJ5VGV4dCgnRm9yZ290IFBhc3N3b3JkID8nKTtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZm9yZ290UGFzc3dvcmRCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgZGlhbG9nIGJveCB2aXNpYmlsaXR5IHN0YXRlIGlzIHVwZGF0ZWRcclxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiBhc3NlcnQgdGhhdCB0aGUgZGlhbG9nIGJveCBiZWNvbWVzIHZpc2libGVcclxuICAgICAgICAvLyBieSBjaGVja2luZyBmb3IgaXRzIGV4aXN0ZW5jZSBvciBhIHNwZWNpZmljIFVJIGVsZW1lbnQgd2l0aGluIGl0XHJcbiAgICAgICAgLy8gZXhwZWN0KC4uLikgYXNzZXJ0aW9ucyBmb3IgZGlhbG9nIGJveCB2aXNpYmlsaXR5XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgbW9yZSB0ZXN0IGNhc2VzIGZvciBvdGhlciB1c2VyIGludGVyYWN0aW9ucyBhbmQgZWRnZSBjYXNlc1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF3QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFeENJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtFQUNwQkMsRUFBRSxDQUFDLDRDQUE0QyxNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUN6RCxJQUFNQyxjQUFjLEdBQUc7TUFDbkJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBR0RFLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBRXhCLElBQUFJLE9BQUEsR0FBZ0QsSUFBQUMsbUJBQU0sRUFDbEQsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLE1BQUEsQ0FBQUssT0FBSztRQUFDVyxVQUFVLEVBQUVWO01BQWUsQ0FBRSxDQUN4QyxDQUFDO01BRk9XLHNCQUFzQixHQUFBSixPQUFBLENBQXRCSSxzQkFBc0I7TUFBRUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7SUFLM0MsSUFBTUMsVUFBVSxHQUFHRixzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztJQUM3RCxJQUFNRyxhQUFhLEdBQUdILHNCQUFzQixDQUFDLFVBQVUsQ0FBQztJQUV4REksTUFBTSxDQUFDRixVQUFVLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDL0JELE1BQU0sQ0FBQ0QsYUFBYSxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBRWxDQyxzQkFBUyxDQUFDQyxVQUFVLENBQUNMLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQztJQUNwREksc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDSixhQUFhLEVBQUUsVUFBVSxDQUFDO0lBSS9DLElBQU1LLFdBQVcsR0FBR1AsV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUMzQ0ssc0JBQVMsQ0FBQ0csS0FBSyxDQUFDRCxXQUFXLENBQUM7SUFHNUIsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFFaEJOLE1BQU0sQ0FBQ2YsY0FBYyxDQUFDQyxPQUFPLENBQUMsQ0FBQ3FCLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztNQUczRFAsTUFBTSxDQUFDVixNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDaUIsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQztFQUNOLENBQUMsRUFBQztFQUVGM0IsRUFBRSxDQUFDLCtCQUErQixNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUM1QyxJQUFNQyxjQUFjLEdBQUc7TUFDbkJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBQXNCLFFBQUEsR0FBc0IsSUFBQWpCLG1CQUFNLEVBQUMsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLE1BQUEsQ0FBQUssT0FBSztRQUFDVyxVQUFVLEVBQUVWO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBM0QwQixTQUFTLEdBQUFELFFBQUEsQ0FBVEMsU0FBUztJQUdqQixJQUFNQyxvQkFBb0IsR0FBR0QsU0FBUyxDQUFDLG1CQUFtQixDQUFDO0lBQzNEVCxzQkFBUyxDQUFDRyxLQUFLLENBQUNPLG9CQUFvQixDQUFDO0VBTXpDLENBQUMsRUFBQztBQUdOLENBQUMsQ0FBQyJ9