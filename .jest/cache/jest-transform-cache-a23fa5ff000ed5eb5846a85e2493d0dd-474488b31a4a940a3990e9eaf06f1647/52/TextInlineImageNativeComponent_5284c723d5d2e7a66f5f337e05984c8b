1a2cb60eda5e6760264c73a45e38f962
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTTextInlineImage',
  bubblingEventTypes: {},
  directEventTypes: {},
  validAttributes: {
    resizeMode: true,
    src: true,
    tintColor: {
      process: require('../StyleSheet/processColor')
    },
    headers: true
  }
};
exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = TextInlineImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwiTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInZhbGlkQXR0cmlidXRlcyIsInJlc2l6ZU1vZGUiLCJzcmMiLCJ0aW50Q29sb3IiLCJwcm9jZXNzIiwiaGVhZGVycyIsIlRleHRJbmxpbmVJbWFnZSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiVGV4dElubGluZUltYWdlTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtcbiAgSG9zdENvbXBvbmVudCxcbiAgUGFydGlhbFZpZXdDb25maWcsXG59IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7SW1hZ2VSZXNpemVNb2RlfSBmcm9tICcuL0ltYWdlUmVzaXplTW9kZSc7XG5cbmltcG9ydCAqIGFzIE5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJy4uL05hdGl2ZUNvbXBvbmVudC9OYXRpdmVDb21wb25lbnRSZWdpc3RyeSc7XG5cbnR5cGUgTmF0aXZlUHJvcHMgPSAkUmVhZE9ubHk8e1xuICAuLi5WaWV3UHJvcHMsXG4gIHJlc2l6ZU1vZGU/OiA/SW1hZ2VSZXNpemVNb2RlLFxuICBzcmM/OiA/JFJlYWRPbmx5QXJyYXk8PyRSZWFkT25seTx7dXJpPzogP3N0cmluZywgLi4ufT4+LFxuICB0aW50Q29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgaGVhZGVycz86ID97W3N0cmluZ106IHN0cmluZ30sXG59PjtcblxuZXhwb3J0IGNvbnN0IF9fSU5URVJOQUxfVklFV19DT05GSUc6IFBhcnRpYWxWaWV3Q29uZmlnID0ge1xuICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RUZXh0SW5saW5lSW1hZ2UnLFxuICBidWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICBkaXJlY3RFdmVudFR5cGVzOiB7fSxcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgcmVzaXplTW9kZTogdHJ1ZSxcbiAgICBzcmM6IHRydWUsXG4gICAgdGludENvbG9yOiB7XG4gICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLFxuICAgIH0sXG4gICAgaGVhZGVyczogdHJ1ZSxcbiAgfSxcbn07XG5cbmNvbnN0IFRleHRJbmxpbmVJbWFnZTogSG9zdENvbXBvbmVudDxOYXRpdmVQcm9wcz4gPVxuICBOYXRpdmVDb21wb25lbnRSZWdpc3RyeS5nZXQ8TmF0aXZlUHJvcHM+KFxuICAgICdSQ1RUZXh0SW5saW5lSW1hZ2UnLFxuICAgICgpID0+IF9fSU5URVJOQUxfVklFV19DT05GSUcsXG4gICk7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRJbmxpbmVJbWFnZTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQ0EsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsT0FBQSxHQUFBRixPQUFBLENBQUFHLHNCQUFBO0FBVWIsSUFBQUMsdUJBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUFzRixTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUgsd0JBQUFPLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQVYsT0FBQSxFQUFBVSxHQUFBLFVBQUFFLEtBQUEsR0FBQVAsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTSxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSCxHQUFBLFlBQUFFLEtBQUEsQ0FBQUUsR0FBQSxDQUFBSixHQUFBLFNBQUFLLE1BQUEsV0FBQUMscUJBQUEsR0FBQXBCLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFxQix3QkFBQSxXQUFBQyxHQUFBLElBQUFSLEdBQUEsUUFBQVEsR0FBQSxrQkFBQXRCLE1BQUEsQ0FBQXVCLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFYLEdBQUEsRUFBQVEsR0FBQSxTQUFBSSxJQUFBLEdBQUFOLHFCQUFBLEdBQUFwQixNQUFBLENBQUFxQix3QkFBQSxDQUFBUCxHQUFBLEVBQUFRLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFSLEdBQUEsSUFBQVEsSUFBQSxDQUFBQyxHQUFBLEtBQUEzQixNQUFBLENBQUFDLGNBQUEsQ0FBQWtCLE1BQUEsRUFBQUcsR0FBQSxFQUFBSSxJQUFBLFlBQUFQLE1BQUEsQ0FBQUcsR0FBQSxJQUFBUixHQUFBLENBQUFRLEdBQUEsU0FBQUgsTUFBQSxDQUFBZixPQUFBLEdBQUFVLEdBQUEsTUFBQUUsS0FBQSxJQUFBQSxLQUFBLENBQUFXLEdBQUEsQ0FBQWIsR0FBQSxFQUFBSyxNQUFBLFlBQUFBLE1BQUE7QUFVL0UsSUFBTWQsc0JBQXlDLEdBQUc7RUFDdkR1QixlQUFlLEVBQUUsb0JBQW9CO0VBQ3JDQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7RUFDdEJDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztFQUNwQkMsZUFBZSxFQUFFO0lBQ2ZDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsSUFBSTtJQUNUQyxTQUFTLEVBQUU7TUFDVEMsT0FBTyxFQUFFM0IsT0FBTyxDQUFDLDRCQUE0QjtJQUMvQyxDQUFDO0lBQ0Q0QixPQUFPLEVBQUU7RUFDWDtBQUNGLENBQUM7QUFBQ2xDLE9BQUEsQ0FBQUcsc0JBQUEsR0FBQUEsc0JBQUE7QUFFRixJQUFNZ0MsZUFBMkMsR0FDL0MvQix1QkFBdUIsQ0FBQ1ksR0FBRyxDQUN6QixvQkFBb0IsRUFDcEI7RUFBQSxPQUFNYixzQkFBc0I7QUFBQSxDQUM5QixDQUFDO0FBQUMsSUFBQWlDLFFBQUEsR0FFV0QsZUFBZTtBQUFBbkMsT0FBQSxDQUFBRSxPQUFBLEdBQUFrQyxRQUFBIn0=