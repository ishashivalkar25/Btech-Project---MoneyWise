2a2c85cf272b7275832eea9c20fb9bde
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.usePerformanceLogger = usePerformanceLogger;
var _GlobalPerformanceLogger = _interopRequireDefault(require("./GlobalPerformanceLogger"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
if (__DEV__) {
  PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';
}
function usePerformanceLogger() {
  return (0, React.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkdsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyIiwiX19ERVZfXyIsImRpc3BsYXlOYW1lIiwidXNlUGVyZm9ybWFuY2VMb2dnZXIiLCJ1c2VDb250ZXh0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SVBlcmZvcm1hbmNlTG9nZ2VyfSBmcm9tICcuL2NyZWF0ZVBlcmZvcm1hbmNlTG9nZ2VyJztcblxuaW1wb3J0IEdsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyIGZyb20gJy4vR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VDb250ZXh0fSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogVGhpcyBpcyBhIFJlYWN0IENvbnRleHQgdGhhdCBwcm92aWRlcyBhIHNjb3BlZCBpbnN0YW5jZSBvZiBJUGVyZm9ybWFuY2VMb2dnZXIuXG4gKiBXZSB3cmFwIGV2ZXJ5IDxBcHBDb250YWluZXIgLz4gd2l0aCBhIFByb3ZpZGVyIGZvciB0aGlzIGNvbnRleHQgc28gdGhlIGxvZ2dlclxuICogc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiBldmVyeSBjb21wb25lbnQuXG4gKiBTZWUgUmVhY3QgZG9jcyBhYm91dCB1c2luZyBDb250ZXh0OiBodHRwczovL3JlYWN0anMub3JnL2RvY3MvY29udGV4dC5odG1sXG4gKi9cbmNvbnN0IFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dDogUmVhY3QuQ29udGV4dDxJUGVyZm9ybWFuY2VMb2dnZXI+ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dChHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlcik7XG5pZiAoX19ERVZfXykge1xuICBQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQuZGlzcGxheU5hbWUgPSAnUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcmZvcm1hbmNlTG9nZ2VyKCk6IElQZXJmb3JtYW5jZUxvZ2dlciB7XG4gIHJldHVybiB1c2VDb250ZXh0KFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWUEsSUFBQUEsd0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUErQixTQUFBRyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUYsd0JBQUFNLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQVMvQixJQUFNVyx3QkFBMkQsR0FDL0R4QixLQUFLLENBQUN5QixhQUFhLENBQUNDLGdDQUF1QixDQUFDO0FBQzlDLElBQUlDLE9BQU8sRUFBRTtFQUNYSCx3QkFBd0IsQ0FBQ0ksV0FBVyxHQUFHLDBCQUEwQjtBQUNuRTtBQUVPLFNBQVNDLG9CQUFvQkEsQ0FBQSxFQUF1QjtFQUN6RCxPQUFPLElBQUFDLGdCQUFVLEVBQUNOLHdCQUF3QixDQUFDO0FBQzdDO0FBQUMsSUFBQU8sUUFBQSxHQUVjUCx3QkFBd0I7QUFBQVEsT0FBQSxDQUFBdkIsT0FBQSxHQUFBc0IsUUFBQSJ9