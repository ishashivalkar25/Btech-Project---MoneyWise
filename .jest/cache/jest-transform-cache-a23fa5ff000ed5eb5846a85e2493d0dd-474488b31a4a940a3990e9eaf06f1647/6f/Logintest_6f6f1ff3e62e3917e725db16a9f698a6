0430bd3cfe9f33fd8f4ebf83e0079ddd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    global.alert = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      queryByPlaceholderText = _render.queryByPlaceholderText,
      getByTestId = _render.getByTestId,
      waitFor = _render.waitFor;
    var emailInput = queryByPlaceholderText('Email / Username');
    var passwordInput = queryByPlaceholderText('Password');
    expect(emailInput).toBeTruthy();
    expect(passwordInput).toBeTruthy();
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByTestId('LoginBtn');
    _reactNative.fireEvent.press(loginButton);
    yield waitFor(function () {
      expect(navigationMock.replace).toHaveBeenCalledWith('Root');
    });
    expect(global.alert).not.toHaveBeenCalled();
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText;
    var forgotPasswordButton = getByText('Forgot Password ?');
    _reactNative.fireEvent.press(forgotPasswordButton);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsImdsb2JhbCIsImFsZXJ0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIm5hdmlnYXRpb24iLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXN0SWQiLCJ3YWl0Rm9yIiwiZW1haWxJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsImxvZ2luQnV0dG9uIiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyMiIsImdldEJ5VGV4dCIsImZvcmdvdFBhc3N3b3JkQnV0dG9uIl0sInNvdXJjZXMiOlsiTG9naW4tdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IExvZ2luIGZyb20gJy4uL0NvbXBvbmVudHMvTG9naW4nO1xyXG5cclxuZGVzY3JpYmUoJ0xvZ2luJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9naW4gd2l0aCB2YWxpZCBjcmVkZW50aWFscycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIE1vY2sgdGhlIGFsZXJ0IGZ1bmN0aW9uXHJcbiAgICAgICAgZ2xvYmFsLmFsZXJ0ID0gamVzdC5mbigpO1xyXG5cclxuICAgICAgICBjb25zdCB7IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGVzdElkLCB3YWl0Rm9yIH0gPSByZW5kZXIoXHJcbiAgICAgICAgICAgIDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBGaWxsIGluIHRoZSBsb2dpbiBmb3JtIGZpZWxkc1xyXG4gICAgICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KCdFbWFpbCAvIFVzZXJuYW1lJyk7XHJcbiAgICAgICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoJ1Bhc3N3b3JkJyk7XHJcblxyXG4gICAgICAgIGV4cGVjdChlbWFpbElucHV0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHBhc3N3b3JkSW5wdXQpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgJ3Rlc3RAZXhhbXBsZS5jb20nKTtcclxuICAgICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCAncGFzc3dvcmQnKTtcclxuXHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIGxvZ2luIGFjdGlvblxyXG4gICAgICAgIGNvbnN0IGxvZ2luQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ0xvZ2luQnRuJyk7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGxvZ2luQnV0dG9uKTtcclxuXHJcbiAgICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIG5hdmlnYXRpb24gbWV0aG9kIGlzIGNhbGxlZFxyXG4gICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgbmF2aWdhdGlvbiBtZXRob2QgaXMgY2FsbGVkXHJcbiAgICAgICAgICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUm9vdCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgYWxlcnQgZnVuY3Rpb24gd2FzIG5vdCBjYWxsZWRcclxuICAgICAgICAgZXhwZWN0KGdsb2JhbC5hbGVydCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZvcmdvdCBwYXNzd29yZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPExvZ2luIG5hdmlnYXRpb249e25hdmlnYXRpb25Nb2NrfSAvPik7XHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIGZvcmdvdCBwYXNzd29yZCBhY3Rpb25cclxuICAgICAgICBjb25zdCBmb3Jnb3RQYXNzd29yZEJ1dHRvbiA9IGdldEJ5VGV4dCgnRm9yZ290IFBhc3N3b3JkID8nKTtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZm9yZ290UGFzc3dvcmRCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgZGlhbG9nIGJveCB2aXNpYmlsaXR5IHN0YXRlIGlzIHVwZGF0ZWRcclxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiBhc3NlcnQgdGhhdCB0aGUgZGlhbG9nIGJveCBiZWNvbWVzIHZpc2libGVcclxuICAgICAgICAvLyBieSBjaGVja2luZyBmb3IgaXRzIGV4aXN0ZW5jZSBvciBhIHNwZWNpZmljIFVJIGVsZW1lbnQgd2l0aGluIGl0XHJcbiAgICAgICAgLy8gZXhwZWN0KC4uLikgYXNzZXJ0aW9ucyBmb3IgZGlhbG9nIGJveCB2aXNpYmlsaXR5XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgbW9yZSB0ZXN0IGNhc2VzIGZvciBvdGhlciB1c2VyIGludGVyYWN0aW9ucyBhbmQgZWRnZSBjYXNlc1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF3QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFeENJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtFQUNwQkMsRUFBRSxDQUFDLDRDQUE0QyxNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUN6RCxJQUFNQyxjQUFjLEdBQUc7TUFDbkJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBR0RFLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBRXhCLElBQUFJLE9BQUEsR0FBeUQsSUFBQUMsbUJBQU0sRUFDM0QsSUFBQWIsV0FBQSxDQUFBYyxHQUFBLEVBQUNmLE1BQUEsQ0FBQUssT0FBSztRQUFDVyxVQUFVLEVBQUVWO01BQWUsQ0FBRSxDQUN4QyxDQUFDO01BRk9XLHNCQUFzQixHQUFBSixPQUFBLENBQXRCSSxzQkFBc0I7TUFBRUMsV0FBVyxHQUFBTCxPQUFBLENBQVhLLFdBQVc7TUFBRUMsT0FBTyxHQUFBTixPQUFBLENBQVBNLE9BQU87SUFLcEQsSUFBTUMsVUFBVSxHQUFHSCxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztJQUM3RCxJQUFNSSxhQUFhLEdBQUdKLHNCQUFzQixDQUFDLFVBQVUsQ0FBQztJQUV4REssTUFBTSxDQUFDRixVQUFVLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDL0JELE1BQU0sQ0FBQ0QsYUFBYSxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBRWxDQyxzQkFBUyxDQUFDQyxVQUFVLENBQUNMLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQztJQUNwREksc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDSixhQUFhLEVBQUUsVUFBVSxDQUFDO0lBSS9DLElBQU1LLFdBQVcsR0FBR1IsV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUMzQ00sc0JBQVMsQ0FBQ0csS0FBSyxDQUFDRCxXQUFXLENBQUM7SUFHNUIsTUFBTVAsT0FBTyxDQUFDLFlBQU07TUFFaEJHLE1BQU0sQ0FBQ2hCLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDLENBQUNxQixvQkFBb0IsQ0FBQyxNQUFNLENBQUM7SUFDL0QsQ0FBQyxDQUFDO0lBRUROLE1BQU0sQ0FBQ1gsTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztFQUNoRCxDQUFDLEVBQUM7RUFFRjNCLEVBQUUsQ0FBQywrQkFBK0IsTUFBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDNUMsSUFBTUMsY0FBYyxHQUFHO01BQ25CQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbEJDLFFBQVEsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUFzQixRQUFBLEdBQXNCLElBQUFqQixtQkFBTSxFQUFDLElBQUFiLFdBQUEsQ0FBQWMsR0FBQSxFQUFDZixNQUFBLENBQUFLLE9BQUs7UUFBQ1csVUFBVSxFQUFFVjtNQUFlLENBQUUsQ0FBQyxDQUFDO01BQTNEMEIsU0FBUyxHQUFBRCxRQUFBLENBQVRDLFNBQVM7SUFHakIsSUFBTUMsb0JBQW9CLEdBQUdELFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztJQUMzRFIsc0JBQVMsQ0FBQ0csS0FBSyxDQUFDTSxvQkFBb0IsQ0FBQztFQU16QyxDQUFDLEVBQUM7QUFHTixDQUFDLENBQUMifQ==