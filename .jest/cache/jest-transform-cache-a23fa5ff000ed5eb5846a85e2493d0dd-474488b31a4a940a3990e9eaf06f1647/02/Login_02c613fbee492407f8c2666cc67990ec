6024dd54dcc6fb27e7ad07a7b0d5e5ae
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Login;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _config = require("../Firebase/config");
var _auth = require("firebase/auth");
var _core = require("@react-navigation/core");
var _reactNativeDialogInput = _interopRequireDefault(require("react-native-dialog-input"));
var _Background = _interopRequireDefault(require("./Background"));
var _Btn = _interopRequireDefault(require("./Btn"));
var _Field = _interopRequireDefault(require("./Field"));
var _Constants = require("./Constants");
var _jsxRuntime = require("react/jsx-runtime");
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
function Login(props) {
  var _React$useState = _react.default.useState(""),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    userName = _React$useState2[0],
    setUserName = _React$useState2[1];
  var _React$useState3 = _react.default.useState(""),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    password = _React$useState4[0],
    setPassword = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    dialogBoxVisibility = _React$useState6[0],
    setDialogBoxVisibility = _React$useState6[1];
  var _React$useState7 = _react.default.useState(true),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    userNameValidity = _React$useState8[0],
    setUserNameValidity = _React$useState8[1];
  _react.default.useEffect(function () {
    var unsubscribe = _config.auth.onAuthStateChanged(function (user) {
      if (user && user.emailVerified) {
        props.navigation.replace("Root");
        console.log(user);
      }
    });
    setUserName("");
    setPassword("");
    setUserNameValidity(true);
    return unsubscribe;
  }, []);
  var logInToAcc = function logInToAcc() {
    console.log("Logged In Successfully!!!", _config.auth);
    (0, _auth.signInWithEmailAndPassword)(_config.auth, userName, password).then(function (userCredentials) {
      var user = userCredentials.user;
      console.log("user email :", user.email);
      if (user.emailVerified) {
        props.navigation.replace("Root");
        console.log(JSON.stringify(user));
        alert("Logged In Successfully!!!");
      } else {
        alert("Please verify your Email. Link is already sent.");
        _config.auth.signOut();
      }
    }).catch(function (error) {
      return alert("Username/ Password is incorrect!!");
    });
  };
  var handleUserNameChange = function handleUserNameChange(userNameInput) {
    var reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    if (reg.test(userNameInput) === true) {
      setUserName(userNameInput);
      setUserNameValidity(true);
    } else {
      setUserNameValidity(false);
      setUserName("");
    }
  };
  var redirectToSignUp = function redirectToSignUp() {
    props.navigation.navigate("Sign Up");
  };
  var forgotPassword = function forgotPassword() {
    setDialogBoxVisibility(true);
  };
  var passwordResetEmail = function passwordResetEmail(emailInput) {
    console.log("Email : ", emailInput);
    setDialogBoxVisibility(false);
    (0, _auth.sendPasswordResetEmail)(_config.auth, emailInput).then(function () {
      alert("Password reset link is sent successfully!");
    }).catch(function (error) {
      alert("Please enter valid email address!");
    });
  };
  return (0, _jsxRuntime.jsxs)(_Background.default, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        height: height * 0.15
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          flex: 1,
          color: "white",
          fontSize: 64,
          fontWeight: "bold",
          justifyContent: "center"
        },
        children: "Login"
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        backgroundColor: "white",
        height: height * 0.85,
        width: width,
        borderTopLeftRadius: 130,
        paddingTop: 100,
        alignItems: "center"
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: "grey",
          fontSize: 19,
          fontWeight: "bold",
          marginBottom: 20
        },
        children: "Login to your account"
      }), (0, _jsxRuntime.jsx)(_Field.default, {
        placeholder: "Email / Username",
        keyboardType: "email-address",
        onChangeText: function onChangeText(text) {
          return handleUserNameChange(text);
        }
      }), !userNameValidity && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.tip,
        children: "Invalid Email / Username!"
      }), (0, _jsxRuntime.jsx)(_Field.default, {
        placeholder: "Password",
        secureTextEntry: true,
        onChangeText: function onChangeText(text) {
          return setPassword(text);
        }
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          alignItems: "flex-end",
          width: "78%",
          paddingRight: 16,
          marginBottom: 200
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: _Constants.darkGreen,
            fontWeight: "bold",
            fontSize: 16
          },
          onPress: forgotPassword,
          children: "Forgot Password ?"
        })
      }), (0, _jsxRuntime.jsx)(_Btn.default, {
        textColor: "white",
        bgColor: _Constants.darkGreen,
        btnLabel: "Login",
        Press: logInToAcc,
        testID: "LoginBtn"
      }), (0, _jsxRuntime.jsx)(_reactNativeDialogInput.default, {
        isDialogVisible: dialogBoxVisibility,
        title: "Password Recovery",
        message: "Enter registered email address :",
        hintInput: "abc@gmail.com",
        submitInput: function submitInput(inputText) {
          passwordResetEmail(inputText);
        },
        closeDialog: function closeDialog() {
          setDialogBoxVisibility(false);
        }
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          display: "flex",
          flexDirection: "row",
          justifyContent: "center"
        },
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: {
            fontSize: 16,
            fontWeight: "bold"
          },
          children: ["Don't have an account ?", " "]
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: redirectToSignUp,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              color: _Constants.darkGreen,
              fontWeight: "bold",
              fontSize: 16
            },
            children: "Signup"
          })
        })]
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  tip: {
    color: "red",
    textAlign: 'left',
    width: '70%',
    paddingLeft: 10
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,