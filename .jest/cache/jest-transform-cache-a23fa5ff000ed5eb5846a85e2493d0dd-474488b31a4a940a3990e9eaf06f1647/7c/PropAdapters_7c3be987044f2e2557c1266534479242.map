{"version":3,"names":["_ConfigHelper","require","createAnimatedPropAdapter","adapter","nativeProps","nativePropsToAdd","forEach","prop","addWhitelistedNativeProps","_worklet_7706743909110_init_data","code","location","sourceMap","SVGAdapter","_e","global","Error","_f","props","keys","Object","includes","Array","isArray","transform","_props$x","_props$y","length","x","y","translateX","translateY","arr","replace","split","parseFloat","_closure","__initData","__workletHash","__stackDetails","__version","exports","_worklet_14826336588118_init_data","TextInputAdapter","text","value"],"sources":["PropAdapters.ts"],"sourcesContent":["import { addWhitelistedNativeProps } from '../ConfigHelper';\nimport { AdapterWorkletFunction } from './commonTypes';\n\nexport function createAnimatedPropAdapter(\n  adapter: AdapterWorkletFunction,\n  nativeProps?: string[]\n): AdapterWorkletFunction {\n  const nativePropsToAdd: { [key: string]: boolean } = {};\n  // eslint-disable-next-line no-unused-expressions\n  nativeProps?.forEach((prop) => {\n    nativePropsToAdd[prop] = true;\n  });\n  addWhitelistedNativeProps(nativePropsToAdd);\n  return adapter;\n}\n\n// ADAPTERS\n\nexport const SVGAdapter: AdapterWorkletFunction = createAnimatedPropAdapter(\n  (props) => {\n    'worklet';\n    const keys = Object.keys(props);\n    // transform\n    if (keys.includes('transform')) {\n      if (Array.isArray(props.transform)) {\n        // case of array with 6 values => https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/elements/Shape.tsx#L200\n        if (props.transform.length !== 6) {\n          throw new Error(\n            `invalid transform length of ${props.transform.length}, should be 6`\n          );\n        }\n        const transform: number[] = props.transform as number[];\n        const x: number = (props.x as number) ?? 0;\n        const y: number = (props.y as number) ?? 0;\n        props.transform = [\n          { translateX: transform[0] * x + transform[2] * y + transform[4] },\n          { translateY: transform[1] * x + transform[3] * y + transform[5] },\n        ];\n      } else if (typeof props.transform === 'string') {\n        // case of string 'translate(translateX translateY)'\n        // todo: handle other cases of transform string like here https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/lib/extract/extractTransform.ts#L184\n        const transform: string = props.transform as string;\n        const arr = transform\n          .replace('translate(', '')\n          .replace(')', '')\n          .split(' ');\n        props.transform = [\n          { translateX: parseFloat(arr[0]) },\n          { translateY: parseFloat(arr[1]) },\n        ];\n      }\n    }\n    // todo: other props\n  }\n);\n\nexport const TextInputAdapter = createAnimatedPropAdapter(\n  (props) => {\n    'worklet';\n    const keys = Object.keys(props);\n    // convert text to value like RN does here: https://github.com/facebook/react-native/blob/f2c6279ca497b34d5a2bfbb6f2d33dc7a7bea02a/Libraries/Components/TextInput/TextInput.js#L878\n    if (keys.includes('value')) {\n      props.text = props.value;\n      delete props.value;\n    }\n  },\n  ['text']\n);\n"],"mappings":"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"}