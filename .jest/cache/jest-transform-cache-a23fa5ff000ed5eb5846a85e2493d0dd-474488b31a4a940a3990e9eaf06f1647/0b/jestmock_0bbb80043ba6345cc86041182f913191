ba66fbcc6d42b11e18b62b31be7a5341
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  testNotification: true,
  testChannel: true,
  testChannelGroup: true,
  testTrigger: true,
  testTriggerNotificationIds: true,
  testTriggerNotifications: true,
  testDisplayedNotifications: true,
  testCategory: true,
  testNotificationSettings: true,
  testBadgeCount: true,
  testPowerManagerSettings: true
};
exports.testTriggerNotifications = exports.testTriggerNotificationIds = exports.testTrigger = exports.testPowerManagerSettings = exports.testNotificationSettings = exports.testNotification = exports.testDisplayedNotifications = exports.testChannelGroup = exports.testChannel = exports.testCategory = exports.testBadgeCount = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _version = require("./dist/version");
var Notification = _interopRequireWildcard(require("./dist/types/Notification"));
Object.keys(Notification).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === Notification[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return Notification[key];
    }
  });
});
var NotificationAndroid = _interopRequireWildcard(require("./dist/types/NotificationAndroid"));
Object.keys(NotificationAndroid).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === NotificationAndroid[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return NotificationAndroid[key];
    }
  });
});
var NotificationIOS = _interopRequireWildcard(require("./dist/types/NotificationIOS"));
Object.keys(NotificationIOS).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === NotificationIOS[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return NotificationIOS[key];
    }
  });
});
var TriggerType = _interopRequireWildcard(require("./dist/types/Trigger"));
Object.keys(TriggerType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === TriggerType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return TriggerType[key];
    }
  });
});
var _Library = require("./dist/types/Library");
Object.keys(_Library).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Library[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Library[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var testNotification = {
  id: 'test-id',
  title: 'test-title',
  body: 'test-body',
  android: {
    channelId: 'default'
  }
};
exports.testNotification = testNotification;
var testChannel = {
  id: 'channel-id',
  name: 'channel-name'
};
exports.testChannel = testChannel;
var testChannelGroup = {
  id: 'channel-group-id',
  name: 'channel-group'
};
exports.testChannelGroup = testChannelGroup;
var testTrigger = {
  type: 'TIMESTAMP',
  timestamp: new Date(Date.now()).getTime()
};
exports.testTrigger = testTrigger;
var testTriggerNotificationIds = ['trigger1', 'trigger2'];
exports.testTriggerNotificationIds = testTriggerNotificationIds;
var testTriggerNotifications = [{
  notification: testNotification,
  trigger: testTrigger
}];
exports.testTriggerNotifications = testTriggerNotifications;
var testDisplayedNotifications = [{
  id: testNotification.id,
  date: testTrigger.timestamp,
  notification: testNotification,
  trigger: testTrigger
}];
exports.testDisplayedNotifications = testDisplayedNotifications;
var testCategory = {
  id: 'test-category',
  actions: [{
    id: 'test-action',
    title: 'Test'
  }],
  allowInCarPlay: false,
  allowAnnouncement: false,
  hiddenPreviewsShowTitle: false,
  hiddenPreviewsShowSubtitle: false
};
exports.testCategory = testCategory;
var testNotificationSettings = {
  authorizationStatus: Notification.AuthorizationStatus.AUTHORIZED,
  android: {
    alarm: NotificationAndroid.AndroidNotificationSetting.ENABLED
  },
  ios: {
    alert: true,
    badge: true,
    sound: true,
    carPlay: true,
    criticalAlert: true,
    provisional: true,
    lockScreen: true,
    notificationCenter: true,
    showPreviews: true,
    inAppNotificationSettings: true,
    authorizationStatus: Notification.AuthorizationStatus.AUTHORIZED
  }
};
exports.testNotificationSettings = testNotificationSettings;
var testBadgeCount = 1;
exports.testBadgeCount = testBadgeCount;
var testPowerManagerSettings = {
  activity: 'test-activity',
  manufacturer: 'test-manufacturer',
  model: 'test-model',
  version: 'test-version'
};
exports.testPowerManagerSettings = testPowerManagerSettings;
var _default = Object.assign({
  SDK_VERSION: _version.version
}, Notification, NotificationAndroid, NotificationIOS, {
  TriggerType: TriggerType,
  displayNotification: jest.fn(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (notification) {
      return (notification == null ? void 0 : notification.id) || testNotification.id;
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()),
  createTriggerNotification: jest.fn(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (notification, _) {
      return (notification == null ? void 0 : notification.id) || testNotification.id;
    });
    return function (_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }()),
  getChannel: jest.fn(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (id) {
      return Object.assign({}, testChannel, {
        id: id
      });
    });
    return function (_x4) {
      return _ref3.apply(this, arguments);
    };
  }()),
  getChannels: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return [testChannel];
  })),
  getChannelGroup: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testChannelGroup;
  })),
  getChannelGroups: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return [testChannelGroup];
  })),
  isChannelBlocked: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return false;
  })),
  isChannelCreated: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return true;
  })),
  getTriggerNotificationIds: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testTriggerNotificationIds;
  })),
  getDisplayedNotifications: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testDisplayedNotifications;
  })),
  getTriggerNotifications: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testTriggerNotifications;
  })),
  cancelAllNotifications: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  cancelDisplayedNotifications: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  cancelTriggerNotifications: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  cancelNotification: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  cancelDisplayedNotification: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  cancelTriggerNotification: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  createChannel: jest.fn(function () {
    var _ref18 = (0, _asyncToGenerator2.default)(function* (channel) {
      return (channel == null ? void 0 : channel.id) || testChannel.id;
    });
    return function (_x5) {
      return _ref18.apply(this, arguments);
    };
  }()),
  createChannelGroup: jest.fn(function () {
    var _ref19 = (0, _asyncToGenerator2.default)(function* (channelGroup) {
      return (channelGroup == null ? void 0 : channelGroup.id) || testChannelGroup.id;
    });
    return function (_x6) {
      return _ref19.apply(this, arguments);
    };
  }()),
  createChannelGroups: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  deleteChannel: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  getInitialNotification: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testNotification;
  })),
  onBackgroundEvent: jest.fn(function () {
    return jest.fn();
  }),
  onForegroundEvent: jest.fn(function () {
    return jest.fn();
  }),
  openNotificationSettings: jest.fn(),
  requestPermission: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testNotificationSettings;
  })),
  registerForegroundService: jest.fn(function () {
    return jest.fn();
  }),
  setNotificationCategories: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  getNotificationCategories: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return [testCategory];
  })),
  getNotificationSettings: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testNotificationSettings;
  })),
  getBadgeCount: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testBadgeCount;
  })),
  setBadgeCount: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  incrementBadgeCount: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  decrementBadgeCount: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  isBatteryOptimizationEnabled: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return true;
  })),
  openBatteryOptimizationSettings: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  getPowerManagerInfo: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  openPowerManagerSettings: jest.fn((0, _asyncToGenerator2.default)(function* () {
    return testPowerManagerSettings;
  })),
  stopForegroundService: jest.fn((0, _asyncToGenerator2.default)(function* () {})),
  hideNotificationDrawer: jest.fn((0, _asyncToGenerator2.default)(function* () {}))
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,