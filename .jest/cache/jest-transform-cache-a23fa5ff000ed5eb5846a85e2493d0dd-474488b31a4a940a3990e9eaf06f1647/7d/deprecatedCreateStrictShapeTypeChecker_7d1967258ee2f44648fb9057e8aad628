d0be9f38a1c85195d2693cb0881815f9
'use strict';

var invariant = require('invariant');
function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }
    var allKeys = Object.assign({}, props[propName], shapeTypes);
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }
    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
      rest[_key2 - 4] = arguments[_key2];
    }
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}
module.exports = deprecatedCreateStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImxvY2F0aW9uTmFtZSIsImFsbEtleXMiLCJPYmplY3QiLCJhc3NpZ24iLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdCIsIkFycmF5IiwiX2tleSIsImtleSIsImNoZWNrZXIiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5cyIsImVycm9yIiwiYXBwbHkiLCJjb25jYXQiLCJtZXNzYWdlIiwiY2hhaW5lZENoZWNrVHlwZSIsIl9sZW4yIiwiX2tleTIiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKFxuICAgIGlzUmVxdWlyZWQsXG4gICAgcHJvcHMsXG4gICAgcHJvcE5hbWUsXG4gICAgY29tcG9uZW50TmFtZSxcbiAgICBsb2NhdGlvbixcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICAgIGBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBjb25zdCBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgY29uc3QgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAvLyBwcm9wcy5cbiAgICBjb25zdCBhbGxLZXlzID0gey4uLnByb3BzW3Byb3BOYW1lXSwgLi4uc2hhcGVUeXBlc307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgY29uc3QgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYEludmFsaWQgcHJvcHMuJHtwcm9wTmFtZX0ga2V5IFxcYCR7a2V5fVxcYCBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZXJyb3IubWVzc2FnZSArXG4gICAgICAgICAgICAnXFxuQmFkIG9iamVjdDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGFpbmVkQ2hlY2tUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpIHtcbiAgICByZXR1cm4gY2hlY2tUeXBlKGZhbHNlLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgfVxuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXI7XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBRVosSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBRXRDLFNBQVNDLHNDQUFzQ0EsQ0FBQ0MsVUFBVSxFQUFFO0VBQzFELFNBQVNDLFNBQVNBLENBQ2hCQyxVQUFVLEVBQ1ZDLEtBQUssRUFDTEMsUUFBUSxFQUNSQyxhQUFhLEVBQ2JDLFFBQVEsRUFFUjtJQUNBLElBQUksQ0FBQ0gsS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRTtNQUNwQixJQUFJRixVQUFVLEVBQUU7UUFDZEwsU0FBUyxDQUNQLEtBQUssRUFDTCxzQkFBcUJPLFFBQVEsc0NBQ3RCQyxhQUFhLFFBQ3RCLENBQUM7TUFDSDtNQUNBO0lBQ0Y7SUFDQSxJQUFNRSxTQUFTLEdBQUdKLEtBQUssQ0FBQ0MsUUFBUSxDQUFDO0lBQ2pDLElBQU1JLFFBQVEsR0FBRyxPQUFPRCxTQUFTO0lBQ2pDLElBQU1FLFlBQVksR0FBR0gsUUFBUSxJQUFJLFdBQVc7SUFDNUMsSUFBSUUsUUFBUSxLQUFLLFFBQVEsRUFBRTtNQUN6QlgsU0FBUyxDQUNQLEtBQUssRUFDTCxhQUFXWSxZQUFZLFVBQU1MLFFBQVEsbUJBQWdCSSxRQUFRLDZCQUMxQ0gsYUFBYSwyQkFDbEMsQ0FBQztJQUNIO0lBR0EsSUFBTUssT0FBTyxHQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBT1QsS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBS0osVUFBVSxDQUFDO0lBQUMsU0FBQWEsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUF4QmpEQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQUosSUFBQSxPQUFBQSxJQUFBLFdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7TUFBSkYsSUFBSSxDQUFBRSxJQUFBLFFBQUFKLFNBQUEsQ0FBQUksSUFBQTtJQUFBO0lBeUJQLEtBQUssSUFBTUMsR0FBRyxJQUFJVCxPQUFPLEVBQUU7TUFDekIsSUFBTVUsT0FBTyxHQUFHcEIsVUFBVSxDQUFDbUIsR0FBRyxDQUFDO01BQy9CLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ1p2QixTQUFTLENBQ1AsS0FBSyxFQUNMLG1CQUFpQk8sUUFBUSxjQUFVZSxHQUFHLHVCQUFvQmQsYUFBYSxVQUNyRSxnQkFBZ0IsR0FDaEJnQixJQUFJLENBQUNDLFNBQVMsQ0FBQ25CLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUMzQyxnQkFBZ0IsR0FDaEJpQixJQUFJLENBQUNDLFNBQVMsQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUN2QixVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUN0RCxDQUFDO01BQ0g7TUFDQSxJQUFNd0IsS0FBSyxHQUFHSixPQUFPLENBQUFLLEtBQUEsVUFBQ2xCLFNBQVMsRUFBRVksR0FBRyxFQUFFZCxhQUFhLEVBQUVDLFFBQVEsRUFBQW9CLE1BQUEsQ0FBS1YsSUFBSSxFQUFDO01BQ3ZFLElBQUlRLEtBQUssRUFBRTtRQUNUM0IsU0FBUyxDQUNQLEtBQUssRUFDTDJCLEtBQUssQ0FBQ0csT0FBTyxHQUNYLGdCQUFnQixHQUNoQk4sSUFBSSxDQUFDQyxTQUFTLENBQUNuQixLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQzlDLENBQUM7TUFDSDtJQUNGO0VBQ0Y7RUFDQSxTQUFTd0IsZ0JBQWdCQSxDQUFDekIsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsUUFBUSxFQUFXO0lBQUEsU0FBQXVCLEtBQUEsR0FBQWYsU0FBQSxDQUFBQyxNQUFBLEVBQU5DLElBQUksT0FBQUMsS0FBQSxDQUFBWSxLQUFBLE9BQUFBLEtBQUEsV0FBQUMsS0FBQSxNQUFBQSxLQUFBLEdBQUFELEtBQUEsRUFBQUMsS0FBQTtNQUFKZCxJQUFJLENBQUFjLEtBQUEsUUFBQWhCLFNBQUEsQ0FBQWdCLEtBQUE7SUFBQTtJQUN6RSxPQUFPN0IsU0FBUyxDQUFBd0IsS0FBQSxVQUFDLEtBQUssRUFBRXRCLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLFFBQVEsRUFBQW9CLE1BQUEsQ0FBS1YsSUFBSSxFQUFDO0VBQzVFO0VBQ0FZLGdCQUFnQixDQUFDMUIsVUFBVSxHQUFHRCxTQUFTLENBQUM4QixJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztFQUN4RCxPQUFPSCxnQkFBZ0I7QUFDekI7QUFFQUksTUFBTSxDQUFDQyxPQUFPLEdBQUdsQyxzQ0FBc0MifQ==