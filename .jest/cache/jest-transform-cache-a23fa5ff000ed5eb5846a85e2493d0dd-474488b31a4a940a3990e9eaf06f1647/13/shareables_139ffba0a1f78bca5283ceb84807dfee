63b17f25cda2258d90264d01cf9dd173
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShareable = makeShareable;
exports.makeShareableCloneOnUIRecursive = makeShareableCloneOnUIRecursive;
exports.makeShareableCloneRecursive = makeShareableCloneRecursive;
exports.registerShareableMapping = registerShareableMapping;
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _errors = require("./errors");
var _jsVersion = require("./platform-specific/jsVersion");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var USE_STUB_IMPLEMENTATION = (0, _PlatformChecker.shouldBeUseWeb)();
var _shareableCache = new WeakMap();
var _shareableFlag = Symbol('shareable flag');
var MAGIC_KEY = 'REANIMATED_MAGIC_KEY';
function isHostObject(value) {
  return MAGIC_KEY in value;
}
function registerShareableMapping(shareable, shareableRef) {
  if (USE_STUB_IMPLEMENTATION) {
    return;
  }
  _shareableCache.set(shareable, shareableRef || _shareableFlag);
}
function isPlainJSObject(object) {
  return Object.getPrototypeOf(object) === Object.prototype;
}
var _worklet_65486183985_init_data = {
  code: "function anonymous() {\n  return new Proxy({}, {\n    get: function (_, prop) {\n      if (prop === '_isReanimatedSharedValue') {\n        return false;\n      }\n      throw new Error(\"Trying to access property `\" + prop + \"` of an object which cannot be sent to the UI runtime.\");\n    },\n    set: function () {\n      throw new Error('Trying to write to an object which cannot be sent to the UI runtime.');\n    }\n  });\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Proxy\",\"get\",\"_\",\"prop\",\"Error\",\"set\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/shareables.js\"],\"mappings\":\"AAiDU,SAAAA,SAAMA,CAAA;EAGZ,OAAO,IAAIC,KAAK,CAAC,CAAC,CAAC,EAAE;IACnBC,GAAG,EAAE,SAAAA,CAACC,CAAC,EAAEC,IAAI,EAAK;MAChB,IAAIA,IAAI,KAAK,0BAA0B,EAAE;QAQvC,OAAO,KAAK;MACd;MACA,MAAM,IAAIC,KAAK,iCAAgCD,IAAK,2DAAwD,CAAC;IAC/G,CAAC;IACDE,GAAG,EAAE,SAAAA,CAAA,EAAM;MACT,MAAM,IAAID,KAAK,CAAC,sEAAsE,CAAC;IACzF;EACF,CAAC,CAAC;AACJ\"}"
};
var INACCESSIBLE_OBJECT = {
  __init: function () {
    var _e = [new global.Error(), 1, -27];
    var _f = function _f() {
      return new Proxy({}, {
        get: function get(_, prop) {
          if (prop === '_isReanimatedSharedValue') {
            return false;
          }
          throw new Error("Trying to access property `" + prop + "` of an object which cannot be sent to the UI runtime.");
        },
        set: function set() {
          throw new Error('Trying to write to an object which cannot be sent to the UI runtime.');
        }
      });
    };
    _f._closure = {};
    _f.__initData = _worklet_65486183985_init_data;
    _f.__workletHash = 65486183985;
    _f.__stackDetails = _e;
    _f.__version = "3.1.0";
    return _f;
  }()
};
var DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;
var processedObjectAtThresholdDepth;
var didShowPluginVersionMismatchError = false;
function makeShareableCloneRecursive(value) {
  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
      processedObjectAtThresholdDepth = value;
    } else if (value === processedObjectAtThresholdDepth) {
      throw new Error('Trying to convert a cyclic object to a shareable. This is not supported.');
    }
  } else {
    processedObjectAtThresholdDepth = undefined;
  }
  var type = typeof value;
  var isTypeObject = type === 'object';
  var isTypeFunction = type === 'function';
  if ((isTypeObject || isTypeFunction) && value !== null) {
    var cached = _shareableCache.get(value);
    if (cached === _shareableFlag) {
      return value;
    } else if (cached !== undefined) {
      return cached;
    } else {
      var toAdapt;
      if (Array.isArray(value)) {
        toAdapt = value.map(function (element) {
          return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        });
      } else if (isTypeFunction && value.__workletHash === undefined) {
        toAdapt = value;
      } else if (isHostObject(value)) {
        toAdapt = value;
      } else if (isPlainJSObject(value) || isTypeFunction) {
        toAdapt = {};
        if (value.__workletHash !== undefined) {
          if (__DEV__) {
            if (!didShowPluginVersionMismatchError && value.__version !== _jsVersion.jsVersion) {
              didShowPluginVersionMismatchError = true;
              console.error("[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (" + _jsVersion.jsVersion + " vs. " + value.__version + "). Please clear your Metro bundler cache with `yarn start --reset-cache`,\n              `npm start -- --reset-cache` or `expo start -c` and run the app again.");
            }
            (0, _errors.registerWorkletStackDetails)(value.__workletHash, value.__stackDetails);
            delete value.__stackDetails;
          }
          toAdapt.__initData = makeShareableCloneRecursive(value.__initData, true);
          delete value.__initData;
        }
        for (var _ref of Object.entries(value)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var key = _ref2[0];
          var element = _ref2[1];
          toAdapt[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        }
      } else {
        var inaccessibleObject = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);
        _shareableCache.set(value, inaccessibleObject);
        return inaccessibleObject;
      }
      if (__DEV__) {
        Object.freeze(value);
      }
      var adopted = _NativeReanimated.default.makeShareableClone(toAdapt, shouldPersistRemote);
      _shareableCache.set(value, adopted);
      _shareableCache.set(adopted, _shareableFlag);
      return adopted;
    }
  }
  return _NativeReanimated.default.makeShareableClone(value, shouldPersistRemote);
}
var _worklet_7252926345403_init_data = {
  code: "function makeShareableCloneOnUIRecursive(value) {\n  const {\n    USE_STUB_IMPLEMENTATION,\n    __DEV__\n  } = this._closure;\n  if (USE_STUB_IMPLEMENTATION) {\n    return value;\n  }\n  function cloneRecursive(value) {\n    const type = typeof value;\n    if ((type === 'object' || type === 'function') && value !== null) {\n      let toAdapt;\n      if (Array.isArray(value)) {\n        toAdapt = value.map(function (element) {\n          return cloneRecursive(element);\n        });\n      } else if (value !== undefined) {\n        toAdapt = {};\n        for (const [key, element] of Object.entries(value)) {\n          toAdapt[key] = cloneRecursive(element);\n        }\n      }\n      if (__DEV__) {\n        Object.freeze(value);\n      }\n      return _makeShareableClone(toAdapt);\n    }\n    return _makeShareableClone(value);\n  }\n  return cloneRecursive(value);\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"makeShareableCloneOnUIRecursive\",\"value\",\"USE_STUB_IMPLEMENTATION\",\"__DEV__\",\"_closure\",\"cloneRecursive\",\"type\",\"toAdapt\",\"Array\",\"isArray\",\"map\",\"element\",\"undefined\",\"key\",\"Object\",\"entries\",\"freeze\",\"_makeShareableClone\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/shareables.js\"],\"mappings\":\"AAkLA,SAAAA,+BAASA,CAAgCC,KAAA,EAAK;EAAA;IAAAC,uBAAA;IAAAC;EAAA,SAAAC,QAAA;EAG5C,IAAIF,uBAAuB,EAAE;IAG3B,OAAOD,KAAK;EACd;EACA,SAASI,cAAcA,CAACJ,KAAK,EAAE;IAC7B,MAAMK,IAAI,GAAG,OAAOL,KAAK;IACzB,IAAI,CAACK,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,KAAKL,KAAK,KAAK,IAAI,EAAE;MAChE,IAAIM,OAAO;MACX,IAAIC,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,EAAE;QACxBM,OAAO,GAAGN,KAAK,CAACS,GAAG,CAAC,UAAAC,OAAO;UAAA,OAAIN,cAAc,CAACM,OAAO,CAAC;QAAA,EAAC;MACzD,CAAC,MAAM,IAAIV,KAAK,KAAKW,SAAS,EAAE;QAC9BL,OAAO,GAAG,CAAC,CAAC;QACZ,KAAK,MAAM,CAACM,GAAG,EAAEF,OAAO,CAAC,IAAIG,MAAM,CAACC,OAAO,CAACd,KAAK,CAAC,EAAE;UAClDM,OAAO,CAACM,GAAG,CAAC,GAAGR,cAAc,CAACM,OAAO,CAAC;QACxC;MACF;MACA,IAAIR,OAAO,EAAE;QAEXW,MAAM,CAACE,MAAM,CAACf,KAAK,CAAC;MACtB;MACA,OAAOgB,mBAAmB,CAACV,OAAO,CAAC;IACrC;IACA,OAAOU,mBAAmB,CAAChB,KAAK,CAAC;EACnC;EACA,OAAOI,cAAc,CAACJ,KAAK,CAAC;AAC9B\"}"
};
var makeShareableCloneOnUIRecursive = function () {
  var _e = [new global.Error(), -3, -27];
  var _f = function _f(value) {
    if (USE_STUB_IMPLEMENTATION) {
      return value;
    }
    function cloneRecursive(value) {
      var type = typeof value;
      if ((type === 'object' || type === 'function') && value !== null) {
        var toAdapt;
        if (Array.isArray(value)) {
          toAdapt = value.map(function (element) {
            return cloneRecursive(element);
          });
        } else if (value !== undefined) {
          toAdapt = {};
          for (var _ref3 of Object.entries(value)) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
            var key = _ref4[0];
            var element = _ref4[1];
            toAdapt[key] = cloneRecursive(element);
          }
        }
        if (__DEV__) {
          Object.freeze(value);
        }
        return _makeShareableClone(toAdapt);
      }
      return _makeShareableClone(value);
    }
    return cloneRecursive(value);
  };
  _f._closure = {
    USE_STUB_IMPLEMENTATION: USE_STUB_IMPLEMENTATION,
    __DEV__: __DEV__
  };
  _f.__initData = _worklet_7252926345403_init_data;
  _f.__workletHash = 7252926345403;
  _f.__stackDetails = _e;
  _f.__version = "3.1.0";
  return _f;
}();
var _worklet_13878384066121_init_data = {
  code: "function anonymous() {\n  const {\n    value\n  } = this._closure;\n  return value;\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\shareables.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"value\",\"_closure\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/shareables.js\"],\"mappings\":\"AAqNY,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGZ,OAAOD,KAAK;AACd\"}"
};
function makeShareable(value) {
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  var handle = makeShareableCloneRecursive({
    __init: function () {
      var _e = [new global.Error(), -2, -27];
      var _f = function _f() {
        return value;
      };
      _f._closure = {
        value: value
      };
      _f.__initData = _worklet_13878384066121_init_data;
      _f.__workletHash = 13878384066121;
      _f.__stackDetails = _e;
      _f.__version = "3.1.0";
      return _f;
    }()
  });
  registerShareableMapping(value, handle);
  return value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,