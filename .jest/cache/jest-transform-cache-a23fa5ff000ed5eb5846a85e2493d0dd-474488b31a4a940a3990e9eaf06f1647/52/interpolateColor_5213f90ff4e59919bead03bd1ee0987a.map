{"version":3,"names":["_Colors","require","_core","_interpolation","_useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","exports","_worklet_16784229020252_init_data","code","location","sourceMap","interpolateColorsHSV","_e","global","Error","_f","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","interpolate","s","v","a","hsvToColor","_closure","__initData","__workletHash","__stackDetails","__version","_worklet_11271606745997_init_data","toLinearSpace","x","gamma","map","Math","pow","_worklet_3404264460492_init_data","toGammaSpace","round","_worklet_3641625963943_init_data","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","rgbaColor","_worklet_4380465988886_init_data","getInterpolateRGB","color","processedColor","processColor","undefined","red","green","blue","opacity","_worklet_15867724405287_init_data","getInterpolateHSV","processedHSVColor","RGBtoHSV","_worklet_11438556143388_init_data","interpolateColor","outputRange","colorSpace","arguments","ColorSpace","useInterpolateConfig","RGB","useSharedValue","cache","makeMutable","_worklet_13643278367522_init_data","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"}