81680d756caa0211130769e710ed1c2d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _View = _interopRequireDefault(require("../View/View"));
var _ViewNativeComponent = require("../View/ViewNativeComponent");
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
    color = _ref.color,
    borderless = _ref.borderless,
    radius = _ref.radius,
    foreground = _ref.foreground;
  return (0, React.useMemo)(function () {
    if (_Platform.default.OS === 'android' && _Platform.default.Version >= 21 && (color != null || borderless != null || radius != null)) {
      var processedColor = (0, _processColor.default)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      var nativeRippleValue = {
        type: 'RippleAndroid',
        color: processedColor,
        borderless: borderless === true,
        rippleRadius: radius
      };
      return {
        viewProps: foreground === true ? {
          nativeForegroundAndroid: nativeRippleValue
        } : {
          nativeBackgroundAndroid: nativeRippleValue
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
            _ViewNativeComponent.Commands.setPressed(view, true);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;
          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }
    return null;
  }, [borderless, color, foreground, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvY2Vzc0NvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfUGxhdGZvcm0iLCJfVmlldyIsIl9WaWV3TmF0aXZlQ29tcG9uZW50IiwiX2ludmFyaWFudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwidXNlQW5kcm9pZFJpcHBsZUZvclZpZXciLCJyaXBwbGVDb25maWciLCJ2aWV3UmVmIiwiX3JlZiIsImNvbG9yIiwiYm9yZGVybGVzcyIsInJhZGl1cyIsImZvcmVncm91bmQiLCJ1c2VNZW1vIiwiUGxhdGZvcm0iLCJPUyIsIlZlcnNpb24iLCJwcm9jZXNzZWRDb2xvciIsInByb2Nlc3NDb2xvciIsImludmFyaWFudCIsIm5hdGl2ZVJpcHBsZVZhbHVlIiwidHlwZSIsInJpcHBsZVJhZGl1cyIsInZpZXdQcm9wcyIsIm5hdGl2ZUZvcmVncm91bmRBbmRyb2lkIiwibmF0aXZlQmFja2dyb3VuZEFuZHJvaWQiLCJvblByZXNzSW4iLCJldmVudCIsInZpZXciLCJjdXJyZW50IiwiX2V2ZW50JG5hdGl2ZUV2ZW50JGxvIiwiX2V2ZW50JG5hdGl2ZUV2ZW50JGxvMiIsIkNvbW1hbmRzIiwiaG90c3BvdFVwZGF0ZSIsIm5hdGl2ZUV2ZW50IiwibG9jYXRpb25YIiwibG9jYXRpb25ZIiwic2V0UHJlc3NlZCIsIm9uUHJlc3NNb3ZlIiwiX2V2ZW50JG5hdGl2ZUV2ZW50JGxvMyIsIl9ldmVudCRuYXRpdmVFdmVudCRsbzQiLCJvblByZXNzT3V0Il0sInNvdXJjZXMiOlsidXNlQW5kcm9pZFJpcHBsZUZvclZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1ByZXNzRXZlbnR9IGZyb20gJy4uLy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcblxuaW1wb3J0IHByb2Nlc3NDb2xvciBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCBWaWV3IGZyb20gJy4uL1ZpZXcvVmlldyc7XG5pbXBvcnQge0NvbW1hbmRzfSBmcm9tICcuLi9WaWV3L1ZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgTmF0aXZlQmFja2dyb3VuZFByb3AgPSAkUmVhZE9ubHk8e3xcbiAgdHlwZTogJ1JpcHBsZUFuZHJvaWQnLFxuICBjb2xvcjogP251bWJlcixcbiAgYm9yZGVybGVzczogYm9vbGVhbixcbiAgcmlwcGxlUmFkaXVzOiA/bnVtYmVyLFxufH0+O1xuXG5leHBvcnQgdHlwZSBSaXBwbGVDb25maWcgPSB7fFxuICBjb2xvcj86IENvbG9yVmFsdWUsXG4gIGJvcmRlcmxlc3M/OiBib29sZWFuLFxuICByYWRpdXM/OiBudW1iZXIsXG4gIGZvcmVncm91bmQ/OiBib29sZWFuLFxufH07XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGV2ZW50IGhhbmRsZXJzIGFuZCBwcm9wcyBmb3IgY29uZmlndXJpbmcgdGhlIHJpcHBsZSBlZmZlY3Qgb25cbiAqIHN1cHBvcnRlZCB2ZXJzaW9ucyBvZiBBbmRyb2lkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBbmRyb2lkUmlwcGxlRm9yVmlldyhcbiAgcmlwcGxlQ29uZmlnOiA/UmlwcGxlQ29uZmlnLFxuICB2aWV3UmVmOiB7fGN1cnJlbnQ6IG51bGwgfCBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3Pnx9LFxuKTogPyRSZWFkT25seTx7fFxuICBvblByZXNzSW46IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc01vdmU6IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc091dDogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICB2aWV3UHJvcHM6XG4gICAgfCAkUmVhZE9ubHk8e3xuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZDogTmF0aXZlQmFja2dyb3VuZFByb3B8fT5cbiAgICB8ICRSZWFkT25seTx7fG5hdGl2ZUZvcmVncm91bmRBbmRyb2lkOiBOYXRpdmVCYWNrZ3JvdW5kUHJvcHx9Pixcbnx9PiB7XG4gIGNvbnN0IHtjb2xvciwgYm9yZGVybGVzcywgcmFkaXVzLCBmb3JlZ3JvdW5kfSA9IHJpcHBsZUNvbmZpZyA/PyB7fTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyAmJlxuICAgICAgUGxhdGZvcm0uVmVyc2lvbiA+PSAyMSAmJlxuICAgICAgKGNvbG9yICE9IG51bGwgfHwgYm9yZGVybGVzcyAhPSBudWxsIHx8IHJhZGl1cyAhPSBudWxsKVxuICAgICkge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3IoY29sb3IpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBwcm9jZXNzZWRDb2xvciA9PSBudWxsIHx8IHR5cGVvZiBwcm9jZXNzZWRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAgICdVbmV4cGVjdGVkIGNvbG9yIGdpdmVuIGZvciBSaXBwbGUgY29sb3InLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgbmF0aXZlUmlwcGxlVmFsdWUgPSB7XG4gICAgICAgIHR5cGU6ICdSaXBwbGVBbmRyb2lkJyxcbiAgICAgICAgY29sb3I6IHByb2Nlc3NlZENvbG9yLFxuICAgICAgICBib3JkZXJsZXNzOiBib3JkZXJsZXNzID09PSB0cnVlLFxuICAgICAgICByaXBwbGVSYWRpdXM6IHJhZGl1cyxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZpZXdQcm9wczpcbiAgICAgICAgICBmb3JlZ3JvdW5kID09PSB0cnVlXG4gICAgICAgICAgICA/IHtuYXRpdmVGb3JlZ3JvdW5kQW5kcm9pZDogbmF0aXZlUmlwcGxlVmFsdWV9XG4gICAgICAgICAgICA6IHtuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZDogbmF0aXZlUmlwcGxlVmFsdWV9LFxuICAgICAgICBvblByZXNzSW4oZXZlbnQ6IFByZXNzRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld1JlZi5jdXJyZW50O1xuICAgICAgICAgIGlmICh2aWV3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIENvbW1hbmRzLmhvdHNwb3RVcGRhdGUoXG4gICAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWCA/PyAwLFxuICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5sb2NhdGlvblkgPz8gMCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBDb21tYW5kcy5zZXRQcmVzc2VkKHZpZXcsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25QcmVzc01vdmUoZXZlbnQ6IFByZXNzRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld1JlZi5jdXJyZW50O1xuICAgICAgICAgIGlmICh2aWV3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIENvbW1hbmRzLmhvdHNwb3RVcGRhdGUoXG4gICAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWCA/PyAwLFxuICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5sb2NhdGlvblkgPz8gMCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblByZXNzT3V0KGV2ZW50OiBQcmVzc0V2ZW50KTogdm9pZCB7XG4gICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWYuY3VycmVudDtcbiAgICAgICAgICBpZiAodmlldyAhPSBudWxsKSB7XG4gICAgICAgICAgICBDb21tYW5kcy5zZXRQcmVzc2VkKHZpZXcsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgW2JvcmRlcmxlc3MsIGNvbG9yLCBmb3JlZ3JvdW5kLCByYWRpdXMsIHZpZXdSZWZdKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFhQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxvQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssS0FBQSxHQUFBQyx1QkFBQSxDQUFBTixPQUFBO0FBQStCLFNBQUFPLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBRix3QkFBQU0sR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZCxHQUFBLEVBQUFXLEdBQUEsU0FBQUksSUFBQSxHQUFBUixxQkFBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFWLEdBQUEsRUFBQVcsR0FBQSxjQUFBSSxJQUFBLEtBQUFBLElBQUEsQ0FBQVYsR0FBQSxJQUFBVSxJQUFBLENBQUFDLEdBQUEsS0FBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFILE1BQUEsRUFBQUssR0FBQSxFQUFBSSxJQUFBLFlBQUFULE1BQUEsQ0FBQUssR0FBQSxJQUFBWCxHQUFBLENBQUFXLEdBQUEsU0FBQUwsTUFBQSxDQUFBSixPQUFBLEdBQUFGLEdBQUEsTUFBQUcsS0FBQSxJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQSxZQUFBQSxNQUFBO0FBcUJoQixTQUFTVyx1QkFBdUJBLENBQzdDQyxZQUEyQixFQUMzQkMsT0FBMEQsRUFReEQ7RUFDRixJQUFBQyxJQUFBLEdBQWdERixZQUFZLFdBQVpBLFlBQVksR0FBSSxDQUFDLENBQUM7SUFBM0RHLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO0lBQUVDLFVBQVUsR0FBQUYsSUFBQSxDQUFWRSxVQUFVO0lBQUVDLE1BQU0sR0FBQUgsSUFBQSxDQUFORyxNQUFNO0lBQUVDLFVBQVUsR0FBQUosSUFBQSxDQUFWSSxVQUFVO0VBRTVDLE9BQU8sSUFBQUMsYUFBTyxFQUFDLFlBQU07SUFDbkIsSUFDRUMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLFNBQVMsSUFDekJELGlCQUFRLENBQUNFLE9BQU8sSUFBSSxFQUFFLEtBQ3JCUCxLQUFLLElBQUksSUFBSSxJQUFJQyxVQUFVLElBQUksSUFBSSxJQUFJQyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQ3ZEO01BQ0EsSUFBTU0sY0FBYyxHQUFHLElBQUFDLHFCQUFZLEVBQUNULEtBQUssQ0FBQztNQUMxQyxJQUFBVSxrQkFBUyxFQUNQRixjQUFjLElBQUksSUFBSSxJQUFJLE9BQU9BLGNBQWMsS0FBSyxRQUFRLEVBQzVELHlDQUNGLENBQUM7TUFFRCxJQUFNRyxpQkFBaUIsR0FBRztRQUN4QkMsSUFBSSxFQUFFLGVBQWU7UUFDckJaLEtBQUssRUFBRVEsY0FBYztRQUNyQlAsVUFBVSxFQUFFQSxVQUFVLEtBQUssSUFBSTtRQUMvQlksWUFBWSxFQUFFWDtNQUNoQixDQUFDO01BRUQsT0FBTztRQUNMWSxTQUFTLEVBQ1BYLFVBQVUsS0FBSyxJQUFJLEdBQ2Y7VUFBQ1ksdUJBQXVCLEVBQUVKO1FBQWlCLENBQUMsR0FDNUM7VUFBQ0ssdUJBQXVCLEVBQUVMO1FBQWlCLENBQUM7UUFDbERNLFNBQVMsV0FBQUEsVUFBQ0MsS0FBaUIsRUFBUTtVQUNqQyxJQUFNQyxJQUFJLEdBQUdyQixPQUFPLENBQUNzQixPQUFPO1VBQzVCLElBQUlELElBQUksSUFBSSxJQUFJLEVBQUU7WUFBQSxJQUFBRSxxQkFBQSxFQUFBQyxzQkFBQTtZQUNoQkMsNkJBQVEsQ0FBQ0MsYUFBYSxDQUNwQkwsSUFBSSxHQUFBRSxxQkFBQSxHQUNKSCxLQUFLLENBQUNPLFdBQVcsQ0FBQ0MsU0FBUyxZQUFBTCxxQkFBQSxHQUFJLENBQUMsR0FBQUMsc0JBQUEsR0FDaENKLEtBQUssQ0FBQ08sV0FBVyxDQUFDRSxTQUFTLFlBQUFMLHNCQUFBLEdBQUksQ0FDakMsQ0FBQztZQUNEQyw2QkFBUSxDQUFDSyxVQUFVLENBQUNULElBQUksRUFBRSxJQUFJLENBQUM7VUFDakM7UUFDRixDQUFDO1FBQ0RVLFdBQVcsV0FBQUEsWUFBQ1gsS0FBaUIsRUFBUTtVQUNuQyxJQUFNQyxJQUFJLEdBQUdyQixPQUFPLENBQUNzQixPQUFPO1VBQzVCLElBQUlELElBQUksSUFBSSxJQUFJLEVBQUU7WUFBQSxJQUFBVyxzQkFBQSxFQUFBQyxzQkFBQTtZQUNoQlIsNkJBQVEsQ0FBQ0MsYUFBYSxDQUNwQkwsSUFBSSxHQUFBVyxzQkFBQSxHQUNKWixLQUFLLENBQUNPLFdBQVcsQ0FBQ0MsU0FBUyxZQUFBSSxzQkFBQSxHQUFJLENBQUMsR0FBQUMsc0JBQUEsR0FDaENiLEtBQUssQ0FBQ08sV0FBVyxDQUFDRSxTQUFTLFlBQUFJLHNCQUFBLEdBQUksQ0FDakMsQ0FBQztVQUNIO1FBQ0YsQ0FBQztRQUNEQyxVQUFVLFdBQUFBLFdBQUNkLEtBQWlCLEVBQVE7VUFDbEMsSUFBTUMsSUFBSSxHQUFHckIsT0FBTyxDQUFDc0IsT0FBTztVQUM1QixJQUFJRCxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2hCSSw2QkFBUSxDQUFDSyxVQUFVLENBQUNULElBQUksRUFBRSxLQUFLLENBQUM7VUFDbEM7UUFDRjtNQUNGLENBQUM7SUFDSDtJQUNBLE9BQU8sSUFBSTtFQUNiLENBQUMsRUFBRSxDQUFDbEIsVUFBVSxFQUFFRCxLQUFLLEVBQUVHLFVBQVUsRUFBRUQsTUFBTSxFQUFFSixPQUFPLENBQUMsQ0FBQztBQUN0RCJ9