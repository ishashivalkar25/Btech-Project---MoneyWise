757ffebd75641d8a4228da322b7e50d9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _invariant = _interopRequireDefault(require("invariant"));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
    directEventTypes = viewConfig.directEventTypes;
  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        (0, _invariant.default)(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }
  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }
  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}
exports.register = function (name, callback) {
  (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
  viewConfigCallbacks.set(name, callback);
  return name;
};
exports.get = function (name) {
  var viewConfig;
  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);
    if (typeof callback !== 'function') {
      (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
    viewConfigCallbacks.set(name, null);
  } else {
    viewConfig = viewConfigs.get(name);
  }
  (0, _invariant.default)(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbnZhcmlhbnQiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXhwb3J0cyIsInZpZXdDb25maWdDYWxsYmFja3MiLCJNYXAiLCJ2aWV3Q29uZmlncyIsInByb2Nlc3NFdmVudFR5cGVzIiwidmlld0NvbmZpZyIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJfX0RFVl9fIiwidG9wTGV2ZWxUeXBlIiwiaW52YXJpYW50IiwicmVnaXN0ZXIiLCJuYW1lIiwiY2FsbGJhY2siLCJoYXMiLCJzZXQiLCJnZXQiLCJ0ZXN0Il0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZ2VuZXJhdGVkIFNpZ25lZFNvdXJjZTw8YmRhNDkwYTAxNTEzZDQ1MjYwMDVjMWUwMjlkNWNlOTM+PlxuICpcbiAqIFRoaXMgZmlsZSB3YXMgc3luYydkIGZyb20gdGhlIGZhY2Vib29rL3JlYWN0IHJlcG9zaXRvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge3R5cGUgVmlld0NvbmZpZ30gZnJvbSAnLi9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLy8gRXZlbnQgY29uZmlnc1xuY29uc3QgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzOiB7XG4gIFtldmVudE5hbWU6IHN0cmluZ106ICRSZWFkT25seTx7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6ICRSZWFkT25seTx7XG4gICAgICBjYXB0dXJlZDogc3RyaW5nLFxuICAgICAgYnViYmxlZDogc3RyaW5nLFxuICAgICAgc2tpcEJ1YmJsaW5nPzogP2Jvb2xlYW4sXG4gICAgfT4sXG4gIH0+LFxuICAuLi4sXG59ID0ge307XG5jb25zdCBjdXN0b21EaXJlY3RFdmVudFR5cGVzOiB7XG4gIFtldmVudE5hbWU6IHN0cmluZ106ICRSZWFkT25seTx7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogc3RyaW5nLFxuICB9PixcbiAgLi4uLFxufSA9IHt9O1xuXG5leHBvcnRzLmN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcyA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcztcbmV4cG9ydHMuY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXM7XG5cbmNvbnN0IHZpZXdDb25maWdDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG5jb25zdCB2aWV3Q29uZmlncyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50VHlwZXModmlld0NvbmZpZzogVmlld0NvbmZpZyk6IHZvaWQge1xuICBjb25zdCB7YnViYmxpbmdFdmVudFR5cGVzLCBkaXJlY3RFdmVudFR5cGVzfSA9IHZpZXdDb25maWc7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwgJiYgZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsLFxuICAgICAgICAgICdFdmVudCBjYW5ub3QgYmUgYm90aCBkaXJlY3QgYW5kIGJ1YmJsaW5nOiAlcycsXG4gICAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChidWJibGluZ0V2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGJ1YmJsaW5nRXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPVxuICAgICAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJlY3RFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICBpZiAoY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID0gZGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5hdGl2ZSB2aWV3L2NvbXBvbmVudCBieSBuYW1lLlxuICogQSBjYWxsYmFjayBpcyBwcm92aWRlZCB0byBsb2FkIHRoZSB2aWV3IGNvbmZpZyBmcm9tIFVJTWFuYWdlci5cbiAqIFRoZSBjYWxsYmFjayBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgdmlldyBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZXhwb3J0cy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IFZpZXdDb25maWcpOiBzdHJpbmcge1xuICBpbnZhcmlhbnQoXG4gICAgIXZpZXdDb25maWdDYWxsYmFja3MuaGFzKG5hbWUpLFxuICAgICdUcmllZCB0byByZWdpc3RlciB0d28gdmlld3Mgd2l0aCB0aGUgc2FtZSBuYW1lICVzJyxcbiAgICBuYW1lLFxuICApO1xuICBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICdWaWV3IGNvbmZpZyBnZXR0ZXIgY2FsbGJhY2sgZm9yIGNvbXBvbmVudCBgJXNgIG11c3QgYmUgYSBmdW5jdGlvbiAocmVjZWl2ZWQgYCVzYCknLFxuICAgIG5hbWUsXG4gICAgY2FsbGJhY2sgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgY2FsbGJhY2ssXG4gICk7XG4gIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIG5hbWU7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIGNvbmZpZyBmb3IgdGhlIHNwZWNpZmllZCB2aWV3LlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgdmlldyBoYXMgYmVlbiB1c2VkLFxuICogVGhpcyBjb25maWd1cmF0aW9uIHdpbGwgYmUgbGF6eS1sb2FkZWQgZnJvbSBVSU1hbmFnZXIuXG4gKi9cbmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24obmFtZTogc3RyaW5nKTogVmlld0NvbmZpZyB7XG4gIGxldCB2aWV3Q29uZmlnO1xuICBpZiAoIXZpZXdDb25maWdzLmhhcyhuYW1lKSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdmlld0NvbmZpZ0NhbGxiYWNrcy5nZXQobmFtZSk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXcgY29uZmlnIGdldHRlciBjYWxsYmFjayBmb3IgY29tcG9uZW50IGAlc2AgbXVzdCBiZSBhIGZ1bmN0aW9uIChyZWNlaXZlZCBgJXNgKS4lcycsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNhbGxiYWNrID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNhbGxiYWNrLFxuICAgICAgICB0eXBlb2YgbmFtZVswXSA9PT0gJ3N0cmluZycgJiYgL1thLXpdLy50ZXN0KG5hbWVbMF0pXG4gICAgICAgICAgPyAnIE1ha2Ugc3VyZSB0byBzdGFydCBjb21wb25lbnQgbmFtZXMgd2l0aCBhIGNhcGl0YWwgbGV0dGVyLidcbiAgICAgICAgICA6ICcnLFxuICAgICAgKTtcbiAgICB9XG4gICAgdmlld0NvbmZpZyA9IGNhbGxiYWNrKCk7XG4gICAgcHJvY2Vzc0V2ZW50VHlwZXModmlld0NvbmZpZyk7XG4gICAgdmlld0NvbmZpZ3Muc2V0KG5hbWUsIHZpZXdDb25maWcpO1xuXG4gICAgLy8gQ2xlYXIgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBjb25maWcgaXMgc2V0IHNvIHRoYXRcbiAgICAvLyB3ZSBkb24ndCBtYXNrIGFueSBlcnJvcnMgZHVyaW5nIHJlZ2lzdHJhdGlvbi5cbiAgICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICB2aWV3Q29uZmlnID0gdmlld0NvbmZpZ3MuZ2V0KG5hbWUpO1xuICB9XG4gIGludmFyaWFudCh2aWV3Q29uZmlnLCAnVmlldyBjb25maWcgbm90IGZvdW5kIGZvciBuYW1lICVzJywgbmFtZSk7XG4gIHJldHVybiB2aWV3Q29uZmlnO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBYUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBR2IsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBTUUsd0JBU0wsR0FBRyxDQUFDLENBQUM7QUFDTixJQUFNQyxzQkFLTCxHQUFHLENBQUMsQ0FBQztBQUVOQyxPQUFPLENBQUNGLHdCQUF3QixHQUFHQSx3QkFBd0I7QUFDM0RFLE9BQU8sQ0FBQ0Qsc0JBQXNCLEdBQUdBLHNCQUFzQjtBQUV2RCxJQUFNRSxt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