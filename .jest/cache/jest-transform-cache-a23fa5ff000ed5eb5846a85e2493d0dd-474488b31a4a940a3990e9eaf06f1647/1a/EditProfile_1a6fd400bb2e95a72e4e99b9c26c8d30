b14ddd371fb019f03d1f3215e870cb64
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../Firebase/config");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _jsxRuntime = require("react/jsx-runtime");
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var EditProfile = function EditProfile(_ref) {
  var navigation = _ref.navigation,
    route = _ref.route;
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    name = _React$useState2[0],
    setName = _React$useState2[1];
  var _React$useState3 = _react.default.useState(''),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    email = _React$useState4[0],
    setEmail = _React$useState4[1];
  var _React$useState5 = _react.default.useState(''),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    phoneNo = _React$useState6[0],
    setPhoneNo = _React$useState6[1];
  var _React$useState7 = _react.default.useState(new Date()),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    DOB = _React$useState8[0],
    setDOB = _React$useState8[1];
  var _React$useState9 = _react.default.useState(''),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
    bankName = _React$useState10[0],
    setBankName = _React$useState10[1];
  var _React$useState11 = _react.default.useState(0.0),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    accBalance = _React$useState12[0],
    setAccBalance = _React$useState12[1];
  var _React$useState13 = _react.default.useState(true),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    phoneNumberValidity = _React$useState14[0],
    setPhoneNumberValidity = _React$useState14[1];
  var _React$useState15 = _react.default.useState(true),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    accBalanceValidity = _React$useState16[0],
    setAccBalanceValidity = _React$useState16[1];
  var _React$useState17 = _react.default.useState(false),
    _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
    show = _React$useState18[0],
    setShow = _React$useState18[1];
  var _React$useState19 = _react.default.useState(''),
    _React$useState20 = (0, _slicedToArray2.default)(_React$useState19, 2),
    formattedDate = _React$useState20[0],
    setFormattedDate = _React$useState20[1];
  var _React$useState21 = _react.default.useState(false),
    _React$useState22 = (0, _slicedToArray2.default)(_React$useState21, 2),
    isChanged = _React$useState22[0],
    setChanged = _React$useState22[1];
  _react.default.useEffect(function () {
    var tempDate = new Date(route.params.DOB);
    console.log(tempDate, '****************************************************************');
    setName(route.params.name);
    setPhoneNo(route.params.phoneNo);
    setDOB(tempDate);
    setBankName(route.params.bankName);
    setAccBalance(route.params.accBalance);
    setFormattedDate(tempDate.getDate() + ' / ' + (tempDate.getMonth() + 1) + ' / ' + tempDate.getFullYear());
  }, [route.params]);
  var handlePhoneNumberChange = function handlePhoneNumberChange(phoneNumberInput) {
    var reg = /^[0]?[789]\d{9}$/;
    if (reg.test(phoneNumberInput) === true) {
      setPhoneNumberValidity(true);
      setPhoneNo(phoneNumberInput);
      setChanged(true);
    } else {
      setPhoneNumberValidity(false);
    }
  };
  var handleAccBalanceChange = function handleAccBalanceChange(accBalanceInput) {
    var reg = new RegExp('^[0-9]*$');
    if (reg.test(accBalanceInput) === true) {
      setAccBalanceValidity(true);
      setAccBalance(accBalanceInput);
      setChanged(true);
    } else {
      setAccBalanceValidity(false);
    }
  };
  var onChange = function onChange(event, selectedDate) {
    console.log('Inside', event);
    setShow(false);
    if (event.type == 'set') {
      setChanged(true);
      var todayDate = new Date();
      if (selectedDate.getTime() >= todayDate.getTime()) {
        alert('Please select correct date of birth!');
      } else {
        var currentDate = selectedDate || DOB;
        setDOB(currentDate);
        console.log(currentDate.getDate(), 'new');
        var fDate = currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();
        setFormattedDate(fDate);
        console.log(fDate, 'Date');
      }
    }
  };
  var validateInputOnSubmit = function validateInputOnSubmit() {
    console.log(name, phoneNo, DOB, bankName, accBalance);
    if (name === '' || phoneNo == '' || !DOB || bankName === '' || !phoneNumberValidity || !accBalanceValidity) {
      alert('Please enter all required fields correctly!');
      return false;
    }
    return true;
  };
  var updateUserDetails = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (validateInputOnSubmit()) {
        console.log('Updated');
        try {
          var docRef = (0, _config.doc)(_config.db, 'User', 'o4qWuRGsfDRbSyuA1OO2yljfjDr1');
          yield (0, _config.updateDoc)(docRef, {
            DOB: DOB,
            accBalance: accBalance,
            bankName: bankName,
            name: name,
            phoneNo: phoneNo
          });
          console.log('User Details Updated Successfully!');
          navigation.navigate('Profile');
        } catch (e) {
          console.log(e);
        }
      } else {
        console.log('Not Updated');
      }
    });
    return function updateUserDetails() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    children: (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
      source: require('../Assets/Background.jpeg'),
      style: {
        width: width,
        height: '100%'
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.container,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.action,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../Assets/profile1.png'),
              style: styles.img
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Name",
              placeholderTextColor: "#666666",
              autoCorrect: false,
              style: [styles.textInput],
              onChangeText: function onChangeText(text) {
                setName(text);
                setChanged(true);
              },
              children: name
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.action,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../Assets/telephone.png'),
              style: styles.img
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Phone",
              placeholderTextColor: "#666666",
              keyboardType: "number-pad",
              autoCorrect: false,
              style: [styles.textInput],
              onChangeText: function onChangeText(text) {
                return handlePhoneNumberChange(text);
              },
              children: phoneNo
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.action,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../Assets/calendar.png'),
              style: styles.img
            }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
              onPress: function onPress() {
                return setShow(true);
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.textInput,
                children: formattedDate
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.action,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../Assets/bank.png'),
              style: styles.img
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Bank Name",
              placeholderTextColor: "#666666",
              autoCorrect: false,
              style: [styles.textInput],
              onChangeText: function onChangeText(text) {
                setBankName(text);
                setChanged(true);
              },
              children: bankName
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.action,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../Assets/balance.png'),
              style: styles.img
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Account Balance",
              placeholderTextColor: "#666666",
              keyboardType: "number-pad",
              autoCorrect: false,
              style: [styles.textInput],
              onChangeText: function onChangeText(text) {
                return handleAccBalanceChange(text);
              },
              children: accBalance
            })]
          }), show && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
            testID: "dateTimePicker",
            value: DOB,
            display: "default",
            is24Hour: true,
            onChange: onChange,
            style: styles.datePicker
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: [{
              backgroundColor: '#006A42',
              borderRadius: 200,
              alignItems: 'center',
              width: 250,
              paddingVertical: 5,
              marginVertical: 100,
              alignSelf: 'center'
            }, isChanged ? styles.enabled : styles.disabled],
            onPress: function onPress() {
              return updateUserDetails();
            },
            disabled: !isChanged,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "white",
                fontSize: 20,
                fontWeight: 'bold',
                margin: 0
              },
              children: " Submit "
            })
          })]
        })
      })
    })
  });
};
var _default = EditProfile;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 25,
    paddingVertical: 30,
    width: '95%',
    height: 300,
    alignSelf: 'center',
    marginVertical: 35,
    shadowOpacity: 0.5,
    shadowColor: 'black',
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 6
  },
  commandButton: {
    padding: 15,
    borderRadius: 10,
    backgroundColor: '#FF6347',
    alignItems: 'center',
    marginTop: 10
  },
  action: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    height: 50,
    paddingHorizontal: 35,
    paddingBottom: 5,
    marginHorizontal: 20,
    borderBottomColor: 'rgba(0,0,0,0.5)',
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
  },
  actionError: {
    flexDirection: 'row',
    marginTop: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#FF0000',
    paddingBottom: 5
  },
  img: {
    height: 19,
    width: 19,
    marginRight: 20
  },
  textInput: {
    color: '#006A42',
    fontSize: 15,
    padding: 0,
    margin: 0,
    height: 40,
    textAlignVertical: 'bottom'
  },
  disabled: {
    opacity: 0.7
  },
  enabled: {
    opacity: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,