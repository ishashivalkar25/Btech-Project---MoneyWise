{"version":3,"names":["LogBoxSymbolication","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","LogBoxLog","data","_classCallCheck2","symbolicated","error","stack","status","level","type","message","category","componentStack","codeFrame","isComponentError","count","_createClass2","value","incrementCount","getAvailableStack","retrySymbolicate","callback","deleteStack","handleSymbolicate","symbolicate","_this","updateStatus","then","lastStatus","_default","exports"],"sources":["LogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {Stack} from './LogBoxSymbolication';\nimport type {\n  Category,\n  CodeFrame,\n  ComponentStack,\n  Message,\n} from './parseLogBoxLog';\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  type?: ?string,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  type: ?string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"],"mappings":"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"}