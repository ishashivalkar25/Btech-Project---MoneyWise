0d20a63a6a0c47a7154b37a645edc561
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DialogInput = function (_PureComponent) {
  (0, _inherits2.default)(DialogInput, _PureComponent);
  var _super = _createSuper(DialogInput);
  function DialogInput(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DialogInput);
    _this = _super.call(this, props);
    _this.handleOnRequestClose = function () {
      _this.props.closeDialog();
      _this.setState({
        inputModal: ''
      });
    };
    _this.handleOnKeyPress = function () {
      _this.setState({
        openning: false
      });
    };
    _this.handleOnChangeText = function (inputModal) {
      _this.setState({
        inputModal: inputModal,
        openning: false
      });
    };
    _this.handleOnCloseDialog = function () {
      _this.props.closeDialog();
      _this.setState({
        inputModal: '',
        openning: true
      });
    };
    _this.handleSubmit = function () {
      _this.props.submitInput(_this.state.inputModal);
      _this.setState({
        inputModal: '',
        openning: true
      });
    };
    _this.state = {
      inputModal: props.initValueTextInput,
      openning: true
    };
    return _this;
  }
  (0, _createClass2.default)(DialogInput, [{
    key: "render",
    value: function render() {
      var title = this.props.title || '';
      var hintInput = this.props.hintInput || '';
      var value = '';
      if (!this.state.openning) {
        value = this.state.inputModal;
      } else {
        value = this.props.initValueTextInput ? this.props.initValueTextInput : '';
      }
      var textProps = this.props.textInputProps || null;
      var modalStyleProps = this.props.modalStyle || {};
      var dialogStyleProps = this.props.dialogStyle || {};
      var placeholderTextColor = this.props.placeholderTextColor;
      var animationType = this.props.animationType || 'fade';
      var cancelText = this.props.cancelText || 'Cancel';
      var submitText = this.props.submitText || 'Submit';
      cancelText = _reactNative.Platform.OS === 'ios' ? cancelText : cancelText.toUpperCase();
      submitText = _reactNative.Platform.OS === 'ios' ? submitText : submitText.toUpperCase();
      return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
        animationType: animationType,
        transparent: true,
        visible: this.props.isDialogVisible,
        onRequestClose: this.handleOnRequestClose,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.container, Object.assign({}, modalStyleProps)],
          children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.container,
            activeOpacity: 1,
            onPress: this.handleOnCloseDialog,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: [styles.modal_container, Object.assign({}, dialogStyleProps)],
              children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.modal_body,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.title_modal,
                  children: title
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: [this.props.message ? styles.message_modal : {
                    height: 0
                  }],
                  children: this.props.message
                }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                  style: styles.input_container,
                  autoCorrect: textProps && textProps.autoCorrect == false ? false : true,
                  autoCapitalize: textProps && textProps.autoCapitalize ? textProps.autoCapitalize : 'none',
                  clearButtonMode: textProps && textProps.clearButtonMode ? textProps.clearButtonMode : 'never',
                  clearTextOnFocus: textProps && textProps.clearTextOnFocus == true ? textProps.clearTextOnFocus : false,
                  keyboardType: textProps && textProps.keyboardType ? textProps.keyboardType : 'default',
                  secureTextEntry: textProps && textProps.secureTextEntry ? textProps.secureTextEntry : false,
                  maxLength: textProps && textProps.maxLength > 0 ? textProps.maxLength : null,
                  autoFocus: true,
                  onKeyPress: this.handleOnKeyPress,
                  underlineColorAndroid: "transparent",
                  placeholder: hintInput,
                  placeholderTextColor: placeholderTextColor,
                  onChangeText: this.handleOnChangeText,
                  value: value
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.btn_container,
                children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.touch_modal,
                  onPress: this.handleOnCloseDialog,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.btn_modal_left,
                    children: cancelText
                  })
                }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: styles.divider_btn
                }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.touch_modal,
                  onPress: this.handleSubmit,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.btn_modal_right,
                    children: submitText
                  })
                })]
              })]
            })
          })
        })
      });
    }
  }]);
  return DialogInput;
}(_react.PureComponent);
var styles = _reactNative.StyleSheet.create({
  container: Object.assign({
    flex: 1,
    width: '100%',
    height: '100%',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center'
  }, _reactNative.Platform.select({
    android: {
      backgroundColor: 'rgba(0,0,0,0.62)'
    }
  })),
  modal_container: Object.assign({
    marginLeft: 30,
    marginRight: 30
  }, _reactNative.Platform.select({
    ios: {
      backgroundColor: '#E3E6E7',
      borderRadius: 10,
      minWidth: 300
    },
    android: {
      backgroundColor: '#fff',
      elevation: 24,
      minWidth: 280,
      borderRadius: 5
    }
  })),
  modal_body: Object.assign({}, _reactNative.Platform.select({
    ios: {
      padding: 10
    },
    android: {
      padding: 24
    }
  })),
  title_modal: Object.assign({
    fontWeight: 'bold',
    fontSize: 20
  }, _reactNative.Platform.select({
    ios: {
      marginTop: 10,
      textAlign: 'center',
      marginBottom: 5
    },
    android: {
      textAlign: 'left'
    }
  })),
  message_modal: Object.assign({
    fontSize: 16
  }, _reactNative.Platform.select({
    ios: {
      textAlign: 'center',
      marginBottom: 10
    },
    android: {
      textAlign: 'left',
      marginTop: 20
    }
  })),
  input_container: Object.assign({
    textAlign: 'left',
    fontSize: 16,
    color: 'rgba(0,0,0,0.54)'
  }, _reactNative.Platform.select({
    ios: {
      backgroundColor: 'white',
      borderRadius: 5,
      paddingTop: 5,
      borderWidth: 1,
      borderColor: '#B0B0B0',
      paddingBottom: 5,
      paddingLeft: 10,
      marginBottom: 15,
      marginTop: 10
    },
    android: {
      marginTop: 8,
      borderBottomWidth: 2,
      borderColor: '#009688'
    }
  })),
  btn_container: Object.assign({
    flex: 1,
    flexDirection: 'row'
  }, _reactNative.Platform.select({
    ios: {
      justifyContent: 'center',
      borderTopWidth: 1,
      borderColor: '#B0B0B0',
      maxHeight: 48
    },
    android: {
      alignSelf: 'flex-end',
      maxHeight: 52,
      paddingTop: 8,
      paddingBottom: 8
    }
  })),
  divider_btn: Object.assign({}, _reactNative.Platform.select({
    ios: {
      width: 1,
      backgroundColor: '#B0B0B0'
    },
    android: {
      width: 0
    }
  })),
  touch_modal: Object.assign({}, _reactNative.Platform.select({
    ios: {
      flex: 1
    },
    android: {
      paddingRight: 8,
      minWidth: 64,
      height: 36
    }
  })),
  btn_modal_left: Object.assign({}, _reactNative.Platform.select({
    fontWeight: 'bold',
    ios: {
      fontSize: 18,
      color: '#408AE2',
      textAlign: 'center',
      borderRightWidth: 5,
      borderColor: '#B0B0B0',
      padding: 10,
      height: 48,
      maxHeight: 48
    },
    android: {
      textAlign: 'right',
      color: '#009688',
      padding: 8
    }
  })),
  btn_modal_right: Object.assign({}, _reactNative.Platform.select({
    fontWeight: 'bold',
    ios: {
      fontSize: 18,
      color: '#408AE2',
      textAlign: 'center',
      padding: 10
    },
    android: {
      textAlign: 'right',
      color: '#009688',
      padding: 8
    }
  }))
});
var _default = DialogInput;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiRGlhbG9nSW5wdXQiLCJfUHVyZUNvbXBvbmVudCIsIl9pbmhlcml0czIiLCJfc3VwZXIiLCJwcm9wcyIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsImhhbmRsZU9uUmVxdWVzdENsb3NlIiwiY2xvc2VEaWFsb2ciLCJzZXRTdGF0ZSIsImlucHV0TW9kYWwiLCJoYW5kbGVPbktleVByZXNzIiwib3Blbm5pbmciLCJoYW5kbGVPbkNoYW5nZVRleHQiLCJoYW5kbGVPbkNsb3NlRGlhbG9nIiwiaGFuZGxlU3VibWl0Iiwic3VibWl0SW5wdXQiLCJzdGF0ZSIsImluaXRWYWx1ZVRleHRJbnB1dCIsIl9jcmVhdGVDbGFzczIiLCJ2YWx1ZSIsInJlbmRlciIsInRpdGxlIiwiaGludElucHV0IiwidGV4dFByb3BzIiwidGV4dElucHV0UHJvcHMiLCJtb2RhbFN0eWxlUHJvcHMiLCJtb2RhbFN0eWxlIiwiZGlhbG9nU3R5bGVQcm9wcyIsImRpYWxvZ1N0eWxlIiwicGxhY2Vob2xkZXJUZXh0Q29sb3IiLCJhbmltYXRpb25UeXBlIiwiY2FuY2VsVGV4dCIsInN1Ym1pdFRleHQiLCJQbGF0Zm9ybSIsIk9TIiwidG9VcHBlckNhc2UiLCJqc3giLCJNb2RhbCIsInRyYW5zcGFyZW50IiwidmlzaWJsZSIsImlzRGlhbG9nVmlzaWJsZSIsIm9uUmVxdWVzdENsb3NlIiwiY2hpbGRyZW4iLCJWaWV3Iiwic3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJhc3NpZ24iLCJUb3VjaGFibGVPcGFjaXR5IiwiYWN0aXZlT3BhY2l0eSIsIm9uUHJlc3MiLCJqc3hzIiwibW9kYWxfY29udGFpbmVyIiwibW9kYWxfYm9keSIsIlRleHQiLCJ0aXRsZV9tb2RhbCIsIm1lc3NhZ2UiLCJtZXNzYWdlX21vZGFsIiwiaGVpZ2h0IiwiVGV4dElucHV0IiwiaW5wdXRfY29udGFpbmVyIiwiYXV0b0NvcnJlY3QiLCJhdXRvQ2FwaXRhbGl6ZSIsImNsZWFyQnV0dG9uTW9kZSIsImNsZWFyVGV4dE9uRm9jdXMiLCJrZXlib2FyZFR5cGUiLCJzZWN1cmVUZXh0RW50cnkiLCJtYXhMZW5ndGgiLCJhdXRvRm9jdXMiLCJvbktleVByZXNzIiwidW5kZXJsaW5lQ29sb3JBbmRyb2lkIiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZVRleHQiLCJidG5fY29udGFpbmVyIiwidG91Y2hfbW9kYWwiLCJidG5fbW9kYWxfbGVmdCIsImRpdmlkZXJfYnRuIiwiYnRuX21vZGFsX3JpZ2h0IiwiUHVyZUNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4Iiwid2lkdGgiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwic2VsZWN0IiwiYW5kcm9pZCIsImJhY2tncm91bmRDb2xvciIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsImlvcyIsImJvcmRlclJhZGl1cyIsIm1pbldpZHRoIiwiZWxldmF0aW9uIiwicGFkZGluZyIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsInRleHRBbGlnbiIsIm1hcmdpbkJvdHRvbSIsImNvbG9yIiwicGFkZGluZ1RvcCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlclRvcFdpZHRoIiwibWF4SGVpZ2h0IiwiYWxpZ25TZWxmIiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgTW9kYWwsXG4gIFBsYXRmb3JtLFxuICBTdHlsZVNoZWV0LFxuICBUZXh0LFxuICBUZXh0SW5wdXQsXG4gIFRvdWNoYWJsZU9wYWNpdHksXG4gIFZpZXcsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmNsYXNzIERpYWxvZ0lucHV0IGV4dGVuZHMgUHVyZUNvbXBvbmVudHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBpbnB1dE1vZGFsOiBwcm9wcy5pbml0VmFsdWVUZXh0SW5wdXQsIG9wZW5uaW5nOiB0cnVlIH07XG4gIH1cblxuICBoYW5kbGVPblJlcXVlc3RDbG9zZSA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0TW9kYWw6ICcnIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uS2V5UHJlc3MgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5uaW5nOiBmYWxzZSB9KTtcbiAgfTtcblxuICBoYW5kbGVPbkNoYW5nZVRleHQgPSAoaW5wdXRNb2RhbCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dE1vZGFsLCBvcGVubmluZzogZmFsc2UgfSk7XG4gIH07XG5cbiAgaGFuZGxlT25DbG9zZURpYWxvZyA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0TW9kYWw6ICcnLG9wZW5uaW5nOiB0cnVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnN1Ym1pdElucHV0KHRoaXMuc3RhdGUuaW5wdXRNb2RhbCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0TW9kYWw6ICcnLG9wZW5uaW5nOiB0cnVlIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpe1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5wcm9wcy50aXRsZSB8fCAnJztcbiAgICBjb25zdCBoaW50SW5wdXQgPSB0aGlzLnByb3BzLmhpbnRJbnB1dCB8fCAnJztcbiAgICBsZXQgdmFsdWUgPSAnJztcbiAgICBpZiAoIXRoaXMuc3RhdGUub3Blbm5pbmcpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5zdGF0ZS5pbnB1dE1vZGFsO1xuICAgIH1lbHNle1xuICAgICAgdmFsdWUgPSB0aGlzLnByb3BzLmluaXRWYWx1ZVRleHRJbnB1dCA/IHRoaXMucHJvcHMuaW5pdFZhbHVlVGV4dElucHV0IDogJyc7XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dFByb3BzID0gdGhpcy5wcm9wcy50ZXh0SW5wdXRQcm9wcyB8fCBudWxsO1xuICAgIGNvbnN0IG1vZGFsU3R5bGVQcm9wcyA9IHRoaXMucHJvcHMubW9kYWxTdHlsZSB8fCB7fTtcbiAgICBjb25zdCBkaWFsb2dTdHlsZVByb3BzID0gdGhpcy5wcm9wcy5kaWFsb2dTdHlsZSB8fCB7fTtcbiAgICBjb25zdCBwbGFjZWhvbGRlclRleHRDb2xvciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXJUZXh0Q29sb3JcbiAgICBjb25zdCBhbmltYXRpb25UeXBlID0gdGhpcy5wcm9wcy5hbmltYXRpb25UeXBlIHx8ICdmYWRlJztcbiAgICBsZXQgY2FuY2VsVGV4dCA9IHRoaXMucHJvcHMuY2FuY2VsVGV4dCB8fCAnQ2FuY2VsJztcbiAgICBsZXQgc3VibWl0VGV4dCA9IHRoaXMucHJvcHMuc3VibWl0VGV4dCB8fCAnU3VibWl0JztcbiAgICBjYW5jZWxUZXh0ID0gKFBsYXRmb3JtLk9TID09PSAnaW9zJyk/IGNhbmNlbFRleHQ6Y2FuY2VsVGV4dC50b1VwcGVyQ2FzZSgpO1xuICAgIHN1Ym1pdFRleHQgPSAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKT8gc3VibWl0VGV4dDpzdWJtaXRUZXh0LnRvVXBwZXJDYXNlKCk7XG5cbiAgICByZXR1cm4oXG4gICAgICA8TW9kYWxcbiAgICAgICAgYW5pbWF0aW9uVHlwZT17YW5pbWF0aW9uVHlwZX1cbiAgICAgICAgdHJhbnNwYXJlbnQ9e3RydWV9XG4gICAgICAgIHZpc2libGU9e3RoaXMucHJvcHMuaXNEaWFsb2dWaXNpYmxlfVxuICAgICAgXHRvblJlcXVlc3RDbG9zZT17dGhpcy5oYW5kbGVPblJlcXVlc3RDbG9zZX0+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgey4uLm1vZGFsU3R5bGVQcm9wc31dfSAgPlxuICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfSBhY3RpdmVPcGFjaXR5PXsxfSBvblByZXNzPXt0aGlzLmhhbmRsZU9uQ2xvc2VEaWFsb2d9PlxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMubW9kYWxfY29udGFpbmVyLCB7Li4uZGlhbG9nU3R5bGVQcm9wc31dfSA+XG4gICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubW9kYWxfYm9keX0gPlxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGl0bGVfbW9kYWx9Pnt0aXRsZX08L1RleHQ+XG4gICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e1t0aGlzLnByb3BzLm1lc3NhZ2UgPyBzdHlsZXMubWVzc2FnZV9tb2RhbCA6IHtoZWlnaHQ6MH0gXX0+e3RoaXMucHJvcHMubWVzc2FnZX08L1RleHQ+XG4gICAgICAgICAgICAgICAgPFRleHRJbnB1dCBzdHlsZT17c3R5bGVzLmlucHV0X2NvbnRhaW5lcn1cbiAgICAgICAgICAgICAgICAgIGF1dG9Db3JyZWN0PXsodGV4dFByb3BzICYmIHRleHRQcm9wcy5hdXRvQ29ycmVjdD09ZmFsc2UpP2ZhbHNlOnRydWV9XG4gICAgICAgICAgICAgICAgICBhdXRvQ2FwaXRhbGl6ZT17KHRleHRQcm9wcyAmJiB0ZXh0UHJvcHMuYXV0b0NhcGl0YWxpemUpP3RleHRQcm9wcy5hdXRvQ2FwaXRhbGl6ZTonbm9uZSd9XG4gICAgICAgICAgICAgICAgICBjbGVhckJ1dHRvbk1vZGU9eyh0ZXh0UHJvcHMgJiYgdGV4dFByb3BzLmNsZWFyQnV0dG9uTW9kZSk/dGV4dFByb3BzLmNsZWFyQnV0dG9uTW9kZTonbmV2ZXInfVxuICAgICAgICAgICAgICAgICAgY2xlYXJUZXh0T25Gb2N1cz17KHRleHRQcm9wcyAmJiB0ZXh0UHJvcHMuY2xlYXJUZXh0T25Gb2N1cz09dHJ1ZSk/dGV4dFByb3BzLmNsZWFyVGV4dE9uRm9jdXM6ZmFsc2V9XG4gICAgICAgICAgICAgICAgICBrZXlib2FyZFR5cGU9eyh0ZXh0UHJvcHMgJiYgdGV4dFByb3BzLmtleWJvYXJkVHlwZSk/dGV4dFByb3BzLmtleWJvYXJkVHlwZTonZGVmYXVsdCd9XG4gICAgICAgICAgICAgICAgICBzZWN1cmVUZXh0RW50cnk9eyh0ZXh0UHJvcHMgJiYgdGV4dFByb3BzLnNlY3VyZVRleHRFbnRyeSk/dGV4dFByb3BzLnNlY3VyZVRleHRFbnRyeTpmYWxzZX1cbiAgICAgICAgICAgICAgICAgIG1heExlbmd0aD17KHRleHRQcm9wcyAmJiB0ZXh0UHJvcHMubWF4TGVuZ3RoID4gMCk/dGV4dFByb3BzLm1heExlbmd0aDpudWxsfVxuICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5oYW5kbGVPbktleVByZXNzfVxuICAgICAgICAgICAgICAgICAgdW5kZXJsaW5lQ29sb3JBbmRyb2lkPSd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtoaW50SW5wdXR9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclRleHRDb2xvcj17cGxhY2Vob2xkZXJUZXh0Q29sb3J9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZVRleHQ9e3RoaXMuaGFuZGxlT25DaGFuZ2VUZXh0fVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmJ0bl9jb250YWluZXJ9PlxuICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtzdHlsZXMudG91Y2hfbW9kYWx9XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXt0aGlzLmhhbmRsZU9uQ2xvc2VEaWFsb2d9PlxuICAgICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5idG5fbW9kYWxfbGVmdH0+e2NhbmNlbFRleHR9PC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmRpdmlkZXJfYnRufT48L1ZpZXc+XG4gICAgICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgIHN0eWxlPXtzdHlsZXMudG91Y2hfbW9kYWx9XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmJ0bl9tb2RhbF9yaWdodH0+e3N1Ym1pdFRleHR9PC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICB9XG59XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjp7XG4gICAgZmxleDoxLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICBhbmRyb2lkOntcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjYyKSdcbiAgICAgIH1cbiAgICB9KSxcbiAgfSxcbiAgbW9kYWxfY29udGFpbmVyOntcbiAgICBtYXJnaW5MZWZ0OiAzMCxcbiAgICBtYXJnaW5SaWdodDogMzAsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6JyNFM0U2RTcnLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICBtaW5XaWR0aDogMzAwLFxuICAgICAgfSxcbiAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOicjZmZmJyxcbiAgICAgICAgZWxldmF0aW9uOiAyNCxcbiAgICAgICAgbWluV2lkdGg6IDI4MCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA1LFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSxcbiAgbW9kYWxfYm9keTp7XG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIHBhZGRpbmc6IDI0LFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSxcbiAgdGl0bGVfbW9kYWw6e1xuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBmb250U2l6ZTogMjAsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICBtYXJnaW5Ub3A6IDEwLFxuICAgICAgICB0ZXh0QWxpZ246J2NlbnRlcicsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogNSxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIHRleHRBbGlnbjonbGVmdCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBtZXNzYWdlX21vZGFsOntcbiAgICBmb250U2l6ZTogMTYsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICB0ZXh0QWxpZ246J2NlbnRlcicsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogMTAsXG4gICAgICB9LFxuICAgICAgYW5kcm9pZDoge1xuICAgICAgICB0ZXh0QWxpZ246J2xlZnQnLFxuICAgICAgICBtYXJnaW5Ub3A6IDIwXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBpbnB1dF9jb250YWluZXI6e1xuICAgIHRleHRBbGlnbjonbGVmdCcsXG4gICAgZm9udFNpemU6IDE2LFxuICAgIGNvbG9yOiAncmdiYSgwLDAsMCwwLjU0KScsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICAgICAgcGFkZGluZ1RvcDogNSxcblx0ICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI0IwQjBCMCcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDUsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAxMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAxNSxcbiAgICAgICAgbWFyZ2luVG9wOiAxMCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIG1hcmdpblRvcDogOCxcbiAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IDIsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzAwOTY4OCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBidG5fY29udGFpbmVyOntcbiAgICBmbGV4OiAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICBpb3M6IHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBib3JkZXJUb3BXaWR0aDogMSxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjQjBCMEIwJyxcbiAgICAgICAgbWF4SGVpZ2h0OiA0OCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOntcbiAgICAgICAgYWxpZ25TZWxmOiAnZmxleC1lbmQnLFxuICAgICAgICBtYXhIZWlnaHQ6IDUyLFxuICAgICAgICBwYWRkaW5nVG9wOiA4LFxuICAgICAgICBwYWRkaW5nQm90dG9tOiA4LFxuICAgICAgfVxuICAgIH0pLFxuICB9LFxuICBkaXZpZGVyX2J0bjp7XG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczp7XG4gICAgICBcdHdpZHRoOiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjQjBCMEIwJyxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOntcblx0ICAgICAgd2lkdGg6IDBcbiAgICAgIH0sXG4gICAgfSksXG4gIH0sXG4gIHRvdWNoX21vZGFsOntcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgaW9zOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICB9LFxuICAgICAgYW5kcm9pZDp7XG4gICAgICAgIHBhZGRpbmdSaWdodDogOCxcbiAgICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgICBoZWlnaHQ6IDM2LFxuICAgICAgfVxuICAgIH0pLFxuICB9LFxuICBidG5fbW9kYWxfbGVmdDp7XG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgIGlvczoge1xuICAgICAgICBmb250U2l6ZToxOCxcbiAgICAgICAgY29sb3I6JyM0MDhBRTInLFxuICAgICAgICB0ZXh0QWxpZ246J2NlbnRlcicsXG4gICAgICAgIGJvcmRlclJpZ2h0V2lkdGg6IDUsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI0IwQjBCMCcsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuXHQgICAgICBoZWlnaHQ6IDQ4LFxuXHQgICAgICBtYXhIZWlnaHQ6IDQ4LFxuICAgICAgfSxcbiAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgdGV4dEFsaWduOidyaWdodCcsXG4gICAgICAgIGNvbG9yOicjMDA5Njg4JyxcbiAgICAgICAgcGFkZGluZzogOFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSxcbiAgYnRuX21vZGFsX3JpZ2h0OntcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgaW9zOiB7XG4gICAgICAgIGZvbnRTaXplOjE4LFxuICAgICAgICBjb2xvcjonIzQwOEFFMicsXG4gICAgICAgIHRleHRBbGlnbjonY2VudGVyJyxcbiAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICB9LFxuICAgICAgYW5kcm9pZDoge1xuICAgICAgICB0ZXh0QWxpZ246J3JpZ2h0JyxcbiAgICAgICAgY29sb3I6JyMwMDk2ODgnLFxuICAgICAgICBwYWRkaW5nOiA4XG4gICAgICB9LFxuICAg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