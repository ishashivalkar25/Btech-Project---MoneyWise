9888ecd58833561a348a5d54a70ee558
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeaderBackButton;
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _MaskedView = _interopRequireDefault(require("../MaskedView"));
var _PlatformPressable = _interopRequireDefault(require("../PlatformPressable"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function HeaderBackButton(_ref) {
  var disabled = _ref.disabled,
    allowFontScaling = _ref.allowFontScaling,
    backImage = _ref.backImage,
    label = _ref.label,
    labelStyle = _ref.labelStyle,
    labelVisible = _ref.labelVisible,
    onLabelLayout = _ref.onLabelLayout,
    onPress = _ref.onPress,
    pressColor = _ref.pressColor,
    pressOpacity = _ref.pressOpacity,
    screenLayout = _ref.screenLayout,
    customTintColor = _ref.tintColor,
    titleLayout = _ref.titleLayout,
    _ref$truncatedLabel = _ref.truncatedLabel,
    truncatedLabel = _ref$truncatedLabel === void 0 ? 'Back' : _ref$truncatedLabel,
    _ref$accessibilityLab = _ref.accessibilityLabel,
    accessibilityLabel = _ref$accessibilityLab === void 0 ? label && label !== 'Back' ? label + ", back" : 'Go back' : _ref$accessibilityLab,
    testID = _ref.testID,
    style = _ref.style;
  var _ref2 = (0, _native.useTheme)(),
    colors = _ref2.colors;
  var _React$useState = React.useState(undefined),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    initialLabelWidth = _React$useState2[0],
    setInitialLabelWidth = _React$useState2[1];
  var tintColor = customTintColor !== undefined ? customTintColor : _reactNative.Platform.select({
    ios: colors.primary,
    default: colors.text
  });
  var handleLabelLayout = function handleLabelLayout(e) {
    onLabelLayout === null || onLabelLayout === void 0 ? void 0 : onLabelLayout(e);
    setInitialLabelWidth(e.nativeEvent.layout.x + e.nativeEvent.layout.width);
  };
  var shouldTruncateLabel = function shouldTruncateLabel() {
    return !label || initialLabelWidth && titleLayout && screenLayout && (screenLayout.width - titleLayout.width) / 2 < initialLabelWidth + 26;
  };
  var renderBackImage = function renderBackImage() {
    if (backImage) {
      return backImage({
        tintColor: tintColor
      });
    } else {
      return React.createElement(_reactNative.Image, {
        style: [styles.icon, Boolean(labelVisible) && styles.iconWithLabel, Boolean(tintColor) && {
          tintColor: tintColor
        }],
        source: require('../assets/back-icon.png'),
        fadeDuration: 0
      });
    }
  };
  var renderLabel = function renderLabel() {
    var leftLabelText = shouldTruncateLabel() ? truncatedLabel : label;
    if (!labelVisible || leftLabelText === undefined) {
      return null;
    }
    var labelElement = React.createElement(_reactNative.View, {
      style: screenLayout ? [styles.labelWrapper, {
        minWidth: screenLayout.width / 2 - 27
      }] : null
    }, React.createElement(_reactNative.Animated.Text, {
      accessible: false,
      onLayout: leftLabelText === label ? handleLabelLayout : undefined,
      style: [styles.label, tintColor ? {
        color: tintColor
      } : null, labelStyle],
      numberOfLines: 1,
      allowFontScaling: !!allowFontScaling
    }, leftLabelText));
    if (backImage || _reactNative.Platform.OS !== 'ios') {
      return labelElement;
    }
    return React.createElement(_MaskedView.default, {
      maskElement: React.createElement(_reactNative.View, {
        style: styles.iconMaskContainer
      }, React.createElement(_reactNative.Image, {
        source: require('../assets/back-icon-mask.png'),
        style: styles.iconMask
      }), React.createElement(_reactNative.View, {
        style: styles.iconMaskFillerRect
      }))
    }, labelElement);
  };
  var handlePress = function handlePress() {
    return onPress && requestAnimationFrame(onPress);
  };
  return React.createElement(_PlatformPressable.default, {
    disabled: disabled,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: accessibilityLabel,
    testID: testID,
    onPress: disabled ? undefined : handlePress,
    pressColor: pressColor,
    pressOpacity: pressOpacity,
    android_ripple: {
      borderless: true
    },
    style: [styles.container, disabled && styles.disabled, style],
    hitSlop: _reactNative.Platform.select({
      ios: undefined,
      default: {
        top: 16,
        right: 16,
        bottom: 16,
        left: 16
      }
    })
  }, React.createElement(React.Fragment, null, renderBackImage(), renderLabel()));
}
var styles = _reactNative.StyleSheet.create({
  container: Object.assign({
    alignItems: 'center',
    flexDirection: 'row',
    minWidth: _reactNative.StyleSheet.hairlineWidth
  }, _reactNative.Platform.select({
    ios: null,
    default: {
      marginVertical: 3,
      marginHorizontal: 11
    }
  })),
  disabled: {
    opacity: 0.5
  },
  label: {
    fontSize: 17,
    letterSpacing: 0.35
  },
  labelWrapper: {
    flexDirection: 'row',
    alignItems: 'flex-start'
  },
  icon: _reactNative.Platform.select({
    ios: {
      height: 21,
      width: 13,
      marginLeft: 8,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.getConstants().isRTL ? -1 : 1
      }]
    },
    default: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.getConstants().isRTL ? -1 : 1
      }]
    }
  }),
  iconWithLabel: _reactNative.Platform.OS === 'ios' ? {
    marginRight: 6
  } : {},
  iconMaskContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center'
  },
  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: '#000'
  },
  iconMask: {
    height: 21,
    width: 13,
    marginLeft: -14.5,
    marginVertical: 12,
    alignSelf: 'center',
    resizeMode: 'contain',
    transform: [{
      scaleX: _reactNative.I18nManager.getConstants().isRTL ? -1 : 1
    }]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,