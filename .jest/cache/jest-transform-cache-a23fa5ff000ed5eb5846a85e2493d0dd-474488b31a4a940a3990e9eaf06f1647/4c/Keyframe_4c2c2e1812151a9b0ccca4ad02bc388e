84da131afac5603cb5f6de5001a540c7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyframe = void 0;
var _Easing = require("../../Easing");
var _animation = require("../../animation");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var _worklet_10494110474751_init_data = {
  code: "function anonymous(_targetValues) {\n  const {\n    keyframes,\n    delayFunction,\n    delay,\n    _animation,\n    _Easing,\n    _this,\n    initialValues,\n    callback\n  } = this._closure;\n  const animations = {};\n  const addAnimation = function (key) {\n    const keyframePoints = keyframes[key];\n    if (keyframePoints.length === 0) return;\n    const animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _animation.withTiming)(keyframePoints[0].value, {\n      duration: keyframePoints[0].duration,\n      easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear\n    }) : _animation.withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {\n      return (0, _animation.withTiming)(keyframePoint.value, {\n        duration: keyframePoint.duration,\n        easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear\n      });\n    })));\n    if (key.includes('transform')) {\n      var _animations$transform;\n      if (!('transform' in animations)) {\n        animations.transform = [];\n      }\n      (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push({\n        [key.split(':')[1]]: animation\n      });\n    } else {\n      animations[key] = animation;\n    }\n  };\n  Object.keys(initialValues).forEach(function (key) {\n    if (key.includes('transform')) {\n      initialValues[key].forEach(function (transformProp, index) {\n        Object.keys(transformProp).forEach(function (transformPropKey) {\n          addAnimation(index.toString() + '_transform:' + transformPropKey);\n        });\n      });\n    } else {\n      addAnimation(key);\n    }\n  });\n  return {\n    animations: animations,\n    initialValues: initialValues,\n    callback: callback\n  };\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\layoutReanimation\\animationBuilder\\Keyframe.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"_targetValues\",\"keyframes\",\"delayFunction\",\"delay\",\"_animation\",\"_Easing\",\"_this\",\"initialValues\",\"callback\",\"_closure\",\"animations\",\"addAnimation\",\"key\",\"keyframePoints\",\"length\",\"animation\",\"withTiming\",\"value\",\"duration\",\"easing\",\"Easing\",\"linear\",\"withSequence\",\"apply\",\"map\",\"keyframePoint\",\"includes\",\"_animations$transform\",\"transform\",\"push\",\"split\",\"Object\",\"keys\",\"forEach\",\"transformProp\",\"index\",\"transformPropKey\",\"toString\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/layoutReanimation/animationBuilder/Keyframe.js\"],\"mappings\":\"AA6Ba,SAAAA,UAAAC,aAAiB;EAAA;IAAAC,SAAA;IAAAC,aAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,KAAA;IAAAC,aAAA;IAAAC;EAAA,SAAAC,QAAA;EAGtB,MAAMC,UAAU,GAAG,CAAC,CAAC;EAMrB,MAAMC,YAAY,GAAG,SAAAA,CAAAC,GAAG,EAAI;IAC1B,MAAMC,cAAc,GAAGZ,SAAS,CAACW,GAAG,CAAC;IAErC,IAAIC,cAAc,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAMC,SAAS,GAAGb,aAAa,CAACC,KAAK,EAAEU,cAAc,CAACC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAEV,UAAU,CAACY,UAAU,EAAEH,cAAc,CAAC,CAAC,CAAC,CAACI,KAAK,EAAE;MACvHC,QAAQ,EAAEL,cAAc,CAAC,CAAC,CAAC,CAACK,QAAQ;MACpCC,MAAM,EAAEN,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAGN,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAGd,OAAO,CAACe,MAAM,CAACC;IAC/E,CAAC,CAAC,GAAGjB,UAAU,CAACkB,YAAY,CAACC,KAAK,CAACjB,KAAI,EAAEO,cAAc,CAACW,GAAG,CAAC,UAAAC,aAAa;MAAA,OAAI,CAAC,CAAC,EAAErB,UAAU,CAACY,UAAU,EAAES,aAAa,CAACR,KAAK,EAAE;QAC3HC,QAAQ,EAAEO,aAAa,CAACP,QAAQ;QAChCC,MAAM,EAAEM,aAAa,CAACN,MAAM,GAAGM,aAAa,CAACN,MAAM,GAAGd,OAAO,CAACe,MAAM,CAACC;MACvE,CAAC,CAAC;IAAA,EAAC,CAAC,CAAC;IACL,IAAIT,GAAG,CAACc,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC7B,IAAIC,qBAAqB;MACzB,IAAI,EAAE,WAAW,IAAIjB,UAAU,CAAC,EAAE;QAChCA,UAAU,CAACkB,SAAS,GAAG,EAAE;MAC3B;MACA,CAACD,qBAAqB,GAAGjB,UAAU,CAACkB,SAAS,MAAM,IAAI,IAAID,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACE,IAAI,CAAC;QAChI,CAACjB,GAAG,CAACkB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGf;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,UAAU,CAACE,GAAG,CAAC,GAAGG,SAAS;IAC7B;EACF,CAAC;EACDgB,MAAM,CAACC,IAAI,CAACzB,aAAa,CAAC,CAAC0B,OAAO,CAAC,UAAArB,GAAG,EAAI;IACxC,IAAIA,GAAG,CAACc,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC7BnB,aAAa,CAACK,GAAG,CAAC,CAACqB,OAAO,CAAC,UAACC,aAAa,EAAEC,KAAK,EAAK;QACnDJ,MAAM,CAACC,IAAI,CAACE,aAAa,CAAC,CAACD,OAAO,CAAC,UAAAG,gBAAgB,EAAI;UACrDzB,YAAY,CAACwB,KAAK,CAACE,QAAQ,CAAC,CAAC,GAAG,aAAa,GAAGD,gBAAgB,CAAC;QACnE,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLzB,YAAY,CAACC,GAAG,CAAC;IACnB;EACF,CAAC,CAAC;EACF,OAAO;IACLF,UAAU,EAAEA,UAAU;IACtBH,aAAa,EAAEA,aAAa;IAC5BC,QAAQ,EAAEA;EACZ,CAAC;AACH\"}"
};
var _worklet_3737494808179_init_data = {
  code: "function anonymous(_, animation) {\n  return animation;\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\reanimated2\\layoutReanimation\\animationBuilder\\Keyframe.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"_\",\"animation\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/reanimated2/layoutReanimation/animationBuilder/Keyframe.js\"],\"mappings\":\"AAuM0C,SAACA,SAAGA,CAAAC,CAAA,EAAAC,SAAc;EAGtD,OAAOA,SAAS;AAClB\"}"
};
var Keyframe = function () {
  function Keyframe(definitions) {
    var _this = this;
    (0, _classCallCheck2.default)(this, Keyframe);
    _defineProperty(this, "durationV", void 0);
    _defineProperty(this, "delayV", void 0);
    _defineProperty(this, "callbackV", void 0);
    _defineProperty(this, "definitions", void 0);
    _defineProperty(this, "build", function () {
      var delay = _this.delayV;
      var delayFunction = _this.getDelayFunction();
      var _this$parseDefinition = _this.parseDefinitions(),
        keyframes = _this$parseDefinition.keyframes,
        initialValues = _this$parseDefinition.initialValues;
      var callback = _this.callbackV;
      return function () {
        var _e = [new global.Error(), -9, -27];
        var _f = function _f(_targetValues) {
          var animations = {};
          var addAnimation = function addAnimation(key) {
            var keyframePoints = keyframes[key];
            if (keyframePoints.length === 0) return;
            var animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _animation.withTiming)(keyframePoints[0].value, {
              duration: keyframePoints[0].duration,
              easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear
            }) : _animation.withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {
              return (0, _animation.withTiming)(keyframePoint.value, {
                duration: keyframePoint.duration,
                easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear
              });
            })));
            if (key.includes('transform')) {
              var _animations$transform;
              if (!('transform' in animations)) {
                animations.transform = [];
              }
              (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push((0, _defineProperty3.default)({}, key.split(':')[1], animation));
            } else {
              animations[key] = animation;
            }
          };
          Object.keys(initialValues).forEach(function (key) {
            if (key.includes('transform')) {
              initialValues[key].forEach(function (transformProp, index) {
                Object.keys(transformProp).forEach(function (transformPropKey) {
                  addAnimation(index.toString() + '_transform:' + transformPropKey);
                });
              });
            } else {
              addAnimation(key);
            }
          });
          return {
            animations: animations,
            initialValues: initialValues,
            callback: callback
          };
        };
        _f._closure = {
          keyframes: keyframes,
          delayFunction: delayFunction,
          delay: delay,
          _animation: _animation,
          _Easing: _Easing,
          _this: _this,
          initialValues: initialValues,
          callback: callback
        };
        _f.__initData = _worklet_10494110474751_init_data;
        _f.__workletHash = 10494110474751;
        _f.__stackDetails = _e;
        _f.__version = "3.1.0";
        return _f;
      }();
    });
    this.definitions = definitions;
  }
  (0, _createClass2.default)(Keyframe, [{
    key: "parseDefinitions",
    value: function parseDefinitions() {
      var _this2 = this;
      var parsedKeyframes = {};
      if (this.definitions.from) {
        if (this.definitions['0']) {
          throw Error("You cannot provide both keyframe 0 and 'from' as they both specified initial values");
        }
        this.definitions['0'] = this.definitions.from;
        delete this.definitions.from;
      }
      if (this.definitions.to) {
        if (this.definitions['100']) {
          throw Error("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
        }
        this.definitions['100'] = this.definitions.to;
        delete this.definitions.to;
      }
      if (!this.definitions['0']) {
        throw Error("Please provide 0, or 'from' keyframe with initial state of your object.");
      }
      var initialValues = this.definitions['0'];
      Object.keys(initialValues).forEach(function (styleProp) {
        if (styleProp === 'transform') {
          var _initialValues$styleP;
          (_initialValues$styleP = initialValues[styleProp]) === null || _initialValues$styleP === void 0 ? void 0 : _initialValues$styleP.forEach(function (transformStyle, index) {
            Object.keys(transformStyle).forEach(function (transformProp) {
              parsedKeyframes[index.toString() + '_transform:' + transformProp] = [];
            });
          });
        } else {
          parsedKeyframes[styleProp] = [];
        }
      });
      var duration = this.durationV ? this.durationV : 500;
      var animationKeyPoints = Array.from(Object.keys(this.definitions));
      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {
        var maxDuration = currentKeyPoint / 100 * duration;
        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {
          return acc + value.duration;
        }, 0);
        return maxDuration - currentDuration;
      };
      var addKeyPoint = function addKeyPoint(_ref) {
        var key = _ref.key,
          value = _ref.value,
          currentKeyPoint = _ref.currentKeyPoint,
          easing = _ref.easing;
        if (!(key in parsedKeyframes)) {
          throw Error("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
        }
        parsedKeyframes[key].push({
          duration: getAnimationDuration(key, currentKeyPoint),
          value: value,
          easing: easing
        });
      };
      animationKeyPoints.filter(function (value) {
        return parseInt(value) !== 0;
      }).sort(function (a, b) {
        return parseInt(a) - parseInt(b);
      }).forEach(function (keyPoint) {
        if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {
          throw Error('Keyframe should be in between range 0 - 100.');
        }
        var keyframe = _this2.definitions[keyPoint];
        var easing = keyframe.easing;
        delete keyframe.easing;
        var addKeyPointWith = function addKeyPointWith(key, value) {
          return addKeyPoint({
            key: key,
            value: value,
            currentKeyPoint: parseInt(keyPoint),
            easing: easing
          });
        };
        Object.keys(keyframe).forEach(function (key) {
          if (key === 'transform') {
            var _keyframe$key;
            (_keyframe$key = keyframe[key]) === null || _keyframe$key === void 0 ? void 0 : _keyframe$key.forEach(function (transformStyle, index) {
              Object.keys(transformStyle).forEach(function (transformProp) {
                addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);
              });
            });
          } else {
            addKeyPointWith(key, keyframe[key]);
          }
        });
      });
      return {
        initialValues: initialValues,
        keyframes: parsedKeyframes
      };
    }
  }, {
    key: "duration",
    value: function duration(durationMs) {
      this.durationV = durationMs;
      return this;
    }
  }, {
    key: "delay",
    value: function delay(delayMs) {
      this.delayV = delayMs;
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(callback) {
      this.callbackV = callback;
      return this;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      var delay = this.delayV;
      return delay ? _animation.withDelay : function () {
        var _e = [new global.Error(), 1, -27];
        var _f = function _f(_, animation) {
          return animation;
        };
        _f._closure = {};
        _f.__initData = _worklet_3737494808179_init_data;
        _f.__workletHash = 3737494808179;
        _f.__stackDetails = _e;
        _f.__version = "3.1.0";
        return _f;
      }();
    }
  }]);
  return Keyframe;
}();
exports.Keyframe = Keyframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,