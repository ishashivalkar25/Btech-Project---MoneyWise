f75f14531d74982529703af8232f09c5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTooltipPosition = void 0;
var _reactNative = require("react-native");
var overflowLeft = function overflowLeft(center) {
  return center < 0;
};
var overflowRight = function overflowRight(center, tooltipWidth) {
  var _reactNative$Dimensio = _reactNative.Dimensions.get('window'),
    layoutWidth = _reactNative$Dimensio.width;
  return center + tooltipWidth > layoutWidth;
};
var overflowBottom = function overflowBottom(childrenY, childrenHeight, tooltipHeight) {
  var _reactNative$Dimensio2 = _reactNative.Dimensions.get('window'),
    layoutHeight = _reactNative$Dimensio2.height;
  return childrenY + childrenHeight + tooltipHeight > layoutHeight;
};
var getTooltipXPosition = function getTooltipXPosition(_ref, _ref2) {
  var childrenX = _ref.pageX,
    childrenWidth = _ref.width;
  var tooltipWidth = _ref2.width;
  var center = childrenX + (childrenWidth - tooltipWidth) / 2;
  if (overflowLeft(center)) return childrenX;
  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;
  return center;
};
var getTooltipYPosition = function getTooltipYPosition(_ref3, _ref4) {
  var childrenY = _ref3.pageY,
    childrenHeight = _ref3.height;
  var tooltipHeight = _ref4.height;
  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;
  return childrenY + childrenHeight;
};
var getTooltipPosition = function getTooltipPosition(_ref5) {
  var children = _ref5.children,
    tooltip = _ref5.tooltip,
    measured = _ref5.measured;
  if (!measured) return {};
  return {
    left: getTooltipXPosition(children, tooltip),
    top: getTooltipYPosition(children, tooltip)
  };
};
exports.getTooltipPosition = getTooltipPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwib3ZlcmZsb3dMZWZ0IiwiY2VudGVyIiwib3ZlcmZsb3dSaWdodCIsInRvb2x0aXBXaWR0aCIsIl9yZWFjdE5hdGl2ZSREaW1lbnNpbyIsIkRpbWVuc2lvbnMiLCJnZXQiLCJsYXlvdXRXaWR0aCIsIndpZHRoIiwib3ZlcmZsb3dCb3R0b20iLCJjaGlsZHJlblkiLCJjaGlsZHJlbkhlaWdodCIsInRvb2x0aXBIZWlnaHQiLCJfcmVhY3ROYXRpdmUkRGltZW5zaW8yIiwibGF5b3V0SGVpZ2h0IiwiaGVpZ2h0IiwiZ2V0VG9vbHRpcFhQb3NpdGlvbiIsIl9yZWYiLCJfcmVmMiIsImNoaWxkcmVuWCIsInBhZ2VYIiwiY2hpbGRyZW5XaWR0aCIsImdldFRvb2x0aXBZUG9zaXRpb24iLCJfcmVmMyIsIl9yZWY0IiwicGFnZVkiLCJnZXRUb29sdGlwUG9zaXRpb24iLCJfcmVmNSIsImNoaWxkcmVuIiwidG9vbHRpcCIsIm1lYXN1cmVkIiwibGVmdCIsInRvcCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Ub29sdGlwL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFxQkEsSUFBTUMsWUFBWSxHQUFJLFNBQWhCQSxZQUFZQSxDQUFJQyxNQUFjLEVBQWM7RUFDaEQsT0FBT0EsTUFBTSxHQUFHLENBQUM7QUFDbkIsQ0FBQztBQU1ELElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSUQsTUFBYyxFQUFFRSxZQUFvQixFQUFjO0VBQ3ZFLElBQUFDLHFCQUFBLEdBQStCTixZQUFBLENBQUFPLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUF4Q0MsV0FBQSxHQUFBSCxxQkFBQSxDQUFQSSxLQUFLO0VBRWIsT0FBT1AsTUFBTSxHQUFHRSxZQUFZLEdBQUdJLFdBQVc7QUFDNUMsQ0FBQztBQU1ELElBQU1FLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FDbEJDLFNBQWlCLEVBQ2pCQyxjQUFzQixFQUN0QkMsYUFBcUIsRUFDVDtFQUNaLElBQUFDLHNCQUFBLEdBQWlDZixZQUFBLENBQUFPLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUF6Q1EsWUFBQSxHQUFBRCxzQkFBQSxDQUFSRSxNQUFNO0VBRWQsT0FBT0wsU0FBUyxHQUFHQyxjQUFjLEdBQUdDLGFBQWEsR0FBR0UsWUFBWTtBQUNsRSxDQUFDO0FBRUQsSUFBTUUsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBR0MsSUFBQSxFQUFBQyxLQUFBLEVBR2Y7RUFBQSxJQUZGQyxTQUFTLEdBQTZDRixJQUFBLENBQTdERyxLQUFLO0lBQW9CQyxhQUFBLEdBQW9DSixJQUFBLENBQTNDVCxLQUFLO0VBQXNDLElBQ3RETCxZQUFBLEdBQTZCZSxLQUFBLENBQXBDVixLQUFLO0VBRVAsSUFBTVAsTUFBTSxHQUFHa0IsU0FBUyxHQUFHLENBQUNFLGFBQWEsR0FBR2xCLFlBQVksSUFBSSxDQUFDO0VBRTdELElBQUlILFlBQVksQ0FBQ0MsTUFBTSxDQUFDLEVBQUUsT0FBT2tCLFNBQVM7RUFFMUMsSUFBSWpCLGFBQWEsQ0FBQ0QsTUFBTSxFQUFFRSxZQUFZLENBQUMsRUFDckMsT0FBT2dCLFNBQVMsR0FBR0UsYUFBYSxHQUFHbEIsWUFBWTtFQUVqRCxPQUFPRixNQUFNO0FBQ2YsQ0FBQztBQUVELElBQU1xQixtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQW1CQSxDQUFHQyxLQUFBLEVBQUFDLEtBQUEsRUFHZjtFQUFBLElBRkZkLFNBQVMsR0FBK0NhLEtBQUEsQ0FBL0RFLEtBQUs7SUFBcUJkLGNBQUEsR0FBcUNZLEtBQUEsQ0FBN0NSLE1BQU07RUFBdUMsSUFDdkRILGFBQUEsR0FBOEJZLEtBQUEsQ0FBdENULE1BQU07RUFFUixJQUFJTixjQUFjLENBQUNDLFNBQVMsRUFBRUMsY0FBYyxFQUFFQyxhQUFhLENBQUMsRUFDMUQsT0FBT0YsU0FBUyxHQUFHRSxhQUFhO0VBRWxDLE9BQU9GLFNBQVMsR0FBR0MsY0FBYztBQUNuQyxDQUFDO0FBRU0sSUFBTWUsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBR0MsS0FBQSxFQUlxQjtFQUFBLElBSHJEQyxRQUFRLEdBR0lELEtBQUEsQ0FIWkMsUUFBUTtJQUNSQyxPQUFPLEdBRUtGLEtBQUEsQ0FGWkUsT0FBTztJQUNQQyxRQUFBLEdBQ1lILEtBQUEsQ0FEWkcsUUFBQTtFQUVBLElBQUksQ0FBQ0EsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBRXhCLE9BQU87SUFDTEMsSUFBSSxFQUFFZixtQkFBbUIsQ0FBQ1ksUUFBUSxFQUFFQyxPQUFPLENBQUM7SUFDNUNHLEdBQUcsRUFBRVYsbUJBQW1CLENBQUNNLFFBQVEsRUFBRUMsT0FBTztFQUM1QyxDQUFDO0FBQ0gsQ0FBQztBQUFDSSxPQUFBLENBQUFQLGtCQUFBLEdBQUFBLGtCQUFBIn0=