391987891e25ef3f82b1838a43d74426
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camera = camera;
exports.imageLibrary = imageLibrary;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var DEFAULT_OPTIONS = {
  mediaType: 'photo',
  includeBase64: false,
  selectionLimit: 1
};
function camera() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_OPTIONS;
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  return new Promise(function (resolve) {
    var result = {
      errorCode: 'camera_unavailable',
      errorMessage: 'launchCamera is not supported for web yet'
    };
    if (callback) callback(result);
    resolve(result);
  });
}
function imageLibrary() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_OPTIONS;
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  if (options.mediaType !== 'photo') {
    var result = {
      errorCode: 'others',
      errorMessage: 'For now, only photo mediaType is supported for web'
    };
    if (callback) callback(result);
    return Promise.resolve(result);
  }
  var input = document.createElement('input');
  input.style.display = 'none';
  input.setAttribute('type', 'file');
  input.setAttribute('accept', getWebMediaType(options.mediaType));
  if (options.selectionLimit > 1) {
    input.setAttribute('multiple', 'multiple');
  }
  document.body.appendChild(input);
  return new Promise(function (resolve) {
    input.addEventListener('change', (0, _asyncToGenerator2.default)(function* () {
      if (input.files) {
        if (options.selectionLimit <= 1) {
          var img = yield readFile(input.files[0], {
            includeBase64: options.includeBase64
          });
          var _result = {
            assets: [img]
          };
          if (callback) callback(_result);
          resolve(_result);
        } else {
          var imgs = yield Promise.all(Array.from(input.files).map(function (file) {
            return readFile(file, {
              includeBase64: options.includeBase64
            });
          }));
          var _result2 = {
            didCancel: false,
            assets: imgs
          };
          if (callback) callback(_result2);
          resolve(_result2);
        }
      }
      document.body.removeChild(input);
    }));
    var event = new MouseEvent('click');
    input.dispatchEvent(event);
  });
}
function readFile(targetFile, options) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.onerror = function () {
      reject(new Error("Failed to read the selected media because the operation failed."));
    };
    reader.onload = function (_ref2) {
      var target = _ref2.target;
      var uri = target == null ? void 0 : target.result;
      var returnRaw = function returnRaw() {
        return resolve({
          uri: uri,
          width: 0,
          height: 0
        });
      };
      if (typeof uri === 'string') {
        var image = new Image();
        image.src = uri;
        image.onload = function () {
          var _image$naturalWidth, _image$naturalHeight;
          return resolve(Object.assign({
            uri: uri,
            width: (_image$naturalWidth = image.naturalWidth) != null ? _image$naturalWidth : image.width,
            height: (_image$naturalHeight = image.naturalHeight) != null ? _image$naturalHeight : image.height
          }, options.includeBase64 && {
            base64: uri.substr(uri.indexOf(',') + 1)
          }));
        };
        image.onerror = function () {
          return returnRaw();
        };
      } else {
        returnRaw();
      }
    };
    reader.readAsDataURL(targetFile);
  });
}
function getWebMediaType(mediaType) {
  var _webMediaTypes$mediaT;
  var webMediaTypes = {
    photo: 'image/*',
    video: 'video/*',
    mixed: 'image/*,video/*'
  };
  return (_webMediaTypes$mediaT = webMediaTypes[mediaType]) != null ? _webMediaTypes$mediaT : webMediaTypes.photo;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,