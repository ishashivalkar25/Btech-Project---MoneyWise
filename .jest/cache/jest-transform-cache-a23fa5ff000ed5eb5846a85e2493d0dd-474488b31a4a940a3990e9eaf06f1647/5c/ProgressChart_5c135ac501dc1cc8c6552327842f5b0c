cf5c5440531f4968fa741f5ac50027dd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _pie = _interopRequireDefault(require("paths-js/pie"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSvg = require("react-native-svg");
var _AbstractChart = _interopRequireDefault(require("./AbstractChart"));
var _jsxRuntime = require("react/jsx-runtime");
var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var ProgressChart = function (_super) {
  __extends(ProgressChart, _super);
  function ProgressChart() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ProgressChart.prototype.render = function () {
    var _this = this;
    var _a = this.props,
      width = _a.width,
      height = _a.height,
      style = _a.style,
      data = _a.data,
      hideLegend = _a.hideLegend,
      strokeWidth = _a.strokeWidth,
      radius = _a.radius;
    var _b = style.borderRadius,
      borderRadius = _b === void 0 ? 0 : _b,
      _c = style.margin,
      margin = _c === void 0 ? 0 : _c,
      _d = style.marginRight,
      marginRight = _d === void 0 ? 0 : _d;
    if (Array.isArray(data)) {
      data = {
        data: data
      };
    }
    var pies = data.data.map(function (pieData, i) {
      var r = (height / 2 - 32) / (Array.isArray(data) ? data.length : data.data.length) * i + radius;
      return (0, _pie.default)({
        r: r,
        R: r,
        center: [0, 0],
        data: [pieData, 1 - pieData],
        accessor: function accessor(x) {
          return x;
        }
      });
    });
    var pieBackgrounds = data.data.map(function (pieData, i) {
      var r = (height / 2 - 32) / (Array.isArray(data) ? data.length : data.data.length) * i + radius;
      return (0, _pie.default)({
        r: r,
        R: r,
        center: [0, 0],
        data: [0.999, 0.001],
        accessor: function accessor(x) {
          return x;
        }
      });
    });
    var withLabel = function withLabel(i) {
      return data.labels && data.labels[i];
    };
    var withColor = function withColor(i) {
      return data.colors && data.colors[i];
    };
    var legend = !hideLegend && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
        children: pies.map(function (_, i) {
          return (0, _jsxRuntime.jsx)(_reactNativeSvg.Rect, {
            width: "16px",
            height: "16px",
            fill: _this.props.withCustomBarColorFromData ? withColor(i) : _this.props.chartConfig.color(0.2 * (i + 1), i),
            rx: 8,
            ry: 8,
            x: _this.props.width / 2.5 - 24,
            y: -(_this.props.height / 2.5) + _this.props.height * 0.8 / (Array.isArray(data) ? data.length : data.data.length) * i + 12
          }, Math.random());
        })
      }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
        children: pies.map(function (_, i) {
          return (0, _jsxRuntime.jsx)(_reactNativeSvg.Text, Object.assign({
            x: _this.props.width / 2.5,
            y: -(_this.props.height / 2.5) + _this.props.height * 0.8 / (Array.isArray(data) ? data.length : data.data.length) * i + 12 * 2
          }, _this.getPropsForLabels(), {
            children: withLabel(i) ? data.labels[i] + " " + Math.round(100 * data.data[i]) + "%" : Math.round(100 * data.data[i]) + "%"
          }), Math.random());
        })
      })]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: __assign({
        width: width,
        height: height,
        padding: 0
      }, style),
      children: (0, _jsxRuntime.jsxs)(_reactNativeSvg.Svg, {
        width: width - margin * 2 - marginRight,
        height: height,
        children: [this.renderDefs(__assign({
          width: this.props.height,
          height: this.props.height
        }, this.props.chartConfig)), (0, _jsxRuntime.jsx)(_reactNativeSvg.Rect, {
          width: "100%",
          height: this.props.height,
          rx: borderRadius,
          ry: borderRadius,
          fill: "url(#backgroundGradient)"
        }), (0, _jsxRuntime.jsxs)(_reactNativeSvg.G, {
          x: this.props.width / (hideLegend ? 2 : 2.5),
          y: this.props.height / 2,
          children: [(0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
            children: pieBackgrounds.map(function (pie, i) {
              return (0, _jsxRuntime.jsx)(_reactNativeSvg.Path, {
                d: pie.curves[0].sector.path.print(),
                strokeWidth: strokeWidth,
                stroke: _this.props.chartConfig.color(0.2, i)
              }, Math.random());
            })
          }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
            children: pies.map(function (pie, i) {
              return (0, _jsxRuntime.jsx)(_reactNativeSvg.Path, {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                d: pie.curves[0].sector.path.print(),
                strokeWidth: strokeWidth,
                stroke: _this.props.withCustomBarColorFromData ? withColor(i) : _this.props.chartConfig.color(i / pies.length * 0.5 + 0.5, i)
              }, Math.random());
            })
          }), legend]
        })]
      })
    });
  };
  ProgressChart.defaultProps = {
    style: {},
    strokeWidth: 16,
    radius: 32
  };
  return ProgressChart;
}(_AbstractChart.default);
var _default = ProgressChart;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,