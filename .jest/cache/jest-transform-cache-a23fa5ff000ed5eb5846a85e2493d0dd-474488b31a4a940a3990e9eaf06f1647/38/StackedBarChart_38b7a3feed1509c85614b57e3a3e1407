673c51c6a49676270bbffbafbdbea54e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSvg = require("react-native-svg");
var _AbstractChart = _interopRequireWildcard(require("./AbstractChart"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var StackedBarChart = function (_super) {
  __extends(StackedBarChart, _super);
  function StackedBarChart() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.getBarPercentage = function () {
      var _a = _this.props.chartConfig.barPercentage,
        barPercentage = _a === void 0 ? 1 : _a;
      return barPercentage;
    };
    _this.getBarRadius = function (ret, x) {
      return _this.props.chartConfig.barRadius && ret.length === x.length - 1 ? _this.props.chartConfig.barRadius : 0;
    };
    _this.renderBars = function (_a) {
      var data = _a.data,
        width = _a.width,
        height = _a.height,
        paddingTop = _a.paddingTop,
        paddingRight = _a.paddingRight,
        border = _a.border,
        colors = _a.colors,
        _b = _a.stackedBar,
        stackedBar = _b === void 0 ? false : _b,
        verticalLabelsHeightPercentage = _a.verticalLabelsHeightPercentage;
      return data.map(function (x, i) {
        var barWidth = 32 * _this.getBarPercentage();
        var ret = [];
        var h = 0;
        var st = paddingTop;
        var fac = 1;
        if (stackedBar) {
          fac = 0.7;
        }
        var sum = _this.props.percentile ? x.reduce(function (a, b) {
          return a + b;
        }, 0) : border;
        var barsAreaHeight = height * verticalLabelsHeightPercentage;
        for (var z = 0; z < x.length; z++) {
          h = barsAreaHeight * (x[z] / sum);
          var y = barsAreaHeight - h + st;
          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * fac;
          ret.push((0, _jsxRuntime.jsx)(_reactNativeSvg.Rect, {
            x: xC,
            y: y,
            rx: _this.getBarRadius(ret, x),
            ry: _this.getBarRadius(ret, x),
            width: barWidth,
            height: h,
            fill: colors[z]
          }, Math.random()));
          if (!_this.props.hideLegend) {
            ret.push((0, _jsxRuntime.jsx)(_reactNativeSvg.Text, Object.assign({
              x: xC + 7 + barWidth / 2,
              textAnchor: "end",
              y: h > 15 ? y + 15 : y + 7
            }, _this.getPropsForLabels(), {
              children: x[z]
            }), Math.random()));
          }
          st -= h;
        }
        return ret;
      });
    };
    _this.renderLegend = function (_a) {
      var legend = _a.legend,
        colors = _a.colors,
        width = _a.width,
        height = _a.height;
      return legend.map(function (x, i) {
        return (0, _jsxRuntime.jsxs)(_reactNativeSvg.G, {
          children: [(0, _jsxRuntime.jsx)(_reactNativeSvg.Rect, {
            width: "16px",
            height: "16px",
            fill: colors[i],
            rx: 8,
            ry: 8,
            x: width * 0.71,
            y: height * 0.7 - i * 50
          }), (0, _jsxRuntime.jsx)(_reactNativeSvg.Text, Object.assign({
            x: width * 0.78,
            y: height * 0.76 - i * 50
          }, _this.getPropsForLabels(), {
            children: x
          }))]
        }, Math.random());
      });
    };
    return _this;
  }
  StackedBarChart.prototype.render = function () {
    var paddingTop = 15;
    var paddingRight = 50;
    var barWidth = 32 * this.getBarPercentage();
    var _a = this.props,
      width = _a.width,
      height = _a.height,
      _b = _a.style,
      style = _b === void 0 ? {} : _b,
      data = _a.data,
      _c = _a.withHorizontalLabels,
      withHorizontalLabels = _c === void 0 ? true : _c,
      _d = _a.withVerticalLabels,
      withVerticalLabels = _d === void 0 ? true : _d,
      _e = _a.segments,
      segments = _e === void 0 ? 4 : _e,
      decimalPlaces = _a.decimalPlaces,
      _f = _a.percentile,
      percentile = _f === void 0 ? false : _f,
      _g = _a.verticalLabelsHeightPercentage,
      verticalLabelsHeightPercentage = _g === void 0 ? _AbstractChart.DEFAULT_X_LABELS_HEIGHT_PERCENTAGE : _g,
      _h = _a.formatYLabel,
      formatYLabel = _h === void 0 ? function (yLabel) {
        return yLabel;
      } : _h,
      _j = _a.hideLegend,
      hideLegend = _j === void 0 ? false : _j;
    var _k = style.borderRadius,
      borderRadius = _k === void 0 ? 0 : _k;
    var config = {
      width: width,
      height: height
    };
    var border = 0;
    var max = 0;
    for (var i = 0; i < data.data.length; i++) {
      var actual = data.data[i].reduce(function (pv, cv) {
        return pv + cv;
      }, 0);
      if (actual > max) {
        max = actual;
      }
    }
    if (percentile) {
      border = 100;
    } else {
      border = max;
    }
    var showLegend = !hideLegend && data.legend && data.legend.length != 0;
    var stackedBar = showLegend;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: style,
      children: (0, _jsxRuntime.jsxs)(_reactNativeSvg.Svg, {
        height: height,
        width: width,
        children: [this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), (0, _jsxRuntime.jsx)(_reactNativeSvg.Rect, {
          width: "100%",
          height: height,
          rx: borderRadius,
          ry: borderRadius,
          fill: "url(#backgroundGradient)"
        }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
          children: this.renderHorizontalLines(__assign(__assign({}, config), {
            count: segments,
            paddingTop: paddingTop,
            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage
          }))
        }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
          children: withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {
            count: segments,
            data: [0, border],
            paddingTop: paddingTop,
            paddingRight: paddingRight,
            decimalPlaces: decimalPlaces,
            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage,
            formatYLabel: formatYLabel
          })) : null
        }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
          children: withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {
            labels: data.labels,
            paddingRight: paddingRight + 28,
            stackedBar: stackedBar,
            paddingTop: paddingTop,
            horizontalOffset: barWidth,
            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage
          })) : null
        }), (0, _jsxRuntime.jsx)(_reactNativeSvg.G, {
          children: this.renderBars(__assign(__assign({}, config), {
            data: data.data,
            border: border,
            colors: this.props.data.barColors,
            paddingTop: paddingTop,
            paddingRight: paddingRight + 20,
            stackedBar: stackedBar,
            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage
          }))
        }), showLegend && this.renderLegend(__assign(__assign({}, config), {
          legend: data.legend,
          colors: this.props.data.barColors
        }))]
      })
    });
  };
  return StackedBarChart;
}(_AbstractChart.default);
var _default = StackedBarChart;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,