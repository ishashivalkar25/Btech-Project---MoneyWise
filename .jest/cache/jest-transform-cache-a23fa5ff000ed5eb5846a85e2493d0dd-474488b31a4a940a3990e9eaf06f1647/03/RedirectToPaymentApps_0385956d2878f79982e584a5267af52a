d49ce032e963021c2da903dd75bd2c7f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RedirectToPaymentApps;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _react = _interopRequireWildcard(require("react"));
var _config = require("../../Firebase/config");
var _storage = require("firebase/storage");
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _AntDesign = _interopRequireDefault(require("react-native-vector-icons/AntDesign"));
var _uploadReceiptIcon = _interopRequireDefault(require("../../Assets/uploadReceiptIcon.png"));
var _reactNativeRootToast = _interopRequireDefault(require("react-native-root-toast"));
var _Constants = require("../Constants");
var ImagePicker = _interopRequireWildcard(require("react-native-image-picker"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _reactNativeQrcodeScanner = _interopRequireDefault(require("react-native-qrcode-scanner"));
var _reactNativeCamera = require("react-native-camera");
var _reactNativeGetSmsAndroid = _interopRequireDefault(require("react-native-get-sms-android"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var UPI = _reactNative.NativeModules.UPI;
var downloadURL = "";
function RedirectToPaymentApps(_ref) {
  var route = _ref.route,
    navigation = _ref.navigation;
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    category = _useState2[0],
    setCategory = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    userExpCategories = _useState4[0],
    setUserExpCategories = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    datePicker = _useState6[0],
    setDatePicker = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isCatModalVisible = _useState8[0],
    setVisibilityOfCatModal = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isImgModalVisible = _useState10[0],
    setVisibilityOfImgModal = _useState10[1];
  var _useState11 = (0, _react.useState)(new Date()),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    date = _useState12[0],
    setDate = _useState12[1];
  var _useState13 = (0, _react.useState)(0),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    amount = _useState14[0],
    setAmount = _useState14[1];
  var _useState15 = (0, _react.useState)(''),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    description = _useState16[0],
    setDescription = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    mounted = _useState18[0],
    setMounted = _useState18[1];
  var _useState19 = (0, _react.useState)(""),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    selectedCategory = _useState20[0],
    setSelectedCategory = _useState20[1];
  var _useState21 = (0, _react.useState)(false),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    modalForManualInputVisibility = _useState22[0],
    setmodalForManualInputVisibility = _useState22[1];
  var _useState23 = (0, _react.useState)(false),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    QRScannerVisibility = _useState24[0],
    setQRScannerVisibility = _useState24[1];
  var _useState25 = (0, _react.useState)(''),
    _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
    payerName = _useState26[0],
    setPayerName = _useState26[1];
  var _useState27 = (0, _react.useState)(''),
    _useState28 = (0, _slicedToArray2.default)(_useState27, 2),
    payerUPI = _useState28[0],
    setPayerUPI = _useState28[1];
  var _useState29 = (0, _react.useState)(false),
    _useState30 = (0, _slicedToArray2.default)(_useState29, 2),
    firstEdit = _useState30[0],
    setFirstEdit = _useState30[1];
  var _useState31 = (0, _react.useState)(false),
    _useState32 = (0, _slicedToArray2.default)(_useState31, 2),
    transactionSuccess = _useState32[0],
    setTransactionSuccess = _useState32[1];
  var _useState33 = (0, _react.useState)([]),
    _useState34 = (0, _slicedToArray2.default)(_useState33, 2),
    grpMembersList = _useState34[0],
    setGrpMembersList = _useState34[1];
  var _useState35 = (0, _react.useState)(0),
    _useState36 = (0, _slicedToArray2.default)(_useState35, 2),
    accBalance = _useState36[0],
    setAccBalance = _useState36[1];
  var _useState37 = (0, _react.useState)(false),
    _useState38 = (0, _slicedToArray2.default)(_useState37, 2),
    isEnabled = _useState38[0],
    setIsEnabled = _useState38[1];
  var toggleSwitch = function toggleSwitch(val) {
    if (amount > 0) {
      setIsEnabled(function (previousState) {
        return !previousState;
      });
      console.log(isEnabled);
      if (val) {
        navigation.navigate("AddGrpExpMembers", {
          splitAmount: amount,
          previous_screen: 'Redirect To Payment Apps'
        });
      }
    } else {
      alert("Please Enter Expense Amount!");
    }
  };
  (0, _react.useEffect)(function () {
    if (route.params != null && route.params.grpMembersList) {
      console.log(route.params.grpMembersList, 'route.params.grpMembersList');
      setGrpMembersList(grpMembersList);
    }
  }, [route.params]);
  var _useState39 = (0, _react.useState)(_reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri),
    _useState40 = (0, _slicedToArray2.default)(_useState39, 2),
    pickedImagePath = _useState40[0],
    setPickedImagePath = _useState40[1];
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        var catList = [];
        try {
          var user = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
          user.data().expCategories.forEach(function (item) {
            getcat = {
              label: item,
              value: item
            };
            console.log(getcat);
            catList.push(getcat);
          });
          catList.push({
            label: "other",
            value: "other"
          });
          setCategory(catList);
          setUserExpCategories(user.data().expCategories);
          setAccBalance(user.data().accBalance);
          console.log(user.data().expCategories, "userExpCategories");
        } catch (e) {
          console.error("Error adding document: ", e);
        }
        setMounted(true);
      });
      return function loadData() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadData();
  }, []);
  function showDatePicker() {
    setDatePicker(true);
  }
  function onDateSelected(event, value) {
    setDate(value);
    setDatePicker(false);
  }
  var showImagePicker = function showImagePicker() {
    ImagePicker.launchImageLibrary().then(function (result) {
      if (result) {
        setPickedImagePath(result.assets[0].uri);
      }
    }).catch(function (error) {
      console.log(error);
    });
  };
  var openCamera = function openCamera() {
    ImagePicker.launchCamera().then(function (result) {
      console.log(result.assets[0].uri, "file");
      setPickedImagePath(result.assets[0].uri);
    }).catch(function (error) {
      console.log(error);
    });
  };
  var saveExpense = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      console.log(grpMembersList, 'grpMembersListIn');
      try {
        if (!transactionSuccess) {
          var toast = _reactNativeRootToast.default.show("Please complete transaction first!!.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(toast);
          }, 800);
          return;
        }
        if (amount == 0) {
          var _toast = _reactNativeRootToast.default.show("Please enter amount.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(_toast);
          }, 800);
          return;
        }
        if (selectedCategory == "") {
          var _toast2 = _reactNativeRootToast.default.show("Please select category.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(_toast2);
          }, 800);
          return;
        }
        if (isEnabled && (route.params == null || route.params != null && route.params.grpMembersList != null && route.params.grpMembersList.length == 0)) {
          var _toast3 = _reactNativeRootToast.default.show("Please add group members to split an expense.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(_toast3);
          }, 800);
          return;
        }
        var promise = Promise.resolve();
        if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri) {
          promise = new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
              var blobImage = xhr.response;
              var metadata = {
                contentType: "image/jpeg"
              };
              var storageRef = (0, _storage.ref)(_config.storage, "ExpImages/" + Date.now());
              var uploadTask = (0, _storage.uploadBytesResumable)(storageRef, blobImage, metadata);
              uploadTask.on("state_changed", function (snapshot) {
                var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;
                switch (snapshot.state) {
                  case "paused":
                    console.log("Upload is paused");
                    break;
                  case "running":
                    console.log("Upload is running");
                    break;
                }
              }, function (error) {
                switch (error.code) {
                  case "storage/unauthorized":
                    reject(new Error("User doesn't have permission to access the object"));
                    break;
                  case "storage/canceled":
                    reject(new Error("User canceled the upload"));
                    break;
                  case "storage/unknown":
                    reject(new Error("Unknown error occurred, inspect error.serverResponse"));
                    break;
                  default:
                    reject(error);
                    break;
                }
              }, (0, _asyncToGenerator2.default)(function* () {
                downloadURL = yield (0, _storage.getDownloadURL)(uploadTask.snapshot.ref);
                console.log("File available at", downloadURL);
                setPickedImagePath(downloadURL);
                resolve();
              }));
            };
            xhr.onerror = function () {
              reject(new Error("Network request failed"));
            };
            xhr.responseType = "blob";
            xhr.open("GET", pickedImagePath, true);
            xhr.send(null);
          });
        }
        try {
          yield promise;
          setPickedImagePath(downloadURL);
          var data_1 = {
            expAmount: amount,
            expDate: date,
            expCategory: selectedCategory,
            expDescription: description,
            groupExp: isEnabled
          };
          if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri && downloadURL != "") {
            data_1.expImage = downloadURL;
          }
          if (isEnabled) {
            data_1.grpMembersList = route.params.grpMembersList;
          }
          var docRef = yield (0, _config.addDoc)((0, _config.collection)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), "Expense"), data_1);
          var querySnapshotExp = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "Expense"));
          querySnapshotExp.forEach(function (doc) {});
          var recordId = months[date.getMonth()] + "" + date.getFullYear();
          console.log(recordId);
          var document = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId));
          if (document.data()) {
            var categoryWiseBudget = document.data();
            var isCategoryBudgetSet = false;
            var otherExpIdx = -1;
            var savingsIdx = -1;
            var done = false;
            if (categoryWiseBudget.method === 'Envelop Method') {
              console.log('Inside : ', categoryWiseBudget.method);
              categoryWiseBudget.budget.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                }
                if (item.category == "Additional Expenses") {
                  otherExpIdx = idx;
                }
              });
              if (!isCategoryBudgetSet && otherExpIdx > -1) {
                categoryWiseBudget.budget[otherExpIdx].budgetSpent = categoryWiseBudget.budget[otherExpIdx].budgetSpent + parseFloat(amount);
              }
            } else if (categoryWiseBudget.method === 'Zero Based Budgeting') {
              console.log('Inside : ', categoryWiseBudget.method);
              categoryWiseBudget.budget.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                }
                if (item.category == "Savings") {
                  savingsIdx = idx;
                }
              });
              if (!isCategoryBudgetSet && savingsIdx > -1) {
                categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetSpent + parseFloat(amount);
                categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetPlanned - parseFloat(amount);
                console.log('deducted from other exp', categoryWiseBudget.budget[savingsIdx].budgetSpent);
              }
            } else {
              console.log('Inside : ', categoryWiseBudget);
              categoryWiseBudget.budget.needs.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                  done = true;
                }
              });
              if (!done) {
                categoryWiseBudget.budget.wants.forEach(function (item, idx) {
                  if (item.category == selectedCategory) {
                    item.budgetSpent = item.budgetSpent + parseFloat(amount);
                    isCategoryBudgetSet = true;
                    done = true;
                  }
                });
              }
              if (!done) {
                categoryWiseBudget.budget.savings.forEach(function (item, idx) {
                  if (item.category == selectedCategory) {
                    item.budgetSpent = item.budgetSpent + parseFloat(amount);
                    isCategoryBudgetSet = true;
                    done = true;
                  }
                  if (item.category == "Other Savings") {
                    otherExpIdx = idx;
                  }
                });
                if (!isCategoryBudgetSet && otherExpIdx > -1) {
                  categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent = categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent + parseFloat(amount);
                  done = true;
                }
              }
            }
            yield (0, _config.setDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId), categoryWiseBudget);
          }
          if (!userExpCategories.includes(selectedCategory)) {
            userExpCategories.push(selectedCategory);
            yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
              expCategories: userExpCategories
            });
          }
          var querySnapshot = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "expense"));
          querySnapshot.forEach(function (doc) {
            console.log(doc.id, JSON.stringify(doc.data()));
          });
          yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
            accBalance: parseFloat(accBalance) - parseFloat(amount) + ""
          });
          if (isEnabled) {
            var _document = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
            var userName = _document.data().name;
            route.params.grpMembersList.forEach(function (item) {
              if (userName != item.name) {
                var message = userName + " has split a bill with you. Kindly pay amount of Rs." + item.amount + ".";
                _reactNativeGetSmsAndroid.default.autoSend(item.contactNo, message, function (fail) {
                  console.log('Failed with this error: ' + fail);
                }, function (success) {
                  console.log('SMS sent successfully');
                });
              }
            });
          }
          alert("Record Added Successfully");
          navigation.navigate("Root");
        } catch (error_1) {
          console.error("Error adding document: ", error_1);
          throw error_1;
        }
      } catch (e) {
        console.error("Error adding document: ", e);
      }
    });
    return function saveExpense() {
      return _ref3.apply(this, arguments);
    };
  }();
  var enterUPIManually = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (amount > 0) {
        setmodalForManualInputVisibility(true);
      } else {
        alert("Please Enter amount !!");
      }
    });
    return function enterUPIManually() {
      return _ref5.apply(this, arguments);
    };
  }();
  var makeid = function makeid() {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    var counter = 0;
    while (counter < 35) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
      counter += 1;
    }
    return result;
  };
  var redirectToUPIAppManualIn = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      console.log(payerName, payerUPI, "Input");
      if (payerName != '' && payerUPI != "" && amount > 0) {
        if (validateUPI()) {
          setmodalForManualInputVisibility(false);
          var transactionId = makeid();
          console.log(transactionId, "transactionId");
          var UpiUrl = "upi://pay?pa=" + payerUPI + "&pn=" + payerName + "&tr=" + transactionId + "&am=" + amount + "&mam=null&cu=INR";
          var response = yield UPI.openLink(UpiUrl);
          console.log('Print');
          console.log('response : ', response);
          if (response.includes('SUCCESS')) {
            setTransactionSuccess(true);
          }
        } else {
          alert("Please Enter valid UPI ID!!");
        }
        setmodalForManualInputVisibility(false);
      } else {
        alert("Please Enter All required fields!!");
      }
    });
    return function redirectToUPIAppManualIn() {
      return _ref6.apply(this, arguments);
    };
  }();
  var scanQR = function scanQR() {
    if (amount > 0) {
      setFirstEdit(true);
      console.log('Scan QR');
      setQRScannerVisibility(true);
      console.log(QRScannerVisibility);
    } else {
      alert("Please Enter amount !!");
    }
  };
  var validateUPI = function validateUPI(upi) {
    var regUPi = /[a-zA-Z0-9\\.\\-]{2,256}\\@[a-zA-Z][a-zA-Z]{2,64}/;
    console.log(regUPi.test(upi));
    return regUPi.test(upi);
  };
  var redirectToUPIAppUsingQR = function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (link) {
      var upiLink = link.data;
      console.log('UPI : ', upiLink);
      setQRScannerVisibility(false);
      var response = yield UPI.openLink(String(upiLink));
      console.log('response : ', response);
      if (response.includes('SUCCESS')) {
        setTransactionSuccess(true);
        alert("Transaction Successful!");
      } else {
        alert("Transaction Unsuccessful!");
      }
    });
    return function redirectToUPIAppUsingQR(_x) {
      return _ref7.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative.ImageBackground, {
    source: require('../../Assets/Background.jpeg'),
    style: {
      width: width,
      height: height,
      marginTop: insets.top
    },
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.Title,
      children: "Add Expense"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.mainContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          style: {
            height: height * 0.8
          },
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Amount:"
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                keyboardType: "numeric",
                style: styles.inputText,
                onChangeText: setAmount
              })]
            }), datePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
              value: date,
              mode: "date",
              display: Platform.OS === "ios" ? "spinner" : "default",
              is24Hour: true,
              onChange: onDateSelected,
              style: styles.datePicker
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Date: "
              }), !datePicker && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.inputText,
                children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
                  style: styles.dateButton,
                  onPress: showDatePicker,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear()
                  })
                })
              })]
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.headCenter,
              children: "Select Category"
            }), (0, _jsxRuntime.jsx)(_reactNativeElementDropdown.Dropdown, {
              style: styles.dropdown,
              placeholderStyle: styles.placeholderStyle,
              selectedTextStyle: styles.selectedTextStyle,
              inputSearchStyle: styles.inputSearchStyle,
              iconStyle: styles.iconStyle,
              data: category,
              search: true,
              maxHeight: 300,
              labelField: "label",
              valueField: "value",
              placeholder: "Category",
              searchPlaceholder: "Search...",
              value: selectedCategory,
              onChange: function onChange(item) {
                if (item.value != "other") setSelectedCategory(item.value);else {
                  setVisibilityOfCatModal(true);
                }
              }
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
            animationType: "slide",
            transparent: true,
            visible: isCatModalVisible,
            presentationStyle: "overFullScreen",
            onDismiss: function onDismiss() {
              setVisibilityOfCatModal(!isCatModalVisible);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.viewWrapper,
              children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.modalView,
                children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                  placeholder: "Enter Category",
                  style: styles.textInput,
                  onChangeText: function onChangeText(value) {
                    setSelectedCategory(value);
                  }
                }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
                  title: "Add Category",
                  onPress: function onPress() {
                    setVisibilityOfCatModal(!isCatModalVisible);
                    setCategory([].concat((0, _toConsumableArray2.default)(category), [{
                      label: selectedCategory,
                      value: selectedCategory
                    }]));
                  }
                })]
              })
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [styles.grpExpcontainer, styles.container1],
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.grpExpText,
              children: "Group Expense : "
            }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
              trackColor: {
                false: '#767577',
                true: 'lightgreen'
              },
              thumbColor: isEnabled ? 'green' : 'white',
              onValueChange: function onValueChange(val) {
                return toggleSwitch(val);
              },
              value: isEnabled
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container2,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.head,
              children: "Enter UPI of Payee"
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.container_btn_block,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                disabled: transactionSuccess ? true : false,
                onPress: enterUPIManually,
                style: styles.container2_btn,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require('../../Assets/input.png'),
                  style: {
                    width: 25,
                    height: 25,
                    alignSelf: 'center'
                  }
                }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: {
                    textAlign: "center",
                    color: "white"
                  },
                  children: [' ', "Manual Input", ' ']
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                disabled: transactionSuccess ? true : false,
                onPress: scanQR,
                style: styles.container2_btn,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require('../../Assets/scan.png'),
                  style: {
                    width: 27,
                    height: 27,
                    alignSelf: 'center'
                  }
                }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: {
                    textAlign: "center",
                    color: "white"
                  },
                  children: [' ', "Scan QR", ' ']
                })]
              })]
            }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
              animationType: "slide",
              transparent: true,
              visible: modalForManualInputVisibility,
              presentationStyle: "overFullScreen",
              onDismiss: function onDismiss() {
                setmodalForManualInputVisibility(false);
              },
              style: {
                padding: 200,
                backgroundColor: 'blue'
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.viewWrapper,
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.modalView,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                    placeholder: "Enter Name of Payer...",
                    style: styles.textInput,
                    onChangeText: function onChangeText(value) {
                      setPayerName(value);
                    }
                  }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                    placeholder: "Enter Virtual Payment Address of Payer...",
                    style: styles.textInput,
                    onChangeText: function onChangeText(value) {
                      setPayerUPI(value);
                    }
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: {
                      flexDirection: 'row'
                    },
                    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                      onPress: function onPress() {
                        console.log('submit');
                        redirectToUPIAppManualIn();
                      },
                      style: {
                        backgroundColor: _Constants.darkGreen,
                        margin: 10,
                        padding: 10,
                        borderRadius: 10
                      },
                      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                        style: {
                          color: 'white',
                          fontSize: 15,
                          fontWeight: 'bold'
                        },
                        children: [' ', "Submit", ' ']
                      })
                    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                      onPress: function onPress() {
                        console.log('close');
                        setmodalForManualInputVisibility(false);
                      },
                      style: {
                        backgroundColor: _Constants.darkGreen,
                        margin: 10,
                        padding: 10,
                        borderRadius: 10
                      },
                      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                        style: {
                          color: 'white',
                          fontSize: 15,
                          fontWeight: 'bold'
                        },
                        children: [' ', "Close", ' ']
                      })
                    })]
                  })]
                })
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
              animationType: "slide",
              transparent: true,
              visible: QRScannerVisibility,
              presentationStyle: "overFullScreen",
              onDismiss: function onDismiss() {
                setQRScannerVisibility(false);
              },
              style: {
                padding: 5,
                backgroundColor: 'blue'
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.viewWrapper,
                children: (0, _jsxRuntime.jsx)(_reactNativeQrcodeScanner.default, {
                  onRead: redirectToUPIAppUsingQR,
                  topContent: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.centerText,
                    children: "Move Your Camera over the QR Code"
                  }),
                  bottomContent: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: function onPress() {
                      console.log('close');
                      setQRScannerVisibility(false);
                    },
                    style: {
                      backgroundColor: 'green',
                      width: '100%',
                      textAlign: 'center'
                    },
                    children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: {
                        color: 'white',
                        fontSize: 15,
                        padding: 10,
                        fontWeight: 'bold',
                        textAlign: 'center'
                      },
                      children: [' ', "Close", ' ']
                    })
                  })
                })
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container2,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.head,
              children: "Add note"
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Description",
              style: styles.input1,
              onChangeText: function onChangeText(value) {
                setDescription(value);
              }
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.headCenter,
              children: "Add Image"
            }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
              animationType: "slide",
              transparent: true,
              visible: isImgModalVisible,
              presentationStyle: "overFullScreen",
              onDismiss: function onDismiss() {
                setVisibilityOfCatModal(!isImgModalVisible);
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.viewWrapper,
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.modalView,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: showImagePicker,
                    style: styles.selImg,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: "white",
                        fontSize: 15,
                        fontWeight: 'bold'
                      },
                      children: " Upload image "
                    })
                  }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: openCamera,
                    style: styles.selImg,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: "white",
                        fontSize: 15,
                        fontWeight: 'bold'
                      },
                      children: " Take Photo "
                    })
                  }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: function onPress() {
                      setVisibilityOfImgModal(!isImgModalVisible);
                    },
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: _Constants.darkGreen,
                        fontSize: 15,
                        marginTop: 30
                      },
                      children: " Close "
                    })
                  })]
                })
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                console.log("image clicked");
                setVisibilityOfImgModal(true);
              },
              children: pickedImagePath !== "" && (0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: {
                  uri: pickedImagePath
                },
                style: {
                  width: 50,
                  height: 50,
                  margin: 15,
                  alignSelf: 'center'
                },
                onPress: function onPress() {
                  console.log("image clicked");
                  setVisibilityOfImgModal(true);
                }
              })
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: saveExpense,
            style: {
              backgroundColor: _Constants.darkGreen,
              borderRadius: 200,
              alignItems: 'center',
              width: 250,
              paddingVertical: 5,
              marginVertical: 10,
              alignSelf: 'center'
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "white",
                fontSize: 20,
                fontWeight: 'bold',
                margin: 0
              },
              children: " Save "
            })
          })]
        })
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    borderTopLeftRadius: 40,
    borderTopRightRadius: 40,
    height: height * 0.7,
    width: width,
    backgroundColor: "#fff",
    marginTop: 5
  },
  mainContainer: {
    padding: 25,
    flex: 1,
    height: "100%",
    justifyContent: "space-between"
  },
  container1: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 5,
    backgroundColor: "white",
    marginTop: 20
  },
  container2: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {},
    elevation: 5,
    backgroundColor: "white",
    marginTop: 30,
    paddingTop: 5,
    paddingLeft: 20,
    paddingRight: 20
  },
  container_btn_block: {
    flexDirection: 'row',
    paddingBottom: 10,
    paddingTop: 10,
    justifyContent: "space-around"
  },
  container2_btn: {
    padding: 15,
    flexGrow: 1,
    flexShrink: 0,
    flexBasis: 100,
    borderRadius: 10,
    backgroundColor: "#841584",
    color: "white",
    width: 150,
    margin: 5
  },
  Title: {
    color: "white",
    fontSize: 50,
    fontWeight: "bold",
    marginVertical: 20,
    alignSelf: "center"
  },
  inputPair: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10
  },
  head: {
    fontWeight: "bold",
    fontSize: 16,
    color: _Constants.darkGreen
  },
  inputText: {
    padding: 0,
    borderRadius: 5,
    color: _Constants.darkGreen,
    paddingHorizontal: 5,
    width: '60%',
    height: 40,
    backgroundColor: 'rgb(220,220, 220)'
  },
  input: {
    borderRadius: 5,
    color: _Constants.darkGreen,
    paddingHorizontal: 5,
    width: '60%',
    height: 30,
    backgroundColor: 'rgb(220,220, 220)',
    justifyContent: 'space-around'
  },
  input1: {
    borderWidth: 1,
    borderColor: '#777',
    borderRadius: 10,
    padding: 10,
    width: "100%",
    height: 80,
    marginTop: 10,
    marginBottom: 15,
    textAlignVertical: "top",
    textAlign: 'left'
  },
  headCenter: {
    marginTop: 10,
    fontWeight: "bold",
    alignSelf: "center",
    color: _Constants.darkGreen,
    fontSize: 16
  },
  date: {
    flexDirection: 'row',
    justifyContent: 'space-around'
  },
  head1: {
    marginTop: 12,
    fontWeight: 'bold',
    alignSelf: 'center',
    color: _Constants.darkGreen,
    fontSize: 16
  },
  dropDownStyle: {
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: "center",
    borderRadius: 6,
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  dropDownIcon: {
    resizeMode: 'contain'
  },
  modal: {
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
    height: 300,
    width: "80%",
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#fff",
    marginTop: 80,
    marginLeft: 40
  },
  viewWrapper: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)'
  },
  modalView: {
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "50%",
    left: "50%",
    elevation: 5,
    transform: [{
      translateX: -(width * 0.4)
    }, {
      translateY: -90
    }],
    height: 180,
    width: width * 0.8,
    backgroundColor: "#fff",
    borderRadius: 7
  },
  centerText: {
    fontSize: 16,
    padding: 10,
    fontWeight: 'bold',
    width: "100%",
    backgroundColor: "rgba(255, 255, 255, 1)",
    textAlign: 'center'
  },
  textInput: {
    width: "80%",
    borderRadius: 5,
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderColor: "rgba(0, 0, 0, 0.2)",
    borderWidth: 1,
    marginBottom: 8,
    backgroundColor: "rgba(0, 0, 0, 0.2)"
  },
  dateLabel: {
    marginTop: 15
  },
  dateButton: {
    padding: 7,
    alignSelf: 'center',
    borderRadius: 5,
    flexDirection: 'row',
    width: 180,
    alignItems: 'center',
    backgroundColor: 'rgb(220,220, 220)'
  },
  dateText: {
    fontSize: 14,
    lineHeight: 21,
    letterSpacing: 0.25,
    color: 'black'
  },
  catItem: {
    padding: 10,
    backgroundColor: 'skyblue',
    fontSize: 14,
    marginHorizontal: 10,
    marginTop: 24
  },
  dropdown: {
    margin: 10,
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: 'center',
    borderRadius: 6,
    alignItems: 'center'
  },
  icon: {
    marginRight: 5
  },
  placeholderStyle: {
    fontSize: 14
  },
  selectedTextStyle: {
    fontSize: 14
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  imgButtonContainer: {
    width: 400,
    flexDirection: 'column',
    justifyContent: 'space-around'
  },
  imageContainer: {
    padding: 30
  },
  image: {
    width: 200,
    height: 10,
    resizeMode: 'cover'
  },
  buttonContainer: {
    backgroundColor: '#33adff',
    padding: 5,
    alignItems: 'center',
    borderRadius: 10,
    width: '85%',
    alignSelf: 'center',
    fontWeight: 'bold',
    fontSize: 50,
    paddingLeft: 30
  },
  backImg: {
    height: '100%'
  },
  selImg: {
    backgroundColor: _Constants.darkGreen,
    borderRadius: 10,
    alignItems: 'center',
    width: 150,
    paddingVertical: 5,
    marginVertical: 10,
    alignSelf: 'center',
    marginTop: 5
  },
  grpExpcontainer: {
    backgroundColor: 'rgba(0,0,0,0.2)',
    borderRadius: 10,
    flexDirection: "row",
    justifyContent: 'space-between',
    alignItems: "center",
    marginVertical: 5,
    height: 50,
    paddingHorizontal: 20
  },
  grpExpText: {
    color: _Constants.darkGreen,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2RhdGV0aW1lcGlja2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbmZpZyIsIl9zdG9yYWdlIiwiX3JlYWN0TmF0aXZlRWxlbWVudERyb3Bkb3duIiwiX0FudERlc2lnbiIsIl91cGxvYWRSZWNlaXB0SWNvbiIsIl9yZWFjdE5hdGl2ZVJvb3RUb2FzdCIsIl9Db25zdGFudHMiLCJJbWFnZVBpY2tlciIsIl9yZWFjdE5hdGl2ZVNhZmVBcmVhQ29udGV4dCIsIl9yZWFjdE5hdGl2ZVFyY29kZVNjYW5uZXIiLCJfcmVhY3ROYXRpdmVDYW1lcmEiLCJfcmVhY3ROYXRpdmVHZXRTbXNBbmRyb2lkIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX0RpbWVuc2lvbnMkZ2V0IiwiRGltZW5zaW9ucyIsIndpZHRoIiwiaGVpZ2h0IiwibW9udGhzIiwiVVBJIiwiTmF0aXZlTW9kdWxlcyIsImRvd25sb2FkVVJMIiwiUmVkaXJlY3RUb1BheW1lbnRBcHBzIiwiX3JlZiIsInJvdXRlIiwibmF2aWdhdGlvbiIsImluc2V0cyIsInVzZVNhZmVBcmVhSW5zZXRzIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiY2F0ZWdvcnkiLCJzZXRDYXRlZ29yeSIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwidXNlckV4cENhdGVnb3JpZXMiLCJzZXRVc2VyRXhwQ2F0ZWdvcmllcyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiZGF0ZVBpY2tlciIsInNldERhdGVQaWNrZXIiLCJfdXNlU3RhdGU3IiwiX3VzZVN0YXRlOCIsImlzQ2F0TW9kYWxWaXNpYmxlIiwic2V0VmlzaWJpbGl0eU9mQ2F0TW9kYWwiLCJfdXNlU3RhdGU5IiwiX3VzZVN0YXRlMTAiLCJpc0ltZ01vZGFsVmlzaWJsZSIsInNldFZpc2liaWxpdHlPZkltZ01vZGFsIiwiX3VzZVN0YXRlMTEiLCJEYXRlIiwiX3VzZVN0YXRlMTIiLCJkYXRlIiwic2V0RGF0ZSIsIl91c2VTdGF0ZTEzIiwiX3VzZVN0YXRlMTQiLCJhbW91bnQiLCJzZXRBbW91bnQiLCJfdXNlU3RhdGUxNSIsIl91c2VTdGF0ZTE2IiwiZGVzY3JpcHRpb24iLCJzZXREZXNjcmlwdGlvbiIsIl91c2VTdGF0ZTE3IiwiX3VzZVN0YXRlMTgiLCJtb3VudGVkIiwic2V0TW91bnRlZCIsIl91c2VTdGF0ZTE5IiwiX3VzZVN0YXRlMjAiLCJzZWxlY3RlZENhdGVnb3J5Iiwic2V0U2VsZWN0ZWRDYXRlZ29yeSIsIl91c2VTdGF0ZTIxIiwiX3VzZVN0YXRlMjIiLCJtb2RhbEZvck1hbnVhbElucHV0VmlzaWJpbGl0eSIsInNldG1vZGFsRm9yTWFudWFsSW5wdXRWaXNpYmlsaXR5IiwiX3VzZVN0YXRlMjMiLCJfdXNlU3RhdGUyNCIsIlFSU2Nhbm5lclZpc2liaWxpdHkiLCJzZXRRUlNjYW5uZXJWaXNpYmlsaXR5IiwiX3VzZVN0YXRlMjUiLCJfdXNlU3RhdGUyNiIsInBheWVyTmFtZSIsInNldFBheWVyTmFtZSIsIl91c2VTdGF0ZTI3IiwiX3VzZVN0YXRlMjgiLCJwYXllclVQSSIsInNldFBheWVyVVBJIiwiX3VzZVN0YXRlMjkiLCJfdXNlU3RhdGUzMCIsImZpcnN0RWRpdCIsInNldEZpcnN0RWRpdCIsIl91c2VTdGF0ZTMxIiwiX3VzZVN0YXRlMzIiLCJ0cmFuc2FjdGlvblN1Y2Nlc3MiLCJzZXRUcmFuc2FjdGlvblN1Y2Nlc3MiLCJfdXNlU3RhdGUzMyIsIl91c2VTdGF0ZTM0IiwiZ3JwTWVtYmVyc0xpc3QiLCJzZXRHcnBNZW1iZXJzTGlzdCIsIl91c2VTdGF0ZTM1IiwiX3VzZVN0YXRlMzYiLCJhY2NCYWxhbmNlIiwic2V0QWNjQmFsYW5jZSIsIl91c2VTdGF0ZTM3IiwiX3VzZVN0YXRlMzgiLCJpc0VuYWJsZWQiLCJzZXRJc0VuYWJsZWQiLCJ0b2dnbGVTd2l0Y2giLCJ2YWwiLCJwcmV2aW91c1N0YXRlIiwiY29uc29sZSIsImxvZyIsIm5hdmlnYXRlIiwic3BsaXRBbW91bnQiLCJwcmV2aW91c19zY3JlZW4iLCJhbGVydCIsInVzZUVmZmVjdCIsInBhcmFtcyIsIl91c2VTdGF0ZTM5IiwiSW1hZ2UiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJ1cGxvYWRJbWciLCJ1cmkiLCJfdXNlU3RhdGU0MCIsInBpY2tlZEltYWdlUGF0aCIsInNldFBpY2tlZEltYWdlUGF0aCIsImxvYWREYXRhIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJjYXRMaXN0IiwidXNlciIsImdldERvYyIsImRvYyIsImRiIiwiYXV0aCIsImN1cnJlbnRVc2VyIiwidWlkIiwiZGF0YSIsImV4cENhdGVnb3JpZXMiLCJmb3JFYWNoIiwiaXRlbSIsImdldGNhdCIsImxhYmVsIiwidmFsdWUiLCJwdXNoIiwiZSIsImVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzaG93RGF0ZVBpY2tlciIsIm9uRGF0ZVNlbGVjdGVkIiwiZXZlbnQiLCJzaG93SW1hZ2VQaWNrZXIiLCJsYXVuY2hJbWFnZUxpYnJhcnkiLCJ0aGVuIiwicmVzdWx0IiwiYXNzZXRzIiwiY2F0Y2giLCJvcGVuQ2FtZXJhIiwibGF1bmNoQ2FtZXJhIiwic2F2ZUV4cGVuc2UiLCJfcmVmMyIsInRvYXN0IiwiVG9hc3QiLCJzaG93IiwiZHVyYXRpb24iLCJkdXJhdGlvbnMiLCJMT05HIiwic2V0VGltZW91dCIsImhpZGVUb2FzdCIsImhpZGUiLCJsZW5ndGgiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsImJsb2JJbWFnZSIsInJlc3BvbnNlIiwibWV0YWRhdGEiLCJjb250ZW50VHlwZSIsInN0b3JhZ2VSZWYiLCJyZWYiLCJzdG9yYWdlIiwibm93IiwidXBsb2FkVGFzayIsInVwbG9hZEJ5dGVzUmVzdW1hYmxlIiwib24iLCJzbmFwc2hvdCIsInByb2dyZXNzIiwiYnl0ZXNUcmFuc2ZlcnJlZCIsInRvdGFsQnl0ZXMiLCJzdGF0ZSIsImNvZGUiLCJFcnJvciIsImdldERvd25sb2FkVVJMIiwib25lcnJvciIsInJlc3BvbnNlVHlwZSIsIm9wZW4iLCJzZW5kIiwiZGF0YV8xIiwiZXhwQW1vdW50IiwiZXhwRGF0ZSIsImV4cENhdGVnb3J5IiwiZXhwRGVzY3JpcHRpb24iLCJncm91cEV4cCIsImV4cEltYWdlIiwiZG9jUmVmIiwiYWRkRG9jIiwiY29sbGVjdGlvbiIsInF1ZXJ5U25hcHNob3RFeHAiLCJnZXREb2NzIiwicmVjb3JkSWQiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZG9jdW1lbnQiLCJjYXRlZ29yeVdpc2VCdWRnZXQiLCJpc0NhdGVnb3J5QnVkZ2V0U2V0Iiwib3RoZXJFeHBJZHgiLCJzYXZpbmdzSWR4IiwiZG9uZSIsIm1ldGhvZCIsImJ1ZGdldCIsImlkeCIsImJ1ZGdldFNwZW50IiwicGFyc2VGbG9hdCIsImJ1ZGdldFBsYW5uZWQiLCJuZWVkcyIsIndhbnRzIiwic2F2aW5ncyIsInNldERvYyIsImluY2x1ZGVzIiwidXBkYXRlRG9jIiwicXVlcnlTbmFwc2hvdCIsImlkIiwiSlNPTiIsInN0cmluZ2lmeSIsInVzZXJOYW1lIiwibmFtZSIsIm1lc3NhZ2UiLCJTbXNBbmRyb2lkIiwiYXV0b1NlbmQiLCJjb250YWN0Tm8iLCJmYWlsIiwic3VjY2VzcyIsImVycm9yXzEiLCJlbnRlclVQSU1hbnVhbGx5IiwiX3JlZjUiLCJtYWtlaWQiLCJjaGFyYWN0ZXJzIiwiY2hhcmFjdGVyc0xlbmd0aCIsImNvdW50ZXIiLCJjaGFyQXQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJyZWRpcmVjdFRvVVBJQXBwTWFudWFsSW4iLCJfcmVmNiIsInZhbGlkYXRlVVBJIiwidHJhbnNhY3Rpb25JZCIsIlVwaVVybCIsIm9wZW5MaW5rIiwic2NhblFSIiwidXBpIiwicmVnVVBpIiwidGVzdCIsInJlZGlyZWN0VG9VUElBcHBVc2luZ1FSIiwiX3JlZjciLCJsaW5rIiwidXBpTGluayIsIlN0cmluZyIsIl94IiwianN4cyIsIkltYWdlQmFja2dyb3VuZCIsInNvdXJjZSIsInN0eWxlIiwibWFyZ2luVG9wIiwidG9wIiwiY2hpbGRyZW4iLCJqc3giLCJUZXh0Iiwic3R5bGVzIiwiVGl0bGUiLCJWaWV3IiwiY29udGFpbmVyIiwibWFpbkNvbnRhaW5lciIsIlNjcm9sbFZpZXciLCJjb250YWluZXIxIiwiaW5wdXRQYWlyIiwiaGVhZCIsIlRleHRJbnB1dCIsImtleWJvYXJkVHlwZSIsImlucHV0VGV4dCIsIm9uQ2hhbmdlVGV4dCIsIm1vZGUiLCJkaXNwbGF5IiwiUGxhdGZvcm0iLCJPUyIsImlzMjRIb3VyIiwib25DaGFuZ2UiLCJQcmVzc2FibGUiLCJkYXRlQnV0dG9uIiwib25QcmVzcyIsImdldERhdGUiLCJoZWFkQ2VudGVyIiwiRHJvcGRvd24iLCJkcm9wZG93biIsInBsYWNlaG9sZGVyU3R5bGUiLCJzZWxlY3RlZFRleHRTdHlsZSIsImlucHV0U2VhcmNoU3R5bGUiLCJpY29uU3R5bGUiLCJzZWFyY2giLCJtYXhIZWlnaHQiLCJsYWJlbEZpZWxkIiwidmFsdWVGaWVsZCIsInBsYWNlaG9sZGVyIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJNb2RhbCIsImFuaW1hdGlvblR5cGUiLCJ0cmFuc3BhcmVudCIsInZpc2libGUiLCJwcmVzZW50YXRpb25TdHlsZSIsIm9uRGlzbWlzcyIsInZpZXdXcmFwcGVyIiwibW9kYWxWaWV3IiwidGV4dElucHV0IiwiQnV0dG9uIiwidGl0bGUiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiZ3JwRXhwY29udGFpbmVyIiwiZ3JwRXhwVGV4dCIsIlN3aXRjaCIsInRyYWNrQ29sb3IiLCJmYWxzZSIsInRydWUiLCJ0aHVtYkNvbG9yIiwib25WYWx1ZUNoYW5nZSIsImNvbnRhaW5lcjIiLCJjb250YWluZXJfYnRuX2Jsb2NrIiwiVG91Y2hhYmxlT3BhY2l0eSIsImRpc2FibGVkIiwiY29udGFpbmVyMl9idG4iLCJhbGlnblNlbGYiLCJ0ZXh0QWxpZ24iLCJjb2xvciIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGV4RGlyZWN0aW9uIiwiZGFya0dyZWVuIiwibWFyZ2luIiwiYm9yZGVyUmFkaXVzIiwiZm9udFNpemUiLCJmb250V2VpZ2h0Iiwib25SZWFkIiwidG9wQ29udGVudCIsImNlbnRlclRleHQiLCJib3R0b21Db250ZW50IiwiaW5wdXQxIiwic2VsSW1nIiwiYWxpZ25JdGVtcyIsInBhZGRpbmdWZXJ0aWNhbCIsIm1hcmdpblZlcnRpY2FsIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsImVsZXZhdGlvbiIsInBhZGRpbmdUb3AiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJmbGV4QmFzaXMiLCJwYWRkaW5nSG9yaXpvbnRhbCIsImlucHV0IiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsIm1hcmdpbkJvdHRvbSIsInRleHRBbGlnblZlcnRpY2FsIiwiaGVhZDEiLCJkcm9wRG93blN0eWxlIiwiZHJvcERvd25JY29uIiwicmVzaXplTW9kZSIsIm1vZGFsIiwibWFyZ2luTGVmdCIsInBvc2l0aW9uIiwibGVmdCIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiZGF0ZUxhYmVsIiwiZGF0ZVRleHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhdEl0ZW0iLCJtYXJnaW5Ib3Jpem9udGFsIiwiaWNvbiIsIm1hcmdpblJpZ2h0Iiwic2NyZWVuIiwiaW1nQnV0dG9uQ29udGFpbmVyIiwiaW1hZ2VDb250YWluZXIiLCJpbWFnZSIsImJ1dHRvbkNvbnRhaW5lciIsImJhY2tJbWciXSwic291cmNlcyI6WyJSZWRpcmVjdFRvUGF5bWVudEFwcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuXHRTdHlsZVNoZWV0LFxyXG5cdFRleHQsXHJcblx0VmlldyxcclxuXHRCdXR0b24sXHJcblx0VGV4dElucHV0LFxyXG5cdFByZXNzYWJsZSxcclxuXHREaW1lbnNpb25zLFxyXG5cdE1vZGFsLFxyXG5cdEltYWdlLFxyXG5cdFRvdWNoYWJsZU9wYWNpdHksXHJcblx0SW1hZ2VCYWNrZ3JvdW5kLFxyXG5cdFNjcm9sbFZpZXcsXHJcblx0U3dpdGNoXHJcbn0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgRGF0ZVRpbWVQaWNrZXIgZnJvbSBcIkByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2RhdGV0aW1lcGlja2VyXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7XHJcblx0ZGIsXHJcblx0Y29sbGVjdGlvbixcclxuXHRhZGREb2MsXHJcblx0Z2V0RG9jcyxcclxuXHRnZXREb2MsXHJcblx0c3RvcmFnZSxcclxuXHRhdXRoLFxyXG5cdGRvYywgc2V0RG9jLCB1cGRhdGVEb2NcclxufSBmcm9tICcuLi8uLi9GaXJlYmFzZS9jb25maWcnO1xyXG5cclxuXHJcbmltcG9ydCB7IHJlZiwgdXBsb2FkQnl0ZXNSZXN1bWFibGUsIGdldERvd25sb2FkVVJMIH0gZnJvbSBcImZpcmViYXNlL3N0b3JhZ2VcIjtcclxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tIFwicmVhY3QtbmF0aXZlLWVsZW1lbnQtZHJvcGRvd25cIjtcclxuaW1wb3J0IEFudERlc2lnbiBmcm9tIFwicmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9BbnREZXNpZ25cIjtcclxuaW1wb3J0IHVwbG9hZEltZyBmcm9tIFwiLi4vLi4vQXNzZXRzL3VwbG9hZFJlY2VpcHRJY29uLnBuZ1wiO1xyXG5pbXBvcnQgVG9hc3QgZnJvbSAncmVhY3QtbmF0aXZlLXJvb3QtdG9hc3QnO1xyXG5pbXBvcnQgeyBkYXJrR3JlZW4gfSBmcm9tICcuLi9Db25zdGFudHMnO1xyXG5pbXBvcnQgKiBhcyBJbWFnZVBpY2tlciBmcm9tICdyZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyJztcclxuaW1wb3J0IHsgdXNlU2FmZUFyZWFJbnNldHMgfSBmcm9tICdyZWFjdC1uYXRpdmUtc2FmZS1hcmVhLWNvbnRleHQnO1xyXG5pbXBvcnQgUVJDb2RlU2Nhbm5lciBmcm9tICdyZWFjdC1uYXRpdmUtcXJjb2RlLXNjYW5uZXInO1xyXG5pbXBvcnQgeyBSTkNhbWVyYSB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1jYW1lcmEnO1xyXG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCBTbXNBbmRyb2lkIGZyb20gJ3JlYWN0LW5hdGl2ZS1nZXQtc21zLWFuZHJvaWQnO1xyXG5cclxuY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBEaW1lbnNpb25zLmdldChcIndpbmRvd1wiKTtcclxuXHJcbmNvbnN0IG1vbnRocyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdXHJcblxyXG5cclxuY29uc3QgVVBJID0gTmF0aXZlTW9kdWxlcy5VUEk7IC8vICdVUEknIHdhcyBtb2R1bGUgbmFtZSBnaXZlblxyXG5sZXQgZG93bmxvYWRVUkwgPSBcIlwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZWRpcmVjdFRvUGF5bWVudEFwcHMoe3JvdXRlLCBuYXZpZ2F0aW9ufSkge1xyXG5cclxuXHRjb25zdCBpbnNldHMgPSB1c2VTYWZlQXJlYUluc2V0cygpO1xyXG5cdGNvbnN0IFtjYXRlZ29yeSwgc2V0Q2F0ZWdvcnldID0gdXNlU3RhdGUoW10pO1xyXG5cdGNvbnN0IFt1c2VyRXhwQ2F0ZWdvcmllcywgc2V0VXNlckV4cENhdGVnb3JpZXNdID0gdXNlU3RhdGUoW10pO1xyXG5cdGNvbnN0IFtkYXRlUGlja2VyLCBzZXREYXRlUGlja2VyXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbaXNDYXRNb2RhbFZpc2libGUsIHNldFZpc2liaWxpdHlPZkNhdE1vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbaXNJbWdNb2RhbFZpc2libGUsIHNldFZpc2liaWxpdHlPZkltZ01vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbZGF0ZSwgc2V0RGF0ZV0gPSB1c2VTdGF0ZShuZXcgRGF0ZSgpKTtcclxuXHRjb25zdCBbYW1vdW50LCBzZXRBbW91bnRdID0gdXNlU3RhdGUoMCk7XHJcblx0Y29uc3QgW2Rlc2NyaXB0aW9uLCBzZXREZXNjcmlwdGlvbl0gPSB1c2VTdGF0ZSgnJyk7XHJcblx0Y29uc3QgW21vdW50ZWQsIHNldE1vdW50ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cdGNvbnN0IFtzZWxlY3RlZENhdGVnb3J5LCBzZXRTZWxlY3RlZENhdGVnb3J5XSA9IHVzZVN0YXRlKFwiXCIpO1xyXG5cdGNvbnN0IFttb2RhbEZvck1hbnVhbElucHV0VmlzaWJpbGl0eSwgc2V0bW9kYWxGb3JNYW51YWxJbnB1dFZpc2liaWxpdHldID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cdGNvbnN0IFtRUlNjYW5uZXJWaXNpYmlsaXR5LCBzZXRRUlNjYW5uZXJWaXNpYmlsaXR5XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbcGF5ZXJOYW1lLCBzZXRQYXllck5hbWVdID0gdXNlU3RhdGUoJycpO1xyXG5cdGNvbnN0IFtwYXllclVQSSwgc2V0UGF5ZXJVUEldID0gdXNlU3RhdGUoJycpO1xyXG5cdGNvbnN0IFtmaXJzdEVkaXQsIHNldEZpcnN0RWRpdF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblx0Y29uc3QgW3RyYW5zYWN0aW9uU3VjY2Vzcywgc2V0VHJhbnNhY3Rpb25TdWNjZXNzXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbZ3JwTWVtYmVyc0xpc3QsIHNldEdycE1lbWJlcnNMaXN0XSA9IHVzZVN0YXRlKFtdKTtcclxuXHRjb25zdCBbYWNjQmFsYW5jZSwgc2V0QWNjQmFsYW5jZV0gPSB1c2VTdGF0ZSgwKTtcclxuXHRjb25zdCBbaXNFbmFibGVkLCBzZXRJc0VuYWJsZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuXHRjb25zdCB0b2dnbGVTd2l0Y2ggPSAodmFsKSA9PiB7XHJcblxyXG5cdFx0aWYgKGFtb3VudCA+IDApIHtcclxuXHRcdFx0c2V0SXNFbmFibGVkKHByZXZpb3VzU3RhdGUgPT4gIXByZXZpb3VzU3RhdGUpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhpc0VuYWJsZWQpXHJcblx0XHRcdGlmICh2YWwpIHtcclxuXHRcdFx0XHRuYXZpZ2F0aW9uLm5hdmlnYXRlKFwiQWRkR3JwRXhwTWVtYmVyc1wiLCB7XHJcblx0XHRcdFx0XHRzcGxpdEFtb3VudDogYW1vdW50LFxyXG5cdFx0XHRcdFx0cHJldmlvdXNfc2NyZWVuOiAnUmVkaXJlY3QgVG8gUGF5bWVudCBBcHBzJ1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRhbGVydChcIlBsZWFzZSBFbnRlciBFeHBlbnNlIEFtb3VudCFcIilcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblxyXG5cdFx0aWYgKHJvdXRlLnBhcmFtcyE9bnVsbCAmJiByb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QpIHtcclxuXHRcdFx0Y29uc29sZS5sb2cocm91dGUucGFyYW1zLmdycE1lbWJlcnNMaXN0LCAncm91dGUucGFyYW1zLmdycE1lbWJlcnNMaXN0Jyk7XHJcblx0XHRcdHNldEdycE1lbWJlcnNMaXN0KGdycE1lbWJlcnNMaXN0KTtcclxuXHRcdH1cclxuXHR9LCBbcm91dGUucGFyYW1zXSlcclxuXHJcblxyXG5cdGNvbnN0IFtwaWNrZWRJbWFnZVBhdGgsIHNldFBpY2tlZEltYWdlUGF0aF0gPSB1c2VTdGF0ZShcclxuXHRcdEltYWdlLnJlc29sdmVBc3NldFNvdXJjZSh1cGxvYWRJbWcpLnVyaVxyXG5cdCk7XHJcblxyXG5cdFxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0Y29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGNhdExpc3QgPSBbXTtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCB1c2VyID0gYXdhaXQgZ2V0RG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSk7XHJcblx0XHRcdFx0dXNlci5kYXRhKCkuZXhwQ2F0ZWdvcmllcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHQvLyAgIGNvbnNvbGUubG9nKGRvYy5pZCwgSlNPTi5zdHJpbmdpZnkoZG9jLmRhdGEoKSkpO1xyXG5cdFx0XHRcdFx0Z2V0Y2F0ID0geyBsYWJlbDogaXRlbSwgdmFsdWU6IGl0ZW0gfTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGdldGNhdCk7XHJcblx0XHRcdFx0XHRjYXRMaXN0LnB1c2goZ2V0Y2F0KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh1c2VyLmRhdGEoKSAsIFwidXNlclwiKTtcclxuXHRcdFx0XHQvLyBjYXRMaXN0LnB1c2godXNlci5kYXRhKCkuZXhwQ2F0ZWdvcmllcyk7XHJcblx0XHRcdFx0Y2F0TGlzdC5wdXNoKHsgbGFiZWw6IFwib3RoZXJcIiwgdmFsdWU6IFwib3RoZXJcIiB9KTtcclxuXHRcdFx0XHRzZXRDYXRlZ29yeShjYXRMaXN0KTtcclxuXHRcdFx0XHRzZXRVc2VyRXhwQ2F0ZWdvcmllcyh1c2VyLmRhdGEoKS5leHBDYXRlZ29yaWVzKTtcclxuXHRcdFx0XHRzZXRBY2NCYWxhbmNlKHVzZXIuZGF0YSgpLmFjY0JhbGFuY2UpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHVzZXIuZGF0YSgpLmV4cENhdGVnb3JpZXMsIFwidXNlckV4cENhdGVnb3JpZXNcIik7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coY2F0ZWdvcnkpO1xyXG5cdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBkb2N1bWVudDogXCIsIGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNldE1vdW50ZWQodHJ1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0bG9hZERhdGEoKTtcclxuXHR9XHJcblx0XHQsIFtdKTtcclxuXHJcblxyXG5cdGZ1bmN0aW9uIHNob3dEYXRlUGlja2VyKCkge1xyXG5cdFx0c2V0RGF0ZVBpY2tlcih0cnVlKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIG9uRGF0ZVNlbGVjdGVkKGV2ZW50LCB2YWx1ZSkge1xyXG5cdFx0c2V0RGF0ZSh2YWx1ZSk7XHJcblx0XHRzZXREYXRlUGlja2VyKGZhbHNlKTtcclxuXHR9XHJcblxyXG5cdC8vIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIFwiU2VsZWN0IGFuIGltYWdlXCIgYnV0dG9uIHByZXNzZWRcclxuXHRjb25zdCBzaG93SW1hZ2VQaWNrZXIgPSAoKSA9PiB7XHJcblx0XHRJbWFnZVBpY2tlci5sYXVuY2hJbWFnZUxpYnJhcnkoKVxyXG5cdFx0XHQudGhlbigocmVzdWx0KSA9PiB7XHJcblx0XHRcdFx0aWYgKHJlc3VsdCkge1xyXG5cdFx0XHRcdFx0c2V0UGlja2VkSW1hZ2VQYXRoKHJlc3VsdC5hc3NldHNbMF0udXJpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5jYXRjaCgoZXJyb3IpID0+IHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gVGhpcyBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgXCJPcGVuIGNhbWVyYVwiIGJ1dHRvbiBwcmVzc2VkXHJcblx0Y29uc3Qgb3BlbkNhbWVyYSA9ICgpID0+IHtcclxuXHRcdEltYWdlUGlja2VyLmxhdW5jaENhbWVyYSgpXHJcblx0XHRcdC50aGVuKChyZXN1bHQpID0+IHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXN1bHQuYXNzZXRzWzBdLnVyaSwgXCJmaWxlXCIpO1xyXG5cdFx0XHRcdHNldFBpY2tlZEltYWdlUGF0aChyZXN1bHQuYXNzZXRzWzBdLnVyaSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5jYXRjaCgoZXJyb3IpID0+IHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IHNhdmVFeHBlbnNlID0gYXN5bmMgKCkgPT4ge1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKGdycE1lbWJlcnNMaXN0LCAnZ3JwTWVtYmVyc0xpc3RJbicpXHJcblx0XHR0cnkge1xyXG5cclxuXHRcdFx0aWYoIXRyYW5zYWN0aW9uU3VjY2Vzcyl7XHJcblxyXG5cdFx0XHRcdGxldCB0b2FzdCA9IFRvYXN0LnNob3coXCJQbGVhc2UgY29tcGxldGUgdHJhbnNhY3Rpb24gZmlyc3QhIS5cIiwge1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246IFRvYXN0LmR1cmF0aW9ucy5MT05HLFxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyBZb3UgY2FuIG1hbnVhbGx5IGhpZGUgdGhlIFRvYXN0LCBvciBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgZGlzYXBwZWFyIGFmdGVyIGEgYGR1cmF0aW9uYCBtcyB0aW1lb3V0LlxyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gaGlkZVRvYXN0KCkge1xyXG5cdFx0XHRcdFx0VG9hc3QuaGlkZSh0b2FzdCk7XHJcblx0XHRcdFx0fSwgODAwKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAoYW1vdW50ID09IDApIHtcclxuXHRcdFx0XHRsZXQgdG9hc3QgPSBUb2FzdC5zaG93KFwiUGxlYXNlIGVudGVyIGFtb3VudC5cIiwge1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246IFRvYXN0LmR1cmF0aW9ucy5MT05HLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gaGlkZVRvYXN0KCkge1xyXG5cdFx0XHRcdFx0VG9hc3QuaGlkZSh0b2FzdCk7XHJcblx0XHRcdFx0fSwgODAwKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoc2VsZWN0ZWRDYXRlZ29yeSA9PSBcIlwiKSB7XHJcblx0XHRcdFx0bGV0IHRvYXN0ID0gVG9hc3Quc2hvdyhcIlBsZWFzZSBzZWxlY3QgY2F0ZWdvcnkuXCIsIHtcclxuXHRcdFx0XHRcdGR1cmF0aW9uOiBUb2FzdC5kdXJhdGlvbnMuTE9ORyxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uIGhpZGVUb2FzdCgpIHtcclxuXHRcdFx0XHRcdFRvYXN0LmhpZGUodG9hc3QpO1xyXG5cdFx0XHRcdH0sIDgwMCk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGlzRW5hYmxlZCAmJiAocm91dGUucGFyYW1zPT1udWxsIHx8IChyb3V0ZS5wYXJhbXMhPW51bGwgJiYgcm91dGUucGFyYW1zLmdycE1lbWJlcnNMaXN0IT1udWxsICYmIHJvdXRlLnBhcmFtcy5ncnBNZW1iZXJzTGlzdC5sZW5ndGg9PTApKSkge1xyXG5cdFx0XHRcdC8vIGFsZXJ0KCdQbGVhc2UgYWRkIGdyb3VwIG1lbWJlcnMgdG8gc3BsaXQgYW4gZXhwZW5zZS4nKVxyXG5cdFx0XHRcdC8vIEFkZCBhIFRvYXN0IG9uIHNjcmVlbi5cclxuXHRcdFx0XHRsZXQgdG9hc3QgPSBUb2FzdC5zaG93KFwiUGxlYXNlIGFkZCBncm91cCBtZW1iZXJzIHRvIHNwbGl0IGFuIGV4cGVuc2UuXCIsIHtcclxuXHRcdFx0XHRcdGR1cmF0aW9uOiBUb2FzdC5kdXJhdGlvbnMuTE9ORyxcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gWW91IGNhbiBtYW51YWxseSBoaWRlIHRoZSBUb2FzdCwgb3IgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGRpc2FwcGVhciBhZnRlciBhIGBkdXJhdGlvbmAgbXMgdGltZW91dC5cclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uIGhpZGVUb2FzdCgpIHtcclxuXHRcdFx0XHRcdFRvYXN0LmhpZGUodG9hc3QpO1xyXG5cdFx0XHRcdH0sIDgwMCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiA7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcblx0XHRcdGlmIChwaWNrZWRJbWFnZVBhdGggIT0gSW1hZ2UucmVzb2x2ZUFzc2V0U291cmNlKHVwbG9hZEltZykudXJpKSB7XHJcblx0XHRcdFx0cHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0XHRcdFx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgYmxvYkltYWdlID0geGhyLnJlc3BvbnNlO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBtZXRhZGF0YSA9IHtcclxuXHRcdFx0XHRcdFx0XHRjb250ZW50VHlwZTogXCJpbWFnZS9qcGVnXCIsXHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdGNvbnN0IHN0b3JhZ2VSZWYgPSByZWYoc3RvcmFnZSwgXCJFeHBJbWFnZXMvXCIgKyBEYXRlLm5vdygpKTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgdXBsb2FkVGFzayA9IHVwbG9hZEJ5dGVzUmVzdW1hYmxlKHN0b3JhZ2VSZWYsIGJsb2JJbWFnZSwgbWV0YWRhdGEpO1xyXG5cdFx0XHRcdFx0XHR1cGxvYWRUYXNrLm9uKFxyXG5cdFx0XHRcdFx0XHRcdFwic3RhdGVfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0XHRcdChzbmFwc2hvdCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgcHJvZ3Jlc3MgPSAoc25hcHNob3QuYnl0ZXNUcmFuc2ZlcnJlZCAvIHNuYXBzaG90LnRvdGFsQnl0ZXMpICogMTAwO1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJVcGxvYWQgaXMgXCIgKyBwcm9ncmVzcyArIFwiJSBkb25lXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChzbmFwc2hvdC5zdGF0ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwicGF1c2VkXCI6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJVcGxvYWQgaXMgcGF1c2VkXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwicnVubmluZ1wiOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiVXBsb2FkIGlzIHJ1bm5pbmdcIik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHQoZXJyb3IpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoZXJyb3IuY29kZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwic3RvcmFnZS91bmF1dGhvcml6ZWRcIjpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiVXNlciBkb2Vzbid0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlIG9iamVjdFwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJzdG9yYWdlL2NhbmNlbGVkXCI6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgY2FuY2VsZWQgdGhlIHVwbG9hZFwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJzdG9yYWdlL3Vua25vd25cIjpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiVW5rbm93biBlcnJvciBvY2N1cnJlZCwgaW5zcGVjdCBlcnJvci5zZXJ2ZXJSZXNwb25zZVwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGRvd25sb2FkVVJMID0gYXdhaXQgZ2V0RG93bmxvYWRVUkwodXBsb2FkVGFzay5zbmFwc2hvdC5yZWYpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJGaWxlIGF2YWlsYWJsZSBhdFwiLCBkb3dubG9hZFVSTCk7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRQaWNrZWRJbWFnZVBhdGgoZG93bmxvYWRVUkwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWRcIikpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImJsb2JcIjtcclxuXHRcdFx0XHRcdHhoci5vcGVuKFwiR0VUXCIsIHBpY2tlZEltYWdlUGF0aCwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR4aHIuc2VuZChudWxsKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0YXdhaXQgcHJvbWlzZTtcclxuXHRcdFx0XHRzZXRQaWNrZWRJbWFnZVBhdGgoZG93bmxvYWRVUkwpO1xyXG5cdFx0XHRcdGxldCBkYXRhXzEgPSB7XHJcblx0XHRcdFx0XHRleHBBbW91bnQ6IGFtb3VudCxcclxuXHRcdFx0XHRcdGV4cERhdGU6IGRhdGUsXHJcblx0XHRcdFx0XHRleHBDYXRlZ29yeTogc2VsZWN0ZWRDYXRlZ29yeSxcclxuXHRcdFx0XHRcdGV4cERlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcclxuXHRcdFx0XHRcdGdyb3VwRXhwOiBpc0VuYWJsZWQsXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAocGlja2VkSW1hZ2VQYXRoICE9IEltYWdlLnJlc29sdmVBc3NldFNvdXJjZSh1cGxvYWRJbWcpLnVyaSAmJiBkb3dubG9hZFVSTCAhPSBcIlwiKSB7XHJcblx0XHRcdFx0XHRkYXRhXzEuZXhwSW1hZ2UgPSBkb3dubG9hZFVSTDtcclxuXHRcdFx0XHR9XHJcblx0XHJcblx0XHRcdFx0aWYgKGlzRW5hYmxlZCkge1xyXG5cdFx0XHRcdFx0ZGF0YV8xLmdycE1lbWJlcnNMaXN0ID0gcm91dGUucGFyYW1zLmdycE1lbWJlcnNMaXN0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHJcblx0XHRcdFx0Ly8gY29uc3QgZG9jUmVmID0gYXdhaXQgYWRkRG9jKFxyXG5cdFx0XHRcdC8vIFx0Y29sbGVjdGlvbihkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCksIFwiRXhwZW5zZVwiKSwgZGF0YV8xKTtcclxuXHRcclxuXHRcdFx0XHRjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoXHJcblx0XHRcdFx0XHRjb2xsZWN0aW9uKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSwgXCJFeHBlbnNlXCIpLCBkYXRhXzEpO1xyXG5cdFxyXG5cdFx0XHRcdGNvbnN0IHF1ZXJ5U25hcHNob3RFeHAgPSBhd2FpdCBnZXREb2NzKGNvbGxlY3Rpb24oZGIsIFwiRXhwZW5zZVwiKSk7XHJcblx0XHRcdFx0cXVlcnlTbmFwc2hvdEV4cC5mb3JFYWNoKChkb2MpID0+IHtcclxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGRvYy5pZCwgSlNPTi5zdHJpbmdpZnkoZG9jLmRhdGEoKSkpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFxyXG5cdFx0XHRcdC8vVXBkYXRlIGJ1ZGdldFxyXG5cdFx0XHRcdGNvbnN0IHJlY29yZElkID0gbW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gKyBcIlwiICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlY29yZElkKTtcclxuXHRcdFx0XHRjb25zdCBkb2N1bWVudCA9IGF3YWl0IGdldERvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCwgXCJCdWRnZXRcIiwgcmVjb3JkSWQpKTtcclxuXHRcclxuXHRcdFx0XHRpZihkb2N1bWVudC5kYXRhKCkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y29uc3QgY2F0ZWdvcnlXaXNlQnVkZ2V0ID0gZG9jdW1lbnQuZGF0YSgpXHJcblx0XHRcdFx0XHR2YXIgaXNDYXRlZ29yeUJ1ZGdldFNldCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dmFyIG90aGVyRXhwSWR4ID0gLTE7XHJcblx0XHRcdFx0XHR2YXIgc2F2aW5nc0lkeCA9IC0xO1xyXG5cdFx0XHRcdFx0dmFyIGRvbmUgPSBmYWxzZTtcclxuXHRcdFxyXG5cdFx0XHRcdFx0aWYgKGNhdGVnb3J5V2lzZUJ1ZGdldC5tZXRob2QgPT09ICdFbnZlbG9wIE1ldGhvZCcpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0luc2lkZSA6ICcsIGNhdGVnb3J5V2lzZUJ1ZGdldC5tZXRob2QpXHJcblx0XHJcblx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXQuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0uY2F0ZWdvcnkgPT0gc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5idWRnZXRTcGVudCA9IGl0ZW0uYnVkZ2V0U3BlbnQgKyBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpc0NhdGVnb3J5QnVkZ2V0U2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBcIkFkZGl0aW9uYWwgRXhwZW5zZXNcIikge1xyXG5cdFx0XHRcdFx0XHRcdFx0b3RoZXJFeHBJZHggPSBpZHg7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoIWlzQ2F0ZWdvcnlCdWRnZXRTZXQgJiYgb3RoZXJFeHBJZHggPiAtMSkge1xyXG5cdFx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXRbb3RoZXJFeHBJZHhdLmJ1ZGdldFNwZW50ID0gY2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldFtvdGhlckV4cElkeF0uYnVkZ2V0U3BlbnQgKyBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKGNhdGVnb3J5V2lzZUJ1ZGdldC5tZXRob2QgPT09ICdaZXJvIEJhc2VkIEJ1ZGdldGluZycpIHtcclxuXHRcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0luc2lkZSA6ICcsIGNhdGVnb3J5V2lzZUJ1ZGdldC5tZXRob2QpXHJcblx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXQuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0uY2F0ZWdvcnkgPT0gc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5idWRnZXRTcGVudCA9IGl0ZW0uYnVkZ2V0U3BlbnQgKyBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpc0NhdGVnb3J5QnVkZ2V0U2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBcIlNhdmluZ3NcIikge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2F2aW5nc0lkeCA9IGlkeDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHJcblx0XHRcdFx0XHRcdGlmICghaXNDYXRlZ29yeUJ1ZGdldFNldCAmJiBzYXZpbmdzSWR4ID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHRjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0W3NhdmluZ3NJZHhdLmJ1ZGdldFNwZW50ID0gY2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldFtzYXZpbmdzSWR4XS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0W3NhdmluZ3NJZHhdLmJ1ZGdldFNwZW50ID0gY2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldFtzYXZpbmdzSWR4XS5idWRnZXRQbGFubmVkIC0gcGFyc2VGbG9hdChhbW91bnQpO1xyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdkZWR1Y3RlZCBmcm9tIG90aGVyIGV4cCcsIGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXRbc2F2aW5nc0lkeF0uYnVkZ2V0U3BlbnQpXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdJbnNpZGUgOiAnLCBjYXRlZ29yeVdpc2VCdWRnZXQpXHJcblx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXQubmVlZHMuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0uY2F0ZWdvcnkgPT0gc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5idWRnZXRTcGVudCA9IGl0ZW0uYnVkZ2V0U3BlbnQgKyBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpc0NhdGVnb3J5QnVkZ2V0U2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdGRvbmUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKCFkb25lKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC53YW50cy5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChpdGVtLmNhdGVnb3J5ID09IHNlbGVjdGVkQ2F0ZWdvcnkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXRlbS5idWRnZXRTcGVudCA9IGl0ZW0uYnVkZ2V0U3BlbnQgKyBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlzQ2F0ZWdvcnlCdWRnZXRTZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkb25lID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKCFkb25lKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC5zYXZpbmdzLmZvckVhY2goKGl0ZW0sIGlkeCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0uY2F0ZWdvcnkgPT0gc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtLmJ1ZGdldFNwZW50ID0gaXRlbS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXNDYXRlZ29yeUJ1ZGdldFNldCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRvbmUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBcIk90aGVyIFNhdmluZ3NcIikge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvdGhlckV4cElkeCA9IGlkeDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRcdGlmICghaXNDYXRlZ29yeUJ1ZGdldFNldCAmJiBvdGhlckV4cElkeCA+IC0xKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0LnNhdmluZ3Nbb3RoZXJFeHBJZHhdLmJ1ZGdldFNwZW50ID0gY2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC5zYXZpbmdzW290aGVyRXhwSWR4XS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdGRvbmUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHJcblx0XHRcdFx0XHRhd2FpdCBzZXREb2MoZG9jKGRiLCBcIlVzZXJcIiwgYXV0aC5jdXJyZW50VXNlci51aWQsIFwiQnVkZ2V0XCIsIHJlY29yZElkKSwgY2F0ZWdvcnlXaXNlQnVkZ2V0KTtcclxuXHRcdFxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly9hZGQgY2F0ZWdvcnkgdG8gdXNlciBleHBlbnNlIGNhdGVnb3JpZXMgaWYgbm90IHByZXNlbnRcclxuXHRcdFx0XHRpZighdXNlckV4cENhdGVnb3JpZXMuaW5jbHVkZXMoc2VsZWN0ZWRDYXRlZ29yeSkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dXNlckV4cENhdGVnb3JpZXMucHVzaChzZWxlY3RlZENhdGVnb3J5KTtcclxuXHRcdFx0XHRcdGF3YWl0IHVwZGF0ZURvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCksIHtcclxuXHRcdFx0XHRcdFx0ZXhwQ2F0ZWdvcmllcyA6IHVzZXJFeHBDYXRlZ29yaWVzLFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHJcblxyXG5cdFx0XHRcdGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKGNvbGxlY3Rpb24oZGIsIFwiZXhwZW5zZVwiKSk7XHJcblx0XHRcdFx0cXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGRvYy5pZCwgSlNPTi5zdHJpbmdpZnkoZG9jLmRhdGEoKSkpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFxyXG5cdFx0XHRcdC8vdXBkYXRlIGFjY291bnQgYmFsYW5jZVxyXG5cdFx0XHRcdGF3YWl0IHVwZGF0ZURvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCksIHtcclxuXHRcdFx0XHRcdGFjY0JhbGFuY2U6IHBhcnNlRmxvYXQoYWNjQmFsYW5jZSkgLSBwYXJzZUZsb2F0KGFtb3VudCkgKyBcIlwiXHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0aWYgKGlzRW5hYmxlZCkge1xyXG5cdFx0XHRcdFx0Y29uc3QgZG9jdW1lbnQgPSBhd2FpdCBnZXREb2MoZG9jKGRiLCBcIlVzZXJcIiwgYXV0aC5jdXJyZW50VXNlci51aWQpKTtcclxuXHRcdFx0XHRcdGNvbnN0IHVzZXJOYW1lID0gZG9jdW1lbnQuZGF0YSgpLm5hbWU7XHJcblx0XHRcdFx0XHRyb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYodXNlck5hbWUgIT0gaXRlbS5uYW1lKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgbWVzc2FnZSA9IGAke3VzZXJOYW1lfSBoYXMgc3BsaXQgYSBiaWxsIHdpdGggeW91LiBLaW5kbHkgcGF5IGFtb3VudCBvZiBScy4ke2l0ZW0uYW1vdW50fS5gXHJcblx0XHRcdFx0XHRcdFx0U21zQW5kcm9pZC5hdXRvU2VuZChcclxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uY29udGFjdE5vLFxyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZSxcclxuXHRcdFx0XHRcdFx0XHRcdChmYWlsKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdGYWlsZWQgd2l0aCB0aGlzIGVycm9yOiAnICsgZmFpbCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdFx0KHN1Y2Nlc3MpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ1NNUyBzZW50IHN1Y2Nlc3NmdWxseScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRhbGVydChcIlJlY29yZCBBZGRlZCBTdWNjZXNzZnVsbHlcIik7XHJcblx0XHRcdFx0bmF2aWdhdGlvbi5uYXZpZ2F0ZShcIlJvb3RcIik7XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yXzEpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIGRvY3VtZW50OiBcIiwgZXJyb3JfMSk7XHJcblx0XHRcdFx0dGhyb3cgZXJyb3JfMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0XHJcblxyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIGRvY3VtZW50OiBcIiwgZSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Y29uc3QgZW50ZXJVUElNYW51YWxseSA9IGFzeW5jICgpID0+IHtcclxuXHRcdGlmKGFtb3VudD4wKVxyXG5cdFx0e1xyXG5cdFx0XHRzZXRtb2RhbEZvck1hbnVhbElucHV0VmlzaWJpbGl0eSh0cnVlKTtcclxuXHRcdH1cclxuXHRcdGVsc2V7XHJcblx0XHRcdGFsZXJ0KFwiUGxlYXNlIEVudGVyIGFtb3VudCAhIVwiKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRjb25zdCBtYWtlaWQ9ICgpID0+IHtcclxuXHRcdGxldCByZXN1bHQgPSAnJztcclxuXHRcdGNvbnN0IGNoYXJhY3RlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG5cdFx0Y29uc3QgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoO1xyXG5cdFx0bGV0IGNvdW50ZXIgPSAwO1xyXG5cdFx0d2hpbGUgKGNvdW50ZXIgPCAzNSkge1xyXG5cdFx0ICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xyXG5cdFx0ICBjb3VudGVyICs9IDE7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0Y29uc3QgcmVkaXJlY3RUb1VQSUFwcE1hbnVhbEluID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0Y29uc29sZS5sb2cocGF5ZXJOYW1lLCBwYXllclVQSSwgXCJJbnB1dFwiKTtcclxuXHJcblx0XHRpZiAocGF5ZXJOYW1lICE9ICcnICYmIHBheWVyVVBJIT1cIlwiICYmIGFtb3VudD4wKSB7XHJcblxyXG5cdFx0XHRpZih2YWxpZGF0ZVVQSSgpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2V0bW9kYWxGb3JNYW51YWxJbnB1dFZpc2liaWxpdHkoZmFsc2UpO1xyXG5cdFx0XHRcdGNvbnN0IHRyYW5zYWN0aW9uSWQgPSBtYWtlaWQoKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyh0cmFuc2FjdGlvbklkLCBcInRyYW5zYWN0aW9uSWRcIik7XHJcblx0XHRcdFx0bGV0IFVwaVVybCA9IGB1cGk6Ly9wYXk/cGE9JHtwYXllclVQSX0mcG49JHtwYXllck5hbWV9JnRyPSR7dHJhbnNhY3Rpb25JZH0mYW09JHthbW91bnR9Jm1hbT1udWxsJmN1PUlOUmA7XHJcblx0XHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBVUEkub3BlbkxpbmsoVXBpVXJsKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnUHJpbnQnKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygncmVzcG9uc2UgOiAnLCByZXNwb25zZSk7XHJcblx0XHRcdFx0aWYgKHJlc3BvbnNlLmluY2x1ZGVzKCdTVUNDRVNTJykpIHtcclxuXHRcdFx0XHRcdHNldFRyYW5zYWN0aW9uU3VjY2Vzcyh0cnVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRhbGVydChcIlBsZWFzZSBFbnRlciB2YWxpZCBVUEkgSUQhIVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2V0bW9kYWxGb3JNYW51YWxJbnB1dFZpc2liaWxpdHkoZmFsc2UpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGFsZXJ0KFwiUGxlYXNlIEVudGVyIEFsbCByZXF1aXJlZCBmaWVsZHMhIVwiKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdGNvbnN0IHNjYW5RUiA9ICgpID0+IHtcclxuXHRcdGlmKGFtb3VudD4wKVxyXG5cdFx0e1xyXG5cdFx0XHRzZXRGaXJzdEVkaXQodHJ1ZSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdTY2FuIFFSJyk7XHJcblx0XHRcdHNldFFSU2Nhbm5lclZpc2liaWxpdHkodHJ1ZSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKFFSU2Nhbm5lclZpc2liaWxpdHkpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0YWxlcnQoXCJQbGVhc2UgRW50ZXIgYW1vdW50ICEhXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y29uc3QgdmFsaWRhdGVVUEkgPSAodXBpKSA9PiB7XHJcblx0XHRjb25zdCByZWdVUGkgPSAvW2EtekEtWjAtOVxcXFwuXFxcXC1dezIsMjU2fVxcXFxAW2EtekEtWl1bYS16QS1aXXsyLDY0fS9cclxuXHRcdGNvbnNvbGUubG9nKHJlZ1VQaS50ZXN0KHVwaSkpXHJcblx0XHRyZXR1cm4gcmVnVVBpLnRlc3QodXBpKTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IHJlZGlyZWN0VG9VUElBcHBVc2luZ1FSID0gYXN5bmMgbGluayA9PiB7XHJcblxyXG5cdFx0Y29uc3QgdXBpTGluayA9IGxpbmsuZGF0YTtcclxuXHRcdGNvbnNvbGUubG9nKCdVUEkgOiAnLCB1cGlMaW5rKTtcclxuXHRcdHNldFFSU2Nhbm5lclZpc2liaWxpdHkoZmFsc2UpO1xyXG5cdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgVVBJLm9wZW5MaW5rKFN0cmluZyh1cGlMaW5rKSk7XHJcblx0XHRjb25zb2xlLmxvZygncmVzcG9uc2UgOiAnLCByZXNwb25zZSk7XHJcblx0XHRpZiAocmVzcG9uc2UuaW5jbHVkZXMoJ1NVQ0NFU1MnKSkge1xyXG5cdFx0XHRzZXRUcmFuc2FjdGlvblN1Y2Nlc3ModHJ1ZSk7XHJcblx0XHRcdGFsZXJ0KFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bCFcIilcclxuXHRcdH1cclxuXHRcdGVsc2V7XHJcblx0XHRcdGFsZXJ0KFwiVHJhbnNhY3Rpb24gVW5zdWNjZXNzZnVsIVwiKVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8SW1hZ2VCYWNrZ3JvdW5kXHJcblx0XHRcdHNvdXJjZT17cmVxdWlyZSgnLi4vLi4vQXNzZXRzL0JhY2tncm91bmQuanBlZycpfVxyXG5cdFx0XHRzdHlsZT17eyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBtYXJnaW5Ub3A6IGluc2V0cy50b3AgfX1cclxuXHRcdD5cclxuXHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5UaXRsZX0+QWRkIEV4cGVuc2U8L1RleHQ+XHJcblx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuXHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLm1haW5Db250YWluZXJ9PlxyXG5cdFx0XHRcdFx0PFNjcm9sbFZpZXcgc3R5bGU9e3toZWlnaHQ6aGVpZ2h0ICogMC44fX0+XHJcblx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyMX0+XHJcblx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dFBhaXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5oZWFkfT5BbW91bnQ6PC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdFx0PFRleHRJbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRrZXlib2FyZFR5cGU9XCJudW1lcmljXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy5pbnB1dFRleHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlVGV4dD17c2V0QW1vdW50fVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblxyXG5cdFx0XHRcdFx0XHRcdHtkYXRlUGlja2VyICYmIChcclxuXHRcdFx0XHRcdFx0XHRcdDxEYXRlVGltZVBpY2tlclxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17ZGF0ZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kZT17XCJkYXRlXCJ9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BsYXk9e1BsYXRmb3JtLk9TID09PSBcImlvc1wiID8gXCJzcGlubmVyXCIgOiBcImRlZmF1bHRcIn1cclxuXHRcdFx0XHRcdFx0XHRcdFx0aXMyNEhvdXI9e3RydWV9XHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXtvbkRhdGVTZWxlY3RlZH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy5kYXRlUGlja2VyfVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHQpfVxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0UGFpcn0+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmhlYWR9PkRhdGU6IDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHRcdHshZGF0ZVBpY2tlciAmJiAoXHJcblx0XHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuaW5wdXRUZXh0fT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8UHJlc3NhYmxlIHN0eWxlPXtzdHlsZXMuZGF0ZUJ1dHRvbn0gb25QcmVzcz17c2hvd0RhdGVQaWNrZXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQ+e2RhdGUuZ2V0RGF0ZSgpICsgJyAvICcgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkgKyAnIC8gJyArIGRhdGUuZ2V0RnVsbFllYXIoKX08L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9QcmVzc2FibGU+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdFx0XHRcdCl9XHJcblx0XHRcdFx0XHRcdFx0PC9WaWV3PlxyXG5cdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblxyXG5cdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcjF9PlxyXG5cdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuaGVhZENlbnRlcn0+U2VsZWN0IENhdGVnb3J5PC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdDxEcm9wZG93blxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMuZHJvcGRvd259XHJcblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlclN0eWxlPXtzdHlsZXMucGxhY2Vob2xkZXJTdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdHNlbGVjdGVkVGV4dFN0eWxlPXtzdHlsZXMuc2VsZWN0ZWRUZXh0U3R5bGV9XHJcblx0XHRcdFx0XHRcdFx0XHRpbnB1dFNlYXJjaFN0eWxlPXtzdHlsZXMuaW5wdXRTZWFyY2hTdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdGljb25TdHlsZT17c3R5bGVzLmljb25TdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdGRhdGE9e2NhdGVnb3J5fVxyXG5cdFx0XHRcdFx0XHRcdFx0c2VhcmNoXHJcblx0XHRcdFx0XHRcdFx0XHRtYXhIZWlnaHQ9ezMwMH1cclxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsRmllbGQ9XCJsYWJlbFwiXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZUZpZWxkPVwidmFsdWVcIlxyXG5cdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJDYXRlZ29yeVwiXHJcblx0XHRcdFx0XHRcdFx0XHRzZWFyY2hQbGFjZWhvbGRlcj1cIlNlYXJjaC4uLlwiXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17c2VsZWN0ZWRDYXRlZ29yeX1cclxuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXsoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbS52YWx1ZSAhPSBcIm90aGVyXCIpIHNldFNlbGVjdGVkQ2F0ZWdvcnkoaXRlbS52YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNldFZpc2liaWxpdHlPZkNhdE1vZGFsKHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdDxNb2RhbFxyXG5cdFx0XHRcdFx0XHRcdGFuaW1hdGlvblR5cGU9XCJzbGlkZVwiXHJcblx0XHRcdFx0XHRcdFx0dHJhbnNwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHR2aXNpYmxlPXtpc0NhdE1vZGFsVmlzaWJsZX1cclxuXHRcdFx0XHRcdFx0XHRwcmVzZW50YXRpb25TdHlsZT1cIm92ZXJGdWxsU2NyZWVuXCJcclxuXHRcdFx0XHRcdFx0XHRvbkRpc21pc3M9eygpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHNldFZpc2liaWxpdHlPZkNhdE1vZGFsKCFpc0NhdE1vZGFsVmlzaWJsZSk7XHJcblx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMudmlld1dyYXBwZXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5tb2RhbFZpZXd9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dElucHV0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJFbnRlciBDYXRlZ29yeVwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy50ZXh0SW5wdXR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2VUZXh0PXsodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldFNlbGVjdGVkQ2F0ZWdvcnkodmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8+XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHR7LyoqIFRoaXMgYnV0dG9uIGlzIHJlc3BvbnNpYmxlIHRvIGNsb3NlIHRoZSBtb2RhbCAqL31cclxuXHRcdFx0XHRcdFx0XHRcdFx0PEJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRpdGxlPVwiQWRkIENhdGVnb3J5XCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZDYXRNb2RhbCghaXNDYXRNb2RhbFZpc2libGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0Q2F0ZWdvcnkoW1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuLi5jYXRlZ29yeSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0eyBsYWJlbDogc2VsZWN0ZWRDYXRlZ29yeSwgdmFsdWU6IHNlbGVjdGVkQ2F0ZWdvcnkgfSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdF0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9WaWV3PlxyXG5cdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdFx0PC9Nb2RhbD5cclxuXHJcblx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtbc3R5bGVzLmdycEV4cGNvbnRhaW5lciwgc3R5bGVzLmNvbnRhaW5lcjFdfT5cclxuXHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmdycEV4cFRleHR9Pkdyb3VwIEV4cGVuc2UgOiA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0PFN3aXRjaFxyXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2tDb2xvcj17eyBmYWxzZTogJyM3Njc1NzcnLCB0cnVlOiAnbGlnaHRncmVlbicgfX1cclxuXHRcdFx0XHRcdFx0XHRcdHRodW1iQ29sb3I9e2lzRW5hYmxlZCA/ICdncmVlbicgOiAnd2hpdGUnfVxyXG5cdFx0XHRcdFx0XHRcdFx0b25WYWx1ZUNoYW5nZT17KHZhbCkgPT4gdG9nZ2xlU3dpdGNoKHZhbCl9XHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17aXNFbmFibGVkfVxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHJcblxyXG5cdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcjJ9PlxyXG5cdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuaGVhZH0+RW50ZXIgVVBJIG9mIFBheWVlPC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyX2J0bl9ibG9ja30+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eSBcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e3RyYW5zYWN0aW9uU3VjY2VzcyA/IHRydWUgOiBmYWxzZX0gXHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJlc3M9e2VudGVyVVBJTWFudWFsbHl9XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMuY29udGFpbmVyMl9idG59XHJcblx0XHRcdFx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxJbWFnZSBzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9pbnB1dC5wbmcnKX0gc3R5bGU9e3sgd2lkdGg6IDI1LCBoZWlnaHQ6IDI1LCBhbGlnblNlbGY6ICdjZW50ZXInIH19IC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiwgY29sb3I6IFwid2hpdGVcIiB9fT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7JyAnfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdE1hbnVhbCBJbnB1dHsnICd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHRcdDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuXHRcdFx0XHRcdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpc2FibGVkPXt0cmFuc2FjdGlvblN1Y2Nlc3MgPyB0cnVlIDogZmFsc2V9XHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJlc3M9e3NjYW5RUn1cclxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy5jb250YWluZXIyX2J0bn1cclxuXHRcdFx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PEltYWdlIHNvdXJjZT17cmVxdWlyZSgnLi4vLi4vQXNzZXRzL3NjYW4ucG5nJyl9IHN0eWxlPXt7IHdpZHRoOiAyNywgaGVpZ2h0OiAyNywgYWxpZ25TZWxmOiAnY2VudGVyJyB9fSAvPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17eyB0ZXh0QWxpZ246IFwiY2VudGVyXCIsIGNvbG9yOiBcIndoaXRlXCIgfX0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRTY2FuIFFSeycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHJcblx0XHRcdFx0XHRcdFx0PE1vZGFsXHJcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRpb25UeXBlPVwic2xpZGVcIlxyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHRcdHZpc2libGU9e21vZGFsRm9yTWFudWFsSW5wdXRWaXNpYmlsaXR5fVxyXG5cdFx0XHRcdFx0XHRcdFx0cHJlc2VudGF0aW9uU3R5bGU9XCJvdmVyRnVsbFNjcmVlblwiXHJcblx0XHRcdFx0XHRcdFx0XHRvbkRpc21pc3M9eygpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0bW9kYWxGb3JNYW51YWxJbnB1dFZpc2liaWxpdHkoZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHRcdHN0eWxlPXt7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6IDIwMCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiAnYmx1ZScsXHJcblx0XHRcdFx0XHRcdFx0XHR9fT5cclxuXHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMudmlld1dyYXBwZXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLm1vZGFsVmlld30+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHRJbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJFbnRlciBOYW1lIG9mIFBheWVyLi4uXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMudGV4dElucHV0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2VUZXh0PXt2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldFBheWVyTmFtZSh2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHRJbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJFbnRlciBWaXJ0dWFsIFBheW1lbnQgQWRkcmVzcyBvZiBQYXllci4uLlwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZT17c3R5bGVzLnRleHRJbnB1dH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlVGV4dD17dmFsdWUgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRQYXllclVQSSh2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3sgZmxleERpcmVjdGlvbjogJ3JvdycgfX0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ3N1Ym1pdCcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlZGlyZWN0VG9VUElBcHBNYW51YWxJbigpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZT17e1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogZGFya0dyZWVuLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1hcmdpbiA6IDEwLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBhZGRpbmcgOiAxMCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRib3JkZXJSYWRpdXMgOiAxMCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlPXt7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb2xvcjogJ3doaXRlJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvbnRTaXplOiAxNSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsnICd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0U3VibWl0eycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRvdWNoYWJsZU9wYWNpdHlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdjbG9zZScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldG1vZGFsRm9yTWFudWFsSW5wdXRWaXNpYmlsaXR5KGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRhcmtHcmVlbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXJnaW4gOiAxMCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwYWRkaW5nIDogMTAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ym9yZGVyUmFkaXVzIDogMTAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZT17e1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29sb3I6ICd3aGl0ZScsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb250U2l6ZTogMTUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb250V2VpZ2h0OiAnYm9sZCcsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fX0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0eycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRDbG9zZXsnICd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdFx0XHQ8L01vZGFsPlxyXG5cclxuXHJcblx0XHRcdFx0XHRcdFx0PE1vZGFsXHJcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRpb25UeXBlPVwic2xpZGVcIlxyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNwYXJlbnQ9e3RydWV9XHJcblx0XHRcdFx0XHRcdFx0XHR2aXNpYmxlPXtRUlNjYW5uZXJWaXNpYmlsaXR5fVxyXG5cdFx0XHRcdFx0XHRcdFx0cHJlc2VudGF0aW9uU3R5bGU9XCJvdmVyRnVsbFNjcmVlblwiXHJcblx0XHRcdFx0XHRcdFx0XHRvbkRpc21pc3M9eygpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0UVJTY2FubmVyVmlzaWJpbGl0eShmYWxzZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tcclxuXHRcdFx0XHRcdFx0XHRcdFx0cGFkZGluZzogNSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiAnYmx1ZScsXHJcblx0XHRcdFx0XHRcdFx0XHR9fT5cclxuXHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMudmlld1dyYXBwZXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxRUkNvZGVTY2FubmVyXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvblJlYWQ9e3JlZGlyZWN0VG9VUElBcHBVc2luZ1FSfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmxhc2hNb2RlPXtSTkNhbWVyYS5Db25zdGFudHMuRmxhc2hNb2RlLnRvcmNofVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dG9wQ29udGVudD17XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuY2VudGVyVGV4dH0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBNb3ZlIFlvdXIgQ2FtZXJhIG92ZXIgdGhlIFFSIENvZGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9UZXh0PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICB9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRib3R0b21Db250ZW50PXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRvdWNoYWJsZU9wYWNpdHlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnY2xvc2UnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldFFSU2Nhbm5lclZpc2liaWxpdHkoZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogJ2dyZWVuJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoIDogJzEwMCUnLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dEFsaWduIDogJ2NlbnRlcidcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29sb3I6ICd3aGl0ZScsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvbnRTaXplOiAxNSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGFkZGluZzogMTAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dEFsaWduIDogJ2NlbnRlcidcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0eycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdENsb3NleycgJ31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR7LyogPC9WaWV3PiAqL31cclxuXHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdFx0XHQ8L01vZGFsPlxyXG5cdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyMn0+XHJcblx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5oZWFkfT5BZGQgbm90ZTwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHQ8VGV4dElucHV0XHJcblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkRlc2NyaXB0aW9uXCJcclxuXHRcdFx0XHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMuaW5wdXQxfVxyXG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2VUZXh0PXsodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0RGVzY3JpcHRpb24odmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuaGVhZENlbnRlcn0+QWRkIEltYWdlPC9UZXh0PlxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8TW9kYWxcclxuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGlvblR5cGU9XCJzbGlkZVwiXHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc3BhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0dmlzaWJsZT17aXNJbWdNb2RhbFZpc2libGV9XHJcblx0XHRcdFx0XHRcdFx0XHRwcmVzZW50YXRpb25TdHlsZT1cIm92ZXJGdWxsU2NyZWVuXCJcclxuXHRcdFx0XHRcdFx0XHRcdG9uRGlzbWlzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZDYXRNb2RhbCghaXNJbWdNb2RhbFZpc2libGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLnZpZXdXcmFwcGVyfT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5tb2RhbFZpZXd9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9e3Nob3dJbWFnZVBpY2tlcn0gc3R5bGU9e3N0eWxlcy5zZWxJbWd9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3sgY29sb3I6IFwid2hpdGVcIiwgZm9udFNpemU6IDE1LCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+IFVwbG9hZCBpbWFnZSA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXtvcGVuQ2FtZXJhfSBzdHlsZT17c3R5bGVzLnNlbEltZ30+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17eyBjb2xvcjogXCJ3aGl0ZVwiLCBmb250U2l6ZTogMTUsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT4gVGFrZSBQaG90byA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZJbWdNb2RhbCghaXNJbWdNb2RhbFZpc2libGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3sgY29sb3I6IGRhcmtHcmVlbiwgZm9udFNpemU6IDE1LCBtYXJnaW5Ub3A6IDMwIH19PiBDbG9zZSA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0PC9Nb2RhbD5cclxuXHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eVxyXG5cdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImltYWdlIGNsaWNrZWRcIik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNldFZpc2liaWxpdHlPZkltZ01vZGFsKHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdFx0XHR7cGlja2VkSW1hZ2VQYXRoICE9PSBcIlwiICYmIChcclxuXHRcdFx0XHRcdFx0XHRcdFx0PEltYWdlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c291cmNlPXt7IHVyaTogcGlja2VkSW1hZ2VQYXRoIH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3sgd2lkdGg6IDUwLCBoZWlnaHQ6IDUwLCBtYXJnaW46IDE1LCBhbGlnblNlbGY6ICdjZW50ZXInIH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJpbWFnZSBjbGlja2VkXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0VmlzaWJpbGl0eU9mSW1nTW9kYWwodHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdCl9XHJcblx0XHRcdFx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0PFRvdWNoYWJsZU9wYWNpdHlcclxuXHRcdFx0XHRcdFx0XHRvblByZXNzPXtzYXZlRXhwZW5zZX1cclxuXHRcdFx0XHRcdFx0XHRzdHlsZT17e1xyXG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRcdFx0XHRcdFx0XHRib3JkZXJSYWRpdXM6IDIwMCxcclxuXHRcdFx0XHRcdFx0XHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IDI1MCxcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmdWZXJ0aWNhbDogNSxcclxuXHRcdFx0XHRcdFx0XHRcdG1hcmdpblZlcnRpY2FsOiAxMCxcclxuXHRcdFx0XHRcdFx0XHRcdGFsaWduU2VsZjogJ2NlbnRlcicsXHJcblx0XHRcdFx0XHRcdFx0fX0+XHJcblx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3sgY29sb3I6IFwid2hpdGVcIiwgZm9udFNpemU6IDIwLCBmb250V2VpZ2h0OiAnYm9sZCcsIG1hcmdpbjogMCB9fT4gU2F2ZSA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuXHJcblx0XHRcdFx0XHQ8L1Njcm9sbFZpZXc+XHJcblx0XHRcdFx0PC9WaWV3PlxyXG5cdFx0XHQ8L1ZpZXc+XHJcblx0XHQ8L0ltYWdlQmFja2dyb3VuZD5cclxuXHQpO1xyXG59XHJcblxyXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRib3JkZXJUb3BMZWZ0UmFkaXVzOiA0MCxcclxuXHRcdGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA0MCxcclxuXHRcdGhlaWdodDogaGVpZ2h0ICogMC43LFxyXG5cdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcIiNmZmZcIixcclxuXHRcdG1hcmdpblRvcDogNSxcclxuXHR9LFxyXG5cclxuXHRtYWluQ29udGFpbmVyOiB7XHJcblx0XHRwYWRkaW5nOiAyNSxcclxuXHRcdGZsZXg6IDEsXHJcblx0XHRoZWlnaHQ6IFwiMTAwJVwiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiXHJcblx0fSxcclxuXHJcblx0Y29udGFpbmVyMToge1xyXG5cdFx0d2lkdGg6IFwiMTAwJVwiLFxyXG5cdFx0YWxpZ25TZWxmOiBcImNlbnRlclwiLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAxNSxcclxuXHRcdHNoYWRvd09wYWNpdHk6IDAuNSxcclxuXHRcdHNoYWRvd0NvbG9yOiBcImJsYWNrXCIsXHJcblx0XHRzaGFkb3dPZmZzZXQ6IHtcclxuXHRcdFx0aGVpZ2h0OiA1LFxyXG5cdFx0XHR3aWR0aDogNVxyXG5cdFx0fSxcclxuXHRcdGVsZXZhdGlvbjogNSxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxyXG5cdFx0bWFyZ2luVG9wOiAyMCxcclxuXHR9LFxyXG5cclxuXHRjb250YWluZXIyOiB7XHJcblx0XHR3aWR0aDogXCIxMDAlXCIsXHJcblx0XHRhbGlnblNlbGY6IFwiY2VudGVyXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDE1LFxyXG5cdFx0c2hhZG93T3BhY2l0eTogMC41LFxyXG5cdFx0c2hhZG93Q29sb3I6IFwiYmxhY2tcIixcclxuXHRcdHNoYWRvd09mZnNldDoge1xyXG5cdFx0XHQvLyBoZWlnaHQ6NSxcclxuXHRcdFx0Ly93aWR0aDo1XHJcblx0XHR9LFxyXG5cclxuXHRcdGVsZXZhdGlvbjogNSxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxyXG5cdFx0bWFyZ2luVG9wOiAzMCxcclxuXHRcdHBhZGRpbmdUb3A6IDUsXHJcblx0XHRwYWRkaW5nTGVmdDogMjAsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IDIwLFxyXG5cdH0sXHJcblx0Y29udGFpbmVyX2J0bl9ibG9jazoge1xyXG5cdFx0ZmxleERpcmVjdGlvbjogJ3JvdycsXHJcblx0XHRwYWRkaW5nQm90dG9tOiAxMCxcclxuXHRcdHBhZGRpbmdUb3A6IDEwLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYXJvdW5kXCIsXHJcblx0fSxcclxuXHRjb250YWluZXIyX2J0bjoge1xyXG5cdFx0cGFkZGluZzogMTUsXHJcblx0XHRmbGV4R3JvdzogMSxcclxuXHRcdGZsZXhTaHJpbms6IDAsXHJcblx0XHRmbGV4QmFzaXM6IDEwMCxcclxuXHRcdGJvcmRlclJhZGl1czogMTAsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwiIzg0MTU4NFwiLFxyXG5cdFx0Y29sb3I6IFwid2hpdGVcIixcclxuXHRcdHdpZHRoOiAxNTAsXHJcblx0XHRtYXJnaW46IDUsXHJcblx0fSxcclxuXHRUaXRsZToge1xyXG5cdFx0Y29sb3I6IFwid2hpdGVcIixcclxuXHRcdGZvbnRTaXplOiA1MCxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdFx0bWFyZ2luVmVydGljYWw6IDIwLFxyXG5cdFx0YWxpZ25TZWxmOiBcImNlbnRlclwiLFxyXG5cdH0sXHJcblxyXG5cclxuXHRpbnB1dFBhaXI6IHtcclxuXHRcdGZsZXhEaXJlY3Rpb246IFwicm93XCIsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXHJcblx0XHRwYWRkaW5nOiAxMFxyXG5cdH0sXHJcblxyXG5cdGhlYWQ6IHtcclxuXHRcdC8vIG1hcmdpblRvcDoxNSxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdFx0Zm9udFNpemU6IDE2LFxyXG5cdFx0Y29sb3I6IGRhcmtHcmVlbixcclxuXHR9LFxyXG5cclxuXHRpbnB1dFRleHQ6IHtcclxuXHRcdHBhZGRpbmcgOiAwLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiA1LFxyXG5cdFx0Y29sb3I6IGRhcmtHcmVlbixcclxuXHRcdHBhZGRpbmdIb3Jpem9udGFsOiA1LFxyXG5cdFx0d2lkdGg6ICc2MCUnLFxyXG5cdFx0aGVpZ2h0OiA0MCxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYigyMjAsMjIwLCAyMjApJyxcclxuXHR9LFxyXG5cclxuXHJcblx0aW5wdXQ6IHtcclxuXHRcdGJvcmRlclJhZGl1czogNSxcclxuXHRcdGNvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRwYWRkaW5nSG9yaXpvbnRhbDogNSxcclxuXHRcdHdpZHRoOiAnNjAlJyxcclxuXHRcdGhlaWdodDogMzAsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjIwLDIyMCwgMjIwKScsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCcsXHJcblx0fSxcclxuXHJcblx0aW5wdXQxOiB7XHJcblx0XHRib3JkZXJXaWR0aDogMSxcclxuXHRcdGJvcmRlckNvbG9yOiAnIzc3NycsXHJcblx0XHRib3JkZXJSYWRpdXM6IDEwLFxyXG5cdFx0cGFkZGluZzogMTAsXHJcblx0XHR3aWR0aDogXCIxMDAlXCIsXHJcblx0XHRoZWlnaHQ6IDgwLFxyXG5cdFx0bWFyZ2luVG9wOiAxMCxcclxuXHRcdG1hcmdpbkJvdHRvbTogMTUsXHJcblx0XHR0ZXh0QWxpZ25WZXJ0aWNhbDogXCJ0b3BcIixcclxuXHRcdHRleHRBbGlnbjogJ2xlZnQnXHJcblx0fSxcclxuXHJcblx0aGVhZENlbnRlcjoge1xyXG5cdFx0bWFyZ2luVG9wOiAxMCxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdFx0YWxpZ25TZWxmOiBcImNlbnRlclwiLFxyXG5cdFx0Y29sb3I6IGRhcmtHcmVlbixcclxuXHRcdGZvbnRTaXplOiAxNlxyXG5cdH0sXHJcblxyXG5cdGRhdGU6IHtcclxuXHRcdGZsZXhEaXJlY3Rpb246ICdyb3cnLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnLFxyXG5cdH0sXHJcblx0aGVhZDE6IHtcclxuXHRcdG1hcmdpblRvcDogMTIsXHJcblx0XHRmb250V2VpZ2h0OiAnYm9sZCcsXHJcblx0XHRhbGlnblNlbGY6ICdjZW50ZXInLFxyXG5cdFx0Y29sb3I6IGRhcmtHcmVlbixcclxuXHRcdGZvbnRTaXplOiAxNixcclxuXHR9LFxyXG5cclxuXHRkcm9wRG93blN0eWxlOiB7XHJcblx0XHR3aWR0aDogJzg1JScsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMiknLFxyXG5cdFx0cGFkZGluZzogNSxcclxuXHRcdGFsaWduU2VsZjogXCJjZW50ZXJcIixcclxuXHRcdGJvcmRlclJhZGl1czogNixcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJ1xyXG5cdH0sXHJcblxyXG5cdGRyb3BEb3duSWNvbjoge1xyXG5cdFx0cmVzaXplTW9kZTogJ2NvbnRhaW4nLFxyXG5cdH0sXHJcblxyXG5cdG1vZGFsOiB7XHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcclxuXHRcdGhlaWdodDogMzAwLFxyXG5cdFx0d2lkdGg6IFwiODAlXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDEwLFxyXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXHJcblx0XHRib3JkZXJDb2xvcjogXCIjZmZmXCIsXHJcblx0XHRtYXJnaW5Ub3A6IDgwLFxyXG5cdFx0bWFyZ2luTGVmdDogNDAsXHJcblx0fSxcclxuXHJcblxyXG5cdC8vY2F0IG1vZGFsIHN0eWxlc1xyXG5cdHZpZXdXcmFwcGVyOiB7XHJcblx0XHRmbGV4OiAxLFxyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNyknLCBcclxuXHR9LFxyXG5cclxuXHRtb2RhbFZpZXc6IHtcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXHJcblx0XHR0b3A6IFwiNTAlXCIsXHJcblx0XHRsZWZ0OiBcIjUwJVwiLFxyXG5cdFx0ZWxldmF0aW9uOiA1LFxyXG5cdFx0dHJhbnNmb3JtOiBbeyB0cmFuc2xhdGVYOiAtKHdpZHRoICogMC40KSB9LCB7IHRyYW5zbGF0ZVk6IC05MCB9XSxcclxuXHRcdGhlaWdodDogMTgwLFxyXG5cdFx0d2lkdGg6IHdpZHRoICogMC44LFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcIiNmZmZcIixcclxuXHRcdGJvcmRlclJhZGl1czogNyxcclxuXHR9LFxyXG5cclxuXHRjZW50ZXJUZXh0OiB7XHJcblx0XHRmb250U2l6ZTogMTYsXHJcblx0XHRwYWRkaW5nOiAxMCxcclxuXHRcdGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuXHRcdHdpZHRoOiBcIjEwMCVcIixcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCIsXHJcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInXHJcblx0fSxcclxuXHQgIFxyXG5cdHRleHRJbnB1dDoge1xyXG5cdFx0d2lkdGg6IFwiODAlXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDUsXHJcblx0XHRwYWRkaW5nVmVydGljYWw6IDgsXHJcblx0XHRwYWRkaW5nSG9yaXpvbnRhbDogMTYsXHJcblx0XHRib3JkZXJDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMilcIixcclxuXHRcdGJvcmRlcldpZHRoOiAxLFxyXG5cdFx0bWFyZ2luQm90dG9tOiA4LFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC4yKVwiLFxyXG5cclxuXHR9LFxyXG5cclxuXHRkYXRlTGFiZWw6IHtcclxuXHRcdG1hcmdpblRvcDogMTUsXHJcblx0fSxcclxuXHJcblx0ZGF0ZUJ1dHRvbjoge1xyXG5cdFx0cGFkZGluZzogNyxcclxuXHRcdGFsaWduU2VsZjogJ2NlbnRlcicsXHJcblx0XHRib3JkZXJSYWRpdXM6IDUsXHJcblx0XHRmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuXHRcdHdpZHRoOiAxODAsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYigyMjAsMjIwLCAyMjApJyxcclxuXHR9LFxyXG5cclxuXHRkYXRlVGV4dDoge1xyXG5cdFx0Zm9udFNpemU6IDE0LFxyXG5cdFx0bGluZUhlaWdodDogMjEsXHJcblx0XHRsZXR0ZXJTcGFjaW5nOiAwLjI1LFxyXG5cdFx0Y29sb3I6ICdibGFjaycsXHJcblx0fSxcclxuXHJcblx0Y2F0SXRlbToge1xyXG5cdFx0cGFkZGluZzogMTAsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdza3libHVlJyxcclxuXHRcdGZvbnRTaXplOiAxNCxcclxuXHRcdG1hcmdpbkhvcml6b250YWw6IDEwLFxyXG5cdFx0bWFyZ2luVG9wOiAyNCxcclxuXHR9LFxyXG5cclxuXHRkcm9wZG93bjoge1xyXG5cdFx0bWFyZ2luOiAxMCxcclxuXHRcdHdpZHRoOiAnODUlJyxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4yKScsXHJcblx0XHRwYWRkaW5nOiA1LFxyXG5cdFx0YWxpZ25TZWxmOiAnY2VudGVyJyxcclxuXHRcdGJvcmRlclJhZGl1czogNixcclxuXHRcdC8vIGZsZXhEaXJlY3Rpb246J3JvdycsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHR9LFxyXG5cclxuXHRpY29uOiB7XHJcblx0XHRtYXJnaW5SaWdodDogNSxcclxuXHR9LFxyXG5cdHBsYWNlaG9sZGVyU3R5bGU6IHtcclxuXHRcdGZvbnRTaXplOiAxNCxcclxuXHR9LFxyXG5cdHNlbGVjdGVkVGV4dFN0eWxlOiB7XHJcblx0XHRmb250U2l6ZTogMTQsXHJcblx0fSxcclxuXHRpY29uU3R5bGU6IHtcclxuXHRcdHdpZHRoOiAyMCxcclxuXHRcdGhlaWdodDogMjAsXHJcblx0fSxcclxuXHRpbnB1dFNlYXJjaFN0eWxlOiB7XHJcblx0XHRoZWlnaHQ6IDQwLFxyXG5cdFx0Zm9udFNpemU6IDE2LFxyXG5cdH0sXHJcblxyXG5cdHNjcmVlbjoge1xyXG5cdFx0ZmxleDogMSxcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdH0sXHJcblx0aW1nQnV0dG9uQ29udGFpbmVyOiB7XHJcblx0XHR3aWR0aDogNDAwLFxyXG5cdFx0ZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCcsXHJcblx0fSxcclxuXHRpbWFnZUNvbnRhaW5lcjoge1xyXG5cdFx0cGFkZGluZzogMzAsXHJcblx0fSxcclxuXHJcblx0aW1hZ2U6IHtcclxuXHRcdHdpZHRoOiAyMDAsXHJcblx0XHRoZWlnaHQ6IDEwLFxyXG5cdFx0cmVzaXplTW9kZTogJ2NvdmVyJyxcclxuXHR9LFxyXG5cclxuXHRidXR0b25Db250YWluZXI6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogJyMzM2FkZmYnLFxyXG5cdFx0cGFkZGluZzogNSxcclxuXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGJvcmRlclJhZGl1czogMTAsXHJcblx0XHR3aWR0aDogJzg1JScsXHJcblx0XHRhbGlnblNlbGY6ICdjZW50ZXInLFxyXG5cdFx0Zm9udFdlaWdodDogJ2JvbGQnLFxyXG5cdFx0Zm9udFNpemU6IDUwLFxyXG5cdFx0cGFkZGluZ0xlZnQ6IDMwLFxyXG5cdH0sXHJcblxyXG5cdGJhY2tJbWc6IHtcclxuXHRcdGhlaWdodDogJzEwMCUnLFxyXG5cdH0sXHJcblxyXG5cdHNlbEltZzoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRib3JkZXJSYWRpdXM6IDEwLFxyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHR3aWR0aDogMTUwLFxyXG5cdFx0cGFkZGluZ1ZlcnRpY2FsOiA1LFxyXG5cdFx0bWFyZ2luVmVydGljYWw6IDEwLFxyXG5cdFx0YWxpZ25TZWxmOiAnY2VudGVyJyxcclxuXHRcdG1hcmdpblRvcDogNSxcclxuXHR9LFxyXG5cdGdycEV4cGNvbnRhaW5lcjoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjIpJyxcclxuXHRcdGJvcmRlclJhZGl1czogMTAsXHJcblx0XHRmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0XHRtYXJnaW5WZXJ0aWNhbDogNSxcclxuXHRcdGhlaWdodDogNTAsXHJcblx0XHRwYWRkaW5nSG9yaXpvbnRhbDogMjAsXHJcblx0fSxcclxuXHRncnBFeHBUZXh0OiB7XHJcblx0XHRjb2xvcjogZGFya0dyZWVuLFxyXG5cdFx0Zm9udFdlaWdodDogJ2JvbGQnXHJcblx0fVxyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQWVBLElBQUFDLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLE9BQUEsR0FBQUwsT0FBQTtBQVlBLElBQUFNLFFBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLDJCQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxVQUFBLEdBQUFOLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBUyxrQkFBQSxHQUFBUCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQVUscUJBQUEsR0FBQVIsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFXLFVBQUEsR0FBQVgsT0FBQTtBQUNBLElBQUFZLFdBQUEsR0FBQVIsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFhLDJCQUFBLEdBQUFiLE9BQUE7QUFDQSxJQUFBYyx5QkFBQSxHQUFBWixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQWUsa0JBQUEsR0FBQWYsT0FBQTtBQUdBLElBQUFnQix5QkFBQSxHQUFBZCxzQkFBQSxDQUFBRixPQUFBO0FBQXNELElBQUFpQixXQUFBLEdBQUFqQixPQUFBO0FBQUEsU0FBQWtCLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBZix3QkFBQW1CLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFWLEdBQUEsSUFBQVUsSUFBQSxDQUFBQyxHQUFBLEtBQUFSLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSCxNQUFBLEVBQUFLLEdBQUEsRUFBQUksSUFBQSxZQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBLFNBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBLE1BQUFHLEtBQUEsSUFBQUEsS0FBQSxDQUFBYSxHQUFBLENBQUFoQixHQUFBLEVBQUFNLE1BQUEsWUFBQUEsTUFBQTtBQUV0RCxJQUFBVyxlQUFBLEdBQTBCQyx1QkFBVSxDQUFDYixHQUFHLENBQUMsUUFBUSxDQUFDO0VBQTFDYyxLQUFLLEdBQUFGLGVBQUEsQ0FBTEUsS0FBSztFQUFFQyxNQUFNLEdBQUFILGVBQUEsQ0FBTkcsTUFBTTtBQUVyQixJQUFNQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQztBQUd6SSxJQUFNQyxHQUFHLEdBQUdDLDBCQUFhLENBQUNELEdBQUc7QUFDN0IsSUFBSUUsV0FBVyxHQUFHLEVBQUU7QUFFTCxTQUFTQyxxQkFBcUJBLENBQUFDLElBQUEsRUFBc0I7RUFBQSxJQUFwQkMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFBRUMsVUFBVSxHQUFBRixJQUFBLENBQVZFLFVBQVU7RUFFL0QsSUFBTUMsTUFBTSxHQUFHLElBQUFDLDZDQUFpQixFQUFDLENBQUM7RUFDbEMsSUFBQUMsU0FBQSxHQUFnQyxJQUFBQyxlQUFRLEVBQUMsRUFBRSxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBaEMsT0FBQSxFQUFBNkIsU0FBQTtJQUFyQ0ksUUFBUSxHQUFBRixVQUFBO0lBQUVHLFdBQVcsR0FBQUgsVUFBQTtFQUM1QixJQUFBSSxVQUFBLEdBQWtELElBQUFMLGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQU0sVUFBQSxPQUFBSixlQUFBLENBQUFoQyxPQUFBLEVBQUFtQyxVQUFBO0lBQXZERSxpQkFBaUIsR0FBQUQsVUFBQTtJQUFFRSxvQkFBb0IsR0FBQUYsVUFBQTtFQUM5QyxJQUFBRyxVQUFBLEdBQW9DLElBQUFULGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQVUsVUFBQSxPQUFBUixlQUFBLENBQUFoQyxPQUFBLEVBQUF1QyxVQUFBO0lBQTVDRSxVQUFVLEdBQUFELFVBQUE7SUFBRUUsYUFBYSxHQUFBRixVQUFBO0VBQ2hDLElBQUFHLFVBQUEsR0FBcUQsSUFBQWIsZUFBUSxFQUFDLEtBQUssQ0FBQztJQUFBYyxVQUFBLE9BQUFaLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQTJDLFVBQUE7SUFBN0RFLGlCQUFpQixHQUFBRCxVQUFBO0lBQUVFLHVCQUF1QixHQUFBRixVQUFBO0VBQ2pELElBQUFHLFVBQUEsR0FBcUQsSUFBQWpCLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQWtCLFdBQUEsT0FBQWhCLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQStDLFVBQUE7SUFBN0RFLGlCQUFpQixHQUFBRCxXQUFBO0lBQUVFLHVCQUF1QixHQUFBRixXQUFBO0VBQ2pELElBQUFHLFdBQUEsR0FBd0IsSUFBQXJCLGVBQVEsRUFBQyxJQUFJc0IsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUFBQyxXQUFBLE9BQUFyQixlQUFBLENBQUFoQyxPQUFBLEVBQUFtRCxXQUFBO0lBQXJDRyxJQUFJLEdBQUFELFdBQUE7SUFBRUUsT0FBTyxHQUFBRixXQUFBO0VBQ3BCLElBQUFHLFdBQUEsR0FBNEIsSUFBQTFCLGVBQVEsRUFBQyxDQUFDLENBQUM7SUFBQTJCLFdBQUEsT0FBQXpCLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQXdELFdBQUE7SUFBaENFLE1BQU0sR0FBQUQsV0FBQTtJQUFFRSxTQUFTLEdBQUFGLFdBQUE7RUFDeEIsSUFBQUcsV0FBQSxHQUFzQyxJQUFBOUIsZUFBUSxFQUFDLEVBQUUsQ0FBQztJQUFBK0IsV0FBQSxPQUFBN0IsZUFBQSxDQUFBaEMsT0FBQSxFQUFBNEQsV0FBQTtJQUEzQ0UsV0FBVyxHQUFBRCxXQUFBO0lBQUVFLGNBQWMsR0FBQUYsV0FBQTtFQUNsQyxJQUFBRyxXQUFBLEdBQThCLElBQUFsQyxlQUFRLEVBQUMsS0FBSyxDQUFDO0lBQUFtQyxXQUFBLE9BQUFqQyxlQUFBLENBQUFoQyxPQUFBLEVBQUFnRSxXQUFBO0lBQXRDRSxPQUFPLEdBQUFELFdBQUE7SUFBRUUsVUFBVSxHQUFBRixXQUFBO0VBQzFCLElBQUFHLFdBQUEsR0FBZ0QsSUFBQXRDLGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQXVDLFdBQUEsT0FBQXJDLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQW9FLFdBQUE7SUFBckRFLGdCQUFnQixHQUFBRCxXQUFBO0lBQUVFLG1CQUFtQixHQUFBRixXQUFBO0VBQzVDLElBQUFHLFdBQUEsR0FBMEUsSUFBQTFDLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQTJDLFdBQUEsT0FBQXpDLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQXdFLFdBQUE7SUFBbEZFLDZCQUE2QixHQUFBRCxXQUFBO0lBQUVFLGdDQUFnQyxHQUFBRixXQUFBO0VBQ3RFLElBQUFHLFdBQUEsR0FBc0QsSUFBQTlDLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQStDLFdBQUEsT0FBQTdDLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQTRFLFdBQUE7SUFBOURFLG1CQUFtQixHQUFBRCxXQUFBO0lBQUVFLHNCQUFzQixHQUFBRixXQUFBO0VBQ2xELElBQUFHLFdBQUEsR0FBa0MsSUFBQWxELGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQW1ELFdBQUEsT0FBQWpELGVBQUEsQ0FBQWhDLE9BQUEsRUFBQWdGLFdBQUE7SUFBdkNFLFNBQVMsR0FBQUQsV0FBQTtJQUFFRSxZQUFZLEdBQUFGLFdBQUE7RUFDOUIsSUFBQUcsV0FBQSxHQUFnQyxJQUFBdEQsZUFBUSxFQUFDLEVBQUUsQ0FBQztJQUFBdUQsV0FBQSxPQUFBckQsZUFBQSxDQUFBaEMsT0FBQSxFQUFBb0YsV0FBQTtJQUFyQ0UsUUFBUSxHQUFBRCxXQUFBO0lBQUVFLFdBQVcsR0FBQUYsV0FBQTtFQUM1QixJQUFBRyxXQUFBLEdBQWtDLElBQUExRCxlQUFRLEVBQUMsS0FBSyxDQUFDO0lBQUEyRCxXQUFBLE9BQUF6RCxlQUFBLENBQUFoQyxPQUFBLEVBQUF3RixXQUFBO0lBQTFDRSxTQUFTLEdBQUFELFdBQUE7SUFBRUUsWUFBWSxHQUFBRixXQUFBO0VBQzlCLElBQUFHLFdBQUEsR0FBb0QsSUFBQTlELGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQStELFdBQUEsT0FBQTdELGVBQUEsQ0FBQWhDLE9BQUEsRUFBQTRGLFdBQUE7SUFBNURFLGtCQUFrQixHQUFBRCxXQUFBO0lBQUVFLHFCQUFxQixHQUFBRixXQUFBO0VBQ2hELElBQUFHLFdBQUEsR0FBNEMsSUFBQWxFLGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQW1FLFdBQUEsT0FBQWpFLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQWdHLFdBQUE7SUFBakRFLGNBQWMsR0FBQUQsV0FBQTtJQUFFRSxpQkFBaUIsR0FBQUYsV0FBQTtFQUN4QyxJQUFBRyxXQUFBLEdBQW9DLElBQUF0RSxlQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQUF1RSxXQUFBLE9BQUFyRSxlQUFBLENBQUFoQyxPQUFBLEVBQUFvRyxXQUFBO0lBQXhDRSxVQUFVLEdBQUFELFdBQUE7SUFBRUUsYUFBYSxHQUFBRixXQUFBO0VBQ2hDLElBQUFHLFdBQUEsR0FBa0MsSUFBQTFFLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQTJFLFdBQUEsT0FBQXpFLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQXdHLFdBQUE7SUFBMUNFLFNBQVMsR0FBQUQsV0FBQTtJQUFFRSxZQUFZLEdBQUFGLFdBQUE7RUFFOUIsSUFBTUcsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUlDLEdBQUcsRUFBSztJQUU3QixJQUFJbkQsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNmaUQsWUFBWSxDQUFDLFVBQUFHLGFBQWE7UUFBQSxPQUFJLENBQUNBLGFBQWE7TUFBQSxFQUFDO01BQzdDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ04sU0FBUyxDQUFDO01BQ3RCLElBQUlHLEdBQUcsRUFBRTtRQUNSbkYsVUFBVSxDQUFDdUYsUUFBUSxDQUFDLGtCQUFrQixFQUFFO1VBQ3ZDQyxXQUFXLEVBQUV4RCxNQUFNO1VBQ25CeUQsZUFBZSxFQUFFO1FBQ2xCLENBQUMsQ0FBQztNQUNIO0lBQ0QsQ0FBQyxNQUNJO01BQ0pDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQztJQUN0QztFQUNELENBQUM7RUFFRCxJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFFZixJQUFJNUYsS0FBSyxDQUFDNkYsTUFBTSxJQUFFLElBQUksSUFBSTdGLEtBQUssQ0FBQzZGLE1BQU0sQ0FBQ3BCLGNBQWMsRUFBRTtNQUN0RGEsT0FBTyxDQUFDQyxHQUFHLENBQUN2RixLQUFLLENBQUM2RixNQUFNLENBQUNwQixjQUFjLEVBQUUsNkJBQTZCLENBQUM7TUFDdkVDLGlCQUFpQixDQUFDRCxjQUFjLENBQUM7SUFDbEM7RUFDRCxDQUFDLEVBQUUsQ0FBQ3pFLEtBQUssQ0FBQzZGLE1BQU0sQ0FBQyxDQUFDO0VBR2xCLElBQUFDLFdBQUEsR0FBOEMsSUFBQXpGLGVBQVEsRUFDckQwRixrQkFBSyxDQUFDQyxrQkFBa0IsQ0FBQ0MsMEJBQVMsQ0FBQyxDQUFDQyxHQUNyQyxDQUFDO0lBQUFDLFdBQUEsT0FBQTVGLGVBQUEsQ0FBQWhDLE9BQUEsRUFBQXVILFdBQUE7SUFGTU0sZUFBZSxHQUFBRCxXQUFBO0lBQUVFLGtCQUFrQixHQUFBRixXQUFBO0VBTTFDLElBQUFQLGdCQUFTLEVBQUMsWUFBTTtJQUNmLElBQU1VLFFBQVE7TUFBQSxJQUFBQyxLQUFBLE9BQUFDLGtCQUFBLENBQUFqSSxPQUFBLEVBQUcsYUFBWTtRQUM1QixJQUFNa0ksT0FBTyxHQUFHLEVBQUU7UUFDbEIsSUFBSTtVQUNILElBQU1DLElBQUksU0FBUyxJQUFBQyxjQUFNLEVBQUMsSUFBQUMsV0FBRyxFQUFDQyxVQUFFLEVBQUUsTUFBTSxFQUFFQyxZQUFJLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLENBQUM7VUFDaEVOLElBQUksQ0FBQ08sSUFBSSxDQUFDLENBQUMsQ0FBQ0MsYUFBYSxDQUFDQyxPQUFPLENBQUMsVUFBQ0MsSUFBSSxFQUFLO1lBRTNDQyxNQUFNLEdBQUc7Y0FBRUMsS0FBSyxFQUFFRixJQUFJO2NBQUVHLEtBQUssRUFBRUg7WUFBSyxDQUFDO1lBQ3JDOUIsT0FBTyxDQUFDQyxHQUFHLENBQUM4QixNQUFNLENBQUM7WUFDbkJaLE9BQU8sQ0FBQ2UsSUFBSSxDQUFDSCxNQUFNLENBQUM7VUFDckIsQ0FBQyxDQUFDO1VBR0ZaLE9BQU8sQ0FBQ2UsSUFBSSxDQUFDO1lBQUVGLEtBQUssRUFBRSxPQUFPO1lBQUVDLEtBQUssRUFBRTtVQUFRLENBQUMsQ0FBQztVQUNoRDlHLFdBQVcsQ0FBQ2dHLE9BQU8sQ0FBQztVQUNwQjVGLG9CQUFvQixDQUFDNkYsSUFBSSxDQUFDTyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxhQUFhLENBQUM7VUFDL0NwQyxhQUFhLENBQUM0QixJQUFJLENBQUNPLElBQUksQ0FBQyxDQUFDLENBQUNwQyxVQUFVLENBQUM7VUFDckNTLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDbUIsSUFBSSxDQUFDTyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxhQUFhLEVBQUUsbUJBQW1CLENBQUM7UUFFNUQsQ0FBQyxDQUFDLE9BQU9PLENBQUMsRUFBRTtVQUNYbkMsT0FBTyxDQUFDb0MsS0FBSyxDQUFDLHlCQUF5QixFQUFFRCxDQUFDLENBQUM7UUFDNUM7UUFDQS9FLFVBQVUsQ0FBQyxJQUFJLENBQUM7TUFDakIsQ0FBQztNQUFBLGdCQXRCSzRELFFBQVFBLENBQUE7UUFBQSxPQUFBQyxLQUFBLENBQUFvQixLQUFBLE9BQUFDLFNBQUE7TUFBQTtJQUFBLEdBc0JiO0lBRUR0QixRQUFRLENBQUMsQ0FBQztFQUNYLENBQUMsRUFDRSxFQUFFLENBQUM7RUFHTixTQUFTdUIsY0FBY0EsQ0FBQSxFQUFHO0lBQ3pCNUcsYUFBYSxDQUFDLElBQUksQ0FBQztFQUNwQjtFQUVBLFNBQVM2RyxjQUFjQSxDQUFDQyxLQUFLLEVBQUVSLEtBQUssRUFBRTtJQUNyQ3pGLE9BQU8sQ0FBQ3lGLEtBQUssQ0FBQztJQUNkdEcsYUFBYSxDQUFDLEtBQUssQ0FBQztFQUNyQjtFQUdBLElBQU0rRyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUEsRUFBUztJQUM3QnRLLFdBQVcsQ0FBQ3VLLGtCQUFrQixDQUFDLENBQUMsQ0FDOUJDLElBQUksQ0FBQyxVQUFDQyxNQUFNLEVBQUs7TUFDakIsSUFBSUEsTUFBTSxFQUFFO1FBQ1g5QixrQkFBa0IsQ0FBQzhCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDbEMsR0FBRyxDQUFDO01BQ3pDO0lBQ0QsQ0FBQyxDQUFDLENBQ0RtQyxLQUFLLENBQUMsVUFBQ1gsS0FBSyxFQUFLO01BQ2pCcEMsT0FBTyxDQUFDQyxHQUFHLENBQUNtQyxLQUFLLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0VBQ0osQ0FBQztFQUdELElBQU1ZLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBLEVBQVM7SUFDeEI1SyxXQUFXLENBQUM2SyxZQUFZLENBQUMsQ0FBQyxDQUN4QkwsSUFBSSxDQUFDLFVBQUNDLE1BQU0sRUFBSztNQUNqQjdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDNEMsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNsQyxHQUFHLEVBQUUsTUFBTSxDQUFDO01BQ3pDRyxrQkFBa0IsQ0FBQzhCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDbEMsR0FBRyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUNEbUMsS0FBSyxDQUFDLFVBQUNYLEtBQUssRUFBSztNQUNqQnBDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDbUMsS0FBSyxDQUFDO0lBQ25CLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFRCxJQUFNYyxXQUFXO0lBQUEsSUFBQUMsS0FBQSxPQUFBakMsa0JBQUEsQ0FBQWpJLE9BQUEsRUFBRyxhQUFZO01BRS9CK0csT0FBTyxDQUFDQyxHQUFHLENBQUNkLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztNQUMvQyxJQUFJO1FBRUgsSUFBRyxDQUFDSixrQkFBa0IsRUFBQztVQUV0QixJQUFJcUUsS0FBSyxHQUFHQyw2QkFBSyxDQUFDQyxJQUFJLENBQUMsc0NBQXNDLEVBQUU7WUFDOURDLFFBQVEsRUFBRUYsNkJBQUssQ0FBQ0csU0FBUyxDQUFDQztVQUMzQixDQUFDLENBQUM7VUFHRkMsVUFBVSxDQUFDLFNBQVNDLFNBQVNBLENBQUEsRUFBRztZQUMvQk4sNkJBQUssQ0FBQ08sSUFBSSxDQUFDUixLQUFLLENBQUM7VUFDbEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUNQO1FBQ0Q7UUFFQSxJQUFJekcsTUFBTSxJQUFJLENBQUMsRUFBRTtVQUNoQixJQUFJeUcsTUFBSyxHQUFHQyw2QkFBSyxDQUFDQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDOUNDLFFBQVEsRUFBRUYsNkJBQUssQ0FBQ0csU0FBUyxDQUFDQztVQUMzQixDQUFDLENBQUM7VUFDRkMsVUFBVSxDQUFDLFNBQVNDLFNBQVNBLENBQUEsRUFBRztZQUMvQk4sNkJBQUssQ0FBQ08sSUFBSSxDQUFDUixNQUFLLENBQUM7VUFDbEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUNQO1FBQ0Q7UUFFQSxJQUFJN0YsZ0JBQWdCLElBQUksRUFBRSxFQUFFO1VBQzNCLElBQUk2RixPQUFLLEdBQUdDLDZCQUFLLENBQUNDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNqREMsUUFBUSxFQUFFRiw2QkFBSyxDQUFDRyxTQUFTLENBQUNDO1VBQzNCLENBQUMsQ0FBQztVQUNGQyxVQUFVLENBQUMsU0FBU0MsU0FBU0EsQ0FBQSxFQUFHO1lBQy9CTiw2QkFBSyxDQUFDTyxJQUFJLENBQUNSLE9BQUssQ0FBQztVQUNsQixDQUFDLEVBQUUsR0FBRyxDQUFDO1VBQ1A7UUFDRDtRQUVBLElBQUl6RCxTQUFTLEtBQUtqRixLQUFLLENBQUM2RixNQUFNLElBQUUsSUFBSSxJQUFLN0YsS0FBSyxDQUFDNkYsTUFBTSxJQUFFLElBQUksSUFBSTdGLEtBQUssQ0FBQzZGLE1BQU0sQ0FBQ3BCLGNBQWMsSUFBRSxJQUFJLElBQUl6RSxLQUFLLENBQUM2RixNQUFNLENBQUNwQixjQUFjLENBQUMwRSxNQUFNLElBQUUsQ0FBRSxDQUFDLEVBQUU7VUFHNUksSUFBSVQsT0FBSyxHQUFHQyw2QkFBSyxDQUFDQyxJQUFJLENBQUMsK0NBQStDLEVBQUU7WUFDdkVDLFFBQVEsRUFBRUYsNkJBQUssQ0FBQ0csU0FBUyxDQUFDQztVQUMzQixDQUFDLENBQUM7VUFHRkMsVUFBVSxDQUFDLFNBQVNDLFNBQVNBLENBQUEsRUFBRztZQUMvQk4sNkJBQUssQ0FBQ08sSUFBSSxDQUFDUixPQUFLLENBQUM7VUFDbEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQztVQUVQO1FBQ0Q7UUFFQSxJQUFJVSxPQUFPLEdBQUdDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7UUFDL0IsSUFBSWxELGVBQWUsSUFBSUwsa0JBQUssQ0FBQ0Msa0JBQWtCLENBQUNDLDBCQUFTLENBQUMsQ0FBQ0MsR0FBRyxFQUFFO1VBQy9Ea0QsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxVQUFDQyxPQUFPLEVBQUVDLE1BQU0sRUFBSztZQUMxQyxJQUFNQyxHQUFHLEdBQUcsSUFBSUMsY0FBYyxDQUFDLENBQUM7WUFDaENELEdBQUcsQ0FBQ0UsTUFBTSxHQUFHLFlBQVk7Y0FDeEIsSUFBTUMsU0FBUyxHQUFHSCxHQUFHLENBQUNJLFFBQVE7Y0FDOUIsSUFBTUMsUUFBUSxHQUFHO2dCQUNoQkMsV0FBVyxFQUFFO2NBQ2QsQ0FBQztjQUNELElBQU1DLFVBQVUsR0FBRyxJQUFBQyxZQUFHLEVBQUNDLGVBQU8sRUFBRSxZQUFZLEdBQUd0SSxJQUFJLENBQUN1SSxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQzFELElBQU1DLFVBQVUsR0FBRyxJQUFBQyw2QkFBb0IsRUFBQ0wsVUFBVSxFQUFFSixTQUFTLEVBQUVFLFFBQVEsQ0FBQztjQUN4RU0sVUFBVSxDQUFDRSxFQUFFLENBQ1osZUFBZSxFQUNmLFVBQUNDLFFBQVEsRUFBSztnQkFDYixJQUFNQyxRQUFRLEdBQUlELFFBQVEsQ0FBQ0UsZ0JBQWdCLEdBQUdGLFFBQVEsQ0FBQ0csVUFBVSxHQUFJLEdBQUc7Z0JBR3hFLFFBQVFILFFBQVEsQ0FBQ0ksS0FBSztrQkFDckIsS0FBSyxRQUFRO29CQUNacEYsT0FBTyxDQUFDQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7b0JBQy9CO2tCQUNELEtBQUssU0FBUztvQkFDYkQsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7b0JBQ2hDO2dCQUNGO2NBQ0QsQ0FBQyxFQUNELFVBQUNtQyxLQUFLLEVBQUs7Z0JBQ1YsUUFBUUEsS0FBSyxDQUFDaUQsSUFBSTtrQkFDakIsS0FBSyxzQkFBc0I7b0JBQzFCcEIsTUFBTSxDQUFDLElBQUlxQixLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztvQkFDdEU7a0JBQ0QsS0FBSyxrQkFBa0I7b0JBQ3RCckIsTUFBTSxDQUFDLElBQUlxQixLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztvQkFDN0M7a0JBQ0QsS0FBSyxpQkFBaUI7b0JBQ3JCckIsTUFBTSxDQUFDLElBQUlxQixLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztvQkFDekU7a0JBQ0Q7b0JBQ0NyQixNQUFNLENBQUM3QixLQUFLLENBQUM7b0JBQ2I7Z0JBQ0Y7Y0FDRCxDQUFDLE1BQUFsQixrQkFBQSxDQUFBakksT0FBQSxFQUNELGFBQVk7Z0JBQ1hzQixXQUFXLFNBQVMsSUFBQWdMLHVCQUFjLEVBQUNWLFVBQVUsQ0FBQ0csUUFBUSxDQUFDTixHQUFHLENBQUM7Z0JBQzNEMUUsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUxRixXQUFXLENBQUM7Z0JBQzdDd0csa0JBQWtCLENBQUN4RyxXQUFXLENBQUM7Z0JBQy9CeUosT0FBTyxDQUFDLENBQUM7Y0FDVixDQUFDLENBQ0YsQ0FBQztZQUNGLENBQUM7WUFDREUsR0FBRyxDQUFDc0IsT0FBTyxHQUFHLFlBQVk7Y0FDekJ2QixNQUFNLENBQUMsSUFBSXFCLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzVDLENBQUM7WUFDRHBCLEdBQUcsQ0FBQ3VCLFlBQVksR0FBRyxNQUFNO1lBQ3pCdkIsR0FBRyxDQUFDd0IsSUFBSSxDQUFDLEtBQUssRUFBRTVFLGVBQWUsRUFBRSxJQUFJLENBQUM7WUFDdENvRCxHQUFHLENBQUN5QixJQUFJLENBQUMsSUFBSSxDQUFDO1VBQ2YsQ0FBQyxDQUFDO1FBQ0g7UUFHQSxJQUFJO1VBQ0gsTUFBTTdCLE9BQU87VUFDYi9DLGtCQUFrQixDQUFDeEcsV0FBVyxDQUFDO1VBQy9CLElBQUlxTCxNQUFNLEdBQUc7WUFDWkMsU0FBUyxFQUFFbEosTUFBTTtZQUNqQm1KLE9BQU8sRUFBRXZKLElBQUk7WUFDYndKLFdBQVcsRUFBRXhJLGdCQUFnQjtZQUM3QnlJLGNBQWMsRUFBRWpKLFdBQVc7WUFDM0JrSixRQUFRLEVBQUV0RztVQUNYLENBQUM7VUFDRCxJQUFJbUIsZUFBZSxJQUFJTCxrQkFBSyxDQUFDQyxrQkFBa0IsQ0FBQ0MsMEJBQVMsQ0FBQyxDQUFDQyxHQUFHLElBQUlyRyxXQUFXLElBQUksRUFBRSxFQUFFO1lBQ3BGcUwsTUFBTSxDQUFDTSxRQUFRLEdBQUczTCxXQUFXO1VBQzlCO1VBRUEsSUFBSW9GLFNBQVMsRUFBRTtZQUNkaUcsTUFBTSxDQUFDekcsY0FBYyxHQUFHekUsS0FBSyxDQUFDNkYsTUFBTSxDQUFDcEIsY0FBYztVQUNwRDtVQU1BLElBQU1nSCxNQUFNLFNBQVMsSUFBQUMsY0FBTSxFQUMxQixJQUFBQyxrQkFBVSxFQUFDLElBQUEvRSxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRWtFLE1BQU0sQ0FBQztVQUV0RSxJQUFNVSxnQkFBZ0IsU0FBUyxJQUFBQyxlQUFPLEVBQUMsSUFBQUYsa0JBQVUsRUFBQzlFLFVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztVQUNqRStFLGdCQUFnQixDQUFDekUsT0FBTyxDQUFDLFVBQUNQLEdBQUcsRUFBSyxDQUVsQyxDQUFDLENBQUM7VUFHRixJQUFNa0YsUUFBUSxHQUFHcE0sTUFBTSxDQUFDbUMsSUFBSSxDQUFDa0ssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBR2xLLElBQUksQ0FBQ21LLFdBQVcsQ0FBQyxDQUFDO1VBQ2xFMUcsT0FBTyxDQUFDQyxHQUFHLENBQUN1RyxRQUFRLENBQUM7VUFDckIsSUFBTUcsUUFBUSxTQUFTLElBQUF0RixjQUFNLEVBQUMsSUFBQUMsV0FBRyxFQUFDQyxVQUFFLEVBQUUsTUFBTSxFQUFFQyxZQUFJLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFLFFBQVEsRUFBRThFLFFBQVEsQ0FBQyxDQUFDO1VBRXhGLElBQUdHLFFBQVEsQ0FBQ2hGLElBQUksQ0FBQyxDQUFDLEVBQ2xCO1lBQ0MsSUFBTWlGLGtCQUFrQixHQUFHRCxRQUFRLENBQUNoRixJQUFJLENBQUMsQ0FBQztZQUMxQyxJQUFJa0YsbUJBQW1CLEdBQUcsS0FBSztZQUMvQixJQUFJQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUlDLFVBQVUsR0FBRyxDQUFDLENBQUM7WUFDbkIsSUFBSUMsSUFBSSxHQUFHLEtBQUs7WUFFaEIsSUFBSUosa0JBQWtCLENBQUNLLE1BQU0sS0FBSyxnQkFBZ0IsRUFBRTtjQUNuRGpILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsRUFBRTJHLGtCQUFrQixDQUFDSyxNQUFNLENBQUM7Y0FFbkRMLGtCQUFrQixDQUFDTSxNQUFNLENBQUNyRixPQUFPLENBQUMsVUFBQ0MsSUFBSSxFQUFFcUYsR0FBRyxFQUFLO2dCQUNoRCxJQUFJckYsSUFBSSxDQUFDNUcsUUFBUSxJQUFJcUMsZ0JBQWdCLEVBQUU7a0JBQ3RDdUUsSUFBSSxDQUFDc0YsV0FBVyxHQUFHdEYsSUFBSSxDQUFDc0YsV0FBVyxHQUFHQyxVQUFVLENBQUMxSyxNQUFNLENBQUM7a0JBQ3hEa0ssbUJBQW1CLEdBQUcsSUFBSTtnQkFDM0I7Z0JBRUEsSUFBSS9FLElBQUksQ0FBQzVHLFFBQVEsSUFBSSxxQkFBcUIsRUFBRTtrQkFDM0M0TCxXQUFXLEdBQUdLLEdBQUc7Z0JBQ2xCO2NBQ0QsQ0FBQyxDQUFDO2NBRUYsSUFBSSxDQUFDTixtQkFBbUIsSUFBSUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM3Q0Ysa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ0osV0FBVyxDQUFDLENBQUNNLFdBQVcsR0FBR1Isa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ0osV0FBVyxDQUFDLENBQUNNLFdBQVcsR0FBR0MsVUFBVSxDQUFDMUssTUFBTSxDQUFDO2NBQzdIO1lBQ0QsQ0FBQyxNQUNJLElBQUlpSyxrQkFBa0IsQ0FBQ0ssTUFBTSxLQUFLLHNCQUFzQixFQUFFO2NBRTlEakgsT0FBTyxDQUFDQyxHQUFHLENBQUMsV0FBVyxFQUFFMkcsa0JBQWtCLENBQUNLLE1BQU0sQ0FBQztjQUNuREwsa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ3JGLE9BQU8sQ0FBQyxVQUFDQyxJQUFJLEVBQUVxRixHQUFHLEVBQUs7Z0JBQ2hELElBQUlyRixJQUFJLENBQUM1RyxRQUFRLElBQUlxQyxnQkFBZ0IsRUFBRTtrQkFDdEN1RSxJQUFJLENBQUNzRixXQUFXLEdBQUd0RixJQUFJLENBQUNzRixXQUFXLEdBQUdDLFVBQVUsQ0FBQzFLLE1BQU0sQ0FBQztrQkFDeERrSyxtQkFBbUIsR0FBRyxJQUFJO2dCQUMzQjtnQkFFQSxJQUFJL0UsSUFBSSxDQUFDNUcsUUFBUSxJQUFJLFNBQVMsRUFBRTtrQkFDL0I2TCxVQUFVLEdBQUdJLEdBQUc7Z0JBQ2pCO2NBQ0QsQ0FBQyxDQUFDO2NBRUYsSUFBSSxDQUFDTixtQkFBbUIsSUFBSUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM1Q0gsa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxDQUFDLENBQUNLLFdBQVcsR0FBR1Isa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ0gsVUFBVSxDQUFDLENBQUNLLFdBQVcsR0FBR0MsVUFBVSxDQUFDMUssTUFBTSxDQUFDO2dCQUMxSGlLLGtCQUFrQixDQUFDTSxNQUFNLENBQUNILFVBQVUsQ0FBQyxDQUFDSyxXQUFXLEdBQUdSLGtCQUFrQixDQUFDTSxNQUFNLENBQUNILFVBQVUsQ0FBQyxDQUFDTyxhQUFhLEdBQUdELFVBQVUsQ0FBQzFLLE1BQU0sQ0FBQztnQkFDNUhxRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRTJHLGtCQUFrQixDQUFDTSxNQUFNLENBQUNILFVBQVUsQ0FBQyxDQUFDSyxXQUFXLENBQUM7Y0FDMUY7WUFFRCxDQUFDLE1BQ0k7Y0FDSnBILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsRUFBRTJHLGtCQUFrQixDQUFDO2NBQzVDQSxrQkFBa0IsQ0FBQ00sTUFBTSxDQUFDSyxLQUFLLENBQUMxRixPQUFPLENBQUMsVUFBQ0MsSUFBSSxFQUFFcUYsR0FBRyxFQUFLO2dCQUN0RCxJQUFJckYsSUFBSSxDQUFDNUcsUUFBUSxJQUFJcUMsZ0JBQWdCLEVBQUU7a0JBQ3RDdUUsSUFBSSxDQUFDc0YsV0FBVyxHQUFHdEYsSUFBSSxDQUFDc0YsV0FBVyxHQUFHQyxVQUFVLENBQUMxSyxNQUFNLENBQUM7a0JBQ3hEa0ssbUJBQW1CLEdBQUcsSUFBSTtrQkFDMUJHLElBQUksR0FBRyxJQUFJO2dCQUNaO2NBQ0QsQ0FBQyxDQUFDO2NBRUYsSUFBSSxDQUFDQSxJQUFJLEVBQUU7Z0JBQ1ZKLGtCQUFrQixDQUFDTSxNQUFNLENBQUNNLEtBQUssQ0FBQzNGLE9BQU8sQ0FBQyxVQUFDQyxJQUFJLEVBQUVxRixHQUFHLEVBQUs7a0JBQ3RELElBQUlyRixJQUFJLENBQUM1RyxRQUFRLElBQUlxQyxnQkFBZ0IsRUFBRTtvQkFDdEN1RSxJQUFJLENBQUNzRixXQUFXLEdBQUd0RixJQUFJLENBQUNzRixXQUFXLEdBQUdDLFVBQVUsQ0FBQzFLLE1BQU0sQ0FBQztvQkFDeERrSyxtQkFBbUIsR0FBRyxJQUFJO29CQUMxQkcsSUFBSSxHQUFHLElBQUk7a0JBQ1o7Z0JBQ0QsQ0FBQyxDQUFDO2NBRUg7Y0FFQSxJQUFJLENBQUNBLElBQUksRUFBRTtnQkFDVkosa0JBQWtCLENBQUNNLE1BQU0sQ0FBQ08sT0FBTyxDQUFDNUYsT0FBTyxDQUFDLFVBQUNDLElBQUksRUFBRXFGLEdBQUcsRUFBSztrQkFDeEQsSUFBSXJGLElBQUksQ0FBQzVHLFFBQVEsSUFBSXFDLGdCQUFnQixFQUFFO29CQUN0Q3VFLElBQUksQ0FBQ3NGLFdBQVcsR0FBR3RGLElBQUksQ0FBQ3NGLFdBQVcsR0FBR0MsVUFBVSxDQUFDMUssTUFBTSxDQUFDO29CQUN4RGtLLG1CQUFtQixHQUFHLElBQUk7b0JBQzFCRyxJQUFJLEdBQUcsSUFBSTtrQkFDWjtrQkFFQSxJQUFJbEYsSUFBSSxDQUFDNUcsUUFBUSxJQUFJLGVBQWUsRUFBRTtvQkFDckM0TCxXQUFXLEdBQUdLLEdBQUc7a0JBQ2xCO2dCQUNELENBQUMsQ0FBQztnQkFFRixJQUFJLENBQUNOLG1CQUFtQixJQUFJQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7a0JBQzdDRixrQkFBa0IsQ0FBQ00sTUFBTSxDQUFDTyxPQUFPLENBQUNYLFdBQVcsQ0FBQyxDQUFDTSxXQUFXLEdBQUdSLGtCQUFrQixDQUFDTSxNQUFNLENBQUNPLE9BQU8sQ0FBQ1gsV0FBVyxDQUFDLENBQUNNLFdBQVcsR0FBR0MsVUFBVSxDQUFDMUssTUFBTSxDQUFDO2tCQUM1SXFLLElBQUksR0FBRyxJQUFJO2dCQUNaO2NBQ0Q7WUFDRDtZQUVBLE1BQU0sSUFBQVUsY0FBTSxFQUFDLElBQUFwRyxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLEVBQUUsUUFBUSxFQUFFOEUsUUFBUSxDQUFDLEVBQUVJLGtCQUFrQixDQUFDO1VBRTVGO1VBR0EsSUFBRyxDQUFDdEwsaUJBQWlCLENBQUNxTSxRQUFRLENBQUNwSyxnQkFBZ0IsQ0FBQyxFQUNoRDtZQUNDakMsaUJBQWlCLENBQUM0RyxJQUFJLENBQUMzRSxnQkFBZ0IsQ0FBQztZQUN4QyxNQUFNLElBQUFxSyxpQkFBUyxFQUFDLElBQUF0RyxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsRUFBRTtjQUN0REUsYUFBYSxFQUFHdEc7WUFDakIsQ0FBQyxDQUFDO1VBQ0g7VUFJQSxJQUFNdU0sYUFBYSxTQUFTLElBQUF0QixlQUFPLEVBQUMsSUFBQUYsa0JBQVUsRUFBQzlFLFVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztVQUM5RHNHLGFBQWEsQ0FBQ2hHLE9BQU8sQ0FBQyxVQUFDUCxHQUFHLEVBQUs7WUFDOUJ0QixPQUFPLENBQUNDLEdBQUcsQ0FBQ3FCLEdBQUcsQ0FBQ3dHLEVBQUUsRUFBRUMsSUFBSSxDQUFDQyxTQUFTLENBQUMxRyxHQUFHLENBQUNLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUNoRCxDQUFDLENBQUM7VUFHRixNQUFNLElBQUFpRyxpQkFBUyxFQUFDLElBQUF0RyxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsRUFBRTtZQUN0RG5DLFVBQVUsRUFBRThILFVBQVUsQ0FBQzlILFVBQVUsQ0FBQyxHQUFHOEgsVUFBVSxDQUFDMUssTUFBTSxDQUFDLEdBQUc7VUFDMUQsQ0FBQyxDQUFDO1VBRUgsSUFBSWdELFNBQVMsRUFBRTtZQUNkLElBQU1nSCxTQUFRLFNBQVMsSUFBQXRGLGNBQU0sRUFBQyxJQUFBQyxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQztZQUNwRSxJQUFNdUcsUUFBUSxHQUFHdEIsU0FBUSxDQUFDaEYsSUFBSSxDQUFDLENBQUMsQ0FBQ3VHLElBQUk7WUFDckN4TixLQUFLLENBQUM2RixNQUFNLENBQUNwQixjQUFjLENBQUMwQyxPQUFPLENBQUMsVUFBQ0MsSUFBSSxFQUFLO2NBRTdDLElBQUdtRyxRQUFRLElBQUluRyxJQUFJLENBQUNvRyxJQUFJLEVBQ3hCO2dCQUNDLElBQU1DLE9BQU8sR0FBTUYsUUFBUSw0REFBdURuRyxJQUFJLENBQUNuRixNQUFNLE1BQUc7Z0JBQ2hHeUwsaUNBQVUsQ0FBQ0MsUUFBUSxDQUNsQnZHLElBQUksQ0FBQ3dHLFNBQVMsRUFDZEgsT0FBTyxFQUNQLFVBQUNJLElBQUksRUFBSztrQkFDVHZJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBCQUEwQixHQUFHc0ksSUFBSSxDQUFDO2dCQUMvQyxDQUFDLEVBQ0QsVUFBQ0MsT0FBTyxFQUFLO2tCQUNaeEksT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7Z0JBQ3JDLENBQ0QsQ0FBQztjQUNGO1lBRUQsQ0FBQyxDQUFDO1VBRUg7VUFFQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDO1VBQ2xDMUYsVUFBVSxDQUFDdUYsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUM1QixDQUFDLENBQUMsT0FBT3VJLE9BQU8sRUFBRTtVQUNqQnpJLE9BQU8sQ0FBQ29DLEtBQUssQ0FBQyx5QkFBeUIsRUFBRXFHLE9BQU8sQ0FBQztVQUNqRCxNQUFNQSxPQUFPO1FBQ2Q7TUFJRCxDQUFDLENBQUMsT0FBT3RHLENBQUMsRUFBRTtRQUNYbkMsT0FBTyxDQUFDb0MsS0FBSyxDQUFDLHlCQUF5QixFQUFFRCxDQUFDLENBQUM7TUFDNUM7SUFDRCxDQUFDO0lBQUEsZ0JBelNLZSxXQUFXQSxDQUFBO01BQUEsT0FBQUMsS0FBQSxDQUFBZCxLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLEdBeVNoQjtFQUVELElBQU1vRyxnQkFBZ0I7SUFBQSxJQUFBQyxLQUFBLE9BQUF6SCxrQkFBQSxDQUFBakksT0FBQSxFQUFHLGFBQVk7TUFDcEMsSUFBRzBELE1BQU0sR0FBQyxDQUFDLEVBQ1g7UUFDQ2lCLGdDQUFnQyxDQUFDLElBQUksQ0FBQztNQUN2QyxDQUFDLE1BQ0c7UUFDSHlDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztNQUNoQztJQUNELENBQUM7SUFBQSxnQkFSS3FJLGdCQUFnQkEsQ0FBQTtNQUFBLE9BQUFDLEtBQUEsQ0FBQXRHLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsR0FRckI7RUFFRCxJQUFNc0csTUFBTSxHQUFFLFNBQVJBLE1BQU1BLENBQUEsRUFBUTtJQUNuQixJQUFJL0YsTUFBTSxHQUFHLEVBQUU7SUFDZixJQUFNZ0csVUFBVSxHQUFHLGdFQUFnRTtJQUNuRixJQUFNQyxnQkFBZ0IsR0FBR0QsVUFBVSxDQUFDaEYsTUFBTTtJQUMxQyxJQUFJa0YsT0FBTyxHQUFHLENBQUM7SUFDZixPQUFPQSxPQUFPLEdBQUcsRUFBRSxFQUFFO01BQ25CbEcsTUFBTSxJQUFJZ0csVUFBVSxDQUFDRyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDLEdBQUdMLGdCQUFnQixDQUFDLENBQUM7TUFDekVDLE9BQU8sSUFBSSxDQUFDO0lBQ2Q7SUFDQSxPQUFPbEcsTUFBTTtFQUNkLENBQUM7RUFFRCxJQUFNdUcsd0JBQXdCO0lBQUEsSUFBQUMsS0FBQSxPQUFBbkksa0JBQUEsQ0FBQWpJLE9BQUEsRUFBRyxhQUFZO01BQzVDK0csT0FBTyxDQUFDQyxHQUFHLENBQUM5QixTQUFTLEVBQUVJLFFBQVEsRUFBRSxPQUFPLENBQUM7TUFFekMsSUFBSUosU0FBUyxJQUFJLEVBQUUsSUFBSUksUUFBUSxJQUFFLEVBQUUsSUFBSTVCLE1BQU0sR0FBQyxDQUFDLEVBQUU7UUFFaEQsSUFBRzJNLFdBQVcsQ0FBQyxDQUFDLEVBQ2hCO1VBQ0MxTCxnQ0FBZ0MsQ0FBQyxLQUFLLENBQUM7VUFDdkMsSUFBTTJMLGFBQWEsR0FBR1gsTUFBTSxDQUFDLENBQUM7VUFDOUI1SSxPQUFPLENBQUNDLEdBQUcsQ0FBQ3NKLGFBQWEsRUFBRSxlQUFlLENBQUM7VUFDM0MsSUFBSUMsTUFBTSxxQkFBbUJqTCxRQUFRLFlBQU9KLFNBQVMsWUFBT29MLGFBQWEsWUFBTzVNLE1BQU0scUJBQWtCO1VBQ3hHLElBQU0ySCxRQUFRLFNBQVNqSyxHQUFHLENBQUNvUCxRQUFRLENBQUNELE1BQU0sQ0FBQztVQUMzQ3hKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE9BQU8sQ0FBQztVQUNwQkQsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxFQUFFcUUsUUFBUSxDQUFDO1VBQ3BDLElBQUlBLFFBQVEsQ0FBQ3FELFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNqQzNJLHFCQUFxQixDQUFDLElBQUksQ0FBQztVQUM1QjtRQUNELENBQUMsTUFDRztVQUNIcUIsS0FBSyxDQUFDLDZCQUE2QixDQUFDO1FBQ3JDO1FBRUF6QyxnQ0FBZ0MsQ0FBQyxLQUFLLENBQUM7TUFDeEMsQ0FBQyxNQUNJO1FBQ0p5QyxLQUFLLENBQUMsb0NBQW9DLENBQUM7TUFDNUM7SUFDRCxDQUFDO0lBQUEsZ0JBM0JLK0ksd0JBQXdCQSxDQUFBO01BQUEsT0FBQUMsS0FBQSxDQUFBaEgsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxHQTJCN0I7RUFDRCxJQUFNb0gsTUFBTSxHQUFHLFNBQVRBLE1BQU1BLENBQUEsRUFBUztJQUNwQixJQUFHL00sTUFBTSxHQUFDLENBQUMsRUFDWDtNQUNDaUMsWUFBWSxDQUFDLElBQUksQ0FBQztNQUNsQm9CLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFNBQVMsQ0FBQztNQUN0QmpDLHNCQUFzQixDQUFDLElBQUksQ0FBQztNQUM1QmdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDbEMsbUJBQW1CLENBQUM7SUFDakMsQ0FBQyxNQUNHO01BQ0hzQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7SUFDaEM7RUFDRCxDQUFDO0VBRUQsSUFBTWlKLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFJSyxHQUFHLEVBQUs7SUFDNUIsSUFBTUMsTUFBTSxHQUFHLG1EQUFtRDtJQUNsRTVKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDMkosTUFBTSxDQUFDQyxJQUFJLENBQUNGLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLE9BQU9DLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixHQUFHLENBQUM7RUFDeEIsQ0FBQztFQUVELElBQU1HLHVCQUF1QjtJQUFBLElBQUFDLEtBQUEsT0FBQTdJLGtCQUFBLENBQUFqSSxPQUFBLEVBQUcsV0FBTStRLElBQUksRUFBSTtNQUU3QyxJQUFNQyxPQUFPLEdBQUdELElBQUksQ0FBQ3JJLElBQUk7TUFDekIzQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVnSyxPQUFPLENBQUM7TUFDOUJqTSxzQkFBc0IsQ0FBQyxLQUFLLENBQUM7TUFDN0IsSUFBSXNHLFFBQVEsU0FBU2pLLEdBQUcsQ0FBQ29QLFFBQVEsQ0FBQ1MsTUFBTSxDQUFDRCxPQUFPLENBQUMsQ0FBQztNQUNsRGpLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsRUFBRXFFLFFBQVEsQ0FBQztNQUNwQyxJQUFJQSxRQUFRLENBQUNxRCxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDakMzSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7UUFDM0JxQixLQUFLLENBQUMseUJBQXlCLENBQUM7TUFDakMsQ0FBQyxNQUNHO1FBQ0hBLEtBQUssQ0FBQywyQkFBMkIsQ0FBQztNQUNuQztJQUNELENBQUM7SUFBQSxnQkFkS3lKLHVCQUF1QkEsQ0FBQUssRUFBQTtNQUFBLE9BQUFKLEtBQUEsQ0FBQTFILEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsR0FjNUI7RUFFRCxPQUNDLElBQUE3SixXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUE4UyxlQUFlO0lBQ2ZDLE1BQU0sRUFBRTlTLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBRTtJQUNoRCtTLEtBQUssRUFBRTtNQUFFclEsS0FBSyxFQUFFQSxLQUFLO01BQUVDLE1BQU0sRUFBRUEsTUFBTTtNQUFFcVEsU0FBUyxFQUFFNVAsTUFBTSxDQUFDNlA7SUFBSSxDQUFFO0lBQUFDLFFBQUEsR0FFL0QsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7TUFBQ0wsS0FBSyxFQUFFTSxNQUFNLENBQUNDLEtBQU07TUFBQUosUUFBQSxFQUFDO0lBQVcsQ0FBTSxDQUFDLEVBQzdDLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUF3VCxJQUFJO01BQUNSLEtBQUssRUFBRU0sTUFBTSxDQUFDRyxTQUFVO01BQUFOLFFBQUEsRUFDN0IsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXdULElBQUk7UUFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUNJLGFBQWM7UUFBQVAsUUFBQSxFQUNqQyxJQUFBalMsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBMlQsVUFBVTtVQUFDWCxLQUFLLEVBQUU7WUFBQ3BRLE1BQU0sRUFBQ0EsTUFBTSxHQUFHO1VBQUcsQ0FBRTtVQUFBdVEsUUFBQSxHQUN4QyxJQUFBalMsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBd1QsSUFBSTtZQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQ00sVUFBVztZQUFBVCxRQUFBLEdBQzlCLElBQUFqUyxXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUF3VCxJQUFJO2NBQUNSLEtBQUssRUFBRU0sTUFBTSxDQUFDTyxTQUFVO2NBQUFWLFFBQUEsR0FDN0IsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7Z0JBQUNMLEtBQUssRUFBRU0sTUFBTSxDQUFDUSxJQUFLO2dCQUFBWCxRQUFBLEVBQUM7Y0FBTyxDQUFNLENBQUMsRUFDeEMsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQStULFNBQVM7Z0JBQ1RDLFlBQVksRUFBQyxTQUFTO2dCQUN0QmhCLEtBQUssRUFBRU0sTUFBTSxDQUFDVyxTQUFVO2dCQUN4QkMsWUFBWSxFQUFFN087Y0FBVSxDQUN4QixDQUFDO1lBQUEsQ0FDRyxDQUFDLEVBRU5sQixVQUFVLElBQ1YsSUFBQWpELFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ2xULGVBQUEsQ0FBQXdCLE9BQWM7Y0FDZGdKLEtBQUssRUFBRTFGLElBQUs7Y0FDWm1QLElBQUksRUFBRSxNQUFPO2NBQ2JDLE9BQU8sRUFBRUMsUUFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLFNBQVMsR0FBRyxTQUFVO2NBQ3ZEQyxRQUFRLEVBQUUsSUFBSztjQUNmQyxRQUFRLEVBQUV2SixjQUFlO2NBQ3pCK0gsS0FBSyxFQUFFTSxNQUFNLENBQUNuUDtZQUFXLENBQ3pCLENBQ0QsRUFFRCxJQUFBakQsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBd1QsSUFBSTtjQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQ08sU0FBVTtjQUFBVixRQUFBLEdBQzdCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFxVCxJQUFJO2dCQUFDTCxLQUFLLEVBQUVNLE1BQU0sQ0FBQ1EsSUFBSztnQkFBQVgsUUFBQSxFQUFDO2NBQU0sQ0FBTSxDQUFDLEVBQ3RDLENBQUNoUCxVQUFVLElBQ1gsSUFBQWpELFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXdULElBQUk7Z0JBQUNSLEtBQUssRUFBRU0sTUFBTSxDQUFDVyxTQUFVO2dCQUFBZCxRQUFBLEVBQzdCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUF5VSxTQUFTO2tCQUFDekIsS0FBSyxFQUFFTSxNQUFNLENBQUNvQixVQUFXO2tCQUFDQyxPQUFPLEVBQUUzSixjQUFlO2tCQUFBbUksUUFBQSxFQUM1RCxJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBcVQsSUFBSTtvQkFBQUYsUUFBQSxFQUFFbk8sSUFBSSxDQUFDNFAsT0FBTyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUk1UCxJQUFJLENBQUNrSyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBR2xLLElBQUksQ0FBQ21LLFdBQVcsQ0FBQztrQkFBQyxDQUFPO2dCQUFDLENBQ2hGO2NBQUMsQ0FDUCxDQUNOO1lBQUEsQ0FDSSxDQUFDO1VBQUEsQ0FDRixDQUFDLEVBRVAsSUFBQWpPLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQXdULElBQUk7WUFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUNNLFVBQVc7WUFBQVQsUUFBQSxHQUM5QixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBcVQsSUFBSTtjQUFDTCxLQUFLLEVBQUVNLE1BQU0sQ0FBQ3VCLFVBQVc7Y0FBQTFCLFFBQUEsRUFBQztZQUFlLENBQU0sQ0FBQyxFQUN0RCxJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDNVMsMkJBQUEsQ0FBQXNVLFFBQVE7Y0FFUjlCLEtBQUssRUFBRU0sTUFBTSxDQUFDeUIsUUFBUztjQUN2QkMsZ0JBQWdCLEVBQUUxQixNQUFNLENBQUMwQixnQkFBaUI7Y0FDMUNDLGlCQUFpQixFQUFFM0IsTUFBTSxDQUFDMkIsaUJBQWtCO2NBQzVDQyxnQkFBZ0IsRUFBRTVCLE1BQU0sQ0FBQzRCLGdCQUFpQjtjQUMxQ0MsU0FBUyxFQUFFN0IsTUFBTSxDQUFDNkIsU0FBVTtjQUM1Qi9LLElBQUksRUFBRXpHLFFBQVM7Y0FDZnlSLE1BQU07Y0FDTkMsU0FBUyxFQUFFLEdBQUk7Y0FDZkMsVUFBVSxFQUFDLE9BQU87Y0FDbEJDLFVBQVUsRUFBQyxPQUFPO2NBQ2xCQyxXQUFXLEVBQUMsVUFBVTtjQUN0QkMsaUJBQWlCLEVBQUMsV0FBVztjQUM3Qi9LLEtBQUssRUFBRTFFLGdCQUFpQjtjQUN4QndPLFFBQVEsRUFBRSxTQUFBQSxTQUFDakssSUFBSSxFQUFLO2dCQUNuQixJQUFJQSxJQUFJLENBQUNHLEtBQUssSUFBSSxPQUFPLEVBQUV6RSxtQkFBbUIsQ0FBQ3NFLElBQUksQ0FBQ0csS0FBSyxDQUFDLENBQUMsS0FDdEQ7a0JBQ0psRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7Z0JBQzlCO2NBQ0Q7WUFBRSxDQUVGLENBQUM7VUFBQSxDQUNHLENBQUMsRUFDUCxJQUFBdEQsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBMFYsS0FBSztZQUNMQyxhQUFhLEVBQUMsT0FBTztZQUNyQkMsV0FBVztZQUNYQyxPQUFPLEVBQUV0UixpQkFBa0I7WUFDM0J1UixpQkFBaUIsRUFBQyxnQkFBZ0I7WUFDbENDLFNBQVMsRUFBRSxTQUFBQSxVQUFBLEVBQU07Y0FDaEJ2Uix1QkFBdUIsQ0FBQyxDQUFDRCxpQkFBaUIsQ0FBQztZQUM1QyxDQUFFO1lBQUE0TyxRQUFBLEVBRUYsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXdULElBQUk7Y0FBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUMwQyxXQUFZO2NBQUE3QyxRQUFBLEVBQy9CLElBQUFqUyxXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUF3VCxJQUFJO2dCQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQzJDLFNBQVU7Z0JBQUE5QyxRQUFBLEdBQzdCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUErVCxTQUFTO2tCQUNUeUIsV0FBVyxFQUFDLGdCQUFnQjtrQkFDNUJ4QyxLQUFLLEVBQUVNLE1BQU0sQ0FBQzRDLFNBQVU7a0JBQ3hCaEMsWUFBWSxFQUFFLFNBQUFBLGFBQUN4SixLQUFLLEVBQUs7b0JBQ3hCekUsbUJBQW1CLENBQUN5RSxLQUFLLENBQUM7a0JBQzNCO2dCQUFFLENBQ0YsQ0FBQyxFQUdGLElBQUF4SixXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFtVyxNQUFNO2tCQUNOQyxLQUFLLEVBQUMsY0FBYztrQkFDcEJ6QixPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFNO29CQUNkblEsdUJBQXVCLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUM7b0JBQzNDWCxXQUFXLElBQUF5UyxNQUFBLEtBQUFDLG1CQUFBLENBQUE1VSxPQUFBLEVBQ1BpQyxRQUFRLElBQ1g7c0JBQUU4RyxLQUFLLEVBQUV6RSxnQkFBZ0I7c0JBQUUwRSxLQUFLLEVBQUUxRTtvQkFBaUIsQ0FBQyxFQUNwRCxDQUFDO2tCQUVIO2dCQUFFLENBQ0YsQ0FBQztjQUFBLENBQ0c7WUFBQyxDQUNGO1VBQUMsQ0FDRCxDQUFDLEVBRVIsSUFBQTlFLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQXdULElBQUk7WUFBQ1IsS0FBSyxFQUFFLENBQUNNLE1BQU0sQ0FBQ2lELGVBQWUsRUFBRWpELE1BQU0sQ0FBQ00sVUFBVSxDQUFFO1lBQUFULFFBQUEsR0FDeEQsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7Y0FBQ0wsS0FBSyxFQUFFTSxNQUFNLENBQUNrRCxVQUFXO2NBQUFyRCxRQUFBLEVBQUM7WUFBZ0IsQ0FBTSxDQUFDLEVBQ3ZELElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUF5VyxNQUFNO2NBQ05DLFVBQVUsRUFBRTtnQkFBRUMsS0FBSyxFQUFFLFNBQVM7Z0JBQUVDLElBQUksRUFBRTtjQUFhLENBQUU7Y0FDckRDLFVBQVUsRUFBRXpPLFNBQVMsR0FBRyxPQUFPLEdBQUcsT0FBUTtjQUMxQzBPLGFBQWEsRUFBRSxTQUFBQSxjQUFDdk8sR0FBRztnQkFBQSxPQUFLRCxZQUFZLENBQUNDLEdBQUcsQ0FBQztjQUFBLENBQUM7Y0FDMUNtQyxLQUFLLEVBQUV0QztZQUFVLENBQ2pCLENBQUM7VUFBQSxDQUNHLENBQUMsRUFHUCxJQUFBbEgsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBd1QsSUFBSTtZQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQ3lELFVBQVc7WUFBQTVELFFBQUEsR0FDOUIsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7Y0FBQ0wsS0FBSyxFQUFFTSxNQUFNLENBQUNRLElBQUs7Y0FBQVgsUUFBQSxFQUFDO1lBQWtCLENBQU0sQ0FBQyxFQUNuRCxJQUFBalMsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBd1QsSUFBSTtjQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQzBELG1CQUFvQjtjQUFBN0QsUUFBQSxHQUN2QyxJQUFBalMsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBaVgsZ0JBQWdCO2dCQUNoQkMsUUFBUSxFQUFFMVAsa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEtBQU07Z0JBQzVDbU4sT0FBTyxFQUFFeEQsZ0JBQWlCO2dCQUMxQjZCLEtBQUssRUFBRU0sTUFBTSxDQUFDNkQsY0FBZTtnQkFBQWhFLFFBQUEsR0FFN0IsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQWtKLEtBQUs7a0JBQUM2SixNQUFNLEVBQUU5UyxPQUFPLENBQUMsd0JBQXdCLENBQUU7a0JBQUMrUyxLQUFLLEVBQUU7b0JBQUVyUSxLQUFLLEVBQUUsRUFBRTtvQkFBRUMsTUFBTSxFQUFFLEVBQUU7b0JBQUV3VSxTQUFTLEVBQUU7a0JBQVM7Z0JBQUUsQ0FBRSxDQUFDLEVBQzNHLElBQUFsVyxXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUFxVCxJQUFJO2tCQUFDTCxLQUFLLEVBQUU7b0JBQUVxRSxTQUFTLEVBQUUsUUFBUTtvQkFBRUMsS0FBSyxFQUFFO2tCQUFRLENBQUU7a0JBQUFuRSxRQUFBLEdBQ25ELEdBQUcsRUFBQyxjQUNPLEVBQUMsR0FBRztnQkFBQSxDQUNYLENBQUM7Y0FBQSxDQUNVLENBQUMsRUFDbkIsSUFBQWpTLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQWlYLGdCQUFnQjtnQkFDaEJDLFFBQVEsRUFBRTFQLGtCQUFrQixHQUFHLElBQUksR0FBRyxLQUFNO2dCQUM1Q21OLE9BQU8sRUFBRXhDLE1BQU87Z0JBQ2hCYSxLQUFLLEVBQUVNLE1BQU0sQ0FBQzZELGNBQWU7Z0JBQUFoRSxRQUFBLEdBRTdCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFrSixLQUFLO2tCQUFDNkosTUFBTSxFQUFFOVMsT0FBTyxDQUFDLHVCQUF1QixDQUFFO2tCQUFDK1MsS0FBSyxFQUFFO29CQUFFclEsS0FBSyxFQUFFLEVBQUU7b0JBQUVDLE1BQU0sRUFBRSxFQUFFO29CQUFFd1UsU0FBUyxFQUFFO2tCQUFTO2dCQUFFLENBQUUsQ0FBQyxFQUMxRyxJQUFBbFcsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBcVQsSUFBSTtrQkFBQ0wsS0FBSyxFQUFFO29CQUFFcUUsU0FBUyxFQUFFLFFBQVE7b0JBQUVDLEtBQUssRUFBRTtrQkFBUSxDQUFFO2tCQUFBbkUsUUFBQSxHQUNuRCxHQUFHLEVBQUMsU0FDRSxFQUFDLEdBQUc7Z0JBQUEsQ0FDTixDQUFDO2NBQUEsQ0FDVSxDQUFDO1lBQUEsQ0FDZCxDQUFDLEVBRVAsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQTBWLEtBQUs7Y0FDTEMsYUFBYSxFQUFDLE9BQU87Y0FDckJDLFdBQVc7Y0FDWEMsT0FBTyxFQUFFelAsNkJBQThCO2NBQ3ZDMFAsaUJBQWlCLEVBQUMsZ0JBQWdCO2NBQ2xDQyxTQUFTLEVBQUUsU0FBQUEsVUFBQSxFQUFNO2dCQUNoQjFQLGdDQUFnQyxDQUFDLEtBQUssQ0FBQztjQUN4QyxDQUFFO2NBQ0YyTSxLQUFLLEVBQUU7Z0JBQ051RSxPQUFPLEVBQUUsR0FBRztnQkFDWkMsZUFBZSxFQUFFO2NBQ2xCLENBQUU7Y0FBQXJFLFFBQUEsRUFDRixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBd1QsSUFBSTtnQkFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUMwQyxXQUFZO2dCQUFBN0MsUUFBQSxFQUMvQixJQUFBalMsV0FBQSxDQUFBMlIsSUFBQSxFQUFDN1MsWUFBQSxDQUFBd1QsSUFBSTtrQkFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUMyQyxTQUFVO2tCQUFBOUMsUUFBQSxHQUM3QixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBK1QsU0FBUztvQkFDVHlCLFdBQVcsRUFBQyx3QkFBd0I7b0JBQ3BDeEMsS0FBSyxFQUFFTSxNQUFNLENBQUM0QyxTQUFVO29CQUN4QmhDLFlBQVksRUFBRSxTQUFBQSxhQUFBeEosS0FBSyxFQUFJO3NCQUN0QjdELFlBQVksQ0FBQzZELEtBQUssQ0FBQztvQkFDcEI7a0JBQUUsQ0FDRixDQUFDLEVBQ0YsSUFBQXhKLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQStULFNBQVM7b0JBQ1R5QixXQUFXLEVBQUMsMkNBQTJDO29CQUN2RHhDLEtBQUssRUFBRU0sTUFBTSxDQUFDNEMsU0FBVTtvQkFDeEJoQyxZQUFZLEVBQUUsU0FBQUEsYUFBQXhKLEtBQUssRUFBSTtzQkFDdEJ6RCxXQUFXLENBQUN5RCxLQUFLLENBQUM7b0JBQ25CO2tCQUFFLENBQ0YsQ0FBQyxFQUNGLElBQUF4SixXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUF3VCxJQUFJO29CQUFDUixLQUFLLEVBQUU7c0JBQUV5RSxhQUFhLEVBQUU7b0JBQU0sQ0FBRTtvQkFBQXRFLFFBQUEsR0FDckMsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQWlYLGdCQUFnQjtzQkFDaEJ0QyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFNO3dCQUNkbE0sT0FBTyxDQUFDQyxHQUFHLENBQUMsUUFBUSxDQUFDO3dCQUNyQm1KLHdCQUF3QixDQUFDLENBQUM7c0JBQzNCLENBQUU7c0JBQ0ZtQixLQUFLLEVBQUU7d0JBQ053RSxlQUFlLEVBQUVFLG9CQUFTO3dCQUMxQkMsTUFBTSxFQUFHLEVBQUU7d0JBQ1hKLE9BQU8sRUFBRyxFQUFFO3dCQUNaSyxZQUFZLEVBQUc7c0JBQ2hCLENBQUU7c0JBQUF6RSxRQUFBLEVBRUYsSUFBQWpTLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQXFULElBQUk7d0JBQ0pMLEtBQUssRUFBRTswQkFDTnNFLEtBQUssRUFBRSxPQUFPOzBCQUNkTyxRQUFRLEVBQUUsRUFBRTswQkFDWkMsVUFBVSxFQUFFO3dCQUViLENBQUU7d0JBQUEzRSxRQUFBLEdBQ0QsR0FBRyxFQUFDLFFBQ0MsRUFBQyxHQUFHO3NCQUFBLENBQ0w7b0JBQUMsQ0FDVSxDQUFDLEVBQ25CLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFpWCxnQkFBZ0I7c0JBQ2hCdEMsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTt3QkFDZGxNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE9BQU8sQ0FBQzt3QkFDcEJyQyxnQ0FBZ0MsQ0FBQyxLQUFLLENBQUM7c0JBQ3hDLENBQUU7c0JBQ0YyTSxLQUFLLEVBQUU7d0JBQ053RSxlQUFlLEVBQUVFLG9CQUFTO3dCQUMxQkMsTUFBTSxFQUFHLEVBQUU7d0JBQ1hKLE9BQU8sRUFBRyxFQUFFO3dCQUNaSyxZQUFZLEVBQUc7c0JBQ2hCLENBQUU7c0JBQUF6RSxRQUFBLEVBRUYsSUFBQWpTLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQXFULElBQUk7d0JBQ0pMLEtBQUssRUFBRTswQkFDTnNFLEtBQUssRUFBRSxPQUFPOzBCQUNkTyxRQUFRLEVBQUUsRUFBRTswQkFDWkMsVUFBVSxFQUFFO3dCQUNiLENBQUU7d0JBQUEzRSxRQUFBLEdBQ0QsR0FBRyxFQUFDLE9BQ0EsRUFBQyxHQUFHO3NCQUFBLENBQ0o7b0JBQUMsQ0FDVSxDQUFDO2tCQUFBLENBQ2QsQ0FBQztnQkFBQSxDQUNGO2NBQUMsQ0FDRjtZQUFDLENBQ0QsQ0FBQyxFQUdSLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUEwVixLQUFLO2NBQ0xDLGFBQWEsRUFBQyxPQUFPO2NBQ3JCQyxXQUFXLEVBQUUsSUFBSztjQUNsQkMsT0FBTyxFQUFFclAsbUJBQW9CO2NBQzdCc1AsaUJBQWlCLEVBQUMsZ0JBQWdCO2NBQ2xDQyxTQUFTLEVBQUUsU0FBQUEsVUFBQSxFQUFNO2dCQUNoQnRQLHNCQUFzQixDQUFDLEtBQUssQ0FBQztjQUM5QixDQUFFO2NBQ0Z1TSxLQUFLLEVBQUU7Z0JBQ051RSxPQUFPLEVBQUUsQ0FBQztnQkFDVkMsZUFBZSxFQUFFO2NBQ2xCLENBQUU7Y0FBQXJFLFFBQUEsRUFDRixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBd1QsSUFBSTtnQkFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUMwQyxXQUFZO2dCQUFBN0MsUUFBQSxFQUM5QixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDclMseUJBQUEsQ0FBQVcsT0FBYTtrQkFDYnFXLE1BQU0sRUFBRXhGLHVCQUF3QjtrQkFFaEN5RixVQUFVLEVBQ1QsSUFBQTlXLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7b0JBQUNMLEtBQUssRUFBRU0sTUFBTSxDQUFDMkUsVUFBVztvQkFBQTlFLFFBQUEsRUFBQztrQkFFaEMsQ0FBTSxDQUNKO2tCQUNIK0UsYUFBYSxFQUNaLElBQUFoWCxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFpWCxnQkFBZ0I7b0JBQ2hCdEMsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTtzQkFDZGxNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE9BQU8sQ0FBQztzQkFDcEJqQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUM7b0JBQzlCLENBQUU7b0JBQ0Z1TSxLQUFLLEVBQUU7c0JBQ053RSxlQUFlLEVBQUUsT0FBTztzQkFDeEI3VSxLQUFLLEVBQUcsTUFBTTtzQkFDZDBVLFNBQVMsRUFBRztvQkFDYixDQUFFO29CQUFBbEUsUUFBQSxFQUVGLElBQUFqUyxXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUFxVCxJQUFJO3NCQUNKTCxLQUFLLEVBQUU7d0JBQ05zRSxLQUFLLEVBQUUsT0FBTzt3QkFDZE8sUUFBUSxFQUFFLEVBQUU7d0JBQ1pOLE9BQU8sRUFBRSxFQUFFO3dCQUNYTyxVQUFVLEVBQUUsTUFBTTt3QkFDbEJULFNBQVMsRUFBRztzQkFDYixDQUFFO3NCQUFBbEUsUUFBQSxHQUNELEdBQUcsRUFBQyxPQUNBLEVBQUMsR0FBRztvQkFBQSxDQUNKO2tCQUFDLENBQ1U7Z0JBQ2xCLENBQ0Q7Y0FBQyxDQUdFO1lBQUMsQ0FDRCxDQUFDO1VBQUEsQ0FDSCxDQUFDLEVBQ1AsSUFBQWpTLFdBQUEsQ0FBQTJSLElBQUEsRUFBQzdTLFlBQUEsQ0FBQXdULElBQUk7WUFBQ1IsS0FBSyxFQUFFTSxNQUFNLENBQUN5RCxVQUFXO1lBQUE1RCxRQUFBLEdBQzlCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFxVCxJQUFJO2NBQUNMLEtBQUssRUFBRU0sTUFBTSxDQUFDUSxJQUFLO2NBQUFYLFFBQUEsRUFBQztZQUFRLENBQU0sQ0FBQyxFQUN6QyxJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBK1QsU0FBUztjQUNUeUIsV0FBVyxFQUFDLGFBQWE7Y0FDekJ4QyxLQUFLLEVBQUVNLE1BQU0sQ0FBQzZFLE1BQU87Y0FDckJqRSxZQUFZLEVBQUUsU0FBQUEsYUFBQ3hKLEtBQUssRUFBSztnQkFDeEJqRixjQUFjLENBQUNpRixLQUFLLENBQUM7Y0FDdEI7WUFBRSxDQUNGLENBQUMsRUFDRixJQUFBeEosV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBcVQsSUFBSTtjQUFDTCxLQUFLLEVBQUVNLE1BQU0sQ0FBQ3VCLFVBQVc7Y0FBQTFCLFFBQUEsRUFBQztZQUFTLENBQU0sQ0FBQyxFQUVoRCxJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBMFYsS0FBSztjQUNMQyxhQUFhLEVBQUMsT0FBTztjQUNyQkMsV0FBVztjQUNYQyxPQUFPLEVBQUVsUixpQkFBa0I7Y0FDM0JtUixpQkFBaUIsRUFBQyxnQkFBZ0I7Y0FDbENDLFNBQVMsRUFBRSxTQUFBQSxVQUFBLEVBQU07Z0JBQ2hCdlIsdUJBQXVCLENBQUMsQ0FBQ0csaUJBQWlCLENBQUM7Y0FDNUMsQ0FBRTtjQUFBd08sUUFBQSxFQUVGLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUF3VCxJQUFJO2dCQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQzBDLFdBQVk7Z0JBQUE3QyxRQUFBLEVBQy9CLElBQUFqUyxXQUFBLENBQUEyUixJQUFBLEVBQUM3UyxZQUFBLENBQUF3VCxJQUFJO2tCQUFDUixLQUFLLEVBQUVNLE1BQU0sQ0FBQzJDLFNBQVU7a0JBQUE5QyxRQUFBLEdBQzdCLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFpWCxnQkFBZ0I7b0JBQUN0QyxPQUFPLEVBQUV4SixlQUFnQjtvQkFBQzZILEtBQUssRUFBRU0sTUFBTSxDQUFDOEUsTUFBTztvQkFBQWpGLFFBQUEsRUFDaEUsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7c0JBQUNMLEtBQUssRUFBRTt3QkFBRXNFLEtBQUssRUFBRSxPQUFPO3dCQUFFTyxRQUFRLEVBQUUsRUFBRTt3QkFBRUMsVUFBVSxFQUFFO3NCQUFPLENBQUU7c0JBQUEzRSxRQUFBLEVBQUM7b0JBQWMsQ0FBTTtrQkFBQyxDQUN2RSxDQUFDLEVBRW5CLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFpWCxnQkFBZ0I7b0JBQUN0QyxPQUFPLEVBQUVsSixVQUFXO29CQUFDdUgsS0FBSyxFQUFFTSxNQUFNLENBQUM4RSxNQUFPO29CQUFBakYsUUFBQSxFQUMzRCxJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBcVQsSUFBSTtzQkFBQ0wsS0FBSyxFQUFFO3dCQUFFc0UsS0FBSyxFQUFFLE9BQU87d0JBQUVPLFFBQVEsRUFBRSxFQUFFO3dCQUFFQyxVQUFVLEVBQUU7c0JBQU8sQ0FBRTtzQkFBQTNFLFFBQUEsRUFBQztvQkFBWSxDQUFNO2tCQUFDLENBQ3JFLENBQUMsRUFFbkIsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQWlYLGdCQUFnQjtvQkFBQ3RDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQU07c0JBQ2hDL1AsdUJBQXVCLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUM7b0JBQzVDLENBQUU7b0JBQUF3TyxRQUFBLEVBQ0QsSUFBQWpTLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQXFULElBQUk7c0JBQUNMLEtBQUssRUFBRTt3QkFBRXNFLEtBQUssRUFBRUksb0JBQVM7d0JBQUVHLFFBQVEsRUFBRSxFQUFFO3dCQUFFNUUsU0FBUyxFQUFFO3NCQUFHLENBQUU7c0JBQUFFLFFBQUEsRUFBQztvQkFBTyxDQUFNO2tCQUFDLENBQzdELENBQUM7Z0JBQUEsQ0FDZDtjQUFDLENBQ0Y7WUFBQyxDQUNELENBQUMsRUFDUixJQUFBalMsV0FBQSxDQUFBa1MsR0FBQSxFQUFDcFQsWUFBQSxDQUFBaVgsZ0JBQWdCO2NBQ2hCdEMsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTtnQkFDZGxNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsQ0FBQztnQkFDNUI5RCx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7Y0FDOUIsQ0FBRTtjQUFBdU8sUUFBQSxFQUVENUosZUFBZSxLQUFLLEVBQUUsSUFDdEIsSUFBQXJJLFdBQUEsQ0FBQWtTLEdBQUEsRUFBQ3BULFlBQUEsQ0FBQWtKLEtBQUs7Z0JBQ0w2SixNQUFNLEVBQUU7a0JBQUUxSixHQUFHLEVBQUVFO2dCQUFnQixDQUFFO2dCQUNqQ3lKLEtBQUssRUFBRTtrQkFBRXJRLEtBQUssRUFBRSxFQUFFO2tCQUFFQyxNQUFNLEVBQUUsRUFBRTtrQkFBRStVLE1BQU0sRUFBRSxFQUFFO2tCQUFFUCxTQUFTLEVBQUU7Z0JBQVMsQ0FBRTtnQkFDbEV6QyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFNO2tCQUNkbE0sT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxDQUFDO2tCQUM1QjlELHVCQUF1QixDQUFDLElBQUksQ0FBQztnQkFDOUI7Y0FBRSxDQUNGO1lBQ0QsQ0FDZ0IsQ0FBQztVQUFBLENBQ2QsQ0FBQyxFQUdQLElBQUExRCxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFpWCxnQkFBZ0I7WUFDaEJ0QyxPQUFPLEVBQUVoSixXQUFZO1lBQ3JCcUgsS0FBSyxFQUFFO2NBQ053RSxlQUFlLEVBQUVFLG9CQUFTO2NBQzFCRSxZQUFZLEVBQUUsR0FBRztjQUNqQlMsVUFBVSxFQUFFLFFBQVE7Y0FDcEIxVixLQUFLLEVBQUUsR0FBRztjQUNWMlYsZUFBZSxFQUFFLENBQUM7Y0FDbEJDLGNBQWMsRUFBRSxFQUFFO2NBQ2xCbkIsU0FBUyxFQUFFO1lBQ1osQ0FBRTtZQUFBakUsUUFBQSxFQUNGLElBQUFqUyxXQUFBLENBQUFrUyxHQUFBLEVBQUNwVCxZQUFBLENBQUFxVCxJQUFJO2NBQUNMLEtBQUssRUFBRTtnQkFBRXNFLEtBQUssRUFBRSxPQUFPO2dCQUFFTyxRQUFRLEVBQUUsRUFBRTtnQkFBRUMsVUFBVSxFQUFFLE1BQU07Z0JBQUVILE1BQU0sRUFBRTtjQUFFLENBQUU7Y0FBQXhFLFFBQUEsRUFBQztZQUFNLENBQU07VUFBQyxDQUMxRSxDQUFDO1FBQUEsQ0FFUjtNQUFDLENBQ1I7SUFBQyxDQUNGLENBQUM7RUFBQSxDQUNTLENBQUM7QUFFcEI7QUFFQSxJQUFNRyxNQUFNLEdBQUdrRix1QkFBVSxDQUFDQyxNQUFNLENBQUM7RUFDaENoRixTQUFTLEVBQUU7SUFDVmlGLG1CQUFtQixFQUFFLEVBQUU7SUFDdkJDLG9CQUFvQixFQUFFLEVBQUU7SUFDeEIvVixNQUFNLEVBQUVBLE1BQU0sR0FBRyxHQUFHO0lBQ3BCRCxLQUFLLEVBQUVBLEtBQUs7SUFDWjZVLGVBQWUsRUFBRSxNQUFNO0lBQ3ZCdkUsU0FBUyxFQUFFO0VBQ1osQ0FBQztFQUVEUyxhQUFhLEVBQUU7SUFDZDZELE9BQU8sRUFBRSxFQUFFO0lBQ1hxQixJQUFJLEVBQUUsQ0FBQztJQUNQaFcsTUFBTSxFQUFFLE1BQU07SUFDZGlXLGNBQWMsRUFBRTtFQUNqQixDQUFDO0VBRURqRixVQUFVLEVBQUU7SUFDWGpSLEtBQUssRUFBRSxNQUFNO0lBQ2J5VSxTQUFTLEVBQUUsUUFBUTtJQUNuQlEsWUFBWSxFQUFFLEVBQUU7SUFDaEJrQixhQUFhLEVBQUUsR0FBRztJQUNsQkMsV0FBVyxFQUFFLE9BQU87SUFDcEJDLFlBQVksRUFBRTtNQUNicFcsTUFBTSxFQUFFLENBQUM7TUFDVEQsS0FBSyxFQUFFO0lBQ1IsQ0FBQztJQUNEc1csU0FBUyxFQUFFLENBQUM7SUFDWnpCLGVBQWUsRUFBRSxPQUFPO0lBQ3hCdkUsU0FBUyxFQUFFO0VBQ1osQ0FBQztFQUVEOEQsVUFBVSxFQUFFO0lBQ1hwVSxLQUFLLEVBQUUsTUFBTTtJQUNieVUsU0FBUyxFQUFFLFFBQVE7SUFDbkJRLFlBQVksRUFBRSxFQUFFO0lBQ2hCa0IsYUFBYSxFQUFFLEdBQUc7SUFDbEJDLFdBQVcsRUFBRSxPQUFPO0lBQ3BCQyxZQUFZLEVBQUUsQ0FHZCxDQUFDO0lBRURDLFNBQVMsRUFBRSxDQUFDO0lBQ1p6QixlQUFlLEVBQUUsT0FBTztJQUN4QnZFLFNBQVMsRUFBRSxFQUFFO0lBQ2JpRyxVQUFVLEVBQUUsQ0FBQztJQUNiQyxXQUFXLEVBQUUsRUFBRTtJQUNmQyxZQUFZLEVBQUU7RUFDZixDQUFDO0VBQ0RwQyxtQkFBbUIsRUFBRTtJQUNwQlMsYUFBYSxFQUFFLEtBQUs7SUFDcEI0QixhQUFhLEVBQUUsRUFBRTtJQUNqQkgsVUFBVSxFQUFFLEVBQUU7SUFDZEwsY0FBYyxFQUFFO0VBQ2pCLENBQUM7RUFDRDFCLGNBQWMsRUFBRTtJQUNmSSxPQUFPLEVBQUUsRUFBRTtJQUNYK0IsUUFBUSxFQUFFLENBQUM7SUFDWEMsVUFBVSxFQUFFLENBQUM7SUFDYkMsU0FBUyxFQUFFLEdBQUc7SUFDZDVCLFlBQVksRUFBRSxFQUFFO0lBQ2hCSixlQUFlLEVBQUUsU0FBUztJQUMxQkYsS0FBSyxFQUFFLE9BQU87SUFDZDNVLEtBQUssRUFBRSxHQUFHO0lBQ1ZnVixNQUFNLEVBQUU7RUFDVCxDQUFDO0VBQ0RwRSxLQUFLLEVBQUU7SUFDTitELEtBQUssRUFBRSxPQUFPO0lBQ2RPLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxNQUFNO0lBQ2xCUyxjQUFjLEVBQUUsRUFBRTtJQUNsQm5CLFNBQVMsRUFBRTtFQUNaLENBQUM7RUFHRHZELFNBQVMsRUFBRTtJQUNWNEQsYUFBYSxFQUFFLEtBQUs7SUFDcEJvQixjQUFjLEVBQUUsZUFBZTtJQUMvQnRCLE9BQU8sRUFBRTtFQUNWLENBQUM7RUFFRHpELElBQUksRUFBRTtJQUVMZ0UsVUFBVSxFQUFFLE1BQU07SUFDbEJELFFBQVEsRUFBRSxFQUFFO0lBQ1pQLEtBQUssRUFBRUk7RUFDUixDQUFDO0VBRUR6RCxTQUFTLEVBQUU7SUFDVnNELE9BQU8sRUFBRyxDQUFDO0lBQ1hLLFlBQVksRUFBRSxDQUFDO0lBQ2ZOLEtBQUssRUFBRUksb0JBQVM7SUFDaEIrQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCOVcsS0FBSyxFQUFFLEtBQUs7SUFDWkMsTUFBTSxFQUFFLEVBQUU7SUFDVjRVLGVBQWUsRUFBRTtFQUNsQixDQUFDO0VBR0RrQyxLQUFLLEVBQUU7SUFDTjlCLFlBQVksRUFBRSxDQUFDO0lBQ2ZOLEtBQUssRUFBRUksb0JBQVM7SUFDaEIrQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCOVcsS0FBSyxFQUFFLEtBQUs7SUFDWkMsTUFBTSxFQUFFLEVBQUU7SUFDVjRVLGVBQWUsRUFBRSxtQkFBbUI7SUFDcENxQixjQUFjLEVBQUU7RUFDakIsQ0FBQztFQUVEVixNQUFNLEVBQUU7SUFDUHdCLFdBQVcsRUFBRSxDQUFDO0lBQ2RDLFdBQVcsRUFBRSxNQUFNO0lBQ25CaEMsWUFBWSxFQUFFLEVBQUU7SUFDaEJMLE9BQU8sRUFBRSxFQUFFO0lBQ1g1VSxLQUFLLEVBQUUsTUFBTTtJQUNiQyxNQUFNLEVBQUUsRUFBRTtJQUNWcVEsU0FBUyxFQUFFLEVBQUU7SUFDYjRHLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCekMsU0FBUyxFQUFFO0VBQ1osQ0FBQztFQUVEeEMsVUFBVSxFQUFFO0lBQ1g1QixTQUFTLEVBQUUsRUFBRTtJQUNiNkUsVUFBVSxFQUFFLE1BQU07SUFDbEJWLFNBQVMsRUFBRSxRQUFRO0lBQ25CRSxLQUFLLEVBQUVJLG9CQUFTO0lBQ2hCRyxRQUFRLEVBQUU7RUFDWCxDQUFDO0VBRUQ3UyxJQUFJLEVBQUU7SUFDTHlTLGFBQWEsRUFBRSxLQUFLO0lBQ3BCb0IsY0FBYyxFQUFFO0VBQ2pCLENBQUM7RUFDRGtCLEtBQUssRUFBRTtJQUNOOUcsU0FBUyxFQUFFLEVBQUU7SUFDYjZFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCVixTQUFTLEVBQUUsUUFBUTtJQUNuQkUsS0FBSyxFQUFFSSxvQkFBUztJQUNoQkcsUUFBUSxFQUFFO0VBQ1gsQ0FBQztFQUVEbUMsYUFBYSxFQUFFO0lBQ2RyWCxLQUFLLEVBQUUsS0FBSztJQUNaNlUsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQ0QsT0FBTyxFQUFFLENBQUM7SUFDVkgsU0FBUyxFQUFFLFFBQVE7SUFDbkJRLFlBQVksRUFBRSxDQUFDO0lBQ2ZpQixjQUFjLEVBQUUsZUFBZTtJQUMvQlIsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUVENEIsWUFBWSxFQUFFO0lBQ2JDLFVBQVUsRUFBRTtFQUNiLENBQUM7RUFFREMsS0FBSyxFQUFFO0lBQ050QixjQUFjLEVBQUUsUUFBUTtJQUN4QlIsVUFBVSxFQUFFLFFBQVE7SUFDcEJiLGVBQWUsRUFBRSxPQUFPO0lBQ3hCNVUsTUFBTSxFQUFFLEdBQUc7SUFDWEQsS0FBSyxFQUFFLEtBQUs7SUFDWmlWLFlBQVksRUFBRSxFQUFFO0lBQ2hCK0IsV0FBVyxFQUFFLENBQUM7SUFDZEMsV0FBVyxFQUFFLE1BQU07SUFDbkIzRyxTQUFTLEVBQUUsRUFBRTtJQUNibUgsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUlEcEUsV0FBVyxFQUFFO0lBQ1o0QyxJQUFJLEVBQUUsQ0FBQztJQUNQUCxVQUFVLEVBQUUsUUFBUTtJQUNwQlEsY0FBYyxFQUFFLFFBQVE7SUFDeEJyQixlQUFlLEVBQUU7RUFDbEIsQ0FBQztFQUVEdkIsU0FBUyxFQUFFO0lBQ1ZvQyxVQUFVLEVBQUUsUUFBUTtJQUNwQlEsY0FBYyxFQUFFLFFBQVE7SUFDeEJ3QixRQUFRLEVBQUUsVUFBVTtJQUNwQm5ILEdBQUcsRUFBRSxLQUFLO0lBQ1ZvSCxJQUFJLEVBQUUsS0FBSztJQUNYckIsU0FBUyxFQUFFLENBQUM7SUFDWnNCLFNBQVMsRUFBRSxDQUFDO01BQUVDLFVBQVUsRUFBRSxFQUFFN1gsS0FBSyxHQUFHLEdBQUc7SUFBRSxDQUFDLEVBQUU7TUFBRThYLFVBQVUsRUFBRSxDQUFDO0lBQUcsQ0FBQyxDQUFDO0lBQ2hFN1gsTUFBTSxFQUFFLEdBQUc7SUFDWEQsS0FBSyxFQUFFQSxLQUFLLEdBQUcsR0FBRztJQUNsQjZVLGVBQWUsRUFBRSxNQUFNO0lBQ3ZCSSxZQUFZLEVBQUU7RUFDZixDQUFDO0VBRURLLFVBQVUsRUFBRTtJQUNYSixRQUFRLEVBQUUsRUFBRTtJQUNaTixPQUFPLEVBQUUsRUFBRTtJQUNYTyxVQUFVLEVBQUUsTUFBTTtJQUNsQm5WLEtBQUssRUFBRSxNQUFNO0lBQ2I2VSxlQUFlLEVBQUUsd0JBQXdCO0lBQ3pDSCxTQUFTLEVBQUU7RUFDWixDQUFDO0VBRURuQixTQUFTLEVBQUU7SUFDVnZULEtBQUssRUFBRSxLQUFLO0lBQ1ppVixZQUFZLEVBQUUsQ0FBQztJQUNmVSxlQUFlLEVBQUUsQ0FBQztJQUNsQm1CLGlCQUFpQixFQUFFLEVBQUU7SUFDckJHLFdBQVcsRUFBRSxvQkFBb0I7SUFDakNELFdBQVcsRUFBRSxDQUFDO0lBQ2RFLFlBQVksRUFBRSxDQUFDO0lBQ2ZyQyxlQUFlLEVBQUU7RUFFbEIsQ0FBQztFQUVEa0QsU0FBUyxFQUFFO0lBQ1Z6SCxTQUFTLEVBQUU7RUFDWixDQUFDO0VBRUR5QixVQUFVLEVBQUU7SUFDWDZDLE9BQU8sRUFBRSxDQUFDO0lBQ1ZILFNBQVMsRUFBRSxRQUFRO0lBQ25CUSxZQUFZLEVBQUUsQ0FBQztJQUNmSCxhQUFhLEVBQUUsS0FBSztJQUNwQjlVLEtBQUssRUFBRSxHQUFHO0lBQ1YwVixVQUFVLEVBQUUsUUFBUTtJQUNwQmIsZUFBZSxFQUFFO0VBQ2xCLENBQUM7RUFFRG1ELFFBQVEsRUFBRTtJQUNUOUMsUUFBUSxFQUFFLEVBQUU7SUFDWitDLFVBQVUsRUFBRSxFQUFFO0lBQ2RDLGFBQWEsRUFBRSxJQUFJO0lBQ25CdkQsS0FBSyxFQUFFO0VBQ1IsQ0FBQztFQUVEd0QsT0FBTyxFQUFFO0lBQ1J2RCxPQUFPLEVBQUUsRUFBRTtJQUNYQyxlQUFlLEVBQUUsU0FBUztJQUMxQkssUUFBUSxFQUFFLEVBQUU7SUFDWmtELGdCQUFnQixFQUFFLEVBQUU7SUFDcEI5SCxTQUFTLEVBQUU7RUFDWixDQUFDO0VBRUQ4QixRQUFRLEVBQUU7SUFDVDRDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZoVixLQUFLLEVBQUUsS0FBSztJQUNaNlUsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQ0QsT0FBTyxFQUFFLENBQUM7SUFDVkgsU0FBUyxFQUFFLFFBQVE7SUFDbkJRLFlBQVksRUFBRSxDQUFDO0lBRWZTLFVBQVUsRUFBRTtFQUNiLENBQUM7RUFFRDJDLElBQUksRUFBRTtJQUNMQyxXQUFXLEVBQUU7RUFDZCxDQUFDO0VBQ0RqRyxnQkFBZ0IsRUFBRTtJQUNqQjZDLFFBQVEsRUFBRTtFQUNYLENBQUM7RUFDRDVDLGlCQUFpQixFQUFFO0lBQ2xCNEMsUUFBUSxFQUFFO0VBQ1gsQ0FBQztFQUNEMUMsU0FBUyxFQUFFO0lBQ1Z4UyxLQUFLLEVBQUUsRUFBRTtJQUNUQyxNQUFNLEVBQUU7RUFDVCxDQUFDO0VBQ0RzUyxnQkFBZ0IsRUFBRTtJQUNqQnRTLE1BQU0sRUFBRSxFQUFFO0lBQ1ZpVixRQUFRLEVBQUU7RUFDWCxDQUFDO0VBRURxRCxNQUFNLEVBQUU7SUFDUHRDLElBQUksRUFBRSxDQUFDO0lBQ1BDLGNBQWMsRUFBRSxRQUFRO0lBQ3hCUixVQUFVLEVBQUU7RUFDYixDQUFDO0VBQ0Q4QyxrQkFBa0IsRUFBRTtJQUNuQnhZLEtBQUssRUFBRSxHQUFHO0lBQ1Y4VSxhQUFhLEVBQUUsUUFBUTtJQUN2Qm9CLGNBQWMsRUFBRTtFQUNqQixDQUFDO0VBQ0R1QyxjQUFjLEVBQUU7SUFDZjdELE9BQU8sRUFBRTtFQUNWLENBQUM7RUFFRDhELEtBQUssRUFBRTtJQUNOMVksS0FBSyxFQUFFLEdBQUc7SUFDVkMsTUFBTSxFQUFFLEVBQUU7SUFDVnNYLFVBQVUsRUFBRTtFQUNiLENBQUM7RUFFRG9CLGVBQWUsRUFBRTtJQUNoQjlELGVBQWUsRUFBRSxTQUFTO0lBQzFCRCxPQUFPLEVBQUUsQ0FBQztJQUVWYyxVQUFVLEVBQUUsUUFBUTtJQUNwQlQsWUFBWSxFQUFFLEVBQUU7SUFDaEJqVixLQUFLLEVBQUUsS0FBSztJQUNaeVUsU0FBUyxFQUFFLFFBQVE7SUFDbkJVLFVBQVUsRUFBRSxNQUFNO0lBQ2xCRCxRQUFRLEVBQUUsRUFBRTtJQUNac0IsV0FBVyxFQUFFO0VBQ2QsQ0FBQztFQUVEb0MsT0FBTyxFQUFFO0lBQ1IzWSxNQUFNLEVBQUU7RUFDVCxDQUFDO0VBRUR3VixNQUFNLEVBQUU7SUFDUFosZUFBZSxFQUFFRSxvQkFBUztJQUMxQkUsWUFBWSxFQUFFLEVBQUU7SUFDaEJTLFVBQVUsRUFBRSxRQUFRO0lBQ3BCMVYsS0FBSyxFQUFFLEdBQUc7SUFDVjJWLGVBQWUsRUFBRSxDQUFDO0lBQ2xCQyxjQUFjLEVBQUUsRUFBRTtJQUNsQm5CLFNBQVMsRUFBRSxRQUFRO0lBQ25CbkUsU0FBUyxFQUFFO0VBQ1osQ0FBQztFQUNEc0QsZUFBZSxFQUFFO0lBQ2hCaUIsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQ0ksWUFBWSxFQUFFLEVBQUU7SUFDaEJILGFBQWEsRUFBRSxLQUFLO0lBQ3BCb0IsY0FBYyxFQUFFLGVBQWU7SUFDL0JSLFVBQVUsRUFBRSxRQUFRO0lBQ3BCRSxjQUFjLEVBQUUsQ0FBQztJQUNqQjNWLE1BQU0sRUFBRSxFQUFFO0lBQ1Y2VyxpQkFBaUIsRUFBRTtFQUNwQixDQUFDO0VBQ0RqRCxVQUFVLEVBQUU7SUFDWGMsS0FBSyxFQUFFSSxvQkFBUztJQUNoQkksVUFBVSxFQUFFO0VBQ2I7QUFDRCxDQUFDLENBQUMifQ==