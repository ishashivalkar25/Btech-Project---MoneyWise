c1fb033f62f8abad4562794bee12a004
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "label", "accessibilityLabel", "accessibilityState", "color", "disabled", "onPress", "onLongPress", "delayLongPress", "theme", "style", "visible", "uppercase", "testID", "animateFrom", "extended", "iconMode", "variant"],
  _excluded2 = ["backgroundColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _theming = require("../../core/theming");
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _AnimatedText = _interopRequireDefault(require("../Typography/AnimatedText"));
var _utils = require("./utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var SIZE = 56;
var SCALE = 0.9;
var AnimatedFAB = function AnimatedFAB(_ref) {
  var icon = _ref.icon,
    label = _ref.label,
    _ref$accessibilityLab = _ref.accessibilityLabel,
    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,
    accessibilityState = _ref.accessibilityState,
    customColor = _ref.color,
    disabled = _ref.disabled,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    delayLongPress = _ref.delayLongPress,
    themeOverrides = _ref.theme,
    style = _ref.style,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? true : _ref$visible,
    uppercaseProp = _ref.uppercase,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'animated-fab' : _ref$testID,
    _ref$animateFrom = _ref.animateFrom,
    animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,
    _ref$extended = _ref.extended,
    extended = _ref$extended === void 0 ? false : _ref$extended,
    _ref$iconMode = _ref.iconMode,
    iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
  var isIOS = _reactNative.Platform.OS === 'ios';
  var isAnimatedFromRight = animateFrom === 'right';
  var isIconStatic = iconMode === 'static';
  var isRTL = _reactNative.I18nManager.isRTL;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
    visibility = _React$useRef.current;
  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),
    animFAB = _React$useRef2.current;
  var isV3 = theme.isV3,
    animation = theme.animation;
  var scale = animation.scale;
  var _React$useState = React.useState(0),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    textWidth = _React$useState2[0],
    setTextWidth = _React$useState2[1];
  var _React$useState3 = React.useState(0),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    textHeight = _React$useState4[0],
    setTextHeight = _React$useState4[1];
  var borderRadius = SIZE / (isV3 ? 3.5 : 2);
  React.useEffect(function () {
    if (visible) {
      _reactNative.Animated.timing(visibility, {
        toValue: 1,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.timing(visibility, {
        toValue: 0,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  }, [visible, scale, visibility]);
  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
    customBackgroundColor = _ref3.backgroundColor,
    restStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
  var _ref4 = (0, _utils.getFABColors)({
      theme: theme,
      variant: variant,
      disabled: disabled,
      customColor: customColor,
      customBackgroundColor: customBackgroundColor
    }),
    backgroundColor = _ref4.backgroundColor,
    foregroundColor = _ref4.foregroundColor;
  var rippleColor = (0, _color.default)(foregroundColor).alpha(0.12).rgb().string();
  var extendedWidth = textWidth + SIZE + borderRadius;
  var distance = isAnimatedFromRight ? -textWidth - borderRadius : textWidth + borderRadius;
  React.useEffect(function () {
    _reactNative.Animated.timing(animFAB, {
      toValue: !extended ? 0 : distance,
      duration: 150 * scale,
      useNativeDriver: true,
      easing: _reactNative.Easing.linear
    }).start();
  }, [animFAB, scale, distance, extended]);
  var onTextLayout = function onTextLayout(_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    var currentWidth = Math.ceil(nativeEvent.lines[0].width);
    var currentHeight = Math.ceil(nativeEvent.lines[0].height);
    if (currentWidth !== textWidth || currentHeight !== textHeight) {
      setTextHeight(currentHeight);
      if (isIOS) {
        return setTextWidth(currentWidth - 12);
      }
      setTextWidth(currentWidth);
    }
  };
  var propForDirection = function propForDirection(right) {
    if (isAnimatedFromRight) {
      return right;
    }
    return right.reverse();
  };
  var combinedStyles = (0, _utils.getCombinedStyles)({
    isAnimatedFromRight: isAnimatedFromRight,
    isIconStatic: isIconStatic,
    distance: distance,
    animFAB: animFAB
  });
  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
  var textStyle = Object.assign({
    color: foregroundColor
  }, font);
  var md2Elevation = disabled || !isIOS ? 0 : 6;
  var md3Elevation = disabled || !isIOS ? 0 : 3;
  var shadowStyle = isV3 ? styles.v3Shadow : styles.shadow;
  var baseStyle = [_reactNative.StyleSheet.absoluteFill, disabled ? styles.disabled : shadowStyle];
  var newAccessibilityState = Object.assign({}, accessibilityState, {
    disabled: disabled
  });
  return React.createElement(_Surface.default, _extends({}, rest, {
    testID: testID + "-container",
    style: [{
      opacity: visibility,
      transform: [{
        scale: visibility
      }],
      borderRadius: borderRadius
    }, !isV3 && {
      elevation: md2Elevation
    }, styles.container, restStyle]
  }, isV3 && {
    elevation: md3Elevation
  }, {
    theme: theme
  }), React.createElement(_reactNative.Animated.View, {
    style: [!isV3 && {
      transform: [{
        scaleY: animFAB.interpolate({
          inputRange: propForDirection([distance, 0]),
          outputRange: propForDirection([SCALE, 1])
        })
      }]
    }, styles.standard, {
      borderRadius: borderRadius
    }]
  }, React.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.shadowWrapper]
  }, React.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [baseStyle, {
      width: extendedWidth,
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.9 * distance, 0]),
        outputRange: propForDirection([1, 0.15, 0])
      }),
      borderRadius: borderRadius
    }],
    testID: testID + "-extended-shadow"
  }), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [baseStyle, {
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.9 * distance, 0]),
        outputRange: propForDirection([0, 0.85, 1])
      }),
      width: SIZE,
      borderRadius: animFAB.interpolate({
        inputRange: propForDirection([distance, 0]),
        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), borderRadius])
      })
    }, combinedStyles.absoluteFill],
    testID: testID + "-shadow"
  })), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [styles.innerWrapper, {
      borderRadius: borderRadius
    }]
  }, React.createElement(_reactNative.Animated.View, {
    style: [styles.standard, {
      width: extendedWidth,
      backgroundColor: backgroundColor,
      borderRadius: borderRadius
    }, combinedStyles.innerWrapper]
  }, React.createElement(_TouchableRipple.default, {
    borderless: true,
    onPress: onPress,
    onLongPress: onLongPress,
    delayLongPress: delayLongPress,
    rippleColor: rippleColor,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: newAccessibilityState,
    testID: testID,
    style: {
      borderRadius: borderRadius
    },
    theme: theme
  }, React.createElement(_reactNative.View, {
    style: [styles.standard, {
      width: extendedWidth,
      borderRadius: borderRadius
    }]
  }))))), React.createElement(_reactNative.Animated.View, {
    style: [styles.iconWrapper, combinedStyles.iconWrapper],
    pointerEvents: "none"
  }, React.createElement(_Icon.default, {
    source: icon,
    size: 24,
    color: foregroundColor,
    theme: theme
  })), React.createElement(_reactNative.View, {
    pointerEvents: "none"
  }, React.createElement(_AnimatedText.default, {
    variant: "labelLarge",
    numberOfLines: 1,
    onTextLayout: isIOS ? onTextLayout : undefined,
    ellipsizeMode: 'tail',
    style: [(0, _defineProperty2.default)({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2) : borderRadius), {
      minWidth: textWidth,
      top: -SIZE / 2 - textHeight / 2,
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.7 * distance, 0]),
        outputRange: propForDirection([1, 0, 0])
      }),
      transform: [{
        translateX: animFAB.interpolate({
          inputRange: propForDirection([distance, 0]),
          outputRange: propForDirection([0, SIZE])
        })
      }]
    }, styles.label, uppercase && styles.uppercaseLabel, textStyle],
    theme: theme,
    testID: testID + "-text"
  }, label)), !isIOS && React.createElement(_reactNative.ScrollView, {
    style: styles.textPlaceholderContainer
  }, React.createElement(_reactNative.Text, {
    onTextLayout: onTextLayout
  }, label)));
};
var styles = _reactNative.StyleSheet.create({
  standard: {
    height: SIZE
  },
  disabled: {
    elevation: 0
  },
  container: {
    position: 'absolute',
    backgroundColor: 'transparent'
  },
  innerWrapper: {
    flexDirection: 'row',
    overflow: 'hidden'
  },
  shadowWrapper: {
    elevation: 0
  },
  shadow: {
    elevation: 6
  },
  v3Shadow: {
    elevation: 3
  },
  iconWrapper: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'absolute',
    height: SIZE,
    width: SIZE
  },
  label: {
    position: 'absolute'
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  },
  textPlaceholderContainer: {
    height: 0,
    position: 'absolute'
  }
});
var _default = AnimatedFAB;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,