5fdcd3fe2d3bb005cb8e3449cba0b17c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _reactNativePermissions = require("react-native-permissions");
var _reactNativeCamera = require("react-native-camera");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var CAMERA_FLASH_MODE = _reactNativeCamera.RNCamera.Constants.FlashMode;
var CAMERA_FLASH_MODES = [CAMERA_FLASH_MODE.torch, CAMERA_FLASH_MODE.on, CAMERA_FLASH_MODE.off, CAMERA_FLASH_MODE.auto];
var QRCodeScanner = function (_Component) {
  (0, _inherits2.default)(QRCodeScanner, _Component);
  var _super = _createSuper(QRCodeScanner);
  function QRCodeScanner(props) {
    var _this;
    (0, _classCallCheck2.default)(this, QRCodeScanner);
    _this = _super.call(this, props);
    _this.state = {
      scanning: false,
      isCameraActivated: true,
      fadeInOpacity: new _reactNative.Animated.Value(0),
      isAuthorized: false,
      isAuthorizationChecked: false,
      disableVibrationByUser: false
    };
    _this.timer = null;
    _this._scannerTimeout = null;
    _this._handleBarCodeRead = _this._handleBarCodeRead.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(QRCodeScanner, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (_reactNative.Platform.OS === 'ios') {
        (0, _reactNativePermissions.request)(_reactNativePermissions.PERMISSIONS.IOS.CAMERA).then(function (cameraStatus) {
          _this2.setState({
            isAuthorized: cameraStatus === _reactNativePermissions.RESULTS.GRANTED,
            isAuthorizationChecked: true
          });
        });
      } else if (_reactNative.Platform.OS === 'android' && this.props.checkAndroid6Permissions) {
        _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA, {
          title: this.props.permissionDialogTitle,
          message: this.props.permissionDialogMessage,
          buttonPositive: this.props.buttonPositive
        }).then(function (granted) {
          var isAuthorized = granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED;
          _this2.setState({
            isAuthorized: isAuthorized,
            isAuthorizationChecked: true
          });
        });
      } else {
        this.setState({
          isAuthorized: true,
          isAuthorizationChecked: true
        });
      }
      if (this.props.fadeIn) {
        _reactNative.Animated.sequence([_reactNative.Animated.delay(1000), _reactNative.Animated.timing(this.state.fadeInOpacity, {
          toValue: 1,
          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
          useNativeDriver: true
        })]).start();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._scannerTimeout !== null) {
        clearTimeout(this._scannerTimeout);
      }
      if (this.timer !== null) {
        clearTimeout(this.timer);
      }
      this.timer = null;
      this._scannerTimeout = null;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.setState({
        disableVibrationByUser: true
      });
    }
  }, {
    key: "enable",
    value: function enable() {
      this.setState({
        disableVibrationByUser: false
      });
    }
  }, {
    key: "_setScanning",
    value: function _setScanning(value) {
      this.setState({
        scanning: value
      });
    }
  }, {
    key: "_setCamera",
    value: function _setCamera(value) {
      var _this3 = this;
      this.setState({
        isCameraActivated: value,
        scanning: false,
        fadeInOpacity: new _reactNative.Animated.Value(0)
      }, function () {
        if (value && _this3.props.fadeIn) {
          if (_this3.props.fadeIn) {
            _reactNative.Animated.sequence([_reactNative.Animated.delay(10), _reactNative.Animated.timing(_this3.state.fadeInOpacity, {
              toValue: 1,
              easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
              useNativeDriver: true
            })]).start();
          }
        }
      });
    }
  }, {
    key: "_handleBarCodeRead",
    value: function _handleBarCodeRead(e) {
      var _this4 = this;
      if (!this.state.scanning && !this.state.disableVibrationByUser) {
        if (this.props.vibrate) {
          _reactNative.Vibration.vibrate();
        }
        this._setScanning(true);
        this.props.onRead(e);
        if (this.props.reactivate) {
          this._scannerTimeout = setTimeout(function () {
            return _this4._setScanning(false);
          }, this.props.reactivateTimeout);
        }
      }
    }
  }, {
    key: "_renderTopContent",
    value: function _renderTopContent() {
      if (this.props.topContent) {
        return this.props.topContent;
      }
      return null;
    }
  }, {
    key: "_renderBottomContent",
    value: function _renderBottomContent() {
      if (this.props.bottomContent) {
        return this.props.bottomContent;
      }
      return null;
    }
  }, {
    key: "_renderCameraMarker",
    value: function _renderCameraMarker() {
      if (this.props.showMarker) {
        if (this.props.customMarker) {
          return this.props.customMarker;
        } else {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.rectangleContainer,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.rectangle, this.props.markerStyle ? this.props.markerStyle : null]
            })
          });
        }
      }
      return null;
    }
  }, {
    key: "_renderCameraComponent",
    value: function _renderCameraComponent() {
      return (0, _jsxRuntime.jsx)(_reactNativeCamera.RNCamera, Object.assign({
        androidCameraPermissionOptions: {
          title: this.props.permissionDialogTitle,
          message: this.props.permissionDialogMessage,
          buttonPositive: this.props.buttonPositive
        },
        style: [styles.camera, this.props.cameraStyle],
        onBarCodeRead: this._handleBarCodeRead.bind(this),
        type: this.props.cameraType,
        flashMode: this.props.flashMode,
        captureAudio: false
      }, this.props.cameraProps, {
        children: this._renderCameraMarker()
      }));
    }
  }, {
    key: "_renderCamera",
    value: function _renderCamera() {
      var _this5 = this;
      var _this$props = this.props,
        notAuthorizedView = _this$props.notAuthorizedView,
        pendingAuthorizationView = _this$props.pendingAuthorizationView,
        cameraType = _this$props.cameraType,
        cameraTimeoutView = _this$props.cameraTimeoutView;
      if (!this.state.isCameraActivated) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            return _this5._setCamera(true);
          },
          children: cameraTimeoutView
        });
      }
      var _this$state = this.state,
        isAuthorized = _this$state.isAuthorized,
        isAuthorizationChecked = _this$state.isAuthorizationChecked;
      if (isAuthorized) {
        if (this.props.cameraTimeout > 0) {
          this.timer && clearTimeout(this.timer);
          this.timer = setTimeout(function () {
            return _this5._setCamera(false);
          }, this.props.cameraTimeout);
        }
        if (this.props.fadeIn) {
          return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: {
              opacity: this.state.fadeInOpacity,
              backgroundColor: 'transparent',
              height: this.props.cameraStyle && this.props.cameraStyle.height || styles.camera.height
            },
            children: this._renderCameraComponent()
          });
        }
        return this._renderCameraComponent();
      } else if (!isAuthorizationChecked) {
        return pendingAuthorizationView;
      } else {
        return notAuthorizedView;
      }
    }
  }, {
    key: "reactivate",
    value: function reactivate() {
      this._setScanning(false);
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.mainContainer, this.props.containerStyle],
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.infoView, this.props.topViewStyle],
          children: this._renderTopContent()
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: this.props.cameraContainerStyle,
          children: this._renderCamera()
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.infoView, this.props.bottomViewStyle],
          children: this._renderBottomContent()
        })]
      });
    }
  }]);
  return QRCodeScanner;
}(_react.Component);
exports.default = QRCodeScanner;
QRCodeScanner.propTypes = {
  onRead: _propTypes.default.func.isRequired,
  vibrate: _propTypes.default.bool,
  reactivate: _propTypes.default.bool,
  reactivateTimeout: _propTypes.default.number,
  cameraTimeout: _propTypes.default.number,
  fadeIn: _propTypes.default.bool,
  showMarker: _propTypes.default.bool,
  cameraType: _propTypes.default.oneOf(['front', 'back']),
  customMarker: _propTypes.default.element,
  containerStyle: _propTypes.default.any,
  cameraStyle: _propTypes.default.any,
  cameraContainerStyle: _propTypes.default.any,
  markerStyle: _propTypes.default.any,
  topViewStyle: _propTypes.default.any,
  bottomViewStyle: _propTypes.default.any,
  topContent: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
  bottomContent: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
  notAuthorizedView: _propTypes.default.element,
  permissionDialogTitle: _propTypes.default.string,
  permissionDialogMessage: _propTypes.default.string,
  buttonPositive: _propTypes.default.string,
  checkAndroid6Permissions: _propTypes.default.bool,
  flashMode: _propTypes.default.oneOf(CAMERA_FLASH_MODES),
  cameraProps: _propTypes.default.object,
  cameraTimeoutView: _propTypes.default.element
};
QRCodeScanner.defaultProps = {
  onRead: function onRead() {
    return null;
  },
  reactivate: false,
  vibrate: true,
  reactivateTimeout: 0,
  cameraTimeout: 0,
  fadeIn: true,
  showMarker: false,
  cameraType: 'back',
  notAuthorizedView: (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        textAlign: 'center',
        fontSize: 16
      },
      children: "Camera not authorized"
    })
  }),
  pendingAuthorizationView: (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        textAlign: 'center',
        fontSize: 16
      },
      children: "..."
    })
  }),
  permissionDialogTitle: 'Info',
  permissionDialogMessage: 'Need camera permission',
  buttonPositive: 'OK',
  checkAndroid6Permissions: false,
  flashMode: CAMERA_FLASH_MODE.auto,
  cameraProps: {},
  cameraTimeoutView: (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: {
      flex: 0,
      alignItems: 'center',
      justifyContent: 'center',
      height: _reactNative.Dimensions.get('window').height,
      width: _reactNative.Dimensions.get('window').width,
      backgroundColor: 'black'
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: 'white'
      },
      children: "Tap to activate camera"
    })
  })
};
var styles = _reactNative.StyleSheet.create({
  mainContainer: {
    flex: 1
  },
  infoView: {
    flex: 2,
    justifyContent: 'center',
    alignItems: 'center',
    width: _reactNative.Dimensions.get('window').width
  },
  camera: {
    flex: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
    height: _reactNative.Dimensions.get('window').width,
    width: _reactNative.Dimensions.get('window').width
  },
  rectangleContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent'
  },
  rectangle: {
    height: 250,
    width: 250,
    borderWidth: 2,
    borderColor: '#00FF00',
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,