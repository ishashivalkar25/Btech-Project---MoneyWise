eb2da3cef8b17cee3739bd831e232c6a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ScanBills;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _Background = _interopRequireDefault(require("../Background"));
var _Constants = require("../Constants");
var ImagePicker = _interopRequireWildcard(require("react-native-image-picker"));
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _config = require("../../Firebase/config");
var _storage = require("firebase/storage");
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _AntDesign = _interopRequireDefault(require("react-native-vector-icons/AntDesign"));
var _uploadReceiptIcon = _interopRequireDefault(require("../../Assets/uploadReceiptIcon.png"));
var _reactNativeRootToast = _interopRequireDefault(require("react-native-root-toast"));
var _reactNativeGetSmsAndroid = _interopRequireDefault(require("react-native-get-sms-android"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var downloadURL = "";
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
function ScanBills(_ref) {
  var route = _ref.route,
    navigation = _ref.navigation;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    file = _useState2[0],
    setFile = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    fetchedData = _useState4[0],
    setFetchedData = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ocrCategory = _useState6[0],
    setOcrCategory = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    ocrAmount = _useState8[0],
    setOcrAmount = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    ocrDate = _useState10[0],
    setOcrDate = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    isImgModalVisible = _useState12[0],
    setVisibilityOfImgModal = _useState12[1];
  var _useState13 = (0, _react.useState)(_reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    pickedImagePath = _useState14[0],
    setPickedImagePath = _useState14[1];
  var _useState15 = (0, _react.useState)(new Date()),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    date = _useState16[0],
    setDate = _useState16[1];
  var _useState17 = (0, _react.useState)(0),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    amount = _useState18[0],
    setAmount = _useState18[1];
  var _useState19 = (0, _react.useState)(""),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    description = _useState20[0],
    setDescription = _useState20[1];
  var _useState21 = (0, _react.useState)(false),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    mounted = _useState22[0],
    setMounted = _useState22[1];
  var _useState23 = (0, _react.useState)([]),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    category = _useState24[0],
    setCategory = _useState24[1];
  var _useState25 = (0, _react.useState)(false),
    _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
    isCatModalVisible = _useState26[0],
    setVisibilityOfCatModal = _useState26[1];
  var _useState27 = (0, _react.useState)([]),
    _useState28 = (0, _slicedToArray2.default)(_useState27, 2),
    userExpCategories = _useState28[0],
    setUserExpCategories = _useState28[1];
  var _useState29 = (0, _react.useState)([]),
    _useState30 = (0, _slicedToArray2.default)(_useState29, 2),
    grpMembersList = _useState30[0],
    setGrpMembersList = _useState30[1];
  var _useState31 = (0, _react.useState)(0),
    _useState32 = (0, _slicedToArray2.default)(_useState31, 2),
    accBalance = _useState32[0],
    setAccBalance = _useState32[1];
  var _useState33 = (0, _react.useState)(false),
    _useState34 = (0, _slicedToArray2.default)(_useState33, 2),
    datePicker = _useState34[0],
    setDatePicker = _useState34[1];
  var _useState35 = (0, _react.useState)(false),
    _useState36 = (0, _slicedToArray2.default)(_useState35, 2),
    isEnabled = _useState36[0],
    setIsEnabled = _useState36[1];
  var toggleSwitch = function toggleSwitch(val) {
    if (amount > 0) {
      setIsEnabled(function (previousState) {
        return !previousState;
      });
      console.log(isEnabled);
      if (val) {
        navigation.navigate("AddGrpExpMembers", {
          splitAmount: amount,
          previous_screen: 'ScanBills'
        });
      }
    } else {
      alert("Please Enter Expense Amount!");
    }
  };
  (0, _react.useEffect)(function () {
    if (route.params != null && route.params.grpMembersList) {
      console.log(route.params.grpMembersList, 'route.params.grpMembersList');
      setGrpMembersList(grpMembersList);
    }
  }, [route.params]);
  (0, _react.useEffect)(function () {
    if (fetchedData != "") {
      var flag = false;
      userExpCategories.forEach(function (item) {
        if (item.toUpperCase() == fetchedData.document.inference.prediction.category.value.toUpperCase()) {
          setOcrCategory(item);
          setSelectedCategory(item);
          flag = true;
        }
      });
      if (!flag) {
        setOcrCategory(fetchedData.document.inference.prediction.category.value);
        setSelectedCategory(fetchedData.document.inference.prediction.category.value);
      }
      setAmount(fetchedData.document.inference.prediction.total_amount.value + "");
      setOcrAmount(fetchedData.document.inference.prediction.total_amount.value);
      setOcrDate(fetchedData.document.inference.prediction.date.value);
      console.log(ocrCategory, ocrAmount, ocrDate, typeof new Date(ocrDate), '-------------------------------');
    }
  }, [fetchedData]);
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        var catList = [];
        try {
          var user = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
          user.data().expCategories.forEach(function (item) {
            getcat = {
              label: item,
              value: item
            };
            console.log(getcat);
            catList.push(getcat);
          });
          catList.push({
            label: "other",
            value: "other"
          });
          setCategory(catList);
          setUserExpCategories(user.data().expCategories);
          setAccBalance(user.data().accBalance);
          console.log(user.data().expCategories, "userExpCategories");
        } catch (e) {
          console.error("Error adding document: ", e);
        }
        setMounted(true);
      });
      return function loadData() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadData();
  }, []);
  function showDatePicker() {
    setDatePicker(true);
  }
  function onDateSelected(event, value) {
    setDate(value);
    setDatePicker(false);
  }
  var _useState37 = (0, _react.useState)(""),
    _useState38 = (0, _slicedToArray2.default)(_useState37, 2),
    selectedCategory = _useState38[0],
    setSelectedCategory = _useState38[1];
  var showImagePicker = function showImagePicker() {
    ImagePicker.launchImageLibrary().then(function (result) {
      if (result) {
        setPickedImagePath(result.assets[0].uri);
      }
    }).catch(function (error) {
      console.log(error);
    });
  };
  var openCamera = function openCamera() {
    ImagePicker.launchCamera().then(function (result) {
      console.log(result.assets[0].uri, "file");
      setPickedImagePath(result.assets[0].uri);
    }).catch(function (error) {
      console.log(error);
    });
  };
  var handleFilePick = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var result = yield DocumentPicker.pick({
          type: [DocumentPicker.types.allFiles]
        });
        setFile(result);
        console.log(result[0].uri);
      } catch (err) {
        console.log(err);
      }
    });
    return function handleFilePick() {
      return _ref3.apply(this, arguments);
    };
  }();
  var makeRequest = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      var fileUri = pickedImagePath;
      var mimeType = 'image/jpeg';
      var data = new FormData();
      data.append('document', {
        uri: fileUri,
        type: 'image/jpeg',
        name: 'receipt'
      });
      console.log(data._parts);
      var config = {
        method: 'POST',
        url: 'http://192.168.203.144/products/mindee/expense_receipts/v4/predict',
        headers: {
          Authorization: '4da01f1a7338330c1fcf93e3db139a16'
        },
        data: data
      };
      try {
        var xhr = new XMLHttpRequest();
        xhr.addEventListener("readystatechange", function () {
          if (this.readyState === 4) {
            console.log("Response ", this.responseText.document);
            setFetchedData(JSON.parse(this.responseText));
          }
        });
        xhr.open("POST", "https://api.mindee.net/v1/products/mindee/expense_receipts/v4/predict");
        xhr.setRequestHeader("Authorization", "4da01f1a7338330c1fcf93e3db139a16");
        xhr.setRequestHeader('content-type', 'multipart/form-data');
        xhr.send(data);
      } catch (error) {
        console.log(error);
      }
    });
    return function makeRequest() {
      return _ref4.apply(this, arguments);
    };
  }();
  var saveExpense = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      console.log(grpMembersList, 'grpMembersListIn');
      try {
        if (amount == 0) {
          var toast = _reactNativeRootToast.default.show("Please enter amount.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(toast);
          }, 800);
          return;
        }
        if (selectedCategory == "") {
          var _toast = _reactNativeRootToast.default.show("Please select category.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(_toast);
          }, 800);
          return;
        }
        if (isEnabled && (route.params == null || route.params != null && route.params.grpMembersList != null && route.params.grpMembersList.length == 0)) {
          var _toast2 = _reactNativeRootToast.default.show("Please add group members to split an expense.", {
            duration: _reactNativeRootToast.default.durations.LONG
          });
          setTimeout(function hideToast() {
            _reactNativeRootToast.default.hide(_toast2);
          }, 800);
          return;
        }
        var promise = Promise.resolve();
        if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri) {
          promise = new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
              var blobImage = xhr.response;
              var metadata = {
                contentType: "image/jpeg"
              };
              var storageRef = (0, _storage.ref)(_config.storage, "ExpImages/" + Date.now());
              var uploadTask = (0, _storage.uploadBytesResumable)(storageRef, blobImage, metadata);
              uploadTask.on("state_changed", function (snapshot) {
                var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;
                switch (snapshot.state) {
                  case "paused":
                    console.log("Upload is paused");
                    break;
                  case "running":
                    console.log("Upload is running");
                    break;
                }
              }, function (error) {
                switch (error.code) {
                  case "storage/unauthorized":
                    reject(new Error("User doesn't have permission to access the object"));
                    break;
                  case "storage/canceled":
                    reject(new Error("User canceled the upload"));
                    break;
                  case "storage/unknown":
                    reject(new Error("Unknown error occurred, inspect error.serverResponse"));
                    break;
                  default:
                    reject(error);
                    break;
                }
              }, (0, _asyncToGenerator2.default)(function* () {
                downloadURL = yield (0, _storage.getDownloadURL)(uploadTask.snapshot.ref);
                console.log("File available at", downloadURL);
                setPickedImagePath(downloadURL);
                resolve();
              }));
            };
            xhr.onerror = function () {
              reject(new Error("Network request failed"));
            };
            xhr.responseType = "blob";
            xhr.open("GET", pickedImagePath, true);
            xhr.send(null);
          });
        }
        try {
          yield promise;
          setPickedImagePath(downloadURL);
          var data_1 = {
            expAmount: amount,
            expDate: date,
            expCategory: selectedCategory,
            expDescription: description,
            groupExp: isEnabled
          };
          if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri && downloadURL != "") {
            data_1.expImage = downloadURL;
          }
          if (isEnabled) {
            data_1.grpMembersList = route.params.grpMembersList;
          }
          var docRef = yield (0, _config.addDoc)((0, _config.collection)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), "Expense"), data_1);
          var querySnapshotExp = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "Expense"));
          querySnapshotExp.forEach(function (doc) {});
          var recordId = months[date.getMonth()] + "" + date.getFullYear();
          console.log(recordId);
          var document = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId));
          if (document.data()) {
            var categoryWiseBudget = document.data();
            var isCategoryBudgetSet = false;
            var otherExpIdx = -1;
            var savingsIdx = -1;
            var done = false;
            if (categoryWiseBudget.method === 'Envelop Method') {
              console.log('Inside : ', categoryWiseBudget.method);
              categoryWiseBudget.budget.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                }
                if (item.category == "Additional Expenses") {
                  otherExpIdx = idx;
                }
              });
              if (!isCategoryBudgetSet && otherExpIdx > -1) {
                categoryWiseBudget.budget[otherExpIdx].budgetSpent = categoryWiseBudget.budget[otherExpIdx].budgetSpent + parseFloat(amount);
              }
            } else if (categoryWiseBudget.method === 'Zero Based Budgeting') {
              console.log('Inside : ', categoryWiseBudget.method);
              categoryWiseBudget.budget.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                }
                if (item.category == "Savings") {
                  savingsIdx = idx;
                }
              });
              if (!isCategoryBudgetSet && savingsIdx > -1) {
                categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetSpent + parseFloat(amount);
                categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetPlanned - parseFloat(amount);
                console.log('deducted from other exp', categoryWiseBudget.budget[savingsIdx].budgetSpent);
              }
            } else {
              console.log('Inside : ', categoryWiseBudget);
              categoryWiseBudget.budget.needs.forEach(function (item, idx) {
                if (item.category == selectedCategory) {
                  item.budgetSpent = item.budgetSpent + parseFloat(amount);
                  isCategoryBudgetSet = true;
                  done = true;
                }
              });
              if (!done) {
                categoryWiseBudget.budget.wants.forEach(function (item, idx) {
                  if (item.category == selectedCategory) {
                    item.budgetSpent = item.budgetSpent + parseFloat(amount);
                    isCategoryBudgetSet = true;
                    done = true;
                  }
                });
              }
              if (!done) {
                categoryWiseBudget.budget.savings.forEach(function (item, idx) {
                  if (item.category == selectedCategory) {
                    item.budgetSpent = item.budgetSpent + parseFloat(amount);
                    isCategoryBudgetSet = true;
                    done = true;
                  }
                  if (item.category == "Other Savings") {
                    otherExpIdx = idx;
                  }
                });
                if (!isCategoryBudgetSet && otherExpIdx > -1) {
                  categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent = categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent + parseFloat(amount);
                  done = true;
                }
              }
            }
            yield (0, _config.setDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId), categoryWiseBudget);
          }
          if (!userExpCategories.includes(selectedCategory)) {
            userExpCategories.push(selectedCategory);
            yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
              expCategories: userExpCategories
            });
          }
          var querySnapshot = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "expense"));
          querySnapshot.forEach(function (doc) {
            console.log(doc.id, JSON.stringify(doc.data()));
          });
          yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
            accBalance: parseFloat(accBalance) - parseFloat(amount) + ""
          });
          if (isEnabled) {
            var _document = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
            var userName = _document.data().name;
            route.params.grpMembersList.forEach(function (item) {
              if (userName != item.name) {
                var message = userName + " has split a bill with you. Kindly pay amount of Rs." + item.amount + ".";
                _reactNativeGetSmsAndroid.default.autoSend(item.contactNo, message, function (fail) {
                  console.log('Failed with this error: ' + fail);
                }, function (success) {
                  console.log('SMS sent successfully');
                });
              }
            });
          }
          alert("Record Added Successfully");
          navigation.navigate("Root");
        } catch (error_1) {
          console.error("Error adding document: ", error_1);
          throw error_1;
        }
      } catch (e) {
        console.error("Error adding document: ", e);
      }
    });
    return function saveExpense() {
      return _ref5.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_Background.default, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container2,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.headCenter,
        children: "Add Image"
      }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
        animationType: "slide",
        transparent: true,
        visible: isImgModalVisible,
        presentationStyle: "overFullScreen",
        onDismiss: function onDismiss() {
          setVisibilityOfImgModal(!isImgModalVisible);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.viewWrapper,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.modalView,
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: showImagePicker,
              style: styles.selImg,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  color: "white",
                  fontSize: 15,
                  fontWeight: 'bold'
                },
                children: " Upload image "
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: openCamera,
              style: styles.selImg,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  color: "white",
                  fontSize: 15,
                  fontWeight: 'bold'
                },
                children: " Take Photo "
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                setVisibilityOfImgModal(!isImgModalVisible);
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  color: _Constants.darkGreen,
                  fontSize: 15,
                  marginTop: 30
                },
                children: " Close "
              })
            })]
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: function onPress() {
          console.log("image clicked");
          setVisibilityOfImgModal(true);
        },
        children: pickedImagePath !== "" && (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: pickedImagePath
          },
          style: {
            width: 50,
            height: 50,
            margin: 15,
            alignSelf: 'center'
          },
          onPress: function onPress() {
            console.log("image clicked");
            setVisibilityOfImgModal(true);
          }
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: makeRequest,
        style: {
          backgroundColor: _Constants.darkGreen,
          borderRadius: 200,
          alignItems: 'center',
          width: 250,
          paddingVertical: 5,
          marginVertical: 10,
          alignSelf: 'center'
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: "white",
            fontSize: 20,
            fontWeight: 'bold',
            margin: 0
          },
          children: " Save "
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container2,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.headCenter,
        children: "Fetched Data"
      }), ocrCategory !== null && ocrAmount != null && ocrDate != null && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.mainContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Amount:"
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                keyboardType: "numeric",
                style: styles.inputText,
                defaultValue: ocrAmount.toString(),
                onChangeText: setAmount
              })]
            }), console.log(new Date(ocrDate), '**********************123*****************************************'), datePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
              value: new Date(ocrDate),
              mode: "date",
              display: Platform.OS === "ios" ? "spinner" : "default",
              is24Hour: true,
              onChange: onDateSelected,
              style: styles.datePicker
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              View: true,
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Date: "
              }), !datePicker && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.inputText,
                children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
                  style: styles.dateButton,
                  onPress: showDatePicker,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: date != null ? date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear() : ocrDate
                  })
                })
              })]
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.headCenter,
              children: "Select Category"
            }), (0, _jsxRuntime.jsx)(_reactNativeElementDropdown.Dropdown, {
              style: styles.dropdown,
              placeholderStyle: styles.placeholderStyle,
              selectedTextStyle: styles.selectedTextStyle,
              inputSearchStyle: styles.inputSearchStyle,
              iconStyle: styles.iconStyle,
              data: category,
              search: true,
              maxHeight: 300,
              labelField: "label",
              valueField: "value",
              placeholder: ocrCategory,
              searchPlaceholder: "Search...",
              value: ocrCategory,
              onChange: function onChange(item) {
                if (item.value != "other") setSelectedCategory(item.value);else {
                  setVisibilityOfCatModal(true);
                }
              }
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
            animationType: "slide",
            transparent: true,
            visible: isCatModalVisible,
            presentationStyle: "overFullScreen",
            onDismiss: function onDismiss() {
              setVisibilityOfCatModal(!isCatModalVisible);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.viewWrapper,
              children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.modalView,
                children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                  placeholder: "Enter Category",
                  style: styles.textInput,
                  onChangeText: function onChangeText(value) {
                    setSelectedCategory(value);
                  }
                }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
                  title: "Add Category",
                  onPress: function onPress() {
                    setVisibilityOfCatModal(!isCatModalVisible);
                    setCategory([].concat((0, _toConsumableArray2.default)(category), [{
                      label: selectedCategory,
                      value: selectedCategory
                    }]));
                  }
                })]
              })
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [styles.grpExpcontainer, styles.container1],
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.grpExpText,
              children: "Group Expense : "
            }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
              trackColor: {
                false: '#767577',
                true: 'lightgreen'
              },
              thumbColor: isEnabled ? 'green' : 'white',
              onValueChange: function onValueChange(val) {
                return toggleSwitch(val);
              },
              value: isEnabled
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container2,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.head,
              children: "Add note"
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Description",
              style: styles.input1,
              onChangeText: function onChangeText(value) {
                setDescription(value);
              }
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: saveExpense,
            style: {
              backgroundColor: _Constants.darkGreen,
              borderRadius: 200,
              alignItems: 'center',
              width: 250,
              paddingVertical: 5,
              marginVertical: 10,
              alignSelf: 'center'
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "white",
                fontSize: 20,
                fontWeight: 'bold',
                margin: 0
              },
              children: " Save "
            })
          })]
        })
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    borderTopLeftRadius: 40,
    borderTopRightRadius: 40,
    height: height * 0.7,
    width: width,
    backgroundColor: "#fff",
    margin: 15
  },
  mainContainer: {
    padding: 5,
    flex: 1,
    height: "100%",
    justifyContent: "space-between"
  },
  container1: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 5,
    backgroundColor: "white",
    marginVertical: 5
  },
  container2: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 5,
    backgroundColor: "white",
    marginVertical: 5,
    paddingTop: 5,
    paddingLeft: 20,
    paddingRight: 20
  },
  container_btn_block: {
    flexDirection: 'row',
    paddingBottom: 10,
    paddingTop: 10,
    justifyContent: "space-around"
  },
  container2_btn: {
    padding: 15,
    flexGrow: 1,
    flexShrink: 0,
    flexBasis: 100,
    borderRadius: 10,
    backgroundColor: "#841584",
    color: "white",
    width: 150,
    margin: 5
  },
  Title: {
    color: "white",
    fontSize: 50,
    fontWeight: "bold",
    marginVertical: 20,
    alignSelf: "center"
  },
  inputPair: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10
  },
  head: {
    fontWeight: "bold",
    fontSize: 16,
    color: _Constants.darkGreen
  },
  inputText: {
    padding: 0,
    borderRadius: 5,
    color: _Constants.darkGreen,
    paddingHorizontal: 5,
    width: '60%',
    height: 35,
    backgroundColor: 'rgb(220,220, 220)'
  },
  input1: {
    borderWidth: 1,
    borderColor: '#777',
    borderRadius: 10,
    padding: 10,
    width: "100%",
    height: 80,
    marginTop: 10,
    marginBottom: 15,
    textAlignVertical: "top",
    textAlign: 'left'
  },
  headCenter: {
    marginTop: 10,
    fontWeight: "bold",
    alignSelf: "center",
    color: _Constants.darkGreen,
    fontSize: 16
  },
  dropDownStyle: {
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: "center",
    borderRadius: 6,
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  dropDownIcon: {
    resizeMode: 'contain'
  },
  modal: {
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
    height: 300,
    width: "80%",
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#fff",
    marginTop: 80,
    marginLeft: 40
  },
  viewWrapper: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(0, 0, 0, 0.2)"
  },
  modalView: {
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "50%",
    left: "50%",
    elevation: 5,
    transform: [{
      translateX: -(width * 0.4)
    }, {
      translateY: -90
    }],
    height: 180,
    width: width * 0.8,
    backgroundColor: "#fff",
    borderRadius: 7
  },
  textInput: {
    width: "80%",
    borderRadius: 5,
    paddingVertical: 8,
    paddingHorizontal: 16,
    marginBottom: 8,
    backgroundColor: "red"
  },
  datePicker: {
    justifyContent: "center",
    alignItems: "flex-start",
    width: 320,
    height: 50,
    display: "flex"
  },
  dateLabel: {
    marginTop: 15
  },
  dateButton: {
    padding: 7,
    alignSelf: "center",
    borderRadius: 5,
    flexDirection: 'row',
    width: 180,
    alignItems: 'center'
  },
  catItem: {
    padding: 10,
    backgroundColor: "skyblue",
    fontSize: 14,
    marginHorizontal: 10,
    marginTop: 24
  },
  dropdown: {
    margin: 10,
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: "center",
    borderRadius: 6,
    alignItems: 'center'
  },
  icon: {
    marginRight: 5
  },
  placeholderStyle: {
    fontSize: 14
  },
  selectedTextStyle: {
    fontSize: 14
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  selImg: {
    backgroundColor: _Constants.darkGreen,
    borderRadius: 10,
    alignItems: 'center',
    width: 150,
    paddingVertical: 5,
    marginVertical: 10,
    alignSelf: 'center',
    marginTop: 5
  },
  grpExpcontainer: {
    backgroundColor: 'rgba(0,0,0,0.2)',
    borderRadius: 10,
    flexDirection: "row",
    justifyContent: 'space-between',
    alignItems: "center",
    marginVertical: 5,
    height: 50,
    paddingHorizontal: 20
  },
  grpExpText: {
    color: _Constants.darkGreen,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX0JhY2tncm91bmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0NvbnN0YW50cyIsIkltYWdlUGlja2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZGF0ZXRpbWVwaWNrZXIiLCJfY29uZmlnIiwiX3N0b3JhZ2UiLCJfcmVhY3ROYXRpdmVFbGVtZW50RHJvcGRvd24iLCJfQW50RGVzaWduIiwiX3VwbG9hZFJlY2VpcHRJY29uIiwiX3JlYWN0TmF0aXZlUm9vdFRvYXN0IiwiX3JlYWN0TmF0aXZlR2V0U21zQW5kcm9pZCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9EaW1lbnNpb25zJGdldCIsIkRpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsImRvd25sb2FkVVJMIiwibW9udGhzIiwiU2NhbkJpbGxzIiwiX3JlZiIsInJvdXRlIiwibmF2aWdhdGlvbiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImZpbGUiLCJzZXRGaWxlIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJmZXRjaGVkRGF0YSIsInNldEZldGNoZWREYXRhIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJvY3JDYXRlZ29yeSIsInNldE9jckNhdGVnb3J5IiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJvY3JBbW91bnQiLCJzZXRPY3JBbW91bnQiLCJfdXNlU3RhdGU5IiwiX3VzZVN0YXRlMTAiLCJvY3JEYXRlIiwic2V0T2NyRGF0ZSIsIl91c2VTdGF0ZTExIiwiX3VzZVN0YXRlMTIiLCJpc0ltZ01vZGFsVmlzaWJsZSIsInNldFZpc2liaWxpdHlPZkltZ01vZGFsIiwiX3VzZVN0YXRlMTMiLCJJbWFnZSIsInJlc29sdmVBc3NldFNvdXJjZSIsInVwbG9hZEltZyIsInVyaSIsIl91c2VTdGF0ZTE0IiwicGlja2VkSW1hZ2VQYXRoIiwic2V0UGlja2VkSW1hZ2VQYXRoIiwiX3VzZVN0YXRlMTUiLCJEYXRlIiwiX3VzZVN0YXRlMTYiLCJkYXRlIiwic2V0RGF0ZSIsIl91c2VTdGF0ZTE3IiwiX3VzZVN0YXRlMTgiLCJhbW91bnQiLCJzZXRBbW91bnQiLCJfdXNlU3RhdGUxOSIsIl91c2VTdGF0ZTIwIiwiZGVzY3JpcHRpb24iLCJzZXREZXNjcmlwdGlvbiIsIl91c2VTdGF0ZTIxIiwiX3VzZVN0YXRlMjIiLCJtb3VudGVkIiwic2V0TW91bnRlZCIsIl91c2VTdGF0ZTIzIiwiX3VzZVN0YXRlMjQiLCJjYXRlZ29yeSIsInNldENhdGVnb3J5IiwiX3VzZVN0YXRlMjUiLCJfdXNlU3RhdGUyNiIsImlzQ2F0TW9kYWxWaXNpYmxlIiwic2V0VmlzaWJpbGl0eU9mQ2F0TW9kYWwiLCJfdXNlU3RhdGUyNyIsIl91c2VTdGF0ZTI4IiwidXNlckV4cENhdGVnb3JpZXMiLCJzZXRVc2VyRXhwQ2F0ZWdvcmllcyIsIl91c2VTdGF0ZTI5IiwiX3VzZVN0YXRlMzAiLCJncnBNZW1iZXJzTGlzdCIsInNldEdycE1lbWJlcnNMaXN0IiwiX3VzZVN0YXRlMzEiLCJfdXNlU3RhdGUzMiIsImFjY0JhbGFuY2UiLCJzZXRBY2NCYWxhbmNlIiwiX3VzZVN0YXRlMzMiLCJfdXNlU3RhdGUzNCIsImRhdGVQaWNrZXIiLCJzZXREYXRlUGlja2VyIiwiX3VzZVN0YXRlMzUiLCJfdXNlU3RhdGUzNiIsImlzRW5hYmxlZCIsInNldElzRW5hYmxlZCIsInRvZ2dsZVN3aXRjaCIsInZhbCIsInByZXZpb3VzU3RhdGUiLCJjb25zb2xlIiwibG9nIiwibmF2aWdhdGUiLCJzcGxpdEFtb3VudCIsInByZXZpb3VzX3NjcmVlbiIsImFsZXJ0IiwidXNlRWZmZWN0IiwicGFyYW1zIiwiZmxhZyIsImZvckVhY2giLCJpdGVtIiwidG9VcHBlckNhc2UiLCJkb2N1bWVudCIsImluZmVyZW5jZSIsInByZWRpY3Rpb24iLCJ2YWx1ZSIsInNldFNlbGVjdGVkQ2F0ZWdvcnkiLCJ0b3RhbF9hbW91bnQiLCJsb2FkRGF0YSIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiY2F0TGlzdCIsInVzZXIiLCJnZXREb2MiLCJkb2MiLCJkYiIsImF1dGgiLCJjdXJyZW50VXNlciIsInVpZCIsImRhdGEiLCJleHBDYXRlZ29yaWVzIiwiZ2V0Y2F0IiwibGFiZWwiLCJwdXNoIiwiZSIsImVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzaG93RGF0ZVBpY2tlciIsIm9uRGF0ZVNlbGVjdGVkIiwiZXZlbnQiLCJfdXNlU3RhdGUzNyIsIl91c2VTdGF0ZTM4Iiwic2VsZWN0ZWRDYXRlZ29yeSIsInNob3dJbWFnZVBpY2tlciIsImxhdW5jaEltYWdlTGlicmFyeSIsInRoZW4iLCJyZXN1bHQiLCJhc3NldHMiLCJjYXRjaCIsIm9wZW5DYW1lcmEiLCJsYXVuY2hDYW1lcmEiLCJoYW5kbGVGaWxlUGljayIsIl9yZWYzIiwiRG9jdW1lbnRQaWNrZXIiLCJwaWNrIiwidHlwZSIsInR5cGVzIiwiYWxsRmlsZXMiLCJlcnIiLCJtYWtlUmVxdWVzdCIsIl9yZWY0IiwiZmlsZVVyaSIsIm1pbWVUeXBlIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJuYW1lIiwiX3BhcnRzIiwiY29uZmlnIiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsInBhcnNlIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwic2F2ZUV4cGVuc2UiLCJfcmVmNSIsInRvYXN0IiwiVG9hc3QiLCJzaG93IiwiZHVyYXRpb24iLCJkdXJhdGlvbnMiLCJMT05HIiwic2V0VGltZW91dCIsImhpZGVUb2FzdCIsImhpZGUiLCJsZW5ndGgiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbmxvYWQiLCJibG9iSW1hZ2UiLCJyZXNwb25zZSIsIm1ldGFkYXRhIiwiY29udGVudFR5cGUiLCJzdG9yYWdlUmVmIiwicmVmIiwic3RvcmFnZSIsIm5vdyIsInVwbG9hZFRhc2siLCJ1cGxvYWRCeXRlc1Jlc3VtYWJsZSIsIm9uIiwic25hcHNob3QiLCJwcm9ncmVzcyIsImJ5dGVzVHJhbnNmZXJyZWQiLCJ0b3RhbEJ5dGVzIiwic3RhdGUiLCJjb2RlIiwiRXJyb3IiLCJnZXREb3dubG9hZFVSTCIsIm9uZXJyb3IiLCJyZXNwb25zZVR5cGUiLCJkYXRhXzEiLCJleHBBbW91bnQiLCJleHBEYXRlIiwiZXhwQ2F0ZWdvcnkiLCJleHBEZXNjcmlwdGlvbiIsImdyb3VwRXhwIiwiZXhwSW1hZ2UiLCJkb2NSZWYiLCJhZGREb2MiLCJjb2xsZWN0aW9uIiwicXVlcnlTbmFwc2hvdEV4cCIsImdldERvY3MiLCJyZWNvcmRJZCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJjYXRlZ29yeVdpc2VCdWRnZXQiLCJpc0NhdGVnb3J5QnVkZ2V0U2V0Iiwib3RoZXJFeHBJZHgiLCJzYXZpbmdzSWR4IiwiZG9uZSIsImJ1ZGdldCIsImlkeCIsImJ1ZGdldFNwZW50IiwicGFyc2VGbG9hdCIsImJ1ZGdldFBsYW5uZWQiLCJuZWVkcyIsIndhbnRzIiwic2F2aW5ncyIsInNldERvYyIsImluY2x1ZGVzIiwidXBkYXRlRG9jIiwicXVlcnlTbmFwc2hvdCIsImlkIiwic3RyaW5naWZ5IiwidXNlck5hbWUiLCJtZXNzYWdlIiwiU21zQW5kcm9pZCIsImF1dG9TZW5kIiwiY29udGFjdE5vIiwiZmFpbCIsInN1Y2Nlc3MiLCJlcnJvcl8xIiwianN4cyIsImNoaWxkcmVuIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyMiIsImpzeCIsIlRleHQiLCJoZWFkQ2VudGVyIiwiTW9kYWwiLCJhbmltYXRpb25UeXBlIiwidHJhbnNwYXJlbnQiLCJ2aXNpYmxlIiwicHJlc2VudGF0aW9uU3R5bGUiLCJvbkRpc21pc3MiLCJ2aWV3V3JhcHBlciIsIm1vZGFsVmlldyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwic2VsSW1nIiwiY29sb3IiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJkYXJrR3JlZW4iLCJtYXJnaW5Ub3AiLCJzb3VyY2UiLCJtYXJnaW4iLCJhbGlnblNlbGYiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJhbGlnbkl0ZW1zIiwicGFkZGluZ1ZlcnRpY2FsIiwibWFyZ2luVmVydGljYWwiLCJtYWluQ29udGFpbmVyIiwiU2Nyb2xsVmlldyIsImNvbnRhaW5lcjEiLCJpbnB1dFBhaXIiLCJoZWFkIiwiVGV4dElucHV0Iiwia2V5Ym9hcmRUeXBlIiwiaW5wdXRUZXh0IiwiZGVmYXVsdFZhbHVlIiwidG9TdHJpbmciLCJvbkNoYW5nZVRleHQiLCJtb2RlIiwiZGlzcGxheSIsIlBsYXRmb3JtIiwiT1MiLCJpczI0SG91ciIsIm9uQ2hhbmdlIiwiUHJlc3NhYmxlIiwiZGF0ZUJ1dHRvbiIsImdldERhdGUiLCJEcm9wZG93biIsImRyb3Bkb3duIiwicGxhY2Vob2xkZXJTdHlsZSIsInNlbGVjdGVkVGV4dFN0eWxlIiwiaW5wdXRTZWFyY2hTdHlsZSIsImljb25TdHlsZSIsInNlYXJjaCIsIm1heEhlaWdodCIsImxhYmVsRmllbGQiLCJ2YWx1ZUZpZWxkIiwicGxhY2Vob2xkZXIiLCJzZWFyY2hQbGFjZWhvbGRlciIsInRleHRJbnB1dCIsIkJ1dHRvbiIsInRpdGxlIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImdycEV4cGNvbnRhaW5lciIsImdycEV4cFRleHQiLCJTd2l0Y2giLCJ0cmFja0NvbG9yIiwiZmFsc2UiLCJ0cnVlIiwidGh1bWJDb2xvciIsIm9uVmFsdWVDaGFuZ2UiLCJpbnB1dDEiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiY29udGFpbmVyIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwicGFkZGluZyIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsImVsZXZhdGlvbiIsInBhZGRpbmdUb3AiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImNvbnRhaW5lcl9idG5fYmxvY2siLCJmbGV4RGlyZWN0aW9uIiwicGFkZGluZ0JvdHRvbSIsImNvbnRhaW5lcjJfYnRuIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiVGl0bGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJtYXJnaW5Cb3R0b20iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCIsInRleHRBbGlnbiIsImRyb3BEb3duU3R5bGUiLCJkcm9wRG93bkljb24iLCJyZXNpemVNb2RlIiwibW9kYWwiLCJtYXJnaW5MZWZ0IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJkYXRlTGFiZWwiLCJjYXRJdGVtIiwibWFyZ2luSG9yaXpvbnRhbCIsImljb24iLCJtYXJnaW5SaWdodCJdLCJzb3VyY2VzIjpbIlNjYW5CaWxscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdCwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQcmVzc2FibGUsIFNjcm9sbFZpZXcsIFRleHRJbnB1dCwgU3dpdGNoLCBUZXh0LCBEaW1lbnNpb25zLCBJbWFnZSwgVmlldywgQnV0dG9uLCBNb2RhbCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcclxuaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi4vQmFja2dyb3VuZCc7XHJcbmltcG9ydCB7IGRhcmtHcmVlbiB9IGZyb20gXCIuLi9Db25zdGFudHNcIjtcclxuaW1wb3J0ICogYXMgSW1hZ2VQaWNrZXIgZnJvbSBcInJlYWN0LW5hdGl2ZS1pbWFnZS1waWNrZXJcIjtcclxuaW1wb3J0IERhdGVUaW1lUGlja2VyIGZyb20gXCJAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9kYXRldGltZXBpY2tlclwiO1xyXG5pbXBvcnQge1xyXG5cdGRiLFxyXG5cdGNvbGxlY3Rpb24sXHJcblx0YWRkRG9jLFxyXG5cdGdldERvY3MsXHJcblx0Z2V0RG9jLFxyXG5cdHN0b3JhZ2UsXHJcblx0YXV0aCxcclxuXHRkb2MsIHNldERvYyx1cGRhdGVEb2NcclxufSBmcm9tICcuLi8uLi9GaXJlYmFzZS9jb25maWcnO1xyXG5pbXBvcnQgeyByZWYsIHVwbG9hZEJ5dGVzUmVzdW1hYmxlLCBnZXREb3dubG9hZFVSTCB9IGZyb20gXCJmaXJlYmFzZS9zdG9yYWdlXCI7XHJcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSBcInJlYWN0LW5hdGl2ZS1lbGVtZW50LWRyb3Bkb3duXCI7XHJcbmltcG9ydCBBbnREZXNpZ24gZnJvbSBcInJlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvQW50RGVzaWduXCI7XHJcbmltcG9ydCB1cGxvYWRJbWcgZnJvbSBcIi4uLy4uL0Fzc2V0cy91cGxvYWRSZWNlaXB0SWNvbi5wbmdcIjtcclxuaW1wb3J0IFRvYXN0IGZyb20gXCJyZWFjdC1uYXRpdmUtcm9vdC10b2FzdFwiO1xyXG5pbXBvcnQgU21zQW5kcm9pZCBmcm9tICdyZWFjdC1uYXRpdmUtZ2V0LXNtcy1hbmRyb2lkJztcclxuXHJcbmNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gRGltZW5zaW9ucy5nZXQoXCJ3aW5kb3dcIik7XHJcbmxldCBkb3dubG9hZFVSTCA9IFwiXCJcclxuXHJcbmNvbnN0IG1vbnRocyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY2FuQmlsbHMoeyByb3V0ZSwgbmF2aWdhdGlvbiB9KSB7XHJcblxyXG5cdGNvbnN0IFtmaWxlLCBzZXRGaWxlXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cdGNvbnN0IFtmZXRjaGVkRGF0YSwgc2V0RmV0Y2hlZERhdGFdID0gdXNlU3RhdGUoXCJcIilcclxuXHRjb25zdCBbb2NyQ2F0ZWdvcnksIHNldE9jckNhdGVnb3J5XSA9IHVzZVN0YXRlKG51bGwpXHJcblx0Y29uc3QgW29jckFtb3VudCwgc2V0T2NyQW1vdW50XSA9IHVzZVN0YXRlKG51bGwpXHJcblx0Y29uc3QgW29jckRhdGUsIHNldE9jckRhdGVdID0gdXNlU3RhdGUobnVsbClcclxuXHRjb25zdCBbaXNJbWdNb2RhbFZpc2libGUsIHNldFZpc2liaWxpdHlPZkltZ01vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbcGlja2VkSW1hZ2VQYXRoLCBzZXRQaWNrZWRJbWFnZVBhdGhdID0gdXNlU3RhdGUoXHJcblx0XHRJbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UodXBsb2FkSW1nKS51cmlcclxuXHQpO1xyXG5cdGNvbnN0IFtkYXRlLCBzZXREYXRlXSA9IHVzZVN0YXRlKG5ldyBEYXRlKCkpO1xyXG5cdGNvbnN0IFthbW91bnQsIHNldEFtb3VudF0gPSB1c2VTdGF0ZSgwKTtcclxuXHRjb25zdCBbZGVzY3JpcHRpb24sIHNldERlc2NyaXB0aW9uXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG5cdGNvbnN0IFttb3VudGVkLCBzZXRNb3VudGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbY2F0ZWdvcnksIHNldENhdGVnb3J5XSA9IHVzZVN0YXRlKFtdKTtcclxuXHRjb25zdCBbaXNDYXRNb2RhbFZpc2libGUsIHNldFZpc2liaWxpdHlPZkNhdE1vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHRjb25zdCBbdXNlckV4cENhdGVnb3JpZXMsIHNldFVzZXJFeHBDYXRlZ29yaWVzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHRjb25zdCBbZ3JwTWVtYmVyc0xpc3QsIHNldEdycE1lbWJlcnNMaXN0XSA9IHVzZVN0YXRlKFtdKTtcclxuXHRjb25zdCBbYWNjQmFsYW5jZSwgc2V0QWNjQmFsYW5jZV0gPSB1c2VTdGF0ZSgwKTtcclxuXHRjb25zdCBbZGF0ZVBpY2tlciwgc2V0RGF0ZVBpY2tlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG5cdGNvbnN0IFtpc0VuYWJsZWQsIHNldElzRW5hYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG5cdGNvbnN0IHRvZ2dsZVN3aXRjaCA9ICh2YWwpID0+IHtcclxuXHJcblx0XHRpZiAoYW1vdW50ID4gMCkge1xyXG5cdFx0XHRzZXRJc0VuYWJsZWQocHJldmlvdXNTdGF0ZSA9PiAhcHJldmlvdXNTdGF0ZSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKGlzRW5hYmxlZClcclxuXHRcdFx0aWYgKHZhbCkge1xyXG5cdFx0XHRcdG5hdmlnYXRpb24ubmF2aWdhdGUoXCJBZGRHcnBFeHBNZW1iZXJzXCIsIHtcclxuXHRcdFx0XHRcdHNwbGl0QW1vdW50OiBhbW91bnQsXHJcblx0XHRcdFx0XHRwcmV2aW91c19zY3JlZW46ICdTY2FuQmlsbHMnXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGFsZXJ0KFwiUGxlYXNlIEVudGVyIEV4cGVuc2UgQW1vdW50IVwiKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dXNlRWZmZWN0KCgpID0+IHtcclxuXHJcblx0XHRpZiAocm91dGUucGFyYW1zIT1udWxsICYmIHJvdXRlLnBhcmFtcy5ncnBNZW1iZXJzTGlzdCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhyb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QsICdyb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QnKTtcclxuXHRcdFx0c2V0R3JwTWVtYmVyc0xpc3QoZ3JwTWVtYmVyc0xpc3QpO1xyXG5cdFx0fVxyXG5cdH0sIFtyb3V0ZS5wYXJhbXNdKVxyXG5cclxuXHJcblx0dXNlRWZmZWN0KCgpID0+IHtcclxuXHRcdGlmIChmZXRjaGVkRGF0YSAhPSBcIlwiKSB7XHJcblx0XHRcdHZhciBmbGFnID0gZmFsc2U7XHJcblx0XHRcdHVzZXJFeHBDYXRlZ29yaWVzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuXHRcdFx0XHRpZiAoaXRlbS50b1VwcGVyQ2FzZSgpID09IGZldGNoZWREYXRhLmRvY3VtZW50LmluZmVyZW5jZS5wcmVkaWN0aW9uLmNhdGVnb3J5LnZhbHVlLnRvVXBwZXJDYXNlKCkpIHtcclxuXHRcdFx0XHRcdHNldE9jckNhdGVnb3J5KGl0ZW0pO1xyXG5cdFx0XHRcdFx0c2V0U2VsZWN0ZWRDYXRlZ29yeShpdGVtKTtcclxuXHRcdFx0XHRcdGZsYWcgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdGlmICghZmxhZykge1xyXG5cdFx0XHRcdHNldE9jckNhdGVnb3J5KGZldGNoZWREYXRhLmRvY3VtZW50LmluZmVyZW5jZS5wcmVkaWN0aW9uLmNhdGVnb3J5LnZhbHVlKTtcclxuXHRcdFx0XHRzZXRTZWxlY3RlZENhdGVnb3J5KGZldGNoZWREYXRhLmRvY3VtZW50LmluZmVyZW5jZS5wcmVkaWN0aW9uLmNhdGVnb3J5LnZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzZXRBbW91bnQoZmV0Y2hlZERhdGEuZG9jdW1lbnQuaW5mZXJlbmNlLnByZWRpY3Rpb24udG90YWxfYW1vdW50LnZhbHVlICsgXCJcIik7XHJcblx0XHRcdHNldE9jckFtb3VudChmZXRjaGVkRGF0YS5kb2N1bWVudC5pbmZlcmVuY2UucHJlZGljdGlvbi50b3RhbF9hbW91bnQudmFsdWUpXHJcblx0XHRcdHNldE9jckRhdGUoZmV0Y2hlZERhdGEuZG9jdW1lbnQuaW5mZXJlbmNlLnByZWRpY3Rpb24uZGF0ZS52YWx1ZSlcclxuXHRcdFx0Y29uc29sZS5sb2cob2NyQ2F0ZWdvcnksIG9jckFtb3VudCwgb2NyRGF0ZSwgdHlwZW9mIChuZXcgRGF0ZShvY3JEYXRlKSksICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcclxuXHRcdH1cclxuXHR9LCBbZmV0Y2hlZERhdGFdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0Y29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGNhdExpc3QgPSBbXTtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCB1c2VyID0gYXdhaXQgZ2V0RG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSk7XHJcblx0XHRcdFx0dXNlci5kYXRhKCkuZXhwQ2F0ZWdvcmllcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHQvLyAgIGNvbnNvbGUubG9nKGRvYy5pZCwgSlNPTi5zdHJpbmdpZnkoZG9jLmRhdGEoKSkpO1xyXG5cdFx0XHRcdFx0Z2V0Y2F0ID0geyBsYWJlbDogaXRlbSwgdmFsdWU6IGl0ZW0gfTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGdldGNhdCk7XHJcblx0XHRcdFx0XHRjYXRMaXN0LnB1c2goZ2V0Y2F0KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh1c2VyLmRhdGEoKSAsIFwidXNlclwiKTtcclxuXHRcdFx0XHQvLyBjYXRMaXN0LnB1c2godXNlci5kYXRhKCkuZXhwQ2F0ZWdvcmllcyk7XHJcblx0XHRcdFx0Y2F0TGlzdC5wdXNoKHsgbGFiZWw6IFwib3RoZXJcIiwgdmFsdWU6IFwib3RoZXJcIiB9KTtcclxuXHRcdFx0XHRzZXRDYXRlZ29yeShjYXRMaXN0KTtcclxuXHRcdFx0XHRzZXRVc2VyRXhwQ2F0ZWdvcmllcyh1c2VyLmRhdGEoKS5leHBDYXRlZ29yaWVzKTtcclxuXHRcdFx0XHRzZXRBY2NCYWxhbmNlKHVzZXIuZGF0YSgpLmFjY0JhbGFuY2UpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHVzZXIuZGF0YSgpLmV4cENhdGVnb3JpZXMsIFwidXNlckV4cENhdGVnb3JpZXNcIik7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coY2F0ZWdvcnkpO1xyXG5cdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBkb2N1bWVudDogXCIsIGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNldE1vdW50ZWQodHJ1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0bG9hZERhdGEoKTtcclxuXHR9XHJcblx0XHQsIFtdKTtcclxuXHJcblxyXG5cdGZ1bmN0aW9uIHNob3dEYXRlUGlja2VyKCkge1xyXG5cdFx0c2V0RGF0ZVBpY2tlcih0cnVlKTtcclxuXHR9XHJcblxyXG5cclxuXHRmdW5jdGlvbiBvbkRhdGVTZWxlY3RlZChldmVudCwgdmFsdWUpIHtcclxuXHRcdHNldERhdGUodmFsdWUpO1xyXG5cdFx0c2V0RGF0ZVBpY2tlcihmYWxzZSk7XHJcblx0fVxyXG5cclxuXHRjb25zdCBbc2VsZWN0ZWRDYXRlZ29yeSwgc2V0U2VsZWN0ZWRDYXRlZ29yeV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuXHJcblx0Y29uc3Qgc2hvd0ltYWdlUGlja2VyID0gKCkgPT4ge1xyXG5cdFx0SW1hZ2VQaWNrZXIubGF1bmNoSW1hZ2VMaWJyYXJ5KClcclxuXHRcdFx0LnRoZW4oKHJlc3VsdCkgPT4ge1xyXG5cdFx0XHRcdGlmIChyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHNldFBpY2tlZEltYWdlUGF0aChyZXN1bHQuYXNzZXRzWzBdLnVyaSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuY2F0Y2goKGVycm9yKSA9PiB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8vIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIFwiT3BlbiBjYW1lcmFcIiBidXR0b24gcHJlc3NlZFxyXG5cdGNvbnN0IG9wZW5DYW1lcmEgPSAoKSA9PiB7XHJcblx0XHRJbWFnZVBpY2tlci5sYXVuY2hDYW1lcmEoKVxyXG5cdFx0XHQudGhlbigocmVzdWx0KSA9PiB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2cocmVzdWx0LmFzc2V0c1swXS51cmksIFwiZmlsZVwiKTtcclxuXHRcdFx0XHRzZXRQaWNrZWRJbWFnZVBhdGgocmVzdWx0LmFzc2V0c1swXS51cmkpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuY2F0Y2goKGVycm9yKSA9PiB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBoYW5kbGVGaWxlUGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IERvY3VtZW50UGlja2VyLnBpY2soe1xyXG5cdFx0XHRcdHR5cGU6IFtEb2N1bWVudFBpY2tlci50eXBlcy5hbGxGaWxlc10sXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzZXRGaWxlKHJlc3VsdCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKHJlc3VsdFswXS51cmkpO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGVycik7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Y29uc3QgbWFrZVJlcXVlc3QgPSBhc3luYyAoKSA9PiB7XHJcblxyXG5cdFx0Y29uc3QgZmlsZVVyaSA9IHBpY2tlZEltYWdlUGF0aDtcclxuXHRcdC8vIGNvbnN0IGZpbGVOYW1lID0gUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyA/IGZpbGUuc3BsaXQoJy8nKS5wb3AoKSA6ICdSZWNlaXB0LmpwZyc7XHJcblx0XHQvLyBjb25zdCBmaWxlRGF0YSA9IGF3YWl0IFJORmV0Y2hCbG9iLmZzLnJlYWRGaWxlKGZpbGVVcmksICdiYXNlNjQnKTtcclxuXHRcdGNvbnN0IG1pbWVUeXBlID0gJ2ltYWdlL2pwZWcnO1xyXG5cclxuXHRcdC8vIGlmKGZpbGVVcmkpXHJcblx0XHQvLyB7XHJcblx0XHRjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcblx0XHRkYXRhLmFwcGVuZCgnZG9jdW1lbnQnLCB7IHVyaTogZmlsZVVyaSwgdHlwZTogJ2ltYWdlL2pwZWcnLCBuYW1lOiAncmVjZWlwdCcsIH0pO1xyXG5cdFx0Y29uc29sZS5sb2coZGF0YS5fcGFydHMpXHJcblxyXG5cdFx0Y29uc3QgY29uZmlnID0ge1xyXG5cdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0dXJsOiAnaHR0cDovLzE5Mi4xNjguMjAzLjE0NC9wcm9kdWN0cy9taW5kZWUvZXhwZW5zZV9yZWNlaXB0cy92NC9wcmVkaWN0JyxcclxuXHRcdFx0aGVhZGVyczoge1xyXG5cdFx0XHRcdEF1dGhvcml6YXRpb246ICc0ZGEwMWYxYTczMzgzMzBjMWZjZjkzZTNkYjEzOWExNicsXHJcblx0XHRcdH0sXHJcblx0XHRcdGRhdGEsXHJcblx0XHR9O1xyXG5cdFx0Ly8gfVxyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goY29uZmlnKTtcclxuXHRcdFx0bGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuXHJcblx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJSZXNwb25zZSBcIiwgdGhpcy5yZXNwb25zZVRleHQuZG9jdW1lbnQpO1xyXG5cdFx0XHRcdFx0c2V0RmV0Y2hlZERhdGEoSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHR4aHIub3BlbihcIlBPU1RcIiwgXCJodHRwczovL2FwaS5taW5kZWUubmV0L3YxL3Byb2R1Y3RzL21pbmRlZS9leHBlbnNlX3JlY2VpcHRzL3Y0L3ByZWRpY3RcIik7XHJcblx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIjRkYTAxZjFhNzMzODMzMGMxZmNmOTNlM2RiMTM5YTE2XCIpO1xyXG5cdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcignY29udGVudC10eXBlJywgJ211bHRpcGFydC9mb3JtLWRhdGEnKTtcclxuXHJcblx0XHRcdHhoci5zZW5kKGRhdGEpO1xyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGNvbnN0IHNhdmVFeHBlbnNlID0gYXN5bmMgKCkgPT4ge1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKGdycE1lbWJlcnNMaXN0LCAnZ3JwTWVtYmVyc0xpc3RJbicpXHJcblx0XHR0cnkge1xyXG5cdFx0XHRpZiAoYW1vdW50ID09IDApIHtcclxuXHRcdFx0XHRsZXQgdG9hc3QgPSBUb2FzdC5zaG93KFwiUGxlYXNlIGVudGVyIGFtb3VudC5cIiwge1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246IFRvYXN0LmR1cmF0aW9ucy5MT05HLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gaGlkZVRvYXN0KCkge1xyXG5cdFx0XHRcdFx0VG9hc3QuaGlkZSh0b2FzdCk7XHJcblx0XHRcdFx0fSwgODAwKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChzZWxlY3RlZENhdGVnb3J5ID09IFwiXCIpIHtcclxuXHRcdFx0XHRsZXQgdG9hc3QgPSBUb2FzdC5zaG93KFwiUGxlYXNlIHNlbGVjdCBjYXRlZ29yeS5cIiwge1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246IFRvYXN0LmR1cmF0aW9ucy5MT05HLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gaGlkZVRvYXN0KCkge1xyXG5cdFx0XHRcdFx0VG9hc3QuaGlkZSh0b2FzdCk7XHJcblx0XHRcdFx0fSwgODAwKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0VuYWJsZWQgJiYgKHJvdXRlLnBhcmFtcz09bnVsbCB8fCAocm91dGUucGFyYW1zIT1udWxsICYmIHJvdXRlLnBhcmFtcy5ncnBNZW1iZXJzTGlzdCE9bnVsbCAmJiByb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QubGVuZ3RoPT0wKSkpe1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vIEFkZCBhIFRvYXN0IG9uIHNjcmVlbi5cclxuXHRcdFx0XHRsZXQgdG9hc3QgPSBUb2FzdC5zaG93KFwiUGxlYXNlIGFkZCBncm91cCBtZW1iZXJzIHRvIHNwbGl0IGFuIGV4cGVuc2UuXCIsIHtcclxuXHRcdFx0XHRcdGR1cmF0aW9uOiBUb2FzdC5kdXJhdGlvbnMuTE9ORyxcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gWW91IGNhbiBtYW51YWxseSBoaWRlIHRoZSBUb2FzdCwgb3IgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGRpc2FwcGVhciBhZnRlciBhIGBkdXJhdGlvbmAgbXMgdGltZW91dC5cclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uIGhpZGVUb2FzdCgpIHtcclxuXHRcdFx0XHRcdFRvYXN0LmhpZGUodG9hc3QpO1xyXG5cdFx0XHRcdH0sIDgwMCk7XHJcblxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuXHRcdFx0aWYgKHBpY2tlZEltYWdlUGF0aCAhPSBJbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UodXBsb2FkSW1nKS51cmkpIHtcclxuXHRcdFx0XHRwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHRcdFx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBibG9iSW1hZ2UgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdFx0XHRcdGNvbnN0IG1ldGFkYXRhID0ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRlbnRUeXBlOiBcImltYWdlL2pwZWdcIixcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RvcmFnZVJlZiA9IHJlZihzdG9yYWdlLCBcIkV4cEltYWdlcy9cIiArIERhdGUubm93KCkpO1xyXG5cdFx0XHRcdFx0XHRjb25zdCB1cGxvYWRUYXNrID0gdXBsb2FkQnl0ZXNSZXN1bWFibGUoc3RvcmFnZVJlZiwgYmxvYkltYWdlLCBtZXRhZGF0YSk7XHJcblx0XHRcdFx0XHRcdHVwbG9hZFRhc2sub24oXHJcblx0XHRcdFx0XHRcdFx0XCJzdGF0ZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHRcdFx0KHNuYXBzaG90KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBwcm9ncmVzcyA9IChzbmFwc2hvdC5ieXRlc1RyYW5zZmVycmVkIC8gc25hcHNob3QudG90YWxCeXRlcykgKiAxMDA7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJVcGxvYWQgaXMgXCIgKyBwcm9ncmVzcyArIFwiJSBkb25lXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChzbmFwc2hvdC5zdGF0ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwicGF1c2VkXCI6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJVcGxvYWQgaXMgcGF1c2VkXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwicnVubmluZ1wiOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiVXBsb2FkIGlzIHJ1bm5pbmdcIik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHQoZXJyb3IpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoZXJyb3IuY29kZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwic3RvcmFnZS91bmF1dGhvcml6ZWRcIjpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiVXNlciBkb2Vzbid0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlIG9iamVjdFwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJzdG9yYWdlL2NhbmNlbGVkXCI6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgY2FuY2VsZWQgdGhlIHVwbG9hZFwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJzdG9yYWdlL3Vua25vd25cIjpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiVW5rbm93biBlcnJvciBvY2N1cnJlZCwgaW5zcGVjdCBlcnJvci5zZXJ2ZXJSZXNwb25zZVwiKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGRvd25sb2FkVVJMID0gYXdhaXQgZ2V0RG93bmxvYWRVUkwodXBsb2FkVGFzay5zbmFwc2hvdC5yZWYpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJGaWxlIGF2YWlsYWJsZSBhdFwiLCBkb3dubG9hZFVSTCk7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRQaWNrZWRJbWFnZVBhdGgoZG93bmxvYWRVUkwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWRcIikpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImJsb2JcIjtcclxuXHRcdFx0XHRcdHhoci5vcGVuKFwiR0VUXCIsIHBpY2tlZEltYWdlUGF0aCwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR4aHIuc2VuZChudWxsKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0YXdhaXQgcHJvbWlzZTtcclxuXHRcdFx0XHRzZXRQaWNrZWRJbWFnZVBhdGgoZG93bmxvYWRVUkwpO1xyXG5cdFx0XHRcdGxldCBkYXRhXzEgPSB7XHJcblx0XHRcdFx0XHRleHBBbW91bnQ6IGFtb3VudCxcclxuXHRcdFx0XHRcdGV4cERhdGU6IGRhdGUsXHJcblx0XHRcdFx0XHRleHBDYXRlZ29yeTogc2VsZWN0ZWRDYXRlZ29yeSxcclxuXHRcdFx0XHRcdGV4cERlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcclxuXHRcdFx0XHRcdGdyb3VwRXhwOiBpc0VuYWJsZWQsXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAocGlja2VkSW1hZ2VQYXRoICE9IEltYWdlLnJlc29sdmVBc3NldFNvdXJjZSh1cGxvYWRJbWcpLnVyaSAmJiBkb3dubG9hZFVSTCAhPSBcIlwiKSB7XHJcblx0XHRcdFx0XHRkYXRhXzEuZXhwSW1hZ2UgPSBkb3dubG9hZFVSTDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChpc0VuYWJsZWQpIHtcclxuXHRcdFx0XHRcdGRhdGFfMS5ncnBNZW1iZXJzTGlzdCA9IHJvdXRlLnBhcmFtcy5ncnBNZW1iZXJzTGlzdDtcclxuXHRcdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0XHQvLyBjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoXHJcblx0XHRcdFx0Ly8gXHRjb2xsZWN0aW9uKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSwgXCJFeHBlbnNlXCIpLCBkYXRhXzEpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoXHJcblx0XHRcdFx0XHRjb2xsZWN0aW9uKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSwgXCJFeHBlbnNlXCIpLCBkYXRhXzEpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBxdWVyeVNuYXBzaG90RXhwID0gYXdhaXQgZ2V0RG9jcyhjb2xsZWN0aW9uKGRiLCBcIkV4cGVuc2VcIikpO1xyXG5cdFx0XHRcdHF1ZXJ5U25hcHNob3RFeHAuZm9yRWFjaCgoZG9jKSA9PiB7XHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhkb2MuaWQsIEpTT04uc3RyaW5naWZ5KGRvYy5kYXRhKCkpKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly9VcGRhdGUgYnVkZ2V0XHJcblx0XHRcdFx0Y29uc3QgcmVjb3JkSWQgPSBtb250aHNbZGF0ZS5nZXRNb250aCgpXSArIFwiXCIgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2cocmVjb3JkSWQpO1xyXG5cdFx0XHRcdGNvbnN0IGRvY3VtZW50ID0gYXdhaXQgZ2V0RG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkLCBcIkJ1ZGdldFwiLCByZWNvcmRJZCkpO1xyXG5cdFxyXG5cdFx0XHRcdGlmKGRvY3VtZW50LmRhdGEoKSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjb25zdCBjYXRlZ29yeVdpc2VCdWRnZXQgPSBkb2N1bWVudC5kYXRhKClcclxuXHRcdFx0XHRcdHZhciBpc0NhdGVnb3J5QnVkZ2V0U2V0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHR2YXIgb3RoZXJFeHBJZHggPSAtMTtcclxuXHRcdFx0XHRcdHZhciBzYXZpbmdzSWR4ID0gLTE7XHJcblx0XHRcdFx0XHR2YXIgZG9uZSA9IGZhbHNlO1xyXG5cdFx0XHJcblx0XHRcdFx0XHRpZiAoY2F0ZWdvcnlXaXNlQnVkZ2V0Lm1ldGhvZCA9PT0gJ0VudmVsb3AgTWV0aG9kJykge1xyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnSW5zaWRlIDogJywgY2F0ZWdvcnlXaXNlQnVkZ2V0Lm1ldGhvZClcclxuXHRcclxuXHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBzZWxlY3RlZENhdGVnb3J5KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmJ1ZGdldFNwZW50ID0gaXRlbS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdGlzQ2F0ZWdvcnlCdWRnZXRTZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRcdGlmIChpdGVtLmNhdGVnb3J5ID09IFwiQWRkaXRpb25hbCBFeHBlbnNlc1wiKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRvdGhlckV4cElkeCA9IGlkeDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHJcblx0XHRcdFx0XHRcdGlmICghaXNDYXRlZ29yeUJ1ZGdldFNldCAmJiBvdGhlckV4cElkeCA+IC0xKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldFtvdGhlckV4cElkeF0uYnVkZ2V0U3BlbnQgPSBjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0W290aGVyRXhwSWR4XS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2F0ZWdvcnlXaXNlQnVkZ2V0Lm1ldGhvZCA9PT0gJ1plcm8gQmFzZWQgQnVkZ2V0aW5nJykge1xyXG5cdFxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnSW5zaWRlIDogJywgY2F0ZWdvcnlXaXNlQnVkZ2V0Lm1ldGhvZClcclxuXHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBzZWxlY3RlZENhdGVnb3J5KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmJ1ZGdldFNwZW50ID0gaXRlbS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdGlzQ2F0ZWdvcnlCdWRnZXRTZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRcdGlmIChpdGVtLmNhdGVnb3J5ID09IFwiU2F2aW5nc1wiKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzYXZpbmdzSWR4ID0gaWR4O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKCFpc0NhdGVnb3J5QnVkZ2V0U2V0ICYmIHNhdmluZ3NJZHggPiAtMSkge1xyXG5cdFx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXRbc2F2aW5nc0lkeF0uYnVkZ2V0U3BlbnQgPSBjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0W3NhdmluZ3NJZHhdLmJ1ZGdldFNwZW50ICsgcGFyc2VGbG9hdChhbW91bnQpO1xyXG5cdFx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXRbc2F2aW5nc0lkeF0uYnVkZ2V0U3BlbnQgPSBjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0W3NhdmluZ3NJZHhdLmJ1ZGdldFBsYW5uZWQgLSBwYXJzZUZsb2F0KGFtb3VudCk7XHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ2RlZHVjdGVkIGZyb20gb3RoZXIgZXhwJywgY2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldFtzYXZpbmdzSWR4XS5idWRnZXRTcGVudClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0luc2lkZSA6ICcsIGNhdGVnb3J5V2lzZUJ1ZGdldClcclxuXHRcdFx0XHRcdFx0Y2F0ZWdvcnlXaXNlQnVkZ2V0LmJ1ZGdldC5uZWVkcy5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBzZWxlY3RlZENhdGVnb3J5KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmJ1ZGdldFNwZW50ID0gaXRlbS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdGlzQ2F0ZWdvcnlCdWRnZXRTZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZG9uZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoIWRvbmUpIHtcclxuXHRcdFx0XHRcdFx0XHRjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0LndhbnRzLmZvckVhY2goKGl0ZW0sIGlkeCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0uY2F0ZWdvcnkgPT0gc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtLmJ1ZGdldFNwZW50ID0gaXRlbS5idWRnZXRTcGVudCArIHBhcnNlRmxvYXQoYW1vdW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXNDYXRlZ29yeUJ1ZGdldFNldCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRvbmUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoIWRvbmUpIHtcclxuXHRcdFx0XHRcdFx0XHRjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0LnNhdmluZ3MuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbS5jYXRlZ29yeSA9PSBzZWxlY3RlZENhdGVnb3J5KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW0uYnVkZ2V0U3BlbnQgPSBpdGVtLmJ1ZGdldFNwZW50ICsgcGFyc2VGbG9hdChhbW91bnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpc0NhdGVnb3J5QnVkZ2V0U2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZG9uZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChpdGVtLmNhdGVnb3J5ID09IFwiT3RoZXIgU2F2aW5nc1wiKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG90aGVyRXhwSWR4ID0gaWR4O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFpc0NhdGVnb3J5QnVkZ2V0U2V0ICYmIG90aGVyRXhwSWR4ID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNhdGVnb3J5V2lzZUJ1ZGdldC5idWRnZXQuc2F2aW5nc1tvdGhlckV4cElkeF0uYnVkZ2V0U3BlbnQgPSBjYXRlZ29yeVdpc2VCdWRnZXQuYnVkZ2V0LnNhdmluZ3Nbb3RoZXJFeHBJZHhdLmJ1ZGdldFNwZW50ICsgcGFyc2VGbG9hdChhbW91bnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZG9uZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0XHRcdGF3YWl0IHNldERvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCwgXCJCdWRnZXRcIiwgcmVjb3JkSWQpLCBjYXRlZ29yeVdpc2VCdWRnZXQpO1xyXG5cdFx0XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvL2FkZCBjYXRlZ29yeSB0byB1c2VyIGV4cGVuc2UgY2F0ZWdvcmllcyBpZiBub3QgcHJlc2VudFxyXG5cdFx0XHRcdGlmKCF1c2VyRXhwQ2F0ZWdvcmllcy5pbmNsdWRlcyhzZWxlY3RlZENhdGVnb3J5KSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR1c2VyRXhwQ2F0ZWdvcmllcy5wdXNoKHNlbGVjdGVkQ2F0ZWdvcnkpO1xyXG5cdFx0XHRcdFx0YXdhaXQgdXBkYXRlRG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSwge1xyXG5cdFx0XHRcdFx0XHRleHBDYXRlZ29yaWVzIDogdXNlckV4cENhdGVnb3JpZXMsXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0XHRjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhjb2xsZWN0aW9uKGRiLCBcImV4cGVuc2VcIikpO1xyXG5cdFx0XHRcdHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhkb2MuaWQsIEpTT04uc3RyaW5naWZ5KGRvYy5kYXRhKCkpKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly91cGRhdGUgYWNjb3VudCBiYWxhbmNlXHJcblx0XHRcdFx0YXdhaXQgdXBkYXRlRG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSwge1xyXG5cdFx0XHRcdFx0YWNjQmFsYW5jZTogcGFyc2VGbG9hdChhY2NCYWxhbmNlKSAtIHBhcnNlRmxvYXQoYW1vdW50KSArIFwiXCJcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0aWYgKGlzRW5hYmxlZCkge1xyXG5cdFx0XHRcdFx0Y29uc3QgZG9jdW1lbnQgPSBhd2FpdCBnZXREb2MoZG9jKGRiLCBcIlVzZXJcIiwgYXV0aC5jdXJyZW50VXNlci51aWQpKTtcclxuXHRcdFx0XHRcdGNvbnN0IHVzZXJOYW1lID0gZG9jdW1lbnQuZGF0YSgpLm5hbWU7XHJcblx0XHRcdFx0XHRyb3V0ZS5wYXJhbXMuZ3JwTWVtYmVyc0xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHVzZXJOYW1lICE9IGl0ZW0ubmFtZSkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2UgPSBgJHt1c2VyTmFtZX0gaGFzIHNwbGl0IGEgYmlsbCB3aXRoIHlvdS4gS2luZGx5IHBheSBhbW91bnQgb2YgUnMuJHtpdGVtLmFtb3VudH0uYFxyXG5cdFx0XHRcdFx0XHRcdFNtc0FuZHJvaWQuYXV0b1NlbmQoXHJcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmNvbnRhY3RObyxcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2UsXHJcblx0XHRcdFx0XHRcdFx0XHQoZmFpbCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnRmFpbGVkIHdpdGggdGhpcyBlcnJvcjogJyArIGZhaWwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRcdChzdWNjZXNzKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTTVMgc2VudCBzdWNjZXNzZnVsbHknKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YWxlcnQoXCJSZWNvcmQgQWRkZWQgU3VjY2Vzc2Z1bGx5XCIpO1xyXG5cdFx0XHRcdG5hdmlnYXRpb24ubmF2aWdhdGUoXCJSb290XCIpO1xyXG5cclxuXHRcdFx0fSBjYXRjaCAoZXJyb3JfMSkge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgZG9jdW1lbnQ6IFwiLCBlcnJvcl8xKTtcclxuXHRcdFx0XHR0aHJvdyBlcnJvcl8xO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgZG9jdW1lbnQ6IFwiLCBlKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxCYWNrZ3JvdW5kPlxyXG5cclxuXHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXIyfT5cclxuXHJcblx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5oZWFkQ2VudGVyfT5BZGQgSW1hZ2U8L1RleHQ+XHJcblxyXG5cdFx0XHRcdDxNb2RhbFxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uVHlwZT1cInNsaWRlXCJcclxuXHRcdFx0XHRcdHRyYW5zcGFyZW50XHJcblx0XHRcdFx0XHR2aXNpYmxlPXtpc0ltZ01vZGFsVmlzaWJsZX1cclxuXHRcdFx0XHRcdHByZXNlbnRhdGlvblN0eWxlPVwib3ZlckZ1bGxTY3JlZW5cIlxyXG5cdFx0XHRcdFx0b25EaXNtaXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNldFZpc2liaWxpdHlPZkltZ01vZGFsKCFpc0ltZ01vZGFsVmlzaWJsZSk7XHJcblx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMudmlld1dyYXBwZXJ9PlxyXG5cdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLm1vZGFsVmlld30+XHJcblx0XHRcdFx0XHRcdFx0PFRvdWNoYWJsZU9wYWNpdHkgb25QcmVzcz17c2hvd0ltYWdlUGlja2VyfSBzdHlsZT17c3R5bGVzLnNlbEltZ30+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17eyBjb2xvcjogXCJ3aGl0ZVwiLCBmb250U2l6ZTogMTUsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT4gVXBsb2FkIGltYWdlIDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XHJcblxyXG5cdFx0XHRcdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9e29wZW5DYW1lcmF9IHN0eWxlPXtzdHlsZXMuc2VsSW1nfT5cclxuXHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXt7IGNvbG9yOiBcIndoaXRlXCIsIGZvbnRTaXplOiAxNSwgZm9udFdlaWdodDogJ2JvbGQnIH19PiBUYWtlIFBob3RvIDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XHJcblxyXG5cdFx0XHRcdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9eygpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHNldFZpc2liaWxpdHlPZkltZ01vZGFsKCFpc0ltZ01vZGFsVmlzaWJsZSk7XHJcblx0XHRcdFx0XHRcdFx0fX0+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17eyBjb2xvcjogZGFya0dyZWVuLCBmb250U2l6ZTogMTUsIG1hcmdpblRvcDogMzAgfX0+IENsb3NlIDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XHJcblx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHRcdDwvVmlldz5cclxuXHRcdFx0XHQ8L01vZGFsPlxyXG5cdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5XHJcblx0XHRcdFx0XHRvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiaW1hZ2UgY2xpY2tlZFwiKTtcclxuXHRcdFx0XHRcdFx0c2V0VmlzaWJpbGl0eU9mSW1nTW9kYWwodHJ1ZSk7XHJcblx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHtwaWNrZWRJbWFnZVBhdGggIT09IFwiXCIgJiYgKFxyXG5cdFx0XHRcdFx0XHQ8SW1hZ2VcclxuXHRcdFx0XHRcdFx0XHRzb3VyY2U9e3sgdXJpOiBwaWNrZWRJbWFnZVBhdGggfX1cclxuXHRcdFx0XHRcdFx0XHRzdHlsZT17eyB3aWR0aDogNTAsIGhlaWdodDogNTAsIG1hcmdpbjogMTUsIGFsaWduU2VsZjogJ2NlbnRlcicgfX1cclxuXHRcdFx0XHRcdFx0XHRvblByZXNzPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImltYWdlIGNsaWNrZWRcIik7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZJbWdNb2RhbCh0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0KX1cclxuXHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XHJcblxyXG5cdFx0XHRcdDxUb3VjaGFibGVPcGFjaXR5XHJcblx0XHRcdFx0XHRvblByZXNzPXttYWtlUmVxdWVzdH1cclxuXHRcdFx0XHRcdHN0eWxlPXt7XHJcblx0XHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogZGFya0dyZWVuLFxyXG5cdFx0XHRcdFx0XHRib3JkZXJSYWRpdXM6IDIwMCxcclxuXHRcdFx0XHRcdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHRcdFx0XHRcdHdpZHRoOiAyNTAsXHJcblx0XHRcdFx0XHRcdHBhZGRpbmdWZXJ0aWNhbDogNSxcclxuXHRcdFx0XHRcdFx0bWFyZ2luVmVydGljYWw6IDEwLFxyXG5cdFx0XHRcdFx0XHRhbGlnblNlbGY6ICdjZW50ZXInLFxyXG5cdFx0XHRcdFx0XHQvL21hcmdpblRvcDozMCxcclxuXHRcdFx0XHRcdH19PlxyXG5cdFx0XHRcdFx0PFRleHQgc3R5bGU9e3sgY29sb3I6IFwid2hpdGVcIiwgZm9udFNpemU6IDIwLCBmb250V2VpZ2h0OiAnYm9sZCcsIG1hcmdpbjogMCB9fT4gU2F2ZSA8L1RleHQ+XHJcblx0XHRcdFx0PC9Ub3VjaGFibGVPcGFjaXR5PlxyXG5cdFx0XHQ8L1ZpZXc+XHJcblxyXG5cdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcjJ9PlxyXG5cclxuXHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmhlYWRDZW50ZXJ9PkZldGNoZWQgRGF0YTwvVGV4dD5cclxuXHJcblx0XHRcdFx0eyhvY3JDYXRlZ29yeSAhPT0gbnVsbCAmJiBvY3JBbW91bnQgIT0gbnVsbCAmJiBvY3JEYXRlICE9IG51bGwpICYmIChcclxuXHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMubWFpbkNvbnRhaW5lcn0+XHJcblx0XHRcdFx0XHRcdDxTY3JvbGxWaWV3PlxyXG5cdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyMX0+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0UGFpcn0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuaGVhZH0+QW1vdW50OjwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PFRleHRJbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGtleWJvYXJkVHlwZT1cIm51bWVyaWNcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlPXtzdHlsZXMuaW5wdXRUZXh0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRWYWx1ZT17KG9jckFtb3VudCkudG9TdHJpbmcoKX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZVRleHQ9e3NldEFtb3VudH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cclxuXHJcblx0XHRcdFx0XHRcdFx0XHR7Y29uc29sZS5sb2cobmV3IERhdGUob2NyRGF0ZSksICcqKioqKioqKioqKioqKioqKioqKioqMTIzKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKionKX1cclxuXHRcdFx0XHRcdFx0XHRcdHtkYXRlUGlja2VyICYmIChcclxuXHRcdFx0XHRcdFx0XHRcdFx0PERhdGVUaW1lUGlja2VyXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9e25ldyBEYXRlKG9jckRhdGUpfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1vZGU9e1wiZGF0ZVwifVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRpc3BsYXk9e1BsYXRmb3JtLk9TID09PSBcImlvc1wiID8gXCJzcGlubmVyXCIgOiBcImRlZmF1bHRcIn1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpczI0SG91cj17dHJ1ZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17b25EYXRlU2VsZWN0ZWR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy5kYXRlUGlja2VyfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdFx0KX1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQ8VmlldyBWaWV3IHN0eWxlPXtzdHlsZXMuaW5wdXRQYWlyfT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5oZWFkfT5EYXRlOiA8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdHshZGF0ZVBpY2tlciAmJiAoXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dFRleHR9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFByZXNzYWJsZSBzdHlsZT17c3R5bGVzLmRhdGVCdXR0b259IG9uUHJlc3M9e3Nob3dEYXRlUGlja2VyfT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQ+e2RhdGUgIT0gbnVsbCA/IChkYXRlLmdldERhdGUoKSArICcgLyAnICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpICsgJyAvICcgKyBkYXRlLmdldEZ1bGxZZWFyKCkpIDogb2NyRGF0ZX08L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1ByZXNzYWJsZT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0XHRcdCl9XHJcblx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0PC9WaWV3PlxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcjF9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5oZWFkQ2VudGVyfT5TZWxlY3QgQ2F0ZWdvcnk8L1RleHQ+XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0PERyb3Bkb3duXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHlsZT17c3R5bGVzLmRyb3Bkb3dufVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlclN0eWxlPXtzdHlsZXMucGxhY2Vob2xkZXJTdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0c2VsZWN0ZWRUZXh0U3R5bGU9e3N0eWxlcy5zZWxlY3RlZFRleHRTdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0aW5wdXRTZWFyY2hTdHlsZT17c3R5bGVzLmlucHV0U2VhcmNoU3R5bGV9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGljb25TdHlsZT17c3R5bGVzLmljb25TdHlsZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YT17Y2F0ZWdvcnl9XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNlYXJjaFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRtYXhIZWlnaHQ9ezMwMH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0bGFiZWxGaWVsZD1cImxhYmVsXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWVGaWVsZD1cInZhbHVlXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9e29jckNhdGVnb3J5fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzZWFyY2hQbGFjZWhvbGRlcj1cIlNlYXJjaC4uLlwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlPXtvY3JDYXRlZ29yeX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9eyhpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0udmFsdWUgIT0gXCJvdGhlclwiKSBzZXRTZWxlY3RlZENhdGVnb3J5KGl0ZW0udmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0VmlzaWJpbGl0eU9mQ2F0TW9kYWwodHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8TW9kYWxcclxuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGlvblR5cGU9XCJzbGlkZVwiXHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc3BhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0dmlzaWJsZT17aXNDYXRNb2RhbFZpc2libGV9XHJcblx0XHRcdFx0XHRcdFx0XHRwcmVzZW50YXRpb25TdHlsZT1cIm92ZXJGdWxsU2NyZWVuXCJcclxuXHRcdFx0XHRcdFx0XHRcdG9uRGlzbWlzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZDYXRNb2RhbCghaXNDYXRNb2RhbFZpc2libGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLnZpZXdXcmFwcGVyfT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5tb2RhbFZpZXd9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0SW5wdXRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRW50ZXIgQ2F0ZWdvcnlcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3N0eWxlcy50ZXh0SW5wdXR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZVRleHQ9eyh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRTZWxlY3RlZENhdGVnb3J5KHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ey8qKiBUaGlzIGJ1dHRvbiBpcyByZXNwb25zaWJsZSB0byBjbG9zZSB0aGUgbW9kYWwgKi99XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PEJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGl0bGU9XCJBZGQgQ2F0ZWdvcnlcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17KCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmlsaXR5T2ZDYXRNb2RhbCghaXNDYXRNb2RhbFZpc2libGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRDYXRlZ29yeShbXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Li4uY2F0ZWdvcnksXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0eyBsYWJlbDogc2VsZWN0ZWRDYXRlZ29yeSwgdmFsdWU6IHNlbGVjdGVkQ2F0ZWdvcnkgfSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFkZENhdGVnb3J5VG9GRChzZWxlY3RlZENhdGVnb3J5KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC9WaWV3PlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9WaWV3PlxyXG5cdFx0XHRcdFx0XHRcdDwvTW9kYWw+XHJcblxyXG5cdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtbc3R5bGVzLmdycEV4cGNvbnRhaW5lciwgc3R5bGVzLmNvbnRhaW5lcjFdfT5cclxuXHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuZ3JwRXhwVGV4dH0+R3JvdXAgRXhwZW5zZSA6IDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHRcdDxTd2l0Y2hcclxuXHRcdFx0XHRcdFx0XHRcdFx0dHJhY2tDb2xvcj17eyBmYWxzZTogJyM3Njc1NzcnLCB0cnVlOiAnbGlnaHRncmVlbicgfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0dGh1bWJDb2xvcj17aXNFbmFibGVkID8gJ2dyZWVuJyA6ICd3aGl0ZSd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uVmFsdWVDaGFuZ2U9eyh2YWwpID0+IHRvZ2dsZVN3aXRjaCh2YWwpfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17aXNFbmFibGVkfVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXIyfT5cclxuXHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuaGVhZH0+QWRkIG5vdGU8L1RleHQ+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VGV4dElucHV0XHJcblx0XHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRGVzY3JpcHRpb25cIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHlsZT17c3R5bGVzLmlucHV0MX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2VUZXh0PXsodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZXREZXNjcmlwdGlvbih2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH19XHJcblx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0XHQ8VG91Y2hhYmxlT3BhY2l0eVxyXG5cdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17c2F2ZUV4cGVuc2V9XHJcblx0XHRcdFx0XHRcdFx0XHRzdHlsZT17e1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRhcmtHcmVlbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ym9yZGVyUmFkaXVzOiAyMDAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR3aWR0aDogMjUwLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRwYWRkaW5nVmVydGljYWw6IDUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdG1hcmdpblZlcnRpY2FsOiAxMCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0YWxpZ25TZWxmOiAnY2VudGVyJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly9tYXJnaW5Ub3A6MzAsXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0fX0+XHJcblx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17eyBjb2xvcjogXCJ3aGl0ZVwiLCBmb250U2l6ZTogMjAsIGZvbnRXZWlnaHQ6ICdib2xkJywgbWFyZ2luOiAwIH19PiBTYXZlIDwvVGV4dD5cclxuXHRcdFx0XHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XHJcblx0XHRcdFx0XHRcdDwvU2Nyb2xsVmlldz5cclxuXHRcdFx0XHRcdDwvVmlldz4pfVxyXG5cclxuXHRcdFx0PC9WaWV3PlxyXG5cdFx0PC9CYWNrZ3JvdW5kPlxyXG5cdCk7XHJcbn1cclxuXHJcblxyXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRib3JkZXJUb3BMZWZ0UmFkaXVzOiA0MCxcclxuXHRcdGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA0MCxcclxuXHRcdGhlaWdodDogaGVpZ2h0ICogMC43LFxyXG5cdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcIiNmZmZcIixcclxuXHRcdG1hcmdpbjogMTUsXHJcblxyXG5cdH0sXHJcblxyXG5cdG1haW5Db250YWluZXI6IHtcclxuXHRcdHBhZGRpbmc6IDUsXHJcblx0XHRmbGV4OiAxLFxyXG5cdFx0aGVpZ2h0OiBcIjEwMCVcIixcclxuXHRcdGp1c3RpZnlDb250ZW50OiBcInNwYWNlLWJldHdlZW5cIlxyXG5cdH0sXHJcblxyXG5cdGNvbnRhaW5lcjE6IHtcclxuXHRcdHdpZHRoOiBcIjEwMCVcIixcclxuXHRcdGFsaWduU2VsZjogXCJjZW50ZXJcIixcclxuXHRcdGJvcmRlclJhZGl1czogMTUsXHJcblx0XHRzaGFkb3dPcGFjaXR5OiAwLjUsXHJcblx0XHRzaGFkb3dDb2xvcjogXCJibGFja1wiLFxyXG5cdFx0c2hhZG93T2Zmc2V0OiB7XHJcblx0XHRcdGhlaWdodDogNSxcclxuXHRcdFx0d2lkdGg6IDVcclxuXHRcdH0sXHJcblx0XHRlbGV2YXRpb246IDUsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcclxuXHRcdG1hcmdpblZlcnRpY2FsOiA1LFxyXG5cdH0sXHJcblxyXG5cdGNvbnRhaW5lcjI6IHtcclxuXHRcdHdpZHRoOiBcIjEwMCVcIixcclxuXHRcdGFsaWduU2VsZjogXCJjZW50ZXJcIixcclxuXHRcdGJvcmRlclJhZGl1czogMTUsXHJcblx0XHRzaGFkb3dPcGFjaXR5OiAwLjUsXHJcblx0XHRzaGFkb3dDb2xvcjogXCJibGFja1wiLFxyXG5cdFx0c2hhZG93T2Zmc2V0OiB7XHJcblx0XHRcdGhlaWdodDogNSxcclxuXHRcdFx0d2lkdGg6IDVcclxuXHRcdH0sXHJcblx0XHRlbGV2YXRpb246IDUsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcclxuXHRcdG1hcmdpblZlcnRpY2FsOiA1LFxyXG5cdFx0cGFkZGluZ1RvcDogNSxcclxuXHRcdHBhZGRpbmdMZWZ0OiAyMCxcclxuXHRcdHBhZGRpbmdSaWdodDogMjAsXHJcblx0fSxcclxuXHRjb250YWluZXJfYnRuX2Jsb2NrOiB7XHJcblx0XHRmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuXHRcdHBhZGRpbmdCb3R0b206IDEwLFxyXG5cdFx0cGFkZGluZ1RvcDogMTAsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1hcm91bmRcIixcclxuXHR9LFxyXG5cdGNvbnRhaW5lcjJfYnRuOiB7XHJcblx0XHRwYWRkaW5nOiAxNSxcclxuXHRcdGZsZXhHcm93OiAxLFxyXG5cdFx0ZmxleFNocmluazogMCxcclxuXHRcdGZsZXhCYXNpczogMTAwLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAxMCxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCIjODQxNTg0XCIsXHJcblx0XHRjb2xvcjogXCJ3aGl0ZVwiLFxyXG5cdFx0d2lkdGg6IDE1MCxcclxuXHRcdG1hcmdpbjogNSxcclxuXHR9LFxyXG5cclxuXHRUaXRsZToge1xyXG5cdFx0Y29sb3I6IFwid2hpdGVcIixcclxuXHRcdGZvbnRTaXplOiA1MCxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdFx0bWFyZ2luVmVydGljYWw6IDIwLFxyXG5cdFx0YWxpZ25TZWxmOiBcImNlbnRlclwiLFxyXG5cdH0sXHJcblxyXG5cdGlucHV0UGFpcjoge1xyXG5cdFx0ZmxleERpcmVjdGlvbjogXCJyb3dcIixcclxuXHRcdGp1c3RpZnlDb250ZW50OiBcInNwYWNlLWJldHdlZW5cIixcclxuXHRcdHBhZGRpbmc6IDEwXHJcblx0fSxcclxuXHJcblx0aGVhZDoge1xyXG5cdFx0Ly8gbWFyZ2luVG9wOjE1LFxyXG5cdFx0Zm9udFdlaWdodDogXCJib2xkXCIsXHJcblx0XHRmb250U2l6ZTogMTYsXHJcblx0XHRjb2xvcjogZGFya0dyZWVuLFxyXG5cdH0sXHJcblxyXG5cdGlucHV0VGV4dDoge1xyXG5cdFx0cGFkZGluZzogMCxcclxuXHRcdGJvcmRlclJhZGl1czogNSxcclxuXHRcdGNvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRwYWRkaW5nSG9yaXpvbnRhbDogNSxcclxuXHRcdHdpZHRoOiAnNjAlJyxcclxuXHRcdGhlaWdodDogMzUsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjIwLDIyMCwgMjIwKScsXHJcblxyXG5cdH0sXHJcblxyXG5cdGlucHV0MToge1xyXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXHJcblx0XHRib3JkZXJDb2xvcjogJyM3NzcnLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAxMCxcclxuXHRcdHBhZGRpbmc6IDEwLFxyXG5cdFx0d2lkdGg6IFwiMTAwJVwiLFxyXG5cdFx0aGVpZ2h0OiA4MCxcclxuXHRcdG1hcmdpblRvcDogMTAsXHJcblx0XHRtYXJnaW5Cb3R0b206IDE1LFxyXG5cdFx0dGV4dEFsaWduVmVydGljYWw6IFwidG9wXCIsXHJcblx0XHR0ZXh0QWxpZ246ICdsZWZ0J1xyXG5cdH0sXHJcblxyXG5cdGhlYWRDZW50ZXI6IHtcclxuXHRcdG1hcmdpblRvcDogMTAsXHJcblx0XHRmb250V2VpZ2h0OiBcImJvbGRcIixcclxuXHRcdGFsaWduU2VsZjogXCJjZW50ZXJcIixcclxuXHRcdGNvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRmb250U2l6ZTogMTZcclxuXHR9LFxyXG5cclxuXHRkcm9wRG93blN0eWxlOiB7XHJcblx0XHR3aWR0aDogJzg1JScsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMiknLFxyXG5cdFx0cGFkZGluZzogNSxcclxuXHRcdGFsaWduU2VsZjogXCJjZW50ZXJcIixcclxuXHRcdGJvcmRlclJhZGl1czogNixcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJ1xyXG5cdH0sXHJcblxyXG5cdGRyb3BEb3duSWNvbjoge1xyXG5cdFx0cmVzaXplTW9kZTogJ2NvbnRhaW4nLFxyXG5cdH0sXHJcblxyXG5cdG1vZGFsOiB7XHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcclxuXHRcdGhlaWdodDogMzAwLFxyXG5cdFx0d2lkdGg6IFwiODAlXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDEwLFxyXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXHJcblx0XHRib3JkZXJDb2xvcjogXCIjZmZmXCIsXHJcblx0XHRtYXJnaW5Ub3A6IDgwLFxyXG5cdFx0bWFyZ2luTGVmdDogNDAsXHJcblx0fSxcclxuXHJcblx0Ly9jYXQgbW9kYWwgc3R5bGVzXHJcblx0dmlld1dyYXBwZXI6IHtcclxuXHRcdGZsZXg6IDEsXHJcblx0XHRhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjIpXCIsXHJcblx0fSxcclxuXHJcblx0bW9kYWxWaWV3OiB7XHJcblx0XHRhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXHJcblx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG5cdFx0dG9wOiBcIjUwJVwiLFxyXG5cdFx0bGVmdDogXCI1MCVcIixcclxuXHRcdGVsZXZhdGlvbjogNSxcclxuXHRcdHRyYW5zZm9ybTogW3sgdHJhbnNsYXRlWDogLSh3aWR0aCAqIDAuNCkgfSwgeyB0cmFuc2xhdGVZOiAtOTAgfV0sXHJcblx0XHRoZWlnaHQ6IDE4MCxcclxuXHRcdHdpZHRoOiB3aWR0aCAqIDAuOCxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCIjZmZmXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDcsXHJcblx0fSxcclxuXHJcblx0dGV4dElucHV0OiB7XHJcblx0XHR3aWR0aDogXCI4MCVcIixcclxuXHRcdGJvcmRlclJhZGl1czogNSxcclxuXHRcdHBhZGRpbmdWZXJ0aWNhbDogOCxcclxuXHRcdHBhZGRpbmdIb3Jpem9udGFsOiAxNixcclxuXHRcdG1hcmdpbkJvdHRvbTogOCxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJyZWRcIixcclxuXHR9LFxyXG5cclxuXHQvLyB0ZXh0OiB7XHJcblx0Ly8gICBmb250U2l6ZTogMjUsXHJcblx0Ly8gICBjb2xvcjogJ3JlZCcsXHJcblx0Ly8gICBwYWRkaW5nOiAzLFxyXG5cdC8vICAgbWFyZ2luQm90dG9tOiAxMCxcclxuXHQvLyAgIHRleHRBbGlnbjogJ2NlbnRlcidcclxuXHQvLyB9LFxyXG5cclxuXHQvLyBTdHlsZSBmb3IgaU9TIE9OTFkuLi5cclxuXHRkYXRlUGlja2VyOiB7XHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiZmxleC1zdGFydFwiLFxyXG5cdFx0d2lkdGg6IDMyMCxcclxuXHRcdGhlaWdodDogNTAsXHJcblx0XHRkaXNwbGF5OiBcImZsZXhcIixcclxuXHR9LFxyXG5cclxuXHRkYXRlTGFiZWw6IHtcclxuXHRcdG1hcmdpblRvcDogMTUsXHJcblx0fSxcclxuXHJcblx0ZGF0ZUJ1dHRvbjoge1xyXG5cclxuXHRcdHBhZGRpbmc6IDcsXHJcblx0XHRhbGlnblNlbGY6IFwiY2VudGVyXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDUsXHJcblx0XHRmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuXHRcdHdpZHRoOiAxODAsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdC8vIGJhY2tncm91bmRDb2xvcjogJ3JnYigyMjAsMjIwLCAyMjApJyxcclxuXHR9LFxyXG5cclxuXHJcblx0Y2F0SXRlbToge1xyXG5cdFx0cGFkZGluZzogMTAsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwic2t5Ymx1ZVwiLFxyXG5cdFx0Zm9udFNpemU6IDE0LFxyXG5cdFx0bWFyZ2luSG9yaXpvbnRhbDogMTAsXHJcblx0XHRtYXJnaW5Ub3A6IDI0LFxyXG5cdH0sXHJcblxyXG5cdGRyb3Bkb3duOiB7XHJcblx0XHRtYXJnaW46IDEwLFxyXG5cdFx0d2lkdGg6ICc4NSUnLFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjIpJyxcclxuXHRcdHBhZGRpbmc6IDUsXHJcblx0XHRhbGlnblNlbGY6IFwiY2VudGVyXCIsXHJcblx0XHRib3JkZXJSYWRpdXM6IDYsXHJcblx0XHQvLyBmbGV4RGlyZWN0aW9uOidyb3cnLFxyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcidcclxuXHR9LFxyXG5cclxuXHRpY29uOiB7XHJcblx0XHRtYXJnaW5SaWdodDogNSxcclxuXHR9LFxyXG5cdHBsYWNlaG9sZGVyU3R5bGU6IHtcclxuXHRcdGZvbnRTaXplOiAxNCxcclxuXHR9LFxyXG5cdHNlbGVjdGVkVGV4dFN0eWxlOiB7XHJcblx0XHRmb250U2l6ZTogMTQsXHJcblx0fSxcclxuXHRpY29uU3R5bGU6IHtcclxuXHRcdHdpZHRoOiAyMCxcclxuXHRcdGhlaWdodDogMjAsXHJcblx0fSxcclxuXHRpbnB1dFNlYXJjaFN0eWxlOiB7XHJcblx0XHRoZWlnaHQ6IDQwLFxyXG5cdFx0Zm9udFNpemU6IDE2LFxyXG5cdH0sXHJcblxyXG5cdHNlbEltZzoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBkYXJrR3JlZW4sXHJcblx0XHRib3JkZXJSYWRpdXM6IDEwLFxyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHR3aWR0aDogMTUwLFxyXG5cdFx0cGFkZGluZ1ZlcnRpY2FsOiA1LFxyXG5cdFx0bWFyZ2luVmVydGljYWw6IDEwLFxyXG5cdFx0YWxpZ25TZWxmOiAnY2VudGVyJyxcclxuXHRcdG1hcmdpblRvcDogNSxcclxuXHR9LFxyXG5cdGdycEV4cGNvbnRhaW5lcjoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjIpJyxcclxuXHRcdGJvcmRlclJhZGl1czogMTAsXHJcblx0XHRmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0XHRtYXJnaW5WZXJ0aWNhbDogNSxcclxuXHRcdGhlaWdodDogNTAsXHJcblx0XHRwYWRkaW5nSG9yaXpvbnRhbDogMjAsXHJcblx0fSxcclxuXHRncnBFeHBUZXh0OiB7XHJcblx0XHRjb2xvcjogZGFya0dyZWVuLFxyXG5cdFx0Zm9udFdlaWdodDogJ2JvbGQnXHJcblx0fVxyXG59KTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBQyx1QkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQU8sZUFBQSxHQUFBSixzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQVEsT0FBQSxHQUFBUixPQUFBO0FBVUEsSUFBQVMsUUFBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsMkJBQUEsR0FBQVYsT0FBQTtBQUNBLElBQUFXLFVBQUEsR0FBQVIsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFZLGtCQUFBLEdBQUFULHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBYSxxQkFBQSxHQUFBVixzQkFB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