4aec349bfcfe9b591dec5345ed1f1d7a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../../Firebase/config");
var _Constants = require("../Constants");
var _native = require("@react-navigation/native");
var _reactNativePaper = require("react-native-paper");
var _reactNative2 = _interopRequireWildcard(require("@notifee/react-native"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var notifyTime = 0;
var FixedExp = function FixedExp(_ref) {
  var navigation = _ref.navigation,
    route = _ref.route;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    fixedExpenses = _useState2[0],
    setFixedExpenses = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    extraData = _useState4[0],
    setExtraData = _useState4[1];
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isEnabled = _React$useState2[0],
    setIsEnabled = _React$useState2[1];
  var _React$useState3 = _react.default.useState(),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    ExpName = _React$useState4[0],
    setExpName = _React$useState4[1];
  var _React$useState5 = _react.default.useState(new Date()),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    date = _React$useState6[0],
    setDate = _React$useState6[1];
  var _React$useState7 = _react.default.useState(""),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    notificationId = _React$useState8[0],
    setNotificationId = _React$useState8[1];
  _react.default.useEffect(function () {
    if (route.params != null) {
      console.log(route.params.FixedExp);
    }
    console.log("changes");
  }, [route.params]);
  _react.default.useEffect(function () {
    var unsubscribe = navigation.addListener('focus', function () {
      fetchFixedExp();
    });
    return unsubscribe;
  }, [navigation]);
  _react.default.useEffect(function () {
    onCreateTriggerNotificationToAddExpenses();
    console.log("Add expenses notification triggered....");
  }, []);
  var fetchFixedExp = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var querySnapshot = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "User", _config.auth.currentUser.uid, "FixedExpenses"));
        var tempFixedExp = [];
        querySnapshot.forEach(function (doc) {
          console.log(doc.id, " => ", doc.data());
          tempFixedExp.push(Object.assign({
            id: doc.id
          }, doc.data()));
        });
        setFixedExpenses(tempFixedExp);
        console.log(tempFixedExp);
      } catch (e) {
        console.log(e);
      }
    });
    return function fetchFixedExp() {
      return _ref2.apply(this, arguments);
    };
  }();
  var deleteFixedExp = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (item) {
      try {
        yield (0, _config.deleteDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "FixedExpenses", item.id));
        console.log("Deleted");
      } catch (e) {
        console.log("Error");
      }
      var filterData = fixedExpenses.filter(function (curr) {
        return curr !== item;
      });
      console.log(filterData);
      console.log(filterData.length);
      setFixedExpenses(filterData);
    });
    return function deleteFixedExp(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  _react.default.useEffect(function () {
    console.log(fixedExpenses, "fixedExpenses");
    setExtraData(true);
    setExtraData(false);
  }, [fixedExpenses]);
  var getDateFormat = function getDateFormat(date) {
    var tempDate = new Date(date.seconds * 1000 + date.nanoseconds / 1000000);
    return tempDate.getDate() + '/' + (tempDate.getMonth() + 1) + '/' + tempDate.getFullYear();
  };
  function onCreateTriggerNotification(item) {
    var notifyTime;
    notifyTime = Date.now() + 1000 * 60 * 1;
    var channelId;
    _reactNative2.default.createChannel({
      id: 'default',
      name: 'Default Channel'
    }).then(function (id) {
      channelId = id;
      var trigger = {
        id: notificationId + ExpName,
        type: _reactNative2.TriggerType.TIMESTAMP,
        timestamp: notifyTime
      };
      _reactNative2.default.createTriggerNotification({
        id: notificationId + ExpName,
        title: 'Time to pay fixed expense',
        body: ExpName,
        android: {
          channelId: channelId
        }
      }, trigger).then(function (notId) {
        item.triggerNotificationId = notId;
      });
    });
  }
  function onCreateTriggerNotificationToAddExpenses() {
    notifyTime = Date.now() + 1000 * 60 * 1;
    var channelId;
    _reactNative2.default.createChannel({
      id: 'default',
      name: 'Default Channel'
    }).then(function (id) {
      channelId = id;
      var trigger = {
        type: _reactNative2.TriggerType.TIMESTAMP,
        timestamp: notifyTime
      };
      _reactNative2.default.createTriggerNotification({
        title: 'Time to add your expenses',
        body: ExpName,
        android: {
          channelId: channelId
        }
      }, trigger);
    });
  }
  function cancelNotifee(_x2) {
    return _cancelNotifee.apply(this, arguments);
  }
  function _cancelNotifee() {
    _cancelNotifee = (0, _asyncToGenerator2.default)(function* (notificationId) {
      console.log('canceling notification', notificationId);
      yield _reactNative2.default.cancelTriggerNotification(notificationId);
    });
    return _cancelNotifee.apply(this, arguments);
  }
  var toggleSwitch = function toggleSwitch(item, val) {
    setIsEnabled(function (previousState) {
      return !previousState;
    });
    console.log(val, "Val");
    if (val) {
      item.status = 'Paid';
      updateFixedExpStatus(item, "Paid");
      _reactNative2.default.getTriggerNotifications();
      console.log(_reactNative2.default.getTriggerNotifications());
      setExpName(item.ExpName);
      setNotificationId(item.triggerNotificationId);
      cancelNotifee(item.triggerNotificationId);
    } else {
      item.status = 'Unpaid';
      updateFixedExpStatus(item, "Unpaid");
      setExpName(item.ExpName);
      setDate(item.dueDate);
      onCreateTriggerNotification(item);
    }
  };
  var updateFixedExpStatus = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (item, status) {
      try {
        yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "FixedExpenses", item.id), {
          status: status
        });
        console.log("Update");
      } catch (e) {
        console.log("Error");
      }
      console.log("Update");
    });
    return function updateFixedExpStatus(_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
    source: require('../../Assets/Background.jpeg'),
    style: {
      width: width,
      height: height
    },
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.Title,
        children: "Fixed Expense"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.container,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.mainContainer,
          children: [console.log(fixedExpenses, "item"), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: fixedExpenses,
            renderItem: function renderItem(_ref5) {
              var item = _ref5.item;
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.fixedExpContainer,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: [styles.fixedExpContainerView, styles.divider],
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.inputPair,
                    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerText,
                      children: "Expense Name : "
                    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerVal,
                      children: item.ExpName
                    })]
                  }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: function onPress() {
                      return deleteFixedExp(item);
                    },
                    children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                      source: require('../../Assets/remove.png'),
                      style: styles.buttonImg
                    })
                  })]
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.fixedExpContainerView,
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.inputPair,
                    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerText,
                      children: "Category : "
                    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerVal,
                      children: item.category
                    })]
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.inputPair,
                    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerText,
                      children: "Paid "
                    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Switch, {
                      trackColor: {
                        false: '#767577',
                        true: 'lightgreen'
                      },
                      thumbColor: item.status === 'Unpaid' ? 'green' : 'white',
                      onValueChange: function onValueChange(val) {
                        return toggleSwitch(item, val);
                      },
                      value: item.status === 'Unpaid' ? false : true
                    })]
                  })]
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.fixedExpContainerView,
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.inputPair,
                    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerText,
                      children: "Amount : "
                    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerVal,
                      children: item.amount
                    })]
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.inputPair,
                    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerText,
                      children: "Due Date : "
                    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
                      style: styles.fixedExpContainerVal,
                      children: getDateFormat(item.dueDate)
                    })]
                  })]
                })]
              });
            },
            extraData: true
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            position: 'absolute',
            justifyContent: 'center',
            alignItems: 'center',
            right: 20,
            bottom: 20
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              width: 70,
              height: 70,
              borderRadius: 35,
              backgroundColor: '#006A42',
              justifyContent: 'center',
              alignItems: 'center',
              alignSelf: 'center',
              marginTop: 5,
              marginBottom: 5
            },
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              navigation.navigate('AddFixedExp');
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../../Assets/add.png'),
              style: {
                width: 30,
                height: 30
              },
              onPress: function onPress() {
                return console.log('image pressed');
              }
            })
          })
        })]
      })]
    })
  });
};
var _default = FixedExp;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  Title: {
    color: 'white',
    fontSize: 40,
    fontWeight: 'bold',
    marginVertical: 20,
    alignSelf: 'center'
  },
  ExpName: {
    fontSize: 16,
    marginTop: 15,
    fontWeight: 'bold'
  },
  caption: {
    fontSize: 15,
    lineHeight: 14,
    marginTop: 6
  },
  amt: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'red',
    marginTop: 10
  },
  container: {
    borderTopLeftRadius: 40,
    borderTopRightRadius: 40,
    height: height * 0.8,
    width: width,
    backgroundColor: 'white',
    marginTop: 5
  },
  mainContainer: {
    padding: 25,
    flex: 1,
    height: '100%',
    justifyContent: 'space-between'
  },
  fixedExpContainer: {
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: 'black',
    marginVertical: 5,
    width: '100%',
    height: 130,
    padding: 15,
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 5,
    backgroundColor: 'white',
    justifyContent: "center"
  },
  inputPair: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10
  },
  fixedExpContainerView: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between"
  },
  fixedExpContainerText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "green"
  },
  fixedExpContainerVal: {
    fontSize: 14,
    fontWeight: "bold",
    color: "grey"
  },
  divider: {
    borderBottomColor: 'rgba(0,0,0,0.5)',
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
  },
  buttonImg: {
    width: 25,
    height: 25,
    tintColor: "#cc1d10"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfY29uZmlnIiwiX0NvbnN0YW50cyIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmVQYXBlciIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfRGltZW5zaW9ucyRnZXQiLCJEaW1lbnNpb25zIiwid2lkdGgiLCJoZWlnaHQiLCJub3RpZnlUaW1lIiwiRml4ZWRFeHAiLCJfcmVmIiwibmF2aWdhdGlvbiIsInJvdXRlIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZml4ZWRFeHBlbnNlcyIsInNldEZpeGVkRXhwZW5zZXMiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImV4dHJhRGF0YSIsInNldEV4dHJhRGF0YSIsIl9SZWFjdCR1c2VTdGF0ZSIsIlJlYWN0IiwiX1JlYWN0JHVzZVN0YXRlMiIsImlzRW5hYmxlZCIsInNldElzRW5hYmxlZCIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0IiwiRXhwTmFtZSIsInNldEV4cE5hbWUiLCJfUmVhY3QkdXNlU3RhdGU1IiwiRGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJkYXRlIiwic2V0RGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTciLCJfUmVhY3QkdXNlU3RhdGU4Iiwibm90aWZpY2F0aW9uSWQiLCJzZXROb3RpZmljYXRpb25JZCIsInVzZUVmZmVjdCIsInBhcmFtcyIsImNvbnNvbGUiLCJsb2ciLCJ1bnN1YnNjcmliZSIsImFkZExpc3RlbmVyIiwiZmV0Y2hGaXhlZEV4cCIsIm9uQ3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvblRvQWRkRXhwZW5zZXMiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInF1ZXJ5U25hcHNob3QiLCJnZXREb2NzIiwiY29sbGVjdGlvbiIsImRiIiwiYXV0aCIsImN1cnJlbnRVc2VyIiwidWlkIiwidGVtcEZpeGVkRXhwIiwiZm9yRWFjaCIsImRvYyIsImlkIiwiZGF0YSIsInB1c2giLCJhc3NpZ24iLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkZWxldGVGaXhlZEV4cCIsIl9yZWYzIiwiaXRlbSIsImRlbGV0ZURvYyIsImZpbHRlckRhdGEiLCJmaWx0ZXIiLCJjdXJyIiwibGVuZ3RoIiwiX3giLCJnZXREYXRlRm9ybWF0IiwidGVtcERhdGUiLCJzZWNvbmRzIiwibmFub3NlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsIm9uQ3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvbiIsIm5vdyIsImNoYW5uZWxJZCIsIm5vdGlmZWUiLCJjcmVhdGVDaGFubmVsIiwibmFtZSIsInRoZW4iLCJ0cmlnZ2VyIiwidHlwZSIsIlRyaWdnZXJUeXBlIiwiVElNRVNUQU1QIiwidGltZXN0YW1wIiwiY3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvbiIsInRpdGxlIiwiYm9keSIsImFuZHJvaWQiLCJub3RJZCIsInRyaWdnZXJOb3RpZmljYXRpb25JZCIsImNhbmNlbE5vdGlmZWUiLCJfeDIiLCJfY2FuY2VsTm90aWZlZSIsImNhbmNlbFRyaWdnZXJOb3RpZmljYXRpb24iLCJ0b2dnbGVTd2l0Y2giLCJ2YWwiLCJwcmV2aW91c1N0YXRlIiwic3RhdHVzIiwidXBkYXRlRml4ZWRFeHBTdGF0dXMiLCJnZXRUcmlnZ2VyTm90aWZpY2F0aW9ucyIsImR1ZURhdGUiLCJfcmVmNCIsInVwZGF0ZURvYyIsIl94MyIsIl94NCIsImpzeCIsIkltYWdlQmFja2dyb3VuZCIsInNvdXJjZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJqc3hzIiwiVmlldyIsIlRleHQiLCJzdHlsZXMiLCJUaXRsZSIsImNvbnRhaW5lciIsIm1haW5Db250YWluZXIiLCJGbGF0TGlzdCIsInJlbmRlckl0ZW0iLCJfcmVmNSIsImZpeGVkRXhwQ29udGFpbmVyIiwiZml4ZWRFeHBDb250YWluZXJWaWV3IiwiZGl2aWRlciIsImlucHV0UGFpciIsImZpeGVkRXhwQ29udGFpbmVyVGV4dCIsImZpeGVkRXhwQ29udGFpbmVyVmFsIiwiVG91Y2hhYmxlT3BhY2l0eSIsIm9uUHJlc3MiLCJJbWFnZSIsImJ1dHRvbkltZyIsImNhdGVnb3J5IiwiU3dpdGNoIiwidHJhY2tDb2xvciIsImZhbHNlIiwidHJ1ZSIsInRodW1iQ29sb3IiLCJvblZhbHVlQ2hhbmdlIiwidmFsdWUiLCJhbW91bnQiLCJwb3NpdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsInJpZ2h0IiwiYm90dG9tIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwiYWxpZ25TZWxmIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm5hdmlnYXRlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImNvbG9yIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwibWFyZ2luVmVydGljYWwiLCJjYXB0aW9uIiwibGluZUhlaWdodCIsImFtdCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsInBhZGRpbmciLCJmbGV4Iiwic2hhZG93T3BhY2l0eSIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0IiwiZWxldmF0aW9uIiwiZmxleERpcmVjdGlvbiIsInBhZGRpbmdWZXJ0aWNhbCIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJoYWlybGluZVdpZHRoIiwidGludENvbG9yIl0sInNvdXJjZXMiOlsiRml4ZWRFeHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuXHRTdHlsZVNoZWV0LFxuXHRWaWV3LFxuXHRCdXR0b24sXG5cdFRleHRJbnB1dCxcblx0UHJlc3NhYmxlLFxuXHREaW1lbnNpb25zLFxuXHRNb2RhbCxcblx0SW1hZ2UsXG5cdFRvdWNoYWJsZU9wYWNpdHksXG5cdEltYWdlQmFja2dyb3VuZCxcblx0U2Nyb2xsVmlldyxcblx0RmxhdExpc3QsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge1xuXHRhdXRoLFxuXHRkYixcblx0Y29sbGVjdGlvbixcblx0Z2V0RG9jcyxcblx0Z2V0RG9jLFxuXHRkb2MsXG5cdHVwZGF0ZURvYyxcblx0ZGVsZXRlRG9jIFxufSBmcm9tICcuLi8uLi9GaXJlYmFzZS9jb25maWcnO1xuLy8gaW1wb3J0IERhdGVUaW1lUGlja2VyIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2RhdGV0aW1lcGlja2VyJztcbmltcG9ydCB7IGRhcmtHcmVlbiB9IGZyb20gJy4uL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2NyZWVuUHJvcCB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XG5cbmltcG9ydCB7XG5cdHVzZVRoZW1lLFxuXHRBdmF0YXIsXG5cdFRpdGxlLFxuXHRDYXB0aW9uLFxuXHRQYXJhZ3JhcGgsXG5cdERyYXdlcixcblx0VGV4dCxcblx0VG91Y2hhYmxlUmlwcGxlLFxuXHRTd2l0Y2hcbn0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbi8vbm90aWZpY2F0aW9ucyBpbXBvcnRcbmltcG9ydCBub3RpZmVlLCB7IFRpbWVzdGFtcFRyaWdnZXIsIFRyaWdnZXJUeXBlIH0gZnJvbSAnQG5vdGlmZWUvcmVhY3QtbmF0aXZlJztcblxuY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jyk7XG5sZXQgbm90aWZ5VGltZT0wXG5cbmNvbnN0IEZpeGVkRXhwID0gKHsgbmF2aWdhdGlvbiwgcm91dGUgfSkgPT4ge1xuXG5cdGNvbnN0IFtmaXhlZEV4cGVuc2VzLCBzZXRGaXhlZEV4cGVuc2VzXSA9IHVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2V4dHJhRGF0YSwgc2V0RXh0cmFEYXRhXSA9IHVzZVN0YXRlKGZhbHNlKTtcblx0Y29uc3QgW2lzRW5hYmxlZCwgc2V0SXNFbmFibGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblx0Y29uc3QgW0V4cE5hbWUsc2V0RXhwTmFtZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuXHRjb25zdCBbZGF0ZSxzZXREYXRlXSA9IFJlYWN0LnVzZVN0YXRlKG5ldyBEYXRlKCkpO1xuXHRjb25zdCBbbm90aWZpY2F0aW9uSWQsc2V0Tm90aWZpY2F0aW9uSWRdID0gUmVhY3QudXNlU3RhdGUoXCJcIilcblxuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cblx0XHRpZiAocm91dGUucGFyYW1zICE9IG51bGwpIHtcblx0XHRcdGNvbnNvbGUubG9nKHJvdXRlLnBhcmFtcy5GaXhlZEV4cCk7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiY2hhbmdlc1wiKVxuXHR9LCBbcm91dGUucGFyYW1zXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB1bnN1YnNjcmliZSA9IG5hdmlnYXRpb24uYWRkTGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuXHRcdFx0ZmV0Y2hGaXhlZEV4cCgpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZSBmcm9tIHRoZSBldmVudCBzbyBpdCBnZXRzIHJlbW92ZWQgb24gdW5tb3VudFxuXHRcdHJldHVybiB1bnN1YnNjcmliZTtcblx0fSwgW25hdmlnYXRpb25dKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCk9Pntcblx0XHRvbkNyZWF0ZVRyaWdnZXJOb3RpZmljYXRpb25Ub0FkZEV4cGVuc2VzKCk7XG5cdFx0Y29uc29sZS5sb2coXCJBZGQgZXhwZW5zZXMgbm90aWZpY2F0aW9uIHRyaWdnZXJlZC4uLi5cIilcblx0fSxbXSlcblxuXHRjb25zdCBmZXRjaEZpeGVkRXhwID0gYXN5bmMgKCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhjb2xsZWN0aW9uKGRiLCBcIlVzZXJcIiwgYXV0aC5jdXJyZW50VXNlci51aWQsIFwiRml4ZWRFeHBlbnNlc1wiKSk7XG5cdFx0XHRjb25zdCB0ZW1wRml4ZWRFeHAgPSBbXVxuXHRcdFx0cXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcblx0XHRcdFx0Ly8gZG9jLmRhdGEoKSBpcyBuZXZlciB1bmRlZmluZWQgZm9yIHF1ZXJ5IGRvYyBzbmFwc2hvdHNcblx0XHRcdFx0Y29uc29sZS5sb2coZG9jLmlkLCBcIiA9PiBcIiwgZG9jLmRhdGEoKSk7XG5cdFx0XHRcdHRlbXBGaXhlZEV4cC5wdXNoKHsgaWQgOiBkb2MuaWQsIC4uLmRvYy5kYXRhKCl9KTtcblx0XHRcdH0pO1xuXHRcdFx0c2V0Rml4ZWRFeHBlbnNlcyh0ZW1wRml4ZWRFeHApO1xuXHRcdFx0Y29uc29sZS5sb2codGVtcEZpeGVkRXhwKVxuXHRcdH1cblx0XHRjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coZSlcblx0XHR9XG5cdH1cblxuXHRjb25zdCBkZWxldGVGaXhlZEV4cCA9IGFzeW5jKGl0ZW0pID0+IHtcblx0XHRcblx0XHQvLyBkZWxldGVmcm9tIGRhdGFiYXNlXG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IGRlbGV0ZURvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCwgXCJGaXhlZEV4cGVuc2VzXCIsIGl0ZW0uaWQpKTtcblx0XHRcdGNvbnNvbGUubG9nKFwiRGVsZXRlZFwiKVxuXHRcdH1cblx0XHRjYXRjaChlKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKFwiRXJyb3JcIilcblx0XHR9XG5cblx0XHRjb25zdCBmaWx0ZXJEYXRhID0gZml4ZWRFeHBlbnNlcy5maWx0ZXIoY3VyciA9PiBjdXJyICE9PSBpdGVtKTtcbiAgICAgICAgY29uc29sZS5sb2coZmlsdGVyRGF0YSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZpbHRlckRhdGEubGVuZ3RoKTtcbiAgICAgICAgc2V0Rml4ZWRFeHBlbnNlcyhmaWx0ZXJEYXRhKTtcblx0XHRcblx0fVxuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coZml4ZWRFeHBlbnNlcywgXCJmaXhlZEV4cGVuc2VzXCIpO1xuXHRcdHNldEV4dHJhRGF0YSh0cnVlKTtcblx0XHRzZXRFeHRyYURhdGEoZmFsc2UpO1xuXHR9LCBbZml4ZWRFeHBlbnNlc10pXG5cblx0Y29uc3QgZ2V0RGF0ZUZvcm1hdCA9IChkYXRlKSA9PiB7XG5cdFx0Y29uc3QgdGVtcERhdGUgPSBuZXcgRGF0ZShkYXRlLnNlY29uZHMgKiAxMDAwICsgZGF0ZS5uYW5vc2Vjb25kcyAvIDEwMDAwMDApO1xuXHRcdHJldHVybiB0ZW1wRGF0ZS5nZXREYXRlKCkgKyAnLycgKyAodGVtcERhdGUuZ2V0TW9udGgoKSArIDEpICsgJy8nICsgdGVtcERhdGUuZ2V0RnVsbFllYXIoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvbihpdGVtKSB7XG5cdFx0bGV0IG5vdGlmeVRpbWU7XG5cdFx0Ly8gaWYoRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLDE2LTUsNTItMzApIDwgRGF0ZS5ub3coKSkge1xuXHRcdC8vIFx0Y29uc3QgdCA9IERhdGUubm93KCkgKyAxMDAwICogNjAgKiAzO1xuXHRcdC8vIFx0bm90aWZ5VGltZSA9IERhdGUubm93KCkgKyAxMDAwICogNjAgKiAxO1xuXHRcdC8vIH0gZWxzZSB7XG5cdFx0Ly8gXHRub3RpZnlUaW1lID0gRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLDE2LTUsNTItMzApO1xuXHRcdC8vIH1cblxuXHRcdG5vdGlmeVRpbWUgPSBEYXRlLm5vdygpICsgMTAwMCAqIDYwICogMTtcblx0XG5cdFx0Ly8gQ3JlYXRlIGEgY2hhbm5lbCAocmVxdWlyZWQgZm9yIEFuZHJvaWQpXG5cdFx0bGV0IGNoYW5uZWxJZDtcblx0XHRub3RpZmVlLmNyZWF0ZUNoYW5uZWwoe1xuXHRcdFx0aWQ6ICdkZWZhdWx0Jyxcblx0XHRcdG5hbWU6ICdEZWZhdWx0IENoYW5uZWwnLFxuXHRcdH0pLnRoZW4oKGlkKSA9PiB7XG5cdFx0XHRjaGFubmVsSWQgPSBpZDtcblx0XG5cdFx0XHQvLyBDcmVhdGUgYSB0aW1lLWJhc2VkIHRyaWdnZXJcblx0XHRcdGNvbnN0IHRyaWdnZXIgPSB7XG5cdFx0XHRcdGlkOiBub3RpZmljYXRpb25JZCtFeHBOYW1lLFxuXHRcdFx0XHR0eXBlOiBUcmlnZ2VyVHlwZS5USU1FU1RBTVAsXG5cdFx0XHRcdHRpbWVzdGFtcDogbm90aWZ5VGltZSxcblx0XHRcdH07XG5cdFxuXHRcdFx0Ly8gQ3JlYXRlIGEgdHJpZ2dlciBub3RpZmljYXRpb25cblx0XHRcdG5vdGlmZWUuY3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvbih7XG5cdFx0XHQgICAgaWQ6IG5vdGlmaWNhdGlvbklkK0V4cE5hbWUsXG5cdFx0XHQgICAgdGl0bGU6ICdUaW1lIHRvIHBheSBmaXhlZCBleHBlbnNlJyxcblx0XHRcdCAgICBib2R5OiBFeHBOYW1lLFxuXHRcdFx0ICAgIGFuZHJvaWQ6IHtcblx0XHRcdCAgICAgICAgY2hhbm5lbElkLFxuXHRcdFx0ICAgIH0sXG5cdFx0XHR9LCB0cmlnZ2VyKS50aGVuKChub3RJZCkgPT4ge1xuXHRcdFx0ICAgIGl0ZW0udHJpZ2dlck5vdGlmaWNhdGlvbklkID0gbm90SWQ7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ3JlYXRlVHJpZ2dlck5vdGlmaWNhdGlvblRvQWRkRXhwZW5zZXMoKSB7XG5cdFx0Ly8gaWYoRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLDE2LTUsNTItMzApIDwgRGF0ZS5ub3coKSkge1xuXHRcdC8vIFx0Y29uc3QgdCA9IERhdGUubm93KCkgKyAxMDAwICogNjAgKiAzO1xuXHRcdC8vIFx0bm90aWZ5VGltZSA9IERhdGUubm93KCkgKyAxMDAwICogNjAgKiAxO1xuXHRcdC8vIH0gZWxzZSB7XG5cdFx0Ly8gXHRub3RpZnlUaW1lID0gRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLDE2LTUsNTItMzApO1xuXHRcdC8vIH1cblxuXHRcdG5vdGlmeVRpbWUgPSBEYXRlLm5vdygpICsgMTAwMCAqIDYwICogMTtcblx0XG5cdFx0Ly8gQ3JlYXRlIGEgY2hhbm5lbCAocmVxdWlyZWQgZm9yIEFuZHJvaWQpXG5cdFx0bGV0IGNoYW5uZWxJZDtcblx0XHRub3RpZmVlLmNyZWF0ZUNoYW5uZWwoe1xuXHRcdFx0aWQ6ICdkZWZhdWx0Jyxcblx0XHRcdG5hbWU6ICdEZWZhdWx0IENoYW5uZWwnLFxuXHRcdH0pLnRoZW4oKGlkKSA9PiB7XG5cdFx0XHRjaGFubmVsSWQgPSBpZDtcblx0XG5cdFx0XHQvLyBDcmVhdGUgYSB0aW1lLWJhc2VkIHRyaWdnZXJcblx0XHRcdGNvbnN0IHRyaWdnZXIgPSB7XG5cdFx0XHRcdHR5cGU6IFRyaWdnZXJUeXBlLlRJTUVTVEFNUCxcblx0XHRcdFx0dGltZXN0YW1wOiBub3RpZnlUaW1lLFxuXHRcdFx0fTtcblx0XG5cdFx0XHQvLyBDcmVhdGUgYSB0cmlnZ2VyIG5vdGlmaWNhdGlvblxuXHRcdFx0bm90aWZlZS5jcmVhdGVUcmlnZ2VyTm90aWZpY2F0aW9uKHtcblx0XHRcdCAgICB0aXRsZTogJ1RpbWUgdG8gYWRkIHlvdXIgZXhwZW5zZXMnLFxuXHRcdFx0ICAgIGJvZHk6IEV4cE5hbWUsXG5cdFx0XHQgICAgYW5kcm9pZDoge1xuXHRcdFx0ICAgICAgICBjaGFubmVsSWQsXG5cdFx0XHQgICAgfSxcblx0XHRcdH0sIHRyaWdnZXIpXG5cdFx0fSk7XG5cdH1cblx0XG5cblx0YXN5bmMgZnVuY3Rpb24gY2FuY2VsTm90aWZlZShub3RpZmljYXRpb25JZCkge1xuXHRcdGNvbnNvbGUubG9nKCdjYW5jZWxpbmcgbm90aWZpY2F0aW9uJywgbm90aWZpY2F0aW9uSWQpXG5cdFx0YXdhaXQgbm90aWZlZS5jYW5jZWxUcmlnZ2VyTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbklkKTtcblx0ICB9XG5cblxuXHRjb25zdCB0b2dnbGVTd2l0Y2ggPSAoaXRlbSwgdmFsKSA9PiB7XG5cdFx0c2V0SXNFbmFibGVkKHByZXZpb3VzU3RhdGUgPT4gIXByZXZpb3VzU3RhdGUpO1xuXHRcdGNvbnNvbGUubG9nKHZhbCwgXCJWYWxcIilcblxuXHRcdGlmICh2YWwpIHtcblx0XHRcdC8vIG5hdmlnYXRpb24ubmF2aWdhdGUoXCJBZGRHcnBFeHBNZW1iZXJzXCIsIHtcblx0XHRcdC8vIFx0c3BsaXRBbW91bnQ6IDEwMDAsXG5cdFx0XHQvLyB9KVxuXHRcdFx0aXRlbS5zdGF0dXM9J1BhaWQnXG5cdFx0XHQvLyBzZXRFeHRyYURhdGEodHJ1ZSlcblx0XHRcdC8vIHNldEV4dHJhRGF0YShmYWxzZSlcblx0XHRcdHVwZGF0ZUZpeGVkRXhwU3RhdHVzKGl0ZW0sXCJQYWlkXCIpO1xuXHRcdFx0bm90aWZlZS5nZXRUcmlnZ2VyTm90aWZpY2F0aW9ucygpO1xuXHRcdFx0Y29uc29sZS5sb2cobm90aWZlZS5nZXRUcmlnZ2VyTm90aWZpY2F0aW9ucygpKTtcblx0XHRcdHNldEV4cE5hbWUoaXRlbS5FeHBOYW1lKTtcblx0XHRcdHNldE5vdGlmaWNhdGlvbklkKGl0ZW0udHJpZ2dlck5vdGlmaWNhdGlvbklkKTtcblx0XHRcdGNhbmNlbE5vdGlmZWUoaXRlbS50cmlnZ2VyTm90aWZpY2F0aW9uSWQpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aXRlbS5zdGF0dXM9J1VucGFpZCdcblx0XHRcdHVwZGF0ZUZpeGVkRXhwU3RhdHVzKGl0ZW0sXCJVbnBhaWRcIik7XG5cdFx0XHRzZXRFeHBOYW1lKGl0ZW0uRXhwTmFtZSk7XG5cdFx0XHRzZXREYXRlKGl0ZW0uZHVlRGF0ZSk7XG5cdFx0XHRvbkNyZWF0ZVRyaWdnZXJOb3RpZmljYXRpb24oaXRlbSlcblx0XHR9XG5cdH1cblxuXHRjb25zdCB1cGRhdGVGaXhlZEV4cFN0YXR1cyA9IGFzeW5jKGl0ZW0sIHN0YXR1cykgPT4ge1xuXG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHVwZGF0ZURvYyhkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCwgXCJGaXhlZEV4cGVuc2VzXCIsIGl0ZW0uaWQpLCB7XG5cdFx0XHRcdHN0YXR1cyA6IHN0YXR1c1xuXHRcdFx0fSk7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlVwZGF0ZVwiKVxuXHRcdH1cblx0XHRjYXRjaChlKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKFwiRXJyb3JcIilcblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZyhcIlVwZGF0ZVwiKVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8SW1hZ2VCYWNrZ3JvdW5kXG5cdFx0XHRzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9CYWNrZ3JvdW5kLmpwZWcnKX1cblx0XHRcdHN0eWxlPXt7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfX0+XG5cdFx0XHQ8Vmlldz5cblx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5UaXRsZX0+Rml4ZWQgRXhwZW5zZTwvVGV4dD5cblx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuXHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMubWFpbkNvbnRhaW5lcn0+XG5cdFx0XHRcdFx0XHR7Y29uc29sZS5sb2coZml4ZWRFeHBlbnNlcywgXCJpdGVtXCIpfVxuXHRcdFx0XHRcdFx0PEZsYXRMaXN0XG5cdFx0XHRcdFx0XHRcdGRhdGE9e2ZpeGVkRXhwZW5zZXN9XG5cdFx0XHRcdFx0XHRcdHJlbmRlckl0ZW09eyh7IGl0ZW0gfSkgPT5cblx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmZpeGVkRXhwQ29udGFpbmVyfT5cblx0XHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtbc3R5bGVzLmZpeGVkRXhwQ29udGFpbmVyVmlldywgc3R5bGVzLmRpdmlkZXJdfT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dFBhaXJ9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuZml4ZWRFeHBDb250YWluZXJUZXh0fT5FeHBlbnNlIE5hbWUgOiA8L1RleHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5maXhlZEV4cENvbnRhaW5lclZhbH0+e2l0ZW0uRXhwTmFtZX08L1RleHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PFRvdWNoYWJsZU9wYWNpdHkgb25QcmVzcz17KCkgPT4gZGVsZXRlRml4ZWRFeHAoaXRlbSl9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxJbWFnZSBzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9yZW1vdmUucG5nJyl9IHN0eWxlPXtzdHlsZXMuYnV0dG9uSW1nfSAvPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1RvdWNoYWJsZU9wYWNpdHk+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmZpeGVkRXhwQ29udGFpbmVyVmlld30+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuaW5wdXRQYWlyfT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmZpeGVkRXhwQ29udGFpbmVyVGV4dH0+Q2F0ZWdvcnkgOiA8L1RleHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5maXhlZEV4cENvbnRhaW5lclZhbH0+e2l0ZW0uY2F0ZWdvcnl9PC9UZXh0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuaW5wdXRQYWlyfT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmZpeGVkRXhwQ29udGFpbmVyVGV4dH0+UGFpZCA8L1RleHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFN3aXRjaFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJhY2tDb2xvcj17eyBmYWxzZTogJyM3Njc1NzcnLCB0cnVlOiAnbGlnaHRncmVlbicgfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRodW1iQ29sb3I9eyhpdGVtLnN0YXR1cz09PSdVbnBhaWQnKSA/ICdncmVlbicgOiAnd2hpdGUnfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25WYWx1ZUNoYW5nZT17KHZhbCkgPT4gdG9nZ2xlU3dpdGNoKGl0ZW0sIHZhbCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17KGl0ZW0uc3RhdHVzPT09J1VucGFpZCcpID9mYWxzZTp0cnVlfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHRcdFx0XHRcdDxWaWV3IHN0eWxlPXtzdHlsZXMuZml4ZWRFeHBDb250YWluZXJWaWV3fT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dFBhaXJ9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuZml4ZWRFeHBDb250YWluZXJUZXh0fT5BbW91bnQgOiA8L1RleHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5maXhlZEV4cENvbnRhaW5lclZhbH0+e2l0ZW0uYW1vdW50fTwvVGV4dD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9WaWV3PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0UGFpcn0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5maXhlZEV4cENvbnRhaW5lclRleHR9PkR1ZSBEYXRlIDogPC9UZXh0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxUZXh0IHN0eWxlPXtzdHlsZXMuZml4ZWRFeHBDb250YWluZXJWYWx9PntnZXREYXRlRm9ybWF0KGl0ZW0uZHVlRGF0ZSl9PC9UZXh0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHRcdFx0XHRcdFx0PC9WaWV3PlxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0ZXh0cmFEYXRhPXt0cnVlfVxuXHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdDwvVmlldz5cblxuXHRcdFx0XHRcdHsvKiA8VmlldyBzdHlsZT17c3R5bGVzLm1haW5Db250YWluZXJ9PlxuXG5cdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcjF9PlxuXHRcdFx0XHRcdFx0XHQ8VGl0bGUgc3R5bGU9e3N0eWxlcy5FeHBOYW1lfT5FeHBlbnNlIE5hbWU6PC9UaXRsZT5cblx0XHRcdFx0XHRcdFx0PFZpZXcgc3R5bGU9e3N0eWxlcy5pbnB1dFBhaXJ9PlxuXHRcdFx0XHRcdFx0XHRcdDxDYXB0aW9uIHN0eWxlPXtzdHlsZXMuY2FwdGlvbn0+Q2F0ZWdvcnk6IDwvQ2FwdGlvbj5cblx0XHRcdFx0XHRcdFx0XHQ8VGV4dCBzdHlsZT17c3R5bGVzLmNhcHRpb259PkRldSBEYXRlOjwvVGV4dD5cblx0XHRcdFx0XHRcdFx0PC9WaWV3PlxuXHRcdFx0XHRcdFx0XHQ8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0UGFpcn0+XG5cdFx0XHRcdFx0XHRcdFx0PFRleHQgc3R5bGU9e3N0eWxlcy5hbXR9PjI1MDA8L1RleHQ+XG5cdFx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHQ8L1ZpZXc+ICovfVxuXHRcdFx0XHRcdDxWaWV3XG5cdFx0XHRcdFx0XHRzdHlsZT17e1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHRcdFx0XHRcdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHRcdFx0XHRcdFx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRcdFx0XHRcdFx0cmlnaHQ6IDIwLFxuXHRcdFx0XHRcdFx0XHRib3R0b206IDIwLFxuXHRcdFx0XHRcdFx0fX0+XG5cdFx0XHRcdFx0XHQ8Vmlld1xuXHRcdFx0XHRcdFx0XHRzdHlsZT17e1xuXHRcdFx0XHRcdFx0XHRcdHdpZHRoOiA3MCxcblx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDcwLFxuXHRcdFx0XHRcdFx0XHRcdGJvcmRlclJhZGl1czogMzUsXG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiAnIzAwNkE0MicsXG5cdFx0XHRcdFx0XHRcdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHRcdFx0XHRcdFx0XHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxuXHRcdFx0XHRcdFx0XHRcdGFsaWduU2VsZjogJ2NlbnRlcicsXG5cdFx0XHRcdFx0XHRcdFx0bWFyZ2luVG9wOiA1LFxuXHRcdFx0XHRcdFx0XHRcdG1hcmdpbkJvdHRvbTogNSxcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0b25TdGFydFNob3VsZFNldFJlc3BvbmRlcj17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdG5hdmlnYXRpb24ubmF2aWdhdGUoJ0FkZEZpeGVkRXhwJyk7XG5cdFx0XHRcdFx0XHRcdH19PlxuXHRcdFx0XHRcdFx0XHQ8SW1hZ2Vcblx0XHRcdFx0XHRcdFx0XHRzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9hZGQucG5nJyl9XG5cdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3sgd2lkdGg6IDMwLCBoZWlnaHQ6IDMwIH19XG5cdFx0XHRcdFx0XHRcdFx0b25QcmVzcz17KCkgPT4gY29uc29sZS5sb2coJ2ltYWdlIHByZXNzZWQnKX1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvVmlldz5cblx0XHRcdFx0XHQ8L1ZpZXc+XG5cdFx0XHRcdDwvVmlldz5cblx0XHRcdDwvVmlldz5cblx0XHQ8L0ltYWdlQmFja2dyb3VuZD5cblx0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpeGVkRXhwO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG5cdFRpdGxlOiB7XG5cdFx0Y29sb3I6ICd3aGl0ZScsXG5cdFx0Zm9udFNpemU6IDQwLFxuXHRcdGZvbnRXZWlnaHQ6ICdib2xkJyxcblx0XHRtYXJnaW5WZXJ0aWNhbDogMjAsXG5cdFx0YWxpZ25TZWxmOiAnY2VudGVyJyxcblx0fSxcblx0RXhwTmFtZToge1xuXHRcdGZvbnRTaXplOiAxNixcblx0XHRtYXJnaW5Ub3A6IDE1LFxuXHRcdGZvbnRXZWlnaHQ6ICdib2xkJyxcblx0XHQvLyBjb2xvcjogJ3doaXRlJyxcblx0fSxcblx0Y2FwdGlvbjoge1xuXHRcdGZvbnRTaXplOiAxNSxcblx0XHRsaW5lSGVpZ2h0OiAxNCxcblx0XHRtYXJnaW5Ub3A6IDYsXG5cdFx0Ly8gY29sb3I6ICd3aGl0ZScsXG5cdH0sXG5cdGFtdDoge1xuXHRcdGZvbnRTaXplOiAxOCxcblx0XHRmb250V2VpZ2h0OiAnYm9sZCcsXG5cdFx0Y29sb3I6ICdyZWQnLFxuXHRcdG1hcmdpblRvcDogMTAsXG5cdH0sXG5cdGNvbnRhaW5lcjoge1xuXHRcdGJvcmRlclRvcExlZnRSYWRpdXM6IDQwLFxuXHRcdGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA0MCxcblx0XHRoZWlnaHQ6IGhlaWdodCAqIDAuOCxcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0YmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuXHRcdG1hcmdpblRvcDogNSxcblx0fSxcblxuXHRtYWluQ29udGFpbmVyOiB7XG5cdFx0cGFkZGluZzogMjUsXG5cdFx0ZmxleDogMSxcblx0XHRoZWlnaHQ6ICcxMDAlJyxcblx0XHRqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuXHR9LFxuXG5cdGZpeGVkRXhwQ29udGFpbmVyOiB7XG5cdFx0Ym9yZGVyUmFkaXVzOiAxNSxcblx0XHRzaGFkb3dPcGFjaXR5OiAwLjUsXG5cdFx0c2hhZG93Q29sb3I6ICdibGFjaycsXG5cdFx0bWFyZ2luVmVydGljYWw6IDUsXG5cdFx0d2lkdGg6ICcxMDAlJyxcblx0XHRoZWlnaHQ6IDEzMCxcblx0XHRwYWRkaW5nOiAxNSxcblx0XHRzaGFkb3dPZmZzZXQ6IHtcblx0XHRcdGhlaWdodDogNSxcblx0XHRcdHdpZHRoOiA1LFxuXHRcdH0sXG5cdFx0ZWxldmF0aW9uOiA1LFxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcblx0fSxcblx0aW5wdXRQYWlyOiB7XG5cdFx0ZmxleERpcmVjdGlvbjogXCJyb3dcIixcblx0XHRhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuXHRcdC8vIGJhY2tncm91bmRDb2xvciA6IFwicGlua1wiLFxuXHRcdHBhZGRpbmdWZXJ0aWNhbDogMTAsXG5cdH0sXG5cdGZpeGVkRXhwQ29udGFpbmVyVmlldzoge1xuXHRcdGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG5cdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcblx0XHRqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCJcblx0fSxcblx0Zml4ZWRFeHBDb250YWluZXJUZXh0OiB7XG5cdFx0Zm9udFNpemU6IDE0LFxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuXHRcdGNvbG9yOiBcImdyZWVuXCJcblx0fSxcblx0Zml4ZWRFeHBDb250YWluZXJWYWw6IHtcblx0XHRmb250U2l6ZTogMTQsXG5cdFx0Zm9udFdlaWdodDogXCJib2xkXCIsXG5cdFx0Y29sb3I6IFwiZ3JleVwiXG5cdH0sXG5cblx0ZGl2aWRlcjoge1xuXHRcdGJvcmRlckJvdHRvbUNvbG9yOiAncmdiYSgwLDAsMCwwLjUpJyxcblx0XHRib3JkZXJCb3R0b21XaWR0aDogU3R5bGVTaGVldC5oYWlybGluZVdpZHRoLFxuXG5cdH0sXG5cdGJ1dHRvbkltZzoge1xuXHRcdHdpZHRoOiAyNSxcblx0XHRoZWlnaHQ6IDI1LFxuXHRcdHRpbnRDb2xvcjogXCIjY2MxZDEwXCJcblx0fSxcblxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFjQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFXQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxpQkFBQSxHQUFBTCxPQUFBO0FBWUEsSUFBQU0sYUFBQSxHQUFBUCx1QkFBQSxDQUFBQyxPQUFBO0FBQStFLElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUFBLFNBQUFRLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFB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