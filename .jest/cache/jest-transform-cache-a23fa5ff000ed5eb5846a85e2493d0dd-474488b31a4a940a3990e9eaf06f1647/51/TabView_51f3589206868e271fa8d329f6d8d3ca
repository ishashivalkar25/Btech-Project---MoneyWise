b3a7bfbf8dd8d422bd3f8e4a319d0100
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabView = TabView;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Pager = require("./Pager");
var _SceneView = require("./SceneView");
var _TabBar = require("./TabBar");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function TabView(_ref) {
  var onIndexChange = _ref.onIndexChange,
    navigationState = _ref.navigationState,
    renderScene = _ref.renderScene,
    initialLayout = _ref.initialLayout,
    _ref$keyboardDismissM = _ref.keyboardDismissMode,
    keyboardDismissMode = _ref$keyboardDismissM === void 0 ? 'auto' : _ref$keyboardDismissM,
    _ref$lazy = _ref.lazy,
    lazy = _ref$lazy === void 0 ? false : _ref$lazy,
    _ref$lazyPreloadDista = _ref.lazyPreloadDistance,
    lazyPreloadDistance = _ref$lazyPreloadDista === void 0 ? 0 : _ref$lazyPreloadDista,
    onSwipeStart = _ref.onSwipeStart,
    onSwipeEnd = _ref.onSwipeEnd,
    _ref$renderLazyPlaceh = _ref.renderLazyPlaceholder,
    renderLazyPlaceholder = _ref$renderLazyPlaceh === void 0 ? function () {
      return null;
    } : _ref$renderLazyPlaceh,
    _ref$renderTabBar = _ref.renderTabBar,
    renderTabBar = _ref$renderTabBar === void 0 ? function (props) {
      return React.createElement(_TabBar.TabBar, props);
    } : _ref$renderTabBar,
    sceneContainerStyle = _ref.sceneContainerStyle,
    pagerStyle = _ref.pagerStyle,
    style = _ref.style,
    _ref$swipeEnabled = _ref.swipeEnabled,
    swipeEnabled = _ref$swipeEnabled === void 0 ? true : _ref$swipeEnabled,
    _ref$tabBarPosition = _ref.tabBarPosition,
    tabBarPosition = _ref$tabBarPosition === void 0 ? 'top' : _ref$tabBarPosition,
    _ref$animationEnabled = _ref.animationEnabled,
    animationEnabled = _ref$animationEnabled === void 0 ? true : _ref$animationEnabled,
    overScrollMode = _ref.overScrollMode;
  var _React$useState = React.useState(Object.assign({
      width: 0,
      height: 0
    }, initialLayout)),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    layout = _React$useState2[0],
    setLayout = _React$useState2[1];
  var jumpToIndex = function jumpToIndex(index) {
    if (index !== navigationState.index) {
      onIndexChange(index);
    }
  };
  var handleLayout = function handleLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
      height = _e$nativeEvent$layout.height,
      width = _e$nativeEvent$layout.width;
    setLayout(function (prevLayout) {
      if (prevLayout.width === width && prevLayout.height === height) {
        return prevLayout;
      }
      return {
        height: height,
        width: width
      };
    });
  };
  return React.createElement(_reactNative.View, {
    onLayout: handleLayout,
    style: [styles.pager, style]
  }, React.createElement(_Pager.Pager, {
    layout: layout,
    navigationState: navigationState,
    keyboardDismissMode: keyboardDismissMode,
    swipeEnabled: swipeEnabled,
    onSwipeStart: onSwipeStart,
    onSwipeEnd: onSwipeEnd,
    onIndexChange: jumpToIndex,
    animationEnabled: animationEnabled,
    overScrollMode: overScrollMode,
    style: pagerStyle
  }, function (_ref2) {
    var position = _ref2.position,
      render = _ref2.render,
      addEnterListener = _ref2.addEnterListener,
      jumpTo = _ref2.jumpTo;
    var sceneRendererProps = {
      position: position,
      layout: layout,
      jumpTo: jumpTo
    };
    return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar(Object.assign({}, sceneRendererProps, {
      navigationState: navigationState
    })), render(navigationState.routes.map(function (route, i) {
      return React.createElement(_SceneView.SceneView, _extends({}, sceneRendererProps, {
        addEnterListener: addEnterListener,
        key: route.key,
        index: i,
        lazy: typeof lazy === 'function' ? lazy({
          route: route
        }) : lazy,
        lazyPreloadDistance: lazyPreloadDistance,
        navigationState: navigationState,
        style: sceneContainerStyle
      }), function (_ref3) {
        var loading = _ref3.loading;
        return loading ? renderLazyPlaceholder({
          route: route
        }) : renderScene(Object.assign({}, sceneRendererProps, {
          route: route
        }));
      });
    })), tabBarPosition === 'bottom' && renderTabBar(Object.assign({}, sceneRendererProps, {
      navigationState: navigationState
    })));
  }));
}
var styles = _reactNative.StyleSheet.create({
  pager: {
    flex: 1,
    overflow: 'hidden'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,