e2395ccb6f1213e18aeb2c71eaf7d520
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewBudget;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _config = require("../../Firebase/config");
var _core = require("@react-navigation/core");
var _SetBudget = _interopRequireDefault(require("./SetBudget"));
var _reactNativeMonthYearPicker = _interopRequireDefault(require("react-native-month-year-picker"));
var _jsxRuntime = require("react/jsx-runtime");
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
function ViewBudget(_ref) {
  var route = _ref.route,
    navigation = _ref.navigation;
  var _React$useState = _react.default.useState(new Date()),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    date = _React$useState2[0],
    setDate = _React$useState2[1];
  var _React$useState3 = _react.default.useState({
      "budget": [],
      "method": "",
      "monthlyInc": 0,
      "saving": 0,
      "totalBudget": 0
    }),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    budget = _React$useState4[0],
    setBudget = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    show = _React$useState6[0],
    setShow = _React$useState6[1];
  var setHeaderOptions = function setHeaderOptions() {
    navigation.getParent().setOptions({
      headerRight: function headerRight() {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            marginRight: 10
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
            onPress: function onPress() {
              deleteBudget();
            },
            style: styles.deleteBudgetBtn,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.deleteBudgetBtnText,
              children: "Delete Budget"
            })
          })
        });
      }
    });
  };
  var setOutHeaderOptions = function setOutHeaderOptions() {
    navigation.getParent().setOptions({
      headerRight: function headerRight() {
        return null;
      }
    });
  };
  var deleteBudget = function deleteBudget() {
    _reactNative.Alert.alert('Delete Budget', "Are you sure, do you want to delete budget for the month " + months[date.getMonth()] + " " + date.getFullYear() + " ?", [{
      text: 'Cancel',
      onPress: function onPress() {
        return console.log('Cancel Pressed');
      },
      style: 'cancel'
    }, {
      text: 'Yes',
      onPress: function onPress() {
        return deleteBudgetFromDB();
      }
    }]);
  };
  var deleteBudgetFromDB = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var recordId = months[date.getMonth()] + "" + date.getFullYear();
        console.log(recordId, "delete");
        yield (0, _config.deleteDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId));
        console.log("Deleted");
        fetchBudget();
      } catch (e) {
        console.log(e);
      }
    });
    return function deleteBudgetFromDB() {
      return _ref2.apply(this, arguments);
    };
  }();
  var fetchBudget = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var recordId = months[date.getMonth()] + "" + date.getFullYear();
        var budgetForCurrMonth = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId));
        console.log(budgetForCurrMonth.data());
        if (budgetForCurrMonth.data() != null) {
          setBudget(budgetForCurrMonth.data());
        } else {
          setBudget({
            "budget": [],
            "method": "",
            "monthlyInc": 0,
            "saving": 0,
            "totalBudget": 0
          });
        }
      } catch (e) {
        console.log(e);
      }
    });
    return function fetchBudget() {
      return _ref3.apply(this, arguments);
    };
  }();
  _react.default.useEffect(function () {
    var unsubscribe = navigation.addListener('focus', function () {
      fetchBudget();
      navigation.addListener('focus', setHeaderOptions);
      navigation.addListener('blur', setOutHeaderOptions);
    });
    return unsubscribe;
  }, [navigation]);
  _react.default.useEffect(function () {
    fetchBudget();
    navigation.addListener('focus', setHeaderOptions);
    navigation.addListener('blur', setOutHeaderOptions);
  }, [date]);
  _react.default.useEffect(function () {
    console.log(budget, " budget");
    console.log(budget.budget);
  }, [budget]);
  var showPicker = _react.default.useCallback(function (value) {
    return setShow(value);
  }, []);
  var onValueChange = _react.default.useCallback(function (event, newDate) {
    var selectedDate = newDate || date;
    showPicker(false);
    setDate(selectedDate);
  }, [date, showPicker]);
  return (0, _jsxRuntime.jsx)(_reactNative.SafeAreaView, {
    children: (0, _jsxRuntime.jsxs)(_reactNative.ImageBackground, {
      source: require("../../Assets/Background.jpeg"),
      style: {
        height: "100%"
      },
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.header,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.time,
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return showPicker(true);
            },
            style: styles.monthYear,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.monthYearText,
              children: months[date.getMonth()] + " " + date.getFullYear()
            })
          }), show && (0, _jsxRuntime.jsx)(_reactNativeMonthYearPicker.default, {
            onChange: onValueChange,
            value: date,
            minimumDate: new Date(2020, 5),
            maximumDate: new Date(2025, 5),
            mode: "short"
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.headerText,
          children: ["Budgeting Method : ", budget.method]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.monthlyInc,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.monthlyIncText,
          children: ["Monthly Income : ", budget.monthlyInc]
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.categoryWiseBudget,
        children: [budget.method === '50-30-20' && (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          style: {
            height: "80%"
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: budget.budget.needs,
            ListHeaderComponent: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.categoryWiseBudgetTitle,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.categoryWiseBudgetTitleText,
                children: "Needs : "
              })
            }),
            renderItem: function renderItem(_ref4) {
              var item = _ref4.item;
              return (0, _jsxRuntime.jsx)(_reactNative.View, {
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategory,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: styles.budgetCategoryName,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.budgetCategoryNameText,
                      children: item.category
                    })
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.budgetCategoryAmount,
                    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget spent"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetSpent
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget Planned"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Remaining"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned - item.budgetSpent
                      })]
                    })]
                  })]
                })
              });
            },
            ListEmptyComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.noBudget,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: require('../../Assets/no-data.png'),
                style: {
                  width: 100,
                  height: 100
                }
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.noBudgetText,
                children: "You haven't set budget for the Month!"
              })]
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: budget.budget.wants,
            ListHeaderComponent: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.categoryWiseBudgetTitle,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.categoryWiseBudgetTitleText,
                children: "Wants : "
              })
            }),
            renderItem: function renderItem(_ref5) {
              var item = _ref5.item;
              return (0, _jsxRuntime.jsx)(_reactNative.View, {
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategory,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: styles.budgetCategoryName,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.budgetCategoryNameText,
                      children: item.category
                    })
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.budgetCategoryAmount,
                    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget spent"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetSpent
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget Planned"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Remaining"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned - item.budgetSpent
                      })]
                    })]
                  })]
                })
              });
            },
            ListEmptyComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.noBudget,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: require('../../Assets/no-data.png'),
                style: {
                  width: 100,
                  height: 100
                }
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.noBudgetText,
                children: "You haven't set budget for the Month!"
              })]
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: budget.budget.savings,
            ListHeaderComponent: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.categoryWiseBudgetTitle,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.categoryWiseBudgetTitleText,
                children: "Savings : "
              })
            }),
            renderItem: function renderItem(_ref6) {
              var item = _ref6.item;
              return (0, _jsxRuntime.jsx)(_reactNative.View, {
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategory,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: styles.budgetCategoryName,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.budgetCategoryNameText,
                      children: item.category
                    })
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.budgetCategoryAmount,
                    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget spent"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetSpent
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Budget Planned"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned
                      })]
                    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.budgetCategoryAmountCenter,
                      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: "Remaining"
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        children: item.budgetPlanned - item.budgetSpent
                      })]
                    })]
                  })]
                })
              });
            },
            ListEmptyComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.noBudget,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: require('../../Assets/no-data.png'),
                style: {
                  width: 100,
                  height: 100
                }
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.noBudgetText,
                children: "You haven't set budget for the Month!"
              })]
            })
          })]
        }), (budget.method === 'Envelop Method' || budget.method === 'Zero Based Budgeting') && (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
          data: budget.budget,
          ListHeaderComponent: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.categoryWiseBudgetTitle,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.categoryWiseBudgetTitleText,
              children: "Budget : "
            })
          }),
          renderItem: function renderItem(_ref7) {
            var item = _ref7.item;
            return (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.budgetCategory,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.budgetCategoryName,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.budgetCategoryNameText,
                  children: item.category
                })
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.budgetCategoryAmount,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategoryAmountCenter,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: "Budget spent"
                  }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: item.budgetSpent
                  })]
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategoryAmountCenter,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: "Budget Planned"
                  }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: item.budgetPlanned
                  })]
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.budgetCategoryAmountCenter,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: "Remaining"
                  }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: item.budgetPlanned - item.budgetSpent
                  })]
                })]
              })]
            });
          },
          ListEmptyComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.noBudget,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../../Assets/no-data.png'),
              style: {
                width: 100,
                height: 100
              }
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.noBudgetText,
              children: "You haven't set budget for the Month!"
            })]
          })
        })]
      })]
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  header: {
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 10,
    marginHorizontal: 10,
    marginVertical: 5,
    padding: 10
  },
  headerText: {
    textAlign: "center",
    fontSize: 15,
    fontWeight: "bold"
  },
  monthlyInc: {
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 10,
    marginHorizontal: 10,
    marginBottom: 5,
    padding: 10
  },
  monthlyIncText: {
    textAlign: "center",
    fontSize: 15,
    fontWeight: "bold"
  },
  progressBarView: {
    backgroundColor: 'rgba(255,255,255,0.9)',
    flexDirection: "row",
    justifyContent: "space-around",
    padding: 20,
    marginBottom: 5,
    marginHorizontal: 10,
    borderRadius: 10
  },
  categoryWiseBudget: {
    marginBottom: 5,
    marginHorizontal: 10,
    borderRadius: 10,
    height: "71%",
    paddingBottom: 10
  },
  categoryWiseBudgetTitle: {
    backgroundColor: 'rgba(255,255,255,0.6)',
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderBottomColor: 'grey',
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    width: "100%",
    padding: 10,
    flexDirection: "row",
    justifyContent: "space-between",
    paddingHorizontal: 10,
    height: 50,
    alignItems: "center"
  },
  categoryWiseBudgetTitleText: {
    fontSize: 15,
    fontWeight: "bold",
    color: "white"
  },
  budgetCategory: {
    height: 100,
    fontSize: 10,
    padding: 10,
    backgroundColor: 'rgba(255,255,255,0.9)',
    marginBottom: 2
  },
  budgetCategoryName: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 5,
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
  },
  budgetCategoryNameText: {
    fontWeight: "bold"
  },
  budgetCategoryText: {
    textAlignVertical: "center",
    fontWeight: "bold",
    fontSize: 15
  },
  budgetCategoryAmount: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 5
  },
  budgetCategoryAmountCenter: {
    alignItems: "center"
  },
  noBudget: {
    padding: 10,
    fontSize: 15,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  },
  noBudgetText: {
    fontSize: 15,
    fontWeight: "bold",
    width: "50%"
  },
  time: {
    padding: 4,
    flexDirection: 'row',
    justifyContent: 'space-around'
  },
  monthYear: {
    width: '50%',
    borderRadius: 10,
    paddingHorizontal: 10,
    height: 43,
    flexDirection: 'row',
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: 'rgba(255,255,255,0.9)'
  },
  monthYearText: {
    textAlign: "center",
    fontWeight: 'bold'
  },
  deleteBudgetBtn: {
    backgroundColor: '#B43757',
    borderRadius: 10,
    padding: 10
  },
  deleteBudgetBtnText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,