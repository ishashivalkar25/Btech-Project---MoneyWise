d5a6c54d621ff18ad27c57490a16fa65
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    global.alert = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      queryByPlaceholderText = _render.queryByPlaceholderText,
      getByTestId = _render.getByTestId;
    var emailInput = queryByPlaceholderText('Email / Username');
    var passwordInput = queryByPlaceholderText('Password');
    expect(emailInput).toBeTruthy();
    expect(passwordInput).toBeTruthy();
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByTestId('LoginBtn');
    _reactNative.fireEvent.press(loginButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(navigationMock.replace).toHaveBeenCalledWith("Root");
    });
    expect(global.alert).not.toHaveBeenCalled();
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText;
    var forgotPasswordButton = getByText('Forgot Password ?');
    _reactNative.fireEvent.press(forgotPasswordButton);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsImdsb2JhbCIsImFsZXJ0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIm5hdmlnYXRpb24iLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlUZXN0SWQiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwibG9naW5CdXR0b24iLCJwcmVzcyIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyMiIsImdldEJ5VGV4dCIsImZvcmdvdFBhc3N3b3JkQnV0dG9uIl0sInNvdXJjZXMiOlsiTG9naW4tdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IExvZ2luIGZyb20gJy4uL0NvbXBvbmVudHMvTG9naW4nO1xyXG5cclxuZGVzY3JpYmUoJ0xvZ2luJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9naW4gd2l0aCB2YWxpZCBjcmVkZW50aWFscycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIE1vY2sgdGhlIGFsZXJ0IGZ1bmN0aW9uXHJcbiAgICAgICAgZ2xvYmFsLmFsZXJ0ID0gamVzdC5mbigpO1xyXG5cclxuICAgICAgICBjb25zdCB7IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgICAgICAgIDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBGaWxsIGluIHRoZSBsb2dpbiBmb3JtIGZpZWxkc1xyXG4gICAgICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KCdFbWFpbCAvIFVzZXJuYW1lJyk7XHJcbiAgICAgICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoJ1Bhc3N3b3JkJyk7XHJcblxyXG4gICAgICAgIGV4cGVjdChlbWFpbElucHV0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHBhc3N3b3JkSW5wdXQpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICAgICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgJ3Rlc3RAZXhhbXBsZS5jb20nKTtcclxuICAgICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCAncGFzc3dvcmQnKTtcclxuXHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIGxvZ2luIGFjdGlvblxyXG4gICAgICAgIGNvbnN0IGxvZ2luQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ0xvZ2luQnRuJyk7XHJcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGxvZ2luQnV0dG9uKTtcclxuXHJcbiAgICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIG5hdmlnYXRpb24gbWV0aG9kIGlzIGNhbGxlZFxyXG4gICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgbmF2aWdhdGlvbiBtZXRob2QgaXMgY2FsbGVkXHJcbiAgICAgICAgICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcIlJvb3RcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBhbGVydCBmdW5jdGlvbiB3YXMgbm90IGNhbGxlZFxyXG4gICAgICAgICBleHBlY3QoZ2xvYmFsLmFsZXJ0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZm9yZ290IHBhc3N3b3JkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25Nb2NrID0ge1xyXG4gICAgICAgICAgICByZXBsYWNlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8TG9naW4gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+KTtcclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciB0aGUgZm9yZ290IHBhc3N3b3JkIGFjdGlvblxyXG4gICAgICAgIGNvbnN0IGZvcmdvdFBhc3N3b3JkQnV0dG9uID0gZ2V0QnlUZXh0KCdGb3Jnb3QgUGFzc3dvcmQgPycpO1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhmb3Jnb3RQYXNzd29yZEJ1dHRvbik7XHJcblxyXG4gICAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBkaWFsb2cgYm94IHZpc2liaWxpdHkgc3RhdGUgaXMgdXBkYXRlZFxyXG4gICAgICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIGFzc2VydCB0aGF0IHRoZSBkaWFsb2cgYm94IGJlY29tZXMgdmlzaWJsZVxyXG4gICAgICAgIC8vIGJ5IGNoZWNraW5nIGZvciBpdHMgZXhpc3RlbmNlIG9yIGEgc3BlY2lmaWMgVUkgZWxlbWVudCB3aXRoaW4gaXRcclxuICAgICAgICAvLyBleHBlY3QoLi4uKSBhc3NlcnRpb25zIGZvciBkaWFsb2cgYm94IHZpc2liaWxpdHlcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBtb3JlIHRlc3QgY2FzZXMgZm9yIG90aGVyIHVzZXIgaW50ZXJhY3Rpb25zIGFuZCBlZGdlIGNhc2VzXHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXdDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV4Q0ksUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0VBQ3BCQyxFQUFFLENBQUMsNENBQTRDLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ3pELElBQU1DLGNBQWMsR0FBRztNQUNuQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCQyxRQUFRLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFHREUsTUFBTSxDQUFDQyxLQUFLLEdBQUdKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFFeEIsSUFBQUksT0FBQSxHQUFnRCxJQUFBQyxtQkFBTSxFQUNsRCxJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsTUFBQSxDQUFBSyxPQUFLO1FBQUNXLFVBQVUsRUFBRVY7TUFBZSxDQUFFLENBQ3hDLENBQUM7TUFGT1csc0JBQXNCLEdBQUFKLE9BQUEsQ0FBdEJJLHNCQUFzQjtNQUFFQyxXQUFXLEdBQUFMLE9BQUEsQ0FBWEssV0FBVztJQUszQyxJQUFNQyxVQUFVLEdBQUdGLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDO0lBQzdELElBQU1HLGFBQWEsR0FBR0gsc0JBQXNCLENBQUMsVUFBVSxDQUFDO0lBRXhESSxNQUFNLENBQUNGLFVBQVUsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUMvQkQsTUFBTSxDQUFDRCxhQUFhLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFFbENDLHNCQUFTLENBQUNDLFVBQVUsQ0FBQ0wsVUFBVSxFQUFFLGtCQUFrQixDQUFDO0lBQ3BESSxzQkFBUyxDQUFDQyxVQUFVLENBQUNKLGFBQWEsRUFBRSxVQUFVLENBQUM7SUFJL0MsSUFBTUssV0FBVyxHQUFHUCxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQzNDSyxzQkFBUyxDQUFDRyxLQUFLLENBQUNELFdBQVcsQ0FBQztJQUc1QixNQUFNLElBQUFFLG9CQUFPLEVBQUMsWUFBTTtNQUVoQk4sTUFBTSxDQUFDZixjQUFjLENBQUNDLE9BQU8sQ0FBQyxDQUFDcUIsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0lBQy9ELENBQUMsQ0FBQztJQUVEUCxNQUFNLENBQUNWLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUNpQixHQUFHLENBQUNDLGdCQUFnQixDQUFDLENBQUM7RUFDaEQsQ0FBQyxFQUFDO0VBRUYzQixFQUFFLENBQUMsK0JBQStCLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQzVDLElBQU1DLGNBQWMsR0FBRztNQUNuQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCQyxRQUFRLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFBc0IsUUFBQSxHQUFzQixJQUFBakIsbUJBQU0sRUFBQyxJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsTUFBQSxDQUFBSyxPQUFLO1FBQUNXLFVBQVUsRUFBRVY7TUFBZSxDQUFFLENBQUMsQ0FBQztNQUEzRDBCLFNBQVMsR0FBQUQsUUFBQSxDQUFUQyxTQUFTO0lBR2pCLElBQU1DLG9CQUFvQixHQUFHRCxTQUFTLENBQUMsbUJBQW1CLENBQUM7SUFDM0RULHNCQUFTLENBQUNHLEtBQUssQ0FBQ08sb0JBQW9CLENBQUM7RUFNekMsQ0FBQyxFQUFDO0FBR04sQ0FBQyxDQUFDIn0=