775ca64d39711456bcb07e7db9255de2
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _WorkletEventHandler = _interopRequireDefault(require("./reanimated2/WorkletEventHandler"));
var _setAndForwardRef = _interopRequireDefault(require("./setAndForwardRef"));
require("./reanimated2/layoutReanimation/animationsManager");
var _invariant = _interopRequireDefault(require("invariant"));
var _ConfigHelper = require("./ConfigHelper");
var _RNRenderer = require("./reanimated2/platform-specific/RNRenderer");
var _core = require("./reanimated2/core");
var _PlatformChecker = require("./reanimated2/PlatformChecker");
var _animation = require("./reanimated2/animation");
var _layoutReanimation = require("./reanimated2/layoutReanimation");
var _ViewDescriptorsSet = require("./reanimated2/ViewDescriptorsSet");
var _fabricUtils = require("./reanimated2/fabricUtils");
var _UpdateProps = _interopRequireDefault(require("./reanimated2/UpdateProps"));
var _NativeReanimated = _interopRequireDefault(require("./reanimated2/NativeReanimated"));
var _reanimated = require("./reanimated2");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function dummyListener() {}
function maybeBuild(layoutAnimationOrBuilder) {
  var isAnimationBuilder = function isAnimationBuilder(value) {
    return 'build' in layoutAnimationOrBuilder && typeof layoutAnimationOrBuilder.build === 'function';
  };
  if (isAnimationBuilder(layoutAnimationOrBuilder)) {
    return layoutAnimationOrBuilder.build();
  } else {
    return layoutAnimationOrBuilder;
  }
}
function flattenArray(array) {
  if (!Array.isArray(array)) {
    return [array];
  }
  var resultArr = [];
  var _flattenArray = function _flattenArray(arr) {
    arr.forEach(function (item) {
      if (Array.isArray(item)) {
        _flattenArray(item);
      } else {
        resultArr.push(item);
      }
    });
  };
  _flattenArray(array);
  return resultArr;
}
function onlyAnimatedStyles(styles) {
  return styles.filter(function (style) {
    return style === null || style === void 0 ? void 0 : style.viewDescriptors;
  });
}
function isSameAnimatedStyle(style1, style2) {
  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);
}
var isSameAnimatedProps = isSameAnimatedStyle;
var has = function has(key, x) {
  if (typeof x === 'function' || typeof x === 'object') {
    if (x === null || x === undefined) {
      return false;
    } else {
      return key in x;
    }
  }
  return false;
};
function isInlineStyleTransform(transform) {
  if (!transform) {
    return false;
  }
  return transform.some(function (t) {
    return hasInlineStyles(t);
  });
}
function hasInlineStyles(style) {
  if (!style) {
    return false;
  }
  return Object.keys(style).some(function (key) {
    var styleValue = style[key];
    return (0, _reanimated.isSharedValue)(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);
  });
}
function extractSharedValuesMapFromProps(props) {
  var inlineProps = {};
  for (var key in props) {
    var value = props[key];
    if (key === 'style') {
      var _props$style;
      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);
      styles.forEach(function (style) {
        if (!style) {
          return;
        }
        for (var _ref of Object.entries(style)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _key = _ref2[0];
          var styleValue = _ref2[1];
          if ((0, _reanimated.isSharedValue)(styleValue)) {
            inlineProps[_key] = styleValue;
          } else if (_key === 'transform' && isInlineStyleTransform(styleValue)) {
            inlineProps[_key] = styleValue;
          }
        }
      });
    } else if ((0, _reanimated.isSharedValue)(value)) {
      inlineProps[key] = value;
    }
  }
  return inlineProps;
}
function inlinePropsHasChanged(styles1, styles2) {
  if (Object.keys(styles1).length !== Object.keys(styles2).length) {
    return true;
  }
  for (var key of Object.keys(styles1)) {
    if (styles1[key] !== styles2[key]) return true;
  }
  return false;
}
var _worklet_14620585112132_init_data = {
  code: "function getInlinePropsUpdate(inlineProps) {\n  const getInlinePropsUpdate = this._recur;\n  const {\n    _reanimated\n  } = this._closure;\n  const update = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (key === 'transform') {\n      update[key] = styleValue.map(function (transform) {\n        return getInlinePropsUpdate(transform);\n      });\n    } else if ((0, _reanimated.isSharedValue)(styleValue)) {\n      update[key] = styleValue.value;\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\createAnimatedComponent.js",
  sourceMap: "{\"version\":3,\"names\":[\"getInlinePropsUpdate\",\"inlineProps\",\"_recur\",\"_reanimated\",\"_closure\",\"update\",\"key\",\"styleValue\",\"Object\",\"entries\",\"map\",\"transform\",\"isSharedValue\",\"value\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/createAnimatedComponent.js\"],\"mappings\":\"AA4HA,SAAAA,oBAASA,CAAqBC,WAAA,EAAW;EAAA,MAAAD,oBAAA,QAAAE,MAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGvC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAM,CAACC,GAAG,EAAEC,UAAU,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,WAAW,CAAC,EAAE;IAC3D,IAAIK,GAAG,KAAK,WAAW,EAAE;MACvBD,MAAM,CAACC,GAAG,CAAC,GAAGC,UAAU,CAACG,GAAG,CAAC,UAAAC,SAAS,EAAI;QACxC,OAAOX,oBAAoB,CAACW,SAAS,CAAC;MACxC,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAAC,CAAC,EAAER,WAAW,CAACS,aAAa,EAAEL,UAAU,CAAC,EAAE;MACrDF,MAAM,CAACC,GAAG,CAAC,GAAGC,UAAU,CAACM,KAAK;IAChC,CAAC,MAAM;MACLR,MAAM,CAACC,GAAG,CAAC,GAAGC,UAAU;IAC1B;EACF;EACA,OAAOF,MAAM;AACf\"}"
};
var getInlinePropsUpdate = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f(inlineProps) {
    var update = {};
    for (var _ref3 of Object.entries(inlineProps)) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
      var key = _ref4[0];
      var styleValue = _ref4[1];
      if (key === 'transform') {
        update[key] = styleValue.map(function (transform) {
          return getInlinePropsUpdate(transform);
        });
      } else if ((0, _reanimated.isSharedValue)(styleValue)) {
        update[key] = styleValue.value;
      } else {
        update[key] = styleValue;
      }
    }
    return update;
  };
  _f._closure = {
    _reanimated: _reanimated
  };
  _f.__initData = _worklet_14620585112132_init_data;
  _f.__workletHash = 14620585112132;
  _f.__stackDetails = _e;
  _f.__version = "3.1.0";
  return _f;
}();
var _worklet_13635933857374_init_data = {
  code: "function anonymous() {\n  const {\n    viewTag\n  } = this._closure;\n  _removeShadowNodeFromRegistry(viewTag);\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\createAnimatedComponent.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"viewTag\",\"_closure\",\"_removeShadowNodeFromRegistry\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/createAnimatedComponent.js\"],\"mappings\":\"AAyP6B,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGvBC,6BAA6B,CAACF,OAAO,CAAC;AACxC\"}"
};
var _worklet_12585568983090_init_data = {
  code: "function anonymous() {\n  const {\n    getInlinePropsUpdate,\n    newInlineProps,\n    _UpdateProps,\n    sharableViewDescriptors,\n    maybeViewRef\n  } = this._closure;\n  const update = getInlinePropsUpdate(newInlineProps);\n  (0, _UpdateProps.default)(sharableViewDescriptors, update, maybeViewRef);\n}",
  location: "node_modules\\react-native-reanimated\\lib\\commonjs\\createAnimatedComponent.js",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"getInlinePropsUpdate\",\"newInlineProps\",\"_UpdateProps\",\"sharableViewDescriptors\",\"maybeViewRef\",\"_closure\",\"update\",\"default\"],\"sources\":[\"C:/Users/ishas/Web Technology - Copy/ReactNative/Final Project/MoneyWise/node_modules/react-native-reanimated/lib/commonjs/createAnimatedComponent.js\"],\"mappings\":\"AA8agC,SAAAA,SAAMA,CAAA;EAAA;IAAAC,oBAAA;IAAAC,cAAA;IAAAC,YAAA;IAAAC,uBAAA;IAAAC;EAAA,SAAAC,QAAA;EAG5B,MAAMC,MAAM,GAAGN,oBAAoB,CAACC,cAAc,CAAC;EACnD,CAAC,CAAC,EAAEC,YAAY,CAACK,OAAO,EAAEJ,uBAAuB,EAAEG,MAAM,EAAEF,YAAY,CAAC;AAC1E\"}"
};
function createAnimatedComponent(Component, options) {
  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, "Looks like you're passing a function component `" + Component.name + "` to `createAnimatedComponent` function which supports only class components. Please wrap your function component with `React.forwardRef()` or use a class component instead.");
  var AnimatedComponent = function (_react$default$Compon) {
    (0, _inherits2.default)(AnimatedComponent, _react$default$Compon);
    var _super = _createSuper(AnimatedComponent);
    function AnimatedComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      _this = _super.call(this, props);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_styles", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_animatedProps", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_viewTag", -1);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_isFirstRender", true);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "animatedStyle", {
        value: {}
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "initialStyle", {});
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_component", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlinePropsViewDescriptors", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlinePropsMapperId", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlineProps", {});
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_setComponentRef", (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          var tag = (0, _reactNative.findNodeHandle)(ref);
          var _this$props = _this.props,
            layout = _this$props.layout,
            entering = _this$props.entering,
            exiting = _this$props.exiting,
            sharedTransitionTag = _this$props.sharedTransitionTag;
          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {
            if (!(0, _PlatformChecker.shouldBeUseWeb)()) {
              (0, _core.enableLayoutAnimations)(true, false);
            }
            if (layout) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.LAYOUT, maybeBuild(layout));
            }
            if (entering) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.ENTERING, maybeBuild(entering));
            }
            if (exiting) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.EXITING, maybeBuild(exiting));
            }
            if (sharedTransitionTag) {
              var _this$props$sharedTra;
              var sharedElementTransition = (_this$props$sharedTra = _this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : _layoutReanimation.DefaultSharedTransition;
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.SHARED_ELEMENT_TRANSITION, maybeBuild(sharedElementTransition), sharedTransitionTag);
            }
          }
          if (ref !== _this._component) {
            _this._component = ref;
          }
        }
      }));
      if ((0, _PlatformChecker.isJest)()) {
        _this.animatedStyle = {
          value: {}
        };
      }
      return _this;
    }
    (0, _createClass2.default)(AnimatedComponent, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._detachNativeEvents();
        this._detachStyles();
        this._detachInlineProps();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._attachNativeEvents();
        this._attachAnimatedStyles();
        this._attachInlineProps();
      }
    }, {
      key: "_getEventViewRef",
      value: function _getEventViewRef() {
        var _this$_component;
        return (_this$_component = this._component) !== null && _this$_component !== void 0 && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;
      }
    }, {
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var node = this._getEventViewRef();
        var viewTag = (0, _reactNative.findNodeHandle)(options !== null && options !== void 0 && options.setNativeProps ? this : node);
        for (var key in this.props) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {
            prop.current.registerForEvents(viewTag, key);
          }
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        for (var key in this.props) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {
            prop.current.unregisterFromEvents();
          }
        }
      }
    }, {
      key: "_detachStyles",
      value: function _detachStyles() {
        if (_reactNative.Platform.OS === 'web' && this._styles !== null) {
          for (var style of this._styles) {
            if (style !== null && style !== void 0 && style.viewsRef) {
              style.viewsRef.remove(this);
            }
          }
        } else if (this._viewTag !== -1 && this._styles !== null) {
          var _this$props$animatedP;
          for (var _style of this._styles) {
            _style.viewDescriptors.remove(this._viewTag);
          }
          if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {
            this.props.animatedProps.viewDescriptors.remove(this._viewTag);
          }
          if (global._IS_FABRIC) {
            var viewTag = this._viewTag;
            (0, _core.runOnUI)(function () {
              var _e = [new global.Error(), -2, -27];
              var _f = function _f() {
                _removeShadowNodeFromRegistry(viewTag);
              };
              _f._closure = {
                viewTag: viewTag
              };
              _f.__initData = _worklet_13635933857374_init_data;
              _f.__workletHash = 13635933857374;
              _f.__stackDetails = _e;
              _f.__version = "3.1.0";
              return _f;
            }())();
          }
        }
      }
    }, {
      key: "_reattachNativeEvents",
      value: function _reattachNativeEvents(prevProps) {
        var viewTag;
        for (var key in this.props) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {
            if (viewTag === undefined) {
              viewTag = prop.current.viewTag;
            }
          }
        }
        for (var _key2 in prevProps) {
          var _prop = this.props[_key2];
          if (has('current', _prop) && _prop.current instanceof _WorkletEventHandler.default && _prop.current.reattachNeeded) {
            _prop.current.unregisterFromEvents();
          }
        }
        for (var _key3 in this.props) {
          var _prop2 = this.props[_key3];
          if (has('current', _prop2) && _prop2.current instanceof _WorkletEventHandler.default && _prop2.current.reattachNeeded) {
            _prop2.current.registerForEvents(viewTag, _key3);
            _prop2.current.reattachNeeded = false;
          }
        }
      }
    }, {
      key: "_updateFromNative",
      value: function _updateFromNative(props) {
        if (options !== null && options !== void 0 && options.setNativeProps) {
          options.setNativeProps(this._component, props);
        } else {
          var _this$_component2, _this$_component2$set;
          (_this$_component2 = this._component) === null || _this$_component2 === void 0 ? void 0 : (_this$_component2$set = _this$_component2.setNativeProps) === null || _this$_component2$set === void 0 ? void 0 : _this$_component2$set.call(_this$_component2, props);
        }
      }
    }, {
      key: "_getViewInfo",
      value: function _getViewInfo() {
        var viewTag;
        var viewName;
        var shadowNodeWrapper = null;
        var viewConfig;
        if (_reactNative.Platform.OS === 'web') {
          viewTag = (0, _reactNative.findNodeHandle)(this);
          viewName = null;
          shadowNodeWrapper = null;
          viewConfig = null;
        } else {
          var _hostInstance$viewCon;
          var hostInstance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(this);
          if (!hostInstance) {
            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');
          }
          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;
          viewName = hostInstance === null || hostInstance === void 0 ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) === null || _hostInstance$viewCon === void 0 ? void 0 : _hostInstance$viewCon.uiViewClassName;
          viewConfig = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig;
          if (global._IS_FABRIC) {
            shadowNodeWrapper = (0, _fabricUtils.getShadowNodeWrapperFromRef)(this);
          }
        }
        return {
          viewTag: viewTag,
          viewName: viewName,
          shadowNodeWrapper: shadowNodeWrapper,
          viewConfig: viewConfig
        };
      }
    }, {
      key: "_attachAnimatedStyles",
      value: function _attachAnimatedStyles() {
        var _this2 = this;
        var _this$props$animatedP2, _this$props$animatedP3;
        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];
        var prevStyles = this._styles;
        this._styles = styles;
        var prevAnimatedProps = this._animatedProps;
        this._animatedProps = this.props.animatedProps;
        var _this$_getViewInfo = this._getViewInfo(),
          viewTag = _this$_getViewInfo.viewTag,
          viewName = _this$_getViewInfo.viewName,
          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,
          viewConfig = _this$_getViewInfo.viewConfig;
        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;
        if (hasReanimated2Props && viewConfig) {
          (0, _ConfigHelper.adaptViewConfig)(viewConfig);
        }
        this._viewTag = viewTag;
        if (prevStyles) {
          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);
          if (!hasOneSameStyle) {
            var _loop = function _loop(prevStyle) {
              var isPresent = styles.some(function (style) {
                return isSameAnimatedStyle(style, prevStyle);
              });
              if (!isPresent) {
                prevStyle.viewDescriptors.remove(viewTag);
              }
            };
            for (var prevStyle of prevStyles) {
              _loop(prevStyle);
            }
          }
        }
        styles.forEach(function (style) {
          style.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
          if ((0, _PlatformChecker.isJest)()) {
            _this2.animatedStyle.value = Object.assign({}, _this2.animatedStyle.value, style.initial.value);
            style.animatedStyle.current = _this2.animatedStyle;
          }
        });
        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {
          prevAnimatedProps.viewDescriptors.remove(viewTag);
        }
        if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {
          this.props.animatedProps.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
        }
      }
    }, {
      key: "_attachInlineProps",
      value: function _attachInlineProps() {
        var newInlineProps = extractSharedValuesMapFromProps(this.props);
        var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);
        if (hasChanged) {
          if (!this._inlinePropsViewDescriptors) {
            this._inlinePropsViewDescriptors = (0, _ViewDescriptorsSet.makeViewDescriptorsSet)();
            var _this$_getViewInfo2 = this._getViewInfo(),
              viewTag = _this$_getViewInfo2.viewTag,
              viewName = _this$_getViewInfo2.viewName,
              shadowNodeWrapper = _this$_getViewInfo2.shadowNodeWrapper,
              viewConfig = _this$_getViewInfo2.viewConfig;
            if (Object.keys(newInlineProps).length && viewConfig) {
              (0, _ConfigHelper.adaptViewConfig)(viewConfig);
            }
            this._inlinePropsViewDescriptors.add({
              tag: viewTag,
              name: viewName,
              shadowNodeWrapper: shadowNodeWrapper
            });
          }
          var sharableViewDescriptors = this._inlinePropsViewDescriptors.sharableViewDescriptors;
          var maybeViewRef = _NativeReanimated.default.native ? undefined : {
            items: new Set([this])
          };
          var updaterFunction = function () {
            var _e = [new global.Error(), -6, -27];
            var _f = function _f() {
              var update = getInlinePropsUpdate(newInlineProps);
              (0, _UpdateProps.default)(sharableViewDescriptors, update, maybeViewRef);
            };
            _f._closure = {
              getInlinePropsUpdate: getInlinePropsUpdate,
              newInlineProps: newInlineProps,
              _UpdateProps: _UpdateProps,
              sharableViewDescriptors: sharableViewDescriptors,
              maybeViewRef: maybeViewRef
            };
            _f.__initData = _worklet_12585568983090_init_data;
            _f.__workletHash = 12585568983090;
            _f.__stackDetails = _e;
            _f.__version = "3.1.0";
            return _f;
          }();
          this._inlineProps = newInlineProps;
          if (this._inlinePropsMapperId) {
            (0, _core.stopMapper)(this._inlinePropsMapperId);
          }
          this._inlinePropsMapperId = null;
          if (Object.keys(newInlineProps).length) {
            this._inlinePropsMapperId = (0, _core.startMapper)(updaterFunction, Object.values(newInlineProps));
          }
        }
      }
    }, {
      key: "_detachInlineProps",
      value: function _detachInlineProps() {
        if (this._inlinePropsMapperId) {
          (0, _core.stopMapper)(this._inlinePropsMapperId);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._reattachNativeEvents(prevProps);
        this._attachAnimatedStyles();
        this._attachInlineProps();
      }
    }, {
      key: "_filterNonAnimatedProps",
      value: function _filterNonAnimatedProps(inputProps) {
        var _this3 = this;
        var props = {};
        var _loop2 = function _loop2() {
          var value = inputProps[key];
          if (key === 'style') {
            var styleProp = inputProps.style;
            var styles = flattenArray(styleProp != null ? styleProp : []);
            var processedStyle = styles.map(function (style) {
              if (style && style.viewDescriptors) {
                style.viewsRef.add(_this3);
                if (_this3._isFirstRender) {
                  _this3.initialStyle = Object.assign({}, style.initial.value, (0, _animation.initialUpdaterRun)(style.initial.updater));
                }
                return _this3.initialStyle;
              } else if (hasInlineStyles(style)) {
                if (_this3._isFirstRender) {
                  return getInlinePropsUpdate(style);
                }
                var newStyle = {};
                for (var _ref5 of Object.entries(style)) {
                  var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
                  var _key4 = _ref6[0];
                  var styleValue = _ref6[1];
                  if (!(0, _reanimated.isSharedValue)(styleValue) && !(_key4 === 'transform' && isInlineStyleTransform(styleValue))) {
                    newStyle[_key4] = styleValue;
                  }
                }
                return newStyle;
              } else {
                return style;
              }
            });
            props[key] = _reactNative.StyleSheet.flatten(processedStyle);
          } else if (key === 'animatedProps') {
            var animatedProp = inputProps.animatedProps;
            if (animatedProp.initial !== undefined) {
              Object.keys(animatedProp.initial.value).forEach(function (key) {
                var _animatedProp$initial, _animatedProp$viewsRe;
                props[key] = (_animatedProp$initial = animatedProp.initial) === null || _animatedProp$initial === void 0 ? void 0 : _animatedProp$initial.value[key];
                (_animatedProp$viewsRe = animatedProp.viewsRef) === null || _animatedProp$viewsRe === void 0 ? void 0 : _animatedProp$viewsRe.add(_this3);
              });
            }
          } else if (has('current', value) && value.current instanceof _WorkletEventHandler.default) {
            if (value.current.eventNames.length > 0) {
              value.current.eventNames.forEach(function (eventName) {
                props[eventName] = has('listeners', value.current) ? value.current.listeners[eventName] : dummyListener;
              });
            } else {
              props[key] = dummyListener;
            }
          } else if ((0, _reanimated.isSharedValue)(value)) {
            if (_this3._isFirstRender) {
              props[key] = value.value;
            }
          } else if (key !== 'onGestureHandlerStateChange' || !(0, _PlatformChecker.isChromeDebugger)()) {
            props[key] = value;
          }
        };
        for (var key in inputProps) {
          _loop2();
        }
        return props;
      }
    }, {
      key: "render",
      value: function render() {
        var props = this._filterNonAnimatedProps(this.props);
        if ((0, _PlatformChecker.isJest)()) {
          props.animatedStyle = this.animatedStyle;
        }
        if (this._isFirstRender) {
          this._isFirstRender = false;
        }
        var platformProps = _reactNative.Platform.select({
          web: {},
          default: {
            collapsable: false
          }
        });
        return _react.default.createElement(Component, _extends({}, props, {
          ref: this._setComponentRef
        }, platformProps));
      }
    }]);
    return AnimatedComponent;
  }(_react.default.Component);
  _defineProperty(AnimatedComponent, "displayName", void 0);
  AnimatedComponent.displayName = "AnimatedComponent(" + (Component.displayName || Component.name || 'Component') + ")";
  return _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {
      forwardedRef: ref
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Xb3JrbGV0RXZlbnRIYW5kbGVyIiwiX3NldEFuZEZvcndhcmRSZWYiLCJfaW52YXJpYW50IiwiX0NvbmZpZ0hlbHBlciIsIl9STlJlbmRlcmVyIiwiX2NvcmUiLCJfUGxhdGZvcm1DaGVja2VyIiwiX2FuaW1hdGlvbiIsIl9sYXlvdXRSZWFuaW1hdGlvbiIsIl9WaWV3RGVzY3JpcHRvcnNTZXQiLCJfZmFicmljVXRpbHMiLCJfVXBkYXRlUHJvcHMiLCJfTmF0aXZlUmVhbmltYXRlZCIsIl9yZWFuaW1hdGVkIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJkdW1teUxpc3RlbmVyIiwibWF5YmVCdWlsZCIsImxheW91dEFuaW1hdGlvbk9yQnVpbGRlciIsImlzQW5pbWF0aW9uQnVpbGRlciIsImJ1aWxkIiwiZmxhdHRlbkFycmF5IiwiYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJyZXN1bHRBcnIiLCJfZmxhdHRlbkFycmF5IiwiYXJyIiwiZm9yRWFjaCIsIml0ZW0iLCJwdXNoIiwib25seUFuaW1hdGVkU3R5bGVzIiwic3R5bGVzIiwiZmlsdGVyIiwic3R5bGUiLCJ2aWV3RGVzY3JpcHRvcnMiLCJpc1NhbWVBbmltYXRlZFN0eWxlIiwic3R5bGUxIiwic3R5bGUyIiwidmlld3NSZWYiLCJpc1NhbWVBbmltYXRlZFByb3BzIiwiaGFzIiwieCIsImlzSW5saW5lU3R5bGVUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJzb21lIiwidCIsImhhc0lubGluZVN0eWxlcyIsImtleXMiLCJzdHlsZVZhbHVlIiwiaXNTaGFyZWRWYWx1ZSIsImV4dHJhY3RTaGFyZWRWYWx1ZXNNYXBGcm9tUHJvcHMiLCJwcm9wcyIsImlubGluZVByb3BzIiwiX3Byb3BzJHN0eWxlIiwiX3JlZiIsImVudHJpZXMiLCJfcmVmMiIsIl9zbGljZWRUb0FycmF5MiIsImlubGluZVByb3BzSGFzQ2hhbmdlZCIsInN0eWxlczEiLCJzdHlsZXMyIiwiX3dvcmtsZXRfMTQ2MjA1ODUxMTIxMzJfaW5pdF9kYXRhIiwiY29kZSIsImxvY2F0aW9uIiwic291cmNlTWFwIiwiZ2V0SW5saW5lUHJvcHNVcGRhdGUiLCJfZSIsImdsb2JhbCIsIkVycm9yIiwiX2YiLCJ1cGRhdGUiLCJfcmVmMyIsIl9yZWY0IiwibWFwIiwiX2Nsb3N1cmUiLCJfX2luaXREYXRhIiwiX193b3JrbGV0SGFzaCIsIl9fc3RhY2tEZXRhaWxzIiwiX192ZXJzaW9uIiwiX3dvcmtsZXRfMTM2MzU5MzM4NTczNzRfaW5pdF9kYXRhIiwiX3dvcmtsZXRfMTI1ODU1Njg5ODMwOTBfaW5pdF9kYXRhIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJDb21wb25lbnQiLCJvcHRpb25zIiwiaXNSZWFjdENvbXBvbmVudCIsIm5hbWUiLCJBbmltYXRlZENvbXBvbmVudCIsIl9yZWFjdCRkZWZhdWx0JENvbXBvbiIsIl9pbmhlcml0czIiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsImdldEZvcndhcmRlZFJlZiIsImZvcndhcmRlZFJlZiIsInNldExvY2FsUmVmIiwicmVmIiwidGFnIiwiZmluZE5vZGVIYW5kbGUiLCJfdGhpcyRwcm9wcyIsImxheW91dCIsImVudGVyaW5nIiwiZXhpdGluZyIsInNoYXJlZFRyYW5zaXRpb25UYWciLCJzaG91bGRCZVVzZVdlYiIsImVuYWJsZUxheW91dEFuaW1hdGlvbnMiLCJjb25maWd1cmVMYXlvdXRBbmltYXRpb25zIiwiTGF5b3V0QW5pbWF0aW9uVHlwZSIsIkxBWU9VVCIsIkVOVEVSSU5HIiwiRVhJVElORyIsIl90aGlzJHByb3BzJHNoYXJlZFRyYSIsInNoYXJlZEVsZW1lbnRUcmFuc2l0aW9uIiwic2hhcmVkVHJhbnNpdGlvblN0eWxlIiwiRGVmYXVsdFNoYXJlZFRyYW5zaXRpb24iLCJTSEFSRURfRUxFTUVOVF9UUkFOU0lUSU9OIiwiX2NvbXBvbmVudCIsImlzSmVzdCIsImFuaW1hdGVkU3R5bGUiLCJfY3JlYXRlQ2xhc3MyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJfZGV0YWNoTmF0aXZlRXZlbnRzIiwiX2RldGFjaFN0eWxlcyIsIl9kZXRhY2hJbmxpbmVQcm9wcyIsImNvbXBvbmVudERpZE1vdW50IiwiX2F0dGFjaE5hdGl2ZUV2ZW50cyIsIl9hdHRhY2hBbmltYXRlZFN0eWxlcyIsIl9hdHRhY2hJbmxpbmVQcm9wcyIsIl9nZXRFdmVudFZpZXdSZWYiLCJfdGhpcyRfY29tcG9uZW50IiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJub2RlIiwidmlld1RhZyIsInNldE5hdGl2ZVByb3BzIiwicHJvcCIsImN1cnJlbnQiLCJyZWdpc3RlckZvckV2ZW50cyIsInVucmVnaXN0ZXJGcm9tRXZlbnRzIiwiUGxhdGZvcm0iLCJPUyIsIl9zdHlsZXMiLCJyZW1vdmUiLCJfdmlld1RhZyIsIl90aGlzJHByb3BzJGFuaW1hdGVkUCIsImFuaW1hdGVkUHJvcHMiLCJfSVNfRkFCUklDIiwicnVuT25VSSIsIl9yZW1vdmVTaGFkb3dOb2RlRnJvbVJlZ2lzdHJ5IiwiX3JlYXR0YWNoTmF0aXZlRXZlbnRzIiwicHJldlByb3BzIiwicmVhdHRhY2hOZWVkZWQiLCJfdXBkYXRlRnJvbU5hdGl2ZSIsIl90aGlzJF9jb21wb25lbnQyIiwiX3RoaXMkX2NvbXBvbmVudDIkc2V0IiwiX2dldFZpZXdJbmZvIiwidmlld05hbWUiLCJzaGFkb3dOb2RlV3JhcHBlciIsInZpZXdDb25maWciLCJfaG9zdEluc3RhbmNlJHZpZXdDb24iLCJob3N0SW5zdGFuY2UiLCJSTlJlbmRlcmVyIiwiZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEIiwiX25hdGl2ZVRhZyIsInVpVmlld0NsYXNzTmFtZSIsImdldFNoYWRvd05vZGVXcmFwcGVyRnJvbVJlZiIsIl90aGlzMiIsIl90aGlzJHByb3BzJGFuaW1hdGVkUDIiLCJfdGhpcyRwcm9wcyRhbmltYXRlZFAzIiwicHJldlN0eWxlcyIsInByZXZBbmltYXRlZFByb3BzIiwiX2FuaW1hdGVkUHJvcHMiLCJfdGhpcyRfZ2V0Vmlld0luZm8iLCJoYXNSZWFuaW1hdGVkMlByb3BzIiwiYWRhcHRWaWV3Q29uZmlnIiwiaGFzT25lU2FtZVN0eWxlIiwiX2xvb3AiLCJwcmV2U3R5bGUiLCJpc1ByZXNlbnQiLCJhZGQiLCJpbml0aWFsIiwibmV3SW5saW5lUHJvcHMiLCJoYXNDaGFuZ2VkIiwiX2lubGluZVByb3BzIiwiX2lubGluZVByb3BzVmlld0Rlc2NyaXB0b3JzIiwibWFrZVZpZXdEZXNjcmlwdG9yc1NldCIsIl90aGlzJF9nZXRWaWV3SW5mbzIiLCJzaGFyYWJsZVZpZXdEZXNjcmlwdG9ycyIsIm1heWJlVmlld1JlZiIsIm5hdGl2ZSIsIml0ZW1zIiwiU2V0IiwidXBkYXRlckZ1bmN0aW9uIiwiX2lubGluZVByb3BzTWFwcGVySWQiLCJzdG9wTWFwcGVyIiwic3RhcnRNYXBwZXIiLCJ2YWx1ZXMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJfZmlsdGVyTm9uQW5pbWF0ZWRQcm9wcyIsImlucHV0UHJvcHMiLCJfdGhpczMiLCJfbG9vcDIiLCJzdHlsZVByb3AiLCJwcm9jZXNzZWRTdHlsZSIsIl9pc0ZpcnN0UmVuZGVyIiwiaW5pdGlhbFN0eWxlIiwiaW5pdGlhbFVwZGF0ZXJSdW4iLCJ1cGRhdGVyIiwibmV3U3R5bGUiLCJfcmVmNSIsIl9yZWY2IiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJhbmltYXRlZFByb3AiLCJfYW5pbWF0ZWRQcm9wJGluaXRpYWwiLCJfYW5pbWF0ZWRQcm9wJHZpZXdzUmUiLCJldmVudE5hbWVzIiwiZXZlbnROYW1lIiwibGlzdGVuZXJzIiwiaXNDaHJvbWVEZWJ1Z2dlciIsInJlbmRlciIsInBsYXRmb3JtUHJvcHMiLCJzZWxlY3QiLCJ3ZWIiLCJjb2xsYXBzYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJfc2V0Q29tcG9uZW50UmVmIiwiZGlzcGxheU5hbWUiLCJmb3J3YXJkUmVmIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIE11dGFibGVSZWZPYmplY3QsIFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmROb2RlSGFuZGxlLCBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgV29ya2xldEV2ZW50SGFuZGxlciBmcm9tICcuL3JlYW5pbWF0ZWQyL1dvcmtsZXRFdmVudEhhbmRsZXInO1xuaW1wb3J0IHNldEFuZEZvcndhcmRSZWYgZnJvbSAnLi9zZXRBbmRGb3J3YXJkUmVmJztcbmltcG9ydCAnLi9yZWFuaW1hdGVkMi9sYXlvdXRSZWFuaW1hdGlvbi9hbmltYXRpb25zTWFuYWdlcic7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBhZGFwdFZpZXdDb25maWcgfSBmcm9tICcuL0NvbmZpZ0hlbHBlcic7XG5pbXBvcnQgeyBSTlJlbmRlcmVyIH0gZnJvbSAnLi9yZWFuaW1hdGVkMi9wbGF0Zm9ybS1zcGVjaWZpYy9STlJlbmRlcmVyJztcbmltcG9ydCB7XG4gIGNvbmZpZ3VyZUxheW91dEFuaW1hdGlvbnMsXG4gIGVuYWJsZUxheW91dEFuaW1hdGlvbnMsXG4gIHJ1bk9uVUksXG4gIHN0YXJ0TWFwcGVyLFxuICBzdG9wTWFwcGVyLFxufSBmcm9tICcuL3JlYW5pbWF0ZWQyL2NvcmUnO1xuaW1wb3J0IHtcbiAgaXNKZXN0LFxuICBpc0Nocm9tZURlYnVnZ2VyLFxuICBzaG91bGRCZVVzZVdlYixcbn0gZnJvbSAnLi9yZWFuaW1hdGVkMi9QbGF0Zm9ybUNoZWNrZXInO1xuaW1wb3J0IHsgaW5pdGlhbFVwZGF0ZXJSdW4gfSBmcm9tICcuL3JlYW5pbWF0ZWQyL2FuaW1hdGlvbic7XG5pbXBvcnQge1xuICBCYXNlQW5pbWF0aW9uQnVpbGRlcixcbiAgRGVmYXVsdFNoYXJlZFRyYW5zaXRpb24sXG4gIEVudHJ5RXhpdEFuaW1hdGlvbkZ1bmN0aW9uLFxuICBJTGF5b3V0QW5pbWF0aW9uQnVpbGRlcixcbiAgTGF5b3V0QW5pbWF0aW9uRnVuY3Rpb24sXG4gIExheW91dEFuaW1hdGlvblR5cGUsXG59IGZyb20gJy4vcmVhbmltYXRlZDIvbGF5b3V0UmVhbmltYXRpb24nO1xuaW1wb3J0IHtcbiAgU2hhcmVkVmFsdWUsXG4gIFN0eWxlUHJvcHMsXG4gIFNoYWRvd05vZGVXcmFwcGVyLFxufSBmcm9tICcuL3JlYW5pbWF0ZWQyL2NvbW1vblR5cGVzJztcbmltcG9ydCB7XG4gIG1ha2VWaWV3RGVzY3JpcHRvcnNTZXQsXG4gIFZpZXdEZXNjcmlwdG9yc1NldCxcbiAgVmlld1JlZlNldCxcbn0gZnJvbSAnLi9yZWFuaW1hdGVkMi9WaWV3RGVzY3JpcHRvcnNTZXQnO1xuaW1wb3J0IHsgZ2V0U2hhZG93Tm9kZVdyYXBwZXJGcm9tUmVmIH0gZnJvbSAnLi9yZWFuaW1hdGVkMi9mYWJyaWNVdGlscyc7XG5pbXBvcnQgdXBkYXRlUHJvcHMgZnJvbSAnLi9yZWFuaW1hdGVkMi9VcGRhdGVQcm9wcyc7XG5pbXBvcnQgTmF0aXZlUmVhbmltYXRlZE1vZHVsZSBmcm9tICcuL3JlYW5pbWF0ZWQyL05hdGl2ZVJlYW5pbWF0ZWQnO1xuaW1wb3J0IHsgaXNTaGFyZWRWYWx1ZSB9IGZyb20gJy4vcmVhbmltYXRlZDInO1xuXG5mdW5jdGlvbiBkdW1teUxpc3RlbmVyKCkge1xuICAvLyBlbXB0eSBsaXN0ZW5lciB3ZSB1c2UgdG8gYXNzaWduIHRvIGxpc3RlbmVyIHByb3BlcnRpZXMgZm9yIHdoaWNoIGFuaW1hdGVkXG4gIC8vIGV2ZW50IGlzIHVzZWQuXG59XG5cbmZ1bmN0aW9uIG1heWJlQnVpbGQoXG4gIGxheW91dEFuaW1hdGlvbk9yQnVpbGRlcjpcbiAgICB8IElMYXlvdXRBbmltYXRpb25CdWlsZGVyXG4gICAgfCBMYXlvdXRBbmltYXRpb25GdW5jdGlvblxuICAgIHwgS2V5ZnJhbWVcbik6IExheW91dEFuaW1hdGlvbkZ1bmN0aW9uIHwgS2V5ZnJhbWUge1xuICBjb25zdCBpc0FuaW1hdGlvbkJ1aWxkZXIgPSAoXG4gICAgdmFsdWU6IElMYXlvdXRBbmltYXRpb25CdWlsZGVyIHwgTGF5b3V0QW5pbWF0aW9uRnVuY3Rpb24gfCBLZXlmcmFtZVxuICApOiB2YWx1ZSBpcyBJTGF5b3V0QW5pbWF0aW9uQnVpbGRlciA9PlxuICAgICdidWlsZCcgaW4gbGF5b3V0QW5pbWF0aW9uT3JCdWlsZGVyICYmXG4gICAgdHlwZW9mIGxheW91dEFuaW1hdGlvbk9yQnVpbGRlci5idWlsZCA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoaXNBbmltYXRpb25CdWlsZGVyKGxheW91dEFuaW1hdGlvbk9yQnVpbGRlcikpIHtcbiAgICByZXR1cm4gbGF5b3V0QW5pbWF0aW9uT3JCdWlsZGVyLmJ1aWxkKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxheW91dEFuaW1hdGlvbk9yQnVpbGRlcjtcbiAgfVxufVxuXG50eXBlIE5lc3RlZEFycmF5PFQ+ID0gVCB8IE5lc3RlZEFycmF5PFQ+W107XG5mdW5jdGlvbiBmbGF0dGVuQXJyYXk8VD4oYXJyYXk6IE5lc3RlZEFycmF5PFQ+KTogVFtdIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiBbYXJyYXldO1xuICB9XG4gIGNvbnN0IHJlc3VsdEFycjogVFtdID0gW107XG5cbiAgY29uc3QgX2ZsYXR0ZW5BcnJheSA9IChhcnI6IE5lc3RlZEFycmF5PFQ+W10pOiB2b2lkID0+IHtcbiAgICBhcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgX2ZsYXR0ZW5BcnJheShpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdEFyci5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBfZmxhdHRlbkFycmF5KGFycmF5KTtcbiAgcmV0dXJuIHJlc3VsdEFycjtcbn1cblxuZnVuY3Rpb24gb25seUFuaW1hdGVkU3R5bGVzKHN0eWxlczogU3R5bGVQcm9wc1tdKSB7XG4gIHJldHVybiBzdHlsZXMuZmlsdGVyKChzdHlsZSkgPT4gc3R5bGU/LnZpZXdEZXNjcmlwdG9ycyk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUFuaW1hdGVkU3R5bGUoXG4gIHN0eWxlMT86IFN0eWxlUHJvcHMsXG4gIHN0eWxlMj86IFN0eWxlUHJvcHNcbik6IGJvb2xlYW4ge1xuICAvLyBXZSBjYW5ub3QgdXNlIGVxdWFsaXR5IGNoZWNrIHRvIGNvbXBhcmUgdXNlQW5pbWF0ZWRTdHlsZSBvdXRwdXRzIGRpcmVjdGx5LlxuICAvLyBJbnN0ZWFkLCB3ZSBjYW4gY29tcGFyZSBpdHMgdmlld3NSZWZzLlxuICByZXR1cm4gc3R5bGUxPy52aWV3c1JlZiA9PT0gc3R5bGUyPy52aWV3c1JlZjtcbn1cblxuY29uc3QgaXNTYW1lQW5pbWF0ZWRQcm9wcyA9IGlzU2FtZUFuaW1hdGVkU3R5bGU7XG5cbmNvbnN0IGhhcyA9IDxLIGV4dGVuZHMgc3RyaW5nPihcbiAga2V5OiBLLFxuICB4OiB1bmtub3duXG4pOiB4IGlzIHsgW2tleSBpbiBLXTogdW5rbm93biB9ID0+IHtcbiAgaWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgIGlmICh4ID09PSBudWxsIHx8IHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ga2V5IGluIHg7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIGlzSW5saW5lU3R5bGVUcmFuc2Zvcm0odHJhbnNmb3JtOiBhbnkpOiBib29sZWFuIHtcbiAgaWYgKCF0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybS5zb21lKCh0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiBoYXNJbmxpbmVTdHlsZXModCkpO1xufVxuXG5mdW5jdGlvbiBoYXNJbmxpbmVTdHlsZXMoc3R5bGU6IFN0eWxlUHJvcHMpOiBib29sZWFuIHtcbiAgaWYgKCFzdHlsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpLnNvbWUoKGtleSkgPT4ge1xuICAgIGNvbnN0IHN0eWxlVmFsdWUgPSBzdHlsZVtrZXldO1xuICAgIHJldHVybiAoXG4gICAgICBpc1NoYXJlZFZhbHVlKHN0eWxlVmFsdWUpIHx8XG4gICAgICAoa2V5ID09PSAndHJhbnNmb3JtJyAmJiBpc0lubGluZVN0eWxlVHJhbnNmb3JtKHN0eWxlVmFsdWUpKVxuICAgICk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0U2hhcmVkVmFsdWVzTWFwRnJvbVByb3BzKFxuICBwcm9wczogQW5pbWF0ZWRDb21wb25lbnRQcm9wczxJbml0aWFsQ29tcG9uZW50UHJvcHM+XG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgY29uc3QgaW5saW5lUHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvcHNba2V5XTtcbiAgICBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSBmbGF0dGVuQXJyYXk8U3R5bGVQcm9wcz4ocHJvcHMuc3R5bGUgPz8gW10pO1xuICAgICAgc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiB7XG4gICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdHlsZVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZSkpIHtcbiAgICAgICAgICBpZiAoaXNTaGFyZWRWYWx1ZShzdHlsZVZhbHVlKSkge1xuICAgICAgICAgICAgaW5saW5lUHJvcHNba2V5XSA9IHN0eWxlVmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGtleSA9PT0gJ3RyYW5zZm9ybScgJiZcbiAgICAgICAgICAgIGlzSW5saW5lU3R5bGVUcmFuc2Zvcm0oc3R5bGVWYWx1ZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlubGluZVByb3BzW2tleV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc1NoYXJlZFZhbHVlKHZhbHVlKSkge1xuICAgICAgaW5saW5lUHJvcHNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmxpbmVQcm9wcztcbn1cblxuZnVuY3Rpb24gaW5saW5lUHJvcHNIYXNDaGFuZ2VkKHN0eWxlczE6IFN0eWxlUHJvcHMsIHN0eWxlczI6IFN0eWxlUHJvcHMpIHtcbiAgaWYgKE9iamVjdC5rZXlzKHN0eWxlczEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3R5bGVzMikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzdHlsZXMxKSkge1xuICAgIGlmIChzdHlsZXMxW2tleV0gIT09IHN0eWxlczJba2V5XSkgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldElubGluZVByb3BzVXBkYXRlKGlubGluZVByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSB7XG4gICd3b3JrbGV0JztcbiAgY29uc3QgdXBkYXRlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgc3R5bGVWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoaW5saW5lUHJvcHMpKSB7XG4gICAgaWYgKGtleSA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgIHVwZGF0ZVtrZXldID0gc3R5bGVWYWx1ZS5tYXAoKHRyYW5zZm9ybTogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICAgICAgICByZXR1cm4gZ2V0SW5saW5lUHJvcHNVcGRhdGUodHJhbnNmb3JtKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNTaGFyZWRWYWx1ZShzdHlsZVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2tleV0gPSBzdHlsZVZhbHVlLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVba2V5XSA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB1cGRhdGU7XG59XG5cbmludGVyZmFjZSBBbmltYXRlZFByb3BzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICB2aWV3RGVzY3JpcHRvcnM/OiBWaWV3RGVzY3JpcHRvcnNTZXQ7XG4gIHZpZXdzUmVmPzogVmlld1JlZlNldDx1bmtub3duPjtcbiAgaW5pdGlhbD86IFNoYXJlZFZhbHVlPFN0eWxlUHJvcHM+O1xufVxuXG5leHBvcnQgdHlwZSBBbmltYXRlZENvbXBvbmVudFByb3BzPFAgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4gPSBQICYge1xuICBmb3J3YXJkZWRSZWY/OiBSZWY8Q29tcG9uZW50PjtcbiAgc3R5bGU/OiBOZXN0ZWRBcnJheTxTdHlsZVByb3BzPjtcbiAgYW5pbWF0ZWRQcm9wcz86IFBhcnRpYWw8QW5pbWF0ZWRDb21wb25lbnRQcm9wczxBbmltYXRlZFByb3BzPj47XG4gIGFuaW1hdGVkU3R5bGU/OiBTdHlsZVByb3BzO1xuICBsYXlvdXQ/OlxuICAgIHwgQmFzZUFuaW1hdGlvbkJ1aWxkZXJcbiAgICB8IElMYXlvdXRBbmltYXRpb25CdWlsZGVyXG4gICAgfCB0eXBlb2YgQmFzZUFuaW1hdGlvbkJ1aWxkZXI7XG4gIGVudGVyaW5nPzpcbiAgICB8IEJhc2VBbmltYXRpb25CdWlsZGVyXG4gICAgfCB0eXBlb2YgQmFzZUFuaW1hdGlvbkJ1aWxkZXJcbiAgICB8IEVudHJ5RXhpdEFuaW1hdGlvbkZ1bmN0aW9uXG4gICAgfCBLZXlmcmFtZTtcbiAgZXhpdGluZz86XG4gICAgfCBCYXNlQW5pbWF0aW9uQnVpbGRlclxuICAgIHwgdHlwZW9mIEJhc2VBbmltYXRpb25CdWlsZGVyXG4gICAgfCBFbnRyeUV4aXRBbmltYXRpb25GdW5jdGlvblxuICAgIHwgS2V5ZnJhbWU7XG4gIHNoYXJlZFRyYW5zaXRpb25UYWc/OiBzdHJpbmc7XG4gIHNoYXJlZFRyYW5zaXRpb25TdHlsZT86IElMYXlvdXRBbmltYXRpb25CdWlsZGVyO1xufTtcblxudHlwZSBPcHRpb25zPFA+ID0ge1xuICBzZXROYXRpdmVQcm9wczogKHJlZjogQ29tcG9uZW50UmVmLCBwcm9wczogUCkgPT4gdm9pZDtcbn07XG5cbmludGVyZmFjZSBDb21wb25lbnRSZWYgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzZXROYXRpdmVQcm9wcz86IChwcm9wczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pID0+IHZvaWQ7XG4gIGdldFNjcm9sbGFibGVOb2RlPzogKCkgPT4gQ29tcG9uZW50UmVmO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRpYWxDb21wb25lbnRQcm9wcyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmVmPzogUmVmPENvbXBvbmVudD47XG4gIGNvbGxhcHNhYmxlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQoXG4gIENvbXBvbmVudDogQ29tcG9uZW50VHlwZTxJbml0aWFsQ29tcG9uZW50UHJvcHM+LFxuICBvcHRpb25zPzogT3B0aW9uczxJbml0aWFsQ29tcG9uZW50UHJvcHM+XG4pOiBDb21wb25lbnRUeXBlPEFuaW1hdGVkQ29tcG9uZW50UHJvcHM8SW5pdGlhbENvbXBvbmVudFByb3BzPj4ge1xuICBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIENvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgKENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSxcbiAgICBgTG9va3MgbGlrZSB5b3UncmUgcGFzc2luZyBhIGZ1bmN0aW9uIGNvbXBvbmVudCBcXGAke0NvbXBvbmVudC5uYW1lfVxcYCB0byBcXGBjcmVhdGVBbmltYXRlZENvbXBvbmVudFxcYCBmdW5jdGlvbiB3aGljaCBzdXBwb3J0cyBvbmx5IGNsYXNzIGNvbXBvbmVudHMuIFBsZWFzZSB3cmFwIHlvdXIgZnVuY3Rpb24gY29tcG9uZW50IHdpdGggXFxgUmVhY3QuZm9yd2FyZFJlZigpXFxgIG9yIHVzZSBhIGNsYXNzIGNvbXBvbmVudCBpbnN0ZWFkLmBcbiAgKTtcblxuICBjbGFzcyBBbmltYXRlZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgICBBbmltYXRlZENvbXBvbmVudFByb3BzPEluaXRpYWxDb21wb25lbnRQcm9wcz5cbiAgPiB7XG4gICAgX3N0eWxlczogU3R5bGVQcm9wc1tdIHwgbnVsbCA9IG51bGw7XG4gICAgX2FuaW1hdGVkUHJvcHM/OiBQYXJ0aWFsPEFuaW1hdGVkQ29tcG9uZW50UHJvcHM8QW5pbWF0ZWRQcm9wcz4+O1xuICAgIF92aWV3VGFnID0gLTE7XG4gICAgX2lzRmlyc3RSZW5kZXIgPSB0cnVlO1xuICAgIGFuaW1hdGVkU3R5bGU6IHsgdmFsdWU6IFN0eWxlUHJvcHMgfSA9IHsgdmFsdWU6IHt9IH07XG4gICAgaW5pdGlhbFN0eWxlID0ge307XG4gICAgX2NvbXBvbmVudDogQ29tcG9uZW50UmVmIHwgbnVsbCA9IG51bGw7XG4gICAgX2lubGluZVByb3BzVmlld0Rlc2NyaXB0b3JzOiBWaWV3RGVzY3JpcHRvcnNTZXQgfCBudWxsID0gbnVsbDtcbiAgICBfaW5saW5lUHJvcHNNYXBwZXJJZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgX2lubGluZVByb3BzOiBTdHlsZVByb3BzID0ge307XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQW5pbWF0ZWRDb21wb25lbnRQcm9wczxJbml0aWFsQ29tcG9uZW50UHJvcHM+KSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG4gICAgICBpZiAoaXNKZXN0KCkpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlZFN0eWxlID0geyB2YWx1ZToge30gfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuX2RldGFjaE5hdGl2ZUV2ZW50cygpO1xuICAgICAgdGhpcy5fZGV0YWNoU3R5bGVzKCk7XG4gICAgICB0aGlzLl9kZXRhY2hJbmxpbmVQcm9wcygpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fYXR0YWNoTmF0aXZlRXZlbnRzKCk7XG4gICAgICB0aGlzLl9hdHRhY2hBbmltYXRlZFN0eWxlcygpO1xuICAgICAgdGhpcy5fYXR0YWNoSW5saW5lUHJvcHMoKTtcbiAgICB9XG5cbiAgICBfZ2V0RXZlbnRWaWV3UmVmKCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHRvIGdldCB0aGUgc2Nyb2xsYWJsZSBub2RlIGZvciBjb21wb25lbnRzIHRoYXQgaW1wbGVtZW50XG4gICAgICAvLyBgU2Nyb2xsUmVzcG9uZGVyLk1peGluYC5cbiAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnQ/LmdldFNjcm9sbGFibGVOb2RlXG4gICAgICAgID8gdGhpcy5fY29tcG9uZW50LmdldFNjcm9sbGFibGVOb2RlKClcbiAgICAgICAgOiB0aGlzLl9jb21wb25lbnQ7XG4gICAgfVxuXG4gICAgX2F0dGFjaE5hdGl2ZUV2ZW50cygpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9nZXRFdmVudFZpZXdSZWYoKTtcbiAgICAgIGNvbnN0IHZpZXdUYWcgPSBmaW5kTm9kZUhhbmRsZShvcHRpb25zPy5zZXROYXRpdmVQcm9wcyA/IHRoaXMgOiBub2RlKTtcblxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaGFzKCdjdXJyZW50JywgcHJvcCkgJiZcbiAgICAgICAgICBwcm9wLmN1cnJlbnQgaW5zdGFuY2VvZiBXb3JrbGV0RXZlbnRIYW5kbGVyXG4gICAgICAgICkge1xuICAgICAgICAgIHByb3AuY3VycmVudC5yZWdpc3RlckZvckV2ZW50cyh2aWV3VGFnIGFzIG51bWJlciwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9kZXRhY2hOYXRpdmVFdmVudHMoKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLnByb3BzW2tleV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBoYXMoJ2N1cnJlbnQnLCBwcm9wKSAmJlxuICAgICAgICAgIHByb3AuY3VycmVudCBpbnN0YW5jZW9mIFdvcmtsZXRFdmVudEhhbmRsZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvcC5jdXJyZW50LnVucmVnaXN0ZXJGcm9tRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZGV0YWNoU3R5bGVzKCkge1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnd2ViJyAmJiB0aGlzLl9zdHlsZXMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiB0aGlzLl9zdHlsZXMpIHtcbiAgICAgICAgICBpZiAoc3R5bGU/LnZpZXdzUmVmKSB7XG4gICAgICAgICAgICBzdHlsZS52aWV3c1JlZi5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZpZXdUYWcgIT09IC0xICYmIHRoaXMuX3N0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIHRoaXMuX3N0eWxlcykge1xuICAgICAgICAgIHN0eWxlLnZpZXdEZXNjcmlwdG9ycy5yZW1vdmUodGhpcy5fdmlld1RhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYW5pbWF0ZWRQcm9wcz8udmlld0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5hbmltYXRlZFByb3BzLnZpZXdEZXNjcmlwdG9ycy5yZW1vdmUodGhpcy5fdmlld1RhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2JhbC5fSVNfRkFCUklDKSB7XG4gICAgICAgICAgY29uc3Qgdmlld1RhZyA9IHRoaXMuX3ZpZXdUYWc7XG4gICAgICAgICAgcnVuT25VSSgoKSA9PiB7XG4gICAgICAgICAgICAnd29ya2xldCc7XG4gICAgICAgICAgICBfcmVtb3ZlU2hhZG93Tm9kZUZyb21SZWdpc3RyeSEodmlld1RhZyk7XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9yZWF0dGFjaE5hdGl2ZUV2ZW50cyhcbiAgICAgIHByZXZQcm9wczogQW5pbWF0ZWRDb21wb25lbnRQcm9wczxJbml0aWFsQ29tcG9uZW50UHJvcHM+XG4gICAgKSB7XG4gICAgICBsZXQgdmlld1RhZzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLnByb3BzW2tleV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBoYXMoJ2N1cnJlbnQnLCBwcm9wKSAmJlxuICAgICAgICAgIHByb3AuY3VycmVudCBpbnN0YW5jZW9mIFdvcmtsZXRFdmVudEhhbmRsZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHZpZXdUYWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmlld1RhZyA9IHByb3AuY3VycmVudC52aWV3VGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJldlByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLnByb3BzW2tleV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBoYXMoJ2N1cnJlbnQnLCBwcm9wKSAmJlxuICAgICAgICAgIHByb3AuY3VycmVudCBpbnN0YW5jZW9mIFdvcmtsZXRFdmVudEhhbmRsZXIgJiZcbiAgICAgICAgICBwcm9wLmN1cnJlbnQucmVhdHRhY2hOZWVkZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvcC5jdXJyZW50LnVucmVnaXN0ZXJGcm9tRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaGFzKCdjdXJyZW50JywgcHJvcCkgJiZcbiAgICAgICAgICBwcm9wLmN1cnJlbnQgaW5zdGFuY2VvZiBXb3JrbGV0RXZlbnRIYW5kbGVyICYmXG4gICAgICAgICAgcHJvcC5jdXJyZW50LnJlYXR0YWNoTmVlZGVkXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgcHJvcC5jdXJyZW50LnJlZ2lzdGVyRm9yRXZlbnRzKHZpZXdUYWchLCBrZXkpO1xuICAgICAgICAgIHByb3AuY3VycmVudC5yZWF0dGFjaE5lZWRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZUZyb21OYXRpdmUocHJvcHM6IFN0eWxlUHJvcHMpIHtcbiAgICAgIGlmIChvcHRpb25zPy5zZXROYXRpdmVQcm9wcykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBvcHRpb25zLnNldE5hdGl2ZVByb3BzKHRoaXMuX2NvbXBvbmVudCEsIHByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgdGhpcy5fY29tcG9uZW50Py5zZXROYXRpdmVQcm9wcz8uKHByb3BzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0Vmlld0luZm8oKSB7XG4gICAgICBsZXQgdmlld1RhZzogbnVtYmVyIHwgbnVsbDtcbiAgICAgIGxldCB2aWV3TmFtZTogc3RyaW5nIHwgbnVsbDtcbiAgICAgIGxldCBzaGFkb3dOb2RlV3JhcHBlcjogU2hhZG93Tm9kZVdyYXBwZXIgfCBudWxsID0gbnVsbDtcbiAgICAgIGxldCB2aWV3Q29uZmlnO1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnd2ViJykge1xuICAgICAgICB2aWV3VGFnID0gZmluZE5vZGVIYW5kbGUodGhpcyk7XG4gICAgICAgIHZpZXdOYW1lID0gbnVsbDtcbiAgICAgICAgc2hhZG93Tm9kZVdyYXBwZXIgPSBudWxsO1xuICAgICAgICB2aWV3Q29uZmlnID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGhvc3RJbnN0YW5jZSBjYW4gYmUgbnVsbCBmb3IgYSBjb21wb25lbnQgdGhhdCBkb2Vzbid0IHJlbmRlciBhbnl0aGluZyAocmVuZGVyIGZ1bmN0aW9uIHJldHVybnMgbnVsbCkuIEV4YW1wbGU6IHN2ZyBTdG9wOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXN2Zy9yZWFjdC1uYXRpdmUtc3ZnL2Jsb2IvZGV2ZWxvcC9zcmMvZWxlbWVudHMvU3RvcC50c3hcbiAgICAgICAgY29uc3QgaG9zdEluc3RhbmNlID0gUk5SZW5kZXJlci5maW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQodGhpcyk7XG4gICAgICAgIGlmICghaG9zdEluc3RhbmNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0Nhbm5vdCBmaW5kIGhvc3QgaW5zdGFuY2UgZm9yIHRoaXMgY29tcG9uZW50LiBNYXliZSBpdCByZW5kZXJzIG5vdGhpbmc/J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2FuIGFjY2VzcyB2aWV3IHRhZyBpbiB0aGUgc2FtZSB3YXkgaXQncyBhY2Nlc3NlZCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2UzZjRlYjcyNzJkNGNhMGVlNDlmMjc1NzcxNTZiNTdlZWIwN2NmNzMvcGFja2FnZXMvcmVhY3QtbmF0aXZlLXJlbmRlcmVyL3NyYy9SZWFjdEZhYnJpYy5qcyNMMTQ2XG4gICAgICAgIHZpZXdUYWcgPSBob3N0SW5zdGFuY2U/Ll9uYXRpdmVUYWc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSTiB1c2VzIHZpZXdDb25maWcgZm9yIGNvbXBvbmVudHMgZm9yIHN0b3JpbmcgZGlmZmVyZW50IHByb3BlcnRpZXMgb2YgdGhlIGNvbXBvbmVudChleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvbWFzdGVyL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlld1ZpZXdDb25maWcuanMjTDE2KS5cbiAgICAgICAgICogVGhlIG5hbWUgd2UncmUgbG9va2luZyBmb3IgaXMgaW4gdGhlIGZpZWxkIG5hbWVkIHVpVmlld0NsYXNzTmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHZpZXdOYW1lID0gaG9zdEluc3RhbmNlPy52aWV3Q29uZmlnPy51aVZpZXdDbGFzc05hbWU7XG5cbiAgICAgICAgdmlld0NvbmZpZyA9IGhvc3RJbnN0YW5jZT8udmlld0NvbmZpZztcblxuICAgICAgICBpZiAoZ2xvYmFsLl9JU19GQUJSSUMpIHtcbiAgICAgICAgICBzaGFkb3dOb2RlV3JhcHBlciA9IGdldFNoYWRvd05vZGVXcmFwcGVyRnJvbVJlZih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdmlld1RhZywgdmlld05hbWUsIHNoYWRvd05vZGVXcmFwcGVyLCB2aWV3Q29uZmlnIH07XG4gICAgfVxuXG4gICAgX2F0dGFjaEFuaW1hdGVkU3R5bGVzKCkge1xuICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5wcm9wcy5zdHlsZVxuICAgICAgICA/IG9ubHlBbmltYXRlZFN0eWxlcyhmbGF0dGVuQXJyYXk8U3R5bGVQcm9wcz4odGhpcy5wcm9wcy5zdHlsZSkpXG4gICAgICAgIDogW107XG4gICAgICBjb25zdCBwcmV2U3R5bGVzID0gdGhpcy5fc3R5bGVzO1xuICAgICAgdGhpcy5fc3R5bGVzID0gc3R5bGVzO1xuXG4gICAgICBjb25zdCBwcmV2QW5pbWF0ZWRQcm9wcyA9IHRoaXMuX2FuaW1hdGVkUHJvcHM7XG4gICAgICB0aGlzLl9hbmltYXRlZFByb3BzID0gdGhpcy5wcm9wcy5hbmltYXRlZFByb3BzO1xuXG4gICAgICBjb25zdCB7IHZpZXdUYWcsIHZpZXdOYW1lLCBzaGFkb3dOb2RlV3JhcHBlciwgdmlld0NvbmZpZyB9ID1cbiAgICAgICAgdGhpcy5fZ2V0Vmlld0luZm8oKTtcblxuICAgICAgLy8gdXBkYXRlIFVJIHByb3BzIHdoaXRlbGlzdCBmb3IgdGhpcyB2aWV3XG4gICAgICBjb25zdCBoYXNSZWFuaW1hdGVkMlByb3BzID1cbiAgICAgICAgdGhpcy5wcm9wcy5hbmltYXRlZFByb3BzPy52aWV3RGVzY3JpcHRvcnMgfHwgc3R5bGVzLmxlbmd0aDtcbiAgICAgIGlmIChoYXNSZWFuaW1hdGVkMlByb3BzICYmIHZpZXdDb25maWcpIHtcbiAgICAgICAgYWRhcHRWaWV3Q29uZmlnKHZpZXdDb25maWcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl92aWV3VGFnID0gdmlld1RhZyBhcyBudW1iZXI7XG5cbiAgICAgIC8vIHJlbW92ZSBvbGQgc3R5bGVzXG4gICAgICBpZiAocHJldlN0eWxlcykge1xuICAgICAgICAvLyBpbiBtb3N0IG9mIHRoZSBjYXNlcywgdmlld3MgaGF2ZSBvbmx5IGEgc2luZ2xlIGFuaW1hdGVkIHN0eWxlIGFuZCBpdCByZW1haW5zIHVuY2hhbmdlZFxuICAgICAgICBjb25zdCBoYXNPbmVTYW1lU3R5bGUgPVxuICAgICAgICAgIHN0eWxlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgICBwcmV2U3R5bGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgIGlzU2FtZUFuaW1hdGVkU3R5bGUoc3R5bGVzWzBdLCBwcmV2U3R5bGVzWzBdKTtcblxuICAgICAgICBpZiAoIWhhc09uZVNhbWVTdHlsZSkge1xuICAgICAgICAgIC8vIG90aGVyd2lzZSwgcmVtb3ZlIGVhY2ggc3R5bGUgdGhhdCBpcyBub3QgcHJlc2VudCBpbiBuZXcgc3R5bGVzXG4gICAgICAgICAgZm9yIChjb25zdCBwcmV2U3R5bGUgb2YgcHJldlN0eWxlcykge1xuICAgICAgICAgICAgY29uc3QgaXNQcmVzZW50ID0gc3R5bGVzLnNvbWUoKHN0eWxlKSA9PlxuICAgICAgICAgICAgICBpc1NhbWVBbmltYXRlZFN0eWxlKHN0eWxlLCBwcmV2U3R5bGUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpc1ByZXNlbnQpIHtcbiAgICAgICAgICAgICAgcHJldlN0eWxlLnZpZXdEZXNjcmlwdG9ycy5yZW1vdmUodmlld1RhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcy5mb3JFYWNoKChzdHlsZSkgPT4ge1xuICAgICAgICBzdHlsZS52aWV3RGVzY3JpcHRvcnMuYWRkKHtcbiAgICAgICAgICB0YWc6IHZpZXdUYWcsXG4gICAgICAgICAgbmFtZTogdmlld05hbWUsXG4gICAgICAgICAgc2hhZG93Tm9kZVdyYXBwZXIsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNKZXN0KCkpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBXZSBuZWVkIHRvIGNvbm5lY3QgSmVzdCdzIFRlc3RPYmplY3QgaW5zdGFuY2Ugd2hvc2UgY29udGFpbnMganVzdCBwcm9wcyBvYmplY3RcbiAgICAgICAgICAgKiB3aXRoIHRoZSB1cGRhdGVQcm9wcygpIGZ1bmN0aW9uIHdoZXJlIHdlIHVwZGF0ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgY29tcG9uZW50LlxuICAgICAgICAgICAqIFdlIGNhbid0IHVwZGF0ZSBwcm9wcyBvYmplY3QgZGlyZWN0bHkgYmVjYXVzZSBUZXN0T2JqZWN0IGNvbnRhaW5zIGEgY29weSBvZiBwcm9wcyAtIGxvb2sgYXQgcmVuZGVyIGZ1bmN0aW9uOlxuICAgICAgICAgICAqIGNvbnN0IHByb3BzID0gdGhpcy5fZmlsdGVyTm9uQW5pbWF0ZWRQcm9wcyh0aGlzLnByb3BzKTtcbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLmFuaW1hdGVkU3R5bGUudmFsdWUgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmFuaW1hdGVkU3R5bGUudmFsdWUsXG4gICAgICAgICAgICAuLi5zdHlsZS5pbml0aWFsLnZhbHVlLFxuICAgICAgICAgIH07XG4gICAgICAgICAgc3R5bGUuYW5pbWF0ZWRTdHlsZS5jdXJyZW50ID0gdGhpcy5hbmltYXRlZFN0eWxlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZGV0YWNoIG9sZCBhbmltYXRlZFByb3BzXG4gICAgICBpZiAoXG4gICAgICAgIHByZXZBbmltYXRlZFByb3BzICYmXG4gICAgICAgICFpc1NhbWVBbmltYXRlZFByb3BzKHByZXZBbmltYXRlZFByb3BzLCB0aGlzLnByb3BzLmFuaW1hdGVkUHJvcHMpXG4gICAgICApIHtcbiAgICAgICAgcHJldkFuaW1hdGVkUHJvcHMudmlld0Rlc2NyaXB0b3JzIS5yZW1vdmUodmlld1RhZyBhcyBudW1iZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBhdHRhY2ggYW5pbWF0ZWRQcm9wcyBwcm9wZXJ0eVxuICAgICAgaWYgKHRoaXMucHJvcHMuYW5pbWF0ZWRQcm9wcz8udmlld0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYW5pbWF0ZWRQcm9wcy52aWV3RGVzY3JpcHRvcnMuYWRkKHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgIHRhZzogdmlld1RhZyEsXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICBuYW1lOiB2aWV3TmFtZSEsXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICBzaGFkb3dOb2RlV3JhcHBlcjogc2hhZG93Tm9kZVdyYXBwZXIhLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYXR0YWNoSW5saW5lUHJvcHMoKSB7XG4gICAgICBjb25zdCBuZXdJbmxpbmVQcm9wczogUmVjb3JkPHN0cmluZywgYW55PiA9XG4gICAgICAgIGV4dHJhY3RTaGFyZWRWYWx1ZXNNYXBGcm9tUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICBjb25zdCBoYXNDaGFuZ2VkID0gaW5saW5lUHJvcHNIYXNDaGFuZ2VkKFxuICAgICAgICBuZXdJbmxpbmVQcm9wcyxcbiAgICAgICAgdGhpcy5faW5saW5lUHJvcHNcbiAgICAgICk7XG5cbiAgICAgIGlmIChoYXNDaGFuZ2VkKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5saW5lUHJvcHNWaWV3RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICB0aGlzLl9pbmxpbmVQcm9wc1ZpZXdEZXNjcmlwdG9ycyA9IG1ha2VWaWV3RGVzY3JpcHRvcnNTZXQoKTtcblxuICAgICAgICAgIGNvbnN0IHsgdmlld1RhZywgdmlld05hbWUsIHNoYWRvd05vZGVXcmFwcGVyLCB2aWV3Q29uZmlnIH0gPVxuICAgICAgICAgICAgdGhpcy5fZ2V0Vmlld0luZm8oKTtcblxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdJbmxpbmVQcm9wcykubGVuZ3RoICYmIHZpZXdDb25maWcpIHtcbiAgICAgICAgICAgIGFkYXB0Vmlld0NvbmZpZyh2aWV3Q29uZmlnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9pbmxpbmVQcm9wc1ZpZXdEZXNjcmlwdG9ycy5hZGQoe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIHRhZzogdmlld1RhZyEsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgbmFtZTogdmlld05hbWUhLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIHNoYWRvd05vZGVXcmFwcGVyOiBzaGFkb3dOb2RlV3JhcHBlciEsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2hhcmFibGVWaWV3RGVzY3JpcHRvcnMgPVxuICAgICAgICAgIHRoaXMuX2lubGluZVByb3BzVmlld0Rlc2NyaXB0b3JzLnNoYXJhYmxlVmlld0Rlc2NyaXB0b3JzO1xuXG4gICAgICAgIGNvbnN0IG1heWJlVmlld1JlZiA9IE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUubmF0aXZlXG4gICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICA6ICh7IGl0ZW1zOiBuZXcgU2V0KFt0aGlzXSkgfSBhcyBWaWV3UmVmU2V0PGFueT4pOyAvLyBzZWUgbWFrZVZpZXdzUmVmU2V0XG5cbiAgICAgICAgY29uc3QgdXBkYXRlckZ1bmN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgICBjb25zdCB1cGRhdGUgPSBnZXRJbmxpbmVQcm9wc1VwZGF0ZShuZXdJbmxpbmVQcm9wcyk7XG4gICAgICAgICAgdXBkYXRlUHJvcHMoc2hhcmFibGVWaWV3RGVzY3JpcHRvcnMsIHVwZGF0ZSwgbWF5YmVWaWV3UmVmKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faW5saW5lUHJvcHMgPSBuZXdJbmxpbmVQcm9wcztcbiAgICAgICAgaWYgKHRoaXMuX2lubGluZVByb3BzTWFwcGVySWQpIHtcbiAgICAgICAgICBzdG9wTWFwcGVyKHRoaXMuX2lubGluZVByb3BzTWFwcGVySWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lubGluZVByb3BzTWFwcGVySWQgPSBudWxsO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMobmV3SW5saW5lUHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2lubGluZVByb3BzTWFwcGVySWQgPSBzdGFydE1hcHBlcihcbiAgICAgICAgICAgIHVwZGF0ZXJGdW5jdGlvbixcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMobmV3SW5saW5lUHJvcHMpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9kZXRhY2hJbmxpbmVQcm9wcygpIHtcbiAgICAgIGlmICh0aGlzLl9pbmxpbmVQcm9wc01hcHBlcklkKSB7XG4gICAgICAgIHN0b3BNYXBwZXIodGhpcy5faW5saW5lUHJvcHNNYXBwZXJJZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKFxuICAgICAgcHJldlByb3BzOiBBbmltYXRlZENvbXBvbmVudFByb3BzPEluaXRpYWxDb21wb25lbnRQcm9wcz5cbiAgICApIHtcbiAgICAgIHRoaXMuX3JlYXR0YWNoTmF0aXZlRXZlbnRzKHByZXZQcm9wcyk7XG4gICAgICB0aGlzLl9hdHRhY2hBbmltYXRlZFN0eWxlcygpO1xuICAgICAgdGhpcy5fYXR0YWNoSW5saW5lUHJvcHMoKTtcbiAgICB9XG5cbiAgICBfc2V0Q29tcG9uZW50UmVmID0gc2V0QW5kRm9yd2FyZFJlZjxDb21wb25lbnQ+KHtcbiAgICAgIGdldEZvcndhcmRlZFJlZjogKCkgPT5cbiAgICAgICAgdGhpcy5wcm9wcy5mb3J3YXJkZWRSZWYgYXMgTXV0YWJsZVJlZk9iamVjdDxcbiAgICAgICAgICBDb21wb25lbnQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4sIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCB1bmtub3duPlxuICAgICAgICA+LFxuICAgICAgc2V0TG9jYWxSZWY6IChyZWYpID0+IHtcbiAgICAgICAgLy8gVE9ETyB1cGRhdGUgY29uZmlnXG4gICAgICAgIGNvbnN0IHRhZyA9IGZpbmROb2RlSGFuZGxlKHJlZik7XG4gICAgICAgIGNvbnN0IHsgbGF5b3V0LCBlbnRlcmluZywgZXhpdGluZywgc2hhcmVkVHJhbnNpdGlvblRhZyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChsYXlvdXQgfHwgZW50ZXJpbmcgfHwgZXhpdGluZyB8fCBzaGFyZWRUcmFuc2l0aW9uVGFnKSAmJlxuICAgICAgICAgIHRhZyAhPSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICghc2hvdWxkQmVVc2VXZWIoKSkge1xuICAgICAgICAgICAgZW5hYmxlTGF5b3V0QW5pbWF0aW9ucyh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXlvdXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyZUxheW91dEFuaW1hdGlvbnMoXG4gICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgTGF5b3V0QW5pbWF0aW9uVHlwZS5MQVlPVVQsXG4gICAgICAgICAgICAgIG1heWJlQnVpbGQobGF5b3V0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVudGVyaW5nKSB7XG4gICAgICAgICAgICBjb25maWd1cmVMYXlvdXRBbmltYXRpb25zKFxuICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgIExheW91dEFuaW1hdGlvblR5cGUuRU5URVJJTkcsXG4gICAgICAgICAgICAgIG1heWJlQnVpbGQoZW50ZXJpbmcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXhpdGluZykge1xuICAgICAgICAgICAgY29uZmlndXJlTGF5b3V0QW5pbWF0aW9ucyhcbiAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICBMYXlvdXRBbmltYXRpb25UeXBlLkVYSVRJTkcsXG4gICAgICAgICAgICAgIG1heWJlQnVpbGQoZXhpdGluZylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGFyZWRUcmFuc2l0aW9uVGFnKSB7XG4gICAgICAgICAgICBjb25zdCBzaGFyZWRFbGVtZW50VHJhbnNpdGlvbiA9XG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuc2hhcmVkVHJhbnNpdGlvblN0eWxlID8/IERlZmF1bHRTaGFyZWRUcmFuc2l0aW9uO1xuICAgICAgICAgICAgY29uZmlndXJlTGF5b3V0QW5pbWF0aW9ucyhcbiAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICBMYXlvdXRBbmltYXRpb25UeXBlLlNIQVJFRF9FTEVNRU5UX1RSQU5TSVRJT04sXG4gICAgICAgICAgICAgIG1heWJlQnVpbGQoc2hhcmVkRWxlbWVudFRyYW5zaXRpb24pLFxuICAgICAgICAgICAgICBzaGFyZWRUcmFuc2l0aW9uVGFnXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWYgIT09IHRoaXMuX2NvbXBvbmVudCkge1xuICAgICAgICAgIHRoaXMuX2NvbXBvbmVudCA9IHJlZjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIF9maWx0ZXJOb25BbmltYXRlZFByb3BzKFxuICAgICAgaW5wdXRQcm9wczogQW5pbWF0ZWRDb21wb25lbnRQcm9wczxJbml0aWFsQ29tcG9uZW50UHJvcHM+XG4gICAgKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICAgICAgY29uc3QgcHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnB1dFByb3BzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXRQcm9wc1trZXldO1xuICAgICAgICBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgY29uc3Qgc3R5bGVQcm9wID0gaW5wdXRQcm9wcy5zdHlsZTtcbiAgICAgICAgICBjb25zdCBzdHlsZXMgPSBmbGF0dGVuQXJyYXk8U3R5bGVQcm9wcz4oc3R5bGVQcm9wID8/IFtdKTtcbiAgICAgICAgICBjb25zdCBwcm9jZXNzZWRTdHlsZTogU3R5bGVQcm9wcyA9IHN0eWxlcy5tYXAoKHN0eWxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3R5bGUgJiYgc3R5bGUudmlld0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgICAgICAgIC8vIHRoaXMgaXMgaG93IHdlIHJlY29nbml6ZSBzdHlsZXMgcmV0dXJuZWQgYnkgdXNlQW5pbWF0ZWRTdHlsZVxuICAgICAgICAgICAgICBzdHlsZS52aWV3c1JlZi5hZGQodGhpcyk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ZpcnN0UmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsU3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAuLi5zdHlsZS5pbml0aWFsLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgLi4uaW5pdGlhbFVwZGF0ZXJSdW48U3R5bGVQcm9wcz4oc3R5bGUuaW5pdGlhbC51cGRhdGVyKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRpYWxTdHlsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzSW5saW5lU3R5bGVzKHN0eWxlKSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5faXNGaXJzdFJlbmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRJbmxpbmVQcm9wc1VwZGF0ZShzdHlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgbmV3U3R5bGU6IFN0eWxlUHJvcHMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdHlsZVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAhaXNTaGFyZWRWYWx1ZShzdHlsZVZhbHVlKSAmJlxuICAgICAgICAgICAgICAgICAgIShrZXkgPT09ICd0cmFuc2Zvcm0nICYmIGlzSW5saW5lU3R5bGVUcmFuc2Zvcm0oc3R5bGVWYWx1ZSkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBuZXdTdHlsZVtrZXldID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHByb3BzW2tleV0gPSBTdHlsZVNoZWV0LmZsYXR0ZW4ocHJvY2Vzc2VkU3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2FuaW1hdGVkUHJvcHMnKSB7XG4gICAgICAgICAgY29uc3QgYW5pbWF0ZWRQcm9wID0gaW5wdXRQcm9wcy5hbmltYXRlZFByb3BzIGFzIFBhcnRpYWw8XG4gICAgICAgICAgICBBbmltYXRlZENvbXBvbmVudFByb3BzPEFuaW1hdGVkUHJvcHM+XG4gICAgICAgICAgPjtcbiAgICAgICAgICBpZiAoYW5pbWF0ZWRQcm9wLmluaXRpYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoYW5pbWF0ZWRQcm9wLmluaXRpYWwudmFsdWUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICBwcm9wc1trZXldID0gYW5pbWF0ZWRQcm9wLmluaXRpYWw/LnZhbHVlW2tleV07XG4gICAgICAgICAgICAgIGFuaW1hdGVkUHJvcC52aWV3c1JlZj8uYWRkKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGhhcygnY3VycmVudCcsIHZhbHVlKSAmJlxuICAgICAgICAgIHZhbHVlLmN1cnJlbnQgaW5zdGFuY2VvZiBXb3JrbGV0RXZlbnRIYW5kbGVyXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh2YWx1ZS5jdXJyZW50LmV2ZW50TmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFsdWUuY3VycmVudC5ldmVudE5hbWVzLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICAgICAgICBwcm9wc1tldmVudE5hbWVdID0gaGFzKCdsaXN0ZW5lcnMnLCB2YWx1ZS5jdXJyZW50KVxuICAgICAgICAgICAgICAgID8gKHZhbHVlLmN1cnJlbnQubGlzdGVuZXJzIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiBkdW1teUxpc3RlbmVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSBkdW1teUxpc3RlbmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc1NoYXJlZFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9pc0ZpcnN0UmVuZGVyKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0gKHZhbHVlIGFzIFNoYXJlZFZhbHVlPGFueT4pLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBrZXkgIT09ICdvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UnIHx8XG4gICAgICAgICAgIWlzQ2hyb21lRGVidWdnZXIoKVxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9wc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX2ZpbHRlck5vbkFuaW1hdGVkUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICBpZiAoaXNKZXN0KCkpIHtcbiAgICAgICAgcHJvcHMuYW5pbWF0ZWRTdHlsZSA9IHRoaXMuYW5pbWF0ZWRTdHlsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzRmlyc3RSZW5kZXIpIHtcbiAgICAgICAgdGhpcy5faXNGaXJzdFJlbmRlciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwbGF0Zm9ybVByb3BzID0gUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgd2ViOiB7fSxcbiAgICAgICAgZGVmYXVsdDogeyBjb2xsYXBzYWJsZTogZmFsc2UgfSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPENvbXBvbmVudCB7Li4ucHJvcHN9IHJlZj17dGhpcy5fc2V0Q29tcG9uZW50UmVmfSB7Li4ucGxhdGZvcm1Qcm9wc30gLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQW5pbWF0ZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgQW5pbWF0ZWRDb21wb25lbnQoJHtcbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCdcbiAgfSlgO1xuXG4gIHJldHVybiBSZWFjdC5mb3J3YXJkUmVmPENvbXBvbmVudD4oKHByb3BzLCByZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVkQ29tcG9uZW50XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgey4uLihyZWYgPT09IG51bGwgPyBudWxsIDogeyBmb3J3YXJkZWRSZWY6IHJlZiB9KX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxvQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsaUJBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sV0FB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