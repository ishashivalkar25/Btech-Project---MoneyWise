a95815af4346b1aa173ff642a457fa7f
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["onPress", "onLongPress", "onLayout", "navigationState", "route"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabBarItem = TabBarItem;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _PlatformPressable = require("./PlatformPressable");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';
var DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';
var getActiveOpacity = function getActiveOpacity(position, routesLength, tabIndex) {
  if (routesLength > 1) {
    var inputRange = Array.from({
      length: routesLength
    }, function (_, i) {
      return i;
    });
    return position.interpolate({
      inputRange: inputRange,
      outputRange: inputRange.map(function (i) {
        return i === tabIndex ? 1 : 0;
      })
    });
  } else {
    return 1;
  }
};
var getInactiveOpacity = function getInactiveOpacity(position, routesLength, tabIndex) {
  if (routesLength > 1) {
    var inputRange = Array.from({
      length: routesLength
    }, function (_, i) {
      return i;
    });
    return position.interpolate({
      inputRange: inputRange,
      outputRange: inputRange.map(function (i) {
        return i === tabIndex ? 0 : 1;
      })
    });
  } else {
    return 0;
  }
};
var TabBarItemInternal = function TabBarItemInternal(_ref) {
  var getAccessibilityLabel = _ref.getAccessibilityLabel,
    getAccessible = _ref.getAccessible,
    getLabelText = _ref.getLabelText,
    getTestID = _ref.getTestID,
    onLongPress = _ref.onLongPress,
    onPress = _ref.onPress,
    isFocused = _ref.isFocused,
    position = _ref.position,
    route = _ref.route,
    style = _ref.style,
    inactiveColorCustom = _ref.inactiveColor,
    activeColorCustom = _ref.activeColor,
    labelStyle = _ref.labelStyle,
    onLayout = _ref.onLayout,
    tabIndex = _ref.index,
    pressColor = _ref.pressColor,
    pressOpacity = _ref.pressOpacity,
    renderBadge = _ref.renderBadge,
    renderIcon = _ref.renderIcon,
    defaultTabWidth = _ref.defaultTabWidth,
    routesLength = _ref.routesLength,
    renderLabelCustom = _ref.renderLabel,
    _ref$android_ripple = _ref.android_ripple,
    android_ripple = _ref$android_ripple === void 0 ? {
      borderless: true
    } : _ref$android_ripple;
  var labelColorFromStyle = _reactNative.StyleSheet.flatten(labelStyle || {}).color;
  var activeColor = activeColorCustom !== undefined ? activeColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_ACTIVE_COLOR;
  var inactiveColor = inactiveColorCustom !== undefined ? inactiveColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_INACTIVE_COLOR;
  var activeOpacity = getActiveOpacity(position, routesLength, tabIndex);
  var inactiveOpacity = getInactiveOpacity(position, routesLength, tabIndex);
  var icon = null;
  var label = null;
  if (renderIcon) {
    var activeIcon = renderIcon({
      route: route,
      focused: true,
      color: activeColor
    });
    var inactiveIcon = renderIcon({
      route: route,
      focused: false,
      color: inactiveColor
    });
    if (inactiveIcon != null && activeIcon != null) {
      icon = React.createElement(_reactNative.View, {
        style: styles.icon
      }, React.createElement(_reactNative.Animated.View, {
        style: {
          opacity: inactiveOpacity
        }
      }, inactiveIcon), React.createElement(_reactNative.Animated.View, {
        style: [_reactNative.StyleSheet.absoluteFill, {
          opacity: activeOpacity
        }]
      }, activeIcon));
    }
  }
  var renderLabel = renderLabelCustom !== undefined ? renderLabelCustom : function (labelProps) {
    var labelText = getLabelText({
      route: labelProps.route
    });
    if (typeof labelText === 'string') {
      return React.createElement(_reactNative.Animated.Text, {
        style: [styles.label, icon ? {
          marginTop: 0
        } : null, labelStyle, {
          color: labelProps.color
        }]
      }, labelText);
    }
    return labelText;
  };
  if (renderLabel) {
    var activeLabel = renderLabel({
      route: route,
      focused: true,
      color: activeColor
    });
    var inactiveLabel = renderLabel({
      route: route,
      focused: false,
      color: inactiveColor
    });
    label = React.createElement(_reactNative.View, null, React.createElement(_reactNative.Animated.View, {
      style: {
        opacity: inactiveOpacity
      }
    }, inactiveLabel), React.createElement(_reactNative.Animated.View, {
      style: [_reactNative.StyleSheet.absoluteFill, {
        opacity: activeOpacity
      }]
    }, activeLabel));
  }
  var tabStyle = _reactNative.StyleSheet.flatten(style);
  var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;
  var tabContainerStyle = isWidthSet ? null : {
    width: defaultTabWidth
  };
  var scene = {
    route: route
  };
  var accessibilityLabel = getAccessibilityLabel(scene);
  accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);
  var badge = renderBadge ? renderBadge(scene) : null;
  return React.createElement(_PlatformPressable.PlatformPressable, {
    android_ripple: android_ripple,
    testID: getTestID(scene),
    accessible: getAccessible(scene),
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "tab",
    accessibilityState: {
      selected: isFocused
    },
    accessibilityStates: isFocused ? ['selected'] : [],
    pressColor: pressColor,
    pressOpacity: pressOpacity,
    delayPressIn: 0,
    onLayout: onLayout,
    onPress: onPress,
    onLongPress: onLongPress,
    style: [styles.pressable, tabContainerStyle]
  }, React.createElement(_reactNative.View, {
    pointerEvents: "none",
    style: [styles.item, tabStyle]
  }, icon, label, badge != null ? React.createElement(_reactNative.View, {
    style: styles.badge
  }, badge) : null));
};
var MemoizedTabBarItemInternal = React.memo(TabBarItemInternal);
function TabBarItem(props) {
  var onPress = props.onPress,
    onLongPress = props.onLongPress,
    onLayout = props.onLayout,
    navigationState = props.navigationState,
    route = props.route,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var onPressLatest = (0, _useLatestCallback.default)(onPress);
  var onLongPressLatest = (0, _useLatestCallback.default)(onLongPress);
  var onLayoutLatest = (0, _useLatestCallback.default)(onLayout ? onLayout : function () {});
  var tabIndex = navigationState.routes.indexOf(route);
  return React.createElement(MemoizedTabBarItemInternal, _extends({}, rest, {
    onPress: onPressLatest,
    onLayout: onLayoutLatest,
    onLongPress: onLongPressLatest,
    isFocused: navigationState.index === tabIndex,
    route: route,
    index: tabIndex,
    routesLength: navigationState.routes.length
  }));
}
var styles = _reactNative.StyleSheet.create({
  label: {
    margin: 4,
    backgroundColor: 'transparent',
    textTransform: 'uppercase'
  },
  icon: {
    margin: 2
  },
  item: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
    minHeight: 48
  },
  badge: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  pressable: {
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,