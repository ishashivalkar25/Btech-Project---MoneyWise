e929a64630c5c5cce5e5b01d8a265612
'use strict';

var ReactPropTypes = require('prop-types');
var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};
var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};
var DeprecatedTransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
function deprecatedPropType(propType, explanation) {
  return function validate(props, propName, componentName) {
    if (props[propName] !== undefined) {
      console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
    }
    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }
    return propType.apply(void 0, [props, propName, componentName].concat(rest));
  };
}
module.exports = DeprecatedTransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiLCJEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUiLCJEZXByZWNhdGVkVHJhbnNmb3JtUHJvcFR5cGVzIiwidHJhbnNmb3JtIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwicGVyc3BlY3RpdmUiLCJudW1iZXIiLCJyb3RhdGUiLCJzdHJpbmciLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwic2tld1giLCJza2V3WSIsInRyYW5zZm9ybU1hdHJpeCIsImRlY29tcG9zZWRNYXRyaXgiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJyb3RhdGlvbiIsInByb3BUeXBlIiwiZXhwbGFuYXRpb24iLCJ2YWxpZGF0ZSIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJ3YXJuIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlc3QiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImNvbmNhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJEZXByZWNhdGVkVHJhbnNmb3JtUHJvcFR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbmNvbnN0IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSB0cmFuc2Zvcm1NYXRyaXggc3R5bGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2UgYHRyYW5zZm9ybTogW3sgbWF0cml4OiAuLi4gfV1gIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUgPSBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAnVGhlIGRlY29tcG9zZWRNYXRyaXggc3R5bGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICdVc2UgYHRyYW5zZm9ybTogWy4uLl1gIGluc3RlYWQuJyxcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBEZXByZWNhdGVkVHJhbnNmb3JtUHJvcFR5cGVzID0ge1xuICB0cmFuc2Zvcm06IFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtwZXJzcGVjdGl2ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVZOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVaOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NrZXdYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgXSksXG4gICksXG4gIHRyYW5zZm9ybU1hdHJpeDogVHJhbnNmb3JtTWF0cml4UHJvcFR5cGUsXG4gIGRlY29tcG9zZWRNYXRyaXg6IERlY29tcG9zZWRNYXRyaXhQcm9wVHlwZSxcbiAgc2NhbGVYOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgc2NhbGVZOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgcm90YXRpb246IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxuICB0cmFuc2xhdGVYOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgdHJhbnNsYXRlWTogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG59O1xuXG4vKipcbiAqIEFkZHMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gdGhlIHByb3AgaXMgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHByb3BUeXBlLCBleHBsYW5hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBcXGAke3Byb3BOYW1lfVxcYCBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgIGhhcyBiZWVuIGRlcHJlY2F0ZWQuICR7ZXhwbGFuYXRpb259YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcztcbiJdLCJtYXBwaW5ncyI6IkFBU0EsWUFBWTs7QUFFWixJQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFFNUMsSUFBTUMsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUF1QkEsQ0FBWUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRTtFQUN2RSxJQUFJRixLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFO0lBQ25CLE9BQU8sSUFBSUUsS0FBSyxDQUNkLG9EQUFvRCxHQUNsRCw2Q0FDSixDQUFDO0VBQ0g7QUFDRixDQUFDO0FBRUQsSUFBTUMsd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUF3QkEsQ0FBWUosS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRTtFQUN4RSxJQUFJRixLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFO0lBQ25CLE9BQU8sSUFBSUUsS0FBSyxDQUNkLHFEQUFxRCxHQUNuRCxpQ0FDSixDQUFDO0VBQ0g7QUFDRixDQUFDO0FBRUQsSUFBTUUsNEJBQTRCLEdBQUc7RUFDbkNDLFNBQVMsRUFBRVQsY0FBYyxDQUFDVSxPQUFPLENBQy9CVixjQUFjLENBQUNXLFNBQVMsQ0FBQyxDQUN2QlgsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ0MsV0FBVyxFQUFFYixjQUFjLENBQUNjO0VBQU0sQ0FBQyxDQUFDLEVBQzFEZCxjQUFjLENBQUNZLEtBQUssQ0FBQztJQUFDRyxNQUFNLEVBQUVmLGNBQWMsQ0FBQ2dCO0VBQU0sQ0FBQyxDQUFDLEVBQ3JEaEIsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ0ssT0FBTyxFQUFFakIsY0FBYyxDQUFDZ0I7RUFBTSxDQUFDLENBQUMsRUFDdERoQixjQUFjLENBQUNZLEtBQUssQ0FBQztJQUFDTSxPQUFPLEVBQUVsQixjQUFjLENBQUNnQjtFQUFNLENBQUMsQ0FBQyxFQUN0RGhCLGNBQWMsQ0FBQ1ksS0FBSyxDQUFDO0lBQUNPLE9BQU8sRUFBRW5CLGNBQWMsQ0FBQ2dCO0VBQU0sQ0FBQyxDQUFDLEVBQ3REaEIsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ1EsS0FBSyxFQUFFcEIsY0FBYyxDQUFDYztFQUFNLENBQUMsQ0FBQyxFQUNwRGQsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ1MsTUFBTSxFQUFFckIsY0FBYyxDQUFDYztFQUFNLENBQUMsQ0FBQyxFQUNyRGQsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ1UsTUFBTSxFQUFFdEIsY0FBYyxDQUFDYztFQUFNLENBQUMsQ0FBQyxFQUNyRGQsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ1csVUFBVSxFQUFFdkIsY0FBYyxDQUFDYztFQUFNLENBQUMsQ0FBQyxFQUN6RGQsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ1ksVUFBVSxFQUFFeEIsY0FBYyxDQUFDYztFQUFNLENBQUMsQ0FBQyxFQUN6RGQsY0FBYyxDQUFDWSxLQUFLLENBQUM7SUFBQ2EsS0FBSyxFQUFFekIsY0FBYyxDQUFDZ0I7RUFBTSxDQUFDLENBQUMsRUFDcERoQixjQUFjLENBQUNZLEtBQUssQ0FBQztJQUFDYyxLQUFLLEVBQUUxQixjQUFjLENBQUNnQjtFQUFNLENBQUMsQ0FBQyxDQUNyRCxDQUNILENBQUM7RUFDRFcsZUFBZSxFQUFFekIsdUJBQXVCO0VBQ3hDMEIsZ0JBQWdCLEVBQUVyQix3QkFBd0I7RUFDMUNjLE1BQU0sRUFBRVEsa0JBQWtCLENBQ3hCN0IsY0FBYyxDQUFDYyxNQUFNLEVBQ3JCLGlDQUNGLENBQUM7RUFDRFEsTUFBTSxFQUFFTyxrQkFBa0IsQ0FDeEI3QixjQUFjLENBQUNjLE1BQU0sRUFDckIsaUNBQ0YsQ0FBQztFQUNEZ0IsUUFBUSxFQUFFRCxrQkFBa0IsQ0FDMUI3QixjQUFjLENBQUNjLE1BQU0sRUFDckIsaUNBQ0YsQ0FBQztFQUNEUyxVQUFVLEVBQUVNLGtCQUFrQixDQUM1QjdCLGNBQWMsQ0FBQ2MsTUFBTSxFQUNyQixpQ0FDRixDQUFDO0VBQ0RVLFVBQVUsRUFBRUssa0JBQWtCLENBQzVCN0IsY0FBYyxDQUFDYyxNQUFNLEVBQ3JCLGlDQUNGO0FBQ0YsQ0FBQztBQUtELFNBQVNlLGtCQUFrQkEsQ0FBQ0UsUUFBUSxFQUFFQyxXQUFXLEVBQUU7RUFDakQsT0FBTyxTQUFTQyxRQUFRQSxDQUFDOUIsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBVztJQUNoRSxJQUFJRixLQUFLLENBQUNDLFFBQVEsQ0FBQyxLQUFLOEIsU0FBUyxFQUFFO01BQ2pDQyxPQUFPLENBQUNDLElBQUksT0FDTGhDLFFBQVEsdUJBQW9CQyxhQUFhLCtCQUEyQjJCLFdBQzNFLENBQUM7SUFDSDtJQUFDLFNBQUFLLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBTHlEQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQUosSUFBQSxPQUFBQSxJQUFBLFdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7TUFBSkYsSUFBSSxDQUFBRSxJQUFBLFFBQUFKLFNBQUEsQ0FBQUksSUFBQTtJQUFBO0lBTzlELE9BQU9YLFFBQVEsQ0FBQVksS0FBQSxVQUFDeEMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBQXVDLE1BQUEsQ0FBS0osSUFBSSxFQUFDO0VBQzFELENBQUM7QUFDSDtBQUVBSyxNQUFNLENBQUNDLE9BQU8sR0FBR3RDLDRCQUE0QiJ9