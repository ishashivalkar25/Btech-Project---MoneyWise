{"version":3,"names":["_NativeReanimated","_interopRequireDefault","require","_PlatformChecker","_errors","_jsVersion","obj","__esModule","default","USE_STUB_IMPLEMENTATION","shouldBeUseWeb","_shareableCache","WeakMap","_shareableFlag","Symbol","MAGIC_KEY","isHostObject","value","registerShareableMapping","shareable","shareableRef","set","isPlainJSObject","object","Object","getPrototypeOf","prototype","_worklet_65486183985_init_data","code","location","sourceMap","INACCESSIBLE_OBJECT","__init","_e","global","Error","_f","Proxy","get","_","prop","_closure","__initData","__workletHash","__stackDetails","__version","DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD","processedObjectAtThresholdDepth","didShowPluginVersionMismatchError","makeShareableCloneRecursive","shouldPersistRemote","arguments","length","undefined","depth","type","isTypeObject","isTypeFunction","cached","toAdapt","Array","isArray","map","element","__DEV__","jsVersion","console","error","registerWorkletStackDetails","_ref","entries","_ref2","_slicedToArray2","key","inaccessibleObject","freeze","adopted","makeShareableClone","_worklet_7252926345403_init_data","makeShareableCloneOnUIRecursive","cloneRecursive","_ref3","_ref4","_makeShareableClone","_worklet_13878384066121_init_data","makeShareable","handle"],"sources":["shareables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { ShareableRef } from './commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { registerWorkletStackDetails } from './errors';\nimport { jsVersion } from './platform-specific/jsVersion';\n\n// for web/chrome debugger/jest environments this file provides a stub implementation\n// where no shareable references are used. Instead, the objects themselves are used\n// instead of shareable references, because of the fact that we don't have to deal with\n// runnning the code on separate VMs.\nconst USE_STUB_IMPLEMENTATION = shouldBeUseWeb();\n\nconst _shareableCache = new WeakMap<\n  Record<string, unknown>,\n  ShareableRef<any> | symbol\n>();\n// the below symbol is used to represent a mapping from the value to itself\n// this is used to allow for a converted shareable to be passed to makeShareableClone\nconst _shareableFlag = Symbol('shareable flag');\n\nconst MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\n\nfunction isHostObject(value: any): boolean {\n  // We could use JSI to determine whether an object is a host object, however\n  // the below workaround works well and is way faster than an additional JSI call.\n  // We use the fact that host objects have broken implementation of `hasOwnProperty`\n  // and hence return true for all `in` checks regardless of the key we ask for.\n  return MAGIC_KEY in value;\n}\n\nexport function registerShareableMapping(\n  shareable: any,\n  shareableRef?: ShareableRef<any>\n): void {\n  if (USE_STUB_IMPLEMENTATION) {\n    return;\n  }\n  _shareableCache.set(shareable, shareableRef || _shareableFlag);\n}\n\nfunction isPlainJSObject(object: object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\n\n// The below object is used as a replacement for objects that cannot be transferred\n// as shareable values. In makeShareableCloneRecursive we detect if an object is of\n// a plain Object.prototype and only allow such objects to be transferred. This lets\n// us avoid all sorts of react internals from leaking into the UI runtime. To make it\n// possible to catch errors when someone actually tries to access such object on the UI\n// runtime, we use the below Proxy object which is instantiated on the UI runtime and\n// throws whenever someone tries to access its fields.\nconst INACCESSIBLE_OBJECT = {\n  __init: () => {\n    'worklet';\n    return new Proxy(\n      {},\n      {\n        get: (_: any, prop: string) => {\n          if (prop === '_isReanimatedSharedValue') {\n            // not very happy about this check here, but we need to allow for\n            // \"inaccessible\" objects to be tested with isSharedValue check\n            // as it is being used in the mappers when extracing inputs recursively.\n            // Apparently we can't check if a key exists there as HostObjects always\n            // return true for such tests, so the only possibility for us is to\n            // actually access that key and see if it is set to true. We therefore\n            // need to allow for this key to be accessed here.\n            return false;\n          }\n          throw new Error(\n            `Trying to access property \\`${prop}\\` of an object which cannot be sent to the UI runtime.`\n          );\n        },\n        set: () => {\n          throw new Error(\n            'Trying to write to an object which cannot be sent to the UI runtime.'\n          );\n        },\n      }\n    );\n  },\n};\n\nconst DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\n// Below variable stores object that we process in makeShareableCloneRecursive at the specified depth.\n// We use it to check if later on the function reenters with the same object\nlet processedObjectAtThresholdDepth: any;\n\n// We only want to show mismatch error once so we use this flag to track it\nlet didShowPluginVersionMismatchError = false;\n\nexport function makeShareableCloneRecursive<T>(\n  value: any,\n  shouldPersistRemote = false,\n  depth = 0\n): ShareableRef<T> {\n  if (USE_STUB_IMPLEMENTATION) {\n    return value;\n  }\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    // if we reach certain recursion depth we suspect that we are dealing with a cyclic object.\n    // this type of objects are not supported and cannot be trasferred as shareable, so we\n    // implement a simple detection mechanism that remembers the value at a given depth and\n    // tests whether we try reenter this method later on with the same value. If that happens\n    // we throw an appropriate error.\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new Error(\n        'Trying to convert a cyclic object to a shareable. This is not supported.'\n      );\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n  // This one actually may be worth to be moved to c++, we also need similar logic to run on the UI thread\n  const type = typeof value;\n  const isTypeObject = type === 'object';\n  const isTypeFunction = type === 'function';\n  if ((isTypeObject || isTypeFunction) && value !== null) {\n    const cached = _shareableCache.get(value);\n    if (cached === _shareableFlag) {\n      return value;\n    } else if (cached !== undefined) {\n      return cached as ShareableRef<T>;\n    } else {\n      let toAdapt: any;\n      if (Array.isArray(value)) {\n        toAdapt = value.map((element) =>\n          makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1)\n        );\n      } else if (isTypeFunction && value.__workletHash === undefined) {\n        // this is a remote function\n        toAdapt = value;\n      } else if (isHostObject(value)) {\n        // for host objects we pass the reference to the object as shareable and\n        // then recreate new host object wrapping the same instance on the UI thread.\n        // there is no point of iterating over keys as we do for regular objects.\n        toAdapt = value;\n      } else if (isPlainJSObject(value) || isTypeFunction) {\n        toAdapt = {};\n        if (value.__workletHash !== undefined) {\n          // we are converting a worklet\n          if (__DEV__) {\n            if (\n              // We don't want this error to be logged more than once.\n              !didShowPluginVersionMismatchError &&\n              value.__version !== jsVersion\n            ) {\n              didShowPluginVersionMismatchError = true;\n              console.error(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${value.__version}). Please clear your Metro bundler cache with \\`yarn start --reset-cache\\`,\n              \\`npm start -- --reset-cache\\` or \\`expo start -c\\` and run the app again.`);\n            }\n            registerWorkletStackDetails(\n              value.__workletHash,\n              value.__stackDetails\n            );\n            delete value.__stackDetails;\n          }\n          // to save on transferring static __initData field of worklet structure\n          // we request shareable value to persist its UI counterpart. This means\n          // that the __initData field that contains long strings represeting the\n          // worklet code, source map, and location, will always be\n          // serialized/deserialized once. We don't increase depth when calling\n          // this method as these objects have one level anyways.\n          toAdapt.__initData = makeShareableCloneRecursive(\n            value.__initData,\n            true\n          );\n          delete value.__initData;\n        }\n\n        for (const [key, element] of Object.entries(value)) {\n          toAdapt[key] = makeShareableCloneRecursive(\n            element,\n            shouldPersistRemote,\n            depth + 1\n          );\n        }\n      } else {\n        // This is reached for object types that are not of plain Object.prototype.\n        // We don't support such objects from being transferred as shareables to\n        // the UI runtime and hence we replace them with \"inaccessible object\"\n        // which is implemented as a Proxy object that throws on any attempt\n        // of accessing its fields. We argue that such objects can sometimes leak\n        // as attributes of objects being captured by worklets but should never\n        // be used on the UI runtime regardless. If they are being accessed, the user\n        // will get an appropriate error message.\n        const inaccessibleObject =\n          makeShareableCloneRecursive<T>(INACCESSIBLE_OBJECT);\n        _shareableCache.set(value, inaccessibleObject);\n        return inaccessibleObject;\n      }\n      if (__DEV__) {\n        // we freeze objects that are transformed to shareable. This should help\n        // detect issues when someone modifies data after it's been converted to\n        // shareable. Meaning that they may be doing a faulty assumption in their\n        // code expecting that the updates are going to automatically populate to\n        // the object sent to the UI thread. If the user really wants some objects\n        // to be mutable they should use shared values instead.\n        Object.freeze(value);\n      }\n      const adopted = NativeReanimatedModule.makeShareableClone(\n        toAdapt,\n        shouldPersistRemote\n      );\n      _shareableCache.set(value, adopted);\n      _shareableCache.set(adopted, _shareableFlag);\n      return adopted;\n    }\n  }\n  return NativeReanimatedModule.makeShareableClone(value, shouldPersistRemote);\n}\n\nexport function makeShareableCloneOnUIRecursive<T>(value: T): ShareableRef<T> {\n  'worklet';\n  if (USE_STUB_IMPLEMENTATION) {\n    // @ts-ignore web is an interesting place where we don't run a secondary VM on the UI thread\n    // see more details in the comment where USE_STUB_IMPLEMENTATION is defined.\n    return value;\n  }\n  function cloneRecursive<T>(value: T): ShareableRef<T> {\n    const type = typeof value;\n    if ((type === 'object' || type === 'function') && value !== null) {\n      let toAdapt: any;\n      if (Array.isArray(value)) {\n        toAdapt = value.map((element) => cloneRecursive(element));\n      } else if (value !== undefined) {\n        toAdapt = {};\n        for (const [key, element] of Object.entries(value)) {\n          toAdapt[key] = cloneRecursive(element);\n        }\n      }\n      if (__DEV__) {\n        // See the reasoning behind freezing in the other comment above.\n        Object.freeze(value);\n      }\n      return _makeShareableClone(toAdapt);\n    }\n    return _makeShareableClone(value);\n  }\n  return cloneRecursive(value);\n}\n\nexport function makeShareable<T>(value: T): T {\n  if (USE_STUB_IMPLEMENTATION) {\n    return value;\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return value;\n    },\n  });\n  registerShareableMapping(value, handle);\n  return value;\n}\n"],"mappings":"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"}