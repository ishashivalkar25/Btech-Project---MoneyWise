0f3f075bc94cc28391c6933853cf74f6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByPlaceholderText = _render.getByPlaceholderText,
      getByText = _render.getByText;
    var emailInput = getByPlaceholderText('Email / Username');
    var passwordInput = getByPlaceholderText('Password');
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByText('Login');
    _reactNative.fireEvent.press(loginButton);
    expect(navigationMock.replace).toHaveBeenCalledWith('Root');
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText,
      queryByTestId = _render2.queryByTestId;
    var forgotPasswordButton = queryByTestId('Forgot Password');
    _reactNative.fireEvent.press(forgotPasswordButton);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJuYXZpZ2F0aW9uIiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRCeVRleHQiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsImZpcmVFdmVudCIsImNoYW5nZVRleHQiLCJsb2dpbkJ1dHRvbiIsInByZXNzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyMiIsInF1ZXJ5QnlUZXN0SWQiLCJmb3Jnb3RQYXNzd29yZEJ1dHRvbiJdLCJzb3VyY2VzIjpbIkxvZ2luLXRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBMb2dpbiBmcm9tICcuLi9Db21wb25lbnRzL0xvZ2luJztcclxuXHJcbmRlc2NyaWJlKCdMb2dpbicsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIGhhbmRsZSBsb2dpbiB3aXRoIHZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbmF2aWdhdGlvbk1vY2sgPSB7XHJcbiAgICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgeyBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz5cclxuICAgICk7XHJcblxyXG4gICAgLy8gRmlsbCBpbiB0aGUgbG9naW4gZm9ybSBmaWVsZHNcclxuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnRW1haWwgLyBVc2VybmFtZScpO1xyXG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdQYXNzd29yZCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgJ3Rlc3RAZXhhbXBsZS5jb20nKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsICdwYXNzd29yZCcpO1xyXG5cclxuICAgIC8vIFRyaWdnZXIgdGhlIGxvZ2luIGFjdGlvblxyXG4gICAgY29uc3QgbG9naW5CdXR0b24gPSBnZXRCeVRleHQoJ0xvZ2luJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MobG9naW5CdXR0b24pO1xyXG5cclxuICAgIC8vIEFzc2VydCB0aGF0IHRoZSBuYXZpZ2F0aW9uIG1ldGhvZCBpcyBjYWxsZWRcclxuICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUm9vdCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBmb3Jnb3QgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz4pO1xyXG5cclxuICAgIC8vIFRyaWdnZXIgdGhlIGZvcmdvdCBwYXNzd29yZCBhY3Rpb25cclxuICAgIGNvbnN0IGZvcmdvdFBhc3N3b3JkQnV0dG9uID0gcXVlcnlCeVRlc3RJZCgnRm9yZ290IFBhc3N3b3JkJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZm9yZ290UGFzc3dvcmRCdXR0b24pO1xyXG5cclxuICAgIC8vIEFzc2VydCB0aGF0IHRoZSBkaWFsb2cgYm94IHZpc2liaWxpdHkgc3RhdGUgaXMgdXBkYXRlZFxyXG4gICAgLy8gRm9yIGV4YW1wbGUsIHlvdSBjYW4gYXNzZXJ0IHRoYXQgdGhlIGRpYWxvZyBib3ggYmVjb21lcyB2aXNpYmxlXHJcbiAgICAvLyBieSBjaGVja2luZyBmb3IgaXRzIGV4aXN0ZW5jZSBvciBhIHNwZWNpZmljIFVJIGVsZW1lbnQgd2l0aGluIGl0XHJcbiAgICAvLyBleHBlY3QoLi4uKSBhc3NlcnRpb25zIGZvciBkaWFsb2cgYm94IHZpc2liaWxpdHlcclxuICB9KTtcclxuXHJcbiAgLy8gQWRkIG1vcmUgdGVzdCBjYXNlcyBmb3Igb3RoZXIgdXNlciBpbnRlcmFjdGlvbnMgYW5kIGVkZ2UgY2FzZXNcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBd0MsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRXhDSSxRQUFRLENBQUMsT0FBTyxFQUFFLFlBQU07RUFDdEJDLEVBQUUsQ0FBQyw0Q0FBNEMsTUFBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDM0QsSUFBTUMsY0FBYyxHQUFHO01BQ3JCQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbEJDLFFBQVEsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUFFLE9BQUEsR0FBNEMsSUFBQUMsbUJBQU0sRUFDaEQsSUFBQVgsV0FBQSxDQUFBWSxHQUFBLEVBQUNiLE1BQUEsQ0FBQUssT0FBSztRQUFDUyxVQUFVLEVBQUVSO01BQWUsQ0FBRSxDQUN0QyxDQUFDO01BRk9TLG9CQUFvQixHQUFBSixPQUFBLENBQXBCSSxvQkFBb0I7TUFBRUMsU0FBUyxHQUFBTCxPQUFBLENBQVRLLFNBQVM7SUFLdkMsSUFBTUMsVUFBVSxHQUFHRixvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRCxJQUFNRyxhQUFhLEdBQUdILG9CQUFvQixDQUFDLFVBQVUsQ0FBQztJQUN0REksc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDSCxVQUFVLEVBQUUsa0JBQWtCLENBQUM7SUFDcERFLHNCQUFTLENBQUNDLFVBQVUsQ0FBQ0YsYUFBYSxFQUFFLFVBQVUsQ0FBQztJQUcvQyxJQUFNRyxXQUFXLEdBQUdMLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdENHLHNCQUFTLENBQUNHLEtBQUssQ0FBQ0QsV0FBVyxDQUFDO0lBRzVCRSxNQUFNLENBQUNqQixjQUFjLENBQUNDLE9BQU8sQ0FBQyxDQUFDaUIsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0VBQzdELENBQUMsRUFBQztFQUVGckIsRUFBRSxDQUFDLCtCQUErQixNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUM5QyxJQUFNQyxjQUFjLEdBQUc7TUFDckJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBQWdCLFFBQUEsR0FBcUMsSUFBQWIsbUJBQU0sRUFBQyxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsTUFBQSxDQUFBSyxPQUFLO1FBQUNTLFVBQVUsRUFBRVI7TUFBZSxDQUFFLENBQUMsQ0FBQztNQUExRVUsU0FBUyxHQUFBUyxRQUFBLENBQVRULFNBQVM7TUFBRVUsYUFBYSxHQUFBRCxRQUFBLENBQWJDLGFBQWE7SUFHaEMsSUFBTUMsb0JBQW9CLEdBQUdELGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztJQUM3RFAsc0JBQVMsQ0FBQ0csS0FBSyxDQUFDSyxvQkFBb0IsQ0FBQztFQU12QyxDQUFDLEVBQUM7QUFHSixDQUFDLENBQUMifQ==