7bf6c5780bf773b2405be327c1801c4a
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _excluded = ["rippleColor"],
  _excluded2 = ["children", "style"],
  _excluded3 = ["children", "style"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PureNativeButton", {
  enumerable: true,
  get: function get() {
    return _GestureHandlerButton.default;
  }
});
exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createNativeWrapper = _interopRequireDefault(require("../handlers/createNativeWrapper"));
var _GestureHandlerButton = _interopRequireDefault(require("./GestureHandlerButton"));
var _State = require("../State");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var RawButton = (0, _createNativeWrapper.default)(_GestureHandlerButton.default, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: false
});
exports.RawButton = RawButton;
var BaseButton = function (_React$Component) {
  (0, _inherits2.default)(BaseButton, _React$Component);
  var _super = _createSuper(BaseButton);
  function BaseButton(props) {
    var _this;
    (0, _classCallCheck2.default)(this, BaseButton);
    _this = _super.call(this, props);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "lastActive", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "longPressTimeout", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "longPressDetected", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleEvent", function (_ref) {
      var nativeEvent = _ref.nativeEvent;
      var state = nativeEvent.state,
        oldState = nativeEvent.oldState,
        pointerInside = nativeEvent.pointerInside;
      var active = pointerInside && state === _State.State.ACTIVE;
      if (active !== _this.lastActive && _this.props.onActiveStateChange) {
        _this.props.onActiveStateChange(active);
      }
      if (!_this.longPressDetected && oldState === _State.State.ACTIVE && state !== _State.State.CANCELLED && _this.lastActive && _this.props.onPress) {
        _this.props.onPress(active);
      }
      if (!_this.lastActive && state === (_reactNative.Platform.OS !== 'android' ? _State.State.ACTIVE : _State.State.BEGAN) && pointerInside) {
        _this.longPressDetected = false;
        if (_this.props.onLongPress) {
          _this.longPressTimeout = setTimeout(_this.onLongPress, _this.props.delayLongPress);
        }
      } else if (state === _State.State.ACTIVE && !pointerInside && _this.longPressTimeout !== undefined) {
        clearTimeout(_this.longPressTimeout);
        _this.longPressTimeout = undefined;
      } else if (_this.longPressTimeout !== undefined && (state === _State.State.END || state === _State.State.CANCELLED || state === _State.State.FAILED)) {
        clearTimeout(_this.longPressTimeout);
        _this.longPressTimeout = undefined;
      }
      _this.lastActive = active;
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onLongPress", function () {
      var _this$props$onLongPre, _this$props;
      _this.longPressDetected = true;
      (_this$props$onLongPre = (_this$props = _this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props);
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onHandlerStateChange", function (e) {
      var _this$props$onHandler, _this$props2;
      (_this$props$onHandler = (_this$props2 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props2, e);
      _this.handleEvent(e);
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureEvent", function (e) {
      var _this$props$onGesture, _this$props3;
      (_this$props$onGesture = (_this$props3 = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3, e);
      _this.handleEvent(e);
    });
    _this.lastActive = false;
    _this.longPressDetected = false;
    return _this;
  }
  (0, _createClass2.default)(BaseButton, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
        rippleColor = _this$props6.rippleColor,
        rest = (0, _objectWithoutProperties2.default)(_this$props6, _excluded);
      return React.createElement(RawButton, _extends({
        rippleColor: (0, _reactNative.processColor)(rippleColor)
      }, rest, {
        onGestureEvent: this.onGestureEvent,
        onHandlerStateChange: this.onHandlerStateChange
      }));
    }
  }]);
  return BaseButton;
}(React.Component);
exports.BaseButton = BaseButton;
_defineProperty(BaseButton, "defaultProps", {
  delayLongPress: 600
});
var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);
var btnStyles = _reactNative.StyleSheet.create({
  underlay: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0
  }
});
var RectButton = function (_React$Component2) {
  (0, _inherits2.default)(RectButton, _React$Component2);
  var _super2 = _createSuper(RectButton);
  function RectButton(props) {
    var _this2;
    (0, _classCallCheck2.default)(this, RectButton);
    _this2 = _super2.call(this, props);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "opacity", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "onActiveStateChange", function (active) {
      var _this$props$onActiveS, _this$props4;
      if (_reactNative.Platform.OS !== 'android') {
        _this2.opacity.setValue(active ? _this2.props.activeOpacity : 0);
      }
      (_this$props$onActiveS = (_this$props4 = _this2.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props4, active);
    });
    _this2.opacity = new _reactNative.Animated.Value(0);
    return _this2;
  }
  (0, _createClass2.default)(RectButton, [{
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
        children = _this$props7.children,
        style = _this$props7.style,
        rest = (0, _objectWithoutProperties2.default)(_this$props7, _excluded2);
      var resolvedStyle = _reactNative.StyleSheet.flatten(style !== null && style !== void 0 ? style : {});
      return React.createElement(BaseButton, _extends({}, rest, {
        style: resolvedStyle,
        onActiveStateChange: this.onActiveStateChange
      }), React.createElement(_reactNative.Animated.View, {
        style: [btnStyles.underlay, {
          opacity: this.opacity,
          backgroundColor: this.props.underlayColor,
          borderRadius: resolvedStyle.borderRadius,
          borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,
          borderTopRightRadius: resolvedStyle.borderTopRightRadius,
          borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,
          borderBottomRightRadius: resolvedStyle.borderBottomRightRadius
        }]
      }), children);
    }
  }]);
  return RectButton;
}(React.Component);
exports.RectButton = RectButton;
_defineProperty(RectButton, "defaultProps", {
  activeOpacity: 0.105,
  underlayColor: 'black'
});
var BorderlessButton = function (_React$Component3) {
  (0, _inherits2.default)(BorderlessButton, _React$Component3);
  var _super3 = _createSuper(BorderlessButton);
  function BorderlessButton(props) {
    var _this3;
    (0, _classCallCheck2.default)(this, BorderlessButton);
    _this3 = _super3.call(this, props);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "opacity", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "onActiveStateChange", function (active) {
      var _this$props$onActiveS2, _this$props5;
      if (_reactNative.Platform.OS !== 'android') {
        _this3.opacity.setValue(active ? _this3.props.activeOpacity : 1);
      }
      (_this$props$onActiveS2 = (_this$props5 = _this3.props).onActiveStateChange) === null || _this$props$onActiveS2 === void 0 ? void 0 : _this$props$onActiveS2.call(_this$props5, active);
    });
    _this3.opacity = new _reactNative.Animated.Value(1);
    return _this3;
  }
  (0, _createClass2.default)(BorderlessButton, [{
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
        children = _this$props8.children,
        style = _this$props8.style,
        rest = (0, _objectWithoutProperties2.default)(_this$props8, _excluded3);
      return React.createElement(AnimatedBaseButton, _extends({}, rest, {
        onActiveStateChange: this.onActiveStateChange,
        style: [style, _reactNative.Platform.OS === 'ios' && {
          opacity: this.opacity
        }]
      }), children);
    }
  }]);
  return BorderlessButton;
}(React.Component);
exports.BorderlessButton = BorderlessButton;
_defineProperty(BorderlessButton, "defaultProps", {
  activeOpacity: 0.3,
  borderless: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,