b827d0ba0f721c8bc2c1855cf7cfd4d1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Constants = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var faceDetectionDisabledMessage = 'Face detection has not been included in this build.';
var FaceDetectorModule = _reactNative.NativeModules.RNFaceDetector || {
  stubbed: true,
  Mode: {},
  Landmarks: {},
  Classifications: {},
  detectFaces: function detectFaces() {
    return new Promise(function (_, reject) {
      return reject(faceDetectionDisabledMessage);
    });
  }
};
var FaceDetector = function () {
  function FaceDetector() {
    (0, _classCallCheck2.default)(this, FaceDetector);
  }
  (0, _createClass2.default)(FaceDetector, null, [{
    key: "detectFacesAsync",
    value: function detectFacesAsync(uri, options) {
      return FaceDetectorModule.detectFaces(Object.assign({}, options, {
        uri: uri
      }));
    }
  }]);
  return FaceDetector;
}();
exports.default = FaceDetector;
FaceDetector.Constants = {
  Mode: FaceDetectorModule.Mode,
  Landmarks: FaceDetectorModule.Landmarks,
  Classifications: FaceDetectorModule.Classifications
};
var Constants = FaceDetector.Constants;
exports.Constants = Constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiZmFjZURldGVjdGlvbkRpc2FibGVkTWVzc2FnZSIsIkZhY2VEZXRlY3Rvck1vZHVsZSIsIk5hdGl2ZU1vZHVsZXMiLCJSTkZhY2VEZXRlY3RvciIsInN0dWJiZWQiLCJNb2RlIiwiTGFuZG1hcmtzIiwiQ2xhc3NpZmljYXRpb25zIiwiZGV0ZWN0RmFjZXMiLCJQcm9taXNlIiwiXyIsInJlamVjdCIsIkZhY2VEZXRlY3RvciIsIl9jbGFzc0NhbGxDaGVjazIiLCJkZWZhdWx0IiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiZGV0ZWN0RmFjZXNBc3luYyIsInVyaSIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJleHBvcnRzIiwiQ29uc3RhbnRzIl0sInNvdXJjZXMiOlsiRmFjZURldGVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuY29uc3QgZmFjZURldGVjdGlvbkRpc2FibGVkTWVzc2FnZSA9ICdGYWNlIGRldGVjdGlvbiBoYXMgbm90IGJlZW4gaW5jbHVkZWQgaW4gdGhpcyBidWlsZC4nO1xuXG5jb25zdCBGYWNlRGV0ZWN0b3JNb2R1bGU6IE9iamVjdCA9IE5hdGl2ZU1vZHVsZXMuUk5GYWNlRGV0ZWN0b3IgfHwge1xuICBzdHViYmVkOiB0cnVlLFxuICBNb2RlOiB7fSxcbiAgTGFuZG1hcmtzOiB7fSxcbiAgQ2xhc3NpZmljYXRpb25zOiB7fSxcbiAgZGV0ZWN0RmFjZXM6ICgpID0+IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHJlamVjdChmYWNlRGV0ZWN0aW9uRGlzYWJsZWRNZXNzYWdlKSksXG59O1xuXG50eXBlIFBvaW50ID0geyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuXG5leHBvcnQgdHlwZSBGYWNlRmVhdHVyZSA9IHtcbiAgYm91bmRzOiB7XG4gICAgc2l6ZToge1xuICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgIGhlaWdodDogbnVtYmVyLFxuICAgIH0sXG4gICAgb3JpZ2luOiBQb2ludCxcbiAgfSxcbiAgc21pbGluZ1Byb2JhYmlsaXR5PzogbnVtYmVyLFxuICBsZWZ0RWFyUG9zaXRpb24/OiBQb2ludCxcbiAgcmlnaHRFYXJQb3NpdGlvbj86IFBvaW50LFxuICBsZWZ0RXllUG9zaXRpb24/OiBQb2ludCxcbiAgbGVmdEV5ZU9wZW5Qcm9iYWJpbGl0eT86IG51bWJlcixcbiAgcmlnaHRFeWVQb3NpdGlvbj86IFBvaW50LFxuICByaWdodEV5ZU9wZW5Qcm9iYWJpbGl0eT86IG51bWJlcixcbiAgbGVmdENoZWVrUG9zaXRpb24/OiBQb2ludCxcbiAgcmlnaHRDaGVla1Bvc2l0aW9uPzogUG9pbnQsXG4gIGxlZnRNb3V0aFBvc2l0aW9uPzogUG9pbnQsXG4gIG1vdXRoUG9zaXRpb24/OiBQb2ludCxcbiAgcmlnaHRNb3V0aFBvc2l0aW9uPzogUG9pbnQsXG4gIGJvdHRvbU1vdXRoUG9zaXRpb24/OiBQb2ludCxcbiAgbm9zZUJhc2VQb3NpdGlvbj86IFBvaW50LFxuICB5YXdBbmdsZT86IG51bWJlcixcbiAgcm9sbEFuZ2xlPzogbnVtYmVyLFxufTtcblxudHlwZSBEZXRlY3Rpb25PcHRpb25zID0ge1xuICBtb2RlPzogJEtleXM8dHlwZW9mIEZhY2VEZXRlY3Rvck1vZHVsZS5Nb2RlPixcbiAgZGV0ZWN0TGFuZG1hcmtzPzogJEtleXM8dHlwZW9mIEZhY2VEZXRlY3Rvck1vZHVsZS5MYW5kbWFya3M+LFxuICBydW5DbGFzc2lmaWNhdGlvbnM/OiAkS2V5czx0eXBlb2YgRmFjZURldGVjdG9yTW9kdWxlLkNsYXNzaWZpY2F0aW9ucz4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGYWNlRGV0ZWN0b3Ige1xuICBzdGF0aWMgQ29uc3RhbnRzID0ge1xuICAgIE1vZGU6IEZhY2VEZXRlY3Rvck1vZHVsZS5Nb2RlLFxuICAgIExhbmRtYXJrczogRmFjZURldGVjdG9yTW9kdWxlLkxhbmRtYXJrcyxcbiAgICBDbGFzc2lmaWNhdGlvbnM6IEZhY2VEZXRlY3Rvck1vZHVsZS5DbGFzc2lmaWNhdGlvbnMsXG4gIH07XG5cbiAgc3RhdGljIGRldGVjdEZhY2VzQXN5bmModXJpOiBzdHJpbmcsIG9wdGlvbnM6ID9EZXRlY3Rpb25PcHRpb25zKTogUHJvbWlzZTxBcnJheTxGYWNlRmVhdHVyZT4+IHtcbiAgICByZXR1cm4gRmFjZURldGVjdG9yTW9kdWxlLmRldGVjdEZhY2VzKHsgLi4ub3B0aW9ucywgdXJpIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb25zdGFudHMgPSBGYWNlRGV0ZWN0b3IuQ29uc3RhbnRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBTUMsNEJBQTRCLEdBQUcscURBQXFEO0FBRTFGLElBQU1DLGtCQUEwQixHQUFHQywwQkFBYSxDQUFDQyxjQUFjLElBQUk7RUFDakVDLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLElBQUksRUFBRSxDQUFDLENBQUM7RUFDUkMsU0FBUyxFQUFFLENBQUMsQ0FBQztFQUNiQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0VBQ25CQyxXQUFXLEVBQUUsU0FBQUEsWUFBQTtJQUFBLE9BQU0sSUFBSUMsT0FBTyxDQUFDLFVBQUNDLENBQUMsRUFBRUMsTUFBTTtNQUFBLE9BQUtBLE1BQU0sQ0FBQ1gsNEJBQTRCLENBQUM7SUFBQSxFQUFDO0VBQUE7QUFDckYsQ0FBQztBQUFDLElBb0NtQlksWUFBWTtFQUFBLFNBQUFBLGFBQUE7SUFBQSxJQUFBQyxnQkFBQSxDQUFBQyxPQUFBLFFBQUFGLFlBQUE7RUFBQTtFQUFBLElBQUFHLGFBQUEsQ0FBQUQsT0FBQSxFQUFBRixZQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQU8vQixTQUFBQyxpQkFBd0JDLEdBQVcsRUFBRUMsT0FBMEIsRUFBK0I7TUFDNUYsT0FBT25CLGtCQUFrQixDQUFDTyxXQUFXLENBQUFhLE1BQUEsQ0FBQUMsTUFBQSxLQUFNRixPQUFPO1FBQUVELEdBQUcsRUFBSEE7TUFBRyxFQUFFLENBQUM7SUFDNUQ7RUFBQztFQUFBLE9BQUFQLFlBQUE7QUFBQTtBQUFBVyxPQUFBLENBQUFULE9BQUEsR0FBQUYsWUFBQTtBQVRrQkEsWUFBWSxDQUN4QlksU0FBUyxHQUFHO0VBQ2pCbkIsSUFBSSxFQUFFSixrQkFBa0IsQ0FBQ0ksSUFBSTtFQUM3QkMsU0FBUyxFQUFFTCxrQkFBa0IsQ0FBQ0ssU0FBUztFQUN2Q0MsZUFBZSxFQUFFTixrQkFBa0IsQ0FBQ007QUFDdEMsQ0FBQztBQU9JLElBQU1pQixTQUFTLEdBQUdaLFlBQVksQ0FBQ1ksU0FBUztBQUFDRCxPQUFBLENBQUFDLFNBQUEsR0FBQUEsU0FBQSJ9