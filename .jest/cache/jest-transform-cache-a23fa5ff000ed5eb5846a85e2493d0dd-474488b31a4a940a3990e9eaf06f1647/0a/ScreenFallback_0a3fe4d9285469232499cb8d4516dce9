f8a78565645887eb1084e9b3df23b194
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["enabled"],
  _excluded2 = ["visible", "children"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaybeScreen = MaybeScreen;
exports.MaybeScreenContainer = void 0;
var _elements = require("@react-navigation/elements");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Screens;
try {
  Screens = require('react-native-screens');
} catch (e) {}
var MaybeScreenContainer = function MaybeScreenContainer(_ref) {
  var _Screens, _Screens$screensEnabl;
  var enabled = _ref.enabled,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {
    return React.createElement(Screens.ScreenContainer, _extends({
      enabled: enabled
    }, rest));
  }
  return React.createElement(_reactNative.View, rest);
};
exports.MaybeScreenContainer = MaybeScreenContainer;
function MaybeScreen(_ref2) {
  var _Screens2, _Screens2$screensEnab;
  var visible = _ref2.visible,
    children = _ref2.children,
    rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {
    return React.createElement(Screens.Screen, _extends({
      activityState: visible ? 2 : 0
    }, rest), children);
  }
  return React.createElement(_elements.ResourceSavingView, _extends({
    visible: visible
  }, rest), children);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWxlbWVudHMiLCJyZXF1aXJlIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdE5hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJTY3JlZW5zIiwiZSIsIk1heWJlU2NyZWVuQ29udGFpbmVyIiwiX3JlZiIsIl9TY3JlZW5zIiwiX1NjcmVlbnMkc2NyZWVuc0VuYWJsIiwiZW5hYmxlZCIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwic2NyZWVuc0VuYWJsZWQiLCJjcmVhdGVFbGVtZW50IiwiU2NyZWVuQ29udGFpbmVyIiwiVmlldyIsImV4cG9ydHMiLCJNYXliZVNjcmVlbiIsIl9yZWYyIiwiX1NjcmVlbnMyIiwiX1NjcmVlbnMyJHNjcmVlbnNFbmFiIiwidmlzaWJsZSIsImNoaWxkcmVuIiwiX2V4Y2x1ZGVkMiIsIlNjcmVlbiIsImFjdGl2aXR5U3RhdGUiLCJSZXNvdXJjZVNhdmluZ1ZpZXciXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmlld3MvU2NyZWVuRmFsbGJhY2sudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElB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