b069b90ff7f639f19dc4610255bf7380
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagerView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _PagerViewNativeComponent = _interopRequireWildcard(require("./PagerViewNativeComponent"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var PagerView = function (_react$default$Compon) {
  (0, _inherits2.default)(PagerView, _react$default$Compon);
  var _super = _createSuper(PagerView);
  function PagerView() {
    var _this;
    (0, _classCallCheck2.default)(this, PagerView);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "isScrolling", false);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "pagerView", null);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "_onPageScroll", function (e) {
      if (_this.props.onPageScroll) {
        _this.props.onPageScroll(e);
      }
      if (_reactNative.Platform.OS === 'android') {
        if (_this.props.keyboardDismissMode === 'on-drag') {
          _reactNative.Keyboard.dismiss();
        }
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "_onPageScrollStateChanged", function (e) {
      if (_this.props.onPageScrollStateChanged) {
        _this.props.onPageScrollStateChanged(e);
      }
      _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "_onPageSelected", function (e) {
      if (_this.props.onPageSelected) {
        _this.props.onPageSelected(e);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "setPage", function (selectedPage) {
      if (_this.pagerView) {
        _PagerViewNativeComponent.Commands.setPage(_this.pagerView, selectedPage);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "setPageWithoutAnimation", function (selectedPage) {
      if (_this.pagerView) {
        _PagerViewNativeComponent.Commands.setPageWithoutAnimation(_this.pagerView, selectedPage);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "setScrollEnabled", function (scrollEnabled) {
      if (_this.pagerView) {
        _PagerViewNativeComponent.Commands.setScrollEnabledImperatively(_this.pagerView, scrollEnabled);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "_onMoveShouldSetResponderCapture", function () {
      return _this.isScrolling;
    });
    return _this;
  }
  (0, _createClass2.default)(PagerView, [{
    key: "deducedLayoutDirection",
    get: function get() {
      if (!this.props.layoutDirection || this.props.layoutDirection === 'locale') {
        return _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';
      } else {
        return this.props.layoutDirection;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      return _react.default.createElement(_PagerViewNativeComponent.default, _extends({}, this.props, {
        ref: function ref(_ref) {
          _this2.pagerView = _ref;
        },
        style: this.props.style,
        layoutDirection: this.deducedLayoutDirection,
        onPageScroll: this._onPageScroll,
        onPageScrollStateChanged: this._onPageScrollStateChanged,
        onPageSelected: this._onPageSelected,
        onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,
        children: (0, _utils.childrenWithOverriddenStyle)(this.props.children)
      }));
    }
  }]);
  return PagerView;
}(_react.default.Component);
exports.PagerView = PagerView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dGlscyIsIl9QYWdlclZpZXdOYXRpdmVDb21wb25lbnQiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlBhZ2VyVmlldyIsIl9yZWFjdCRkZWZhdWx0JENvbXBvbiIsIl9pbmhlcml0czIiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsImUiLCJwcm9wcyIsIm9uUGFnZVNjcm9sbCIsIlBsYXRmb3JtIiwiT1MiLCJrZXlib2FyZERpc21pc3NNb2RlIiwiS2V5Ym9hcmQiLCJkaXNtaXNzIiwib25QYWdlU2Nyb2xsU3RhdGVDaGFuZ2VkIiwiaXNTY3JvbGxpbmciLCJuYXRpdmVFdmVudCIsInBhZ2VTY3JvbGxTdGF0ZSIsIm9uUGFnZVNlbGVjdGVkIiwic2VsZWN0ZWRQYWdlIiwicGFnZXJWaWV3IiwiQ29tbWFuZHMiLCJzZXRQYWdlIiwic2V0UGFnZVdpdGhvdXRBbmltYXRpb24iLCJzY3JvbGxFbmFibGVkIiwic2V0U2Nyb2xsRW5hYmxlZEltcGVyYXRpdmVseSIsIl9jcmVhdGVDbGFzczIiLCJsYXlvdXREaXJlY3Rpb24iLCJJMThuTWFuYWdlciIsImlzUlRMIiwicmVuZGVyIiwiX3RoaXMyIiwiY3JlYXRlRWxlbWVudCIsInJlZiIsInN0eWxlIiwiZGVkdWNlZExheW91dERpcmVjdGlvbiIsIl9vblBhZ2VTY3JvbGwiLCJfb25QYWdlU2Nyb2xsU3RhdGVDaGFuZ2VkIiwiX29uUGFnZVNlbGVjdGVkIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsIl9vbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwiY2hpbGRyZW4iLCJjaGlsZHJlbldpdGhPdmVycmlkZGVuU3R5bGUiLCJDb21wb25lbnQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUGFnZXJWaWV3LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhdGZvcm0sIEtleWJvYXJkIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEkxOG5NYW5hZ2VyIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB0eXBlIHtcbiAgT25QYWdlU2Nyb2xsRXZlbnREYXRhLFxuICBPblBhZ2VTY3JvbGxTdGF0ZUNoYW5nZWRFdmVudERhdGEsXG4gIE9uUGFnZVNlbGVjdGVkRXZlbnREYXRhLFxufSBmcm9tICcuL1BhZ2VyVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSAqIGFzIFJlYWN0TmF0aXZlIGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB0eXBlIHsgTmF0aXZlUHJvcHMgYXMgUGFnZXJWaWV3UHJvcHMgfSBmcm9tICcuL1BhZ2VyVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBjaGlsZHJlbldpdGhPdmVycmlkZGVuU3R5bGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBQYWdlclZpZXdWaWV3LCB7XG4gIENvbW1hbmRzIGFzIFBhZ2VyVmlld0NvbW1hbmRzLFxufSBmcm9tICcuL1BhZ2VyVmlld05hdGl2ZUNvbXBvbmVudCc7XG5cbi8qKlxuICogQ29udGFpbmVyIHRoYXQgYWxsb3dzIHRvIGZsaXAgbGVmdCBhbmQgcmlnaHQgYmV0d2VlbiBjaGlsZCB2aWV3cy4gRWFjaFxuICogY2hpbGQgdmlldyBvZiB0aGUgYFBhZ2VyVmlld2Agd2lsbCBiZSB0cmVhdGVkIGFzIGEgc2VwYXJhdGUgcGFnZVxuICogYW5kIHdpbGwgYmUgc3RyZXRjaGVkIHRvIGZpbGwgdGhlIGBQYWdlclZpZXdgLlxuICpcbiAqIEl0IGlzIGltcG9ydGFudCBhbGwgY2hpbGRyZW4gYXJlIGA8Vmlldz5gcyBhbmQgbm90IGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICogWW91IGNhbiBzZXQgc3R5bGUgcHJvcGVydGllcyBsaWtlIGBwYWRkaW5nYCBvciBgYmFja2dyb3VuZENvbG9yYCBmb3IgZWFjaFxuICogY2hpbGQuIEl0IGlzIGFsc28gaW1wb3J0YW50IHRoYXQgZWFjaCBjaGlsZCBoYXZlIGEgYGtleWAgcHJvcC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8UGFnZXJWaWV3XG4gKiAgICAgICBzdHlsZT17c3R5bGVzLlBhZ2VyVmlld31cbiAqICAgICAgIGluaXRpYWxQYWdlPXswfT5cbiAqICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMucGFnZVN0eWxlfSBrZXk9XCIxXCI+XG4gKiAgICAgICAgIDxUZXh0PkZpcnN0IHBhZ2U8L1RleHQ+XG4gKiAgICAgICA8L1ZpZXc+XG4gKiAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnBhZ2VTdHlsZX0ga2V5PVwiMlwiPlxuICogICAgICAgICA8VGV4dD5TZWNvbmQgcGFnZTwvVGV4dD5cbiAqICAgICAgIDwvVmlldz5cbiAqICAgICA8L1BhZ2VyVmlldz5cbiAqICAgKTtcbiAqIH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB2YXIgc3R5bGVzID0ge1xuICogICAuLi5cbiAqICAgUGFnZXJWaWV3OiB7XG4gKiAgICAgZmxleDogMVxuICogICB9LFxuICogICBwYWdlU3R5bGU6IHtcbiAqICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAqICAgICBwYWRkaW5nOiAyMCxcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cblxuZXhwb3J0IGNsYXNzIFBhZ2VyVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYWdlclZpZXdQcm9wcz4ge1xuICBwcml2YXRlIGlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gIHBhZ2VyVmlldzogUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgUGFnZXJWaWV3Vmlldz4gfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIF9vblBhZ2VTY3JvbGwgPSAoXG4gICAgZTogUmVhY3ROYXRpdmUuTmF0aXZlU3ludGhldGljRXZlbnQ8T25QYWdlU2Nyb2xsRXZlbnREYXRhPlxuICApID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblBhZ2VTY3JvbGwpIHtcbiAgICAgIHRoaXMucHJvcHMub25QYWdlU2Nyb2xsKGUpO1xuICAgIH1cblxuICAgIC8vIE5vdCBpbXBsZW1lbnRlZCBvbiBpT1MgeWV0XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmtleWJvYXJkRGlzbWlzc01vZGUgPT09ICdvbi1kcmFnJykge1xuICAgICAgICBLZXlib2FyZC5kaXNtaXNzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgX29uUGFnZVNjcm9sbFN0YXRlQ2hhbmdlZCA9IChcbiAgICBlOiBSZWFjdE5hdGl2ZS5OYXRpdmVTeW50aGV0aWNFdmVudDxPblBhZ2VTY3JvbGxTdGF0ZUNoYW5nZWRFdmVudERhdGE+XG4gICkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLm9uUGFnZVNjcm9sbFN0YXRlQ2hhbmdlZCkge1xuICAgICAgdGhpcy5wcm9wcy5vblBhZ2VTY3JvbGxTdGF0ZUNoYW5nZWQoZSk7XG4gICAgfVxuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBlLm5hdGl2ZUV2ZW50LnBhZ2VTY3JvbGxTdGF0ZSA9PT0gJ2RyYWdnaW5nJztcbiAgfTtcblxuICBwcml2YXRlIF9vblBhZ2VTZWxlY3RlZCA9IChcbiAgICBlOiBSZWFjdE5hdGl2ZS5OYXRpdmVTeW50aGV0aWNFdmVudDxPblBhZ2VTZWxlY3RlZEV2ZW50RGF0YT5cbiAgKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25QYWdlU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMucHJvcHMub25QYWdlU2VsZWN0ZWQoZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBmdW5jdGlvbiB0byBzY3JvbGwgdG8gYSBzcGVjaWZpYyBwYWdlIGluIHRoZSBQYWdlclZpZXcuXG4gICAqIFRoZSB0cmFuc2l0aW9uIGJldHdlZW4gcGFnZXMgd2lsbCBiZSBhbmltYXRlZC5cbiAgICovXG4gIHB1YmxpYyBzZXRQYWdlID0gKHNlbGVjdGVkUGFnZTogbnVtYmVyKSA9PiB7XG4gICAgaWYgKHRoaXMucGFnZXJWaWV3KSB7XG4gICAgICBQYWdlclZpZXdDb21tYW5kcy5zZXRQYWdlKHRoaXMucGFnZXJWaWV3LCBzZWxlY3RlZFBhZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgc3BlY2lmaWMgcGFnZSBpbiB0aGUgUGFnZXJWaWV3LlxuICAgKiBUaGUgdHJhbnNpdGlvbiBiZXR3ZWVuIHBhZ2VzIHdpbGwgKm5vdCogYmUgYW5pbWF0ZWQuXG4gICAqL1xuICBwdWJsaWMgc2V0UGFnZVdpdGhvdXRBbmltYXRpb24gPSAoc2VsZWN0ZWRQYWdlOiBudW1iZXIpID0+IHtcbiAgICBpZiAodGhpcy5wYWdlclZpZXcpIHtcbiAgICAgIFBhZ2VyVmlld0NvbW1hbmRzLnNldFBhZ2VXaXRob3V0QW5pbWF0aW9uKHRoaXMucGFnZXJWaWV3LCBzZWxlY3RlZFBhZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZW5hYmxlL2Rpc2FibGUgc2Nyb2xsIGltcGVyYXRpdmVseVxuICAgKiBUaGUgcmVjb21tZW5kZWQgd2F5IGlzIHVzaW5nIHRoZSBzY3JvbGxFbmFibGVkIHByb3AsIGhvd2V2ZXIsIHRoZXJlIG1pZ2h0IGJlIGEgY2FzZSB3aGVyZSBhXG4gICAqIGltcGVyYXRpdmUgc29sdXRpb24gaXMgbW9yZSB1c2VmdWwgKGUuZy4gZm9yIG5vdCBibG9ja2luZyBhbiBhbmltYXRpb24pXG4gICAqL1xuICBwdWJsaWMgc2V0U2Nyb2xsRW5hYmxlZCA9IChzY3JvbGxFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKHRoaXMucGFnZXJWaWV3KSB7XG4gICAgICBQYWdlclZpZXdDb21tYW5kcy5zZXRTY3JvbGxFbmFibGVkSW1wZXJhdGl2ZWx5KFxuICAgICAgICB0aGlzLnBhZ2VyVmlldyxcbiAgICAgICAgc2Nyb2xsRW5hYmxlZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBfb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5pc1Njcm9sbGluZztcbiAgfTtcblxuICBwcml2YXRlIGdldCBkZWR1Y2VkTGF5b3V0RGlyZWN0aW9uKCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLnByb3BzLmxheW91dERpcmVjdGlvbiB8fFxuICAgICAgLy9AdHMtaWdub3JlIGZpeCBpdFxuICAgICAgdGhpcy5wcm9wcy5sYXlvdXREaXJlY3Rpb24gPT09ICdsb2NhbGUnXG4gICAgKSB7XG4gICAgICByZXR1cm4gSTE4bk1hbmFnZXIuaXNSVEwgPyAncnRsJyA6ICdsdHInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5sYXlvdXREaXJlY3Rpb247XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8UGFnZXJWaWV3Vmlld1xuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgcmVmPXsocmVmKSA9PiB7XG4gICAgICAgICAgdGhpcy5wYWdlclZpZXcgPSByZWY7XG4gICAgICAgIH19XG4gICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLnN0eWxlfVxuICAgICAgICBsYXlvdXREaXJlY3Rpb249e3RoaXMuZGVkdWNlZExheW91dERpcmVjdGlvbn1cbiAgICAgICAgb25QYWdlU2Nyb2xsPXt0aGlzLl9vblBhZ2VTY3JvbGx9XG4gICAgICAgIG9uUGFnZVNjcm9sbFN0YXRlQ2hhbmdlZD17dGhpcy5fb25QYWdlU2Nyb2xsU3RhdGVDaGFuZ2VkfVxuICAgICAgICBvblBhZ2VTZWxlY3RlZD17dGhpcy5fb25QYWdlU2VsZWN0ZWR9XG4gICAgICAgIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU9e3RoaXMuX29uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmV9XG4gICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbldpdGhPdmVycmlkZGVuU3R5bGUodGhpcy5wcm9wcy5jaGlsZHJlbil9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBVUEsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcseUJBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUVvQyxTQUFBSyx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFB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