5bb78c23b8ed0041c957731b3f124f4d
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var tslib = require('tslib');

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var CONSTANTS = {
  NODE_CLIENT: false,
  NODE_ADMIN: false,
  SDK_VERSION: '${JSCORE_VERSION}'
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var assert = function assert(assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
var assertionError = function assertionError(message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var stringToByteArray$1 = function stringToByteArray$1(str) {
  var out = [];
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
var byteArrayToString = function byteArrayToString(bytes) {
  var out = [];
  var pos = 0,
    c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join('');
};
var base64 = {
  byteToCharMap_: null,
  charToByteMap_: null,
  byteToCharMapWebSafe_: null,
  charToByteMapWebSafe_: null,
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },
  HAS_NATIVE_SUPPORT: typeof atob === 'function',
  encodeByteArray: function encodeByteArray(input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }
    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];
    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;
      if (!haveByte3) {
        outByte4 = 64;
        if (!haveByte2) {
          outByte3 = 64;
        }
      }
      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }
    return output.join('');
  },
  encodeString: function encodeString(input, webSafe) {
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }
    return this.encodeByteArray(stringToByteArray$1(input), webSafe);
  },
  decodeString: function decodeString(input, webSafe) {
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }
    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },
  decodeStringToByteArray: function decodeStringToByteArray(input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];
    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw new DecodeBase64StringError();
      }
      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);
      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);
        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }
    return output;
  },
  init_: function init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {};
      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
var DecodeBase64StringError = function (_super) {
  tslib.__extends(DecodeBase64StringError, _super);
  function DecodeBase64StringError() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.name = 'DecodeBase64StringError';
    return _this;
  }
  return DecodeBase64StringError;
}(Error);
var base64Encode = function base64Encode(str) {
  var utf8Bytes = stringToByteArray$1(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
var base64urlEncodeWithoutPadding = function base64urlEncodeWithoutPadding(str) {
  return base64Encode(str).replace(/\./g, '');
};
var base64Decode = function base64Decode(str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }
  return null;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function deepCopy(value) {
  return deepExtend(undefined, value);
}
function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }
  switch (source.constructor) {
    case Date:
      var dateValue = source;
      return new Date(dateValue.getTime());
    case Object:
      if (target === undefined) {
        target = {};
      }
      break;
    case Array:
      target = [];
      break;
    default:
      return source;
  }
  for (var prop in source) {
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }
    target[prop] = deepExtend(target[prop], source[prop]);
  }
  return target;
}
function isValidKey(key) {
  return key !== '__proto__';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  throw new Error('Unable to locate global object.');
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var getDefaultsFromGlobal = function getDefaultsFromGlobal() {
  return getGlobal().__FIREBASE_DEFAULTS__;
};
var getDefaultsFromEnvVariable = function getDefaultsFromEnvVariable() {
  if (typeof process === 'undefined' || typeof process.env === 'undefined') {
    return;
  }
  var defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
  if (defaultsJsonString) {
    return JSON.parse(defaultsJsonString);
  }
};
var getDefaultsFromCookie = function getDefaultsFromCookie() {
  if (typeof document === 'undefined') {
    return;
  }
  var match;
  try {
    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch (e) {
    return;
  }
  var decoded = match && base64Decode(match[1]);
  return decoded && JSON.parse(decoded);
};
var getDefaults = function getDefaults() {
  try {
    return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
  } catch (e) {
    console.info("Unable to get __FIREBASE_DEFAULTS__ due to: ".concat(e));
    return;
  }
};
var getDefaultEmulatorHost = function getDefaultEmulatorHost(productName) {
  var _a, _b;
  return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
};
var getDefaultEmulatorHostnameAndPort = function getDefaultEmulatorHostnameAndPort(productName) {
  var host = getDefaultEmulatorHost(productName);
  if (!host) {
    return undefined;
  }
  var separatorIndex = host.lastIndexOf(':');
  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
    throw new Error("Invalid host ".concat(host, " with no separate hostname and port!"));
  }
  var port = parseInt(host.substring(separatorIndex + 1), 10);
  if (host[0] === '[') {
    return [host.substring(1, separatorIndex - 1), port];
  } else {
    return [host.substring(0, separatorIndex), port];
  }
};
var getDefaultAppConfig = function getDefaultAppConfig() {
  var _a;
  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
};
var getExperimentalSetting = function getExperimentalSetting(name) {
  var _a;
  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a["_".concat(name)];
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Deferred = function () {
  function Deferred() {
    var _this = this;
    this.reject = function () {};
    this.resolve = function () {};
    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;
    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }
      if (typeof callback === 'function') {
        _this.promise.catch(function () {});
        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };
  return Deferred;
}();

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createMockUserToken(token, projectId) {
  if (token.uid) {
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  }
  var header = {
    alg: 'none',
    type: 'JWT'
  };
  var project = projectId || 'demo-project';
  var iat = token.iat || 0;
  var sub = token.sub || token.user_id;
  if (!sub) {
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  }
  var payload = tslib.__assign({
    iss: "https://securetoken.google.com/".concat(project),
    aud: project,
    iat: iat,
    exp: iat + 3600,
    auth_time: iat,
    sub: sub,
    user_id: sub,
    firebase: {
      sign_in_provider: 'custom',
      identities: {}
    }
  }, token);
  var signature = '';
  return [base64urlEncodeWithoutPadding(JSON.stringify(header)), base64urlEncodeWithoutPadding(JSON.stringify(payload)), signature].join('.');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
function isMobileCordova() {
  return typeof window !== 'undefined' && !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
function isNode() {
  var _a;
  var forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
  if (forceEnvironment === 'node') {
    return true;
  } else if (forceEnvironment === 'browser') {
    return false;
  }
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
function isBrowser() {
  return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
  var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
  return typeof runtime === 'object' && runtime.id !== undefined;
}
function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
function isElectron() {
  return getUA().indexOf('Electron/') >= 0;
}
function isIE() {
  var ua = getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
function isUWP() {
  return getUA().indexOf('MSAppHost/') >= 0;
}
function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
function isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
function isIndexedDBAvailable() {
  try {
    return typeof indexedDB === 'object';
  } catch (e) {
    return false;
  }
}
function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist_1 = true;
      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
      var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
      request_1.onsuccess = function () {
        request_1.result.close();
        if (!preExist_1) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
        }
        resolve(true);
      };
      request_1.onupgradeneeded = function () {
        preExist_1 = false;
      };
      request_1.onerror = function () {
        var _a;
        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
function areCookiesEnabled() {
  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {
    return false;
  }
  return true;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ERROR_NAME = 'FirebaseError';
var FirebaseError = function (_super) {
  tslib.__extends(FirebaseError, _super);
  function FirebaseError(code, message, customData) {
    var _this = _super.call(this, message) || this;
    _this.code = code;
    _this.customData = customData;
    _this.name = ERROR_NAME;
    Object.setPrototypeOf(_this, FirebaseError.prototype);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }
    return _this;
  }
  return FirebaseError;
}(Error);
var ErrorFactory = function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }
  ErrorFactory.prototype.create = function (code) {
    var data = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }
    var customData = data[0] || {};
    var fullCode = "".concat(this.service, "/").concat(code);
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error';
    var fullMessage = "".concat(this.serviceName, ": ").concat(message, " (").concat(fullCode, ").");
    var error = new FirebaseError(fullCode, fullMessage, customData);
    return error;
  };
  return ErrorFactory;
}();
function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<".concat(key, "?>");
  });
}
var PATTERN = /\{\$([^}]+)}/g;

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function jsonEval(str) {
  return JSON.parse(str);
}
function stringify(data) {
  return JSON.stringify(data);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var decode = function decode(token) {
  var header = {},
    claims = {},
    data = {},
    signature = '';
  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}
  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
var isValidTimestamp = function isValidTimestamp(token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
    validUntil = 0;
  if (typeof claims === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }
    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      validUntil = validSince + 86400;
    }
  }
  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
var issuedAtTime = function issuedAtTime(token) {
  var claims = decode(token).claims;
  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }
  return null;
};
var isValidFormat = function isValidFormat(token) {
  var decoded = decode(token),
    claims = decoded.claims;
  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
var isAdmin = function isAdmin(token) {
  var claims = decode(token).claims;
  return typeof claims === 'object' && claims['admin'] === true;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}
function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
function map(obj, fn, contextObj) {
  var res = {};
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }
  return res;
}
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {
    var k = aKeys_1[_i];
    if (!bKeys.includes(k)) {
      return false;
    }
    var aProp = a[k];
    var bProp = b[k];
    if (isObject(aProp) && isObject(bProp)) {
      if (!deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }
  for (var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++) {
    var k = bKeys_1[_a];
    if (!aKeys.includes(k)) {
      return false;
    }
  }
  return true;
}
function isObject(thing) {
  return thing !== null && typeof thing === 'object';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function promiseWithTimeout(promise, timeInMS) {
  if (timeInMS === void 0) {
    timeInMS = 2000;
  }
  var deferredPromise = new Deferred();
  setTimeout(function () {
    return deferredPromise.reject('timeout!');
  }, timeInMS);
  promise.then(deferredPromise.resolve, deferredPromise.reject);
  return deferredPromise.promise;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function querystring(querystringParams) {
  var params = [];
  var _loop_1 = function _loop_1(key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };
  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i],
      key = _b[0],
      value = _b[1];
    _loop_1(key, value);
  }
  return params.length ? '&' + params.join('&') : '';
}
function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var _a = token.split('='),
        key = _a[0],
        value = _a[1];
      obj[decodeURIComponent(key)] = decodeURIComponent(value);
    }
  });
  return obj;
}
function extractQuerystring(url) {
  var queryStart = url.indexOf('?');
  if (!queryStart) {
    return '';
  }
  var fragmentStart = url.indexOf('#', queryStart);
  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Sha1 = function () {
  function Sha1() {
    this.chain_ = [];
    this.buf_ = [];
    this.W_ = [];
    this.pad_ = [];
    this.inbuf_ = 0;
    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;
    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }
    this.reset();
  }
  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }
    var W = this.W_;
    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    }
    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }
    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k;
    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }
      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }
    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };
  Sha1.prototype.update = function (bytes, length) {
    if (bytes == null) {
      return;
    }
    if (length === undefined) {
      length = bytes.length;
    }
    var lengthMinusBlock = length - this.blockSize;
    var n = 0;
    var buf = this.buf_;
    var inbuf = this.inbuf_;
    while (n < length) {
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }
      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            break;
          }
        }
      }
    }
    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8;
    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    }
    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256;
    }
    this.compress_(this.buf_);
    var n = 0;
    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }
    return digest;
  };
  return Sha1;
}();
function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
var ObserverProxy = function () {
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;
    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0;
    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers;
    this.task.then(function () {
      executor(_this);
    }).catch(function (e) {
      _this.error(e);
    });
  }
  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };
  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };
  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;
    var observer;
    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    }
    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }
    if (observer.next === undefined) {
      observer.next = noop;
    }
    if (observer.error === undefined) {
      observer.error = noop;
    }
    if (observer.complete === undefined) {
      observer.complete = noop;
    }
    var unsub = this.unsubscribeOne.bind(this, this.observers.length);
    if (this.finalized) {
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {}
        return;
      });
    }
    this.observers.push(observer);
    return unsub;
  };
  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }
    delete this.observers[i];
    this.observerCount -= 1;
    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };
  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      return;
    }
    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  };
  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this;
    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };
  ObserverProxy.prototype.close = function (err) {
    var _this = this;
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    if (err !== undefined) {
      this.finalError = err;
    }
    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };
  return ObserverProxy;
}();
function async(fn, onError) {
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    }).catch(function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }
  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];
    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }
  return false;
}
function noop() {}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var validateArgCount = function validateArgCount(fnName, minCount, maxCount, argCount) {
  var argError;
  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }
  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
function errorPrefix(fnName, argName) {
  return "".concat(fnName, " failed: ").concat(argName, " argument ");
}
function validateNamespace(fnName, namespace, optional) {
  if (optional && !namespace) {
    return;
  }
  if (typeof namespace !== 'string') {
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
  }
}
function validateCallback(fnName, argumentName, callback, optional) {
  if (optional && !callback) {
    return;
  }
  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
  }
}
function validateContextObject(fnName, argumentName, context, optional) {
  if (optional && !context) {
    return;
  }
  if (typeof context !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
  }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var stringToByteArray = function stringToByteArray(str) {
  var out = [];
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800;
      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00;
      c = 0x10000 + (high << 10) + low;
    }
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
var stringLength = function stringLength(str) {
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      p += 4;
      i++;
    } else {
      p += 3;
    }
  }
  return p;
};

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var uuidv4 = function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
      v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_INTERVAL_MILLIS = 1000;
var DEFAULT_BACKOFF_FACTOR = 2;
var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000;
var RANDOM_FACTOR = 0.5;
function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
  if (intervalMillis === void 0) {
    intervalMillis = DEFAULT_INTERVAL_MILLIS;
  }
  if (backoffFactor === void 0) {
    backoffFactor = DEFAULT_BACKOFF_FACTOR;
  }
  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
  var randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ordinal(i) {
  if (!Number.isFinite(i)) {
    return "".concat(i);
  }
  return i + indicator(i);
}
function indicator(i) {
  i = Math.abs(i);
  var cent = i % 100;
  if (cent >= 10 && cent <= 20) {
    return 'th';
  }
  var dec = i % 10;
  if (dec === 1) {
    return 'st';
  }
  if (dec === 2) {
    return 'nd';
  }
  if (dec === 3) {
    return 'rd';
  }
  return 'th';
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getModularInstance(service) {
  if (service && service._delegate) {
    return service._delegate;
  } else {
    return service;
  }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
CONSTANTS.NODE_CLIENT = true;
exports.CONSTANTS = CONSTANTS;
exports.DecodeBase64StringError = DecodeBase64StringError;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError;
exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
exports.RANDOM_FACTOR = RANDOM_FACTOR;
exports.Sha1 = Sha1;
exports.areCookiesEnabled = areCookiesEnabled;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.base64urlEncodeWithoutPadding = base64urlEncodeWithoutPadding;
exports.calculateBackoffMillis = calculateBackoffMillis;
exports.contains = contains;
exports.createMockUserToken = createMockUserToken;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepEqual = deepEqual;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.extractQuerystring = extractQuerystring;
exports.getDefaultAppConfig = getDefaultAppConfig;
exports.getDefaultEmulatorHost = getDefaultEmulatorHost;
exports.getDefaultEmulatorHostnameAndPort = getDefaultEmulatorHostnameAndPort;
exports.getDefaults = getDefaults;
exports.getExperimentalSetting = getExperimentalSetting;
exports.getGlobal = getGlobal;
exports.getModularInstance = getModularInstance;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isIndexedDBAvailable = isIndexedDBAvailable;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isSafari = isSafari;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.ordinal = ordinal;
exports.promiseWithTimeout = promiseWithTimeout;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray;
exports.stringify = stringify;
exports.uuidv4 = uuidv4;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
exports.validateNamespace = validateNamespace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJTREtfVkVSU0lPTiIsImFzc2VydCIsImFzc2VydGlvbiIsIm1lc3NhZ2UiLCJhc3NlcnRpb25FcnJvciIsIkVycm9yIiwic3RyaW5nVG9CeXRlQXJyYXkkMSIsInN0cmluZ1RvQnl0ZUFycmF5Iiwic3RyIiwib3V0IiwicCIsImkiLCJsZW5ndGgiLCJjIiwiY2hhckNvZGVBdCIsImJ5dGVBcnJheVRvU3RyaW5nIiwiYnl0ZXMiLCJwb3MiLCJjMSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImMyIiwiYzMiLCJjNCIsInUiLCJqb2luIiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5pdF8iLCJieXRlVG9DaGFyTWFwIiwib3V0cHV0IiwiYnl0ZTEiLCJoYXZlQnl0ZTIiLCJieXRlMiIsImhhdmVCeXRlMyIsImJ5dGUzIiwib3V0Qnl0ZTEiLCJvdXRCeXRlMiIsIm91dEJ5dGUzIiwib3V0Qnl0ZTQiLCJwdXNoIiwiZW5jb2RlU3RyaW5nIiwiYnRvYSIsImRlY29kZVN0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImNoYXJBdCIsImhhdmVCeXRlNCIsImJ5dGU0IiwiRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IiLCJfc3VwZXIiLCJ0c2xpYiIsIl9fZXh0ZW5kcyIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJuYW1lIiwiYmFzZTY0RW5jb2RlIiwidXRmOEJ5dGVzIiwiYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmciLCJyZXBsYWNlIiwiYmFzZTY0RGVjb2RlIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImRlZXBDb3B5IiwidmFsdWUiLCJkZWVwRXh0ZW5kIiwidW5kZWZpbmVkIiwidGFyZ2V0Iiwic291cmNlIiwiT2JqZWN0IiwiY29uc3RydWN0b3IiLCJEYXRlIiwiZGF0ZVZhbHVlIiwiZ2V0VGltZSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImlzVmFsaWRLZXkiLCJrZXkiLCJnZXRHbG9iYWwiLCJzZWxmIiwid2luZG93IiwiZ2xvYmFsIiwiZ2V0RGVmYXVsdHNGcm9tR2xvYmFsIiwiX19GSVJFQkFTRV9ERUZBVUxUU19fIiwiZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUiLCJwcm9jZXNzIiwiZW52IiwiZGVmYXVsdHNKc29uU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGVmYXVsdHNGcm9tQ29va2llIiwiZG9jdW1lbnQiLCJtYXRjaCIsImNvb2tpZSIsImRlY29kZWQiLCJnZXREZWZhdWx0cyIsImluZm8iLCJjb25jYXQiLCJnZXREZWZhdWx0RW11bGF0b3JIb3N0IiwicHJvZHVjdE5hbWUiLCJfYSIsIl9iIiwiZW11bGF0b3JIb3N0cyIsImdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCIsImhvc3QiLCJzZXBhcmF0b3JJbmRleCIsImxhc3RJbmRleE9mIiwicG9ydCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZ2V0RGVmYXVsdEFwcENvbmZpZyIsImNvbmZpZyIsImdldEV4cGVyaW1lbnRhbFNldHRpbmciLCJEZWZlcnJlZCIsInJlamVjdCIsInJlc29sdmUiLCJwcm9taXNlIiwiUHJvbWlzZSIsInByb3RvdHlwZSIsIndyYXBDYWxsYmFjayIsImNhbGxiYWNrIiwiY2F0Y2giLCJjcmVhdGVNb2NrVXNlclRva2VuIiwidG9rZW4iLCJwcm9qZWN0SWQiLCJ1aWQiLCJoZWFkZXIiLCJhbGciLCJ0eXBlIiwicHJvamVjdCIsImlhdCIsInN1YiIsInVzZXJfaWQiLCJwYXlsb2FkIiwiX19hc3NpZ24iLCJpc3MiLCJhdWQiLCJleHAiLCJhdXRoX3RpbWUiLCJmaXJlYmFzZSIsInNpZ25faW5fcHJvdmlkZXIiLCJpZGVudGl0aWVzIiwic2lnbmF0dXJlIiwic3RyaW5naWZ5IiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJpc01vYmlsZUNvcmRvdmEiLCJ0ZXN0IiwiaXNOb2RlIiwiZm9yY2VFbnZpcm9ubWVudCIsInRvU3RyaW5nIiwiY2FsbCIsImlzQnJvd3NlciIsImlzQnJvd3NlckV4dGVuc2lvbiIsInJ1bnRpbWUiLCJjaHJvbWUiLCJicm93c2VyIiwiaWQiLCJpc1JlYWN0TmF0aXZlIiwiaXNFbGVjdHJvbiIsImluZGV4T2YiLCJpc0lFIiwidWEiLCJpc1VXUCIsImlzTm9kZVNkayIsImlzU2FmYXJpIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0luZGV4ZWREQkF2YWlsYWJsZSIsImluZGV4ZWREQiIsInZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUiLCJwcmVFeGlzdF8xIiwiREJfQ0hFQ0tfTkFNRV8xIiwicmVxdWVzdF8xIiwib3BlbiIsIm9uc3VjY2VzcyIsInJlc3VsdCIsImNsb3NlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbmVycm9yIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiRVJST1JfTkFNRSIsIkZpcmViYXNlRXJyb3IiLCJjb2RlIiwiY3VzdG9tRGF0YSIsInNldFByb3RvdHlwZU9mIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJFcnJvckZhY3RvcnkiLCJjcmVhdGUiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJlcnJvcnMiLCJkYXRhIiwiX2kiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwicmVwbGFjZVRlbXBsYXRlIiwiZnVsbE1lc3NhZ2UiLCJQQVRURVJOIiwiXyIsImpzb25FdmFsIiwiZGVjb2RlIiwiY2xhaW1zIiwicGFydHMiLCJzcGxpdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImlzVmFsaWRGb3JtYXQiLCJpc0FkbWluIiwiY29udGFpbnMiLCJvYmoiLCJzYWZlR2V0IiwiaXNFbXB0eSIsIm1hcCIsImZuIiwiY29udGV4dE9iaiIsInJlcyIsImRlZXBFcXVhbCIsImEiLCJiIiwiYUtleXMiLCJrZXlzIiwiYktleXMiLCJhS2V5c18xIiwiayIsImFQcm9wIiwiYlByb3AiLCJpc09iamVjdCIsImJLZXlzXzEiLCJ0aGluZyIsInByb21pc2VXaXRoVGltZW91dCIsInRpbWVJbk1TIiwiZGVmZXJyZWRQcm9taXNlIiwic2V0VGltZW91dCIsInRoZW4iLCJxdWVyeXN0cmluZyIsInF1ZXJ5c3RyaW5nUGFyYW1zIiwicGFyYW1zIiwiX2xvb3BfMSIsImZvckVhY2giLCJhcnJheVZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVudHJpZXMiLCJxdWVyeXN0cmluZ0RlY29kZSIsInRva2VucyIsImRlY29kZVVSSUNvbXBvbmVudCIsImV4dHJhY3RRdWVyeXN0cmluZyIsInVybCIsInF1ZXJ5U3RhcnQiLCJmcmFnbWVudFN0YXJ0IiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJyZXNldCIsImNvbXByZXNzXyIsImJ1ZiIsIm9mZnNldCIsIlciLCJ0IiwiZCIsImYiLCJ1cGRhdGUiLCJsZW5ndGhNaW51c0Jsb2NrIiwibiIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiaiIsImNyZWF0ZVN1YnNjcmliZSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsInByb3h5IiwiT2JzZXJ2ZXJQcm94eSIsInN1YnNjcmliZSIsImJpbmQiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsIm5leHQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsImNvbXBsZXRlIiwibmV4dE9yT2JzZXJ2ZXIiLCJpbXBsZW1lbnRzQW55TWV0aG9kcyIsIm5vb3AiLCJ1bnN1YiIsInVuc3Vic2NyaWJlT25lIiwiZmluYWxFcnJvciIsInNlbmRPbmUiLCJlcnIiLCJhc3luYyIsIm9uRXJyb3IiLCJhcmdzIiwibWV0aG9kcyIsIm1ldGhvZHNfMSIsIm1ldGhvZCIsInZhbGlkYXRlQXJnQ291bnQiLCJmbk5hbWUiLCJtaW5Db3VudCIsIm1heENvdW50IiwiYXJnQ291bnQiLCJhcmdFcnJvciIsImVycm9yUHJlZml4IiwiYXJnTmFtZSIsInZhbGlkYXRlTmFtZXNwYWNlIiwibmFtZXNwYWNlIiwib3B0aW9uYWwiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiYXJndW1lbnROYW1lIiwidmFsaWRhdGVDb250ZXh0T2JqZWN0IiwiY29udGV4dCIsImhpZ2giLCJsb3ciLCJzdHJpbmdMZW5ndGgiLCJ1dWlkdjQiLCJyIiwicmFuZG9tIiwidiIsIkRFRkFVTFRfSU5URVJWQUxfTUlMTElTIiwiREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiIsIk1BWF9WQUxVRV9NSUxMSVMiLCJSQU5ET01fRkFDVE9SIiwiY2FsY3VsYXRlQmFja29mZk1pbGxpcyIsImJhY2tvZmZDb3VudCIsImludGVydmFsTWlsbGlzIiwiYmFja29mZkZhY3RvciIsImN1cnJCYXNlVmFsdWUiLCJwb3ciLCJyYW5kb21XYWl0Iiwicm91bmQiLCJtaW4iLCJvcmRpbmFsIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJpbmRpY2F0b3IiLCJhYnMiLCJjZW50IiwiZGVjIiwiZ2V0TW9kdWxhckluc3RhbmNlIiwiX2RlbGVnYXRlIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyIsIi4uL3NyYy9hc3NlcnQudHMiLCIuLi9zcmMvY3J5cHQudHMiLCIuLi9zcmMvZGVlcENvcHkudHMiLCIuLi9zcmMvZ2xvYmFsLnRzIiwiLi4vc3JjL2RlZmF1bHRzLnRzIiwiLi4vc3JjL2RlZmVycmVkLnRzIiwiLi4vc3JjL2VtdWxhdG9yLnRzIiwiLi4vc3JjL2Vudmlyb25tZW50LnRzIiwiLi4vc3JjL2Vycm9ycy50cyIsIi4uL3NyYy9qc29uLnRzIiwiLi4vc3JjL2p3dC50cyIsIi4uL3NyYy9vYmoudHMiLCIuLi9zcmMvcHJvbWlzZS50cyIsIi4uL3NyYy9xdWVyeS50cyIsIi4uL3NyYy9zaGExLnRzIiwiLi4vc3JjL3N1YnNjcmliZS50cyIsIi4uL3NyYy92YWxpZGF0aW9uLnRzIiwiLi4vc3JjL3V0ZjgudHMiLCIuLi9zcmMvdXVpZC50cyIsIi4uL3NyYy9leHBvbmVudGlhbF9iYWNrb2ZmLnRzIiwiLi4vc3JjL2Zvcm1hdHRlcnMudHMiLCIuLi9zcmMvY29tcGF0LnRzIiwiLi4vaW5kZXgubm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgQ09OU1RBTlRTID0ge1xuICAvKipcbiAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXG4gICAqL1xuICBOT0RFX0NMSUVOVDogZmFsc2UsXG4gIC8qKlxuICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIEFkbWluIE5vZGUuanMgU0RLLlxuICAgKi9cbiAgTk9ERV9BRE1JTjogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXG4gICAqL1xuICBTREtfVkVSU0lPTjogJyR7SlNDT1JFX1ZFUlNJT059J1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbjogdW5rbm93biwgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgdGhyb3cgYXNzZXJ0aW9uRXJyb3IobWVzc2FnZSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBFcnJvciBvYmplY3Qgc3VpdGFibGUgZm9yIHRocm93aW5nLlxuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZTogc3RyaW5nKTogRXJyb3Ige1xuICByZXR1cm4gbmV3IEVycm9yKFxuICAgICdGaXJlYmFzZSBEYXRhYmFzZSAoJyArXG4gICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xuICAgICAgJykgSU5URVJOQUwgQVNTRVJUIEZBSUxFRDogJyArXG4gICAgICBtZXNzYWdlXG4gICk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3Qgc3RyaW5nVG9CeXRlQXJyYXkgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBudW1iZXJbXSB7XG4gIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXG4gIGNvbnN0IG91dDogbnVtYmVyW10gPSBbXTtcbiAgbGV0IHAgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgIG91dFtwKytdID0gYztcbiAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcbiAgICAgIGkgKyAxIDwgc3RyLmxlbmd0aCAmJlxuICAgICAgKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmMwMCkgPT09IDB4ZGMwMFxuICAgICkge1xuICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcbiAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNmZik7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XG4gICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLlxuICogQHBhcmFtIGJ5dGVzIEFycmF5IG9mIG51bWJlcnMgcmVwcmVzZW50aW5nIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmNvbnN0IGJ5dGVBcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKGJ5dGVzOiBudW1iZXJbXSk6IHN0cmluZyB7XG4gIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXG4gIGNvbnN0IG91dDogc3RyaW5nW10gPSBbXTtcbiAgbGV0IHBvcyA9IDAsXG4gICAgYyA9IDA7XG4gIHdoaWxlIChwb3MgPCBieXRlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjMSA9IGJ5dGVzW3BvcysrXTtcbiAgICBpZiAoYzEgPCAxMjgpIHtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XG4gICAgfSBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xuICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDMxKSA8PCA2KSB8IChjMiAmIDYzKSk7XG4gICAgfSBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xuICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcbiAgICAgIGNvbnN0IGMyID0gYnl0ZXNbcG9zKytdO1xuICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XG4gICAgICBjb25zdCBjNCA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIGNvbnN0IHUgPVxuICAgICAgICAoKChjMSAmIDcpIDw8IDE4KSB8ICgoYzIgJiA2MykgPDwgMTIpIHwgKChjMyAmIDYzKSA8PCA2KSB8IChjNCAmIDYzKSkgLVxuICAgICAgICAweDEwMDAwO1xuICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZDgwMCArICh1ID4+IDEwKSk7XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGMyID0gYnl0ZXNbcG9zKytdO1xuICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgICgoYzEgJiAxNSkgPDwgMTIpIHwgKChjMiAmIDYzKSA8PCA2KSB8IChjMyAmIDYzKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn07XG5cbmludGVyZmFjZSBCYXNlNjQge1xuICBieXRlVG9DaGFyTWFwXzogeyBba2V5OiBudW1iZXJdOiBzdHJpbmcgfSB8IG51bGw7XG4gIGNoYXJUb0J5dGVNYXBfOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHwgbnVsbDtcbiAgYnl0ZVRvQ2hhck1hcFdlYlNhZmVfOiB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9IHwgbnVsbDtcbiAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHwgbnVsbDtcbiAgRU5DT0RFRF9WQUxTX0JBU0U6IHN0cmluZztcbiAgcmVhZG9ubHkgRU5DT0RFRF9WQUxTOiBzdHJpbmc7XG4gIHJlYWRvbmx5IEVOQ09ERURfVkFMU19XRUJTQUZFOiBzdHJpbmc7XG4gIEhBU19OQVRJVkVfU1VQUE9SVDogYm9vbGVhbjtcbiAgZW5jb2RlQnl0ZUFycmF5KGlucHV0OiBudW1iZXJbXSB8IFVpbnQ4QXJyYXksIHdlYlNhZmU/OiBib29sZWFuKTogc3RyaW5nO1xuICBlbmNvZGVTdHJpbmcoaW5wdXQ6IHN0cmluZywgd2ViU2FmZT86IGJvb2xlYW4pOiBzdHJpbmc7XG4gIGRlY29kZVN0cmluZyhpbnB1dDogc3RyaW5nLCB3ZWJTYWZlOiBib29sZWFuKTogc3RyaW5nO1xuICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dDogc3RyaW5nLCB3ZWJTYWZlOiBib29sZWFuKTogbnVtYmVyW107XG4gIGluaXRfKCk6IHZvaWQ7XG59XG5cbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XG4vLyBiZSB0cmVlc2hha2VkLiBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTY5MVxuLy8gU3RhdGljIGxvb2t1cCBtYXBzLCBsYXppbHkgcG9wdWxhdGVkIGJ5IGluaXRfKClcbmV4cG9ydCBjb25zdCBiYXNlNjQ6IEJhc2U2NCA9IHtcbiAgLyoqXG4gICAqIE1hcHMgYnl0ZXMgdG8gY2hhcmFjdGVycy5cbiAgICovXG4gIGJ5dGVUb0NoYXJNYXBfOiBudWxsLFxuXG4gIC8qKlxuICAgKiBNYXBzIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXG4gICAqL1xuICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcblxuICAvKipcbiAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXG5cbiAgLyoqXG4gICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxuXG4gIC8qKlxuICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cbiAgICogRU5DT0RFRF9WQUxTIGFuZCBFTkNPREVEX1ZBTFNfV0VCU0FGRVxuICAgKi9cbiAgRU5DT0RFRF9WQUxTX0JBU0U6XG4gICAgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJyArICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicgKyAnMDEyMzQ1Njc4OScsXG5cbiAgLyoqXG4gICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LiBWYWx1ZSA2NCAoPSkgaXMgc3BlY2lhbDsgaXQgbWVhbnMgXCJub3RoaW5nLlwiXG4gICAqL1xuICBnZXQgRU5DT0RFRF9WQUxTKCkge1xuICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE91ciB3ZWJzYWZlIGFscGhhYmV0LlxuICAgKi9cbiAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xuICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHRoZSBhdG9iIGFuZCBidG9hIGZ1bmN0aW9ucy4gVGhpcyBleHRlbnNpb25cbiAgICogc3RhcnRlZCBhdCBNb3ppbGxhIGJ1dCBpcyBub3cgaW1wbGVtZW50ZWQgYnkgbWFueSBicm93c2Vycy4gV2UgdXNlIHRoZVxuICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcbiAgICogYnV0IHN0aWxsIGFsbG93aW5nIHRoZSBzdGFuZGFyZCBwZXItYnJvd3NlciBjb21waWxhdGlvbnMuXG4gICAqXG4gICAqL1xuICBIQVNfTkFUSVZFX1NVUFBPUlQ6IHR5cGVvZiBhdG9iID09PSAnZnVuY3Rpb24nLFxuXG4gIC8qKlxuICAgKiBCYXNlNjQtZW5jb2RlIGFuIGFycmF5IG9mIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxuICAgKiAgICAgdmFsdWUgaW4gWzAsIDI1NV0pIHRvIGVuY29kZS5cbiAgICogQHBhcmFtIHdlYlNhZmUgQm9vbGVhbiBpbmRpY2F0aW5nIHdlIHNob3VsZCB1c2UgdGhlXG4gICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICAgKi9cbiAgZW5jb2RlQnl0ZUFycmF5KGlucHV0OiBudW1iZXJbXSB8IFVpbnQ4QXJyYXksIHdlYlNhZmU/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0XygpO1xuXG4gICAgY29uc3QgYnl0ZVRvQ2hhck1hcCA9IHdlYlNhZmVcbiAgICAgID8gdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV8hXG4gICAgICA6IHRoaXMuYnl0ZVRvQ2hhck1hcF8hO1xuXG4gICAgY29uc3Qgb3V0cHV0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICBjb25zdCBieXRlMSA9IGlucHV0W2ldO1xuICAgICAgY29uc3QgaGF2ZUJ5dGUyID0gaSArIDEgPCBpbnB1dC5sZW5ndGg7XG4gICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XG4gICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpICsgMiA8IGlucHV0Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGUzID0gaGF2ZUJ5dGUzID8gaW5wdXRbaSArIDJdIDogMDtcblxuICAgICAgY29uc3Qgb3V0Qnl0ZTEgPSBieXRlMSA+PiAyO1xuICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XG4gICAgICBsZXQgb3V0Qnl0ZTMgPSAoKGJ5dGUyICYgMHgwZikgPDwgMikgfCAoYnl0ZTMgPj4gNik7XG4gICAgICBsZXQgb3V0Qnl0ZTQgPSBieXRlMyAmIDB4M2Y7XG5cbiAgICAgIGlmICghaGF2ZUJ5dGUzKSB7XG4gICAgICAgIG91dEJ5dGU0ID0gNjQ7XG5cbiAgICAgICAgaWYgKCFoYXZlQnl0ZTIpIHtcbiAgICAgICAgICBvdXRCeXRlMyA9IDY0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG91dHB1dC5wdXNoKFxuICAgICAgICBieXRlVG9DaGFyTWFwW291dEJ5dGUxXSxcbiAgICAgICAgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sXG4gICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLFxuICAgICAgICBieXRlVG9DaGFyTWFwW291dEJ5dGU0XVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXQgQSBzdHJpbmcgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxuICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXG4gICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cbiAgICovXG4gIGVuY29kZVN0cmluZyhpbnB1dDogc3RyaW5nLCB3ZWJTYWZlPzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcbiAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXG4gICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XG4gICAgICByZXR1cm4gYnRvYShpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVuY29kZUJ5dGVBcnJheShzdHJpbmdUb0J5dGVBcnJheShpbnB1dCksIHdlYlNhZmUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxuICAgKiBAcGFyYW0gd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlXG4gICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxuICAgKi9cbiAgZGVjb2RlU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdlYlNhZmU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XG4gICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxuICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhd2ViU2FmZSkge1xuICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxuICAgKlxuICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxuICAgKiBieXRlcy4gIElmIHRoZSBlbmNvZGVyIGRpZCBub3QgYXBwbHkgcGFkZGluZywgdGhlIGlucHV0IGxlbmd0aCBtYXkgbm90XG4gICAqIGJlIGEgbXVsdGlwbGUgb2YgNC5cbiAgICpcbiAgICogSW4gdGhpcyBjYXNlLCB0aGUgbGFzdCBncm91cCB3aWxsIGhhdmUgZmV3ZXIgdGhhbiA0IGNoYXJhY3RlcnMsIGFuZFxuICAgKiBwYWRkaW5nIHdpbGwgYmUgaW5mZXJyZWQuICBJZiB0aGUgZ3JvdXAgaGFzIG9uZSBvciB0d28gY2hhcmFjdGVycywgaXQgZGVjb2Rlc1xuICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBJbnB1dCB0byBkZWNvZGUuXG4gICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXG4gICAqIEByZXR1cm4gYnl0ZXMgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxuICAgKi9cbiAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQ6IHN0cmluZywgd2ViU2FmZTogYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICB0aGlzLmluaXRfKCk7XG5cbiAgICBjb25zdCBjaGFyVG9CeXRlTWFwID0gd2ViU2FmZVxuICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlXyFcbiAgICAgIDogdGhpcy5jaGFyVG9CeXRlTWFwXyE7XG5cbiAgICBjb25zdCBvdXRwdXQ6IG51bWJlcltdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgKSB7XG4gICAgICBjb25zdCBieXRlMSA9IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkrKyldO1xuXG4gICAgICBjb25zdCBoYXZlQnl0ZTIgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiAwO1xuICAgICAgKytpO1xuXG4gICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcbiAgICAgICsraTtcblxuICAgICAgY29uc3QgaGF2ZUJ5dGU0ID0gaSA8IGlucHV0Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XG4gICAgICArK2k7XG5cbiAgICAgIGlmIChieXRlMSA9PSBudWxsIHx8IGJ5dGUyID09IG51bGwgfHwgYnl0ZTMgPT0gbnVsbCB8fCBieXRlNCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvdXRCeXRlMSA9IChieXRlMSA8PCAyKSB8IChieXRlMiA+PiA0KTtcbiAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUxKTtcblxuICAgICAgaWYgKGJ5dGUzICE9PSA2NCkge1xuICAgICAgICBjb25zdCBvdXRCeXRlMiA9ICgoYnl0ZTIgPDwgNCkgJiAweGYwKSB8IChieXRlMyA+PiAyKTtcbiAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xuXG4gICAgICAgIGlmIChieXRlNCAhPT0gNjQpIHtcbiAgICAgICAgICBjb25zdCBvdXRCeXRlMyA9ICgoYnl0ZTMgPDwgNikgJiAweGMwKSB8IGJ5dGU0O1xuICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExhenkgc3RhdGljIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLiBDYWxsZWQgYmVmb3JlXG4gICAqIGFjY2Vzc2luZyBhbnkgb2YgdGhlIHN0YXRpYyBtYXAgdmFyaWFibGVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaW5pdF8oKSB7XG4gICAgaWYgKCF0aGlzLmJ5dGVUb0NoYXJNYXBfKSB7XG4gICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfID0ge307XG4gICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XG4gICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlXyA9IHt9O1xuICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV8gPSB7fTtcblxuICAgICAgLy8gV2Ugd2FudCBxdWljayBtYXBwaW5ncyBiYWNrIGFuZCBmb3J0aCwgc28gd2UgcHJlY29tcHV0ZSB0d28gbWFwcy5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKTtcbiAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLmJ5dGVUb0NoYXJNYXBfW2ldXSA9IGk7XG4gICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XG4gICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldXSA9IGk7XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXG4gICAgICAgIGlmIChpID49IHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKV0gPSBpO1xuICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKV0gPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcmVhZG9ubHkgbmFtZSA9ICdEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcic7XG59XG5cbi8qKlxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheShzdHIpO1xuICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xufTtcblxuLyoqXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmcgKHdpdGhvdXQgXCIuXCIgcGFkZGluZyBpbiB0aGUgZW5kKS5cbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxuICByZXR1cm4gYmFzZTY0RW5jb2RlKHN0cikucmVwbGFjZSgvXFwuL2csICcnKTtcbn07XG5cbi8qKlxuICogVVJMLXNhZmUgYmFzZTY0IGRlY29kaW5nXG4gKlxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXG4gKiBiYXNlNjRVcmwgdmFyaWFudCBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcbiAqIEByZXR1cm4gRGVjb2RlZCByZXN1bHQsIGlmIHBvc3NpYmxlXG4gKi9cbmV4cG9ydCBjb25zdCBiYXNlNjREZWNvZGUgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYmFzZTY0LmRlY29kZVN0cmluZyhzdHIsIHRydWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBEbyBhIGRlZXAtY29weSBvZiBiYXNpYyBKYXZhU2NyaXB0IE9iamVjdHMgb3IgQXJyYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcENvcHk8VD4odmFsdWU6IFQpOiBUIHtcbiAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSkgYXMgVDtcbn1cblxuLyoqXG4gKiBDb3B5IHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IChyZWN1cnNpdmVseSBhbGxvd3MgZXh0ZW5zaW9uXG4gKiBvZiBPYmplY3RzIGFuZCBBcnJheXMpLiAgU2NhbGFyIHZhbHVlcyBpbiB0aGUgdGFyZ2V0IGFyZSBvdmVyLXdyaXR0ZW4uXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXG4gKiAoYW5kIHJldHVybmVkKS5cbiAqXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cbiAqIHRoYXQgbmFtZXNwYWNlLSBsaWtlIGRpY3Rpb25hcmllcyBhcmUgbWVyZ2VkLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXG4gKiB0aGUgc291cmNlIE9iamVjdCBhcmUgY29waWVkIG9udG8gaXQgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uLlxuICpcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0OiB1bmtub3duLCBzb3VyY2U6IHVua25vd24pOiB1bmtub3duIHtcbiAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xuICAgIGNhc2UgRGF0ZTpcbiAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXG4gICAgICAvLyBwcm9wZXJ0aWVzIC0gdGhleSB3aWxsIGJlIGxvc3QhXG4gICAgICBjb25zdCBkYXRlVmFsdWUgPSBzb3VyY2UgYXMgRGF0ZTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlVmFsdWUuZ2V0VGltZSgpKTtcblxuICAgIGNhc2UgT2JqZWN0OlxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBcnJheTpcbiAgICAgIC8vIEFsd2F5cyBjb3B5IHRoZSBhcnJheSBzb3VyY2UgYW5kIG92ZXJ3cml0ZSB0aGUgdGFyZ2V0LlxuICAgICAgdGFyZ2V0ID0gW107XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cbiAgICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IHByb3AgaW4gc291cmNlKSB7XG4gICAgLy8gdXNlIGlzVmFsaWRLZXkgdG8gZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGUgcG9sbHV0aW9uLiBTZWUgaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vU05ZSy1KUy1MT0RBU0gtNDUwMjAyXG4gICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgIWlzVmFsaWRLZXkocHJvcCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAodGFyZ2V0IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtwcm9wXSA9IGRlZXBFeHRlbmQoXG4gICAgICAodGFyZ2V0IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtwcm9wXSxcbiAgICAgIChzb3VyY2UgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW3Byb3BdXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGtleSAhPT0gJ19fcHJvdG9fXyc7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBgZ2xvYmFsVGhpc2Agb2JqZWN0LlxuICogQHJldHVybnMgdGhlIGBnbG9iYWxUaGlzYCBvYmplY3QgZm9yIHRoZSBnaXZlbiBlbnZpcm9ubWVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbCgpOiB0eXBlb2YgZ2xvYmFsVGhpcyB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBiYXNlNjREZWNvZGUgfSBmcm9tICcuL2NyeXB0JztcbmltcG9ydCB7IGdldEdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcblxuLyoqXG4gKiBLZXlzIGZvciBleHBlcmltZW50YWwgcHJvcGVydGllcyBvbiB0aGUgYEZpcmViYXNlRGVmYXVsdHNgIG9iamVjdC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgRXhwZXJpbWVudGFsS2V5ID0gJ2F1dGhUb2tlblN5bmNVUkwnIHwgJ2F1dGhJZFRva2VuTWF4QWdlJztcblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgaW5qZWN0ZWQgaW50byB0aGUgZW52aXJvbm1lbnQgYXMgX19GSVJFQkFTRV9ERUZBVUxUU19fLFxuICogZWl0aGVyIGFzIGEgcHJvcGVydHkgb2YgZ2xvYmFsVGhpcywgYSBzaGVsbCBlbnZpcm9ubWVudCB2YXJpYWJsZSwgb3IgYVxuICogY29va2llLlxuICpcbiAqIFRoaXMgb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlIGFuZCBpbml0aWFsaXplXG4gKiBhIEZpcmViYXNlIGFwcCBhcyB3ZWxsIGFzIGFueSBlbXVsYXRvcnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlRGVmYXVsdHMge1xuICBjb25maWc/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBlbXVsYXRvckhvc3RzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgX2F1dGhUb2tlblN5bmNVUkw/OiBzdHJpbmc7XG4gIF9hdXRoSWRUb2tlbk1heEFnZT86IG51bWJlcjtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIEZpcmViYXNlJ3MgcnVudGltZSBlbnZpcm9ubWVudCBkZXRlY3Rpb24gYW5kXG4gICAqIGZvcmNlIHRoZSBTREsgdG8gYWN0IGFzIGlmIGl0IHdlcmUgaW4gdGhlIHNwZWNpZmllZCBlbnZpcm9ubWVudC5cbiAgICovXG4gIGZvcmNlRW52aXJvbm1lbnQ/OiAnYnJvd3NlcicgfCAnbm9kZSc7XG4gIFtrZXk6IHN0cmluZ106IHVua25vd247XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gTmVlZCBgdmFyYCBmb3IgdGhpcyB0byB3b3JrLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdmFyXG4gIHZhciBfX0ZJUkVCQVNFX0RFRkFVTFRTX186IEZpcmViYXNlRGVmYXVsdHMgfCB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IGdldERlZmF1bHRzRnJvbUdsb2JhbCA9ICgpOiBGaXJlYmFzZURlZmF1bHRzIHwgdW5kZWZpbmVkID0+XG4gIGdldEdsb2JhbCgpLl9fRklSRUJBU0VfREVGQVVMVFNfXztcblxuLyoqXG4gKiBBdHRlbXB0IHRvIHJlYWQgZGVmYXVsdHMgZnJvbSBhIEpTT04gc3RyaW5nIHByb3ZpZGVkIHRvXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cbiAqIHByb2Nlc3MoLillbnYoLilfX0ZJUkVCQVNFX0RFRkFVTFRTX1BBVEhfX1xuICogVGhlIGRvdHMgYXJlIGluIHBhcmVucyBiZWNhdXNlIGNlcnRhaW4gY29tcGlsZXJzIChWaXRlPykgY2Fubm90XG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9pc3N1ZXMvNjgzOFxuICovXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpOiBGaXJlYmFzZURlZmF1bHRzIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcHJvY2Vzcy5lbnYgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcbiAgaWYgKGRlZmF1bHRzSnNvblN0cmluZykge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGRlZmF1bHRzSnNvblN0cmluZyk7XG4gIH1cbn07XG5cbmNvbnN0IGdldERlZmF1bHRzRnJvbUNvb2tpZSA9ICgpOiBGaXJlYmFzZURlZmF1bHRzIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG1hdGNoO1xuICB0cnkge1xuICAgIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKC9fX0ZJUkVCQVNFX0RFRkFVTFRTX189KFteO10rKS8pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gU29tZSBlbnZpcm9ubWVudHMgc3VjaCBhcyBBbmd1bGFyIFVuaXZlcnNhbCBTU1IgaGF2ZSBhXG4gICAgLy8gYGRvY3VtZW50YCBvYmplY3QgYnV0IGVycm9yIG9uIGFjY2Vzc2luZyBgZG9jdW1lbnQuY29va2llYC5cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XG4gIHJldHVybiBkZWNvZGVkICYmIEpTT04ucGFyc2UoZGVjb2RlZCk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdC4gSXQgY2hlY2tzIGluIG9yZGVyOlxuICogKDEpIGlmIHN1Y2ggYW4gb2JqZWN0IGV4aXN0cyBhcyBhIHByb3BlcnR5IG9mIGBnbG9iYWxUaGlzYFxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXG4gKiAoMykgaWYgc3VjaCBhbiBvYmplY3QgZXhpc3RzIGluIGEgY29va2llXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0cyA9ICgpOiBGaXJlYmFzZURlZmF1bHRzIHwgdW5kZWZpbmVkID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcbiAgICAgIGdldERlZmF1bHRzRnJvbUVudlZhcmlhYmxlKCkgfHxcbiAgICAgIGdldERlZmF1bHRzRnJvbUNvb2tpZSgpXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8qKlxuICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXG4gICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXG4gICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xuICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxuICAgICAqL1xuICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XG4gICAgcmV0dXJuO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZW11bGF0b3IgaG9zdCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcbiAqIGZvciB0aGUgZ2l2ZW4gcHJvZHVjdC5cbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0RW11bGF0b3JIb3N0ID0gKFxuICBwcm9kdWN0TmFtZTogc3RyaW5nXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4gZ2V0RGVmYXVsdHMoKT8uZW11bGF0b3JIb3N0cz8uW3Byb2R1Y3ROYW1lXTtcblxuLyoqXG4gKiBSZXR1cm5zIGVtdWxhdG9yIGhvc3RuYW1lIGFuZCBwb3J0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxuICogQHJldHVybnMgYSBwYWlyIG9mIGhvc3RuYW1lIGFuZCBwb3J0IGxpa2UgYFtcIjo6MVwiLCA0MDAwXWAgaWYgYXZhaWxhYmxlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQgPSAoXG4gIHByb2R1Y3ROYW1lOiBzdHJpbmdcbik6IFtob3N0bmFtZTogc3RyaW5nLCBwb3J0OiBudW1iZXJdIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgaG9zdCA9IGdldERlZmF1bHRFbXVsYXRvckhvc3QocHJvZHVjdE5hbWUpO1xuICBpZiAoIWhvc3QpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IHNlcGFyYXRvckluZGV4ID0gaG9zdC5sYXN0SW5kZXhPZignOicpOyAvLyBGaW5kaW5nIHRoZSBsYXN0IHNpbmNlIElQdjYgYWRkciBhbHNvIGhhcyBjb2xvbnMuXG4gIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xuICBpZiAoaG9zdFswXSA9PT0gJ1snKSB7XG4gICAgLy8gQnJhY2tldC1xdW90ZWQgYFtpcHY2YWRkcl06cG9ydGAgPT4gcmV0dXJuIFwiaXB2NmFkZHJcIiAod2l0aG91dCBicmFja2V0cykuXG4gICAgcmV0dXJuIFtob3N0LnN1YnN0cmluZygxLCBzZXBhcmF0b3JJbmRleCAtIDEpLCBwb3J0XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBGaXJlYmFzZSBhcHAgY29uZmlnIHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRBcHBDb25maWcgPSAoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZCA9PlxuICBnZXREZWZhdWx0cygpPy5jb25maWc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xuICogcHJlZml4ZWQgYnkgXCJfXCIpXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRFeHBlcmltZW50YWxTZXR0aW5nID0gPFQgZXh0ZW5kcyBFeHBlcmltZW50YWxLZXk+KFxuICBuYW1lOiBUXG4pOiBGaXJlYmFzZURlZmF1bHRzW2BfJHtUfWBdID0+XG4gIGdldERlZmF1bHRzKCk/LltgXyR7bmFtZX1gXSBhcyBGaXJlYmFzZURlZmF1bHRzW2BfJHtUfWBdO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIERlZmVycmVkPFI+IHtcbiAgcHJvbWlzZTogUHJvbWlzZTxSPjtcbiAgcmVqZWN0OiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkID0gKCkgPT4ge307XG4gIHJlc29sdmU6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZSBhcyAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkO1xuICAgICAgdGhpcy5yZWplY3QgPSByZWplY3QgYXMgKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdXIgQVBJIGludGVybmFscyBhcmUgbm90IHByb21pc2VpZmllZCBhbmQgY2Fubm90IGJlY2F1c2Ugb3VyIGNhbGxiYWNrIEFQSXMgaGF2ZSBzdWJ0bGUgZXhwZWN0YXRpb25zIGFyb3VuZFxuICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xuICAgKiBhbmQgcmV0dXJucyBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgd2hpY2ggd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgRGVmZXJyZWQncyBwcm9taXNlLlxuICAgKi9cbiAgd3JhcENhbGxiYWNrKFxuICAgIGNhbGxiYWNrPzogKGVycm9yPzogdW5rbm93biwgdmFsdWU/OiB1bmtub3duKSA9PiB2b2lkXG4gICk6IChlcnJvcjogdW5rbm93biwgdmFsdWU/OiB1bmtub3duKSA9PiB2b2lkIHtcbiAgICByZXR1cm4gKGVycm9yLCB2YWx1ZT8pID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBBdHRhY2hpbmcgbm9vcCBoYW5kbGVyIGp1c3QgaW4gY2FzZSBkZXZlbG9wZXIgd2Fzbid0IGV4cGVjdGluZ1xuICAgICAgICAvLyBwcm9taXNlc1xuICAgICAgICB0aGlzLnByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuXG4gICAgICAgIC8vIFNvbWUgb2Ygb3VyIGNhbGxiYWNrcyBkb24ndCBleHBlY3QgYSB2YWx1ZSBhbmQgb3VyIG93biB0ZXN0c1xuICAgICAgICAvLyBhc3NlcnQgdGhhdCB0aGUgcGFyYW1ldGVyIGxlbmd0aCBpcyAxXG4gICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nIH0gZnJvbSAnLi9jcnlwdCc7XG5cbi8vIEZpcmViYXNlIEF1dGggdG9rZW5zIGNvbnRhaW4gc25ha2VfY2FzZSBjbGFpbXMgZm9sbG93aW5nIHRoZSBKV1Qgc3RhbmRhcmQgLyBjb252ZW50aW9uLlxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5cbmV4cG9ydCB0eXBlIEZpcmViYXNlU2lnbkluUHJvdmlkZXIgPVxuICB8ICdjdXN0b20nXG4gIHwgJ2VtYWlsJ1xuICB8ICdwYXNzd29yZCdcbiAgfCAncGhvbmUnXG4gIHwgJ2Fub255bW91cydcbiAgfCAnZ29vZ2xlLmNvbSdcbiAgfCAnZmFjZWJvb2suY29tJ1xuICB8ICdnaXRodWIuY29tJ1xuICB8ICd0d2l0dGVyLmNvbSdcbiAgfCAnbWljcm9zb2Z0LmNvbSdcbiAgfCAnYXBwbGUuY29tJztcblxuaW50ZXJmYWNlIEZpcmViYXNlSWRUb2tlbiB7XG4gIC8vIEFsd2F5cyBzZXQgdG8gaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL1BST0pFQ1RfSURcbiAgaXNzOiBzdHJpbmc7XG5cbiAgLy8gQWx3YXlzIHNldCB0byBQUk9KRUNUX0lEXG4gIGF1ZDogc3RyaW5nO1xuXG4gIC8vIFRoZSB1c2VyJ3MgdW5pcXVlIElEXG4gIHN1Yjogc3RyaW5nO1xuXG4gIC8vIFRoZSB0b2tlbiBpc3N1ZSB0aW1lLCBpbiBzZWNvbmRzIHNpbmNlIGVwb2NoXG4gIGlhdDogbnVtYmVyO1xuXG4gIC8vIFRoZSB0b2tlbiBleHBpcnkgdGltZSwgbm9ybWFsbHkgJ2lhdCcgKyAzNjAwXG4gIGV4cDogbnVtYmVyO1xuXG4gIC8vIFRoZSB1c2VyJ3MgdW5pcXVlIElELiBNdXN0IGJlIGVxdWFsIHRvICdzdWInXG4gIHVzZXJfaWQ6IHN0cmluZztcblxuICAvLyBUaGUgdGltZSB0aGUgdXNlciBhdXRoZW50aWNhdGVkLCBub3JtYWxseSAnaWF0J1xuICBhdXRoX3RpbWU6IG51bWJlcjtcblxuICAvLyBUaGUgc2lnbiBpbiBwcm92aWRlciwgb25seSBzZXQgd2hlbiB0aGUgcHJvdmlkZXIgaXMgJ2Fub255bW91cydcbiAgcHJvdmlkZXJfaWQ/OiAnYW5vbnltb3VzJztcblxuICAvLyBUaGUgdXNlcidzIHByaW1hcnkgZW1haWxcbiAgZW1haWw/OiBzdHJpbmc7XG5cbiAgLy8gVGhlIHVzZXIncyBlbWFpbCB2ZXJpZmljYXRpb24gc3RhdHVzXG4gIGVtYWlsX3ZlcmlmaWVkPzogYm9vbGVhbjtcblxuICAvLyBUaGUgdXNlcidzIHByaW1hcnkgcGhvbmUgbnVtYmVyXG4gIHBob25lX251bWJlcj86IHN0cmluZztcblxuICAvLyBUaGUgdXNlcidzIGRpc3BsYXkgbmFtZVxuICBuYW1lPzogc3RyaW5nO1xuXG4gIC8vIFRoZSB1c2VyJ3MgcHJvZmlsZSBwaG90byBVUkxcbiAgcGljdHVyZT86IHN0cmluZztcblxuICAvLyBJbmZvcm1hdGlvbiBvbiBhbGwgaWRlbnRpdGllcyBsaW5rZWQgdG8gdGhpcyB1c2VyXG4gIGZpcmViYXNlOiB7XG4gICAgLy8gVGhlIHByaW1hcnkgc2lnbi1pbiBwcm92aWRlclxuICAgIHNpZ25faW5fcHJvdmlkZXI6IEZpcmViYXNlU2lnbkluUHJvdmlkZXI7XG5cbiAgICAvLyBBIG1hcCBvZiBwcm92aWRlcnMgdG8gdGhlIHVzZXIncyBsaXN0IG9mIHVuaXF1ZSBpZGVudGlmaWVycyBmcm9tXG4gICAgLy8gZWFjaCBwcm92aWRlclxuICAgIGlkZW50aXRpZXM/OiB7IFtwcm92aWRlciBpbiBGaXJlYmFzZVNpZ25JblByb3ZpZGVyXT86IHN0cmluZ1tdIH07XG4gIH07XG5cbiAgLy8gQ3VzdG9tIGNsYWltcyBzZXQgYnkgdGhlIGRldmVsb3BlclxuICBbY2xhaW06IHN0cmluZ106IHVua25vd247XG5cbiAgdWlkPzogbmV2ZXI7IC8vIFRyeSB0byBjYXRjaCBhIGNvbW1vbiBtaXN0YWtlIG9mIFwidWlkXCIgKHNob3VsZCBiZSBcInN1YlwiIGluc3RlYWQpLlxufVxuXG5leHBvcnQgdHlwZSBFbXVsYXRvck1vY2tUb2tlbk9wdGlvbnMgPSAoeyB1c2VyX2lkOiBzdHJpbmcgfSB8IHsgc3ViOiBzdHJpbmcgfSkgJlxuICBQYXJ0aWFsPEZpcmViYXNlSWRUb2tlbj47XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKFxuICB0b2tlbjogRW11bGF0b3JNb2NrVG9rZW5PcHRpb25zLFxuICBwcm9qZWN0SWQ/OiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIGlmICh0b2tlbi51aWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnVGhlIFwidWlkXCIgZmllbGQgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBieSBtb2NrVXNlclRva2VuLiBQbGVhc2UgdXNlIFwic3ViXCIgaW5zdGVhZCBmb3IgRmlyZWJhc2UgQXV0aCBVc2VyIElELidcbiAgICApO1xuICB9XG4gIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxuICBjb25zdCBoZWFkZXIgPSB7XG4gICAgYWxnOiAnbm9uZScsXG4gICAgdHlwZTogJ0pXVCdcbiAgfTtcblxuICBjb25zdCBwcm9qZWN0ID0gcHJvamVjdElkIHx8ICdkZW1vLXByb2plY3QnO1xuICBjb25zdCBpYXQgPSB0b2tlbi5pYXQgfHwgMDtcbiAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XG4gIGlmICghc3ViKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibW9ja1VzZXJUb2tlbiBtdXN0IGNvbnRhaW4gJ3N1Yicgb3IgJ3VzZXJfaWQnIGZpZWxkIVwiKTtcbiAgfVxuXG4gIGNvbnN0IHBheWxvYWQ6IEZpcmViYXNlSWRUb2tlbiA9IHtcbiAgICAvLyBTZXQgYWxsIHJlcXVpcmVkIGZpZWxkcyB0byBkZWNlbnQgZGVmYXVsdHNcbiAgICBpc3M6IGBodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vJHtwcm9qZWN0fWAsXG4gICAgYXVkOiBwcm9qZWN0LFxuICAgIGlhdCxcbiAgICBleHA6IGlhdCArIDM2MDAsXG4gICAgYXV0aF90aW1lOiBpYXQsXG4gICAgc3ViLFxuICAgIHVzZXJfaWQ6IHN1YixcbiAgICBmaXJlYmFzZToge1xuICAgICAgc2lnbl9pbl9wcm92aWRlcjogJ2N1c3RvbScsXG4gICAgICBpZGVudGl0aWVzOiB7fVxuICAgIH0sXG5cbiAgICAvLyBPdmVycmlkZSB3aXRoIHVzZXIgb3B0aW9uc1xuICAgIC4uLnRva2VuXG4gIH07XG5cbiAgLy8gVW5zZWN1cmVkIEpXVHMgdXNlIHRoZSBlbXB0eSBzdHJpbmcgYXMgYSBzaWduYXR1cmUuXG4gIGNvbnN0IHNpZ25hdHVyZSA9ICcnO1xuICByZXR1cm4gW1xuICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxuICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcbiAgICBzaWduYXR1cmVcbiAgXS5qb2luKCcuJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDT05TVEFOVFMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0cyB9IGZyb20gJy4vZGVmYXVsdHMnO1xuXG4vKipcbiAqIFJldHVybnMgbmF2aWdhdG9yLnVzZXJBZ2VudCBzdHJpbmcgb3IgJycgaWYgaXQncyBub3QgZGVmaW5lZC5cbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVBKCk6IHN0cmluZyB7XG4gIGlmIChcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBuYXZpZ2F0b3JbJ3VzZXJBZ2VudCddID09PSAnc3RyaW5nJ1xuICApIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yWyd1c2VyQWdlbnQnXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlY3QgQ29yZG92YSAvIFBob25lR2FwIC8gSW9uaWMgZnJhbWV3b3JrcyBvbiBhIG1vYmlsZSBkZXZpY2UuXG4gKlxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcbiAqIGluIHRoZSBSaXBwbGUgZW11bGF0b3IpIG5vciBDb3Jkb3ZhIGBvbkRldmljZVJlYWR5YCwgd2hpY2ggd291bGQgbm9ybWFsbHlcbiAqIHdhaXQgZm9yIGEgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZUNvcmRvdmEoKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBAdHMtaWdub3JlIFNldHRpbmcgdXAgYW4gYnJvYWRseSBhcHBsaWNhYmxlIGluZGV4IHNpZ25hdHVyZSBmb3IgV2luZG93XG4gICAgLy8ganVzdCB0byBkZWFsIHdpdGggdGhpcyBjYXNlIHdvdWxkIHByb2JhYmx5IGJlIGEgYmFkIGlkZWEuXG4gICAgISEod2luZG93Wydjb3Jkb3ZhJ10gfHwgd2luZG93WydwaG9uZWdhcCddIHx8IHdpbmRvd1snUGhvbmVHYXAnXSkgJiZcbiAgICAvaW9zfGlwaG9uZXxpcG9kfGlwYWR8YW5kcm9pZHxibGFja2JlcnJ5fGllbW9iaWxlL2kudGVzdChnZXRVQSgpKVxuICApO1xufVxuXG4vKipcbiAqIERldGVjdCBOb2RlLmpzLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cbiAqL1xuLy8gTm9kZSBkZXRlY3Rpb24gbG9naWMgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2lsaWFrYW4vZGV0ZWN0LW5vZGUvXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKCk6IGJvb2xlYW4ge1xuICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gZ2V0RGVmYXVsdHMoKT8uZm9yY2VFbnZpcm9ubWVudDtcbiAgaWYgKGZvcmNlRW52aXJvbm1lbnQgPT09ICdub2RlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGZvcmNlRW52aXJvbm1lbnQgPT09ICdicm93c2VyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJ1xuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZjtcbn1cblxuLyoqXG4gKiBEZXRlY3QgYnJvd3NlciBleHRlbnNpb25zIChDaHJvbWUgYW5kIEZpcmVmb3ggYXQgbGVhc3QpLlxuICovXG5pbnRlcmZhY2UgQnJvd3NlclJ1bnRpbWUge1xuICBpZD86IHVua25vd247XG59XG5kZWNsYXJlIGNvbnN0IGNocm9tZTogeyBydW50aW1lPzogQnJvd3NlclJ1bnRpbWUgfTtcbmRlY2xhcmUgY29uc3QgYnJvd3NlcjogeyBydW50aW1lPzogQnJvd3NlclJ1bnRpbWUgfTtcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJFeHRlbnNpb24oKTogYm9vbGVhbiB7XG4gIGNvbnN0IHJ1bnRpbWUgPVxuICAgIHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXG4gICAgICA/IGNocm9tZS5ydW50aW1lXG4gICAgICA6IHR5cGVvZiBicm93c2VyID09PSAnb2JqZWN0J1xuICAgICAgPyBicm93c2VyLnJ1bnRpbWVcbiAgICAgIDogdW5kZWZpbmVkO1xuICByZXR1cm4gdHlwZW9mIHJ1bnRpbWUgPT09ICdvYmplY3QnICYmIHJ1bnRpbWUuaWQgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBEZXRlY3QgUmVhY3QgTmF0aXZlLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yWydwcm9kdWN0J10gPT09ICdSZWFjdE5hdGl2ZSdcbiAgKTtcbn1cblxuLyoqIERldGVjdHMgRWxlY3Ryb24gYXBwcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZWN0cm9uKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdFbGVjdHJvbi8nKSA+PSAwO1xufVxuXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lFKCk6IGJvb2xlYW4ge1xuICBjb25zdCB1YSA9IGdldFVBKCk7XG4gIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xufVxuXG4vKiogRGV0ZWN0cyBVbml2ZXJzYWwgV2luZG93cyBQbGF0Zm9ybSBhcHBzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVVdQKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdNU0FwcEhvc3QvJykgPj0gMDtcbn1cblxuLyoqXG4gKiBEZXRlY3Qgd2hldGhlciB0aGUgY3VycmVudCBTREsgYnVpbGQgaXMgdGhlIE5vZGUgdmVyc2lvbi5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVTZGsoKTogYm9vbGVhbiB7XG4gIHJldHVybiBDT05TVEFOVFMuTk9ERV9DTElFTlQgPT09IHRydWUgfHwgQ09OU1RBTlRTLk5PREVfQURNSU4gPT09IHRydWU7XG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2FmYXJpKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgICFpc05vZGUoKSAmJlxuICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ1NhZmFyaScpICYmXG4gICAgIW5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ0Nocm9tZScpXG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgY2hlY2tzIGlmIGluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgY3VycmVudCBicm93c2VyL3NlcnZpY2Ugd29ya2VyIGNvbnRleHRcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0luZGV4ZWREQkF2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIGluZGV4ZWREQiA9PT0gJ29iamVjdCc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XG4gKiBpZiBlcnJvcnMgb2NjdXIgZHVyaW5nIHRoZSBkYXRhYmFzZSBvcGVuIG9wZXJhdGlvbi5cbiAqXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XG4gKiBwcml2YXRlIGJyb3dzaW5nKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IHByZUV4aXN0OiBib29sZWFuID0gdHJ1ZTtcbiAgICAgIGNvbnN0IERCX0NIRUNLX05BTUUgPVxuICAgICAgICAndmFsaWRhdGUtYnJvd3Nlci1jb250ZXh0LWZvci1pbmRleGVkZGItYW5hbHl0aWNzLW1vZHVsZSc7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xuICAgICAgICAvLyBkZWxldGUgZGF0YWJhc2Ugb25seSB3aGVuIGl0IGRvZXNuJ3QgcHJlLWV4aXN0XG4gICAgICAgIGlmICghcHJlRXhpc3QpIHtcbiAgICAgICAgICBzZWxmLmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShEQl9DSEVDS19OQU1FKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfTtcbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKCkgPT4ge1xuICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcj8ubWVzc2FnZSB8fCAnJyk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICpcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU3RhbmRhcmRpemVkIEZpcmViYXNlIEVycm9yLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqICAgLy8gVHlwZXNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMgZm9yIHR5cGUtc2FmZSBjb2Rlc1xuICogICB0eXBlIEVyciA9XG4gKiAgICAgJ3Vua25vd24nIHxcbiAqICAgICAnb2JqZWN0LW5vdC1mb3VuZCdcbiAqICAgICA7XG4gKlxuICogICAvLyBDbG9zdXJlIGVudW0gZm9yIHR5cGUtc2FmZSBlcnJvciBjb2Rlc1xuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XG4gKiAgIHZhciBFcnIgPSB7XG4gKiAgICAgVU5LTk9XTjogJ3Vua25vd24nLFxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcbiAqICAgfVxuICpcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcbiAqICAgICAnZ2VuZXJpYy1lcnJvcic6IFwiVW5rbm93biBlcnJvclwiLFxuICogICAgICdmaWxlLW5vdC1mb3VuZCc6IFwiQ291bGQgbm90IGZpbmQgZmlsZTogeyRmaWxlfVwiLFxuICogICB9O1xuICpcbiAqICAgLy8gVHlwZS1zYWZlIGZ1bmN0aW9uIC0gbXVzdCBwYXNzIGEgdmFsaWQgZXJyb3IgY29kZSBhcyBwYXJhbS5cbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xuICpcbiAqICAgLi4uXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XG4gKiAgIC4uLlxuICogICB0aHJvdyBlcnJvci5jcmVhdGUoRXJyLkZJTEVfTk9UX0ZPVU5ELCB7J2ZpbGUnOiBmaWxlTmFtZX0pO1xuICogICAuLi5cbiAqICAgLy8gU2VydmljZTogQ291bGQgbm90IGZpbGUgZmlsZTogZm9vLnR4dCAoc2VydmljZS9maWxlLW5vdC1mb3VuZCkuXG4gKlxuICogICBjYXRjaCAoZSkge1xuICogICAgIGFzc2VydChlLm1lc3NhZ2UgPT09IFwiQ291bGQgbm90IGZpbmQgZmlsZTogZm9vLnR4dC5cIik7XG4gKiAgICAgaWYgKChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlID09PSAnc2VydmljZS9maWxlLW5vdC1mb3VuZCcpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHJlYWQgZmlsZTogXCIgKyBlWydmaWxlJ10pO1xuICogICAgIH1cbiAqICAgfVxuICovXG5cbmV4cG9ydCB0eXBlIEVycm9yTWFwPEVycm9yQ29kZSBleHRlbmRzIHN0cmluZz4gPSB7XG4gIHJlYWRvbmx5IFtLIGluIEVycm9yQ29kZV06IHN0cmluZztcbn07XG5cbmNvbnN0IEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaW5nTGlrZSB7XG4gIHRvU3RyaW5nKCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckRhdGEge1xuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufVxuXG4vLyBCYXNlZCBvbiBjb2RlIGZyb206XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogVGhlIGN1c3RvbSBuYW1lIGZvciBhbGwgRmlyZWJhc2VFcnJvcnMuICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IEVSUk9SX05BTUU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRoZSBlcnJvciBjb2RlIGZvciB0aGlzIGVycm9yLiAqL1xuICAgIHJlYWRvbmx5IGNvZGU6IHN0cmluZyxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgLyoqIEN1c3RvbSBkYXRhIGZvciB0aGlzIGVycm9yLiAqL1xuICAgIHB1YmxpYyBjdXN0b21EYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG5cbiAgICAvLyBGaXggRm9yIEVTNVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcblxuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxuICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JGYWN0b3J5PFxuICBFcnJvckNvZGUgZXh0ZW5kcyBzdHJpbmcsXG4gIEVycm9yUGFyYW1zIGV4dGVuZHMgeyByZWFkb25seSBbSyBpbiBFcnJvckNvZGVdPzogRXJyb3JEYXRhIH0gPSB7fVxuPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVycm9yczogRXJyb3JNYXA8RXJyb3JDb2RlPlxuICApIHt9XG5cbiAgY3JlYXRlPEsgZXh0ZW5kcyBFcnJvckNvZGU+KFxuICAgIGNvZGU6IEssXG4gICAgLi4uZGF0YTogSyBleHRlbmRzIGtleW9mIEVycm9yUGFyYW1zID8gW0Vycm9yUGFyYW1zW0tdXSA6IFtdXG4gICk6IEZpcmViYXNlRXJyb3Ige1xuICAgIGNvbnN0IGN1c3RvbURhdGEgPSAoZGF0YVswXSBhcyBFcnJvckRhdGEpIHx8IHt9O1xuICAgIGNvbnN0IGZ1bGxDb2RlID0gYCR7dGhpcy5zZXJ2aWNlfS8ke2NvZGV9YDtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRlbXBsYXRlID8gcmVwbGFjZVRlbXBsYXRlKHRlbXBsYXRlLCBjdXN0b21EYXRhKSA6ICdFcnJvcic7XG4gICAgLy8gU2VydmljZSBOYW1lOiBFcnJvciBtZXNzYWdlIChzZXJ2aWNlL2NvZGUpLlxuICAgIGNvbnN0IGZ1bGxNZXNzYWdlID0gYCR7dGhpcy5zZXJ2aWNlTmFtZX06ICR7bWVzc2FnZX0gKCR7ZnVsbENvZGV9KS5gO1xuXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZTogc3RyaW5nLCBkYXRhOiBFcnJvckRhdGEpOiBzdHJpbmcge1xuICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZShQQVRURVJOLCAoXywga2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgPyBTdHJpbmcodmFsdWUpIDogYDwke2tleX0/PmA7XG4gIH0pO1xufVxuXG5jb25zdCBQQVRURVJOID0gL1xce1xcJChbXn1dKyl9L2c7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxuICovXG5leHBvcnQgZnVuY3Rpb24ganNvbkV2YWwoc3RyOiBzdHJpbmcpOiB1bmtub3duIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0geyp9IGRhdGEgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoZGF0YTogdW5rbm93bik6IHN0cmluZyB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJhc2U2NERlY29kZSB9IGZyb20gJy4vY3J5cHQnO1xuaW1wb3J0IHsganNvbkV2YWwgfSBmcm9tICcuL2pzb24nO1xuXG5pbnRlcmZhY2UgQ2xhaW1zIHtcbiAgW2tleTogc3RyaW5nXToge307XG59XG5cbmludGVyZmFjZSBEZWNvZGVkVG9rZW4ge1xuICBoZWFkZXI6IG9iamVjdDtcbiAgY2xhaW1zOiBDbGFpbXM7XG4gIGRhdGE6IG9iamVjdDtcbiAgc2lnbmF0dXJlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXG4gKlxuICogTm90ZXM6XG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlID0gZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpOiBEZWNvZGVkVG9rZW4ge1xuICBsZXQgaGVhZGVyID0ge30sXG4gICAgY2xhaW1zOiBDbGFpbXMgPSB7fSxcbiAgICBkYXRhID0ge30sXG4gICAgc2lnbmF0dXJlID0gJyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XG4gICAgaGVhZGVyID0ganNvbkV2YWwoYmFzZTY0RGVjb2RlKHBhcnRzWzBdKSB8fCAnJykgYXMgb2JqZWN0O1xuICAgIGNsYWltcyA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1sxXSkgfHwgJycpIGFzIENsYWltcztcbiAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcbiAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XG4gICAgZGVsZXRlIGNsYWltc1snZCddO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiB7XG4gICAgaGVhZGVyLFxuICAgIGNsYWltcyxcbiAgICBkYXRhLFxuICAgIHNpZ25hdHVyZVxuICB9O1xufTtcblxuaW50ZXJmYWNlIERlY29kZWRUb2tlbiB7XG4gIGhlYWRlcjogb2JqZWN0O1xuICBjbGFpbXM6IENsYWltcztcbiAgZGF0YTogb2JqZWN0O1xuICBzaWduYXR1cmU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIHRpbWUtYmFzZWQgY2xhaW1zLiBXaWxsIHJldHVybiB0cnVlIGlmIHRoZVxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cbiAqXG4gKiBOb3RlczpcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRUaW1lc3RhbXAgPSBmdW5jdGlvbiAodG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBjbGFpbXM6IENsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xuICBjb25zdCBub3c6IG51bWJlciA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgbGV0IHZhbGlkU2luY2U6IG51bWJlciA9IDAsXG4gICAgdmFsaWRVbnRpbDogbnVtYmVyID0gMDtcblxuICBpZiAodHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCduYmYnKSkge1xuICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ10gYXMgbnVtYmVyO1xuICAgIH0gZWxzZSBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKSkge1xuICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J10gYXMgbnVtYmVyO1xuICAgIH1cblxuICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XG4gICAgICB2YWxpZFVudGlsID0gY2xhaW1zWydleHAnXSBhcyBudW1iZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRva2VuIHdpbGwgZXhwaXJlIGFmdGVyIDI0aCBieSBkZWZhdWx0XG4gICAgICB2YWxpZFVudGlsID0gdmFsaWRTaW5jZSArIDg2NDAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgISFub3cgJiZcbiAgICAhIXZhbGlkU2luY2UgJiZcbiAgICAhIXZhbGlkVW50aWwgJiZcbiAgICBub3cgPj0gdmFsaWRTaW5jZSAmJlxuICAgIG5vdyA8PSB2YWxpZFVudGlsXG4gICk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgcmV0dXJucyBpdHMgaXNzdWVkIGF0IHRpbWUgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlLlxuICpcbiAqIE5vdGVzOlxuICogLSBNYXkgcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgaXNzdWVkQXRUaW1lID0gZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpOiBudW1iZXIgfCBudWxsIHtcbiAgY29uc3QgY2xhaW1zOiBDbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcbiAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcbiAgICByZXR1cm4gY2xhaW1zWydpYXQnXSBhcyBudW1iZXI7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXG4gKlxuICogTm90ZXM6XG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkRm9ybWF0ID0gZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksXG4gICAgY2xhaW1zID0gZGVjb2RlZC5jbGFpbXM7XG5cbiAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XG59O1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHBlZXIgaW50byBhbiBhdXRoIHRva2VuIGFuZCBkZXRlcm1pbmUgaWYgaXQncyBhbiBhZG1pbiBhdXRoIHRva2VuIGJ5IGxvb2tpbmcgYXQgdGhlIGNsYWltcyBwb3J0aW9uLlxuICpcbiAqIE5vdGVzOlxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgaXNBZG1pbiA9IGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGNsYWltczogQ2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XG4gIHJldHVybiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXNbJ2FkbWluJ10gPT09IHRydWU7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlR2V0PFQgZXh0ZW5kcyBvYmplY3QsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgb2JqOiBULFxuICBrZXk6IEtcbik6IFRbS10gfCB1bmRlZmluZWQge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KG9iajogb2JqZWN0KTogb2JqIGlzIHt9IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXA8SyBleHRlbmRzIHN0cmluZywgViwgVT4oXG4gIG9iajogeyBba2V5IGluIEtdOiBWIH0sXG4gIGZuOiAodmFsdWU6IFYsIGtleTogSywgb2JqOiB7IFtrZXkgaW4gS106IFYgfSkgPT4gVSxcbiAgY29udGV4dE9iaj86IHVua25vd25cbik6IHsgW2tleSBpbiBLXTogVSB9IHtcbiAgY29uc3QgcmVzOiBQYXJ0aWFsPHsgW2tleSBpbiBLXTogVSB9PiA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBmbi5jYWxsKGNvbnRleHRPYmosIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMgYXMgeyBba2V5IGluIEtdOiBVIH07XG59XG5cbi8qKlxuICogRGVlcCBlcXVhbCB0d28gb2JqZWN0cy4gU3VwcG9ydCBBcnJheXMgYW5kIE9iamVjdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYTogb2JqZWN0LCBiOiBvYmplY3QpOiBib29sZWFuIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIGNvbnN0IGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG4gIGZvciAoY29uc3QgayBvZiBhS2V5cykge1xuICAgIGlmICghYktleXMuaW5jbHVkZXMoaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBhUHJvcCA9IChhIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtrXTtcbiAgICBjb25zdCBiUHJvcCA9IChiIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtrXTtcbiAgICBpZiAoaXNPYmplY3QoYVByb3ApICYmIGlzT2JqZWN0KGJQcm9wKSkge1xuICAgICAgaWYgKCFkZWVwRXF1YWwoYVByb3AsIGJQcm9wKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhUHJvcCAhPT0gYlByb3ApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGsgb2YgYktleXMpIHtcbiAgICBpZiAoIWFLZXlzLmluY2x1ZGVzKGspKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh0aGluZzogdW5rbm93bik6IHRoaW5nIGlzIG9iamVjdCB7XG4gIHJldHVybiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICcuL2RlZmVycmVkJztcblxuLyoqXG4gKiBSZWplY3RzIGlmIHRoZSBnaXZlbiBwcm9taXNlIGRvZXNuJ3QgcmVzb2x2ZSBpbiB0aW1lSW5NUyBtaWxsaXNlY29uZHMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dDxUPihcbiAgcHJvbWlzZTogUHJvbWlzZTxUPixcbiAgdGltZUluTVMgPSAyMDAwXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgZGVmZXJyZWRQcm9taXNlID0gbmV3IERlZmVycmVkPFQ+KCk7XG4gIHNldFRpbWVvdXQoKCkgPT4gZGVmZXJyZWRQcm9taXNlLnJlamVjdCgndGltZW91dCEnKSwgdGltZUluTVMpO1xuICBwcm9taXNlLnRoZW4oZGVmZXJyZWRQcm9taXNlLnJlc29sdmUsIGRlZmVycmVkUHJvbWlzZS5yZWplY3QpO1xuICByZXR1cm4gZGVmZXJyZWRQcm9taXNlLnByb21pc2U7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxuICogTm90ZTogWW91IG11c3QgcHJlcGVuZCBpdCB3aXRoID8gd2hlbiBhZGRpbmcgaXQgdG8gYSBVUkwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeXN0cmluZyhxdWVyeXN0cmluZ1BhcmFtczoge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXI7XG59KTogc3RyaW5nIHtcbiAgY29uc3QgcGFyYW1zID0gW107XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUuZm9yRWFjaChhcnJheVZhbCA9PiB7XG4gICAgICAgIHBhcmFtcy5wdXNoKFxuICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJhbXMubGVuZ3RoID8gJyYnICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBxdWVyeXN0cmluZyAoZS5nLiA/YXJnPXZhbCZhcmcyPXZhbDIpIGludG8gYSBwYXJhbXMgb2JqZWN0XG4gKiAoZS5nLiB7YXJnOiAndmFsJywgYXJnMjogJ3ZhbDInfSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5c3RyaW5nRGVjb2RlKHF1ZXJ5c3RyaW5nOiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgY29uc3Qgb2JqOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gIGNvbnN0IHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcblxuICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSB0b2tlbi5zcGxpdCgnPScpO1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChrZXkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBFeHRyYWN0IHRoZSBxdWVyeSBzdHJpbmcgcGFydCBvZiBhIFVSTCwgaW5jbHVkaW5nIHRoZSBsZWFkaW5nIHF1ZXN0aW9uIG1hcmsgKGlmIHByZXNlbnQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgcXVlcnlTdGFydCA9IHVybC5pbmRleE9mKCc/Jyk7XG4gIGlmICghcXVlcnlTdGFydCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBmcmFnbWVudFN0YXJ0ID0gdXJsLmluZGV4T2YoJyMnLCBxdWVyeVN0YXJ0KTtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoXG4gICAgcXVlcnlTdGFydCxcbiAgICBmcmFnbWVudFN0YXJ0ID4gMCA/IGZyYWdtZW50U3RhcnQgOiB1bmRlZmluZWRcbiAgKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2guXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXG4gKlxuICogVXNhZ2U6XG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcbiAqICAgc2hhMS51cGRhdGUoYnl0ZXMpO1xuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XG4gKlxuICogUGVyZm9ybWFuY2U6XG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcbiAqXG4gKi9cblxuLyoqXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXG4gKlxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBmaW5hbFxuICogQHN0cnVjdFxuICovXG5leHBvcnQgY2xhc3MgU2hhMSB7XG4gIC8qKlxuICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xuICAgKiBmdW5jdGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgY2hhaW5fOiBudW1iZXJbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBBIGJ1ZmZlciBob2xkaW5nIHRoZSBwYXJ0aWFsbHkgY29tcHV0ZWQgaGFzaCByZXN1bHQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIGJ1Zl86IG51bWJlcltdID0gW107XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIDgwIGJ5dGVzLCBlYWNoIGEgcGFydCBvZiB0aGUgbWVzc2FnZSB0byBiZSBoYXNoZWQuICBSZWZlcnJlZCB0b1xuICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgV186IG51bWJlcltdID0gW107XG5cbiAgLyoqXG4gICAqIENvbnRhaW5zIGRhdGEgbmVlZGVkIHRvIHBhZCBtZXNzYWdlcyBsZXNzIHRoYW4gNjQgYnl0ZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIHBhZF86IG51bWJlcltdID0gW107XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAqL1xuICBwcml2YXRlIGluYnVmXzogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHByaXZhdGUgdG90YWxfOiBudW1iZXIgPSAwO1xuXG4gIGJsb2NrU2l6ZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcblxuICAgIHRoaXMucGFkX1swXSA9IDEyODtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuYmxvY2tTaXplOyArK2kpIHtcbiAgICAgIHRoaXMucGFkX1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xuICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcbiAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XG4gICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xuICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcblxuICAgIHRoaXMuaW5idWZfID0gMDtcbiAgICB0aGlzLnRvdGFsXyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gYnVmIEJsb2NrIHRvIGNvbXByZXNzLlxuICAgKiBAcGFyYW0gb2Zmc2V0IE9mZnNldCBvZiB0aGUgYmxvY2sgaW4gdGhlIGJ1ZmZlci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbXByZXNzXyhidWY6IG51bWJlcltdIHwgVWludDhBcnJheSB8IHN0cmluZywgb2Zmc2V0PzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgY29uc3QgVyA9IHRoaXMuV187XG5cbiAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xuICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcbiAgICAgICAgLy8gaGF2ZSBhIGJ1ZyB0aGF0IHR1cm5zIHRoZSBwb3N0LWluY3JlbWVudCArKyBvcGVyYXRvciBpbnRvIHByZS1pbmNyZW1lbnRcbiAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcbiAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcbiAgICAgICAgLy8gb2YgcG9zdC1pbmNyZW1lbnQgKysgaW4gd2hpY2ggdGhlIHJlc3VsdCB2YWx1ZSBpcyB1c2VkLiAgV2UgY2FuIHJldmVydFxuICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXG4gICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcbiAgICAgICAgLy8gbW9zdCBjbGllbnRzIGhhdmUgYmVlbiB1cGRhdGVkLlxuICAgICAgICBXW2ldID1cbiAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0KSA8PCAyNCkgfFxuICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxuICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAyKSA8PCA4KSB8XG4gICAgICAgICAgYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMyk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgV1tpXSA9XG4gICAgICAgICAgKGJ1ZltvZmZzZXRdIDw8IDI0KSB8XG4gICAgICAgICAgKGJ1ZltvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgICAgIGJ1ZltvZmZzZXQgKyAzXTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXhwYW5kIHRvIDgwIHdvcmRzXG4gICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xuICAgICAgY29uc3QgdCA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl07XG4gICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xuICAgIH1cblxuICAgIGxldCBhID0gdGhpcy5jaGFpbl9bMF07XG4gICAgbGV0IGIgPSB0aGlzLmNoYWluX1sxXTtcbiAgICBsZXQgYyA9IHRoaXMuY2hhaW5fWzJdO1xuICAgIGxldCBkID0gdGhpcy5jaGFpbl9bM107XG4gICAgbGV0IGUgPSB0aGlzLmNoYWluX1s0XTtcbiAgICBsZXQgZiwgaztcblxuICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcbiAgICAgIGlmIChpIDwgNDApIHtcbiAgICAgICAgaWYgKGkgPCAyMCkge1xuICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcbiAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmID0gYiBeIGMgXiBkO1xuICAgICAgICAgIGsgPSAweDZlZDllYmExO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaSA8IDYwKSB7XG4gICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xuICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XG4gICAgICAgICAgayA9IDB4Y2E2MmMxZDY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdCA9ICgoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgayArIFdbaV0pICYgMHhmZmZmZmZmZjtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gKChiIDw8IDMwKSB8IChiID4+PiAyKSkgJiAweGZmZmZmZmZmO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gdDtcbiAgICB9XG5cbiAgICB0aGlzLmNoYWluX1swXSA9ICh0aGlzLmNoYWluX1swXSArIGEpICYgMHhmZmZmZmZmZjtcbiAgICB0aGlzLmNoYWluX1sxXSA9ICh0aGlzLmNoYWluX1sxXSArIGIpICYgMHhmZmZmZmZmZjtcbiAgICB0aGlzLmNoYWluX1syXSA9ICh0aGlzLmNoYWluX1syXSArIGMpICYgMHhmZmZmZmZmZjtcbiAgICB0aGlzLmNoYWluX1szXSA9ICh0aGlzLmNoYWluX1szXSArIGQpICYgMHhmZmZmZmZmZjtcbiAgICB0aGlzLmNoYWluX1s0XSA9ICh0aGlzLmNoYWluX1s0XSArIGUpICYgMHhmZmZmZmZmZjtcbiAgfVxuXG4gIHVwZGF0ZShieXRlcz86IG51bWJlcltdIHwgVWludDhBcnJheSB8IHN0cmluZywgbGVuZ3RoPzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcbiAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0IGxlbmd0aE1pbnVzQmxvY2sgPSBsZW5ndGggLSB0aGlzLmJsb2NrU2l6ZTtcbiAgICBsZXQgbiA9IDA7XG4gICAgLy8gVXNpbmcgbG9jYWwgaW5zdGVhZCBvZiBtZW1iZXIgdmFyaWFibGVzIGdpdmVzIH41JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYuXG4gICAgY29uc3QgYnVmID0gdGhpcy5idWZfO1xuICAgIGxldCBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xuXG4gICAgLy8gVGhlIG91dGVyIHdoaWxlIGxvb3Agc2hvdWxkIGV4ZWN1dGUgYXQgbW9zdCB0d2ljZS5cbiAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xuICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vIGRhdGEgaW4gdGhlIGJsb2NrIHRvIHRvcCB1cCwgd2UgY2FuIGRpcmVjdGx5IHByb2Nlc3MgdGhlXG4gICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxuICAgICAgLy8gc3BlZWR1cCBvbiBDaHJvbWUgMjMgYW5kIH4xNSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LCBidXQgcmVxdWlyZXMgdGhhdFxuICAgICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxuICAgICAgaWYgKGluYnVmID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcbiAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XG4gICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xuICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlcy5jaGFyQ29kZUF0KG4pO1xuICAgICAgICAgICsraW5idWY7XG4gICAgICAgICAgKytuO1xuICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XG4gICAgICAgICAgICBpbmJ1ZiA9IDA7XG4gICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzW25dO1xuICAgICAgICAgICsraW5idWY7XG4gICAgICAgICAgKytuO1xuICAgICAgICAgIGlmIChpbmJ1ZiA9PT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XG4gICAgICAgICAgICBpbmJ1ZiA9IDA7XG4gICAgICAgICAgICAvLyBKdW1wIHRvIHRoZSBvdXRlciBsb29wIHNvIHdlIHVzZSB0aGUgZnVsbC1ibG9jayBvcHRpbWl6YXRpb24uXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmluYnVmXyA9IGluYnVmO1xuICAgIHRoaXMudG90YWxfICs9IGxlbmd0aDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZGlnZXN0KCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBkaWdlc3Q6IG51bWJlcltdID0gW107XG4gICAgbGV0IHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcblxuICAgIC8vIEFkZCBwYWQgMHg4MCAweDAwKi5cbiAgICBpZiAodGhpcy5pbmJ1Zl8gPCA1Nikge1xuICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCB0aGlzLmJsb2NrU2l6ZSAtICh0aGlzLmluYnVmXyAtIDU2KSk7XG4gICAgfVxuXG4gICAgLy8gQWRkICMgYml0cy5cbiAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcbiAgICAgIHRoaXMuYnVmX1tpXSA9IHRvdGFsQml0cyAmIDI1NTtcbiAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcbiAgICB9XG5cbiAgICB0aGlzLmNvbXByZXNzXyh0aGlzLmJ1Zl8pO1xuXG4gICAgbGV0IG4gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcbiAgICAgICAgKytuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlnZXN0O1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IHR5cGUgTmV4dEZuPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgRXJyb3JGbiA9IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBDb21wbGV0ZUZuID0gKCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlcjxUPiB7XG4gIC8vIENhbGxlZCBvbmNlIGZvciBlYWNoIHZhbHVlIGluIGEgc3RyZWFtIG9mIHZhbHVlcy5cbiAgbmV4dDogTmV4dEZuPFQ+O1xuXG4gIC8vIEEgc3RyZWFtIHRlcm1pbmF0ZXMgYnkgYSBzaW5nbGUgY2FsbCB0byBFSVRIRVIgZXJyb3IoKSBvciBjb21wbGV0ZSgpLlxuICBlcnJvcjogRXJyb3JGbjtcblxuICAvLyBObyBldmVudHMgd2lsbCBiZSBzZW50IHRvIG5leHQoKSBvbmNlIGNvbXBsZXRlKCkgaXMgY2FsbGVkLlxuICBjb21wbGV0ZTogQ29tcGxldGVGbjtcbn1cblxuZXhwb3J0IHR5cGUgUGFydGlhbE9ic2VydmVyPFQ+ID0gUGFydGlhbDxPYnNlcnZlcjxUPj47XG5cbi8vIFRPRE86IFN1cHBvcnQgYWxzbyBVbnN1YnNjcmliZS51bnN1YnNjcmliZT9cbmV4cG9ydCB0eXBlIFVuc3Vic2NyaWJlID0gKCkgPT4gdm9pZDtcblxuLyoqXG4gKiBUaGUgU3Vic2NyaWJlIGludGVyZmFjZSBoYXMgdHdvIGZvcm1zIC0gcGFzc2luZyB0aGUgaW5saW5lIGZ1bmN0aW9uXG4gKiBjYWxsYmFja3MsIG9yIGEgb2JqZWN0IGludGVyZmFjZSB3aXRoIGNhbGxiYWNrIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJlPFQ+IHtcbiAgKG5leHQ/OiBOZXh0Rm48VD4sIGVycm9yPzogRXJyb3JGbiwgY29tcGxldGU/OiBDb21wbGV0ZUZuKTogVW5zdWJzY3JpYmU7XG4gIChvYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFQ+KTogVW5zdWJzY3JpYmU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZTxUPiB7XG4gIC8vIFN1YnNjcmliZSBtZXRob2RcbiAgc3Vic2NyaWJlOiBTdWJzY3JpYmU8VD47XG59XG5cbmV4cG9ydCB0eXBlIEV4ZWN1dG9yPFQ+ID0gKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZDtcblxuLyoqXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXG4gKiBUaGVuYWJsZSkuXG4gKlxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXG4gKiAgICAgYXMgYSBwcm94eS5cbiAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZTxUPihcbiAgZXhlY3V0b3I6IEV4ZWN1dG9yPFQ+LFxuICBvbk5vT2JzZXJ2ZXJzPzogRXhlY3V0b3I8VD5cbik6IFN1YnNjcmliZTxUPiB7XG4gIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHk8VD4oZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xuICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xufVxuXG4vKipcbiAqIEltcGxlbWVudCBmYW4tb3V0IGZvciBhbnkgbnVtYmVyIG9mIE9ic2VydmVycyBhdHRhY2hlZCB2aWEgYSBzdWJzY3JpYmVcbiAqIGZ1bmN0aW9uLlxuICovXG5jbGFzcyBPYnNlcnZlclByb3h5PFQ+IGltcGxlbWVudHMgT2JzZXJ2ZXI8VD4ge1xuICBwcml2YXRlIG9ic2VydmVyczogQXJyYXk8T2JzZXJ2ZXI8VD4+IHwgdW5kZWZpbmVkID0gW107XG4gIHByaXZhdGUgdW5zdWJzY3JpYmVzOiBVbnN1YnNjcmliZVtdID0gW107XG4gIHByaXZhdGUgb25Ob09ic2VydmVyczogRXhlY3V0b3I8VD4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgb2JzZXJ2ZXJDb3VudCA9IDA7XG4gIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxuICBwcml2YXRlIHRhc2sgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgcHJpdmF0ZSBmaW5hbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBmaW5hbEVycm9yPzogRXJyb3I7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxuICAgKiAgICAgYXMgYSBwcm94eS5cbiAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZXhlY3V0b3I6IEV4ZWN1dG9yPFQ+LCBvbk5vT2JzZXJ2ZXJzPzogRXhlY3V0b3I8VD4pIHtcbiAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xuICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxuICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cbiAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxuICAgIHRoaXMudGFza1xuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBleGVjdXRvcih0aGlzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5leHQodmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcbiAgICB9KTtcbiAgICB0aGlzLmNsb3NlKGVycm9yKTtcbiAgfVxuXG4gIGNvbXBsZXRlKCk6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBPYnNlcnZlciB0byB0aGUgZmFuLW91dCBsaXN0LlxuICAgKlxuICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcbiAgICogICBjYWxsIHRvIHN1YnNjcmliZSgpLlxuICAgKi9cbiAgc3Vic2NyaWJlKFxuICAgIG5leHRPck9ic2VydmVyPzogTmV4dEZuPFQ+IHwgUGFydGlhbE9ic2VydmVyPFQ+LFxuICAgIGVycm9yPzogRXJyb3JGbixcbiAgICBjb21wbGV0ZT86IENvbXBsZXRlRm5cbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIGxldCBvYnNlcnZlcjogT2JzZXJ2ZXI8VD47XG5cbiAgICBpZiAoXG4gICAgICBuZXh0T3JPYnNlcnZlciA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgT2JzZXJ2ZXIuJyk7XG4gICAgfVxuXG4gICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAgICBpZiAoXG4gICAgICBpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciBhcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSwgW1xuICAgICAgICAnbmV4dCcsXG4gICAgICAgICdlcnJvcicsXG4gICAgICAgICdjb21wbGV0ZSdcbiAgICAgIF0pXG4gICAgKSB7XG4gICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyIGFzIE9ic2VydmVyPFQ+O1xuICAgIH0gZWxzZSB7XG4gICAgICBvYnNlcnZlciA9IHtcbiAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIgYXMgTmV4dEZuPFQ+LFxuICAgICAgICBlcnJvcixcbiAgICAgICAgY29tcGxldGVcbiAgICAgIH0gYXMgT2JzZXJ2ZXI8VD47XG4gICAgfVxuXG4gICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3AgYXMgTmV4dEZuPFQ+O1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wIGFzIEVycm9yRm47XG4gICAgfVxuICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3AgYXMgQ29tcGxldGVGbjtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycyEubGVuZ3RoKTtcblxuICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcbiAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXG4gICAgLy8gZXZlbnQuXG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHRoaXMuZmluYWxFcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IodGhpcy5maW5hbEVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBub3RoaW5nXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlcnMhLnB1c2gob2JzZXJ2ZXIgYXMgT2JzZXJ2ZXI8VD4pO1xuXG4gICAgcmV0dXJuIHVuc3ViO1xuICB9XG5cbiAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cbiAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZU9uZShpOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xuXG4gICAgdGhpcy5vYnNlcnZlckNvdW50IC09IDE7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJDb3VudCA9PT0gMCAmJiB0aGlzLm9uTm9PYnNlcnZlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9yRWFjaE9ic2VydmVyKGZuOiAob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICAvLyBBbHJlYWR5IGNsb3NlZCBieSBwcmV2aW91cyBldmVudC4uLi5qdXN0IGVhdCB0aGUgYWRkaXRpb25hbCB2YWx1ZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2luY2Ugc2VuZE9uZSBjYWxscyBhc3luY2hyb25vdXNseSAtIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0XG4gICAgLy8gdGhpcy5vYnNlcnZlcnMgd2lsbCBiZWNvbWUgdW5kZWZpbmVkLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnNlbmRPbmUoaSwgZm4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGwgdGhlIE9ic2VydmVyIHZpYSBvbmUgb2YgaXQncyBjYWxsYmFjayBmdW5jdGlvbi4gV2UgYXJlIGNhcmVmdWwgdG9cbiAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcbiAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxuICBwcml2YXRlIHNlbmRPbmUoaTogbnVtYmVyLCBmbjogKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmbih0aGlzLm9ic2VydmVyc1tpXSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxuICAgICAgICAgIC8vIE9ic2VydmVyLlxuICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbG9zZShlcnI/OiBFcnJvcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XG4gICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmZpbmFsRXJyb3IgPSBlcnI7XG4gICAgfVxuICAgIC8vIFByb3h5IGlzIG5vIGxvbmdlciBuZWVkZWQgLSBnYXJiYWdlIGNvbGxlY3QgcmVmZXJlbmNlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxufVxuXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jKGZuOiBGdW5jdGlvbiwgb25FcnJvcj86IEVycm9yRm4pOiBGdW5jdGlvbiB7XG4gIHJldHVybiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHRydWUpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBvYmplY3QgcGFzc2VkIGluIGltcGxlbWVudHMgYW55IG9mIHRoZSBuYW1lZCBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhcbiAgb2JqOiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSxcbiAgbWV0aG9kczogc3RyaW5nW11cbik6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBtZXRob2Qgb2YgbWV0aG9kcykge1xuICAgIGlmIChtZXRob2QgaW4gb2JqICYmIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBub29wKCk6IHZvaWQge1xuICAvLyBkbyBub3RoaW5nXG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgZm9yIGEgcHVibGljIGZ1bmN0aW9uLlxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxuICpcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxuICogQHBhcmFtIG1heENvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudCB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcbiAqIEBwYXJhbSBhcmdDb3VudCBUaGUgYWN0dWFsIG51bWJlciBvZiBhcmd1bWVudHMgcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKFxuICBmbk5hbWU6IHN0cmluZyxcbiAgbWluQ291bnQ6IG51bWJlcixcbiAgbWF4Q291bnQ6IG51bWJlcixcbiAgYXJnQ291bnQ6IG51bWJlclxuKTogdm9pZCB7XG4gIGxldCBhcmdFcnJvcjtcbiAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcbiAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XG4gIH0gZWxzZSBpZiAoYXJnQ291bnQgPiBtYXhDb3VudCkge1xuICAgIGFyZ0Vycm9yID0gbWF4Q291bnQgPT09IDAgPyAnbm9uZScgOiAnbm8gbW9yZSB0aGFuICcgKyBtYXhDb3VudDtcbiAgfVxuICBpZiAoYXJnRXJyb3IpIHtcbiAgICBjb25zdCBlcnJvciA9XG4gICAgICBmbk5hbWUgK1xuICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcbiAgICAgIGFyZ0NvdW50ICtcbiAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcbiAgICAgICcgRXhwZWN0cyAnICtcbiAgICAgIGFyZ0Vycm9yICtcbiAgICAgICcuJztcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxuICpcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcbiAqIEBwYXJhbSBhcmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBhcmd1bWVudFxuICogQHJldHVybiBUaGUgcHJlZml4IHRvIGFkZCB0byB0aGUgZXJyb3IgdGhyb3duIGZvciB2YWxpZGF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JQcmVmaXgoZm5OYW1lOiBzdHJpbmcsIGFyZ05hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtmbk5hbWV9IGZhaWxlZDogJHthcmdOYW1lfSBhcmd1bWVudCBgO1xufVxuXG4vKipcbiAqIEBwYXJhbSBmbk5hbWVcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlclxuICogQHBhcmFtIG5hbWVzcGFjZVxuICogQHBhcmFtIG9wdGlvbmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShcbiAgZm5OYW1lOiBzdHJpbmcsXG4gIG5hbWVzcGFjZTogc3RyaW5nLFxuICBvcHRpb25hbDogYm9vbGVhblxuKTogdm9pZCB7XG4gIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xuICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGVycm9yUHJlZml4KGZuTmFtZSwgJ25hbWVzcGFjZScpICsgJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBuYW1lc3BhY2UuJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soXG4gIGZuTmFtZTogc3RyaW5nLFxuICBhcmd1bWVudE5hbWU6IHN0cmluZyxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgY2FsbGJhY2s6IEZ1bmN0aW9uLFxuICBvcHRpb25hbDogYm9vbGVhblxuKTogdm9pZCB7XG4gIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ29udGV4dE9iamVjdChcbiAgZm5OYW1lOiBzdHJpbmcsXG4gIGFyZ3VtZW50TmFtZTogc3RyaW5nLFxuICBjb250ZXh0OiB1bmtub3duLFxuICBvcHRpb25hbDogYm9vbGVhblxuKTogdm9pZCB7XG4gIGlmIChvcHRpb25hbCAmJiAhY29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnIHx8IGNvbnRleHQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TmFtZSkgKyAnbXVzdCBiZSBhIHZhbGlkIGNvbnRleHQgb2JqZWN0LidcbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5cbi8vIENvZGUgb3JpZ2luYWxseSBjYW1lIGZyb20gZ29vZy5jcnlwdC5zdHJpbmdUb1V0ZjhCeXRlQXJyYXksIGJ1dCBmb3Igc29tZSByZWFzb24gdGhleVxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cblxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXG4vLyBmcm9tQ2hhckNvZGUgcmV0dXJucyB0aGUgVVRGLTE2IGVuY29kaW5nIG9mIGEgY2hhcmFjdGVyIC0gc28gc29tZSBVbmljb2RlIGNoYXJhY3RlcnNcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3Rcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxuLy8gcGFpcikuXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nVG9CeXRlQXJyYXkgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBudW1iZXJbXSB7XG4gIGNvbnN0IG91dDogbnVtYmVyW10gPSBbXTtcbiAgbGV0IHAgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAvLyBJcyB0aGlzIHRoZSBsZWFkIHN1cnJvZ2F0ZSBpbiBhIHN1cnJvZ2F0ZSBwYWlyP1xuICAgIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xuICAgICAgY29uc3QgaGlnaCA9IGMgLSAweGQ4MDA7IC8vIHRoZSBoaWdoIDEwIGJpdHMuXG4gICAgICBpKys7XG4gICAgICBhc3NlcnQoaSA8IHN0ci5sZW5ndGgsICdTdXJyb2dhdGUgcGFpciBtaXNzaW5nIHRyYWlsIHN1cnJvZ2F0ZS4nKTtcbiAgICAgIGNvbnN0IGxvdyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gMHhkYzAwOyAvLyB0aGUgbG93IDEwIGJpdHMuXG4gICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcbiAgICB9XG5cbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgb3V0W3ArK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSBpZiAoYyA8IDY1NTM2KSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XG4gICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XG4gICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IG51bWJlciB7XG4gIGxldCBwID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgIHArKztcbiAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICBwICs9IDI7XG4gICAgfSBlbHNlIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xuICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cbiAgICAgIHAgKz0gNDtcbiAgICAgIGkrKzsgLy8gc2tpcCB0cmFpbCBzdXJyb2dhdGUuXG4gICAgfSBlbHNlIHtcbiAgICAgIHAgKz0gMztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHA7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDb3BpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xuICogR2VuZXJhdGVzIGEgbmV3IHV1aWQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB1dWlkdjQgPSBmdW5jdGlvbiAoKTogc3RyaW5nIHtcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBleHBvbmVudGlhbGx5IGluY3JlYXNlLlxuICovXG5jb25zdCBERUZBVUxUX0lOVEVSVkFMX01JTExJUyA9IDEwMDA7XG5cbi8qKlxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxuICovXG5jb25zdCBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXG4gKlxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgY29uc3QgTUFYX1ZBTFVFX01JTExJUyA9IDQgKiA2MCAqIDYwICogMTAwMDsgLy8gRm91ciBob3VycywgbGlrZSBpT1MgYW5kIEFuZHJvaWQuXG5cbi8qKlxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cbiAqIFNlZVxuICogaHR0cDovL2dvL3NhZmUtY2xpZW50LWJlaGF2aW9yI3N0ZXAtMS1kZXRlcm1pbmUtdGhlLWFwcHJvcHJpYXRlLXJldHJ5LWludGVydmFsLXRvLWhhbmRsZS1zcGlrZS10cmFmZmljXG4gKiBmb3IgY29udGV4dC5cbiAqXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBSQU5ET01fRkFDVE9SID0gMC41O1xuXG4vKipcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9jbG9zdXJlL2dvb2cvbWF0aC9leHBvbmVudGlhbGJhY2tvZmYuanMuXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKFxuICBiYWNrb2ZmQ291bnQ6IG51bWJlcixcbiAgaW50ZXJ2YWxNaWxsaXM6IG51bWJlciA9IERFRkFVTFRfSU5URVJWQUxfTUlMTElTLFxuICBiYWNrb2ZmRmFjdG9yOiBudW1iZXIgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SXG4pOiBudW1iZXIge1xuICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cbiAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXG4gIC8vIGFuZCBjb3VudCB0byByZXN0b3JlIHN0YXRlLlxuICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xuXG4gIC8vIEEgcmFuZG9tIFwiZnV6elwiIHRvIGF2b2lkIHdhdmVzIG9mIHJldHJpZXMuXG4gIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxuICBjb25zdCByYW5kb21XYWl0ID0gTWF0aC5yb3VuZChcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cbiAgICAvLyBEZXZpYXRpb246IGNoYW5nZXMgbXVsdGlwbGljYXRpb24gb3JkZXIgdG8gaW1wcm92ZSByZWFkYWJpbGl0eS5cbiAgICBSQU5ET01fRkFDVE9SICpcbiAgICAgIGN1cnJCYXNlVmFsdWUgKlxuICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXG4gICAgICAvLyBpZiB3ZSBhZGQgb3Igc3VidHJhY3QuXG4gICAgICAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKlxuICAgICAgMlxuICApO1xuXG4gIC8vIExpbWl0cyBiYWNrb2ZmIHRvIG1heCB0byBhdm9pZCBlZmZlY3RpdmVseSBwZXJtYW5lbnQgYmFja29mZi5cbiAgcmV0dXJuIE1hdGgubWluKE1BWF9WQUxVRV9NSUxMSVMsIGN1cnJCYXNlVmFsdWUgKyByYW5kb21XYWl0KTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUHJvdmlkZSBFbmdsaXNoIG9yZGluYWwgbGV0dGVycyBhZnRlciBhIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gb3JkaW5hbChpOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZShpKSkge1xuICAgIHJldHVybiBgJHtpfWA7XG4gIH1cbiAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSk7XG59XG5cbmZ1bmN0aW9uIGluZGljYXRvcihpOiBudW1iZXIpOiBzdHJpbmcge1xuICBpID0gTWF0aC5hYnMoaSk7XG4gIGNvbnN0IGNlbnQgPSBpICUgMTAwO1xuICBpZiAoY2VudCA+PSAxMCAmJiBjZW50IDw9IDIwKSB7XG4gICAgcmV0dXJuICd0aCc7XG4gIH1cbiAgY29uc3QgZGVjID0gaSAlIDEwO1xuICBpZiAoZGVjID09PSAxKSB7XG4gICAgcmV0dXJuICdzdCc7XG4gIH1cbiAgaWYgKGRlYyA9PT0gMikge1xuICAgIHJldHVybiAnbmQnO1xuICB9XG4gIGlmIChkZWMgPT09IDMpIHtcbiAgICByZXR1cm4gJ3JkJztcbiAgfVxuICByZXR1cm4gJ3RoJztcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGF0PFQ+IHtcbiAgX2RlbGVnYXRlOiBUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxhckluc3RhbmNlPEV4cFNlcnZpY2U+KFxuICBzZXJ2aWNlOiBDb21wYXQ8RXhwU2VydmljZT4gfCBFeHBTZXJ2aWNlXG4pOiBFeHBTZXJ2aWNlIHtcbiAgaWYgKHNlcnZpY2UgJiYgKHNlcnZpY2UgYXMgQ29tcGF0PEV4cFNlcnZpY2U+KS5fZGVsZWdhdGUpIHtcbiAgICByZXR1cm4gKHNlcnZpY2UgYXMgQ29tcGF0PEV4cFNlcnZpY2U+KS5fZGVsZWdhdGU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNlcnZpY2UgYXMgRXhwU2VydmljZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSAnLi9zcmMvY29uc3RhbnRzJztcblxuLy8gT3ZlcnJpZGluZyB0aGUgY29uc3RhbnQgKHdlIHNob3VsZCBiZSB0aGUgb25seSBvbmVzIGRvaW5nIHRoaXMpXG5DT05TVEFOVFMuTk9ERV9DTElFTlQgPSB0cnVlO1xuXG5leHBvcnQgKiBmcm9tICcuL3NyYy9hc3NlcnQnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY3J5cHQnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2RlZXBDb3B5JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2RlZmF1bHRzJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2RlZmVycmVkJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2VtdWxhdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Vudmlyb25tZW50JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Vycm9ycyc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9qc29uJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2p3dCc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9vYmonO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcHJvbWlzZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9xdWVyeSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9zaGExJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3N1YnNjcmliZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy92YWxpZGF0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3V0ZjgnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdXVpZCc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9leHBvbmVudGlhbF9iYWNrb2ZmJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2Zvcm1hdHRlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29tcGF0JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2dsb2JhbCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUc7QUFNVSxJQUFBQSxTQUFTLEdBQUc7RUFJdkJDLFdBQVcsRUFBRSxLQUFLO0VBSWxCQyxVQUFVLEVBQUUsS0FBSztFQUtqQkMsV0FBVyxFQUFFOzs7QUNsQ2Y7Ozs7Ozs7Ozs7Ozs7OztBQWVHO0FBT1UsSUFBQUMsTUFBTSxHQUFHLFNBQVRBLE1BQU1BLENBQWFDLFNBQWtCLEVBQUVDLE9BQWU7RUFDakUsSUFBSSxDQUFDRCxTQUFTLEVBQUU7SUFDZCxNQUFNRSxjQUFjLENBQUNELE9BQU8sQ0FBQztFQUM5QjtBQUNIO0FBS08sSUFBTUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFhRCxPQUFlO0VBQ3JELE9BQU8sSUFBSUUsS0FBSyxDQUNkLHFCQUFxQixHQUNuQlIsU0FBUyxDQUFDRyxXQUFXLEdBQ3JCLDRCQUE0QixHQUM1QkcsT0FBTyxDQUNWO0FBQ0g7O0FDdENBOzs7Ozs7Ozs7Ozs7Ozs7QUFlRztBQUVILElBQU1HLG1CQUFpQixHQUFHLFNBQXBC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