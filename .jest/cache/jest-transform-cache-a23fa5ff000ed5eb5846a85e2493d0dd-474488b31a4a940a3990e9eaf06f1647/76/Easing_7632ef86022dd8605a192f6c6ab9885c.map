{"version":3,"names":["_Bezier","require","_worklet_3396815587118_init_data","code","location","sourceMap","linear","_e","global","Error","_f","t","_closure","__initData","__workletHash","__stackDetails","__version","_worklet_2411534042076_init_data","ease","Bezier","_worklet_6051398521164_init_data","quad","_worklet_4364585299021_init_data","cubic","_worklet_16926874956689_init_data","_worklet_727371143666_init_data","poly","n","Math","pow","_worklet_3668171934827_init_data","sin","cos","PI","_worklet_11286585262564_init_data","circle","sqrt","_worklet_6562487663041_init_data","exp","_worklet_12244264854771_init_data","_worklet_400591822457_init_data","elastic","bounciness","arguments","length","undefined","p","_worklet_4359256929682_init_data","_worklet_9147913517383_init_data","back","s","_worklet_11317257142327_init_data","bounce","t2","_worklet_15446106544019_init_data","_worklet_6377442402004_init_data","bezier","x1","y1","x2","y2","factory","_worklet_1869399246112_init_data","bezierFn","in_","easing","_worklet_5056936352587_init_data","_worklet_6194893181391_init_data","_worklet_12007771414344_init_data","out","_worklet_13414418609691_init_data","_worklet_15757459008443_init_data","inOut","_worklet_13749494056712_init_data","_worklet_1291084731408_init_data","steps","roundToNextStep","value","min","max","ceil","floor","EasingObject","in","Easing","exports"],"sources":["Easing.ts"],"sourcesContent":["import { Bezier } from './Bezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\n\nexport type EasingFn = (t: number) => number;\n\nexport type EasingFactoryFn = { factory: () => EasingFn };\n/**\n * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n * one.\n *\n * http://cubic-bezier.com/#0,0,1,1\n */\nfunction linear(t: number): number {\n  'worklet';\n  return t;\n}\n\n/**\n * A simple inertial interaction, similar to an object slowly accelerating to\n * speed.\n *\n * http://cubic-bezier.com/#.42,0,1,1\n */\nfunction ease(t: number): number {\n  'worklet';\n  return Bezier(0.42, 0, 1, 1)(t);\n}\n\n/**\n * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n * time.\n *\n * http://easings.net/#easeInQuad\n */\nfunction quad(t: number): number {\n  'worklet';\n  return t * t;\n}\n\n/**\n * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n * time.\n *\n * http://easings.net/#easeInCubic\n */\nfunction cubic(t: number): number {\n  'worklet';\n  return t * t * t;\n}\n\n/**\n * A power function. Position is equal to the Nth power of elapsed time.\n *\n * n = 4: http://easings.net/#easeInQuart\n * n = 5: http://easings.net/#easeInQuint\n */\nfunction poly(n: number): EasingFn {\n  'worklet';\n  return (t) => {\n    'worklet';\n    return Math.pow(t, n);\n  };\n}\n\n/**\n * A sinusoidal function.\n *\n * http://easings.net/#easeInSine\n */\nfunction sin(t: number): number {\n  'worklet';\n  return 1 - Math.cos((t * Math.PI) / 2);\n}\n\n/**\n * A circular function.\n *\n * http://easings.net/#easeInCirc\n */\nfunction circle(t: number): number {\n  'worklet';\n  return 1 - Math.sqrt(1 - t * t);\n}\n\n/**\n * An exponential function.\n *\n * http://easings.net/#easeInExpo\n */\nfunction exp(t: number): number {\n  'worklet';\n  return Math.pow(2, 10 * (t - 1));\n}\n\n/**\n * A simple elastic interaction, similar to a spring oscillating back and\n * forth.\n *\n * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n * times.\n *\n * http://easings.net/#easeInElastic\n */\nfunction elastic(bounciness = 1): EasingFn {\n  'worklet';\n  const p = bounciness * Math.PI;\n  return (t) => {\n    'worklet';\n    return 1 - Math.pow(Math.cos((t * Math.PI) / 2), 3) * Math.cos(t * p);\n  };\n}\n\n/**\n * Use with `Animated.parallel()` to create a simple effect where the object\n * animates back slightly as the animation starts.\n *\n * Wolfram Plot:\n *\n * - http://tiny.cc/back_default (s = 1.70158, default)\n */\nfunction back(s = 1.70158): (t: number) => number {\n  'worklet';\n  return (t) => {\n    'worklet';\n    return t * t * ((s + 1) * t - s);\n  };\n}\n\n/**\n * Provides a simple bouncing effect.\n *\n * http://easings.net/#easeInBounce\n */\nfunction bounce(t: number): number {\n  'worklet';\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  }\n\n  if (t < 2 / 2.75) {\n    const t2 = t - 1.5 / 2.75;\n    return 7.5625 * t2 * t2 + 0.75;\n  }\n\n  if (t < 2.5 / 2.75) {\n    const t2 = t - 2.25 / 2.75;\n    return 7.5625 * t2 * t2 + 0.9375;\n  }\n\n  const t2 = t - 2.625 / 2.75;\n  return 7.5625 * t2 * t2 + 0.984375;\n}\n\n/**\n * Provides a cubic bezier curve, equivalent to CSS Transitions'\n * `transition-timing-function`.\n *\n * A useful tool to visualize cubic bezier curves can be found at\n * http://cubic-bezier.com/\n */\nfunction bezier(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): { factory: () => (x: number) => number } {\n  'worklet';\n  return {\n    factory: () => {\n      'worklet';\n      return Bezier(x1, y1, x2, y2);\n    },\n  };\n}\n\nfunction bezierFn(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): (x: number) => number {\n  'worklet';\n  return Bezier(x1, y1, x2, y2);\n}\n\n/**\n * Runs an easing function forwards.\n */\nfunction in_(easing: EasingFn): EasingFn {\n  'worklet';\n  return easing;\n}\n\n/**\n * Runs an easing function backwards.\n */\nfunction out(easing: EasingFn): EasingFn {\n  'worklet';\n  return (t) => {\n    'worklet';\n    return 1 - easing(1 - t);\n  };\n}\n\n/**\n * Makes any easing function symmetrical. The easing function will run\n * forwards for half of the duration, then backwards for the rest of the\n * duration.\n */\nfunction inOut(easing: EasingFn): EasingFn {\n  'worklet';\n  return (t) => {\n    'worklet';\n    if (t < 0.5) {\n      return easing(t * 2) / 2;\n    }\n    return 1 - easing((1 - t) * 2) / 2;\n  };\n}\n\n/**\n * The `steps` easing function jumps between discrete values at regular intervals,\n * creating a stepped animation effect. The `n` parameter determines the number of\n * steps in the animation, and the `roundToNextStep` parameter determines whether the animation\n * should start at the beginning or end of each step.\n */\nfunction steps(n = 10, roundToNextStep = true): EasingFn {\n  'worklet';\n  return (t) => {\n    'worklet';\n    const value = Math.min(Math.max(t, 0), 1) * n;\n    if (roundToNextStep) {\n      return Math.ceil(value) / n;\n    }\n    return Math.floor(value) / n;\n  };\n}\n\nconst EasingObject = {\n  linear,\n  ease,\n  quad,\n  cubic,\n  poly,\n  sin,\n  circle,\n  exp,\n  elastic,\n  back,\n  bounce,\n  bezier,\n  bezierFn,\n  steps,\n  in: in_,\n  out,\n  inOut,\n};\n\nexport const Easing = EasingObject;\n"],"mappings":"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"}