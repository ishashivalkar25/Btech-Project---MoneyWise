5f8da9a8f1363bf1799e143d15cde04a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _config = require("../../Firebase/config");
var _jsxRuntime = require("react/jsx-runtime");
var ConfirmUntrackedIncTrans = function ConfirmUntrackedIncTrans(_ref) {
  var route = _ref.route,
    navigation = _ref.navigation;
  var _React$useState = _react.default.useState([]),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    messageList = _React$useState2[0],
    setMessageList = _React$useState2[1];
  var _React$useState3 = _react.default.useState([]),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    transactionList = _React$useState4[0],
    setTransactionList = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    extraData = _React$useState6[0],
    setExtraData = _React$useState6[1];
  _react.default.useEffect(function () {
    setMessageList(route.params.messageList);
    setExtraData(true);
    setExtraData(false);
    _reactNative.BackHandler.addEventListener("hardwareBackPress", handleBackButtonClick);
    return function () {
      _reactNative.BackHandler.removeEventListener("hardwareBackPress", handleBackButtonClick);
    };
  }, []);
  var saveAllRecords = function saveAllRecords() {
    messageList.forEach(function (item) {
      saveToDB(item);
      alert("All income transactions saved successfully!!");
    });
    navigation.navigate("Income");
  };
  var saveToDB = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (item) {
      try {
        var user = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
        var docRef = yield (0, _config.addDoc)((0, _config.collection)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), "Income"), {
          incAmount: item.amount,
          incDate: new Date(item.date),
          incCategory: "Other",
          incDescription: ""
        });
        yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
          accBalance: parseFloat(user.data().accBalance) + parseFloat(item.amount) + ""
        });
        console.log("Saved To DB");
      } catch (e) {
        console.log("Error To DB");
      }
    });
    return function saveToDB(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  function handleBackButtonClick() {
    if (messageList.length > 0) {
      _reactNative.Alert.alert('Accept Transactions Alert', 'Do you want accept all transactions?', [{
        text: 'No',
        onPress: function onPress() {
          console.log('Cancel Pressed');
          navigation.navigate("Income");
        },
        style: 'cancel'
      }, {
        text: 'Yes',
        onPress: function onPress() {
          return saveAllRecords();
        }
      }]);
    } else {
      navigation.navigate("Income");
    }
    return true;
  }
  var getDate = function getDate(timestamp) {
    var tempDate = new Date(timestamp);
    return tempDate.getDate() + ' / ' + (tempDate.getMonth() + 1) + ' / ' + tempDate.getFullYear();
  };
  var onDelete = function onDelete(item) {
    var filterData = messageList.filter(function (curr) {
      return curr !== item;
    });
    console.log(filterData);
    console.log(filterData.length);
    setMessageList(filterData);
  };
  var onAcceptAll = function onAcceptAll() {
    console.log("AcceptAll");
    transactionList.push.apply(transactionList, (0, _toConsumableArray2.default)(messageList));
    console.log(transactionList);
    saveAllRecords();
    navigation.navigate("Income", {
      transactionList: transactionList
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.title,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.titleText,
        children: "Untracked Incoming Transactions!"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.transactions,
      children: messageList.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        data: messageList,
        renderItem: function renderItem(_ref3) {
          var item = _ref3.item,
            index = _ref3.index;
          return (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.transactionContainer,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.transactionContainerHeader,
              children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.divider,
                children: ["Transaction ", index + 1]
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.transactionContainerAlign,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.transactionContainerContent,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.bold,
                  children: "Date"
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  children: getDate(item.date)
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.transactionContainerContent,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.bold,
                  children: "Amount"
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  children: item.amount
                })]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.transactionContainerAlign,
                children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: [styles.transactionContainerButn, styles.btnDelete],
                  onPress: function onPress() {
                    return onDelete(item);
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                    source: require('../../Assets/reject.png'),
                    style: styles.btn
                  })
                })
              })]
            })]
          });
        },
        enableEmptySections: true,
        extraData: extraData
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [styles.btnAcceptAll, messageList.length > 0 ? styles.enabled : styles.disabled],
      disabled: messageList.length > 0 ? false : true,
      onPress: function onPress() {
        return onAcceptAll();
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.btnAcceptAllText,
        children: "Accept All Transactions"
      })
    })]
  });
};
var _default = ConfirmUntrackedIncTrans;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 0
  },
  title: {
    backgroundColor: "rgba(0,0,0,0.2)",
    height: "8%",
    padding: 5,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  },
  titleText: {
    textAlign: "center",
    fontSize: 18,
    fontWeight: "bold"
  },
  transactions: {
    height: "85.5%"
  },
  transactionContainer: {
    backgroundColor: "rgba(0,0,0,0.03)",
    borderRadius: 10,
    marginHorizontal: 5,
    marginVertical: 2,
    flexDirection: "column",
    justifyContent: "space-around",
    alignItems: "center"
  },
  transactionContainerHeader: {
    width: "100%",
    flexDirection: "column",
    justifyContent: "center"
  },
  divider: {
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    padding: 5,
    marginHorizontal: 10,
    fontWeight: "bold"
  },
  transactionContainerAlign: {
    flexDirection: "row",
    justifyContent: "space-around",
    alignItems: "center",
    padding: 5
  },
  transactionContainerContent: {
    flexDirection: "column",
    alignItems: "center",
    flexBasis: 0,
    flexGrow: 1
  },
  bold: {
    fontWeight: "bold"
  },
  transactionContainerButn: {
    textAlign: 'center',
    padding: 5,
    width: 35,
    height: 35,
    marginHorizontal: 10,
    borderRadius: 40,
    flexDirection: "column",
    justifyContent: "center"
  },
  btn: {
    width: 25,
    height: 25,
    tintColor: "white"
  },
  btnAccept: {
    backgroundColor: "green"
  },
  btnDelete: {
    backgroundColor: "red"
  },
  btnAcceptAll: {
    backgroundColor: "green",
    height: "5.5%",
    borderRadius: 10,
    margin: 5,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center"
  },
  btnAcceptAllText: {
    textAlign: "center",
    color: "white",
    fontSize: 15,
    fontWeight: "bold"
  },
  disabled: {
    opacity: 0.7
  },
  enabled: {
    opacity: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfanN4UnVudGltZSIsIkNvbmZpcm1VbnRyYWNrZWRJbmNUcmFucyIsIl9yZWYiLCJyb3V0ZSIsIm5hdmlnYXRpb24iLCJfUmVhY3QkdXNlU3RhdGUiLCJSZWFjdCIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJtZXNzYWdlTGlzdCIsInNldE1lc3NhZ2VMaXN0IiwiX1JlYWN0JHVzZVN0YXRlMyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJ0cmFuc2FjdGlvbkxpc3QiLCJzZXRUcmFuc2FjdGlvbkxpc3QiLCJfUmVhY3QkdXNlU3RhdGU1IiwiX1JlYWN0JHVzZVN0YXRlNiIsImV4dHJhRGF0YSIsInNldEV4dHJhRGF0YSIsInVzZUVmZmVjdCIsInBhcmFtcyIsIkJhY2tIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUJhY2tCdXR0b25DbGljayIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzYXZlQWxsUmVjb3JkcyIsImZvckVhY2giLCJpdGVtIiwic2F2ZVRvREIiLCJhbGVydCIsIm5hdmlnYXRlIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJ1c2VyIiwiZ2V0RG9jIiwiZG9jIiwiZGIiLCJhdXRoIiwiY3VycmVudFVzZXIiLCJ1aWQiLCJkb2NSZWYiLCJhZGREb2MiLCJjb2xsZWN0aW9uIiwiaW5jQW1vdW50IiwiYW1vdW50IiwiaW5jRGF0ZSIsIkRhdGUiLCJkYXRlIiwiaW5jQ2F0ZWdvcnkiLCJpbmNEZXNjcmlwdGlvbiIsInVwZGF0ZURvYyIsImFjY0JhbGFuY2UiLCJwYXJzZUZsb2F0IiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJlIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFsZXJ0IiwidGV4dCIsIm9uUHJlc3MiLCJzdHlsZSIsImdldERhdGUiLCJ0aW1lc3RhbXAiLCJ0ZW1wRGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJvbkRlbGV0ZSIsImZpbHRlckRhdGEiLCJmaWx0ZXIiLCJjdXJyIiwib25BY2NlcHRBbGwiLCJwdXNoIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImpzeHMiLCJTYWZlQXJlYVZpZXciLCJzdHlsZXMiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsImpzeCIsIlZpZXciLCJ0aXRsZSIsIlRleHQiLCJ0aXRsZVRleHQiLCJ0cmFuc2FjdGlvbnMiLCJGbGF0TGlzdCIsInJlbmRlckl0ZW0iLCJfcmVmMyIsImluZGV4IiwidHJhbnNhY3Rpb25Db250YWluZXIiLCJ0cmFuc2FjdGlvbkNvbnRhaW5lckhlYWRlciIsImRpdmlkZXIiLCJ0cmFuc2FjdGlvbkNvbnRhaW5lckFsaWduIiwidHJhbnNhY3Rpb25Db250YWluZXJDb250ZW50IiwiYm9sZCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJ0cmFuc2FjdGlvbkNvbnRhaW5lckJ1dG4iLCJidG5EZWxldGUiLCJJbWFnZSIsInNvdXJjZSIsImJ0biIsImVuYWJsZUVtcHR5U2VjdGlvbnMiLCJidG5BY2NlcHRBbGwiLCJlbmFibGVkIiwiZGlzYWJsZWQiLCJidG5BY2NlcHRBbGxUZXh0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJoZWlnaHQiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwidGV4dEFsaWduIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luSG9yaXpvbnRhbCIsIm1hcmdpblZlcnRpY2FsIiwid2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImhhaXJsaW5lV2lkdGgiLCJmbGV4QmFzaXMiLCJmbGV4R3JvdyIsInRpbnRDb2xvciIsImJ0bkFjY2VwdCIsIm1hcmdpbiIsImNvbG9yIiwib3BhY2l0eSJdLCJzb3VyY2VzIjpbIkNvbmZpcm1VbnRyYWNrZWRJbmNUcmFucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7XHJcblx0U2FmZUFyZWFWaWV3LFxyXG5cdFN0eWxlU2hlZXQsXHJcblx0VGV4dCxcclxuXHRWaWV3LFxyXG5cdFBlcm1pc3Npb25zQW5kcm9pZCxcclxuXHRBcHBTdGF0ZSxcclxuXHRGbGF0TGlzdCxcclxuXHRUb3VjaGFibGVPcGFjaXR5LFxyXG5cdEltYWdlLFxyXG5cdEJhY2tIYW5kbGVyLFxyXG5cdEFsZXJ0XHJcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuXHJcbmltcG9ydCB7XHJcblx0ZGIsXHJcblx0Y29sbGVjdGlvbixcclxuXHRhZGREb2MsXHJcblx0Z2V0RG9jcyxcclxuXHRnZXREb2MsXHJcblx0c3RvcmFnZSxcclxuXHRhdXRoLFxyXG5cdGRvYyxcclxuXHR1cGRhdGVEb2NcclxuICB9IGZyb20gJy4uLy4uL0ZpcmViYXNlL2NvbmZpZyc7XHJcblxyXG5jb25zdCBDb25maXJtVW50cmFja2VkSW5jVHJhbnMgPSAoeyByb3V0ZSwgbmF2aWdhdGlvbiB9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgW21lc3NhZ2VMaXN0LCBzZXRNZXNzYWdlTGlzdF0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbdHJhbnNhY3Rpb25MaXN0LCBzZXRUcmFuc2FjdGlvbkxpc3RdID0gUmVhY3QudXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2V4dHJhRGF0YSwgc2V0RXh0cmFEYXRhXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldE1lc3NhZ2VMaXN0KHJvdXRlLnBhcmFtcy5tZXNzYWdlTGlzdCk7XHJcbiAgICAgICAgc2V0RXh0cmFEYXRhKHRydWUpO1xyXG4gICAgICAgIHNldEV4dHJhRGF0YShmYWxzZSk7XHJcblx0XHRCYWNrSGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwiaGFyZHdhcmVCYWNrUHJlc3NcIiwgaGFuZGxlQmFja0J1dHRvbkNsaWNrKTtcclxuXHRcdHJldHVybiAoKSA9PiB7XHJcblx0XHQgIEJhY2tIYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJoYXJkd2FyZUJhY2tQcmVzc1wiLCBoYW5kbGVCYWNrQnV0dG9uQ2xpY2spO1xyXG5cdFx0fTtcclxuICAgIH0sIFtdKTtcclxuXHJcblx0Y29uc3Qgc2F2ZUFsbFJlY29yZHMgPSAoKSA9PiB7XHJcblx0XHRtZXNzYWdlTGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblx0XHRcdHNhdmVUb0RCKGl0ZW0pO1xyXG5cdFx0XHRhbGVydChcIkFsbCBpbmNvbWUgdHJhbnNhY3Rpb25zIHNhdmVkIHN1Y2Nlc3NmdWxseSEhXCIpXHJcblx0XHR9KTtcclxuXHRcdG5hdmlnYXRpb24ubmF2aWdhdGUoXCJJbmNvbWVcIik7XHJcblx0fVxyXG5cclxuXHRjb25zdCBzYXZlVG9EQiA9IGFzeW5jKGl0ZW0pID0+IHtcclxuXHJcblx0XHR0cnl7XHJcblxyXG5cdFx0XHRjb25zdCB1c2VyID0gYXdhaXQgZ2V0RG9jKGRvYyhkYiwgXCJVc2VyXCIsIGF1dGguY3VycmVudFVzZXIudWlkKSk7XHJcblxyXG5cdFx0XHRjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoY29sbGVjdGlvbihkb2MoZGIsIFwiVXNlclwiLCBhdXRoLmN1cnJlbnRVc2VyLnVpZCksIFwiSW5jb21lXCIpLCB7XHJcblx0XHRcdFx0aW5jQW1vdW50OiBpdGVtLmFtb3VudCxcclxuXHRcdFx0XHRpbmNEYXRlOiBuZXcgRGF0ZShpdGVtLmRhdGUpLFxyXG5cdFx0XHRcdGluY0NhdGVnb3J5OiBcIk90aGVyXCIsXHJcblx0XHRcdFx0aW5jRGVzY3JpcHRpb24gOiBcIlwiXHJcblx0XHRcdCAgfSk7XHJcblxyXG5cdFx0XHQgIC8vdXBkYXRlIGFjY291bnQgYmFsYW5jZVxyXG5cdFx0XHQgIGF3YWl0IHVwZGF0ZURvYyhkb2MoZGIsXCJVc2VyXCIsYXV0aC5jdXJyZW50VXNlci51aWQpLCB7XHJcbiAgICAgICAgICAgICAgICBhY2NCYWxhbmNlIDpwYXJzZUZsb2F0KHVzZXIuZGF0YSgpLmFjY0JhbGFuY2UpICsgcGFyc2VGbG9hdChpdGVtLmFtb3VudCkgK1wiXCJcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcblx0XHRcdCAgY29uc29sZS5sb2coXCJTYXZlZCBUbyBEQlwiKTtcclxuXHRcdH1cclxuXHRcdGNhdGNoKGUpXHJcblx0XHR7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiRXJyb3IgVG8gREJcIik7XHJcblx0XHR9XHJcblx0XHRcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGhhbmRsZUJhY2tCdXR0b25DbGljaygpIHtcclxuXHJcblx0XHRpZihtZXNzYWdlTGlzdC5sZW5ndGg+MClcclxuXHRcdHtcclxuXHRcdFx0QWxlcnQuYWxlcnQoJ0FjY2VwdCBUcmFuc2FjdGlvbnMgQWxlcnQnLCAnRG8geW91IHdhbnQgYWNjZXB0IGFsbCB0cmFuc2FjdGlvbnM/JywgW1xyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRleHQ6ICdObycsXHJcblx0XHRcdFx0XHRvblByZXNzOiAoKSA9PiB7Y29uc29sZS5sb2coJ0NhbmNlbCBQcmVzc2VkJyk7IG5hdmlnYXRpb24ubmF2aWdhdGUoXCJJbmNvbWVcIik7fSxcclxuXHRcdFx0XHRcdHN0eWxlOiAnY2FuY2VsJyxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHsgXHJcblx0XHRcdFx0XHR0ZXh0OiAnWWVzJywgXHJcblx0XHRcdFx0XHRvblByZXNzOiAoKSA9PiBzYXZlQWxsUmVjb3JkcygpLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdF0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRuYXZpZ2F0aW9uLm5hdmlnYXRlKFwiSW5jb21lXCIpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdFxyXG5cclxuICAgIGNvbnN0IGdldERhdGUgPSAodGltZXN0YW1wKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGVtcERhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG4gICAgICAgIHJldHVybiB0ZW1wRGF0ZS5nZXREYXRlKCkgKyAnIC8gJyArICh0ZW1wRGF0ZS5nZXRNb250aCgpICsgMSkgKyAnIC8gJyArIHRlbXBEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb25EZWxldGUgPSAoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckRhdGEgPSBtZXNzYWdlTGlzdC5maWx0ZXIoY3VyciA9PiBjdXJyICE9PSBpdGVtKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXJEYXRhKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXJEYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgc2V0TWVzc2FnZUxpc3QoZmlsdGVyRGF0YSk7XHJcbiAgICB9XHJcblx0XHJcbiAgICBjb25zdCBvbkFjY2VwdEFsbCA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkFjY2VwdEFsbFwiKTtcclxuICAgICAgICB0cmFuc2FjdGlvbkxpc3QucHVzaCguLi5tZXNzYWdlTGlzdCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codHJhbnNhY3Rpb25MaXN0KTtcclxuXHRcdHNhdmVBbGxSZWNvcmRzKCk7XHJcblx0XHRuYXZpZ2F0aW9uLm5hdmlnYXRlKFwiSW5jb21lXCIsIHtcclxuXHRcdFx0dHJhbnNhY3Rpb25MaXN0IDogdHJhbnNhY3Rpb25MaXN0XHJcblx0XHR9KTtcclxuXHRcdFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFNhZmVBcmVhVmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XHJcbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMudGl0bGV9PlxyXG4gICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50aXRsZVRleHR9PlVudHJhY2tlZCBJbmNvbWluZyBUcmFuc2FjdGlvbnMhPC9UZXh0PlxyXG4gICAgICAgICAgICA8L1ZpZXc+XHJcblxyXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRyYW5zYWN0aW9uc30+XHJcbiAgICAgICAgICAgICAgICB7bWVzc2FnZUxpc3QubGVuZ3RoID4gMCAmJiA8RmxhdExpc3RcclxuICAgICAgICAgICAgICAgICAgICBkYXRhPXttZXNzYWdlTGlzdH1cclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJdGVtPXsoeyBpdGVtLCBpbmRleCB9KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRyYW5zYWN0aW9uQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMudHJhbnNhY3Rpb25Db250YWluZXJIZWFkZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZGl2aWRlcn0+VHJhbnNhY3Rpb24ge2luZGV4ICsgMX08L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRyYW5zYWN0aW9uQ29udGFpbmVyQWxpZ259PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMudHJhbnNhY3Rpb25Db250YWluZXJDb250ZW50fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5ib2xkfT5EYXRlPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dD57Z2V0RGF0ZShpdGVtLmRhdGUpfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50cmFuc2FjdGlvbkNvbnRhaW5lckNvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmJvbGR9PkFtb3VudDwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2l0ZW0uYW1vdW50fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50cmFuc2FjdGlvbkNvbnRhaW5lckFsaWdufT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtbc3R5bGVzLnRyYW5zYWN0aW9uQ29udGFpbmVyQnV0biwgc3R5bGVzLmJ0bkFjY2VwdF19IG9uUHJlc3M9eygpID0+IG9uQWNjZXB0KGl0ZW0pfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9jaGVjay5wbmcnKX0gc3R5bGU9e3N0eWxlcy5idG59IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT4gKi99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtbc3R5bGVzLnRyYW5zYWN0aW9uQ29udGFpbmVyQnV0biwgc3R5bGVzLmJ0bkRlbGV0ZV19IG9uUHJlc3M9eygpID0+IG9uRGVsZXRlKGl0ZW0pfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzb3VyY2U9e3JlcXVpcmUoJy4uLy4uL0Fzc2V0cy9yZWplY3QucG5nJyl9IHN0eWxlPXtzdHlsZXMuYnRufSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUVtcHR5U2VjdGlvbnM9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFEYXRhPXtleHRyYURhdGF9XHJcbiAgICAgICAgICAgICAgICAvPn1cclxuICAgICAgICAgICAgPC9WaWV3PlxyXG5cdFx0XHRcclxuICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgIHN0eWxlPXtbc3R5bGVzLmJ0bkFjY2VwdEFsbCwgbWVzc2FnZUxpc3QubGVuZ3RoPjAgPyBzdHlsZXMuZW5hYmxlZCA6IHN0eWxlcy5kaXNhYmxlZF19IGRpc2FibGVkPXsgbWVzc2FnZUxpc3QubGVuZ3RoPjAgPyBmYWxzZSA6IHRydWV9IG9uUHJlc3M9eygpID0+IG9uQWNjZXB0QWxsKCl9ID5cclxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYnRuQWNjZXB0QWxsVGV4dH0+QWNjZXB0IEFsbCBUcmFuc2FjdGlvbnM8L1RleHQ+XHJcbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgICAgICA8L1NhZmVBcmVhVmlldz5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29uZmlybVVudHJhY2tlZEluY1RyYW5zO1xyXG5cclxuXHJcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcclxuXHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRwYWRkaW5nOiAwXHJcblx0fSxcclxuXHJcblx0dGl0bGU6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsMCwwLDAuMilcIixcclxuXHRcdGhlaWdodDogXCI4JVwiLFxyXG5cdFx0cGFkZGluZzogNSxcclxuXHRcdGZsZXhEaXJlY3Rpb246IFwicm93XCIsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCJcclxuXHR9LFxyXG5cclxuXHR0aXRsZVRleHQ6IHtcclxuXHRcdHRleHRBbGlnbjogXCJjZW50ZXJcIixcclxuXHRcdGZvbnRTaXplOiAxOCxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdH0sXHJcblx0dHJhbnNhY3Rpb25zOiB7XHJcblx0XHRoZWlnaHQ6IFwiODUuNSVcIixcclxuXHR9LFxyXG5cdHRyYW5zYWN0aW9uQ29udGFpbmVyOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLDAsMCwwLjAzKVwiLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAxMCxcclxuXHRcdG1hcmdpbkhvcml6b250YWw6IDUsXHJcblx0XHRtYXJnaW5WZXJ0aWNhbDogMixcclxuXHRcdGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1hcm91bmRcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcblx0fSxcclxuXHR0cmFuc2FjdGlvbkNvbnRhaW5lckhlYWRlcjoge1xyXG5cdFx0d2lkdGg6IFwiMTAwJVwiLFxyXG5cdFx0ZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuXHRcdGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG5cdH0sXHJcblx0ZGl2aWRlcjoge1xyXG5cdFx0Ym9yZGVyQm90dG9tV2lkdGg6IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCxcclxuXHRcdHBhZGRpbmc6IDUsXHJcblx0XHRtYXJnaW5Ib3Jpem9udGFsOiAxMCxcclxuXHRcdGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG5cdH0sXHJcblx0dHJhbnNhY3Rpb25Db250YWluZXJBbGlnbjoge1xyXG5cdFx0ZmxleERpcmVjdGlvbjogXCJyb3dcIixcclxuXHRcdGp1c3RpZnlDb250ZW50OiBcInNwYWNlLWFyb3VuZFwiLFxyXG5cdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuXHRcdHBhZGRpbmc6IDUsXHJcblx0fSxcclxuXHR0cmFuc2FjdGlvbkNvbnRhaW5lckNvbnRlbnQ6IHtcclxuXHRcdGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcblx0XHRhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxyXG5cdFx0ZmxleEJhc2lzOiAwLFxyXG5cdFx0ZmxleEdyb3c6IDEsXHJcblx0fSxcclxuXHRib2xkOiB7XHJcblx0XHRmb250V2VpZ2h0OiBcImJvbGRcIlxyXG5cdH0sXHJcblx0dHJhbnNhY3Rpb25Db250YWluZXJCdXRuOiB7XHJcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG5cdFx0cGFkZGluZzogNSxcclxuXHRcdHdpZHRoOiAzNSxcclxuXHRcdGhlaWdodDogMzUsXHJcblx0XHRtYXJnaW5Ib3Jpem9udGFsOiAxMCxcclxuXHRcdGJvcmRlclJhZGl1czogNDAsXHJcblx0XHRmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXHJcblxyXG5cdH0sXHJcblx0YnRuOiB7XHJcblx0XHR3aWR0aDogMjUsXHJcblx0XHRoZWlnaHQ6IDI1LFxyXG5cdFx0dGludENvbG9yOiBcIndoaXRlXCJcclxuXHR9LFxyXG5cdGJ0bkFjY2VwdDoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcImdyZWVuXCIsXHJcblx0fSxcclxuXHRidG5EZWxldGU6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJyZWRcIixcclxuXHR9LFxyXG5cdGJ0bkFjY2VwdEFsbDoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcImdyZWVuXCIsXHJcblx0XHRoZWlnaHQ6IFwiNS41JVwiLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAxMCxcclxuXHRcdG1hcmdpbjogNSxcclxuXHRcdGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCJcclxuXHR9LFxyXG5cdGJ0bkFjY2VwdEFsbFRleHQ6IHtcclxuXHRcdHRleHRBbGlnbjogXCJjZW50ZXJcIixcclxuXHRcdGNvbG9yOiBcIndoaXRlXCIsXHJcblx0XHRmb250U2l6ZTogMTUsXHJcblx0XHRmb250V2VpZ2h0OiBcImJvbGRcIlxyXG5cdH0sXHJcblx0ZGlzYWJsZWQ6IHtcclxuXHRcdG9wYWNpdHk6IDAuN1xyXG5cdCAgfSxcclxuXHQgIGVuYWJsZWQ6IHtcclxuXHRcdCAgb3BhY2l0eTogMVxyXG5cdCAgfVxyXG5cclxufSk7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQWNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQVVpQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFakMsSUFBTUksd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUF3QkEsQ0FBQUMsSUFBQSxFQUE4QjtFQUFBLElBQXhCQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUFFQyxVQUFVLEdBQUFGLElBQUEsQ0FBVkUsVUFBVTtFQUVqRCxJQUFBQyxlQUFBLEdBQXNDQyxjQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFBQUMsZ0JBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFMLGVBQUE7SUFBakRNLFdBQVcsR0FBQUgsZ0JBQUE7SUFBRUksY0FBYyxHQUFBSixnQkFBQTtFQUNsQyxJQUFBSyxnQkFBQSxHQUE4Q1AsY0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQUFPLGdCQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxnQkFBQTtJQUF6REUsZUFBZSxHQUFBRCxnQkFBQTtJQUFFRSxrQkFBa0IsR0FBQUYsZ0JBQUE7RUFDMUMsSUFBQUcsZ0JBQUEsR0FBa0NYLGNBQUssQ0FBQ0MsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUFBVyxnQkFBQSxPQUFBVCxlQUFBLENBQUFDLE9BQUEsRUFBQU8sZ0JBQUE7SUFBaERFLFNBQVMsR0FBQUQsZ0JBQUE7SUFBRUUsWUFBWSxHQUFBRixnQkFBQTtFQUU5QlosY0FBSyxDQUFDZSxTQUFTLENBQUMsWUFBTTtJQUNsQlQsY0FBYyxDQUFDVCxLQUFLLENBQUNtQixNQUFNLENBQUNYLFdBQVcsQ0FBQztJQUN4Q1MsWUFBWSxDQUFDLElBQUksQ0FBQztJQUNsQkEsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUN6Qkcsd0JBQVcsQ0FBQ0MsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUVDLHFCQUFxQixDQUFDO0lBQ3hFLE9BQU8sWUFBTTtNQUNYRix3QkFBVyxDQUFDRyxtQkFBbUIsQ0FBQyxtQkFBbUIsRUFBRUQscUJBQXFCLENBQUM7SUFDN0UsQ0FBQztFQUNDLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFVCxJQUFNRSxjQUFjLEdBQUcsU0FBakJBLGNBQWNBLENBQUEsRUFBUztJQUM1QmhCLFdBQVcsQ0FBQ2lCLE9BQU8sQ0FBQyxVQUFDQyxJQUFJLEVBQUs7TUFDN0JDLFFBQVEsQ0FBQ0QsSUFBSSxDQUFDO01BQ2RFLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQztJQUN0RCxDQUFDLENBQUM7SUFDRjNCLFVBQVUsQ0FBQzRCLFFBQVEsQ0FBQyxRQUFRLENBQUM7RUFDOUIsQ0FBQztFQUVELElBQU1GLFFBQVE7SUFBQSxJQUFBRyxLQUFBLE9BQUFDLGtCQUFBLENBQUF4QixPQUFBLEVBQUcsV0FBTW1CLElBQUksRUFBSztNQUUvQixJQUFHO1FBRUYsSUFBTU0sSUFBSSxTQUFTLElBQUFDLGNBQU0sRUFBQyxJQUFBQyxXQUFHLEVBQUNDLFVBQUUsRUFBRSxNQUFNLEVBQUVDLFlBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQztRQUVoRSxJQUFNQyxNQUFNLFNBQVMsSUFBQUMsY0FBTSxFQUFDLElBQUFDLGtCQUFVLEVBQUMsSUFBQVAsV0FBRyxFQUFDQyxVQUFFLEVBQUUsTUFBTSxFQUFFQyxZQUFJLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUU7VUFDeEZJLFNBQVMsRUFBRWhCLElBQUksQ0FBQ2lCLE1BQU07VUFDdEJDLE9BQU8sRUFBRSxJQUFJQyxJQUFJLENBQUNuQixJQUFJLENBQUNvQixJQUFJLENBQUM7VUFDNUJDLFdBQVcsRUFBRSxPQUFPO1VBQ3BCQyxjQUFjLEVBQUc7UUFDaEIsQ0FBQyxDQUFDO1FBR0YsTUFBTSxJQUFBQyxpQkFBUyxFQUFDLElBQUFmLFdBQUcsRUFBQ0MsVUFBRSxFQUFDLE1BQU0sRUFBQ0MsWUFBSSxDQUFDQyxXQUFXLENBQUNDLEdBQUcsQ0FBQyxFQUFFO1VBQzFDWSxVQUFVLEVBQUVDLFVBQVUsQ0FBQ25CLElBQUksQ0FBQ29CLElBQUksQ0FBQyxDQUFDLENBQUNGLFVBQVUsQ0FBQyxHQUFHQyxVQUFVLENBQUN6QixJQUFJLENBQUNpQixNQUFNLENBQUMsR0FBRTtRQUM1RSxDQUFDLENBQUM7UUFFWFUsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxDQUFDO01BQzdCLENBQUMsQ0FDRCxPQUFNQyxDQUFDLEVBQ1A7UUFDQ0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxDQUFDO01BQzNCO0lBRUQsQ0FBQztJQUFBLGdCQXpCSzNCLFFBQVFBLENBQUE2QixFQUFBO01BQUEsT0FBQTFCLEtBQUEsQ0FBQTJCLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsR0F5QmI7RUFFRCxTQUFTcEMscUJBQXFCQSxDQUFBLEVBQUc7SUFFaEMsSUFBR2QsV0FBVyxDQUFDbUQsTUFBTSxHQUFDLENBQUMsRUFDdkI7TUFDQ0Msa0JBQUssQ0FBQ2hDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxzQ0FBc0MsRUFBRSxDQUNoRjtRQUNDaUMsSUFBSSxFQUFFLElBQUk7UUFDVkMsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTtVQUFDVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztVQUFFckQsVUFBVSxDQUFDNEIsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUFDLENBQUM7UUFDOUVrQyxLQUFLLEVBQUU7TUFDUixDQUFDLEVBQ0Q7UUFDQ0YsSUFBSSxFQUFFLEtBQUs7UUFDWEMsT0FBTyxFQUFFLFNBQUFBLFFBQUE7VUFBQSxPQUFNdEMsY0FBYyxDQUFDLENBQUM7UUFBQTtNQUNoQyxDQUFDLENBQ0QsQ0FBQztJQUNILENBQUMsTUFFRDtNQUNDdkIsVUFBVSxDQUFDNEIsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUM5QjtJQUNBLE9BQU8sSUFBSTtFQUNaO0VBR0csSUFBTW1DLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFJQyxTQUFTLEVBQUs7SUFDM0IsSUFBTUMsUUFBUSxHQUFHLElBQUlyQixJQUFJLENBQUNvQixTQUFTLENBQUM7SUFDcEMsT0FBT0MsUUFBUSxDQUFDRixPQUFPLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSUUsUUFBUSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBR0QsUUFBUSxDQUFDRSxXQUFXLENBQUMsQ0FBQztFQUNsRyxDQUFDO0VBRUQsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUkzQyxJQUFJLEVBQUs7SUFDdkIsSUFBTTRDLFVBQVUsR0FBRzlELFdBQVcsQ0FBQytELE1BQU0sQ0FBQyxVQUFBQyxJQUFJO01BQUEsT0FBSUEsSUFBSSxLQUFLOUMsSUFBSTtJQUFBLEVBQUM7SUFDNUQyQixPQUFPLENBQUNDLEdBQUcsQ0FBQ2dCLFVBQVUsQ0FBQztJQUN2QmpCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZ0IsVUFBVSxDQUFDWCxNQUFNLENBQUM7SUFDOUJsRCxjQUFjLENBQUM2RCxVQUFVLENBQUM7RUFDOUIsQ0FBQztFQUVELElBQU1HLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQVM7SUFDdEJwQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDeEIxQyxlQUFlLENBQUM4RCxJQUFJLENBQUFqQixLQUFBLENBQXBCN0MsZUFBZSxNQUFBK0QsbUJBQUEsQ0FBQXBFLE9BQUEsRUFBU0MsV0FBVyxFQUFDO0lBQ3BDNkMsT0FBTyxDQUFDQyxHQUFHLENBQUMxQyxlQUFlLENBQUM7SUFDbENZLGNBQWMsQ0FBQyxDQUFDO0lBQ2hCdkIsVUFBVSxDQUFDNEIsUUFBUSxDQUFDLFFBQVEsRUFBRTtNQUM3QmpCLGVBQWUsRUFBR0E7SUFDbkIsQ0FBQyxDQUFDO0VBRUEsQ0FBQztFQUVELE9BQ0ksSUFBQWYsV0FBQSxDQUFBK0UsSUFBQSxFQUFDakYsWUFBQSxDQUFBa0YsWUFBWTtJQUFDZCxLQUFLLEVBQUVlLE1BQU0sQ0FBQ0MsU0FBVTtJQUFBQyxRQUFBLEdBQ2xDLElBQUFuRixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF1RixJQUFJO01BQUNuQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ0ssS0FBTTtNQUFBSCxRQUFBLEVBQ3RCLElBQUFuRixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF5RixJQUFJO1FBQUNyQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ08sU0FBVTtRQUFBTCxRQUFBLEVBQUM7TUFBZ0MsQ0FBTTtJQUFDLENBQ3BFLENBQUMsRUFFUCxJQUFBbkYsV0FBQSxDQUFBb0YsR0FBQSxFQUFDdEYsWUFBQSxDQUFBdUYsSUFBSTtNQUFDbkIsS0FBSyxFQUFFZSxNQUFNLENBQUNRLFlBQWE7TUFBQU4sUUFBQSxFQUM1QnhFLFdBQVcsQ0FBQ21ELE1BQU0sR0FBRyxDQUFDLElBQUksSUFBQTlELFdBQUEsQ0FBQW9GLEdBQUEsRUFBQ3RGLFlBQUEsQ0FBQTRGLFFBQVE7UUFDaENuQyxJQUFJLEVBQUU1QyxXQUFZO1FBQ2xCZ0YsVUFBVSxFQUFFLFNBQUFBLFdBQUFDLEtBQUE7VUFBQSxJQUFHL0QsSUFBSSxHQUFBK0QsS0FBQSxDQUFKL0QsSUFBSTtZQUFFZ0UsS0FBSyxHQUFBRCxLQUFBLENBQUxDLEtBQUs7VUFBQSxPQUN0QixJQUFBN0YsV0FBQSxDQUFBK0UsSUFBQSxFQUFDakYsWUFBQSxDQUFBdUYsSUFBSTtZQUFDbkIsS0FBSyxFQUFFZSxNQUFNLENBQUNhLG9CQUFxQjtZQUFBWCxRQUFBLEdBQ3JDLElBQUFuRixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF1RixJQUFJO2NBQUNuQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ2MsMEJBQTJCO2NBQUFaLFFBQUEsRUFDM0MsSUFBQW5GLFdBQUEsQ0FBQStFLElBQUEsRUFBQ2pGLFlBQUEsQ0FBQXlGLElBQUk7Z0JBQUNyQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ2UsT0FBUTtnQkFBQWIsUUFBQSxHQUFDLGNBQVksRUFBQ1UsS0FBSyxHQUFHLENBQUM7Y0FBQSxDQUFPO1lBQUMsQ0FDekQsQ0FBQyxFQUNQLElBQUE3RixXQUFBLENBQUErRSxJQUFBLEVBQUNqRixZQUFBLENBQUF1RixJQUFJO2NBQUNuQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ2dCLHlCQUEwQjtjQUFBZCxRQUFBLEdBQzFDLElBQUFuRixXQUFBLENBQUErRSxJQUFBLEVBQUNqRixZQUFBLENBQUF1RixJQUFJO2dCQUFDbkIsS0FBSyxFQUFFZSxNQUFNLENBQUNpQiwyQkFBNEI7Z0JBQUFmLFFBQUEsR0FDNUMsSUFBQW5GLFdBQUEsQ0FBQW9GLEdBQUEsRUFBQ3RGLFlBQUEsQ0FBQXlGLElBQUk7a0JBQUNyQixLQUFLLEVBQUVlLE1BQU0sQ0FBQ2tCLElBQUs7a0JBQUFoQixRQUFBLEVBQUM7Z0JBQUksQ0FBTSxDQUFDLEVBQ3JDLElBQUFuRixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF5RixJQUFJO2tCQUFBSixRQUFBLEVBQUVoQixPQUFPLENBQUN0QyxJQUFJLENBQUNvQixJQUFJO2dCQUFDLENBQU8sQ0FBQztjQUFBLENBQy9CLENBQUMsRUFDUCxJQUFBakQsV0FBQSxDQUFBK0UsSUFBQSxFQUFDakYsWUFBQSxDQUFBdUYsSUFBSTtnQkFBQ25CLEtBQUssRUFBRWUsTUFBTSxDQUFDaUIsMkJBQTRCO2dCQUFBZixRQUFBLEdBQzVDLElBQUFuRixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF5RixJQUFJO2tCQUFDckIsS0FBSyxFQUFFZSxNQUFNLENBQUNrQixJQUFLO2tCQUFBaEIsUUFBQSxFQUFDO2dCQUFNLENBQU0sQ0FBQyxFQUN2QyxJQUFBbkYsV0FBQSxDQUFBb0YsR0FBQSxFQUFDdEYsWUFBQSxDQUFBeUYsSUFBSTtrQkFBQUosUUFBQSxFQUFFdEQsSUFBSSxDQUFDaUI7Z0JBQU0sQ0FBTyxDQUFDO2NBQUEsQ0FDeEIsQ0FBQyxFQUNQLElBQUE5QyxXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUF1RixJQUFJO2dCQUFDbkIsS0FBSyxFQUFFZSxNQUFNLENBQUNnQix5QkFBMEI7Z0JBQUFkLFFBQUEsRUFJMUMsSUFBQW5GLFdBQUEsQ0FBQW9GLEdBQUEsRUFBQ3RGLFlBQUEsQ0FBQXNHLGdCQUFnQjtrQkFBQ2xDLEtBQUssRUFBRSxDQUFDZSxNQUFNLENBQUNvQix3QkFBd0IsRUFBRXBCLE1BQU0sQ0FBQ3FCLFNBQVMsQ0FBRTtrQkFBQ3JDLE9BQU8sRUFBRSxTQUFBQSxRQUFBO29CQUFBLE9BQU1PLFFBQVEsQ0FBQzNDLElBQUksQ0FBQztrQkFBQSxDQUFDO2tCQUFBc0QsUUFBQSxFQUN4RyxJQUFBbkYsV0FBQSxDQUFBb0YsR0FBQSxFQUFDdEYsWUFBQSxDQUFBeUcsS0FBSztvQkFBQ0MsTUFBTSxFQUFFM0csT0FBTyxDQUFDLHlCQUF5QixDQUFFO29CQUFDcUUsS0FBSyxFQUFFZSxNQUFNLENBQUN3QjtrQkFBSSxDQUFFO2dCQUFDLENBQzFEO2NBQUMsQ0FDakIsQ0FBQztZQUFBLENBQ0wsQ0FBQztVQUFBLENBQ0wsQ0FBQztRQUFBLENBQ1Y7UUFDREMsbUJBQW1CLEVBQUUsSUFBSztRQUMxQnZGLFNBQVMsRUFBRUE7TUFBVSxDQUN4QjtJQUFDLENBQ0EsQ0FBQyxFQUVQLElBQUFuQixXQUFBLENBQUFvRixHQUFBLEVBQUN0RixZQUFBLENBQUFzRyxnQkFBZ0I7TUFBRWxDLEtBQUssRUFBRSxDQUFDZSxNQUFNLENBQUMwQixZQUFZLEVBQUVoRyxXQUFXLENBQUNtRCxNQUFNLEdBQUMsQ0FBQyxHQUFHbUIsTUFBTSxDQUFDMkIsT0FBTyxHQUFHM0IsTUFBTSxDQUFDNEIsUUFBUSxDQUFFO01BQUNBLFFBQVEsRUFBR2xHLFdBQVcsQ0FBQ21ELE1BQU0sR0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUs7TUFBQ0csT0FBTyxFQUFFLFNBQUFBLFFBQUE7UUFBQSxPQUFNVyxXQUFXLENBQUMsQ0FBQztNQUFBLENBQUM7TUFBQU8sUUFBQSxFQUNuTCxJQUFBbkYsV0FBQSxDQUFBb0YsR0FBQSxFQUFDdEYsWUFBQSxDQUFBeUYsSUFBSTtRQUFDckIsS0FBSyxFQUFFZSxNQUFNLENBQUM2QixnQkFBaUI7UUFBQTNCLFFBQUEsRUFBQztNQUF1QixDQUFNO0lBQUMsQ0FDdEQsQ0FBQztFQUFBLENBQ1QsQ0FBQztBQUV2QixDQUFDO0FBQUEsSUFBQTRCLFFBQUEsR0FFYzlHLHdCQUF3QjtBQUFBK0csT0FBQSxDQUFBdEcsT0FBQSxHQUFBcUcsUUFBQTtBQUd2QyxJQUFNOUIsTUFBTSxHQUFHZ0MsdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBRWhDaEMsU0FBUyxFQUFFO0lBQ1ZpQyxPQUFPLEVBQUU7RUFDVixDQUFDO0VBRUQ3QixLQUFLLEVBQUU7SUFDTjhCLGVBQWUsRUFBRSxpQkFBaUI7SUFDbENDLE1BQU0sRUFBRSxJQUFJO0lBQ1pGLE9BQU8sRUFBRSxDQUFDO0lBQ1ZHLGFBQWEsRUFBRSxLQUFLO0lBQ3BCQyxjQUFjLEVBQUUsUUFBUTtJQUN4QkMsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUVEaEMsU0FBUyxFQUFFO0lBQ1ZpQyxTQUFTLEVBQUUsUUFBUTtJQUNuQkMsUUFBUSxFQUFFLEVBQUU7SUFDWkMsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUNEbEMsWUFBWSxFQUFFO0lBQ2I0QixNQUFNLEVBQUU7RUFDVCxDQUFDO0VBQ0R2QixvQkFBb0IsRUFBRTtJQUNyQnNCLGVBQWUsRUFBRSxrQkFBa0I7SUFDbkNRLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CQyxjQUFjLEVBQUUsQ0FBQztJQUNqQlIsYUFBYSxFQUFFLFFBQVE7SUFDdkJDLGNBQWMsRUFBRSxjQUFjO0lBQzlCQyxVQUFVLEVBQUU7RUFDYixDQUFDO0VBQ0R6QiwwQkFBMEIsRUFBRTtJQUMzQmdDLEtBQUssRUFBRSxNQUFNO0lBQ2JULGFBQWEsRUFBRSxRQUFRO0lBQ3ZCQyxjQUFjLEVBQUU7RUFDakIsQ0FBQztFQUNEdkIsT0FBTyxFQUFFO0lBQ1JnQyxpQkFBaUIsRUFBRWYsdUJBQVUsQ0FBQ2dCLGFBQWE7SUFDM0NkLE9BQU8sRUFBRSxDQUFDO0lBQ1ZVLGdCQUFnQixFQUFFLEVBQUU7SUFDcEJGLFVBQVUsRUFBRTtFQUNiLENBQUM7RUFDRDFCLHlCQUF5QixFQUFFO0lBQzFCcUIsYUFBYSxFQUFFLEtBQUs7SUFDcEJDLGNBQWMsRUFBRSxjQUFjO0lBQzlCQyxVQUFVLEVBQUUsUUFBUTtJQUNwQkwsT0FBTyxFQUFFO0VBQ1YsQ0FBQztFQUNEakIsMkJBQTJCLEVBQUU7SUFDNUJvQixhQUFhLEVBQUUsUUFBUTtJQUN2QkUsVUFBVSxFQUFFLFFBQVE7SUFDcEJVLFNBQVMsRUFBRSxDQUFDO0lBQ1pDLFFBQVEsRUFBRTtFQUNYLENBQUM7RUFDRGhDLElBQUksRUFBRTtJQUNMd0IsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUNEdEIsd0JBQXdCLEVBQUU7SUFDekJvQixTQUFTLEVBQUUsUUFBUTtJQUNuQk4sT0FBTyxFQUFFLENBQUM7SUFDVlksS0FBSyxFQUFFLEVBQUU7SUFDVFYsTUFBTSxFQUFFLEVBQUU7SUFDVlEsZ0JBQWdCLEVBQUUsRUFBRTtJQUNwQkQsWUFBWSxFQUFFLEVBQUU7SUFDaEJOLGFBQWEsRUFBRSxRQUFRO0lBQ3ZCQyxjQUFjLEVBQUU7RUFFakIsQ0FBQztFQUNEZCxHQUFHLEVBQUU7SUFDSnNCLEtBQUssRUFBRSxFQUFFO0lBQ1RWLE1BQU0sRUFBRSxFQUFFO0lBQ1ZlLFNBQVMsRUFBRTtFQUNaLENBQUM7RUFDREMsU0FBUyxFQUFFO0lBQ1ZqQixlQUFlLEVBQUU7RUFDbEIsQ0FBQztFQUNEZCxTQUFTLEVBQUU7SUFDVmMsZUFBZSxFQUFFO0VBQ2xCLENBQUM7RUFDRFQsWUFBWSxFQUFFO0lBQ2JTLGVBQWUsRUFBRSxPQUFPO0lBQ3hCQyxNQUFNLEVBQUUsTUFBTTtJQUNkTyxZQUFZLEVBQUUsRUFBRTtJQUNoQlUsTUFBTSxFQUFFLENBQUM7SUFDVGhCLGFBQWEsRUFBRSxRQUFRO0lBQ3ZCQyxjQUFjLEVBQUUsUUFBUTtJQUN4QkMsVUFBVSxFQUFFO0VBQ2IsQ0FBQztFQUNEVixnQkFBZ0IsRUFBRTtJQUNqQlcsU0FBUyxFQUFFLFFBQVE7SUFDbkJjLEtBQUssRUFBRSxPQUFPO0lBQ2RiLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRTtFQUNiLENBQUM7RUFDRGQsUUFBUSxFQUFFO0lBQ1QyQixPQUFPLEVBQUU7RUFDUixDQUFDO0VBQ0Q1QixPQUFPLEVBQUU7SUFDUjRCLE9BQU8sRUFBRTtFQUNWO0FBRUgsQ0FBQyxDQUFDIn0=