c66f367ee4ea6bf97311c9ec18187a9d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMultiStyleIconSet;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _createIconSet = _interopRequireWildcard(require("./create-icon-set"));
var _jsxFileName = "/home/runner/work/react-native-vector-icons/react-native-vector-icons/lib/create-multi-style-icon-set.js";
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function createMultiStyleIconSet(styles) {
  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var styleNames = Object.keys(styles);
  if (styleNames.length === 0) {
    throw new Error('You need to add at least one style');
  }
  var options = (0, _extends2.default)({
    defaultStyle: styleNames[0],
    fallbackFamily: function fallbackFamily() {
      return styleNames[0];
    },
    glyphValidator: function glyphValidator() {
      return true;
    }
  }, optionsInput);
  var iconSets = styleNames.reduce(function (acc, name) {
    var style = styles[name];
    acc[name] = (0, _createIconSet.default)(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});
    return acc;
  }, {});
  function styleFromProps(props) {
    return Object.keys(props).reduce(function (result, propName) {
      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;
    }, options.defaultStyle);
  }
  function getIconSetForProps(props) {
    var name = props.name;
    var style = styleFromProps(props);
    if (options.glyphValidator(name, style)) return iconSets[style];
    var family = options.fallbackFamily(name);
    if (styleNames.indexOf(family) === -1) {
      return options.defaultStyle;
    }
    return iconSets[family];
  }
  function selectIconClass(iconSet, iconClass) {
    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;
  }
  function reduceProps(props) {
    return Object.keys(props).reduce(function (acc, prop) {
      if (styleNames.indexOf(prop) === -1) {
        acc[prop] = props[prop];
      }
      return acc;
    }, {});
  }
  function getStyledIconSet(style) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (styleNames.indexOf(style) === -1) {
      return iconSets[options.defaultStyle];
    }
    return !name ? iconSets[styleFromProps((0, _defineProperty2.default)({}, style, true))] : getIconSetForProps((0, _defineProperty2.default)({
      name: name
    }, style, true));
  }
  function getImageSource(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _createIconSet.DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _createIconSet.DEFAULT_ICON_COLOR;
    var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : options.defaultStyle;
    return getStyledIconSet(style, name).getImageSource(name, size, color);
  }
  function getFontFamily() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;
    return getStyledIconSet(style).getFontFamily();
  }
  function getRawGlyphMap() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;
    return getStyledIconSet(style).getRawGlyphMap();
  }
  function hasIcon(name) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;
    return options.glyphValidator(name, style);
  }
  function createStyledIconClass() {
    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var IconClass = function (_PureComponent) {
      (0, _inherits2.default)(IconClass, _PureComponent);
      function IconClass() {
        (0, _classCallCheck2.default)(this, IconClass);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IconClass).apply(this, arguments));
      }
      (0, _createClass2.default)(IconClass, [{
        key: "render",
        value: function render() {
          var selectedIconSet = getIconSetForProps(this.props);
          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);
          var props = reduceProps(this.props);
          return _react.default.createElement(SelectedIconClass, (0, _extends2.default)({}, props, {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 123
            }
          }));
        }
      }]);
      return IconClass;
    }(_react.PureComponent);
    IconClass.propTypes = styleNames.reduce(function (acc, name) {
      acc[name] = _propTypes.default.bool;
      return acc;
    }, {});
    IconClass.defaultProps = styleNames.reduce(function (acc, name) {
      acc[name] = false;
      return acc;
    }, {});
    return IconClass;
  }
  var Icon = createStyledIconClass();
  Icon.Button = createStyledIconClass('Button');
  Icon.getStyledIconSet = getStyledIconSet;
  Icon.getImageSource = getImageSource;
  Icon.getFontFamily = getFontFamily;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.hasIcon = hasIcon;
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImNyZWF0ZU11bHRpU3R5bGVJY29uU2V0IiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2luaGVyaXRzMiIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfZXh0ZW5kczIiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9wcm9wVHlwZXMiLCJfY3JlYXRlSWNvblNldCIsIl9qc3hGaWxlTmFtZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJzdHlsZXMiLCJvcHRpb25zSW5wdXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJzdHlsZU5hbWVzIiwia2V5cyIsIkVycm9yIiwib3B0aW9ucyIsImRlZmF1bHRTdHlsZSIsImZhbGxiYWNrRmFtaWx5IiwiZ2x5cGhWYWxpZGF0b3IiLCJpY29uU2V0cyIsInJlZHVjZSIsImFjYyIsIm5hbWUiLCJzdHlsZSIsImdseXBoTWFwIiwiZm9udEZhbWlseSIsImZvbnRGaWxlIiwiZm9udFN0eWxlIiwic3R5bGVGcm9tUHJvcHMiLCJwcm9wcyIsInJlc3VsdCIsInByb3BOYW1lIiwiaW5kZXhPZiIsImdldEljb25TZXRGb3JQcm9wcyIsImZhbWlseSIsInNlbGVjdEljb25DbGFzcyIsImljb25TZXQiLCJpY29uQ2xhc3MiLCJyZWR1Y2VQcm9wcyIsInByb3AiLCJnZXRTdHlsZWRJY29uU2V0IiwiZ2V0SW1hZ2VTb3VyY2UiLCJzaXplIiwiREVGQVVMVF9JQ09OX1NJWkUiLCJjb2xvciIsIkRFRkFVTFRfSUNPTl9DT0xPUiIsImdldEZvbnRGYW1pbHkiLCJnZXRSYXdHbHlwaE1hcCIsImhhc0ljb24iLCJjcmVhdGVTdHlsZWRJY29uQ2xhc3MiLCJzZWxlY3RDbGFzcyIsIkljb25DbGFzcyIsIl9QdXJlQ29tcG9uZW50IiwiYXBwbHkiLCJyZW5kZXIiLCJzZWxlY3RlZEljb25TZXQiLCJTZWxlY3RlZEljb25DbGFzcyIsImNyZWF0ZUVsZW1lbnQiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIlB1cmVDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJib29sIiwiZGVmYXVsdFByb3BzIiwiSWNvbiIsIkJ1dHRvbiJdLCJzb3VyY2VzIjpbImNyZWF0ZS1tdWx0aS1zdHlsZS1pY29uLXNldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9Y3JlYXRlTXVsdGlTdHlsZUljb25TZXQ7dmFyIF9jbGFzc0NhbGxDaGVjazI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7dmFyIF9jcmVhdGVDbGFzczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7dmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO3ZhciBfZ2V0UHJvdG90eXBlT2YyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO3ZhciBfaW5oZXJpdHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO3ZhciBfZGVmaW5lUHJvcGVydHkyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTt2YXIgX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7dmFyIF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7dmFyIF9jcmVhdGVJY29uU2V0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2NyZWF0ZS1pY29uLXNldFwiKSk7dmFyIF9qc3hGaWxlTmFtZT1cIi9ob21lL3J1bm5lci93b3JrL3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvcmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9saWIvY3JlYXRlLW11bHRpLXN0eWxlLWljb24tc2V0LmpzXCI7ZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKXtpZih0eXBlb2YgV2Vha01hcCE9PVwiZnVuY3Rpb25cIilyZXR1cm4gbnVsbDt2YXIgY2FjaGVCYWJlbEludGVyb3A9bmV3IFdlYWtNYXAoKTt2YXIgY2FjaGVOb2RlSW50ZXJvcD1uZXcgV2Vha01hcCgpO3JldHVybihfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGU9ZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKXtyZXR1cm4gbm9kZUludGVyb3A/Y2FjaGVOb2RlSW50ZXJvcDpjYWNoZUJhYmVsSW50ZXJvcDt9KShub2RlSW50ZXJvcCk7fWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaixub2RlSW50ZXJvcCl7aWYoIW5vZGVJbnRlcm9wJiZvYmomJm9iai5fX2VzTW9kdWxlKXtyZXR1cm4gb2JqO31pZihvYmo9PT1udWxsfHx0eXBlb2Ygb2JqIT09XCJvYmplY3RcIiYmdHlwZW9mIG9iaiE9PVwiZnVuY3Rpb25cIil7cmV0dXJue2RlZmF1bHQ6b2JqfTt9dmFyIGNhY2hlPV9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7aWYoY2FjaGUmJmNhY2hlLmhhcyhvYmopKXtyZXR1cm4gY2FjaGUuZ2V0KG9iaik7fXZhciBuZXdPYmo9e307dmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcj1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBrZXkgaW4gb2JqKXtpZihrZXkhPT1cImRlZmF1bHRcIiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixrZXkpKXt2YXIgZGVzYz1oYXNQcm9wZXJ0eURlc2NyaXB0b3I/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosa2V5KTpudWxsO2lmKGRlc2MmJihkZXNjLmdldHx8ZGVzYy5zZXQpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLGtleSxkZXNjKTt9ZWxzZXtuZXdPYmpba2V5XT1vYmpba2V5XTt9fX1uZXdPYmouZGVmYXVsdD1vYmo7aWYoY2FjaGUpe2NhY2hlLnNldChvYmosbmV3T2JqKTt9cmV0dXJuIG5ld09iajt9ZnVuY3Rpb24gY3JlYXRlTXVsdGlTdHlsZUljb25TZXQoc3R5bGVzKXt2YXIgb3B0aW9uc0lucHV0PWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTp7fTt2YXIgc3R5bGVOYW1lcz1PYmplY3Qua2V5cyhzdHlsZXMpO2lmKHN0eWxlTmFtZXMubGVuZ3RoPT09MCl7dGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBhZGQgYXQgbGVhc3Qgb25lIHN0eWxlJyk7fXZhciBvcHRpb25zPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7ZGVmYXVsdFN0eWxlOnN0eWxlTmFtZXNbMF0sZmFsbGJhY2tGYW1pbHk6ZnVuY3Rpb24gZmFsbGJhY2tGYW1pbHkoKXtyZXR1cm4gc3R5bGVOYW1lc1swXTt9LGdseXBoVmFsaWRhdG9yOmZ1bmN0aW9uIGdseXBoVmFsaWRhdG9yKCl7cmV0dXJuIHRydWU7fX0sb3B0aW9uc0lucHV0KTt2YXIgaWNvblNldHM9c3R5bGVOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oYWNjLG5hbWUpe3ZhciBzdHlsZT1zdHlsZXNbbmFtZV07YWNjW25hbWVdPSgwLF9jcmVhdGVJY29uU2V0LmRlZmF1bHQpKHN0eWxlLmdseXBoTWFwfHx7fSxzdHlsZS5mb250RmFtaWx5fHwnJyxzdHlsZS5mb250RmlsZXx8Jycsc3R5bGUuZm9udFN0eWxlfHx7fSk7cmV0dXJuIGFjYzt9LHt9KTtmdW5jdGlvbiBzdHlsZUZyb21Qcm9wcyhwcm9wcyl7cmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LHByb3BOYW1lKXtyZXR1cm4gc3R5bGVOYW1lcy5pbmRleE9mKHByb3BOYW1lKSE9PS0xJiZwcm9wc1twcm9wTmFtZV09PT10cnVlP3Byb3BOYW1lOnJlc3VsdDt9LG9wdGlvbnMuZGVmYXVsdFN0eWxlKTt9ZnVuY3Rpb24gZ2V0SWNvblNldEZvclByb3BzKHByb3BzKXt2YXIgbmFtZT1wcm9wcy5uYW1lO3ZhciBzdHlsZT1zdHlsZUZyb21Qcm9wcyhwcm9wcyk7aWYob3B0aW9ucy5nbHlwaFZhbGlkYXRvcihuYW1lLHN0eWxlKSlyZXR1cm4gaWNvblNldHNbc3R5bGVdO3ZhciBmYW1pbHk9b3B0aW9ucy5mYWxsYmFja0ZhbWlseShuYW1lKTtpZihzdHlsZU5hbWVzLmluZGV4T2YoZmFtaWx5KT09PS0xKXtyZXR1cm4gb3B0aW9ucy5kZWZhdWx0U3R5bGU7fXJldHVybiBpY29uU2V0c1tmYW1pbHldO31mdW5jdGlvbiBzZWxlY3RJY29uQ2xhc3MoaWNvblNldCxpY29uQ2xhc3Mpe3JldHVybiBpY29uQ2xhc3MubGVuZ3RoPjA/aWNvblNldFtpY29uQ2xhc3NdOmljb25TZXQ7fWZ1bmN0aW9uIHJlZHVjZVByb3BzKHByb3BzKXtyZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbihhY2MscHJvcCl7aWYoc3R5bGVOYW1lcy5pbmRleE9mKHByb3ApPT09LTEpe2FjY1twcm9wXT1wcm9wc1twcm9wXTt9cmV0dXJuIGFjYzt9LHt9KTt9ZnVuY3Rpb24gZ2V0U3R5bGVkSWNvblNldChzdHlsZSl7dmFyIG5hbWU9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOicnO2lmKHN0eWxlTmFtZXMuaW5kZXhPZihzdHlsZSk9PT0tMSl7cmV0dXJuIGljb25TZXRzW29wdGlvbnMuZGVmYXVsdFN0eWxlXTt9cmV0dXJuIW5hbWU/aWNvblNldHNbc3R5bGVGcm9tUHJvcHMoKDAsX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSxzdHlsZSx0cnVlKSldOmdldEljb25TZXRGb3JQcm9wcygoMCxfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHtuYW1lOm5hbWV9LHN0eWxlLHRydWUpKTt9ZnVuY3Rpb24gZ2V0SW1hZ2VTb3VyY2UobmFtZSl7dmFyIHNpemU9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOl9jcmVhdGVJY29uU2V0LkRFRkFVTFRfSUNPTl9TSVpFO3ZhciBjb2xvcj1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMl06X2NyZWF0ZUljb25TZXQuREVGQVVMVF9JQ09OX0NPTE9SO3ZhciBzdHlsZT1hcmd1bWVudHMubGVuZ3RoPjMmJmFyZ3VtZW50c1szXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbM106b3B0aW9ucy5kZWZhdWx0U3R5bGU7cmV0dXJuIGdldFN0eWxlZEljb25TZXQoc3R5bGUsbmFtZSkuZ2V0SW1hZ2VTb3VyY2UobmFtZSxzaXplLGNvbG9yKTt9ZnVuY3Rpb24gZ2V0Rm9udEZhbWlseSgpe3ZhciBzdHlsZT1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06b3B0aW9ucy5kZWZhdWx0U3R5bGU7cmV0dXJuIGdldFN0eWxlZEljb25TZXQoc3R5bGUpLmdldEZvbnRGYW1pbHkoKTt9ZnVuY3Rpb24gZ2V0UmF3R2x5cGhNYXAoKXt2YXIgc3R5bGU9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOm9wdGlvbnMuZGVmYXVsdFN0eWxlO3JldHVybiBnZXRTdHlsZWRJY29uU2V0KHN0eWxlKS5nZXRSYXdHbHlwaE1hcCgpO31mdW5jdGlvbiBoYXNJY29uKG5hbWUpe3ZhciBzdHlsZT1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06b3B0aW9ucy5kZWZhdWx0U3R5bGU7cmV0dXJuIG9wdGlvbnMuZ2x5cGhWYWxpZGF0b3IobmFtZSxzdHlsZSk7fWZ1bmN0aW9uIGNyZWF0ZVN0eWxlZEljb25DbGFzcygpe3ZhciBzZWxlY3RDbGFzcz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06Jyc7dmFyIEljb25DbGFzcz1mdW5jdGlvbihfUHVyZUNvbXBvbmVudCl7KDAsX2luaGVyaXRzMi5kZWZhdWx0KShJY29uQ2xhc3MsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIEljb25DbGFzcygpeygwLF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcyxJY29uQ2xhc3MpO3JldHVybigwLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCgwLF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoSWNvbkNsYXNzKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpO30oMCxfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEljb25DbGFzcyxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBzZWxlY3RlZEljb25TZXQ9Z2V0SWNvblNldEZvclByb3BzKHRoaXMucHJvcHMpO3ZhciBTZWxlY3RlZEljb25DbGFzcz1zZWxlY3RJY29uQ2xhc3Moc2VsZWN0ZWRJY29uU2V0LHNlbGVjdENsYXNzKTt2YXIgcHJvcHM9cmVkdWNlUHJvcHModGhpcy5wcm9wcyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0ZWRJY29uQ2xhc3MsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHByb3BzLHtfX3NlbGY6dGhpcyxfX3NvdXJjZTp7ZmlsZU5hbWU6X2pzeEZpbGVOYW1lLGxpbmVOdW1iZXI6MTIzfX0pKTt9fV0pO3JldHVybiBJY29uQ2xhc3M7fShfcmVhY3QuUHVyZUNvbXBvbmVudCk7SWNvbkNsYXNzLnByb3BUeXBlcz1zdHlsZU5hbWVzLnJlZHVjZShmdW5jdGlvbihhY2MsbmFtZSl7YWNjW25hbWVdPV9wcm9wVHlwZXMuZGVmYXVsdC5ib29sO3JldHVybiBhY2M7fSx7fSk7SWNvbkNsYXNzLmRlZmF1bHRQcm9wcz1zdHlsZU5hbWVzLnJlZHVjZShmdW5jdGlvbihhY2MsbmFtZSl7YWNjW25hbWVdPWZhbHNlO3JldHVybiBhY2M7fSx7fSk7cmV0dXJuIEljb25DbGFzczt9dmFyIEljb249Y3JlYXRlU3R5bGVkSWNvbkNsYXNzKCk7SWNvbi5CdXR0b249Y3JlYXRlU3R5bGVkSWNvbkNsYXNzKCdCdXR0b24nKTtJY29uLmdldFN0eWxlZEljb25TZXQ9Z2V0U3R5bGVkSWNvblNldDtJY29uLmdldEltYWdlU291cmNlPWdldEltYWdlU291cmNlO0ljb24uZ2V0Rm9udEZhbWlseT1nZXRGb250RmFtaWx5O0ljb24uZ2V0UmF3R2x5cGhNYXA9Z2V0UmF3R2x5cGhNYXA7SWNvbi5oYXNJY29uPWhhc0ljb247cmV0dXJuIEljb247fSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsc0JBQXNCLEdBQUNDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUFDQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFDLFlBQVksRUFBQztFQUFDQyxLQUFLLEVBQUM7QUFBSSxDQUFDLENBQUM7QUFBQ0QsT0FBTyxDQUFDRSxPQUFPLEdBQUNDLHVCQUF1QjtBQUFDLElBQUlDLGdCQUFnQixHQUFDUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFBQyxJQUFJUSxhQUFhLEdBQUNULHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUFDLElBQUlTLDJCQUEyQixHQUFDVixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7QUFBQyxJQUFJVSxnQkFBZ0IsR0FBQ1gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQUMsSUFBSVcsVUFBVSxHQUFDWixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFBQyxJQUFJWSxnQkFBZ0IsR0FBQ2Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQUMsSUFBSWEsU0FBUyxHQUFDZCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFBQyxJQUFJYyxNQUFNLEdBQUNDLHVCQUF1QixDQUFD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