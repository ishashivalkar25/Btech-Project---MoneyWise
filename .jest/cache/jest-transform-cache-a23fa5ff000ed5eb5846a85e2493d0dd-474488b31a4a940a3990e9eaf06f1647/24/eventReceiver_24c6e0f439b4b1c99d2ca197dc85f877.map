{"version":3,"names":["_reactNative","require","_State","_TouchEventType","_handlersRegistry","_gestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","_handler$handlers7","_handler$handlers7$on","_handler$handlers8","_handler$handlers8$on","_handler$handlers9","_handler$handlers9$on","_handler$handlers10","_handler$handlers10$o","handler","findHandler","handlerTag","State","UNDETERMINED","state","BEGAN","_handler$handlers$onB","_handler$handlers","handlers","onBegin","call","ACTIVE","_handler$handlers$onS","_handler$handlers2","onStart","END","_handler$handlers$onF","_handler$handlers4","_handler$handlers$onE","_handler$handlers3","onEnd","onFinalize","undefined","FAILED","CANCELLED","_handler$handlers$onF2","_handler$handlers6","_handler$handlers$onE2","_handler$handlers5","delete","has","set","GestureStateManager","create","manager","get","TouchEventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","_handler$handlers$onU","_handler$handlers11","onUpdate","onChange","changeEventCalculator","_handler$handlers$onC","_handler$handlers12","_handler$handlers$cha","_handler$handlers13","oldHandler","findOldGestureHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"],"mappings":"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"}