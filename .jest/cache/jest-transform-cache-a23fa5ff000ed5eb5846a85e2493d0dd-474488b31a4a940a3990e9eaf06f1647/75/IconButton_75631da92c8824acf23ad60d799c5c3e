32810527fea43a29e9e6267511969219
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "iconColor", "containerColor", "size", "accessibilityLabel", "disabled", "onPress", "selected", "animated", "mode", "style", "theme", "testID"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _CrossFadeIcon = _interopRequireDefault(require("../CrossFadeIcon"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _utils = require("./utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var PADDING = 8;
var IconButton = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
    customIconColor = _ref.iconColor,
    customContainerColor = _ref.containerColor,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    accessibilityLabel = _ref.accessibilityLabel,
    disabled = _ref.disabled,
    onPress = _ref.onPress,
    _ref$selected = _ref.selected,
    selected = _ref$selected === void 0 ? false : _ref$selected,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? false : _ref$animated,
    mode = _ref.mode,
    style = _ref.style,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'icon-button' : _ref$testID,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3;
  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
  var _ref2 = (0, _utils.getIconButtonColor)({
      theme: theme,
      disabled: disabled,
      selected: selected,
      mode: mode,
      customIconColor: customIconColor,
      customContainerColor: customContainerColor
    }),
    iconColor = _ref2.iconColor,
    rippleColor = _ref2.rippleColor,
    backgroundColor = _ref2.backgroundColor,
    borderColor = _ref2.borderColor;
  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;
  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
    _ref3$borderWidth = _ref3.borderWidth,
    borderWidth = _ref3$borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref3$borderWidth,
    _ref3$borderRadius = _ref3.borderRadius,
    borderRadius = _ref3$borderRadius === void 0 ? buttonSize / 2 : _ref3$borderRadius;
  var borderStyles = {
    borderWidth: borderWidth,
    borderRadius: borderRadius,
    borderColor: borderColor
  };
  return React.createElement(_Surface.default, _extends({
    ref: ref,
    testID: testID + "-container",
    style: [{
      backgroundColor: backgroundColor,
      width: buttonSize,
      height: buttonSize
    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]
  }, isV3 && {
    elevation: 0
  }), React.createElement(_TouchableRipple.default, _extends({
    borderless: true,
    centered: true,
    onPress: onPress,
    rippleColor: rippleColor,
    accessibilityLabel: accessibilityLabel,
    style: [styles.touchable, {
      borderRadius: borderRadius
    }],
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      disabled: disabled
    },
    disabled: disabled,
    hitSlop: _TouchableRipple.default.supported ? {
      top: 10,
      left: 10,
      bottom: 10,
      right: 10
    } : {
      top: 6,
      left: 6,
      bottom: 6,
      right: 6
    },
    testID: testID
  }, rest), React.createElement(IconComponent, {
    color: iconColor,
    source: icon,
    size: size
  })));
});
var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden',
    margin: 6,
    elevation: 0
  },
  touchable: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  disabled: {
    opacity: 0.32
  }
});
var _default = IconButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,