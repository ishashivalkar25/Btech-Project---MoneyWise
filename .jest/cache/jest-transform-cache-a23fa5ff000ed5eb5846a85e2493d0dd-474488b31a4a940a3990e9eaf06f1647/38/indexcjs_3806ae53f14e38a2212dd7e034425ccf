da34ffd7ada0c0472566ec2e435bbf2b
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var component = require('@firebase/component');
var tslib = require('tslib');
var logger$1 = require('@firebase/logger');
var util = require('@firebase/util');
var idb = require('idb');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PlatformLoggerServiceImpl = function () {
  function PlatformLoggerServiceImpl(container) {
    this.container = container;
  }
  PlatformLoggerServiceImpl.prototype.getPlatformInfoString = function () {
    var providers = this.container.getProviders();
    return providers.map(function (provider) {
      if (isVersionServiceProvider(provider)) {
        var service = provider.getImmediate();
        return "".concat(service.library, "/").concat(service.version);
      } else {
        return null;
      }
    }).filter(function (logString) {
      return logString;
    }).join(' ');
  };
  return PlatformLoggerServiceImpl;
}();
function isVersionServiceProvider(provider) {
  var component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
}
var name$o = "@firebase/app";
var version$1 = "0.9.9";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var logger = new logger$1.Logger('@firebase/app');
var name$n = "@firebase/app-compat";
var name$m = "@firebase/analytics-compat";
var name$l = "@firebase/analytics";
var name$k = "@firebase/app-check-compat";
var name$j = "@firebase/app-check";
var name$i = "@firebase/auth";
var name$h = "@firebase/auth-compat";
var name$g = "@firebase/database";
var name$f = "@firebase/database-compat";
var name$e = "@firebase/functions";
var name$d = "@firebase/functions-compat";
var name$c = "@firebase/installations";
var name$b = "@firebase/installations-compat";
var name$a = "@firebase/messaging";
var name$9 = "@firebase/messaging-compat";
var name$8 = "@firebase/performance";
var name$7 = "@firebase/performance-compat";
var name$6 = "@firebase/remote-config";
var name$5 = "@firebase/remote-config-compat";
var name$4 = "@firebase/storage";
var name$3 = "@firebase/storage-compat";
var name$2 = "@firebase/firestore";
var name$1 = "@firebase/firestore-compat";
var name = "firebase";
var version = "9.21.0";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$1;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$o] = 'fire-core', _a$1[name$n] = 'fire-core-compat', _a$1[name$l] = 'fire-analytics', _a$1[name$m] = 'fire-analytics-compat', _a$1[name$j] = 'fire-app-check', _a$1[name$k] = 'fire-app-check-compat', _a$1[name$i] = 'fire-auth', _a$1[name$h] = 'fire-auth-compat', _a$1[name$g] = 'fire-rtdb', _a$1[name$f] = 'fire-rtdb-compat', _a$1[name$e] = 'fire-fn', _a$1[name$d] = 'fire-fn-compat', _a$1[name$c] = 'fire-iid', _a$1[name$b] = 'fire-iid-compat', _a$1[name$a] = 'fire-fcm', _a$1[name$9] = 'fire-fcm-compat', _a$1[name$8] = 'fire-perf', _a$1[name$7] = 'fire-perf-compat', _a$1[name$6] = 'fire-rc', _a$1[name$5] = 'fire-rc-compat', _a$1[name$4] = 'fire-gcs', _a$1[name$3] = 'fire-gcs-compat', _a$1[name$2] = 'fire-fst', _a$1[name$1] = 'fire-fst-compat', _a$1['fire-js'] = 'fire-js', _a$1[name] = 'fire-js-all', _a$1);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _apps = new Map();
var _components = new Map();
function _addComponent(app, component) {
  try {
    app.container.addComponent(component);
  } catch (e) {
    logger.debug("Component ".concat(component.name, " failed to register with FirebaseApp ").concat(app.name), e);
  }
}
function _addOrOverwriteComponent(app, component) {
  app.container.addOrOverwriteComponent(component);
}
function _registerComponent(component) {
  var e_1, _a;
  var componentName = component.name;
  if (_components.has(componentName)) {
    logger.debug("There were multiple attempts to register component ".concat(componentName, "."));
    return false;
  }
  _components.set(componentName, component);
  try {
    for (var _b = tslib.__values(_apps.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var app = _c.value;
      _addComponent(app, component);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  return true;
}
function _getProvider(app, name) {
  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({
    optional: true
  });
  if (heartbeatController) {
    void heartbeatController.triggerHeartbeat();
  }
  return app.container.getProvider(name);
}
function _removeServiceInstance(app, name, instanceIdentifier) {
  if (instanceIdentifier === void 0) {
    instanceIdentifier = DEFAULT_ENTRY_NAME;
  }
  _getProvider(app, name).clearInstance(instanceIdentifier);
}
function _clearComponents() {
  _components.clear();
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
var ERRORS = (_a = {}, _a["no-app"] = "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()', _a["bad-app-name"] = "Illegal App name: '{$appName}", _a["duplicate-app"] = "Firebase App named '{$appName}' already exists with different options or config", _a["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a["no-options"] = 'Need to provide options, when not being deployed to hosting via source.', _a["invalid-app-argument"] = 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.', _a["invalid-log-argument"] = 'First argument to `onLog` must be null or a function.', _a["idb-open"] = 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.', _a["idb-get"] = 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.', _a["idb-set"] = 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.', _a["idb-delete"] = 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.', _a);
var ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var FirebaseAppImpl = function () {
  function FirebaseAppImpl(options, config, container) {
    var _this = this;
    this._isDeleted = false;
    this._options = tslib.__assign({}, options);
    this._config = tslib.__assign({}, config);
    this._name = config.name;
    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
    this._container = container;
    this.container.addComponent(new component.Component('app', function () {
      return _this;
    }, "PUBLIC"));
  }
  Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
    get: function get() {
      this.checkDestroyed();
      return this._automaticDataCollectionEnabled;
    },
    set: function set(val) {
      this.checkDestroyed();
      this._automaticDataCollectionEnabled = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "name", {
    get: function get() {
      this.checkDestroyed();
      return this._name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "options", {
    get: function get() {
      this.checkDestroyed();
      return this._options;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "config", {
    get: function get() {
      this.checkDestroyed();
      return this._config;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "container", {
    get: function get() {
      return this._container;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "isDeleted", {
    get: function get() {
      return this._isDeleted;
    },
    set: function set(val) {
      this._isDeleted = val;
    },
    enumerable: false,
    configurable: true
  });
  FirebaseAppImpl.prototype.checkDestroyed = function () {
    if (this.isDeleted) {
      throw ERROR_FACTORY.create("app-deleted", {
        appName: this._name
      });
    }
  };
  return FirebaseAppImpl;
}();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SDK_VERSION = version;
function initializeApp(_options, rawConfig) {
  var e_1, _a;
  if (rawConfig === void 0) {
    rawConfig = {};
  }
  var options = _options;
  if (typeof rawConfig !== 'object') {
    var name_1 = rawConfig;
    rawConfig = {
      name: name_1
    };
  }
  var config = tslib.__assign({
    name: DEFAULT_ENTRY_NAME,
    automaticDataCollectionEnabled: false
  }, rawConfig);
  var name = config.name;
  if (typeof name !== 'string' || !name) {
    throw ERROR_FACTORY.create("bad-app-name", {
      appName: String(name)
    });
  }
  options || (options = util.getDefaultAppConfig());
  if (!options) {
    throw ERROR_FACTORY.create("no-options");
  }
  var existingApp = _apps.get(name);
  if (existingApp) {
    if (util.deepEqual(options, existingApp.options) && util.deepEqual(config, existingApp.config)) {
      return existingApp;
    } else {
      throw ERROR_FACTORY.create("duplicate-app", {
        appName: name
      });
    }
  }
  var container = new component.ComponentContainer(name);
  try {
    for (var _b = tslib.__values(_components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var component$1 = _c.value;
      container.addComponent(component$1);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  var newApp = new FirebaseAppImpl(options, config, container);
  _apps.set(name, newApp);
  return newApp;
}
function getApp(name) {
  if (name === void 0) {
    name = DEFAULT_ENTRY_NAME;
  }
  var app = _apps.get(name);
  if (!app && name === DEFAULT_ENTRY_NAME) {
    return initializeApp();
  }
  if (!app) {
    throw ERROR_FACTORY.create("no-app", {
      appName: name
    });
  }
  return app;
}
function getApps() {
  return Array.from(_apps.values());
}
function deleteApp(app) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var name;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          name = app.name;
          if (!_apps.has(name)) return [3, 2];
          _apps.delete(name);
          return [4, Promise.all(app.container.getProviders().map(function (provider) {
            return provider.delete();
          }))];
        case 1:
          _a.sent();
          app.isDeleted = true;
          _a.label = 2;
        case 2:
          return [2];
      }
    });
  });
}
function registerVersion(libraryKeyOrName, version, variant) {
  var _a;
  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
  if (variant) {
    library += "-".concat(variant);
  }
  var libraryMismatch = library.match(/\s|\//);
  var versionMismatch = version.match(/\s|\//);
  if (libraryMismatch || versionMismatch) {
    var warning = ["Unable to register library \"".concat(library, "\" with version \"").concat(version, "\":")];
    if (libraryMismatch) {
      warning.push("library name \"".concat(library, "\" contains illegal characters (whitespace or \"/\")"));
    }
    if (libraryMismatch && versionMismatch) {
      warning.push('and');
    }
    if (versionMismatch) {
      warning.push("version name \"".concat(version, "\" contains illegal characters (whitespace or \"/\")"));
    }
    logger.warn(warning.join(' '));
    return;
  }
  _registerComponent(new component.Component("".concat(library, "-version"), function () {
    return {
      library: library,
      version: version
    };
  }, "VERSION"));
}
function onLog(logCallback, options) {
  if (logCallback !== null && typeof logCallback !== 'function') {
    throw ERROR_FACTORY.create("invalid-log-argument");
  }
  logger$1.setUserLogHandler(logCallback, options);
}
function setLogLevel(logLevel) {
  logger$1.setLogLevel(logLevel);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DB_NAME = 'firebase-heartbeat-database';
var DB_VERSION = 1;
var STORE_NAME = 'firebase-heartbeat-store';
var dbPromise = null;
function getDbPromise() {
  if (!dbPromise) {
    dbPromise = idb.openDB(DB_NAME, DB_VERSION, {
      upgrade: function upgrade(db, oldVersion) {
        switch (oldVersion) {
          case 0:
            db.createObjectStore(STORE_NAME);
        }
      }
    }).catch(function (e) {
      throw ERROR_FACTORY.create("idb-open", {
        originalErrorMessage: e.message
      });
    });
  }
  return dbPromise;
}
function readHeartbeatsFromIndexedDB(app) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var db, e_1, idbGetError;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 3]);
          return [4, getDbPromise()];
        case 1:
          db = _a.sent();
          return [2, db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app))];
        case 2:
          e_1 = _a.sent();
          if (e_1 instanceof util.FirebaseError) {
            logger.warn(e_1.message);
          } else {
            idbGetError = ERROR_FACTORY.create("idb-get", {
              originalErrorMessage: e_1 === null || e_1 === void 0 ? void 0 : e_1.message
            });
            logger.warn(idbGetError.message);
          }
          return [3, 3];
        case 3:
          return [2];
      }
    });
  });
}
function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
  return tslib.__awaiter(this, void 0, void 0, function () {
    var db, tx, objectStore, e_2, idbGetError;
    return tslib.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 3,, 4]);
          return [4, getDbPromise()];
        case 1:
          db = _a.sent();
          tx = db.transaction(STORE_NAME, 'readwrite');
          objectStore = tx.objectStore(STORE_NAME);
          return [4, objectStore.put(heartbeatObject, computeKey(app))];
        case 2:
          _a.sent();
          return [2, tx.done];
        case 3:
          e_2 = _a.sent();
          if (e_2 instanceof util.FirebaseError) {
            logger.warn(e_2.message);
          } else {
            idbGetError = ERROR_FACTORY.create("idb-set", {
              originalErrorMessage: e_2 === null || e_2 === void 0 ? void 0 : e_2.message
            });
            logger.warn(idbGetError.message);
          }
          return [3, 4];
        case 4:
          return [2];
      }
    });
  });
}
function computeKey(app) {
  return "".concat(app.name, "!").concat(app.options.appId);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MAX_HEADER_BYTES = 1024;
var STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
var HeartbeatServiceImpl = function () {
  function HeartbeatServiceImpl(container) {
    var _this = this;
    this.container = container;
    this._heartbeatsCache = null;
    var app = this.container.getProvider('app').getImmediate();
    this._storage = new HeartbeatStorageImpl(app);
    this._heartbeatsCachePromise = this._storage.read().then(function (result) {
      _this._heartbeatsCache = result;
      return result;
    });
  }
  HeartbeatServiceImpl.prototype.triggerHeartbeat = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var platformLogger, agent, date, _a;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            platformLogger = this.container.getProvider('platform-logger').getImmediate();
            agent = platformLogger.getPlatformInfoString();
            date = getUTCDateString();
            if (!(this._heartbeatsCache === null)) return [3, 2];
            _a = this;
            return [4, this._heartbeatsCachePromise];
          case 1:
            _a._heartbeatsCache = _b.sent();
            _b.label = 2;
          case 2:
            if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {
              return singleDateHeartbeat.date === date;
            })) {
              return [2];
            } else {
              this._heartbeatsCache.heartbeats.push({
                date: date,
                agent: agent
              });
            }
            this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function (singleDateHeartbeat) {
              var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
              var now = Date.now();
              return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
            });
            return [2, this._storage.overwrite(this._heartbeatsCache)];
        }
      });
    });
  };
  HeartbeatServiceImpl.prototype.getHeartbeatsHeader = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var date, _a, heartbeatsToSend, unsentEntries, headerString;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!(this._heartbeatsCache === null)) return [3, 2];
            return [4, this._heartbeatsCachePromise];
          case 1:
            _b.sent();
            _b.label = 2;
          case 2:
            if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {
              return [2, ''];
            }
            date = getUTCDateString();
            _a = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _a.heartbeatsToSend, unsentEntries = _a.unsentEntries;
            headerString = util.base64urlEncodeWithoutPadding(JSON.stringify({
              version: 2,
              heartbeats: heartbeatsToSend
            }));
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (!(unsentEntries.length > 0)) return [3, 4];
            this._heartbeatsCache.heartbeats = unsentEntries;
            return [4, this._storage.overwrite(this._heartbeatsCache)];
          case 3:
            _b.sent();
            return [3, 5];
          case 4:
            this._heartbeatsCache.heartbeats = [];
            void this._storage.overwrite(this._heartbeatsCache);
            _b.label = 5;
          case 5:
            return [2, headerString];
        }
      });
    });
  };
  return HeartbeatServiceImpl;
}();
function getUTCDateString() {
  var today = new Date();
  return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize) {
  var e_1, _a;
  if (maxSize === void 0) {
    maxSize = MAX_HEADER_BYTES;
  }
  var heartbeatsToSend = [];
  var unsentEntries = heartbeatsCache.slice();
  var _loop_1 = function _loop_1(singleDateHeartbeat) {
    var heartbeatEntry = heartbeatsToSend.find(function (hb) {
      return hb.agent === singleDateHeartbeat.agent;
    });
    if (!heartbeatEntry) {
      heartbeatsToSend.push({
        agent: singleDateHeartbeat.agent,
        dates: [singleDateHeartbeat.date]
      });
      if (countBytes(heartbeatsToSend) > maxSize) {
        heartbeatsToSend.pop();
        return "break";
      }
    } else {
      heartbeatEntry.dates.push(singleDateHeartbeat.date);
      if (countBytes(heartbeatsToSend) > maxSize) {
        heartbeatEntry.dates.pop();
        return "break";
      }
    }
    unsentEntries = unsentEntries.slice(1);
  };
  try {
    for (var heartbeatsCache_1 = tslib.__values(heartbeatsCache), heartbeatsCache_1_1 = heartbeatsCache_1.next(); !heartbeatsCache_1_1.done; heartbeatsCache_1_1 = heartbeatsCache_1.next()) {
      var singleDateHeartbeat = heartbeatsCache_1_1.value;
      var state_1 = _loop_1(singleDateHeartbeat);
      if (state_1 === "break") break;
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (heartbeatsCache_1_1 && !heartbeatsCache_1_1.done && (_a = heartbeatsCache_1.return)) _a.call(heartbeatsCache_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
  return {
    heartbeatsToSend: heartbeatsToSend,
    unsentEntries: unsentEntries
  };
}
var HeartbeatStorageImpl = function () {
  function HeartbeatStorageImpl(app) {
    this.app = app;
    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  HeartbeatStorageImpl.prototype.runIndexedDBEnvironmentCheck = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        if (!util.isIndexedDBAvailable()) {
          return [2, false];
        } else {
          return [2, util.validateIndexedDBOpenable().then(function () {
            return true;
          }).catch(function () {
            return false;
          })];
        }
      });
    });
  };
  HeartbeatStorageImpl.prototype.read = function () {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var canUseIndexedDB, idbHeartbeatObject;
      return tslib.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, this._canUseIndexedDBPromise];
          case 1:
            canUseIndexedDB = _a.sent();
            if (!!canUseIndexedDB) return [3, 2];
            return [2, {
              heartbeats: []
            }];
          case 2:
            return [4, readHeartbeatsFromIndexedDB(this.app)];
          case 3:
            idbHeartbeatObject = _a.sent();
            return [2, idbHeartbeatObject || {
              heartbeats: []
            }];
        }
      });
    });
  };
  HeartbeatStorageImpl.prototype.overwrite = function (heartbeatsObject) {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var canUseIndexedDB, existingHeartbeatsObject;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4, this._canUseIndexedDBPromise];
          case 1:
            canUseIndexedDB = _b.sent();
            if (!!canUseIndexedDB) return [3, 2];
            return [2];
          case 2:
            return [4, this.read()];
          case 3:
            existingHeartbeatsObject = _b.sent();
            return [2, writeHeartbeatsToIndexedDB(this.app, {
              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
              heartbeats: heartbeatsObject.heartbeats
            })];
        }
      });
    });
  };
  HeartbeatStorageImpl.prototype.add = function (heartbeatsObject) {
    var _a;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var canUseIndexedDB, existingHeartbeatsObject;
      return tslib.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4, this._canUseIndexedDBPromise];
          case 1:
            canUseIndexedDB = _b.sent();
            if (!!canUseIndexedDB) return [3, 2];
            return [2];
          case 2:
            return [4, this.read()];
          case 3:
            existingHeartbeatsObject = _b.sent();
            return [2, writeHeartbeatsToIndexedDB(this.app, {
              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
              heartbeats: tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(existingHeartbeatsObject.heartbeats), false), tslib.__read(heartbeatsObject.heartbeats), false)
            })];
        }
      });
    });
  };
  return HeartbeatStorageImpl;
}();
function countBytes(heartbeatsCache) {
  return util.base64urlEncodeWithoutPadding(JSON.stringify({
    version: 2,
    heartbeats: heartbeatsCache
  })).length;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(variant) {
  _registerComponent(new component.Component('platform-logger', function (container) {
    return new PlatformLoggerServiceImpl(container);
  }, "PRIVATE"));
  _registerComponent(new component.Component('heartbeat', function (container) {
    return new HeartbeatServiceImpl(container);
  }, "PRIVATE"));
  registerVersion(name$o, version$1, variant);
  registerVersion(name$o, version$1, 'cjs5');
  registerVersion('fire-js', '');
}
registerCoreComponents('node');
Object.defineProperty(exports, 'FirebaseError', {
  enumerable: true,
  get: function get() {
    return util.FirebaseError;
  }
});
exports.SDK_VERSION = SDK_VERSION;
exports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;
exports._addComponent = _addComponent;
exports._addOrOverwriteComponent = _addOrOverwriteComponent;
exports._apps = _apps;
exports._clearComponents = _clearComponents;
exports._components = _components;
exports._getProvider = _getProvider;
exports._registerComponent = _registerComponent;
exports._removeServiceInstance = _removeServiceInstance;
exports.deleteApp = deleteApp;
exports.getApp = getApp;
exports.getApps = getApps;
exports.initializeApp = initializeApp;
exports.onLog = onLog;
exports.registerVersion = registerVersion;
exports.setLogLevel = setLogLevel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,