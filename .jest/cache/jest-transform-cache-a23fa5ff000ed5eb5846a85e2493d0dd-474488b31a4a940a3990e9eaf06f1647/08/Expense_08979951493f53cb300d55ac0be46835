03fa3e7a18a5e4449652ccfff8fd8efa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _trny = require("trny");
var _config = require("../../Firebase/config");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _reactNativeGetSmsAndroid = _interopRequireDefault(require("react-native-get-sms-android"));
var _Background = _interopRequireDefault(require("../Background"));
var _MyPieChart = _interopRequireDefault(require("../Visualisation/MyPieChart.js"));
var _Constants = require("../Constants");
var _jsxRuntime = require("react/jsx-runtime");
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  height = _Dimensions$get.height,
  width = _Dimensions$get.width;
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
function Expense(_ref) {
  var navigation = _ref.navigation;
  var _React$useState = _react.default.useState("Day"),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    recordsFilter = _React$useState2[0],
    setRecordsFilter = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    datePicker = _React$useState4[0],
    setDatePicker = _React$useState4[1];
  var _React$useState5 = _react.default.useState(new Date()),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    date = _React$useState6[0],
    setDate = _React$useState6[1];
  var _React$useState7 = _react.default.useState(new Date().getMonth()),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    month = _React$useState8[0],
    setMonth = _React$useState8[1];
  var _React$useState9 = _react.default.useState(new Date().getFullYear()),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
    year = _React$useState10[0],
    setYear = _React$useState10[1];
  var _React$useState11 = _react.default.useState(""),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    period = _React$useState12[0],
    setPeriod = _React$useState12[1];
  var _React$useState13 = _react.default.useState(0.0),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    totalExpense = _React$useState14[0],
    setTotalExpense = _React$useState14[1];
  var _React$useState15 = _react.default.useState([]),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    expenseRecords = _React$useState16[0],
    setExpenseRecords = _React$useState16[1];
  var _React$useState17 = _react.default.useState([]),
    _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
    expenseRecordsDateWise = _React$useState18[0],
    setExpenseRecordsDateWise = _React$useState18[1];
  var _React$useState19 = _react.default.useState([]),
    _React$useState20 = (0, _slicedToArray2.default)(_React$useState19, 2),
    expenseRecordsMonthWise = _React$useState20[0],
    setExpenseRecordsMonthWise = _React$useState20[1];
  var _React$useState21 = _react.default.useState([]),
    _React$useState22 = (0, _slicedToArray2.default)(_React$useState21, 2),
    expenseRecordsYearWise = _React$useState22[0],
    setExpenseRecordsYearWise = _React$useState22[1];
  var _React$useState23 = _react.default.useState([]),
    _React$useState24 = (0, _slicedToArray2.default)(_React$useState23, 2),
    categoryWiseExp = _React$useState24[0],
    setCategoryWiseExp = _React$useState24[1];
  function onDateSelected(event, value) {
    var tempDate = new Date();
    if (value.getTime() > tempDate.getTime()) {
      alert("Please select valid date!!");
      setDate(tempDate);
    }
    setDate(value);
    setDatePicker(false);
  }
  _react.default.useEffect(function () {
    console.log("\n\nInside Record Filter\n\n", recordsFilter);
    if (recordsFilter == "Day") {
      console.log("\n\Date\n\n", expenseRecords);
      filterRecordsDateWise();
    } else if (recordsFilter == "Month") {
      console.log("\n\nMonth\n\n", expenseRecords);
      filterRecordsMonthWise();
    } else {
      console.log("\n\YYear\n\n");
      filterRecordsYearWise();
    }
  }, [recordsFilter, date, month, year, expenseRecords]);
  _react.default.useEffect(function () {
    var unsubscribe = navigation.addListener('focus', function () {
      fetchRecords();
    });
    return unsubscribe;
  }, [navigation]);
  _react.default.useEffect(function () {
    filterRecordsCategotyWise();
  }, [expenseRecordsDateWise, expenseRecordsMonthWise, expenseRecordsYearWise]);
  var getDateFormat = function getDateFormat(timestamp) {
    var tempDate = new Date(timestamp * 1000);
    return tempDate.getDate() + ' / ' + (tempDate.getMonth() + 1) + ' / ' + tempDate.getFullYear();
  };
  var fetchRecords = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var tempRecords = [];
        var querySnapshot = yield (0, _config.getDocs)((0, _config.collection)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), "Expense"));
        querySnapshot.forEach(function (doc) {
          var data = doc.data();
          var record = {
            "key": doc.id,
            "expAmount": data.expAmount,
            "expDescription": data.expDescription,
            "expCategory": data.expCategory,
            "expDate": data.expDate,
            "expImage": data.expImage,
            'groupExp': data.groupExp
          };
          if (data.groupExp) {
            record.grpMembersList = data.grpMembersList;
          }
          tempRecords.push(record);
        });
        setExpenseRecords(tempRecords);
        filterRecordsDateWise();
        console.log(expenseRecords, "data");
      } catch (e) {
        console.error("Error adding document: ", e);
      }
    });
    return function fetchRecords() {
      return _ref2.apply(this, arguments);
    };
  }();
  var filterRecordsDateWise = function filterRecordsDateWise() {
    var tempRecords = [];
    console.log(expenseRecords, "Datewise *-----------");
    expenseRecords.forEach(function (expenseRecord) {
      var recordDate = getDateFormat(expenseRecord.expDate.seconds);
      var desiredDate = date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear();
      if (recordDate == desiredDate) {
        tempRecords.push(expenseRecord);
        console.log(expenseRecord, "Datewise");
      }
    });
    setExpenseRecordsDateWise(tempRecords);
    console.log(expenseRecordsDateWise, "Filtered Records");
  };
  var filterRecordsMonthWise = function filterRecordsMonthWise() {
    var tempRecords = [];
    expenseRecords.forEach(function (expenseRecord) {
      var recordMonth = new Date(expenseRecord.expDate.seconds * 1000).getMonth();
      if (recordMonth == month) {
        tempRecords.push(expenseRecord);
        console.log(expenseRecord, "MonthWise");
      }
    });
    setExpenseRecordsMonthWise(tempRecords);
    console.log(expenseRecordsMonthWise, "Filtered Records");
  };
  var filterRecordsYearWise = function filterRecordsYearWise() {
    var tempRecords = [];
    expenseRecords.forEach(function (expenseRecord) {
      var recordYear = new Date(expenseRecord.expDate.seconds * 1000).getFullYear();
      if (recordYear == year) {
        tempRecords.push(expenseRecord);
        console.log(expenseRecord, "YearWise");
      }
    });
    setExpenseRecordsYearWise(tempRecords);
    console.log(expenseRecordsYearWise, "Filtered Records");
  };
  var filterRecordsCategotyWise = function filterRecordsCategotyWise() {
    var categoryWiseAmt = [];
    var category = [];
    if (recordsFilter == "Day") {
      expenseRecordsDateWise.forEach(function (expenseRecord) {
        console.log(expenseRecord.expCategory, "Category Expense");
        if (!category.includes(expenseRecord.expCategory)) {
          category.push(expenseRecord.expCategory);
          var data = {
            "name": expenseRecord.expCategory,
            "amount": Number(expenseRecord.expAmount)
          };
          categoryWiseAmt.push(data);
        } else {
          console.log("Amount***");
          categoryWiseAmt.forEach(function (item) {
            if (item.name == expenseRecord.expCategory) {
              item.amount += Number(expenseRecord.expAmount);
            }
            console.log(item.name == expenseRecord.expCategory, "Amount***");
          });
        }
      });
    } else if (recordsFilter == "Month") {
      expenseRecordsMonthWise.forEach(function (expenseRecord) {
        console.log(expenseRecord.expCategory, "Category Expense");
        if (!category.includes(expenseRecord.expCategory)) {
          category.push(expenseRecord.expCategory);
          var data = {
            "name": expenseRecord.expCategory,
            "amount": Number(expenseRecord.expAmount)
          };
          categoryWiseAmt.push(data);
        } else {
          categoryWiseAmt.forEach(function (item) {
            if (item.name == expenseRecord.expCategory) {
              item.amount += Number(expenseRecord.expAmount);
            }
            console.log(item.name == expenseRecord.expCategory, "Amount***");
          });
        }
      });
    } else {
      expenseRecordsYearWise.forEach(function (expenseRecord) {
        console.log(expenseRecord.expCategory, "Category Expense");
        if (!category.includes(expenseRecord.expCategory)) {
          category.push(expenseRecord.expCategory);
          var data = {
            "name": expenseRecord.expCategory,
            "amount": Number(expenseRecord.expAmount)
          };
          categoryWiseAmt.push(data);
        } else {
          categoryWiseAmt.forEach(function (item) {
            if (item.name == expenseRecord.expCategory) {
              item.amount += Number(expenseRecord.expAmount);
            }
            console.log(item.name, expenseRecord.expCategory, "Amount***");
          });
        }
      });
    }
    setCategoryWiseExp(categoryWiseAmt);
    console.log(category);
    console.log(categoryWiseAmt, "Category------------------------------**********************************");
  };
  var deleteRecord = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (record) {
      var docRef = yield (0, _config.deleteDoc)((0, _config.doc)(_config.db, 'User', _config.auth.currentUser.uid, 'Expense', record.key));
      console.log("document deleted");
      var filterData = expenseRecords.filter(function (curr) {
        return curr !== record;
      });
      console.log(filterData);
      console.log(filterData.length);
      setExpenseRecords(filterData);
      updateBalOnRecDelete(record.expAmount);
      var recordId = months[date.getMonth()] + "" + date.getFullYear();
      console.log(recordId);
      var document = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId));
      if (document.data()) {
        var categoryWiseBudget = document.data();
        var isCategoryBudgetSet = false;
        var otherExpIdx = -1;
        var savingsIdx = -1;
        var done = false;
        if (categoryWiseBudget.method === 'Envelop Method') {
          console.log('Inside : ', categoryWiseBudget.method);
          categoryWiseBudget.budget.forEach(function (item, idx) {
            if (item.category == record.expCategory) {
              item.budgetSpent = item.budgetSpent - parseFloat(record.expAmount);
              isCategoryBudgetSet = true;
            }
            if (item.category == "Additional Expenses") {
              otherExpIdx = idx;
            }
          });
          if (!isCategoryBudgetSet && otherExpIdx > -1) {
            categoryWiseBudget.budget[otherExpIdx].budgetSpent = categoryWiseBudget.budget[otherExpIdx].budgetSpent - parseFloat(record.expAmount);
          }
        } else if (categoryWiseBudget.method === 'Zero Based Budgeting') {
          console.log('Inside : ', categoryWiseBudget.method);
          categoryWiseBudget.budget.forEach(function (item, idx) {
            if (item.category == record.expCategory) {
              item.budgetSpent = item.budgetSpent - parseFloat(record.expAmount);
              isCategoryBudgetSet = true;
            }
            if (item.category == "Savings") {
              savingsIdx = idx;
            }
          });
          if (!isCategoryBudgetSet && savingsIdx > -1) {
            categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetSpent - parseFloat(record.expAmount);
            categoryWiseBudget.budget[savingsIdx].budgetSpent = categoryWiseBudget.budget[savingsIdx].budgetPlanned + parseFloat(record.expAmount);
            console.log('Added to savings', categoryWiseBudget.budget[savingsIdx].budgetSpent);
          }
        } else {
          console.log('Inside : ', categoryWiseBudget);
          categoryWiseBudget.budget.needs.forEach(function (item, idx) {
            if (item.category == record.expCategory) {
              item.budgetSpent = item.budgetSpent - parseFloat(record.expAmount);
              isCategoryBudgetSet = true;
              done = true;
            }
          });
          if (!done) {
            categoryWiseBudget.budget.wants.forEach(function (item, idx) {
              if (item.category == record.expCategory) {
                item.budgetSpent = item.budgetSpent - parseFloat(record.expAmount);
                isCategoryBudgetSet = true;
                done = true;
              }
            });
          }
          if (!done) {
            categoryWiseBudget.budget.savings.forEach(function (item, idx) {
              if (item.category == record.expCategory) {
                item.budgetSpent = item.budgetSpent - parseFloat(record.expAmount);
                isCategoryBudgetSet = true;
                done = true;
              }
              if (item.category == "Other Savings") {
                otherExpIdx = idx;
              }
            });
            if (!isCategoryBudgetSet && otherExpIdx > -1) {
              categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent = categoryWiseBudget.budget.savings[otherExpIdx].budgetSpent - parseFloat(record.expAmount);
              done = true;
            }
          }
        }
        yield (0, _config.setDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId), categoryWiseBudget);
      }
    });
    return function deleteRecord(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var updateBalOnRecDelete = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (amount) {
      try {
        var user = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
        console.log(amount, 'amount');
        yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
          accBalance: parseFloat(user.data().accBalance) + parseFloat(amount) + ""
        });
      } catch (e) {
        console.log(e);
      }
    });
    return function updateBalOnRecDelete(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        width: "100%"
      },
      children: (0, _jsxRuntime.jsxs)(_reactNative.ImageBackground, {
        source: require("../../Assets/Background.jpeg"),
        style: {
          height: "100%"
        },
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.container,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.records_filter,
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                setRecordsFilter("Day");
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  fontSize: 17,
                  fontWeight: 'bold',
                  color: 'white'
                },
                children: "Day"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                setRecordsFilter("Month");
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  fontSize: 17,
                  fontWeight: 'bold',
                  color: 'white'
                },
                children: "Month"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                setRecordsFilter("Year");
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  fontSize: 17,
                  fontWeight: 'bold',
                  color: 'white'
                },
                children: "Year"
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              backgroundColor: "rgb(211, 211, 211)",
              borderRadius: 5
            },
            children: [recordsFilter == "Day" && (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.choose_filter_date,
              children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                onPress: function onPress() {
                  return setDatePicker(true);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  children: date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear()
                })
              })
            }), recordsFilter == "Month" && (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.choose_filter,
              children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                disabled: month == 0 ? true : false,
                onPress: function onPress() {
                  setMonth(month - 1);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require("../../Assets/previous.png"),
                  style: {
                    width: 15,
                    height: 15
                  },
                  onPress: function onPress() {
                    return console.log("image pressed");
                  }
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                children: months[month]
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                disabled: month == 11 ? true : false,
                onPress: function onPress() {
                  setMonth(month + 1);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require("../../Assets/next.png"),
                  style: {
                    width: 15,
                    height: 15
                  },
                  onPress: function onPress() {
                    return console.log("image pressed");
                  }
                })
              })]
            }), recordsFilter == "Year" && (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.choose_filter,
              children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                disabled: year == 1 ? true : false,
                onPress: function onPress() {
                  setYear(year - 1);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require("../../Assets/previous.png"),
                  style: {
                    width: 15,
                    height: 15
                  },
                  onPress: function onPress() {
                    return console.log("image pressed");
                  }
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                style: styles.choose_filter_textInput,
                keyboardType: "numeric",
                onChangeText: function onChangeText(text) {
                  var tempYear = new Date().getFullYear();
                  if (Number(text) && Number(text) <= tempYear) {
                    setYear(Number(text));
                  } else {
                    alert("Enter valid year!!");
                    setYear(tempYear);
                    console.log(year);
                  }
                },
                children: year
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                disabled: year == new Date().getFullYear() ? true : false,
                onPress: function onPress() {
                  setYear(year + 1);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                  source: require("../../Assets/next.png"),
                  style: {
                    width: 15,
                    height: 15
                  },
                  onPress: function onPress() {
                    return console.log("image pressed");
                  }
                })
              })]
            }), datePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
              value: date,
              mode: "date",
              is24Hour: true,
              onChange: onDateSelected
            })]
          }), (expenseRecordsDateWise.length == 0 && recordsFilter == "Day" || expenseRecordsMonthWise.length == 0 && recordsFilter == "Month" || expenseRecordsYearWise.length == 0 && recordsFilter == "Year") && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.no_records,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                fontWeight: "bold",
                fontSize: 18
              },
              children: "No Transactions Found!"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.total_amt,
            children: (0, _jsxRuntime.jsx)(_MyPieChart.default, {
              data: categoryWiseExp
            })
          })]
        }), recordsFilter == "Day" && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.record_container,
          children: expenseRecordsDateWise.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: expenseRecordsDateWise,
            renderItem: function renderItem(_ref5) {
              var item = _ref5.item;
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.alignRecord,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                  style: styles.record,
                  onPress: function onPress() {
                    console.log("show income details", item.incPath, item);
                    navigation.navigate("ShowExpenseDetails", {
                      expenseRecId: item.key,
                      expenseRec: item
                    });
                  },
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.cat,
                      children: item.expCategory
                    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: styles.amt,
                      children: ["-", item.expAmount]
                    })]
                  }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.dt,
                      children: getDateFormat(item.expDate.seconds)
                    })
                  })]
                }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.budgetCategoryCenter,
                  onPress: function onPress() {
                    return deleteRecord(item);
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                    source: require('../../Assets/remove.png'),
                    style: styles.buttonImg
                  })
                })]
              });
            },
            enableEmptySections: true
          })
        }), recordsFilter == "Month" && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.record_container,
          children: expenseRecordsMonthWise.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: expenseRecordsMonthWise,
            renderItem: function renderItem(_ref6) {
              var item = _ref6.item;
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.alignRecord,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                  style: styles.record,
                  onPress: function onPress() {
                    console.log("show income details", item.incPath, item);
                    navigation.navigate("ShowExpenseDetails", {
                      expenseRecId: item.key,
                      expenseRec: item
                    });
                  },
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.cat,
                      children: item.expCategory
                    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: styles.amt,
                      children: ["+", item.expAmount]
                    })]
                  }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.dt,
                      children: getDateFormat(item.expDate.seconds)
                    })
                  })]
                }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.budgetCategoryCenter,
                  onPress: function onPress() {
                    return deleteRecord(item);
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                    source: require('../../Assets/remove.png'),
                    style: styles.buttonImg
                  })
                })]
              });
            },
            enableEmptySections: true
          })
        }), recordsFilter == "Year" && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.record_container,
          children: expenseRecordsYearWise.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
            data: expenseRecordsYearWise,
            renderItem: function renderItem(_ref7) {
              var item = _ref7.item;
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.alignRecord,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                  style: styles.record,
                  onPress: function onPress() {
                    console.log("show income details", item.incPath, item);
                    navigation.navigate("ShowExpenseDetails", {
                      expenseRecId: item.key,
                      expenseRec: item
                    });
                  },
                  children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.cat,
                      children: item.expCategory
                    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                      style: styles.amt,
                      children: ["+", item.expAmount]
                    })]
                  }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.dt,
                      children: getDateFormat(item.expDate.seconds)
                    })
                  })]
                }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.budgetCategoryCenter,
                  onPress: function onPress() {
                    return deleteRecord(item);
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                    source: require('../../Assets/remove.png'),
                    style: styles.buttonImg
                  })
                })]
              });
            },
            enableEmptySections: true
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            position: "absolute",
            justifyContent: "center",
            alignItems: "center",
            right: 20,
            bottom: 20
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              width: 70,
              height: 70,
              borderRadius: 35,
              backgroundColor: "#006A42",
              justifyContent: "center",
              alignItems: "center",
              alignSelf: "center",
              marginTop: 5,
              marginBottom: 5
            },
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              navigation.navigate("AddExpense");
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require("../../Assets/add.png"),
              style: {
                width: 30,
                height: 30
              },
              onPress: function onPress() {
                return console.log("image pressed");
              }
            })
          })
        })]
      })
    })
  });
}
var _default = Expense;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: "white",
    margin: 10,
    padding: 10,
    borderRadius: 20,
    height: "40%"
  },
  records_filter: {
    flexDirection: 'row',
    justifyContent: "space-around",
    textAlign: "center",
    height: "15%",
    padding: 5,
    color: "black",
    backgroundColor: _Constants.darkGreen,
    borderRadius: 5
  },
  choose_filter: {
    flexDirection: 'row',
    justifyContent: "space-between",
    alignItems: "center",
    padding: 10
  },
  choose_filter_text: {
    fontSize: 17,
    fontWeight: 'bold',
    color: 'white'
  },
  choose_filter_textInput: {
    padding: 0,
    height: 20
  },
  choose_filter_date: {
    flexDirection: 'row',
    justifyContent: "center",
    alignItems: "center",
    padding: 10
  },
  PieChart: {
    flexDirection: 'row',
    justifyContent: "space-around",
    alignItems: "center"
  },
  no_records: {
    alignItems: "center",
    padding: 10,
    fontWeight: "bold"
  },
  smsNotification: {
    backgroundColor: 'white',
    padding: 10,
    borderRadius: 10,
    marginHorizontal: 10,
    marginBottom: 10
  },
  smsNotificationText: {
    fontSize: 13,
    fontWeight: 'bold'
  },
  record_container: {
    marginLeft: 10,
    marginRight: 10,
    padding: 0,
    borderRadius: 20,
    height: 310,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  budgetCategoryCenter: {
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center"
  },
  alignRecord: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: 'white',
    height: 70,
    borderRadius: 15,
    marginBottom: 10,
    padding: 15
  },
  buttonImg: {
    width: 25,
    height: 25,
    tintColor: "#cc1d10"
  },
  record: {
    flexDirection: 'row',
    justifyContent: "space-around",
    alignItems: "center",
    width: "85%"
  },
  cat: {
    color: 'grey',
    fontSize: 18
  },
  amt: {
    fontSize: 22,
    fontWeight: 'bold'
  },
  dt: {
    fontSize: 15,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,