{"version":3,"names":["_NativeActionSheetManager","_interopRequireDefault","require","_excluded","processColor","invariant","ActionSheetIOS","showActionSheetWithOptions","options","callback","RCTActionSheetManager","tintColor","cancelButtonTintColor","destructiveButtonIndex","remainingOptions","_objectWithoutProperties2","default","destructiveButtonIndices","Array","isArray","processedTintColor","processedCancelButtonTintColor","Object","assign","showShareActionSheetWithOptions","failureCallback","successCallback","dismissActionSheet","module","exports"],"sources":["ActionSheetIOS.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {ProcessedColorValue} from '../StyleSheet/processColor';\nimport type {ColorValue} from '../StyleSheet/StyleSheet';\n\nimport RCTActionSheetManager from './NativeActionSheetManager';\n\nconst processColor = require('../StyleSheet/processColor');\nconst invariant = require('invariant');\n\n/**\n * Display action sheets and share sheets on iOS.\n *\n * See https://reactnative.dev/docs/actionsheetios\n */\nconst ActionSheetIOS = {\n  /**\n   * Display an iOS action sheet.\n   *\n   * The `options` object must contain one or more of:\n   *\n   * - `options` (array of strings) - a list of button titles (required)\n   * - `cancelButtonIndex` (int) - index of cancel button in `options`\n   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`\n   * - `title` (string) - a title to show above the action sheet\n   * - `message` (string) - a message to show below the title\n   * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled\n   *\n   * The 'callback' function takes one parameter, the zero-based index\n   * of the selected item.\n   *\n   * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions\n   */\n  showActionSheetWithOptions(\n    options: {|\n      +title?: ?string,\n      +message?: ?string,\n      +options: Array<string>,\n      +destructiveButtonIndex?: ?number | ?Array<number>,\n      +cancelButtonIndex?: ?number,\n      +anchor?: ?number,\n      +tintColor?: ColorValue | ProcessedColorValue,\n      +cancelButtonTintColor?: ColorValue | ProcessedColorValue,\n      +userInterfaceStyle?: string,\n      +disabledButtonIndices?: Array<number>,\n    |},\n    callback: (buttonIndex: number) => void,\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n\n    const {\n      tintColor,\n      cancelButtonTintColor,\n      destructiveButtonIndex,\n      ...remainingOptions\n    } = options;\n    let destructiveButtonIndices = null;\n\n    if (Array.isArray(destructiveButtonIndex)) {\n      destructiveButtonIndices = destructiveButtonIndex;\n    } else if (typeof destructiveButtonIndex === 'number') {\n      destructiveButtonIndices = [destructiveButtonIndex];\n    }\n\n    const processedTintColor = processColor(tintColor);\n    const processedCancelButtonTintColor = processColor(cancelButtonTintColor);\n    invariant(\n      processedTintColor == null || typeof processedTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor',\n    );\n    invariant(\n      processedCancelButtonTintColor == null ||\n        typeof processedCancelButtonTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor',\n    );\n    RCTActionSheetManager.showActionSheetWithOptions(\n      {\n        ...remainingOptions,\n        tintColor: processedTintColor,\n        cancelButtonTintColor: processedCancelButtonTintColor,\n        destructiveButtonIndices,\n      },\n      callback,\n    );\n  },\n\n  /**\n   * Display the iOS share sheet. The `options` object should contain\n   * one or both of `message` and `url` and can additionally have\n   * a `subject` or `excludedActivityTypes`:\n   *\n   * - `url` (string) - a URL to share\n   * - `message` (string) - a message to share\n   * - `subject` (string) - a subject for the message\n   * - `excludedActivityTypes` (array) - the activities to exclude from\n   *   the ActionSheet\n   * - `tintColor` (color) - tint color of the buttons\n   *\n   * The 'failureCallback' function takes one parameter, an error object.\n   * The only property defined on this object is an optional `stack` property\n   * of type `string`.\n   *\n   * The 'successCallback' function takes two parameters:\n   *\n   * - a boolean value signifying success or failure\n   * - a string that, in the case of success, indicates the method of sharing\n   *\n   * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions\n   */\n  showShareActionSheetWithOptions(\n    options: Object,\n    failureCallback: Function,\n    successCallback: Function,\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(\n      typeof failureCallback === 'function',\n      'Must provide a valid failureCallback',\n    );\n    invariant(\n      typeof successCallback === 'function',\n      'Must provide a valid successCallback',\n    );\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n    RCTActionSheetManager.showShareActionSheetWithOptions(\n      {...options, tintColor: processColor(options.tintColor)},\n      failureCallback,\n      successCallback,\n    );\n  },\n\n  dismissActionSheet: () => {\n    invariant(RCTActionSheetManager, \"ActionSheetManager doesn't exist\");\n    if (typeof RCTActionSheetManager.dismissActionSheet === 'function') {\n      RCTActionSheetManager.dismissActionSheet();\n    }\n  },\n};\n\nmodule.exports = ActionSheetIOS;\n"],"mappings":";;AAaA,IAAAA,yBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA+D,IAAAC,SAAA;AAE/D,IAAMC,YAAY,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAC1D,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAW,CAAC;AAOtC,IAAMI,cAAc,GAAG;EAkBrBC,0BAA0B,WAAAA,2BACxBC,OAWE,EACFC,QAAuC,EACvC;IACAJ,SAAS,CACP,OAAOG,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,gCACF,CAAC;IACDH,SAAS,CAAC,OAAOI,QAAQ,KAAK,UAAU,EAAE,+BAA+B,CAAC;IAC1EJ,SAAS,CAACK,iCAAqB,EAAE,kCAAkC,CAAC;IAEpE,IACEC,SAAS,GAIPH,OAAO,CAJTG,SAAS;MACTC,qBAAqB,GAGnBJ,OAAO,CAHTI,qBAAqB;MACrBC,sBAAsB,GAEpBL,OAAO,CAFTK,sBAAsB;MACnBC,gBAAgB,OAAAC,yBAAA,CAAAC,OAAA,EACjBR,OAAO,EAAAL,SAAA;IACX,IAAIc,wBAAwB,GAAG,IAAI;IAEnC,IAAIC,KAAK,CAACC,OAAO,CAACN,sBAAsB,CAAC,EAAE;MACzCI,wBAAwB,GAAGJ,sBAAsB;IACnD,CAAC,MAAM,IAAI,OAAOA,sBAAsB,KAAK,QAAQ,EAAE;MACrDI,wBAAwB,GAAG,CAACJ,sBAAsB,CAAC;IACrD;IAEA,IAAMO,kBAAkB,GAAGhB,YAAY,CAACO,SAAS,CAAC;IAClD,IAAMU,8BAA8B,GAAGjB,YAAY,CAACQ,qBAAqB,CAAC;IAC1EP,SAAS,CACPe,kBAAkB,IAAI,IAAI,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EACpE,gFACF,CAAC;IACDf,SAAS,CACPgB,8BAA8B,IAAI,IAAI,IACpC,OAAOA,8BAA8B,KAAK,QAAQ,EACpD,4FACF,CAAC;IACDX,iCAAqB,CAACH,0BAA0B,CAAAe,MAAA,CAAAC,MAAA,KAEzCT,gBAAgB;MACnBH,SAAS,EAAES,kBAAkB;MAC7BR,qBAAqB,EAAES,8BAA8B;MACrDJ,wBAAwB,EAAxBA;IAAwB,IAE1BR,QACF,CAAC;EACH,CAAC;EAyBDe,+BAA+B,WAAAA,gCAC7BhB,OAAe,EACfiB,eAAyB,EACzBC,eAAyB,EACzB;IACArB,SAAS,CACP,OAAOG,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,gCACF,CAAC;IACDH,SAAS,CACP,OAAOoB,eAAe,KAAK,UAAU,EACrC,sCACF,CAAC;IACDpB,SAAS,CACP,OAAOqB,eAAe,KAAK,UAAU,EACrC,sCACF,CAAC;IACDrB,SAAS,CAACK,iCAAqB,EAAE,kCAAkC,CAAC;IACpEA,iCAAqB,CAACc,+BAA+B,CAAAF,MAAA,CAAAC,MAAA,KAC/Cf,OAAO;MAAEG,SAAS,EAAEP,YAAY,CAACI,OAAO,CAACG,SAAS;IAAC,IACvDc,eAAe,EACfC,eACF,CAAC;EACH,CAAC;EAEDC,kBAAkB,EAAE,SAAAA,mBAAA,EAAM;IACxBtB,SAAS,CAACK,iCAAqB,EAAE,kCAAkC,CAAC;IACpE,IAAI,OAAOA,iCAAqB,CAACiB,kBAAkB,KAAK,UAAU,EAAE;MAClEjB,iCAAqB,CAACiB,kBAAkB,CAAC,CAAC;IAC5C;EACF;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGvB,cAAc"}