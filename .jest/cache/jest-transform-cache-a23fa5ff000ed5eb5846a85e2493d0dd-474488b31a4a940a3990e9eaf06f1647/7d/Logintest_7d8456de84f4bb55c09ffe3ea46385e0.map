{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_Login","_jsxRuntime","describe","it","_asyncToGenerator2","default","navigationMock","replace","jest","fn","navigate","_render","render","jsx","navigation","getByPlaceholderText","getByText","emailInput","passwordInput","fireEvent","changeText","loginButton","press","expect","toHaveBeenCalledWith","_render2","forgotPasswordButton"],"sources":["Login-test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport Login from '../Login';\r\n\r\ndescribe('Login', () => {\r\n  it('should handle login with valid credentials', async () => {\r\n    const navigationMock = {\r\n      replace: jest.fn(),\r\n      navigate: jest.fn(),\r\n    };\r\n\r\n    const { getByPlaceholderText, getByText } = render(\r\n      <Login navigation={navigationMock} />\r\n    );\r\n\r\n    // Fill in the login form fields\r\n    const emailInput = getByPlaceholderText('Email / Username');\r\n    const passwordInput = getByPlaceholderText('Password');\r\n    fireEvent.changeText(emailInput, 'test@example.com');\r\n    fireEvent.changeText(passwordInput, 'password');\r\n\r\n    // Trigger the login action\r\n    const loginButton = getByText('Login');\r\n    fireEvent.press(loginButton);\r\n\r\n    // Assert that the navigation method is called\r\n    expect(navigationMock.replace).toHaveBeenCalledWith('Root');\r\n  });\r\n\r\n  it('should handle forgot password', async () => {\r\n    const navigationMock = {\r\n      replace: jest.fn(),\r\n      navigate: jest.fn(),\r\n    };\r\n\r\n    const { getByText } = render(<Login navigation={navigationMock} />);\r\n\r\n    // Trigger the forgot password action\r\n    const forgotPasswordButton = getByText('Forgot Password ?');\r\n    fireEvent.press(forgotPasswordButton);\r\n\r\n    // Assert that the dialog box visibility state is updated\r\n    // For example, you can assert that the dialog box becomes visible\r\n    // by checking for its existence or a specific UI element within it\r\n    // expect(...) assertions for dialog box visibility\r\n  });\r\n\r\n  // Add more test cases for other user interactions and edge cases\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA6B,IAAAG,WAAA,GAAAH,OAAA;AAE7BI,QAAQ,CAAC,OAAO,EAAE,YAAM;EACtBC,EAAE,CAAC,4CAA4C,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAY;IAC3D,IAAMC,cAAc,GAAG;MACrBC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;MAClBC,QAAQ,EAAEF,IAAI,CAACC,EAAE,CAAC;IACpB,CAAC;IAED,IAAAE,OAAA,GAA4C,IAAAC,mBAAM,EAChD,IAAAX,WAAA,CAAAY,GAAA,EAACb,MAAA,CAAAK,OAAK;QAACS,UAAU,EAAER;MAAe,CAAE,CACtC,CAAC;MAFOS,oBAAoB,GAAAJ,OAAA,CAApBI,oBAAoB;MAAEC,SAAS,GAAAL,OAAA,CAATK,SAAS;IAKvC,IAAMC,UAAU,GAAGF,oBAAoB,CAAC,kBAAkB,CAAC;IAC3D,IAAMG,aAAa,GAAGH,oBAAoB,CAAC,UAAU,CAAC;IACtDI,sBAAS,CAACC,UAAU,CAACH,UAAU,EAAE,kBAAkB,CAAC;IACpDE,sBAAS,CAACC,UAAU,CAACF,aAAa,EAAE,UAAU,CAAC;IAG/C,IAAMG,WAAW,GAAGL,SAAS,CAAC,OAAO,CAAC;IACtCG,sBAAS,CAACG,KAAK,CAACD,WAAW,CAAC;IAG5BE,MAAM,CAACjB,cAAc,CAACC,OAAO,CAAC,CAACiB,oBAAoB,CAAC,MAAM,CAAC;EAC7D,CAAC,EAAC;EAEFrB,EAAE,CAAC,+BAA+B,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAY;IAC9C,IAAMC,cAAc,GAAG;MACrBC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;MAClBC,QAAQ,EAAEF,IAAI,CAACC,EAAE,CAAC;IACpB,CAAC;IAED,IAAAgB,QAAA,GAAsB,IAAAb,mBAAM,EAAC,IAAAX,WAAA,CAAAY,GAAA,EAACb,MAAA,CAAAK,OAAK;QAACS,UAAU,EAAER;MAAe,CAAE,CAAC,CAAC;MAA3DU,SAAS,GAAAS,QAAA,CAATT,SAAS;IAGjB,IAAMU,oBAAoB,GAAGV,SAAS,CAAC,mBAAmB,CAAC;IAC3DG,sBAAS,CAACG,KAAK,CAACI,oBAAoB,CAAC;EAMvC,CAAC,EAAC;AAGJ,CAAC,CAAC"}