e6681b65a07cdbd4abec4973d2ac1845
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../../Firebase/config");
var Animatable = _interopRequireWildcard(require("react-native-animatable"));
var _reactNativeLinearGradient = _interopRequireDefault(require("react-native-linear-gradient"));
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _Constants = require("../Constants");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _firestore = require("firebase/firestore");
var _reactNative2 = _interopRequireWildcard(require("@notifee/react-native"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var notifyTime = 0;
var AddFixedExp = function AddFixedExp(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    amount = _useState2[0],
    setAmount = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    category = _useState4[0],
    setCategory = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ExpName = _useState6[0],
    setExpName = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    datePicker = _useState8[0],
    setDatePicker = _useState8[1];
  var _useState9 = (0, _react.useState)(new Date()),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    date = _useState10[0],
    setDate = _useState10[1];
  var _useState11 = (0, _react.useState)(0),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    notificationTime = _useState12[0],
    setNotificationTime = _useState12[1];
  var _useState13 = (0, _react.useState)(''),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    selectedCategory = _useState14[0],
    setSelectedCategory = _useState14[1];
  var _useState15 = (0, _react.useState)(),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    triggerNotifeeId = _useState16[0],
    setTriggerNotifeeId = _useState16[1];
  function showDatePicker() {
    setDatePicker(true);
  }
  function onDateSelected(event, value) {
    setDate(value);
    setDatePicker(false);
  }
  function cancelNotifee(_x) {
    return _cancelNotifee.apply(this, arguments);
  }
  function _cancelNotifee() {
    _cancelNotifee = (0, _asyncToGenerator2.default)(function* (notificationId) {
      console.log('canceling notification', notificationId);
      yield _reactNative2.default.cancelTriggerNotification(notificationId);
    });
    return _cancelNotifee.apply(this, arguments);
  }
  function onDisplayNotification() {
    return _onDisplayNotification.apply(this, arguments);
  }
  function _onDisplayNotification() {
    _onDisplayNotification = (0, _asyncToGenerator2.default)(function* () {
      var channelId = yield _reactNative2.default.createChannel({
        id: 'default',
        name: 'Default Channel'
      });
      yield _reactNative2.default.displayNotification({
        title: 'Time to pay',
        body: 'Main body content of the notification',
        android: {
          channelId: channelId,
          pressAction: {
            id: 'default'
          }
        }
      });
    });
    return _onDisplayNotification.apply(this, arguments);
  }
  function onCreateTriggerNotification() {
    return _onCreateTriggerNotification.apply(this, arguments);
  }
  function _onCreateTriggerNotification() {
    _onCreateTriggerNotification = (0, _asyncToGenerator2.default)(function* () {
      var channelId = yield _reactNative2.default.createChannel({
        id: 'default',
        name: 'Default Channel'
      });
      var trigger = {
        id: ExpName,
        type: _reactNative2.TriggerType.TIMESTAMP,
        timestamp: notifyTime
      };
      var notId = yield _reactNative2.default.createTriggerNotification({
        id: ExpName,
        title: 'Time to pay fixed expense',
        body: ExpName,
        android: {
          channelId: channelId,
          pressAction: {
            id: ExpName
          }
        }
      }, trigger);
      setTriggerNotifeeId(notId);
    });
    return _onCreateTriggerNotification.apply(this, arguments);
  }
  var saveFixedExpense = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (ExpName == "" && category == "" && amount <= 0) {
        alert("Please, enter valid details!");
        return;
      }
      if (Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 16 - 5, 52 - 30) < Date.now()) {
        var t = Date.now() + 1000 * 60 * 3;
        notifyTime = Date.now() + 1000 * 60 * 1;
      } else {
        notifyTime = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 16 - 5, 52 - 30);
      }
      onCreateTriggerNotification();
      addFixedExpToDB();
      _reactNative2.default.getTriggerNotificationIds().then(function (ids) {
        return console.log('All trigger notifications: ', ids);
      });
    });
    return function saveFixedExpense() {
      return _ref2.apply(this, arguments);
    };
  }();
  var addFixedExpToDB = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var docRef = yield (0, _firestore.addDoc)((0, _config.collection)(_config.db, "User", _config.auth.currentUser.uid, "FixedExpenses"), {
          ExpName: ExpName,
          category: category,
          amount: amount,
          dueDate: date,
          status: "Unpaid",
          triggerNotificationId: triggerNotifeeId
        });
        console.log("Saved");
        navigation.navigate("Fixed Expense");
        alert("Fixed Expense is saved Successfully!");
      } catch (e) {}
    });
    return function addFixedExpToDB() {
      return _ref3.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.header,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.curve,
        children: (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
          source: require('../../Assets/Background.jpeg'),
          style: styles.curvedImg,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.text_header,
            children: "Add Fixed Payment"
          })
        })
      })
    }), (0, _jsxRuntime.jsx)(Animatable.View, {
      animation: "fadeInUpBig",
      style: styles.footer,
      children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.text_footer,
          children: "Expense Name"
        }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: styles.textInput,
          placeholder: "Enter Name",
          onChangeText: function onChangeText(text) {
            return setExpName(text);
          }
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.action,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.text_footer,
            children: "Category"
          }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
            style: styles.textInput,
            placeholder: "Category",
            onChangeText: function onChangeText(text) {
              return setCategory(text);
            }
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.text_footer,
            children: "Amount"
          }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
            style: styles.textInput,
            placeholder: "Enter Amount",
            keyboardType: "numeric",
            onChangeText: function onChangeText(text) {
              return setAmount(text);
            }
          }), datePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
            value: date,
            mode: 'date',
            display: _reactNative.Platform.OS === 'ios' ? 'spinner' : 'default',
            is24Hour: true,
            onChange: onDateSelected,
            style: styles.datePicker
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.text_footer,
            children: "Due Date"
          }), !datePicker && (0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
            style: styles.dateButton,
            onPress: showDatePicker,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              children: date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear()
            }), (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require("../../Assets/calendar.png"),
              style: {
                width: 30,
                height: 30
              },
              onPress: function onPress() {
                return console.log("image pressed");
              }
            })]
          }), (0, _jsxRuntime.jsx)(Animatable.View, {
            animation: "bounceIn"
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return saveFixedExpense();
          },
          style: {
            backgroundColor: _Constants.darkGreen,
            borderRadius: 200,
            alignItems: 'center',
            width: 250,
            paddingVertical: 5,
            marginVertical: 10,
            alignSelf: 'center',
            marginTop: 68
          },
          children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: {
              color: 'white',
              fontSize: 20,
              fontWeight: 'bold',
              margin: 0
            },
            children: [' ', "Save", ' ']
          })
        })]
      })
    })]
  });
};
var _default = AddFixedExp;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  header: {
    height: height * 0.15,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  },
  footer: {
    flex: _reactNative.Platform.OS === 'ios' ? 3 : 5,
    backgroundColor: '#fff',
    borderRadius: 25,
    paddingHorizontal: 20,
    paddingVertical: 30,
    width: '85%',
    alignSelf: 'center',
    borderWidth: 1.1,
    borderColor: 'black',
    marginVertical: 35,
    shadowOpacity: 0.5,
    shadowColor: 'black',
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 6
  },
  text_header: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 33,
    alignSelf: 'center',
    paddingTop: 150
  },
  text_footer: {
    fontWeight: 'bold',
    fontSize: 16,
    color: _Constants.darkGreen
  },
  action: {
    marginTop: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#f2f2f2',
    paddingBottom: 5
  },
  textInput: {
    flex: 1,
    marginTop: _reactNative.Platform.OS === 'ios' ? 0 : -12,
    paddingLeft: 10,
    color: '#05375a',
    flexDirection: 'row'
  },
  button: {
    alignItems: 'center',
    marginTop: 50
  },
  signIn: {
    width: '100%',
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10
  },
  textSign: {
    fontSize: 18,
    fontWeight: 'bold'
  },
  textPrivate: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 20
  },
  color_textPrivate: {
    color: 'grey'
  },
  dropdown: {
    margin: 10,
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: 'center',
    borderRadius: 6,
    alignItems: 'center'
  },
  placeholderStyle: {
    fontSize: 14
  },
  selectedTextStyle: {
    fontSize: 14
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  inputText: {
    borderRadius: 5,
    color: _Constants.darkGreen,
    paddingHorizontal: 5,
    width: '60%',
    height: 35,
    backgroundColor: 'rgb(220,220, 220)'
  },
  dateButton: {
    borderRadius: 25,
    paddingHorizontal: 10,
    width: '90%',
    height: 40,
    backgroundColor: 'rgb(220,220, 220)',
    marginVertical: 10,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center"
  },
  textInput: {
    borderRadius: 25,
    paddingHorizontal: 10,
    width: '90%',
    height: 40,
    backgroundColor: 'rgb(220,220, 220)',
    marginVertical: 10
  },
  curve: {
    height: 300,
    width: "155%",
    borderBottomLeftRadius: 300,
    borderBottomRightRadius: 300,
    padding: 0,
    overflow: 'hidden',
    marginTop: -150
  },
  curvedImg: {
    height: "100%",
    width: "100%",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center"
  }
});
{}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,