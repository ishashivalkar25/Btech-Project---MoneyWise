3190640a750a70ec39c595326c4fcc69
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AddIncome;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _config = require("../../Firebase/config");
var _storage = require("firebase/storage");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _uploadReceiptIcon = _interopRequireDefault(require("../../Assets/uploadReceiptIcon.png"));
var _reactNativeRootToast = _interopRequireDefault(require("react-native-root-toast"));
var ImagePicker = _interopRequireWildcard(require("react-native-image-picker"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var darkGreen = "#006A42";
function AddIncome(props) {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    category = _useState2[0],
    setCategory = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    datePicker = _useState4[0],
    setDatePicker = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isCatModalVisible = _useState6[0],
    setVisibilityOfCatModal = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isImgModalVisible = _useState8[0],
    setVisibilityOfImgModal = _useState8[1];
  var _useState9 = (0, _react.useState)(new Date()),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    date = _useState10[0],
    setDate = _useState10[1];
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var _useState11 = (0, _react.useState)(0),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    amount = _useState12[0],
    setAmount = _useState12[1];
  var _useState13 = (0, _react.useState)(0),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    accBalance = _useState14[0],
    setAccBalance = _useState14[1];
  var _useState15 = (0, _react.useState)(""),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    description = _useState16[0],
    setDescription = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    mounted = _useState18[0],
    setMounted = _useState18[1];
  var _useState19 = (0, _react.useState)(""),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    selectedCategory = _useState20[0],
    setSelectedCategory = _useState20[1];
  var _useState21 = (0, _react.useState)(""),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    userIncCategories = _useState22[0],
    setUserIncCategories = _useState22[1];
  var _useState23 = (0, _react.useState)(_reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    pickedImagePath = _useState24[0],
    setPickedImagePath = _useState24[1];
  var downloadURL = "";
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        var catList = [];
        try {
          var user = yield (0, _config.getDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid));
          user.data().incCategories.forEach(function (item) {
            getcat = {
              label: item,
              value: item
            };
            catList.push(getcat);
          });
          catList.push({
            label: "other",
            value: "other"
          });
          setCategory(catList);
          setUserIncCategories(user.data().incCategories);
          setAccBalance(parseFloat(user.data().accBalance));
        } catch (e) {
          console.error("Error adding document: ", e);
        }
        setMounted(true);
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, []);
  function showDatePicker() {
    setDatePicker(true);
  }
  function onDateSelected(event, value) {
    setDate(value);
    setDatePicker(false);
  }
  var showImagePicker = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var result = yield ImagePicker.launchImageLibrary();
      setPickedImagePath(result.assets[0].uri);
    });
    return function showImagePicker() {
      return _ref2.apply(this, arguments);
    };
  }();
  var openCamera = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      var result = yield ImagePicker.launchCamera();
      setPickedImagePath(result.assets[0].uri);
    });
    return function openCamera() {
      return _ref3.apply(this, arguments);
    };
  }();
  var saveIncome = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      if (amount == 0) {
        var toast = _reactNativeRootToast.default.show("Please enter amount.", {
          duration: _reactNativeRootToast.default.durations.LONG
        });
        setTimeout(function hideToast() {
          _reactNativeRootToast.default.hide(toast);
        }, 8000);
        return;
      }
      if (selectedCategory == "") {
        var _toast = _reactNativeRootToast.default.show("Please select category.", {
          duration: _reactNativeRootToast.default.durations.LONG
        });
        setTimeout(function hideToast() {
          _reactNativeRootToast.default.hide(_toast);
        }, 8000);
        return;
      }
      var promise = Promise.resolve();
      if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri) {
        promise = new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.onload = function () {
            var blobImage = xhr.response;
            var metadata = {
              contentType: "image/jpeg"
            };
            var storageRef = (0, _storage.ref)(_config.storage, "IncImages/" + Date.now());
            var uploadTask = (0, _storage.uploadBytesResumable)(storageRef, blobImage, metadata);
            uploadTask.on("state_changed", function (snapshot) {
              var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;
              switch (snapshot.state) {
                case "paused":
                  console.log("Upload is paused");
                  break;
                case "running":
                  console.log("Upload is running");
                  break;
              }
            }, function (error) {
              switch (error.code) {
                case "storage/unauthorized":
                  reject(new Error("User doesn't have permission to access the object"));
                  break;
                case "storage/canceled":
                  reject(new Error("User canceled the upload"));
                  break;
                case "storage/unknown":
                  reject(new Error("Unknown error occurred, inspect error.serverResponse"));
                  break;
                default:
                  reject(error);
                  break;
              }
            }, (0, _asyncToGenerator2.default)(function* () {
              downloadURL = yield (0, _storage.getDownloadURL)(uploadTask.snapshot.ref);
              console.log("File available at", downloadURL);
              setPickedImagePath(downloadURL);
              resolve();
            }));
          };
          xhr.onerror = function () {
            reject(new Error("Network request failed"));
          };
          xhr.responseType = "blob";
          xhr.open("GET", pickedImagePath, true);
          xhr.send(null);
        });
      }
      try {
        yield promise;
        setPickedImagePath(downloadURL);
        var data_1 = {
          incAmount: amount,
          incDate: date,
          incCategory: selectedCategory,
          incDescription: description
        };
        if (pickedImagePath != _reactNative.Image.resolveAssetSource(_uploadReceiptIcon.default).uri) {
          data_1.incImage = pickedImagePath;
        }
        var docRef = yield (0, _config.addDoc)((0, _config.collection)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), "Income"), data_1);
        var querySnapshot = yield (0, _config.getDocs)((0, _config.collection)(_config.db, "income"));
        querySnapshot.forEach(function (doc) {});
        yield (0, _config.updateDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid), {
          accBalance: accBalance + parseFloat(amount) + ""
        });
        alert("Record Added Successfully");
        props.navigation.navigate("Root");
      } catch (error_1) {
        console.error("Error adding document: ", error_1);
        throw error_1;
      }
    });
    return function saveIncome() {
      return _ref4.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative.ImageBackground, {
    source: require('../../Assets/Background.jpeg'),
    style: {
      width: width,
      height: height,
      marginTop: insets.top
    },
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.Title,
      children: "Add Income"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.mainContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Amount:"
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                keyboardType: "numeric",
                style: styles.inputText,
                onChangeText: setAmount
              })]
            }), datePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
              value: date,
              mode: "date",
              display: Platform.OS === "ios" ? "spinner" : "default",
              is24Hour: true,
              onChange: onDateSelected,
              style: styles.datePicker
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.inputPair,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.head,
                children: "Date: "
              }), !datePicker && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.inputText,
                children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
                  style: styles.dateButton,
                  onPress: showDatePicker,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    children: date.getDate() + ' / ' + (date.getMonth() + 1) + ' / ' + date.getFullYear()
                  })
                })
              })]
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container1,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.headCenter,
              children: "Select Category"
            }), (0, _jsxRuntime.jsx)(_reactNativeElementDropdown.Dropdown, {
              style: styles.dropdown,
              placeholderStyle: styles.placeholderStyle,
              selectedTextStyle: styles.selectedTextStyle,
              inputSearchStyle: styles.inputSearchStyle,
              iconStyle: styles.iconStyle,
              data: category,
              search: true,
              maxHeight: 300,
              labelField: "label",
              valueField: "value",
              placeholder: "Category",
              searchPlaceholder: "Search...",
              value: selectedCategory,
              onChange: function onChange(item) {
                if (item.value != "other") setSelectedCategory(item.value);else {
                  setVisibilityOfCatModal(true);
                }
              }
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
            animationType: "slide",
            transparent: true,
            visible: isCatModalVisible,
            presentationStyle: "overFullScreen",
            onDismiss: function onDismiss() {
              setVisibilityOfCatModal(!isCatModalVisible);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.viewWrapper,
              children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.modalView,
                children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                  placeholder: "Enter Category",
                  style: styles.textInput,
                  onChangeText: function onChangeText(value) {
                    setSelectedCategory(value);
                  }
                }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
                  title: "Add Category",
                  onPress: function onPress() {
                    setVisibilityOfCatModal(!isCatModalVisible);
                    setCategory([].concat((0, _toConsumableArray2.default)(category), [{
                      label: selectedCategory,
                      value: selectedCategory
                    }]));
                  }
                })]
              })
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.container2,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.head,
              children: "Add note"
            }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              placeholder: "Description",
              style: styles.input1,
              onChangeText: function onChangeText(value) {
                setDescription(value);
              }
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.headCenter,
              children: "Add Image"
            }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
              animationType: "slide",
              transparent: true,
              visible: isImgModalVisible,
              presentationStyle: "overFullScreen",
              onDismiss: function onDismiss() {
                setVisibilityOfCatModal(!isImgModalVisible);
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.viewWrapper,
                children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.modalView,
                  children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: showImagePicker,
                    style: styles.selImg,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: "white",
                        fontSize: 15,
                        fontWeight: 'bold'
                      },
                      children: " Upload image "
                    })
                  }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: openCamera,
                    style: styles.selImg,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: "white",
                        fontSize: 15,
                        fontWeight: 'bold'
                      },
                      children: " Take Photo "
                    })
                  }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                    onPress: function onPress() {
                      setVisibilityOfImgModal(!isImgModalVisible);
                    },
                    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: {
                        color: darkGreen,
                        fontSize: 15,
                        marginTop: 30
                      },
                      children: " Close "
                    })
                  })]
                })
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                setVisibilityOfImgModal(true);
              },
              children: pickedImagePath !== "" && (0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: {
                  uri: pickedImagePath
                },
                style: {
                  width: 50,
                  height: 50,
                  margin: 15,
                  alignSelf: 'center'
                },
                onPress: function onPress() {
                  console.log("image clicked");
                  setVisibilityOfImgModal(true);
                }
              })
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: saveIncome,
            style: {
              backgroundColor: darkGreen,
              borderRadius: 200,
              alignItems: 'center',
              width: 250,
              paddingVertical: 5,
              marginVertical: 10,
              alignSelf: 'center'
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "white",
                fontSize: 20,
                fontWeight: 'bold',
                margin: 0
              },
              children: " Save "
            })
          })]
        })
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    borderTopLeftRadius: 40,
    borderTopRightRadius: 40,
    height: height * 0.8,
    width: width,
    backgroundColor: "#fff",
    marginTop: 5
  },
  mainContainer: {
    padding: 25,
    flex: 1,
    height: "100%",
    justifyContent: "space-between"
  },
  container1: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {
      height: 5,
      width: 5
    },
    elevation: 5,
    backgroundColor: "white",
    marginTop: 20
  },
  container2: {
    width: "100%",
    alignSelf: "center",
    borderRadius: 15,
    shadowOpacity: 0.5,
    shadowColor: "black",
    shadowOffset: {},
    elevation: 5,
    backgroundColor: "white",
    marginTop: 30,
    paddingTop: 5,
    paddingLeft: 20,
    paddingRight: 20
  },
  container_btn_block: {
    flexDirection: 'row',
    paddingBottom: 10,
    paddingTop: 10,
    justifyContent: "space-around"
  },
  container2_btn: {
    padding: 15,
    flexGrow: 1,
    flexShrink: 0,
    flexBasis: 100,
    borderRadius: 10,
    backgroundColor: "#841584",
    color: "white",
    width: 150,
    margin: 5
  },
  Title: {
    color: "white",
    fontSize: 50,
    fontWeight: "bold",
    marginVertical: 20,
    alignSelf: "center"
  },
  inputPair: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10
  },
  head: {
    fontWeight: "bold",
    fontSize: 16,
    color: darkGreen
  },
  inputText: {
    padding: 0,
    borderRadius: 5,
    color: darkGreen,
    paddingHorizontal: 5,
    width: '60%',
    height: 35,
    backgroundColor: 'rgb(220,220, 220)'
  },
  input1: {
    borderWidth: 1,
    borderColor: '#777',
    borderRadius: 10,
    padding: 10,
    width: "100%",
    height: 80,
    marginTop: 10,
    marginBottom: 15,
    textAlignVertical: "top",
    textAlign: 'left'
  },
  headCenter: {
    marginTop: 10,
    fontWeight: "bold",
    alignSelf: "center",
    color: darkGreen,
    fontSize: 16
  },
  dropDownStyle: {
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: "center",
    borderRadius: 6,
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  dropDownIcon: {
    resizeMode: 'contain'
  },
  modal: {
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
    height: 300,
    width: "80%",
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#fff",
    marginTop: 80,
    marginLeft: 40
  },
  viewWrapper: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(0, 0, 0, 0.2)"
  },
  modalView: {
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "50%",
    left: "50%",
    elevation: 5,
    transform: [{
      translateX: -(width * 0.4)
    }, {
      translateY: -90
    }],
    height: 180,
    width: width * 0.8,
    backgroundColor: "#fff",
    borderRadius: 7
  },
  textInput: {
    width: "80%",
    borderRadius: 5,
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderColor: "rgba(0, 0, 0, 0.2)",
    borderWidth: 1,
    marginBottom: 8
  },
  dateButton: {
    padding: 7,
    alignSelf: "center",
    borderRadius: 5,
    flexDirection: 'row',
    width: 180,
    alignItems: 'center',
    backgroundColor: 'rgb(220,220, 220)'
  },
  catItem: {
    padding: 10,
    backgroundColor: "skyblue",
    fontSize: 14,
    marginHorizontal: 10,
    marginTop: 24
  },
  dropdown: {
    margin: 10,
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: "center",
    borderRadius: 6,
    alignItems: 'center'
  },
  icon: {
    marginRight: 5
  },
  placeholderStyle: {
    fontSize: 14
  },
  selectedTextStyle: {
    fontSize: 14
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  selImg: {
    backgroundColor: darkGreen,
    borderRadius: 10,
    alignItems: 'center',
    width: 150,
    paddingVertical: 5,
    marginVertical: 10,
    alignSelf: 'center',
    marginTop: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,