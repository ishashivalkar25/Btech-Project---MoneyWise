3c8a7529ceab2c7371590ecac1afabc7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Login = _interopRequireDefault(require("../Components/Login"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Login', function () {
  it('should handle login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      queryByPlaceholderText = _render.queryByPlaceholderText,
      getByText = _render.getByText;
    var emailInput = queryByPlaceholderText('Email / Username');
    var passwordInput = getByPlaceholderText('Password');
    _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
    _reactNative.fireEvent.changeText(passwordInput, 'password');
    var loginButton = getByText('Login');
    _reactNative.fireEvent.press(loginButton);
    expect(navigationMock.replace).toHaveBeenCalledWith('Root');
  }));
  it('should handle forgot password', (0, _asyncToGenerator2.default)(function* () {
    var navigationMock = {
      replace: jest.fn(),
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Login.default, {
        navigation: navigationMock
      })),
      getByText = _render2.getByText,
      queryByTestId = _render2.queryByTestId;
    var forgotPasswordButton = queryByTestId('Forgot Password');
    console.log(forgotPasswordButton);
    _reactNative.fireEvent.press(forgotPasswordButton);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Mb2dpbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJuYXZpZ2F0aW9uTW9jayIsInJlcGxhY2UiLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJuYXZpZ2F0aW9uIiwicXVlcnlCeVBsYWNlaG9sZGVyVGV4dCIsImdldEJ5VGV4dCIsImVtYWlsSW5wdXQiLCJwYXNzd29yZElucHV0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJmaXJlRXZlbnQiLCJjaGFuZ2VUZXh0IiwibG9naW5CdXR0b24iLCJwcmVzcyIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjIiLCJxdWVyeUJ5VGVzdElkIiwiZm9yZ290UGFzc3dvcmRCdXR0b24iLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiTG9naW4tdGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IExvZ2luIGZyb20gJy4uL0NvbXBvbmVudHMvTG9naW4nO1xyXG5cclxuZGVzY3JpYmUoJ0xvZ2luJywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgaGFuZGxlIGxvZ2luIHdpdGggdmFsaWQgY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TG9naW4gbmF2aWdhdGlvbj17bmF2aWdhdGlvbk1vY2t9IC8+XHJcbiAgICApO1xyXG5cclxuICAgIC8vIEZpbGwgaW4gdGhlIGxvZ2luIGZvcm0gZmllbGRzXHJcbiAgICBjb25zdCBlbWFpbElucHV0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgnRW1haWwgLyBVc2VybmFtZScpO1xyXG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdQYXNzd29yZCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgJ3Rlc3RAZXhhbXBsZS5jb20nKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsICdwYXNzd29yZCcpO1xyXG5cclxuICAgIC8vIFRyaWdnZXIgdGhlIGxvZ2luIGFjdGlvblxyXG4gICAgY29uc3QgbG9naW5CdXR0b24gPSBnZXRCeVRleHQoJ0xvZ2luJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MobG9naW5CdXR0b24pO1xyXG5cclxuICAgIC8vIEFzc2VydCB0aGF0IHRoZSBuYXZpZ2F0aW9uIG1ldGhvZCBpcyBjYWxsZWRcclxuICAgIGV4cGVjdChuYXZpZ2F0aW9uTW9jay5yZXBsYWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUm9vdCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBmb3Jnb3QgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uTW9jayA9IHtcclxuICAgICAgcmVwbGFjZTogamVzdC5mbigpLFxyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxMb2dpbiBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9uTW9ja30gLz4pO1xyXG5cclxuICAgIC8vIFRyaWdnZXIgdGhlIGZvcmdvdCBwYXNzd29yZCBhY3Rpb25cclxuICAgIGNvbnN0IGZvcmdvdFBhc3N3b3JkQnV0dG9uID0gcXVlcnlCeVRlc3RJZCgnRm9yZ290IFBhc3N3b3JkJyk7XHJcbiAgICBjb25zb2xlLmxvZyhmb3Jnb3RQYXNzd29yZEJ1dHRvbilcclxuICAgIGZpcmVFdmVudC5wcmVzcyhmb3Jnb3RQYXNzd29yZEJ1dHRvbik7XHJcblxyXG4gICAgLy8gQXNzZXJ0IHRoYXQgdGhlIGRpYWxvZyBib3ggdmlzaWJpbGl0eSBzdGF0ZSBpcyB1cGRhdGVkXHJcbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiBhc3NlcnQgdGhhdCB0aGUgZGlhbG9nIGJveCBiZWNvbWVzIHZpc2libGVcclxuICAgIC8vIGJ5IGNoZWNraW5nIGZvciBpdHMgZXhpc3RlbmNlIG9yIGEgc3BlY2lmaWMgVUkgZWxlbWVudCB3aXRoaW4gaXRcclxuICAgIC8vIGV4cGVjdCguLi4pIGFzc2VydGlvbnMgZm9yIGRpYWxvZyBib3ggdmlzaWJpbGl0eVxyXG4gIH0pO1xyXG5cclxuICAvLyBBZGQgbW9yZSB0ZXN0IGNhc2VzIGZvciBvdGhlciB1c2VyIGludGVyYWN0aW9ucyBhbmQgZWRnZSBjYXNlc1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF3QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFeENJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtFQUN0QkMsRUFBRSxDQUFDLDRDQUE0QyxNQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBWTtJQUMzRCxJQUFNQyxjQUFjLEdBQUc7TUFDckJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBQUUsT0FBQSxHQUE4QyxJQUFBQyxtQkFBTSxFQUNsRCxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsTUFBQSxDQUFBSyxPQUFLO1FBQUNTLFVBQVUsRUFBRVI7TUFBZSxDQUFFLENBQ3RDLENBQUM7TUFGT1Msc0JBQXNCLEdBQUFKLE9BQUEsQ0FBdEJJLHNCQUFzQjtNQUFFQyxTQUFTLEdBQUFMLE9BQUEsQ0FBVEssU0FBUztJQUt6QyxJQUFNQyxVQUFVLEdBQUdGLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDO0lBQzdELElBQU1HLGFBQWEsR0FBR0Msb0JBQW9CLENBQUMsVUFBVSxDQUFDO0lBQ3REQyxzQkFBUyxDQUFDQyxVQUFVLENBQUNKLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQztJQUNwREcsc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDSCxhQUFhLEVBQUUsVUFBVSxDQUFDO0lBRy9DLElBQU1JLFdBQVcsR0FBR04sU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN0Q0ksc0JBQVMsQ0FBQ0csS0FBSyxDQUFDRCxXQUFXLENBQUM7SUFHNUJFLE1BQU0sQ0FBQ2xCLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDLENBQUNrQixvQkFBb0IsQ0FBQyxNQUFNLENBQUM7RUFDN0QsQ0FBQyxFQUFDO0VBRUZ0QixFQUFFLENBQUMsK0JBQStCLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQzlDLElBQU1DLGNBQWMsR0FBRztNQUNyQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCQyxRQUFRLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFBaUIsUUFBQSxHQUFxQyxJQUFBZCxtQkFBTSxFQUFDLElBQUFYLFdBQUEsQ0FBQVksR0FBQSxFQUFDYixNQUFBLENBQUFLLE9BQUs7UUFBQ1MsVUFBVSxFQUFFUjtNQUFlLENBQUUsQ0FBQyxDQUFDO01BQTFFVSxTQUFTLEdBQUFVLFFBQUEsQ0FBVFYsU0FBUztNQUFFVyxhQUFhLEdBQUFELFFBQUEsQ0FBYkMsYUFBYTtJQUdoQyxJQUFNQyxvQkFBb0IsR0FBR0QsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0lBQzdERSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0Ysb0JBQW9CLENBQUM7SUFDakNSLHNCQUFTLENBQUNHLEtBQUssQ0FBQ0ssb0JBQW9CLENBQUM7RUFNdkMsQ0FBQyxFQUFDO0FBR0osQ0FBQyxDQUFDIn0=