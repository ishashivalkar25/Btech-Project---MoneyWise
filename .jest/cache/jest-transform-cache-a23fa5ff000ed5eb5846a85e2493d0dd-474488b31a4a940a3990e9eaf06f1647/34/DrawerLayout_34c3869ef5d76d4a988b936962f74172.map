{"version":3,"names":["React","_interopRequireWildcard","require","_invariant","_interopRequireDefault","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_React$Component","_inherits2","default","_super","_createSuper","_props","_this","_classCallCheck2","call","_defineProperty","_assertThisInitialized2","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","_ref","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","_ref2","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_ref3","drawerShown","drawerLockMode","closeDrawer","_ref4","_this$props6","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","_this$props7","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","_ref5","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","arguments","length","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","_this$props8","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","_createClass2","key","value","shouldComponentUpdate","render","_this$props9","PanGestureHandler","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","Left","Right","StyleSheet","create","Object","assign","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"}