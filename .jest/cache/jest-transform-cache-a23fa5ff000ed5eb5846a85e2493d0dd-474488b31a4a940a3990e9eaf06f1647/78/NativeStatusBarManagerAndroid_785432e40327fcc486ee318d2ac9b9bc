cad49433a8faef3a853743d29c001add
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../../TurboModule/TurboModuleRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
  getConstants: function getConstants() {
    if (constants == null) {
      constants = NativeModule.getConstants();
    }
    return constants;
  },
  setColor: function setColor(color, animated) {
    NativeModule.setColor(color, animated);
  },
  setTranslucent: function setTranslucent(translucent) {
    NativeModule.setTranslucent(translucent);
  },
  setStyle: function setStyle(statusBarStyle) {
    NativeModule.setStyle(statusBarStyle);
  },
  setHidden: function setHidden(hidden) {
    NativeModule.setHidden(hidden);
  }
};
var _default = NativeStatusBarManager;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIk5hdGl2ZU1vZHVsZSIsImdldEVuZm9yY2luZyIsImNvbnN0YW50cyIsIk5hdGl2ZVN0YXR1c0Jhck1hbmFnZXIiLCJnZXRDb25zdGFudHMiLCJzZXRDb2xvciIsImNvbG9yIiwiYW5pbWF0ZWQiLCJzZXRUcmFuc2x1Y2VudCIsInRyYW5zbHVjZW50Iiwic2V0U3R5bGUiLCJzdGF0dXNCYXJTdHlsZSIsInNldEhpZGRlbiIsImhpZGRlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7VHVyYm9Nb2R1bGV9IGZyb20gJy4uLy4uL1R1cmJvTW9kdWxlL1JDVEV4cG9ydCc7XG5cbmltcG9ydCAqIGFzIFR1cmJvTW9kdWxlUmVnaXN0cnkgZnJvbSAnLi4vLi4vVHVyYm9Nb2R1bGUvVHVyYm9Nb2R1bGVSZWdpc3RyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlYyBleHRlbmRzIFR1cmJvTW9kdWxlIHtcbiAgK2dldENvbnN0YW50czogKCkgPT4ge3xcbiAgICArSEVJR0hUOiBudW1iZXIsXG4gICAgK0RFRkFVTFRfQkFDS0dST1VORF9DT0xPUjogbnVtYmVyLFxuICB8fTtcbiAgK3NldENvbG9yOiAoY29sb3I6IG51bWJlciwgYW5pbWF0ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICtzZXRUcmFuc2x1Y2VudDogKHRyYW5zbHVjZW50OiBib29sZWFuKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiAgLSBzdGF0dXNCYXJTdHlsZXMgY2FuIGJlOlxuICAgKiAgICAtICdkZWZhdWx0J1xuICAgKiAgICAtICdkYXJrLWNvbnRlbnQnXG4gICAqL1xuICArc2V0U3R5bGU6IChzdGF0dXNCYXJTdHlsZT86ID9zdHJpbmcpID0+IHZvaWQ7XG4gICtzZXRIaWRkZW46IChoaWRkZW46IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbmNvbnN0IE5hdGl2ZU1vZHVsZSA9IFR1cmJvTW9kdWxlUmVnaXN0cnkuZ2V0RW5mb3JjaW5nPFNwZWM+KCdTdGF0dXNCYXJNYW5hZ2VyJyk7XG5sZXQgY29uc3RhbnRzID0gbnVsbDtcblxuY29uc3QgTmF0aXZlU3RhdHVzQmFyTWFuYWdlciA9IHtcbiAgZ2V0Q29uc3RhbnRzKCk6IHt8XG4gICAgK0hFSUdIVDogbnVtYmVyLFxuICAgICtERUZBVUxUX0JBQ0tHUk9VTkRfQ09MT1I/OiBudW1iZXIsXG4gIHx9IHtcbiAgICBpZiAoY29uc3RhbnRzID09IG51bGwpIHtcbiAgICAgIGNvbnN0YW50cyA9IE5hdGl2ZU1vZHVsZS5nZXRDb25zdGFudHMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0YW50cztcbiAgfSxcblxuICBzZXRDb2xvcihjb2xvcjogbnVtYmVyLCBhbmltYXRlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5zZXRDb2xvcihjb2xvciwgYW5pbWF0ZWQpO1xuICB9LFxuXG4gIHNldFRyYW5zbHVjZW50KHRyYW5zbHVjZW50OiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldFRyYW5zbHVjZW50KHRyYW5zbHVjZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogIC0gc3RhdHVzQmFyU3R5bGVzIGNhbiBiZTpcbiAgICogICAgLSAnZGVmYXVsdCdcbiAgICogICAgLSAnZGFyay1jb250ZW50J1xuICAgKi9cbiAgc2V0U3R5bGUoc3RhdHVzQmFyU3R5bGU/OiA/c3RyaW5nKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldFN0eWxlKHN0YXR1c0JhclN0eWxlKTtcbiAgfSxcblxuICBzZXRIaWRkZW4oaGlkZGVuOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldEhpZGRlbihoaWRkZW4pO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU3RhdHVzQmFyTWFuYWdlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQVlBLElBQUFBLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBNkUsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFtQjdFLElBQU1XLFlBQVksR0FBR3pCLG1CQUFtQixDQUFDMEIsWUFBWSxDQUFPLGtCQUFrQixDQUFDO0FBQy9FLElBQUlDLFNBQVMsR0FBRyxJQUFJO0FBRXBCLElBQU1DLHNCQUFzQixHQUFHO0VBQzdCQyxZQUFZLFdBQUFBLGFBQUEsRUFHVDtJQUNELElBQUlGLFNBQVMsSUFBSSxJQUFJLEVBQUU7TUFDckJBLFNBQVMsR0FBR0YsWUFBWSxDQUFDSSxZQUFZLENBQUMsQ0FBQztJQUN6QztJQUNBLE9BQU9GLFNBQVM7RUFDbEIsQ0FBQztFQUVERyxRQUFRLFdBQUFBLFNBQUNDLEtBQWEsRUFBRUMsUUFBaUIsRUFBUTtJQUMvQ1AsWUFBWSxDQUFDSyxRQUFRLENBQUNDLEtBQUssRUFBRUMsUUFBUSxDQUFDO0VBQ3hDLENBQUM7RUFFREMsY0FBYyxXQUFBQSxlQUFDQyxXQUFvQixFQUFRO0lBQ3pDVCxZQUFZLENBQUNRLGNBQWMsQ0FBQ0MsV0FBVyxDQUFDO0VBQzFDLENBQUM7RUFPREMsUUFBUSxXQUFBQSxTQUFDQyxjQUF3QixFQUFRO0lBQ3ZDWCxZQUFZLENBQUNVLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDO0VBQ3ZDLENBQUM7RUFFREMsU0FBUyxXQUFBQSxVQUFDQyxNQUFlLEVBQVE7SUFDL0JiLFlBQVksQ0FBQ1ksU0FBUyxDQUFDQyxNQUFNLENBQUM7RUFDaEM7QUFDRixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVhWCxzQkFBc0I7QUFBQVksT0FBQSxDQUFBOUIsT0FBQSxHQUFBNkIsUUFBQSJ9