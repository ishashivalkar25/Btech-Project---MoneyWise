7144c255d197240785d4495f496f0ea5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _auth = require("firebase/auth");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeElementDropdown = require("react-native-element-dropdown");
var _reactNativeMonthYearPicker = _interopRequireDefault(require("react-native-month-year-picker"));
var _config = require("../../Firebase/config");
var _jsxRuntime = require("react/jsx-runtime");
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var Envelope = function Envelope(props) {
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    modalVisible = _React$useState2[0],
    setModalVisible = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    editCatBudgetModalVisible = _React$useState4[0],
    setEditCatBudgetModalVisible = _React$useState4[1];
  var _React$useState5 = _react.default.useState([]),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    categories = _React$useState6[0],
    setCategories = _React$useState6[1];
  var _React$useState7 = _react.default.useState([]),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    selectedCategories = _React$useState8[0],
    updateSelectedCategories = _React$useState8[1];
  var _React$useState9 = _react.default.useState(),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
    selectedCategory = _React$useState10[0],
    setSelectedCategory = _React$useState10[1];
  var _React$useState11 = _react.default.useState(),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    categoryBudget = _React$useState12[0],
    setCategoryBudget = _React$useState12[1];
  var _React$useState13 = _react.default.useState(),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    categoryBudgetEdit = _React$useState14[0],
    setCategoryBudgetEdit = _React$useState14[1];
  var _React$useState15 = _react.default.useState(-1),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    editIdx = _React$useState16[0],
    setEditIdx = _React$useState16[1];
  var _React$useState17 = _react.default.useState([]),
    _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
    categoryWiseBudget = _React$useState18[0],
    setCategoryWiseBudget = _React$useState18[1];
  var _React$useState19 = _react.default.useState(false),
    _React$useState20 = (0, _slicedToArray2.default)(_React$useState19, 2),
    isCategoryWiseBudgetChanged = _React$useState20[0],
    updateIsCategoryWiseBudgetChanged = _React$useState20[1];
  _react.default.useEffect(function () {
    fetchExpCategories();
  }, []);
  var fetchExpCategories = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var docRef = (0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid);
        var user = yield (0, _config.getDoc)(docRef);
        console.log(user.data().expCategories, " Categories **");
        var tempCategories = [];
        user.data().expCategories.forEach(function (item) {
          tempCategories.push({
            label: item,
            value: item
          });
        });
        setCategories(tempCategories);
      } catch (e) {
        console.error("Error adding document: ", e);
      }
    });
    return function fetchExpCategories() {
      return _ref.apply(this, arguments);
    };
  }();
  _react.default.useEffect(function () {
    console.log(categories);
  }, [categories]);
  var addCategory = function addCategory() {
    if (!props.monthlyInc) {
      console.log("Please enter Monthly Income!");
      alert("Please enter Monthly Income!");
    } else if (props.monthlyInc <= 0) {
      alert("Please enter valid Monthly Income!");
    } else if (!props.selectedBudgetingMethod) {
      alert("Please enter Budgeting Method!");
    } else {
      setModalVisible(true);
    }
  };
  var deleteCategory = function deleteCategory(index) {
    var rm = categoryWiseBudget.splice(index, 1);
    var rms = selectedCategories.splice(index, 1);
    console.log(rm, "rm");
    console.log(rms, "rms");
    updateIsCategoryWiseBudgetChanged(true);
  };
  var editCategoryWiseBudget = function editCategoryWiseBudget(index) {
    setEditCatBudgetModalVisible(!editCatBudgetModalVisible);
    console.log(index);
    setEditIdx(index);
  };
  var setEditedCategoryWiseBudget = function setEditedCategoryWiseBudget() {
    setEditCatBudgetModalVisible(!editCatBudgetModalVisible);
    console.log(editIdx, " ", categoryBudgetEdit);
    if (categoryBudgetEdit == null) {
      alert("Please enter budget amount!");
    } else if (categoryBudgetEdit <= 0) {
      alert("Please enter valid budget amount!");
    } else if (editIdx > -1 && categoryWiseBudget.length > editIdx && categoryWiseBudget[editIdx] != null) {
      console.log(categoryWiseBudget[editIdx], "****");
      console.log(categoryWiseBudget[editIdx].budgetPlanned, "**");
      categoryWiseBudget[editIdx].budgetPlanned = parseFloat(categoryBudgetEdit);
      console.log(categoryWiseBudget[editIdx]);
      setCategoryBudgetEdit(null);
      setEditIdx(-1);
    }
  };
  var addCategoryWiseBudget = function addCategoryWiseBudget() {
    setModalVisible(!modalVisible);
    if (selectedCategory == null) {
      alert("Please select category!");
    } else if (selectedCategories.includes(selectedCategory)) {
      alert("You have already added " + selectedCategory + " category in Budget!");
    } else if (categoryBudget <= 0) {
      alert("Please enter valid budget amount!");
    } else {
      selectedCategories.push(selectedCategory);
      categoryWiseBudget.push({
        category: selectedCategory,
        budgetPlanned: parseFloat(categoryBudget),
        budgetSpent: 0
      });
      console.log("categoryWiseBudget", categoryWiseBudget);
      updateIsCategoryWiseBudgetChanged(true);
      console.log(isCategoryWiseBudgetChanged);
      setSelectedCategory(null);
      setCategoryBudget(null);
    }
    updateIsCategoryWiseBudgetChanged(false);
  };
  var calculateTotalIncome = function calculateTotalIncome() {
    var totalAmount = 0;
    categoryWiseBudget.forEach(function (item) {
      totalAmount = totalAmount + item.budgetPlanned;
    });
    console.log("Total", totalAmount);
    return totalAmount;
  };
  var validateBudget = function validateBudget() {
    var totalAmount = calculateTotalIncome();
    if (totalAmount > props.monthlyInc) {
      alert("Your set budget amount total is exceeding your monthly income.");
      return false;
    } else {
      return true;
    }
  };
  var saveBudget = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var totalAmount = calculateTotalIncome();
      if (!selectedCategories.includes("Additional Expenses")) {
        categoryWiseBudget.push({
          category: "Additional Expenses",
          budgetPlanned: 0,
          budgetSpent: 0
        });
      }
      try {
        var recordId = months[props.date.getMonth()] + "" + props.date.getFullYear();
        var docRef = yield (0, _config.setDoc)((0, _config.doc)(_config.db, "User", _config.auth.currentUser.uid, "Budget", recordId), {
          method: props.selectedBudgetingMethod,
          budget: categoryWiseBudget,
          saving: props.monthlyInc - totalAmount,
          monthlyInc: props.monthlyInc,
          totalBudget: totalAmount
        });
        console.log("Saved");
        props.navigation.navigate("Your Budget", {
          budgetChanged: true
        });
        alert("Budget for " + (months[props.date.getMonth()] + " " + props.date.getFullYear()) + " is saved Successfully!");
        clearFields();
      } catch (e) {
        console.log(e);
      }
    });
    return function saveBudget() {
      return _ref2.apply(this, arguments);
    };
  }();
  var confirmBudget = function confirmBudget() {
    if (validateBudget()) {
      _reactNative.Alert.alert('Alert Title', 'Do you want to confirm a Budget?', [{
        text: 'Cancel',
        onPress: function onPress() {
          return console.log('Cancel Pressed');
        },
        style: 'cancel'
      }, {
        text: 'Yes',
        onPress: function onPress() {
          return saveBudget();
        }
      }]);
    }
  };
  var clearFields = function clearFields() {
    setCategories([]);
    updateSelectedCategories([]);
    setCategoryWiseBudget([]);
  };
  return (0, _jsxRuntime.jsx)(_reactNative.SafeAreaView, {
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.categoryWiseBudgetContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          margin: 10,
          justifyContent: 'center'
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.categoryWiseBudgetTitleText,
          children: "Budget Planned : "
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.categoryWiseBudget,
        children: [(0, _jsxRuntime.jsx)(_reactNative.FlatList, {
          data: categoryWiseBudget,
          ListHeaderComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.categoryWiseBudgetTitle,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.categoryWiseBudgetTitleText,
              children: "Envelope : "
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.budgetCategoryCenter,
              onPress: addCategory,
              children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: require('../../Assets/more.png'),
                style: {
                  width: 20,
                  height: 20,
                  tintColor: "green"
                }
              })
            })]
          }),
          renderItem: function renderItem(_ref3) {
            var item = _ref3.item,
              index = _ref3.index;
            return (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: {
                backgroundColor: "white",
                borderRadius: 30,
                borderWidth: 1,
                marginBottom: 5,
                borderColor: "black"
              },
              children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.budgetCategory,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
                  style: styles.budgetCategoryEdit,
                  onPress: function onPress() {
                    return editCategoryWiseBudget(index);
                  },
                  children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: styles.budgetCategoryCenter,
                    children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                      source: require('../../Assets/envelope.png'),
                      style: {
                        width: 20,
                        height: 20
                      }
                    })
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.budgetCategoryCenter,
                    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.budgetCategoryText,
                      children: "Category Name"
                    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      children: item.category
                    })]
                  }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                    style: styles.budgetCategoryCenter,
                    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                      style: styles.budgetCategoryText,
                      children: "Budget Planned"
                    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                      children: item.budgetPlanned
                    })]
                  })]
                }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: styles.budgetCategoryCenter,
                  onPress: function onPress() {
                    return deleteCategory(index);
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
                    source: require('../../Assets/remove.png'),
                    style: styles.buttonImg
                  })
                })]
              })
            });
          },
          ListEmptyComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.noBudget,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require('../../Assets/no-data.png'),
              style: {
                width: 100,
                height: 100
              }
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.noBudgetText,
              children: "Budget is not set for any Category!"
            })]
          }),
          style: {
            backgroundColor: "white"
          }
        }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
          animationType: "slide",
          transparent: true,
          visible: editCatBudgetModalVisible,
          onRequestClose: function onRequestClose() {
            setEditCatBudgetModalVisible(!editCatBudgetModalVisible);
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.centeredView,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.modalView,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.modalText,
                children: "Enter Budget"
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                style: styles.budgetAmountInput,
                onChangeText: function onChangeText(text) {
                  return setCategoryBudgetEdit(text);
                },
                value: categoryBudgetEdit,
                placeholder: "Enter Budget for this category...",
                keyboardType: "numeric"
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: [styles.buttonModal, styles.buttonClose],
                onPress: function onPress() {
                  return setEditedCategoryWiseBudget();
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.textStyle,
                  children: "Set"
                })
              })]
            })
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
          animationType: "slide",
          transparent: true,
          visible: modalVisible,
          onRequestClose: function onRequestClose() {
            setModalVisible(!modalVisible);
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.centeredView,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.modalView,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.modalText,
                children: "Add Categorywise Budget"
              }), (0, _jsxRuntime.jsx)(_reactNativeElementDropdown.Dropdown, {
                style: styles.dropdown,
                placeholderStyle: styles.placeholderStyle,
                selectedTextStyle: styles.selectedTextStyle,
                inputSearchStyle: styles.inputSearchStyle,
                itemTextStyle: {
                  color: "black"
                },
                data: categories,
                search: true,
                maxHeight: 300,
                labelField: "label",
                valueField: "value",
                placeholder: "Select Category",
                searchPlaceholder: "Search...",
                value: "category",
                onChange: function onChange(item) {
                  setSelectedCategory(item.value);
                }
              }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
                style: styles.budgetAmountInput,
                onChangeText: function onChangeText(text) {
                  return setCategoryBudget(text);
                },
                value: categoryBudget,
                placeholder: "Enter Budget for selected category...",
                keyboardType: "numeric"
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: [styles.buttonModal, styles.buttonClose],
                onPress: addCategoryWiseBudget,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.textStyle,
                  children: "Add"
                })
              })]
            })
          })
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.buttonContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.button, categoryWiseBudget != null && categoryWiseBudget.length > 0 ? styles.enabled : styles.disabled],
          disabled: categoryWiseBudget != null && categoryWiseBudget.length > 0 ? false : true,
          onPress: confirmBudget,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.buttonText,
            children: "Set Budget"
          })
        })
      })]
    })
  });
};
var _default = Envelope;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  EnvelopeContainer: {
    padding: 5,
    backgroundColor: 'rgba(0,0,0,0.02)',
    borderRadius: 10,
    margin: 5
  },
  time: {
    padding: 4,
    flexDirection: 'row',
    justifyContent: 'space-around'
  },
  monthYear: {
    width: '50%',
    borderRadius: 10,
    paddingHorizontal: 10,
    height: 43,
    flexDirection: 'row',
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: 'rgba(0,0,0,0.2)'
  },
  monthYearText: {
    textAlign: "center"
  },
  monthlyIncContainer: {
    padding: 5,
    alignItems: "center"
  },
  monthlyInc: {
    margin: 5,
    fontSize: 18,
    fontWeight: "bold"
  },
  monthlyIncInput: {
    borderBottomColor: 'black',
    borderBottomWidth: 1,
    textAlign: "center",
    padding: 2
  },
  dropdown: {
    margin: 10,
    width: '90%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: 'center',
    borderRadius: 6,
    alignItems: 'center',
    paddingHorizontal: 10
  },
  dropDownStyle: {
    width: '85%',
    backgroundColor: 'rgba(0,0,0,0.2)',
    padding: 5,
    alignSelf: 'center',
    borderRadius: 6,
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  placeholderStyle: {
    fontSize: 14
  },
  selectedTextStyle: {
    fontSize: 14
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16,
    color: 'black'
  },
  categoryWiseBudgetContainer: {
    marginBottom: 5,
    marginHorizontal: 5,
    borderRadius: 10,
    height: "100%",
    backgroundColor: 'rgba(255,255,255,0.9)'
  },
  categoryWiseBudget: {
    height: "80%"
  },
  categoryWiseBudgetTitle: {
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderBottomColor: 'grey',
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
    width: "100%",
    padding: 10,
    flexDirection: "row",
    justifyContent: "space-between",
    paddingHorizontal: 10,
    height: 50,
    alignItems: "center"
  },
  categoryWiseBudgetTitleText: {
    fontSize: 15,
    fontWeight: "bold",
    color: "green"
  },
  budgetCategory: {
    height: 70,
    fontSize: 10,
    padding: 10,
    backgroundColor: 'rgba(0,0,0,0.11)',
    marginBottom: 2,
    flexDirection: "row",
    justifyContent: "space-between"
  },
  budgetCategoryEdit: {
    flexDirection: "row",
    width: "90%",
    justifyContent: "space-around"
  },
  budgetCategoryText: {
    fontWeight: "bold"
  },
  budgetCategoryCenter: {
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center"
  },
  noBudget: {
    padding: 10,
    fontSize: 15,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  },
  noBudgetText: {
    fontSize: 15,
    fontWeight: "bold",
    width: "50%"
  },
  buttonImg: {
    width: 25,
    height: 25,
    tintColor: "#cc1d10"
  },
  buttonContainer: {
    alignItems: "center"
  },
  button: {
    backgroundColor: "green",
    height: 45,
    width: "30%",
    padding: 10,
    alignItems: "center",
    borderRadius: 15
  },
  buttonText: {
    color: "white",
    fontWeight: "bold",
    fontSize: 15,
    textAlign: "center"
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22
  },
  modalView: {
    margin: 20,
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 35,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5
  },
  budgetAmountInput: {
    backgroundColor: 'rgba(0,0,0,0.1)',
    borderRadius: 5,
    padding: 8,
    marginBottom: 5
  },
  buttonModal: {
    borderRadius: 10,
    padding: 10,
    elevation: 2
  },
  buttonClose: {
    backgroundColor: 'green'
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  modalText: {
    marginBottom: 5,
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: 15
  },
  disabled: {
    opacity: 0.7
  },
  enabled: {
    opacity: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,